
STM32_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007360  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  0800751c  0800751c  0001751c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007564  08007564  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08007564  08007564  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007564  08007564  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007564  08007564  00017564  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007568  08007568  00017568  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800756c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000023c  2000000c  08007578  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000248  08007578  00020248  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015d90  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b2c  00000000  00000000  00035dcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001410  00000000  00000000  000388f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012c8  00000000  00000000  00039d08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00032ec2  00000000  00000000  0003afd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016e21  00000000  00000000  0006de92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001354bc  00000000  00000000  00084cb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001ba16f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005544  00000000  00000000  001ba1c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	2000000c 	.word	0x2000000c
 80001d8:	00000000 	.word	0x00000000
 80001dc:	08007504 	.word	0x08007504

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000010 	.word	0x20000010
 80001f8:	08007504 	.word	0x08007504

080001fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000200:	f000 ffbf 	bl	8001182 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000204:	f000 f80f 	bl	8000226 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000208:	f000 fa02 	bl	8000610 <MX_GPIO_Init>
  MX_FMC_Init();
 800020c:	f000 f99a 	bl	8000544 <MX_FMC_Init>
  MX_I2C1_Init();
 8000210:	f000 f8f4 	bl	80003fc <MX_I2C1_Init>
  MX_SDMMC1_SD_Init();
 8000214:	f000 f932 	bl	800047c <MX_SDMMC1_SD_Init>
  MX_SPI2_Init();
 8000218:	f000 f956 	bl	80004c8 <MX_SPI2_Init>
  MX_CAN1_Init();
 800021c:	f000 f8b8 	bl	8000390 <MX_CAN1_Init>
  MX_ADC1_Init();
 8000220:	f000 f850 	bl	80002c4 <MX_ADC1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000224:	e7fe      	b.n	8000224 <main+0x28>

08000226 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000226:	b580      	push	{r7, lr}
 8000228:	b096      	sub	sp, #88	; 0x58
 800022a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800022c:	f107 0314 	add.w	r3, r7, #20
 8000230:	2244      	movs	r2, #68	; 0x44
 8000232:	2100      	movs	r1, #0
 8000234:	4618      	mov	r0, r3
 8000236:	f007 f95d 	bl	80074f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800023a:	463b      	mov	r3, r7
 800023c:	2200      	movs	r2, #0
 800023e:	601a      	str	r2, [r3, #0]
 8000240:	605a      	str	r2, [r3, #4]
 8000242:	609a      	str	r2, [r3, #8]
 8000244:	60da      	str	r2, [r3, #12]
 8000246:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8000248:	2000      	movs	r0, #0
 800024a:	f002 fbed 	bl	8002a28 <HAL_PWREx_ControlVoltageScaling>
 800024e:	4603      	mov	r3, r0
 8000250:	2b00      	cmp	r3, #0
 8000252:	d001      	beq.n	8000258 <SystemClock_Config+0x32>
  {
    Error_Handler();
 8000254:	f000 fc2e 	bl	8000ab4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000258:	2301      	movs	r3, #1
 800025a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800025c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000260:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000262:	2302      	movs	r3, #2
 8000264:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000266:	2303      	movs	r3, #3
 8000268:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 2;
 800026a:	2302      	movs	r3, #2
 800026c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 30;
 800026e:	231e      	movs	r3, #30
 8000270:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000272:	2302      	movs	r3, #2
 8000274:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000276:	2302      	movs	r3, #2
 8000278:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800027a:	2302      	movs	r3, #2
 800027c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800027e:	f107 0314 	add.w	r3, r7, #20
 8000282:	4618      	mov	r0, r3
 8000284:	f002 fc84 	bl	8002b90 <HAL_RCC_OscConfig>
 8000288:	4603      	mov	r3, r0
 800028a:	2b00      	cmp	r3, #0
 800028c:	d001      	beq.n	8000292 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 800028e:	f000 fc11 	bl	8000ab4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000292:	230f      	movs	r3, #15
 8000294:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000296:	2303      	movs	r3, #3
 8000298:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800029a:	2300      	movs	r3, #0
 800029c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800029e:	2300      	movs	r3, #0
 80002a0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002a2:	2300      	movs	r3, #0
 80002a4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80002a6:	463b      	mov	r3, r7
 80002a8:	2105      	movs	r1, #5
 80002aa:	4618      	mov	r0, r3
 80002ac:	f003 f88a 	bl	80033c4 <HAL_RCC_ClockConfig>
 80002b0:	4603      	mov	r3, r0
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d001      	beq.n	80002ba <SystemClock_Config+0x94>
  {
    Error_Handler();
 80002b6:	f000 fbfd 	bl	8000ab4 <Error_Handler>
  }
}
 80002ba:	bf00      	nop
 80002bc:	3758      	adds	r7, #88	; 0x58
 80002be:	46bd      	mov	sp, r7
 80002c0:	bd80      	pop	{r7, pc}
	...

080002c4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	b086      	sub	sp, #24
 80002c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80002ca:	463b      	mov	r3, r7
 80002cc:	2200      	movs	r2, #0
 80002ce:	601a      	str	r2, [r3, #0]
 80002d0:	605a      	str	r2, [r3, #4]
 80002d2:	609a      	str	r2, [r3, #8]
 80002d4:	60da      	str	r2, [r3, #12]
 80002d6:	611a      	str	r2, [r3, #16]
 80002d8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80002da:	4b2a      	ldr	r3, [pc, #168]	; (8000384 <MX_ADC1_Init+0xc0>)
 80002dc:	4a2a      	ldr	r2, [pc, #168]	; (8000388 <MX_ADC1_Init+0xc4>)
 80002de:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80002e0:	4b28      	ldr	r3, [pc, #160]	; (8000384 <MX_ADC1_Init+0xc0>)
 80002e2:	2200      	movs	r2, #0
 80002e4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80002e6:	4b27      	ldr	r3, [pc, #156]	; (8000384 <MX_ADC1_Init+0xc0>)
 80002e8:	2200      	movs	r2, #0
 80002ea:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80002ec:	4b25      	ldr	r3, [pc, #148]	; (8000384 <MX_ADC1_Init+0xc0>)
 80002ee:	2200      	movs	r2, #0
 80002f0:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80002f2:	4b24      	ldr	r3, [pc, #144]	; (8000384 <MX_ADC1_Init+0xc0>)
 80002f4:	2200      	movs	r2, #0
 80002f6:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80002f8:	4b22      	ldr	r3, [pc, #136]	; (8000384 <MX_ADC1_Init+0xc0>)
 80002fa:	2204      	movs	r2, #4
 80002fc:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80002fe:	4b21      	ldr	r3, [pc, #132]	; (8000384 <MX_ADC1_Init+0xc0>)
 8000300:	2200      	movs	r2, #0
 8000302:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000304:	4b1f      	ldr	r3, [pc, #124]	; (8000384 <MX_ADC1_Init+0xc0>)
 8000306:	2200      	movs	r2, #0
 8000308:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800030a:	4b1e      	ldr	r3, [pc, #120]	; (8000384 <MX_ADC1_Init+0xc0>)
 800030c:	2201      	movs	r2, #1
 800030e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000310:	4b1c      	ldr	r3, [pc, #112]	; (8000384 <MX_ADC1_Init+0xc0>)
 8000312:	2200      	movs	r2, #0
 8000314:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000318:	4b1a      	ldr	r3, [pc, #104]	; (8000384 <MX_ADC1_Init+0xc0>)
 800031a:	2200      	movs	r2, #0
 800031c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800031e:	4b19      	ldr	r3, [pc, #100]	; (8000384 <MX_ADC1_Init+0xc0>)
 8000320:	2200      	movs	r2, #0
 8000322:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000324:	4b17      	ldr	r3, [pc, #92]	; (8000384 <MX_ADC1_Init+0xc0>)
 8000326:	2200      	movs	r2, #0
 8000328:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800032c:	4b15      	ldr	r3, [pc, #84]	; (8000384 <MX_ADC1_Init+0xc0>)
 800032e:	2200      	movs	r2, #0
 8000330:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000332:	4b14      	ldr	r3, [pc, #80]	; (8000384 <MX_ADC1_Init+0xc0>)
 8000334:	2200      	movs	r2, #0
 8000336:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.DFSDMConfig = ADC_DFSDM_MODE_ENABLE;
 800033a:	4b12      	ldr	r3, [pc, #72]	; (8000384 <MX_ADC1_Init+0xc0>)
 800033c:	2204      	movs	r2, #4
 800033e:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000340:	4810      	ldr	r0, [pc, #64]	; (8000384 <MX_ADC1_Init+0xc0>)
 8000342:	f001 f957 	bl	80015f4 <HAL_ADC_Init>
 8000346:	4603      	mov	r3, r0
 8000348:	2b00      	cmp	r3, #0
 800034a:	d001      	beq.n	8000350 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 800034c:	f000 fbb2 	bl	8000ab4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000350:	4b0e      	ldr	r3, [pc, #56]	; (800038c <MX_ADC1_Init+0xc8>)
 8000352:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000354:	2306      	movs	r3, #6
 8000356:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000358:	2300      	movs	r3, #0
 800035a:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800035c:	237f      	movs	r3, #127	; 0x7f
 800035e:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000360:	2304      	movs	r3, #4
 8000362:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000364:	2300      	movs	r3, #0
 8000366:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000368:	463b      	mov	r3, r7
 800036a:	4619      	mov	r1, r3
 800036c:	4805      	ldr	r0, [pc, #20]	; (8000384 <MX_ADC1_Init+0xc0>)
 800036e:	f001 fa8d 	bl	800188c <HAL_ADC_ConfigChannel>
 8000372:	4603      	mov	r3, r0
 8000374:	2b00      	cmp	r3, #0
 8000376:	d001      	beq.n	800037c <MX_ADC1_Init+0xb8>
  {
    Error_Handler();
 8000378:	f000 fb9c 	bl	8000ab4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800037c:	bf00      	nop
 800037e:	3718      	adds	r7, #24
 8000380:	46bd      	mov	sp, r7
 8000382:	bd80      	pop	{r7, pc}
 8000384:	20000028 	.word	0x20000028
 8000388:	50040000 	.word	0x50040000
 800038c:	19200040 	.word	0x19200040

08000390 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000394:	4b17      	ldr	r3, [pc, #92]	; (80003f4 <MX_CAN1_Init+0x64>)
 8000396:	4a18      	ldr	r2, [pc, #96]	; (80003f8 <MX_CAN1_Init+0x68>)
 8000398:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 20;
 800039a:	4b16      	ldr	r3, [pc, #88]	; (80003f4 <MX_CAN1_Init+0x64>)
 800039c:	2214      	movs	r2, #20
 800039e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80003a0:	4b14      	ldr	r3, [pc, #80]	; (80003f4 <MX_CAN1_Init+0x64>)
 80003a2:	2200      	movs	r2, #0
 80003a4:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80003a6:	4b13      	ldr	r3, [pc, #76]	; (80003f4 <MX_CAN1_Init+0x64>)
 80003a8:	2200      	movs	r2, #0
 80003aa:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_10TQ;
 80003ac:	4b11      	ldr	r3, [pc, #68]	; (80003f4 <MX_CAN1_Init+0x64>)
 80003ae:	f44f 2210 	mov.w	r2, #589824	; 0x90000
 80003b2:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 80003b4:	4b0f      	ldr	r3, [pc, #60]	; (80003f4 <MX_CAN1_Init+0x64>)
 80003b6:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 80003ba:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80003bc:	4b0d      	ldr	r3, [pc, #52]	; (80003f4 <MX_CAN1_Init+0x64>)
 80003be:	2200      	movs	r2, #0
 80003c0:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80003c2:	4b0c      	ldr	r3, [pc, #48]	; (80003f4 <MX_CAN1_Init+0x64>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80003c8:	4b0a      	ldr	r3, [pc, #40]	; (80003f4 <MX_CAN1_Init+0x64>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80003ce:	4b09      	ldr	r3, [pc, #36]	; (80003f4 <MX_CAN1_Init+0x64>)
 80003d0:	2200      	movs	r2, #0
 80003d2:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80003d4:	4b07      	ldr	r3, [pc, #28]	; (80003f4 <MX_CAN1_Init+0x64>)
 80003d6:	2200      	movs	r2, #0
 80003d8:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80003da:	4b06      	ldr	r3, [pc, #24]	; (80003f4 <MX_CAN1_Init+0x64>)
 80003dc:	2200      	movs	r2, #0
 80003de:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80003e0:	4804      	ldr	r0, [pc, #16]	; (80003f4 <MX_CAN1_Init+0x64>)
 80003e2:	f001 fe4f 	bl	8002084 <HAL_CAN_Init>
 80003e6:	4603      	mov	r3, r0
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d001      	beq.n	80003f0 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80003ec:	f000 fb62 	bl	8000ab4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80003f0:	bf00      	nop
 80003f2:	bd80      	pop	{r7, pc}
 80003f4:	20000090 	.word	0x20000090
 80003f8:	40006400 	.word	0x40006400

080003fc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000400:	4b1b      	ldr	r3, [pc, #108]	; (8000470 <MX_I2C1_Init+0x74>)
 8000402:	4a1c      	ldr	r2, [pc, #112]	; (8000474 <MX_I2C1_Init+0x78>)
 8000404:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 8000406:	4b1a      	ldr	r3, [pc, #104]	; (8000470 <MX_I2C1_Init+0x74>)
 8000408:	4a1b      	ldr	r2, [pc, #108]	; (8000478 <MX_I2C1_Init+0x7c>)
 800040a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800040c:	4b18      	ldr	r3, [pc, #96]	; (8000470 <MX_I2C1_Init+0x74>)
 800040e:	2200      	movs	r2, #0
 8000410:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000412:	4b17      	ldr	r3, [pc, #92]	; (8000470 <MX_I2C1_Init+0x74>)
 8000414:	2201      	movs	r2, #1
 8000416:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000418:	4b15      	ldr	r3, [pc, #84]	; (8000470 <MX_I2C1_Init+0x74>)
 800041a:	2200      	movs	r2, #0
 800041c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800041e:	4b14      	ldr	r3, [pc, #80]	; (8000470 <MX_I2C1_Init+0x74>)
 8000420:	2200      	movs	r2, #0
 8000422:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000424:	4b12      	ldr	r3, [pc, #72]	; (8000470 <MX_I2C1_Init+0x74>)
 8000426:	2200      	movs	r2, #0
 8000428:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800042a:	4b11      	ldr	r3, [pc, #68]	; (8000470 <MX_I2C1_Init+0x74>)
 800042c:	2200      	movs	r2, #0
 800042e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000430:	4b0f      	ldr	r3, [pc, #60]	; (8000470 <MX_I2C1_Init+0x74>)
 8000432:	2200      	movs	r2, #0
 8000434:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000436:	480e      	ldr	r0, [pc, #56]	; (8000470 <MX_I2C1_Init+0x74>)
 8000438:	f002 f9b0 	bl	800279c <HAL_I2C_Init>
 800043c:	4603      	mov	r3, r0
 800043e:	2b00      	cmp	r3, #0
 8000440:	d001      	beq.n	8000446 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000442:	f000 fb37 	bl	8000ab4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000446:	2100      	movs	r1, #0
 8000448:	4809      	ldr	r0, [pc, #36]	; (8000470 <MX_I2C1_Init+0x74>)
 800044a:	f002 fa36 	bl	80028ba <HAL_I2CEx_ConfigAnalogFilter>
 800044e:	4603      	mov	r3, r0
 8000450:	2b00      	cmp	r3, #0
 8000452:	d001      	beq.n	8000458 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000454:	f000 fb2e 	bl	8000ab4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000458:	2100      	movs	r1, #0
 800045a:	4805      	ldr	r0, [pc, #20]	; (8000470 <MX_I2C1_Init+0x74>)
 800045c:	f002 fa78 	bl	8002950 <HAL_I2CEx_ConfigDigitalFilter>
 8000460:	4603      	mov	r3, r0
 8000462:	2b00      	cmp	r3, #0
 8000464:	d001      	beq.n	800046a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000466:	f000 fb25 	bl	8000ab4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800046a:	bf00      	nop
 800046c:	bd80      	pop	{r7, pc}
 800046e:	bf00      	nop
 8000470:	200000b8 	.word	0x200000b8
 8000474:	40005400 	.word	0x40005400
 8000478:	307075b1 	.word	0x307075b1

0800047c <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000480:	4b0f      	ldr	r3, [pc, #60]	; (80004c0 <MX_SDMMC1_SD_Init+0x44>)
 8000482:	4a10      	ldr	r2, [pc, #64]	; (80004c4 <MX_SDMMC1_SD_Init+0x48>)
 8000484:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000486:	4b0e      	ldr	r3, [pc, #56]	; (80004c0 <MX_SDMMC1_SD_Init+0x44>)
 8000488:	2200      	movs	r2, #0
 800048a:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800048c:	4b0c      	ldr	r3, [pc, #48]	; (80004c0 <MX_SDMMC1_SD_Init+0x44>)
 800048e:	2200      	movs	r2, #0
 8000490:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8000492:	4b0b      	ldr	r3, [pc, #44]	; (80004c0 <MX_SDMMC1_SD_Init+0x44>)
 8000494:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000498:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800049a:	4b09      	ldr	r3, [pc, #36]	; (80004c0 <MX_SDMMC1_SD_Init+0x44>)
 800049c:	2200      	movs	r2, #0
 800049e:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 80004a0:	4b07      	ldr	r3, [pc, #28]	; (80004c0 <MX_SDMMC1_SD_Init+0x44>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	615a      	str	r2, [r3, #20]
  hsd1.Init.Transceiver = SDMMC_TRANSCEIVER_DISABLE;
 80004a6:	4b06      	ldr	r3, [pc, #24]	; (80004c0 <MX_SDMMC1_SD_Init+0x44>)
 80004a8:	2200      	movs	r2, #0
 80004aa:	619a      	str	r2, [r3, #24]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 80004ac:	4804      	ldr	r0, [pc, #16]	; (80004c0 <MX_SDMMC1_SD_Init+0x44>)
 80004ae:	f004 ffed 	bl	800548c <HAL_SD_Init>
 80004b2:	4603      	mov	r3, r0
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	d001      	beq.n	80004bc <MX_SDMMC1_SD_Init+0x40>
  {
    Error_Handler();
 80004b8:	f000 fafc 	bl	8000ab4 <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 80004bc:	bf00      	nop
 80004be:	bd80      	pop	{r7, pc}
 80004c0:	2000010c 	.word	0x2000010c
 80004c4:	50062400 	.word	0x50062400

080004c8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80004cc:	4b1b      	ldr	r3, [pc, #108]	; (800053c <MX_SPI2_Init+0x74>)
 80004ce:	4a1c      	ldr	r2, [pc, #112]	; (8000540 <MX_SPI2_Init+0x78>)
 80004d0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80004d2:	4b1a      	ldr	r3, [pc, #104]	; (800053c <MX_SPI2_Init+0x74>)
 80004d4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80004d8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80004da:	4b18      	ldr	r3, [pc, #96]	; (800053c <MX_SPI2_Init+0x74>)
 80004dc:	2200      	movs	r2, #0
 80004de:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 80004e0:	4b16      	ldr	r3, [pc, #88]	; (800053c <MX_SPI2_Init+0x74>)
 80004e2:	f44f 7240 	mov.w	r2, #768	; 0x300
 80004e6:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80004e8:	4b14      	ldr	r3, [pc, #80]	; (800053c <MX_SPI2_Init+0x74>)
 80004ea:	2200      	movs	r2, #0
 80004ec:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80004ee:	4b13      	ldr	r3, [pc, #76]	; (800053c <MX_SPI2_Init+0x74>)
 80004f0:	2200      	movs	r2, #0
 80004f2:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80004f4:	4b11      	ldr	r3, [pc, #68]	; (800053c <MX_SPI2_Init+0x74>)
 80004f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80004fa:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80004fc:	4b0f      	ldr	r3, [pc, #60]	; (800053c <MX_SPI2_Init+0x74>)
 80004fe:	2208      	movs	r2, #8
 8000500:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000502:	4b0e      	ldr	r3, [pc, #56]	; (800053c <MX_SPI2_Init+0x74>)
 8000504:	2200      	movs	r2, #0
 8000506:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000508:	4b0c      	ldr	r3, [pc, #48]	; (800053c <MX_SPI2_Init+0x74>)
 800050a:	2200      	movs	r2, #0
 800050c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800050e:	4b0b      	ldr	r3, [pc, #44]	; (800053c <MX_SPI2_Init+0x74>)
 8000510:	2200      	movs	r2, #0
 8000512:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000514:	4b09      	ldr	r3, [pc, #36]	; (800053c <MX_SPI2_Init+0x74>)
 8000516:	2207      	movs	r2, #7
 8000518:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800051a:	4b08      	ldr	r3, [pc, #32]	; (800053c <MX_SPI2_Init+0x74>)
 800051c:	2200      	movs	r2, #0
 800051e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000520:	4b06      	ldr	r3, [pc, #24]	; (800053c <MX_SPI2_Init+0x74>)
 8000522:	2208      	movs	r2, #8
 8000524:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000526:	4805      	ldr	r0, [pc, #20]	; (800053c <MX_SPI2_Init+0x74>)
 8000528:	f006 f89b 	bl	8006662 <HAL_SPI_Init>
 800052c:	4603      	mov	r3, r0
 800052e:	2b00      	cmp	r3, #0
 8000530:	d001      	beq.n	8000536 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000532:	f000 fabf 	bl	8000ab4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000536:	bf00      	nop
 8000538:	bd80      	pop	{r7, pc}
 800053a:	bf00      	nop
 800053c:	2000018c 	.word	0x2000018c
 8000540:	40003800 	.word	0x40003800

08000544 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b088      	sub	sp, #32
 8000548:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 800054a:	463b      	mov	r3, r7
 800054c:	2220      	movs	r2, #32
 800054e:	2100      	movs	r1, #0
 8000550:	4618      	mov	r0, r3
 8000552:	f006 ffcf 	bl	80074f4 <memset>

  /* USER CODE END FMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 8000556:	4b2c      	ldr	r3, [pc, #176]	; (8000608 <MX_FMC_Init+0xc4>)
 8000558:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 800055c:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 800055e:	4b2a      	ldr	r3, [pc, #168]	; (8000608 <MX_FMC_Init+0xc4>)
 8000560:	4a2a      	ldr	r2, [pc, #168]	; (800060c <MX_FMC_Init+0xc8>)
 8000562:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FMC_NORSRAM_BANK1;
 8000564:	4b28      	ldr	r3, [pc, #160]	; (8000608 <MX_FMC_Init+0xc4>)
 8000566:	2200      	movs	r2, #0
 8000568:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 800056a:	4b27      	ldr	r3, [pc, #156]	; (8000608 <MX_FMC_Init+0xc4>)
 800056c:	2200      	movs	r2, #0
 800056e:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FMC_MEMORY_TYPE_PSRAM;
 8000570:	4b25      	ldr	r3, [pc, #148]	; (8000608 <MX_FMC_Init+0xc4>)
 8000572:	2204      	movs	r2, #4
 8000574:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000576:	4b24      	ldr	r3, [pc, #144]	; (8000608 <MX_FMC_Init+0xc4>)
 8000578:	2210      	movs	r2, #16
 800057a:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_ENABLE;
 800057c:	4b22      	ldr	r3, [pc, #136]	; (8000608 <MX_FMC_Init+0xc4>)
 800057e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000582:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 8000584:	4b20      	ldr	r3, [pc, #128]	; (8000608 <MX_FMC_Init+0xc4>)
 8000586:	2200      	movs	r2, #0
 8000588:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 800058a:	4b1f      	ldr	r3, [pc, #124]	; (8000608 <MX_FMC_Init+0xc4>)
 800058c:	2200      	movs	r2, #0
 800058e:	621a      	str	r2, [r3, #32]
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_DISABLE;
 8000590:	4b1d      	ldr	r3, [pc, #116]	; (8000608 <MX_FMC_Init+0xc4>)
 8000592:	2200      	movs	r2, #0
 8000594:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_ENABLE;
 8000596:	4b1c      	ldr	r3, [pc, #112]	; (8000608 <MX_FMC_Init+0xc4>)
 8000598:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800059c:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 800059e:	4b1a      	ldr	r3, [pc, #104]	; (8000608 <MX_FMC_Init+0xc4>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 80005a4:	4b18      	ldr	r3, [pc, #96]	; (8000608 <MX_FMC_Init+0xc4>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.WriteBurst = FMC_WRITE_BURST_ENABLE;
 80005aa:	4b17      	ldr	r3, [pc, #92]	; (8000608 <MX_FMC_Init+0xc4>)
 80005ac:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80005b0:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 80005b2:	4b15      	ldr	r3, [pc, #84]	; (8000608 <MX_FMC_Init+0xc4>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 80005b8:	4b13      	ldr	r3, [pc, #76]	; (8000608 <MX_FMC_Init+0xc4>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.NBLSetupTime = 0;
 80005be:	4b12      	ldr	r3, [pc, #72]	; (8000608 <MX_FMC_Init+0xc4>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	645a      	str	r2, [r3, #68]	; 0x44
  hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 80005c4:	4b10      	ldr	r3, [pc, #64]	; (8000608 <MX_FMC_Init+0xc4>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	641a      	str	r2, [r3, #64]	; 0x40
  /* Timing */
  Timing.AddressSetupTime = 15;
 80005ca:	230f      	movs	r3, #15
 80005cc:	603b      	str	r3, [r7, #0]
  Timing.AddressHoldTime = 15;
 80005ce:	230f      	movs	r3, #15
 80005d0:	607b      	str	r3, [r7, #4]
  Timing.DataSetupTime = 255;
 80005d2:	23ff      	movs	r3, #255	; 0xff
 80005d4:	60bb      	str	r3, [r7, #8]
  Timing.DataHoldTime = 0;
 80005d6:	2300      	movs	r3, #0
 80005d8:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 80005da:	230f      	movs	r3, #15
 80005dc:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 80005de:	2310      	movs	r3, #16
 80005e0:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 2;
 80005e2:	2302      	movs	r3, #2
 80005e4:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 80005e6:	2300      	movs	r3, #0
 80005e8:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 80005ea:	463b      	mov	r3, r7
 80005ec:	2200      	movs	r2, #0
 80005ee:	4619      	mov	r1, r3
 80005f0:	4805      	ldr	r0, [pc, #20]	; (8000608 <MX_FMC_Init+0xc4>)
 80005f2:	f006 f8d9 	bl	80067a8 <HAL_SRAM_Init>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d001      	beq.n	8000600 <MX_FMC_Init+0xbc>
  {
    Error_Handler( );
 80005fc:	f000 fa5a 	bl	8000ab4 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000600:	bf00      	nop
 8000602:	3720      	adds	r7, #32
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}
 8000608:	200001f0 	.word	0x200001f0
 800060c:	a0000104 	.word	0xa0000104

08000610 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b08e      	sub	sp, #56	; 0x38
 8000614:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000616:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800061a:	2200      	movs	r2, #0
 800061c:	601a      	str	r2, [r3, #0]
 800061e:	605a      	str	r2, [r3, #4]
 8000620:	609a      	str	r2, [r3, #8]
 8000622:	60da      	str	r2, [r3, #12]
 8000624:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000626:	4bb2      	ldr	r3, [pc, #712]	; (80008f0 <MX_GPIO_Init+0x2e0>)
 8000628:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800062a:	4ab1      	ldr	r2, [pc, #708]	; (80008f0 <MX_GPIO_Init+0x2e0>)
 800062c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000630:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000632:	4baf      	ldr	r3, [pc, #700]	; (80008f0 <MX_GPIO_Init+0x2e0>)
 8000634:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000636:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800063a:	623b      	str	r3, [r7, #32]
 800063c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800063e:	4bac      	ldr	r3, [pc, #688]	; (80008f0 <MX_GPIO_Init+0x2e0>)
 8000640:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000642:	4aab      	ldr	r2, [pc, #684]	; (80008f0 <MX_GPIO_Init+0x2e0>)
 8000644:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000648:	64d3      	str	r3, [r2, #76]	; 0x4c
 800064a:	4ba9      	ldr	r3, [pc, #676]	; (80008f0 <MX_GPIO_Init+0x2e0>)
 800064c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800064e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000652:	61fb      	str	r3, [r7, #28]
 8000654:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000656:	4ba6      	ldr	r3, [pc, #664]	; (80008f0 <MX_GPIO_Init+0x2e0>)
 8000658:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800065a:	4aa5      	ldr	r2, [pc, #660]	; (80008f0 <MX_GPIO_Init+0x2e0>)
 800065c:	f043 0310 	orr.w	r3, r3, #16
 8000660:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000662:	4ba3      	ldr	r3, [pc, #652]	; (80008f0 <MX_GPIO_Init+0x2e0>)
 8000664:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000666:	f003 0310 	and.w	r3, r3, #16
 800066a:	61bb      	str	r3, [r7, #24]
 800066c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800066e:	4ba0      	ldr	r3, [pc, #640]	; (80008f0 <MX_GPIO_Init+0x2e0>)
 8000670:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000672:	4a9f      	ldr	r2, [pc, #636]	; (80008f0 <MX_GPIO_Init+0x2e0>)
 8000674:	f043 0302 	orr.w	r3, r3, #2
 8000678:	64d3      	str	r3, [r2, #76]	; 0x4c
 800067a:	4b9d      	ldr	r3, [pc, #628]	; (80008f0 <MX_GPIO_Init+0x2e0>)
 800067c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800067e:	f003 0302 	and.w	r3, r3, #2
 8000682:	617b      	str	r3, [r7, #20]
 8000684:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000686:	4b9a      	ldr	r3, [pc, #616]	; (80008f0 <MX_GPIO_Init+0x2e0>)
 8000688:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800068a:	4a99      	ldr	r2, [pc, #612]	; (80008f0 <MX_GPIO_Init+0x2e0>)
 800068c:	f043 0301 	orr.w	r3, r3, #1
 8000690:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000692:	4b97      	ldr	r3, [pc, #604]	; (80008f0 <MX_GPIO_Init+0x2e0>)
 8000694:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000696:	f003 0301 	and.w	r3, r3, #1
 800069a:	613b      	str	r3, [r7, #16]
 800069c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800069e:	4b94      	ldr	r3, [pc, #592]	; (80008f0 <MX_GPIO_Init+0x2e0>)
 80006a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006a2:	4a93      	ldr	r2, [pc, #588]	; (80008f0 <MX_GPIO_Init+0x2e0>)
 80006a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006aa:	4b91      	ldr	r3, [pc, #580]	; (80008f0 <MX_GPIO_Init+0x2e0>)
 80006ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006b2:	60fb      	str	r3, [r7, #12]
 80006b4:	68fb      	ldr	r3, [r7, #12]
  HAL_PWREx_EnableVddIO2();
 80006b6:	f002 fa5b 	bl	8002b70 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006ba:	4b8d      	ldr	r3, [pc, #564]	; (80008f0 <MX_GPIO_Init+0x2e0>)
 80006bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006be:	4a8c      	ldr	r2, [pc, #560]	; (80008f0 <MX_GPIO_Init+0x2e0>)
 80006c0:	f043 0308 	orr.w	r3, r3, #8
 80006c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006c6:	4b8a      	ldr	r3, [pc, #552]	; (80008f0 <MX_GPIO_Init+0x2e0>)
 80006c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ca:	f003 0308 	and.w	r3, r3, #8
 80006ce:	60bb      	str	r3, [r7, #8]
 80006d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006d2:	4b87      	ldr	r3, [pc, #540]	; (80008f0 <MX_GPIO_Init+0x2e0>)
 80006d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006d6:	4a86      	ldr	r2, [pc, #536]	; (80008f0 <MX_GPIO_Init+0x2e0>)
 80006d8:	f043 0304 	orr.w	r3, r3, #4
 80006dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006de:	4b84      	ldr	r3, [pc, #528]	; (80008f0 <MX_GPIO_Init+0x2e0>)
 80006e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006e2:	f003 0304 	and.w	r3, r3, #4
 80006e6:	607b      	str	r3, [r7, #4]
 80006e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80006ea:	4b81      	ldr	r3, [pc, #516]	; (80008f0 <MX_GPIO_Init+0x2e0>)
 80006ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ee:	4a80      	ldr	r2, [pc, #512]	; (80008f0 <MX_GPIO_Init+0x2e0>)
 80006f0:	f043 0320 	orr.w	r3, r3, #32
 80006f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006f6:	4b7e      	ldr	r3, [pc, #504]	; (80008f0 <MX_GPIO_Init+0x2e0>)
 80006f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006fa:	f003 0320 	and.w	r3, r3, #32
 80006fe:	603b      	str	r3, [r7, #0]
 8000700:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, MIC_VDD_Pin|DSI_SPI_USART_CS_Pin|LED_GREEN_Pin, GPIO_PIN_RESET);
 8000702:	2200      	movs	r2, #0
 8000704:	f244 0114 	movw	r1, #16404	; 0x4014
 8000708:	487a      	ldr	r0, [pc, #488]	; (80008f4 <MX_GPIO_Init+0x2e4>)
 800070a:	f002 f82f 	bl	800276c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(JOY_SEL_GPIO_Port, JOY_SEL_Pin, GPIO_PIN_RESET);
 800070e:	2200      	movs	r2, #0
 8000710:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000714:	4878      	ldr	r0, [pc, #480]	; (80008f8 <MX_GPIO_Init+0x2e8>)
 8000716:	f002 f829 	bl	800276c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_RESET);
 800071a:	2200      	movs	r2, #0
 800071c:	2140      	movs	r1, #64	; 0x40
 800071e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000722:	f002 f823 	bl	800276c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MFX_WAKEUP_GPIO_Port, MFX_WAKEUP_Pin, GPIO_PIN_RESET);
 8000726:	2200      	movs	r2, #0
 8000728:	2104      	movs	r1, #4
 800072a:	4874      	ldr	r0, [pc, #464]	; (80008fc <MX_GPIO_Init+0x2ec>)
 800072c:	f002 f81e 	bl	800276c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OCTOSPIM_P2_IO1_Pin OCTOSPIM_P2_IO2_Pin OCTOSPIM_P2_CLK_Pin OCTOSPIM_P2_IO0_Pin */
  GPIO_InitStruct.Pin = OCTOSPIM_P2_IO1_Pin|OCTOSPIM_P2_IO2_Pin|OCTOSPIM_P2_CLK_Pin|OCTOSPIM_P2_IO0_Pin;
 8000730:	f44f 6364 	mov.w	r3, #3648	; 0xe40
 8000734:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000736:	2302      	movs	r3, #2
 8000738:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073a:	2300      	movs	r3, #0
 800073c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800073e:	2303      	movs	r3, #3
 8000740:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPIM_P2;
 8000742:	2305      	movs	r3, #5
 8000744:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000746:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800074a:	4619      	mov	r1, r3
 800074c:	486c      	ldr	r0, [pc, #432]	; (8000900 <MX_GPIO_Init+0x2f0>)
 800074e:	f001 fe7b 	bl	8002448 <HAL_GPIO_Init>

  /*Configure GPIO pins : MIC_VDD_Pin DSI_SPI_USART_CS_Pin LED_GREEN_Pin */
  GPIO_InitStruct.Pin = MIC_VDD_Pin|DSI_SPI_USART_CS_Pin|LED_GREEN_Pin;
 8000752:	f244 0314 	movw	r3, #16404	; 0x4014
 8000756:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000758:	2301      	movs	r3, #1
 800075a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075c:	2300      	movs	r3, #0
 800075e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000760:	2300      	movs	r3, #0
 8000762:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000764:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000768:	4619      	mov	r1, r3
 800076a:	4862      	ldr	r0, [pc, #392]	; (80008f4 <MX_GPIO_Init+0x2e4>)
 800076c:	f001 fe6c 	bl	8002448 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8000770:	2310      	movs	r3, #16
 8000772:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000774:	2302      	movs	r3, #2
 8000776:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000778:	2300      	movs	r3, #0
 800077a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800077c:	2300      	movs	r3, #0
 800077e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000780:	2302      	movs	r3, #2
 8000782:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8000784:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000788:	4619      	mov	r1, r3
 800078a:	485c      	ldr	r0, [pc, #368]	; (80008fc <MX_GPIO_Init+0x2ec>)
 800078c:	f001 fe5c 	bl	8002448 <HAL_GPIO_Init>

  /*Configure GPIO pin : USART3_RTS_Pin */
  GPIO_InitStruct.Pin = USART3_RTS_Pin;
 8000790:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000794:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000796:	2302      	movs	r3, #2
 8000798:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079a:	2300      	movs	r3, #0
 800079c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800079e:	2303      	movs	r3, #3
 80007a0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80007a2:	2307      	movs	r3, #7
 80007a4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USART3_RTS_GPIO_Port, &GPIO_InitStruct);
 80007a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007aa:	4619      	mov	r1, r3
 80007ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007b0:	f001 fe4a 	bl	8002448 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D7_Pin DCMI_D5_Pin DCMI_VSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_D7_Pin|DCMI_D5_Pin|DCMI_VSYNC_Pin;
 80007b4:	23b0      	movs	r3, #176	; 0xb0
 80007b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007b8:	2302      	movs	r3, #2
 80007ba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007bc:	2300      	movs	r3, #0
 80007be:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c0:	2300      	movs	r3, #0
 80007c2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 80007c4:	230a      	movs	r3, #10
 80007c6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80007c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007cc:	4619      	mov	r1, r3
 80007ce:	484c      	ldr	r0, [pc, #304]	; (8000900 <MX_GPIO_Init+0x2f0>)
 80007d0:	f001 fe3a 	bl	8002448 <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI1_SDB_Pin SAI1_FSA_Pin */
  GPIO_InitStruct.Pin = SAI1_SDB_Pin|SAI1_FSA_Pin;
 80007d4:	f44f 7308 	mov.w	r3, #544	; 0x220
 80007d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007da:	2302      	movs	r3, #2
 80007dc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007de:	2300      	movs	r3, #0
 80007e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e2:	2300      	movs	r3, #0
 80007e4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 80007e6:	230d      	movs	r3, #13
 80007e8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007ee:	4619      	mov	r1, r3
 80007f0:	4842      	ldr	r0, [pc, #264]	; (80008fc <MX_GPIO_Init+0x2ec>)
 80007f2:	f001 fe29 	bl	8002448 <HAL_GPIO_Init>

  /*Configure GPIO pins : OCTOSPIM_P2_IO6_Pin OCTOSPIM_P2_DQS_Pin OCTOSPIM_P2_IO7_Pin OCTOSPIM_P2_CS_Pin */
  GPIO_InitStruct.Pin = OCTOSPIM_P2_IO6_Pin|OCTOSPIM_P2_DQS_Pin|OCTOSPIM_P2_IO7_Pin|OCTOSPIM_P2_CS_Pin;
 80007f6:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 80007fa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007fc:	2302      	movs	r3, #2
 80007fe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000800:	2300      	movs	r3, #0
 8000802:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000804:	2303      	movs	r3, #3
 8000806:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPIM_P2;
 8000808:	2305      	movs	r3, #5
 800080a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800080c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000810:	4619      	mov	r1, r3
 8000812:	483c      	ldr	r0, [pc, #240]	; (8000904 <MX_GPIO_Init+0x2f4>)
 8000814:	f001 fe18 	bl	8002448 <HAL_GPIO_Init>

  /*Configure GPIO pin : MFX_IRQ_OUT_Pin */
  GPIO_InitStruct.Pin = MFX_IRQ_OUT_Pin;
 8000818:	2302      	movs	r3, #2
 800081a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800081c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000820:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000822:	2300      	movs	r3, #0
 8000824:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(MFX_IRQ_OUT_GPIO_Port, &GPIO_InitStruct);
 8000826:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800082a:	4619      	mov	r1, r3
 800082c:	4834      	ldr	r0, [pc, #208]	; (8000900 <MX_GPIO_Init+0x2f0>)
 800082e:	f001 fe0b 	bl	8002448 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D3_Pin DCMI_PIXCLK_Pin DCMI_D2_Pin */
  GPIO_InitStruct.Pin = DCMI_D3_Pin|DCMI_PIXCLK_Pin|DCMI_D2_Pin;
 8000832:	f44f 53c1 	mov.w	r3, #6176	; 0x1820
 8000836:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000838:	2302      	movs	r3, #2
 800083a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083c:	2300      	movs	r3, #0
 800083e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000840:	2300      	movs	r3, #0
 8000842:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 8000844:	230a      	movs	r3, #10
 8000846:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000848:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800084c:	4619      	mov	r1, r3
 800084e:	4829      	ldr	r0, [pc, #164]	; (80008f4 <MX_GPIO_Init+0x2e4>)
 8000850:	f001 fdfa 	bl	8002448 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D9_Pin;
 8000854:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000858:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800085a:	2302      	movs	r3, #2
 800085c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085e:	2300      	movs	r3, #0
 8000860:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000862:	2300      	movs	r3, #0
 8000864:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8000866:	2303      	movs	r3, #3
 8000868:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D9_GPIO_Port, &GPIO_InitStruct);
 800086a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800086e:	4619      	mov	r1, r3
 8000870:	4820      	ldr	r0, [pc, #128]	; (80008f4 <MX_GPIO_Init+0x2e4>)
 8000872:	f001 fde9 	bl	8002448 <HAL_GPIO_Init>

  /*Configure GPIO pins : OCTOPSIM_P2_IO4_Pin OCTOSPIM_P2_IO5_Pin OCTOSPI_P2_IO3_Pin */
  GPIO_InitStruct.Pin = OCTOPSIM_P2_IO4_Pin|OCTOSPIM_P2_IO5_Pin|OCTOSPI_P2_IO3_Pin;
 8000876:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800087a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800087c:	2302      	movs	r3, #2
 800087e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000880:	2300      	movs	r3, #0
 8000882:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000884:	2303      	movs	r3, #3
 8000886:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPIM_P2;
 8000888:	2305      	movs	r3, #5
 800088a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800088c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000890:	4619      	mov	r1, r3
 8000892:	4818      	ldr	r0, [pc, #96]	; (80008f4 <MX_GPIO_Init+0x2e4>)
 8000894:	f001 fdd8 	bl	8002448 <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI1_MCKA_Pin SAI1_SDA_Pin SAI1_SCKA_Pin */
  GPIO_InitStruct.Pin = SAI1_MCKA_Pin|SAI1_SDA_Pin|SAI1_SCKA_Pin;
 8000898:	2364      	movs	r3, #100	; 0x64
 800089a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800089c:	2302      	movs	r3, #2
 800089e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a0:	2300      	movs	r3, #0
 80008a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a4:	2300      	movs	r3, #0
 80008a6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 80008a8:	230d      	movs	r3, #13
 80008aa:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80008ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008b0:	4619      	mov	r1, r3
 80008b2:	4815      	ldr	r0, [pc, #84]	; (8000908 <MX_GPIO_Init+0x2f8>)
 80008b4:	f001 fdc8 	bl	8002448 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTGFS_ID_Pin */
  GPIO_InitStruct.Pin = USB_OTGFS_ID_Pin;
 80008b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008be:	2302      	movs	r3, #2
 80008c0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c2:	2300      	movs	r3, #0
 80008c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008c6:	2303      	movs	r3, #3
 80008c8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80008ca:	230a      	movs	r3, #10
 80008cc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_OTGFS_ID_GPIO_Port, &GPIO_InitStruct);
 80008ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008d2:	4619      	mov	r1, r3
 80008d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008d8:	f001 fdb6 	bl	8002448 <HAL_GPIO_Init>

  /*Configure GPIO pin : JOY_SEL_Pin */
  GPIO_InitStruct.Pin = JOY_SEL_Pin;
 80008dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e2:	2301      	movs	r3, #1
 80008e4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e6:	2300      	movs	r3, #0
 80008e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ea:	2300      	movs	r3, #0
 80008ec:	633b      	str	r3, [r7, #48]	; 0x30
 80008ee:	e00d      	b.n	800090c <MX_GPIO_Init+0x2fc>
 80008f0:	40021000 	.word	0x40021000
 80008f4:	48001c00 	.word	0x48001c00
 80008f8:	48000800 	.word	0x48000800
 80008fc:	48000400 	.word	0x48000400
 8000900:	48002000 	.word	0x48002000
 8000904:	48001800 	.word	0x48001800
 8000908:	48001000 	.word	0x48001000
  HAL_GPIO_Init(JOY_SEL_GPIO_Port, &GPIO_InitStruct);
 800090c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000910:	4619      	mov	r1, r3
 8000912:	4864      	ldr	r0, [pc, #400]	; (8000aa4 <MX_GPIO_Init+0x494>)
 8000914:	f001 fd98 	bl	8002448 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_14_Pin ARD_15_Pin */
  GPIO_InitStruct.Pin = ARD_14_Pin|ARD_15_Pin;
 8000918:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800091c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800091e:	2312      	movs	r3, #18
 8000920:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000922:	2300      	movs	r3, #0
 8000924:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000926:	2303      	movs	r3, #3
 8000928:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800092a:	2304      	movs	r3, #4
 800092c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800092e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000932:	4619      	mov	r1, r3
 8000934:	485c      	ldr	r0, [pc, #368]	; (8000aa8 <MX_GPIO_Init+0x498>)
 8000936:	f001 fd87 	bl	8002448 <HAL_GPIO_Init>

  /*Configure GPIO pin : STMOD_INT_Pin */
  GPIO_InitStruct.Pin = STMOD_INT_Pin;
 800093a:	2340      	movs	r3, #64	; 0x40
 800093c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800093e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000942:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000944:	2300      	movs	r3, #0
 8000946:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(STMOD_INT_GPIO_Port, &GPIO_InitStruct);
 8000948:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800094c:	4619      	mov	r1, r3
 800094e:	4855      	ldr	r0, [pc, #340]	; (8000aa4 <MX_GPIO_Init+0x494>)
 8000950:	f001 fd7a 	bl	8002448 <HAL_GPIO_Init>

  /*Configure GPIO pins : DFDATIN3_Pin DF_CKOUT_Pin */
  GPIO_InitStruct.Pin = DFDATIN3_Pin|DF_CKOUT_Pin;
 8000954:	2384      	movs	r3, #132	; 0x84
 8000956:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000958:	2302      	movs	r3, #2
 800095a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095c:	2300      	movs	r3, #0
 800095e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000960:	2300      	movs	r3, #0
 8000962:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000964:	2306      	movs	r3, #6
 8000966:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000968:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800096c:	4619      	mov	r1, r3
 800096e:	484d      	ldr	r0, [pc, #308]	; (8000aa4 <MX_GPIO_Init+0x494>)
 8000970:	f001 fd6a 	bl	8002448 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART3_RX_Pin USART3_TX_Pin */
  GPIO_InitStruct.Pin = USART3_RX_Pin|USART3_TX_Pin;
 8000974:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000978:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800097a:	2302      	movs	r3, #2
 800097c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097e:	2300      	movs	r3, #0
 8000980:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000982:	2303      	movs	r3, #3
 8000984:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000986:	2307      	movs	r3, #7
 8000988:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800098a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800098e:	4619      	mov	r1, r3
 8000990:	4846      	ldr	r0, [pc, #280]	; (8000aac <MX_GPIO_Init+0x49c>)
 8000992:	f001 fd59 	bl	8002448 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D0_Pin ARD_D1_Pin */
  GPIO_InitStruct.Pin = ARD_D0_Pin|ARD_D1_Pin;
 8000996:	2303      	movs	r3, #3
 8000998:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800099a:	2302      	movs	r3, #2
 800099c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099e:	2300      	movs	r3, #0
 80009a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009a2:	2303      	movs	r3, #3
 80009a4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80009a6:	2308      	movs	r3, #8
 80009a8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009ae:	4619      	mov	r1, r3
 80009b0:	483c      	ldr	r0, [pc, #240]	; (8000aa4 <MX_GPIO_Init+0x494>)
 80009b2:	f001 fd49 	bl	8002448 <HAL_GPIO_Init>

  /*Configure GPIO pin : STMOD_PWM_Pin */
  GPIO_InitStruct.Pin = STMOD_PWM_Pin;
 80009b6:	2320      	movs	r3, #32
 80009b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ba:	2302      	movs	r3, #2
 80009bc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009be:	2300      	movs	r3, #0
 80009c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c2:	2300      	movs	r3, #0
 80009c4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80009c6:	2301      	movs	r3, #1
 80009c8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(STMOD_PWM_GPIO_Port, &GPIO_InitStruct);
 80009ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009ce:	4619      	mov	r1, r3
 80009d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009d4:	f001 fd38 	bl	8002448 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_CS_Pin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin;
 80009d8:	2340      	movs	r3, #64	; 0x40
 80009da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009dc:	2301      	movs	r3, #1
 80009de:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e0:	2300      	movs	r3, #0
 80009e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e4:	2300      	movs	r3, #0
 80009e6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 80009e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009ec:	4619      	mov	r1, r3
 80009ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009f2:	f001 fd29 	bl	8002448 <HAL_GPIO_Init>

  /*Configure GPIO pin : USART2_RX_Pin */
  GPIO_InitStruct.Pin = USART2_RX_Pin;
 80009f6:	2308      	movs	r3, #8
 80009f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009fa:	2302      	movs	r3, #2
 80009fc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fe:	2300      	movs	r3, #0
 8000a00:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a02:	2303      	movs	r3, #3
 8000a04:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a06:	2307      	movs	r3, #7
 8000a08:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USART2_RX_GPIO_Port, &GPIO_InitStruct);
 8000a0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a0e:	4619      	mov	r1, r3
 8000a10:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a14:	f001 fd18 	bl	8002448 <HAL_GPIO_Init>

  /*Configure GPIO pin : DSI_TE_Pin */
  GPIO_InitStruct.Pin = DSI_TE_Pin;
 8000a18:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000a1c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a1e:	2302      	movs	r3, #2
 8000a20:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a22:	2300      	movs	r3, #0
 8000a24:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a26:	2300      	movs	r3, #0
 8000a28:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_DSI;
 8000a2a:	230b      	movs	r3, #11
 8000a2c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(DSI_TE_GPIO_Port, &GPIO_InitStruct);
 8000a2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a32:	4619      	mov	r1, r3
 8000a34:	481e      	ldr	r0, [pc, #120]	; (8000ab0 <MX_GPIO_Init+0x4a0>)
 8000a36:	f001 fd07 	bl	8002448 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_HSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin;
 8000a3a:	2310      	movs	r3, #16
 8000a3c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a3e:	2302      	movs	r3, #2
 8000a40:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a42:	2300      	movs	r3, #0
 8000a44:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a46:	2300      	movs	r3, #0
 8000a48:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 8000a4a:	230a      	movs	r3, #10
 8000a4c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(DCMI_HSYNC_GPIO_Port, &GPIO_InitStruct);
 8000a4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a52:	4619      	mov	r1, r3
 8000a54:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a58:	f001 fcf6 	bl	8002448 <HAL_GPIO_Init>

  /*Configure GPIO pin : MFX_WAKEUP_Pin */
  GPIO_InitStruct.Pin = MFX_WAKEUP_Pin;
 8000a5c:	2304      	movs	r3, #4
 8000a5e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a60:	2301      	movs	r3, #1
 8000a62:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a64:	2300      	movs	r3, #0
 8000a66:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(MFX_WAKEUP_GPIO_Port, &GPIO_InitStruct);
 8000a6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a70:	4619      	mov	r1, r3
 8000a72:	480e      	ldr	r0, [pc, #56]	; (8000aac <MX_GPIO_Init+0x49c>)
 8000a74:	f001 fce8 	bl	8002448 <HAL_GPIO_Init>

  /*Configure GPIO pin : DFDATIN1_Pin */
  GPIO_InitStruct.Pin = DFDATIN1_Pin;
 8000a78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a7c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a7e:	2302      	movs	r3, #2
 8000a80:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a82:	2300      	movs	r3, #0
 8000a84:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a86:	2300      	movs	r3, #0
 8000a88:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000a8a:	2306      	movs	r3, #6
 8000a8c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(DFDATIN1_GPIO_Port, &GPIO_InitStruct);
 8000a8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a92:	4619      	mov	r1, r3
 8000a94:	4805      	ldr	r0, [pc, #20]	; (8000aac <MX_GPIO_Init+0x49c>)
 8000a96:	f001 fcd7 	bl	8002448 <HAL_GPIO_Init>

}
 8000a9a:	bf00      	nop
 8000a9c:	3738      	adds	r7, #56	; 0x38
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	48000800 	.word	0x48000800
 8000aa8:	48001800 	.word	0x48001800
 8000aac:	48000400 	.word	0x48000400
 8000ab0:	48001400 	.word	0x48001400

08000ab4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ab8:	b672      	cpsid	i
}
 8000aba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000abc:	e7fe      	b.n	8000abc <Error_Handler+0x8>
	...

08000ac0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	b083      	sub	sp, #12
 8000ac4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ac6:	4b0f      	ldr	r3, [pc, #60]	; (8000b04 <HAL_MspInit+0x44>)
 8000ac8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000aca:	4a0e      	ldr	r2, [pc, #56]	; (8000b04 <HAL_MspInit+0x44>)
 8000acc:	f043 0301 	orr.w	r3, r3, #1
 8000ad0:	6613      	str	r3, [r2, #96]	; 0x60
 8000ad2:	4b0c      	ldr	r3, [pc, #48]	; (8000b04 <HAL_MspInit+0x44>)
 8000ad4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ad6:	f003 0301 	and.w	r3, r3, #1
 8000ada:	607b      	str	r3, [r7, #4]
 8000adc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ade:	4b09      	ldr	r3, [pc, #36]	; (8000b04 <HAL_MspInit+0x44>)
 8000ae0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ae2:	4a08      	ldr	r2, [pc, #32]	; (8000b04 <HAL_MspInit+0x44>)
 8000ae4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ae8:	6593      	str	r3, [r2, #88]	; 0x58
 8000aea:	4b06      	ldr	r3, [pc, #24]	; (8000b04 <HAL_MspInit+0x44>)
 8000aec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000aee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000af2:	603b      	str	r3, [r7, #0]
 8000af4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000af6:	bf00      	nop
 8000af8:	370c      	adds	r7, #12
 8000afa:	46bd      	mov	sp, r7
 8000afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop
 8000b04:	40021000 	.word	0x40021000

08000b08 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b0b2      	sub	sp, #200	; 0xc8
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b10:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000b14:	2200      	movs	r2, #0
 8000b16:	601a      	str	r2, [r3, #0]
 8000b18:	605a      	str	r2, [r3, #4]
 8000b1a:	609a      	str	r2, [r3, #8]
 8000b1c:	60da      	str	r2, [r3, #12]
 8000b1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b20:	f107 0318 	add.w	r3, r7, #24
 8000b24:	229c      	movs	r2, #156	; 0x9c
 8000b26:	2100      	movs	r1, #0
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f006 fce3 	bl	80074f4 <memset>
  if(hadc->Instance==ADC1)
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	4a42      	ldr	r2, [pc, #264]	; (8000c3c <HAL_ADC_MspInit+0x134>)
 8000b34:	4293      	cmp	r3, r2
 8000b36:	d17d      	bne.n	8000c34 <HAL_ADC_MspInit+0x12c>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000b38:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000b3c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000b3e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000b42:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 8000b46:	2303      	movs	r3, #3
 8000b48:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 2;
 8000b4a:	2302      	movs	r3, #2
 8000b4c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8000b4e:	2308      	movs	r3, #8
 8000b50:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8000b52:	2302      	movs	r3, #2
 8000b54:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000b56:	2302      	movs	r3, #2
 8000b58:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000b5a:	2302      	movs	r3, #2
 8000b5c:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000b5e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000b62:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b64:	f107 0318 	add.w	r3, r7, #24
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f002 fee5 	bl	8003938 <HAL_RCCEx_PeriphCLKConfig>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d001      	beq.n	8000b78 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8000b74:	f7ff ff9e 	bl	8000ab4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000b78:	4b31      	ldr	r3, [pc, #196]	; (8000c40 <HAL_ADC_MspInit+0x138>)
 8000b7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b7c:	4a30      	ldr	r2, [pc, #192]	; (8000c40 <HAL_ADC_MspInit+0x138>)
 8000b7e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000b82:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b84:	4b2e      	ldr	r3, [pc, #184]	; (8000c40 <HAL_ADC_MspInit+0x138>)
 8000b86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b88:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000b8c:	617b      	str	r3, [r7, #20]
 8000b8e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b90:	4b2b      	ldr	r3, [pc, #172]	; (8000c40 <HAL_ADC_MspInit+0x138>)
 8000b92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b94:	4a2a      	ldr	r2, [pc, #168]	; (8000c40 <HAL_ADC_MspInit+0x138>)
 8000b96:	f043 0304 	orr.w	r3, r3, #4
 8000b9a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b9c:	4b28      	ldr	r3, [pc, #160]	; (8000c40 <HAL_ADC_MspInit+0x138>)
 8000b9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ba0:	f003 0304 	and.w	r3, r3, #4
 8000ba4:	613b      	str	r3, [r7, #16]
 8000ba6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ba8:	4b25      	ldr	r3, [pc, #148]	; (8000c40 <HAL_ADC_MspInit+0x138>)
 8000baa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bac:	4a24      	ldr	r2, [pc, #144]	; (8000c40 <HAL_ADC_MspInit+0x138>)
 8000bae:	f043 0301 	orr.w	r3, r3, #1
 8000bb2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bb4:	4b22      	ldr	r3, [pc, #136]	; (8000c40 <HAL_ADC_MspInit+0x138>)
 8000bb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bb8:	f003 0301 	and.w	r3, r3, #1
 8000bbc:	60fb      	str	r3, [r7, #12]
 8000bbe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bc0:	4b1f      	ldr	r3, [pc, #124]	; (8000c40 <HAL_ADC_MspInit+0x138>)
 8000bc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bc4:	4a1e      	ldr	r2, [pc, #120]	; (8000c40 <HAL_ADC_MspInit+0x138>)
 8000bc6:	f043 0302 	orr.w	r3, r3, #2
 8000bca:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bcc:	4b1c      	ldr	r3, [pc, #112]	; (8000c40 <HAL_ADC_MspInit+0x138>)
 8000bce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bd0:	f003 0302 	and.w	r3, r3, #2
 8000bd4:	60bb      	str	r3, [r7, #8]
 8000bd6:	68bb      	ldr	r3, [r7, #8]
    PA1     ------> ADC1_IN6
    PA7     ------> ADC1_IN12
    PA2     ------> ADC1_IN7
    PB0     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = ARD_A2_Pin|ARD_A1_Pin;
 8000bd8:	2318      	movs	r3, #24
 8000bda:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000bde:	230b      	movs	r3, #11
 8000be0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be4:	2300      	movs	r3, #0
 8000be6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bea:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000bee:	4619      	mov	r1, r3
 8000bf0:	4814      	ldr	r0, [pc, #80]	; (8000c44 <HAL_ADC_MspInit+0x13c>)
 8000bf2:	f001 fc29 	bl	8002448 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|ARD_A0_Pin|GPIO_PIN_2;
 8000bf6:	2387      	movs	r3, #135	; 0x87
 8000bf8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000bfc:	230b      	movs	r3, #11
 8000bfe:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c02:	2300      	movs	r3, #0
 8000c04:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c08:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c12:	f001 fc19 	bl	8002448 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_A3_Pin;
 8000c16:	2301      	movs	r3, #1
 8000c18:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000c1c:	230b      	movs	r3, #11
 8000c1e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c22:	2300      	movs	r3, #0
 8000c24:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(ARD_A3_GPIO_Port, &GPIO_InitStruct);
 8000c28:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	4806      	ldr	r0, [pc, #24]	; (8000c48 <HAL_ADC_MspInit+0x140>)
 8000c30:	f001 fc0a 	bl	8002448 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000c34:	bf00      	nop
 8000c36:	37c8      	adds	r7, #200	; 0xc8
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	50040000 	.word	0x50040000
 8000c40:	40021000 	.word	0x40021000
 8000c44:	48000800 	.word	0x48000800
 8000c48:	48000400 	.word	0x48000400

08000c4c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b08a      	sub	sp, #40	; 0x28
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c54:	f107 0314 	add.w	r3, r7, #20
 8000c58:	2200      	movs	r2, #0
 8000c5a:	601a      	str	r2, [r3, #0]
 8000c5c:	605a      	str	r2, [r3, #4]
 8000c5e:	609a      	str	r2, [r3, #8]
 8000c60:	60da      	str	r2, [r3, #12]
 8000c62:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	4a18      	ldr	r2, [pc, #96]	; (8000ccc <HAL_CAN_MspInit+0x80>)
 8000c6a:	4293      	cmp	r3, r2
 8000c6c:	d129      	bne.n	8000cc2 <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000c6e:	4b18      	ldr	r3, [pc, #96]	; (8000cd0 <HAL_CAN_MspInit+0x84>)
 8000c70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c72:	4a17      	ldr	r2, [pc, #92]	; (8000cd0 <HAL_CAN_MspInit+0x84>)
 8000c74:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c78:	6593      	str	r3, [r2, #88]	; 0x58
 8000c7a:	4b15      	ldr	r3, [pc, #84]	; (8000cd0 <HAL_CAN_MspInit+0x84>)
 8000c7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c82:	613b      	str	r3, [r7, #16]
 8000c84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c86:	4b12      	ldr	r3, [pc, #72]	; (8000cd0 <HAL_CAN_MspInit+0x84>)
 8000c88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c8a:	4a11      	ldr	r2, [pc, #68]	; (8000cd0 <HAL_CAN_MspInit+0x84>)
 8000c8c:	f043 0301 	orr.w	r3, r3, #1
 8000c90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c92:	4b0f      	ldr	r3, [pc, #60]	; (8000cd0 <HAL_CAN_MspInit+0x84>)
 8000c94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c96:	f003 0301 	and.w	r3, r3, #1
 8000c9a:	60fb      	str	r3, [r7, #12]
 8000c9c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA12     ------> CAN1_TX
    PA11     ------> CAN1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11;
 8000c9e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000ca2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca4:	2302      	movs	r3, #2
 8000ca6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cac:	2303      	movs	r3, #3
 8000cae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000cb0:	2309      	movs	r3, #9
 8000cb2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cb4:	f107 0314 	add.w	r3, r7, #20
 8000cb8:	4619      	mov	r1, r3
 8000cba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cbe:	f001 fbc3 	bl	8002448 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000cc2:	bf00      	nop
 8000cc4:	3728      	adds	r7, #40	; 0x28
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	40006400 	.word	0x40006400
 8000cd0:	40021000 	.word	0x40021000

08000cd4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b0b2      	sub	sp, #200	; 0xc8
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cdc:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	601a      	str	r2, [r3, #0]
 8000ce4:	605a      	str	r2, [r3, #4]
 8000ce6:	609a      	str	r2, [r3, #8]
 8000ce8:	60da      	str	r2, [r3, #12]
 8000cea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000cec:	f107 0318 	add.w	r3, r7, #24
 8000cf0:	229c      	movs	r2, #156	; 0x9c
 8000cf2:	2100      	movs	r1, #0
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f006 fbfd 	bl	80074f4 <memset>
  if(hi2c->Instance==I2C1)
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	4a33      	ldr	r2, [pc, #204]	; (8000dcc <HAL_I2C_MspInit+0xf8>)
 8000d00:	4293      	cmp	r3, r2
 8000d02:	d15e      	bne.n	8000dc2 <HAL_I2C_MspInit+0xee>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000d04:	2340      	movs	r3, #64	; 0x40
 8000d06:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d0c:	f107 0318 	add.w	r3, r7, #24
 8000d10:	4618      	mov	r0, r3
 8000d12:	f002 fe11 	bl	8003938 <HAL_RCCEx_PeriphCLKConfig>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d001      	beq.n	8000d20 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000d1c:	f7ff feca 	bl	8000ab4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d20:	4b2b      	ldr	r3, [pc, #172]	; (8000dd0 <HAL_I2C_MspInit+0xfc>)
 8000d22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d24:	4a2a      	ldr	r2, [pc, #168]	; (8000dd0 <HAL_I2C_MspInit+0xfc>)
 8000d26:	f043 0302 	orr.w	r3, r3, #2
 8000d2a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d2c:	4b28      	ldr	r3, [pc, #160]	; (8000dd0 <HAL_I2C_MspInit+0xfc>)
 8000d2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d30:	f003 0302 	and.w	r3, r3, #2
 8000d34:	617b      	str	r3, [r7, #20]
 8000d36:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d38:	4b25      	ldr	r3, [pc, #148]	; (8000dd0 <HAL_I2C_MspInit+0xfc>)
 8000d3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d3c:	4a24      	ldr	r2, [pc, #144]	; (8000dd0 <HAL_I2C_MspInit+0xfc>)
 8000d3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d42:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d44:	4b22      	ldr	r3, [pc, #136]	; (8000dd0 <HAL_I2C_MspInit+0xfc>)
 8000d46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d4c:	613b      	str	r3, [r7, #16]
 8000d4e:	693b      	ldr	r3, [r7, #16]
    HAL_PWREx_EnableVddIO2();
 8000d50:	f001 ff0e 	bl	8002b70 <HAL_PWREx_EnableVddIO2>
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PG13     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin;
 8000d54:	2340      	movs	r3, #64	; 0x40
 8000d56:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d5a:	2312      	movs	r3, #18
 8000d5c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d60:	2301      	movs	r3, #1
 8000d62:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d66:	2303      	movs	r3, #3
 8000d68:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d6c:	2304      	movs	r3, #4
 8000d6e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(I2C1_SCL_GPIO_Port, &GPIO_InitStruct);
 8000d72:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000d76:	4619      	mov	r1, r3
 8000d78:	4816      	ldr	r0, [pc, #88]	; (8000dd4 <HAL_I2C_MspInit+0x100>)
 8000d7a:	f001 fb65 	bl	8002448 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C1_SDA_Pin;
 8000d7e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d82:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d86:	2312      	movs	r3, #18
 8000d88:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d92:	2303      	movs	r3, #3
 8000d94:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d98:	2304      	movs	r3, #4
 8000d9a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(I2C1_SDA_GPIO_Port, &GPIO_InitStruct);
 8000d9e:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000da2:	4619      	mov	r1, r3
 8000da4:	480c      	ldr	r0, [pc, #48]	; (8000dd8 <HAL_I2C_MspInit+0x104>)
 8000da6:	f001 fb4f 	bl	8002448 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000daa:	4b09      	ldr	r3, [pc, #36]	; (8000dd0 <HAL_I2C_MspInit+0xfc>)
 8000dac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dae:	4a08      	ldr	r2, [pc, #32]	; (8000dd0 <HAL_I2C_MspInit+0xfc>)
 8000db0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000db4:	6593      	str	r3, [r2, #88]	; 0x58
 8000db6:	4b06      	ldr	r3, [pc, #24]	; (8000dd0 <HAL_I2C_MspInit+0xfc>)
 8000db8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000dbe:	60fb      	str	r3, [r7, #12]
 8000dc0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000dc2:	bf00      	nop
 8000dc4:	37c8      	adds	r7, #200	; 0xc8
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	40005400 	.word	0x40005400
 8000dd0:	40021000 	.word	0x40021000
 8000dd4:	48000400 	.word	0x48000400
 8000dd8:	48001800 	.word	0x48001800

08000ddc <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b0b2      	sub	sp, #200	; 0xc8
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000de8:	2200      	movs	r2, #0
 8000dea:	601a      	str	r2, [r3, #0]
 8000dec:	605a      	str	r2, [r3, #4]
 8000dee:	609a      	str	r2, [r3, #8]
 8000df0:	60da      	str	r2, [r3, #12]
 8000df2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000df4:	f107 0318 	add.w	r3, r7, #24
 8000df8:	229c      	movs	r2, #156	; 0x9c
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f006 fb79 	bl	80074f4 <memset>
  if(hsd->Instance==SDMMC1)
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	4a33      	ldr	r2, [pc, #204]	; (8000ed4 <HAL_SD_MspInit+0xf8>)
 8000e08:	4293      	cmp	r3, r2
 8000e0a:	d15f      	bne.n	8000ecc <HAL_SD_MspInit+0xf0>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1;
 8000e0c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000e10:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_PLLP;
 8000e12:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000e16:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e1a:	f107 0318 	add.w	r3, r7, #24
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f002 fd8a 	bl	8003938 <HAL_RCCEx_PeriphCLKConfig>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d001      	beq.n	8000e2e <HAL_SD_MspInit+0x52>
    {
      Error_Handler();
 8000e2a:	f7ff fe43 	bl	8000ab4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8000e2e:	4b2a      	ldr	r3, [pc, #168]	; (8000ed8 <HAL_SD_MspInit+0xfc>)
 8000e30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e32:	4a29      	ldr	r2, [pc, #164]	; (8000ed8 <HAL_SD_MspInit+0xfc>)
 8000e34:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000e38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e3a:	4b27      	ldr	r3, [pc, #156]	; (8000ed8 <HAL_SD_MspInit+0xfc>)
 8000e3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000e42:	617b      	str	r3, [r7, #20]
 8000e44:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e46:	4b24      	ldr	r3, [pc, #144]	; (8000ed8 <HAL_SD_MspInit+0xfc>)
 8000e48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e4a:	4a23      	ldr	r2, [pc, #140]	; (8000ed8 <HAL_SD_MspInit+0xfc>)
 8000e4c:	f043 0308 	orr.w	r3, r3, #8
 8000e50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e52:	4b21      	ldr	r3, [pc, #132]	; (8000ed8 <HAL_SD_MspInit+0xfc>)
 8000e54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e56:	f003 0308 	and.w	r3, r3, #8
 8000e5a:	613b      	str	r3, [r7, #16]
 8000e5c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e5e:	4b1e      	ldr	r3, [pc, #120]	; (8000ed8 <HAL_SD_MspInit+0xfc>)
 8000e60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e62:	4a1d      	ldr	r2, [pc, #116]	; (8000ed8 <HAL_SD_MspInit+0xfc>)
 8000e64:	f043 0304 	orr.w	r3, r3, #4
 8000e68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e6a:	4b1b      	ldr	r3, [pc, #108]	; (8000ed8 <HAL_SD_MspInit+0xfc>)
 8000e6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e6e:	f003 0304 	and.w	r3, r3, #4
 8000e72:	60fb      	str	r3, [r7, #12]
 8000e74:	68fb      	ldr	r3, [r7, #12]
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PC8     ------> SDMMC1_D0
    PC9     ------> SDMMC1_D1
    */
    GPIO_InitStruct.Pin = uSD_CMD_Pin;
 8000e76:	2304      	movs	r3, #4
 8000e78:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e7c:	2302      	movs	r3, #2
 8000e7e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e82:	2300      	movs	r3, #0
 8000e84:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e88:	2303      	movs	r3, #3
 8000e8a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000e8e:	230c      	movs	r3, #12
 8000e90:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(uSD_CMD_GPIO_Port, &GPIO_InitStruct);
 8000e94:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000e98:	4619      	mov	r1, r3
 8000e9a:	4810      	ldr	r0, [pc, #64]	; (8000edc <HAL_SD_MspInit+0x100>)
 8000e9c:	f001 fad4 	bl	8002448 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = uSD_D2_Pin|uSD_D3_Pin|uSD_CLK_Pin|uSD_D0_Pin
 8000ea0:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000ea4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
                          |uSD_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea8:	2302      	movs	r3, #2
 8000eaa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eb4:	2303      	movs	r3, #3
 8000eb6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000eba:	230c      	movs	r3, #12
 8000ebc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ec0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	4806      	ldr	r0, [pc, #24]	; (8000ee0 <HAL_SD_MspInit+0x104>)
 8000ec8:	f001 fabe 	bl	8002448 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8000ecc:	bf00      	nop
 8000ece:	37c8      	adds	r7, #200	; 0xc8
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	50062400 	.word	0x50062400
 8000ed8:	40021000 	.word	0x40021000
 8000edc:	48000c00 	.word	0x48000c00
 8000ee0:	48000800 	.word	0x48000800

08000ee4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b08a      	sub	sp, #40	; 0x28
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eec:	f107 0314 	add.w	r3, r7, #20
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	601a      	str	r2, [r3, #0]
 8000ef4:	605a      	str	r2, [r3, #4]
 8000ef6:	609a      	str	r2, [r3, #8]
 8000ef8:	60da      	str	r2, [r3, #12]
 8000efa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a25      	ldr	r2, [pc, #148]	; (8000f98 <HAL_SPI_MspInit+0xb4>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d144      	bne.n	8000f90 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000f06:	4b25      	ldr	r3, [pc, #148]	; (8000f9c <HAL_SPI_MspInit+0xb8>)
 8000f08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f0a:	4a24      	ldr	r2, [pc, #144]	; (8000f9c <HAL_SPI_MspInit+0xb8>)
 8000f0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f10:	6593      	str	r3, [r2, #88]	; 0x58
 8000f12:	4b22      	ldr	r3, [pc, #136]	; (8000f9c <HAL_SPI_MspInit+0xb8>)
 8000f14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f1a:	613b      	str	r3, [r7, #16]
 8000f1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 8000f1e:	4b1f      	ldr	r3, [pc, #124]	; (8000f9c <HAL_SPI_MspInit+0xb8>)
 8000f20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f22:	4a1e      	ldr	r2, [pc, #120]	; (8000f9c <HAL_SPI_MspInit+0xb8>)
 8000f24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f2a:	4b1c      	ldr	r3, [pc, #112]	; (8000f9c <HAL_SPI_MspInit+0xb8>)
 8000f2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f32:	60fb      	str	r3, [r7, #12]
 8000f34:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f36:	4b19      	ldr	r3, [pc, #100]	; (8000f9c <HAL_SPI_MspInit+0xb8>)
 8000f38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f3a:	4a18      	ldr	r2, [pc, #96]	; (8000f9c <HAL_SPI_MspInit+0xb8>)
 8000f3c:	f043 0302 	orr.w	r3, r3, #2
 8000f40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f42:	4b16      	ldr	r3, [pc, #88]	; (8000f9c <HAL_SPI_MspInit+0xb8>)
 8000f44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f46:	f003 0302 	and.w	r3, r3, #2
 8000f4a:	60bb      	str	r3, [r7, #8]
 8000f4c:	68bb      	ldr	r3, [r7, #8]
    PI0     ------> SPI2_NSS
    PB15     ------> SPI2_MOSI
    PB14     ------> SPI2_MISO
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = ARD_10_Pin;
 8000f4e:	2301      	movs	r3, #1
 8000f50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f52:	2302      	movs	r3, #2
 8000f54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f56:	2300      	movs	r3, #0
 8000f58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f5a:	2303      	movs	r3, #3
 8000f5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000f5e:	2305      	movs	r3, #5
 8000f60:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARD_10_GPIO_Port, &GPIO_InitStruct);
 8000f62:	f107 0314 	add.w	r3, r7, #20
 8000f66:	4619      	mov	r1, r3
 8000f68:	480d      	ldr	r0, [pc, #52]	; (8000fa0 <HAL_SPI_MspInit+0xbc>)
 8000f6a:	f001 fa6d 	bl	8002448 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI_MOSI_Pin|SPI2_MISO_Pin|SPI2_CLK_Pin;
 8000f6e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000f72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f74:	2302      	movs	r3, #2
 8000f76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f7c:	2303      	movs	r3, #3
 8000f7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000f80:	2305      	movs	r3, #5
 8000f82:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f84:	f107 0314 	add.w	r3, r7, #20
 8000f88:	4619      	mov	r1, r3
 8000f8a:	4806      	ldr	r0, [pc, #24]	; (8000fa4 <HAL_SPI_MspInit+0xc0>)
 8000f8c:	f001 fa5c 	bl	8002448 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000f90:	bf00      	nop
 8000f92:	3728      	adds	r7, #40	; 0x28
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	40003800 	.word	0x40003800
 8000f9c:	40021000 	.word	0x40021000
 8000fa0:	48002000 	.word	0x48002000
 8000fa4:	48000400 	.word	0x48000400

08000fa8 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b086      	sub	sp, #24
 8000fac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8000fae:	1d3b      	adds	r3, r7, #4
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	601a      	str	r2, [r3, #0]
 8000fb4:	605a      	str	r2, [r3, #4]
 8000fb6:	609a      	str	r2, [r3, #8]
 8000fb8:	60da      	str	r2, [r3, #12]
 8000fba:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8000fbc:	4b32      	ldr	r3, [pc, #200]	; (8001088 <HAL_FMC_MspInit+0xe0>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d15d      	bne.n	8001080 <HAL_FMC_MspInit+0xd8>
    return;
  }
  FMC_Initialized = 1;
 8000fc4:	4b30      	ldr	r3, [pc, #192]	; (8001088 <HAL_FMC_MspInit+0xe0>)
 8000fc6:	2201      	movs	r2, #1
 8000fc8:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8000fca:	4b30      	ldr	r3, [pc, #192]	; (800108c <HAL_FMC_MspInit+0xe4>)
 8000fcc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000fce:	4a2f      	ldr	r2, [pc, #188]	; (800108c <HAL_FMC_MspInit+0xe4>)
 8000fd0:	f043 0301 	orr.w	r3, r3, #1
 8000fd4:	6513      	str	r3, [r2, #80]	; 0x50
 8000fd6:	4b2d      	ldr	r3, [pc, #180]	; (800108c <HAL_FMC_MspInit+0xe4>)
 8000fd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000fda:	f003 0301 	and.w	r3, r3, #1
 8000fde:	603b      	str	r3, [r7, #0]
 8000fe0:	683b      	ldr	r3, [r7, #0]
  PF13   ------> FMC_A7
  PE12   ------> FMC_D9
  PF12   ------> FMC_A6
  PE11   ------> FMC_D8
  */
  GPIO_InitStruct.Pin = PSRAM_NBL0_Pin|PSRAM_NBL1_Pin|PSRAM_A20_Pin|PSRAM_A19_Pin
 8000fe2:	f64f 739b 	movw	r3, #65435	; 0xff9b
 8000fe6:	607b      	str	r3, [r7, #4]
                          |D7_Pin|D6_Pin|D12_Pin|D5_Pin
                          |D11_Pin|D4_Pin|D10_Pin|D9_Pin
                          |D8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe8:	2302      	movs	r3, #2
 8000fea:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fec:	2300      	movs	r3, #0
 8000fee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ff0:	2303      	movs	r3, #3
 8000ff2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000ff4:	230c      	movs	r3, #12
 8000ff6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ff8:	1d3b      	adds	r3, r7, #4
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	4824      	ldr	r0, [pc, #144]	; (8001090 <HAL_FMC_MspInit+0xe8>)
 8000ffe:	f001 fa23 	bl	8002448 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D2_Pin|PSRAM_OE_Pin|D3_Pin|PSRAM_WE_Pin
 8001002:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 8001006:	607b      	str	r3, [r7, #4]
                          |PSRAM_WAIT_Pin|PSRAM_CLK_Pin|PSRAM_NE1_Pin|PSRAM_A18_Pin
                          |D1_Pin|D0_Pin|PSRAM_A17_Pin|PSRAM_A16_Pin
                          |D15_Pin|D14_Pin|D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001008:	2302      	movs	r3, #2
 800100a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100c:	2300      	movs	r3, #0
 800100e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001010:	2303      	movs	r3, #3
 8001012:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001014:	230c      	movs	r3, #12
 8001016:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001018:	1d3b      	adds	r3, r7, #4
 800101a:	4619      	mov	r1, r3
 800101c:	481d      	ldr	r0, [pc, #116]	; (8001094 <HAL_FMC_MspInit+0xec>)
 800101e:	f001 fa13 	bl	8002448 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = PSRAM_ADV_Pin;
 8001022:	2380      	movs	r3, #128	; 0x80
 8001024:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001026:	2302      	movs	r3, #2
 8001028:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102a:	2300      	movs	r3, #0
 800102c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800102e:	2303      	movs	r3, #3
 8001030:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001032:	230c      	movs	r3, #12
 8001034:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(PSRAM_ADV_GPIO_Port, &GPIO_InitStruct);
 8001036:	1d3b      	adds	r3, r7, #4
 8001038:	4619      	mov	r1, r3
 800103a:	4817      	ldr	r0, [pc, #92]	; (8001098 <HAL_FMC_MspInit+0xf0>)
 800103c:	f001 fa04 	bl	8002448 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = PSRAM_A2_Pin|PSRAM_A1_Pin|PSRAM_A0_Pin|PSRAM_A3_Pin
 8001040:	f24f 033f 	movw	r3, #61503	; 0xf03f
 8001044:	607b      	str	r3, [r7, #4]
                          |PSRAM_A4_Pin|PSRAM_A5_Pin|PSRAM_A9_Pin|PSRAM_A8_Pin
                          |PSRAM_A7_Pin|PSRAM_A6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001046:	2302      	movs	r3, #2
 8001048:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104a:	2300      	movs	r3, #0
 800104c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800104e:	2303      	movs	r3, #3
 8001050:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001052:	230c      	movs	r3, #12
 8001054:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001056:	1d3b      	adds	r3, r7, #4
 8001058:	4619      	mov	r1, r3
 800105a:	4810      	ldr	r0, [pc, #64]	; (800109c <HAL_FMC_MspInit+0xf4>)
 800105c:	f001 f9f4 	bl	8002448 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = PSRAM_A14_Pin|PSRAM_A13_Pin|PSRAM_A15_Pin|PSRAM_A11_Pin
 8001060:	233f      	movs	r3, #63	; 0x3f
 8001062:	607b      	str	r3, [r7, #4]
                          |PSRAM_A12_Pin|PSRAM_A10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001064:	2302      	movs	r3, #2
 8001066:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001068:	2300      	movs	r3, #0
 800106a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800106c:	2303      	movs	r3, #3
 800106e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001070:	230c      	movs	r3, #12
 8001072:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001074:	1d3b      	adds	r3, r7, #4
 8001076:	4619      	mov	r1, r3
 8001078:	4809      	ldr	r0, [pc, #36]	; (80010a0 <HAL_FMC_MspInit+0xf8>)
 800107a:	f001 f9e5 	bl	8002448 <HAL_GPIO_Init>
 800107e:	e000      	b.n	8001082 <HAL_FMC_MspInit+0xda>
    return;
 8001080:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001082:	3718      	adds	r7, #24
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	20000240 	.word	0x20000240
 800108c:	40021000 	.word	0x40021000
 8001090:	48001000 	.word	0x48001000
 8001094:	48000c00 	.word	0x48000c00
 8001098:	48000400 	.word	0x48000400
 800109c:	48001400 	.word	0x48001400
 80010a0:	48001800 	.word	0x48001800

080010a4 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80010ac:	f7ff ff7c 	bl	8000fa8 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80010b0:	bf00      	nop
 80010b2:	3708      	adds	r7, #8
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}

080010b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010bc:	e7fe      	b.n	80010bc <NMI_Handler+0x4>

080010be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010be:	b480      	push	{r7}
 80010c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010c2:	e7fe      	b.n	80010c2 <HardFault_Handler+0x4>

080010c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010c8:	e7fe      	b.n	80010c8 <MemManage_Handler+0x4>

080010ca <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010ca:	b480      	push	{r7}
 80010cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010ce:	e7fe      	b.n	80010ce <BusFault_Handler+0x4>

080010d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010d4:	e7fe      	b.n	80010d4 <UsageFault_Handler+0x4>

080010d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010d6:	b480      	push	{r7}
 80010d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010da:	bf00      	nop
 80010dc:	46bd      	mov	sp, r7
 80010de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e2:	4770      	bx	lr

080010e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010e8:	bf00      	nop
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr

080010f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010f2:	b480      	push	{r7}
 80010f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010f6:	bf00      	nop
 80010f8:	46bd      	mov	sp, r7
 80010fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fe:	4770      	bx	lr

08001100 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001104:	f000 f892 	bl	800122c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001108:	bf00      	nop
 800110a:	bd80      	pop	{r7, pc}

0800110c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001110:	4b06      	ldr	r3, [pc, #24]	; (800112c <SystemInit+0x20>)
 8001112:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001116:	4a05      	ldr	r2, [pc, #20]	; (800112c <SystemInit+0x20>)
 8001118:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800111c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001120:	bf00      	nop
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr
 800112a:	bf00      	nop
 800112c:	e000ed00 	.word	0xe000ed00

08001130 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001130:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001168 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001134:	f7ff ffea 	bl	800110c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001138:	480c      	ldr	r0, [pc, #48]	; (800116c <LoopForever+0x6>)
  ldr r1, =_edata
 800113a:	490d      	ldr	r1, [pc, #52]	; (8001170 <LoopForever+0xa>)
  ldr r2, =_sidata
 800113c:	4a0d      	ldr	r2, [pc, #52]	; (8001174 <LoopForever+0xe>)
  movs r3, #0
 800113e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001140:	e002      	b.n	8001148 <LoopCopyDataInit>

08001142 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001142:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001144:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001146:	3304      	adds	r3, #4

08001148 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001148:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800114a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800114c:	d3f9      	bcc.n	8001142 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800114e:	4a0a      	ldr	r2, [pc, #40]	; (8001178 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001150:	4c0a      	ldr	r4, [pc, #40]	; (800117c <LoopForever+0x16>)
  movs r3, #0
 8001152:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001154:	e001      	b.n	800115a <LoopFillZerobss>

08001156 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001156:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001158:	3204      	adds	r2, #4

0800115a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800115a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800115c:	d3fb      	bcc.n	8001156 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800115e:	f006 f9a5 	bl	80074ac <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001162:	f7ff f84b 	bl	80001fc <main>

08001166 <LoopForever>:

LoopForever:
    b LoopForever
 8001166:	e7fe      	b.n	8001166 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001168:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 800116c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001170:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001174:	0800756c 	.word	0x0800756c
  ldr r2, =_sbss
 8001178:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800117c:	20000248 	.word	0x20000248

08001180 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001180:	e7fe      	b.n	8001180 <ADC1_IRQHandler>

08001182 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001182:	b580      	push	{r7, lr}
 8001184:	b082      	sub	sp, #8
 8001186:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001188:	2300      	movs	r3, #0
 800118a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800118c:	2003      	movs	r0, #3
 800118e:	f001 f927 	bl	80023e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001192:	2000      	movs	r0, #0
 8001194:	f000 f80e 	bl	80011b4 <HAL_InitTick>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d002      	beq.n	80011a4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800119e:	2301      	movs	r3, #1
 80011a0:	71fb      	strb	r3, [r7, #7]
 80011a2:	e001      	b.n	80011a8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80011a4:	f7ff fc8c 	bl	8000ac0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80011a8:	79fb      	ldrb	r3, [r7, #7]
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	3708      	adds	r7, #8
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
	...

080011b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b084      	sub	sp, #16
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80011bc:	2300      	movs	r3, #0
 80011be:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80011c0:	4b17      	ldr	r3, [pc, #92]	; (8001220 <HAL_InitTick+0x6c>)
 80011c2:	781b      	ldrb	r3, [r3, #0]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d023      	beq.n	8001210 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80011c8:	4b16      	ldr	r3, [pc, #88]	; (8001224 <HAL_InitTick+0x70>)
 80011ca:	681a      	ldr	r2, [r3, #0]
 80011cc:	4b14      	ldr	r3, [pc, #80]	; (8001220 <HAL_InitTick+0x6c>)
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	4619      	mov	r1, r3
 80011d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80011da:	fbb2 f3f3 	udiv	r3, r2, r3
 80011de:	4618      	mov	r0, r3
 80011e0:	f001 f925 	bl	800242e <HAL_SYSTICK_Config>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d10f      	bne.n	800120a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	2b0f      	cmp	r3, #15
 80011ee:	d809      	bhi.n	8001204 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011f0:	2200      	movs	r2, #0
 80011f2:	6879      	ldr	r1, [r7, #4]
 80011f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80011f8:	f001 f8fd 	bl	80023f6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80011fc:	4a0a      	ldr	r2, [pc, #40]	; (8001228 <HAL_InitTick+0x74>)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6013      	str	r3, [r2, #0]
 8001202:	e007      	b.n	8001214 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001204:	2301      	movs	r3, #1
 8001206:	73fb      	strb	r3, [r7, #15]
 8001208:	e004      	b.n	8001214 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800120a:	2301      	movs	r3, #1
 800120c:	73fb      	strb	r3, [r7, #15]
 800120e:	e001      	b.n	8001214 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001210:	2301      	movs	r3, #1
 8001212:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001214:	7bfb      	ldrb	r3, [r7, #15]
}
 8001216:	4618      	mov	r0, r3
 8001218:	3710      	adds	r7, #16
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	20000008 	.word	0x20000008
 8001224:	20000000 	.word	0x20000000
 8001228:	20000004 	.word	0x20000004

0800122c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001230:	4b06      	ldr	r3, [pc, #24]	; (800124c <HAL_IncTick+0x20>)
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	461a      	mov	r2, r3
 8001236:	4b06      	ldr	r3, [pc, #24]	; (8001250 <HAL_IncTick+0x24>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	4413      	add	r3, r2
 800123c:	4a04      	ldr	r2, [pc, #16]	; (8001250 <HAL_IncTick+0x24>)
 800123e:	6013      	str	r3, [r2, #0]
}
 8001240:	bf00      	nop
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr
 800124a:	bf00      	nop
 800124c:	20000008 	.word	0x20000008
 8001250:	20000244 	.word	0x20000244

08001254 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
  return uwTick;
 8001258:	4b03      	ldr	r3, [pc, #12]	; (8001268 <HAL_GetTick+0x14>)
 800125a:	681b      	ldr	r3, [r3, #0]
}
 800125c:	4618      	mov	r0, r3
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr
 8001266:	bf00      	nop
 8001268:	20000244 	.word	0x20000244

0800126c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b084      	sub	sp, #16
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001274:	f7ff ffee 	bl	8001254 <HAL_GetTick>
 8001278:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001284:	d005      	beq.n	8001292 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001286:	4b0a      	ldr	r3, [pc, #40]	; (80012b0 <HAL_Delay+0x44>)
 8001288:	781b      	ldrb	r3, [r3, #0]
 800128a:	461a      	mov	r2, r3
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	4413      	add	r3, r2
 8001290:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001292:	bf00      	nop
 8001294:	f7ff ffde 	bl	8001254 <HAL_GetTick>
 8001298:	4602      	mov	r2, r0
 800129a:	68bb      	ldr	r3, [r7, #8]
 800129c:	1ad3      	subs	r3, r2, r3
 800129e:	68fa      	ldr	r2, [r7, #12]
 80012a0:	429a      	cmp	r2, r3
 80012a2:	d8f7      	bhi.n	8001294 <HAL_Delay+0x28>
  {
  }
}
 80012a4:	bf00      	nop
 80012a6:	bf00      	nop
 80012a8:	3710      	adds	r7, #16
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	20000008 	.word	0x20000008

080012b4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b083      	sub	sp, #12
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
 80012bc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	689b      	ldr	r3, [r3, #8]
 80012c2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	431a      	orrs	r2, r3
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	609a      	str	r2, [r3, #8]
}
 80012ce:	bf00      	nop
 80012d0:	370c      	adds	r7, #12
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr

080012da <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80012da:	b480      	push	{r7}
 80012dc:	b083      	sub	sp, #12
 80012de:	af00      	add	r7, sp, #0
 80012e0:	6078      	str	r0, [r7, #4]
 80012e2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	689b      	ldr	r3, [r3, #8]
 80012e8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	431a      	orrs	r2, r3
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	609a      	str	r2, [r3, #8]
}
 80012f4:	bf00      	nop
 80012f6:	370c      	adds	r7, #12
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr

08001300 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001300:	b480      	push	{r7}
 8001302:	b083      	sub	sp, #12
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	689b      	ldr	r3, [r3, #8]
 800130c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001310:	4618      	mov	r0, r3
 8001312:	370c      	adds	r7, #12
 8001314:	46bd      	mov	sp, r7
 8001316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131a:	4770      	bx	lr

0800131c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800131c:	b480      	push	{r7}
 800131e:	b087      	sub	sp, #28
 8001320:	af00      	add	r7, sp, #0
 8001322:	60f8      	str	r0, [r7, #12]
 8001324:	60b9      	str	r1, [r7, #8]
 8001326:	607a      	str	r2, [r7, #4]
 8001328:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	3360      	adds	r3, #96	; 0x60
 800132e:	461a      	mov	r2, r3
 8001330:	68bb      	ldr	r3, [r7, #8]
 8001332:	009b      	lsls	r3, r3, #2
 8001334:	4413      	add	r3, r2
 8001336:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	681a      	ldr	r2, [r3, #0]
 800133c:	4b08      	ldr	r3, [pc, #32]	; (8001360 <LL_ADC_SetOffset+0x44>)
 800133e:	4013      	ands	r3, r2
 8001340:	687a      	ldr	r2, [r7, #4]
 8001342:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001346:	683a      	ldr	r2, [r7, #0]
 8001348:	430a      	orrs	r2, r1
 800134a:	4313      	orrs	r3, r2
 800134c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001354:	bf00      	nop
 8001356:	371c      	adds	r7, #28
 8001358:	46bd      	mov	sp, r7
 800135a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135e:	4770      	bx	lr
 8001360:	03fff000 	.word	0x03fff000

08001364 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001364:	b480      	push	{r7}
 8001366:	b085      	sub	sp, #20
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
 800136c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	3360      	adds	r3, #96	; 0x60
 8001372:	461a      	mov	r2, r3
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	009b      	lsls	r3, r3, #2
 8001378:	4413      	add	r3, r2
 800137a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001384:	4618      	mov	r0, r3
 8001386:	3714      	adds	r7, #20
 8001388:	46bd      	mov	sp, r7
 800138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138e:	4770      	bx	lr

08001390 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001390:	b480      	push	{r7}
 8001392:	b087      	sub	sp, #28
 8001394:	af00      	add	r7, sp, #0
 8001396:	60f8      	str	r0, [r7, #12]
 8001398:	60b9      	str	r1, [r7, #8]
 800139a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	3360      	adds	r3, #96	; 0x60
 80013a0:	461a      	mov	r2, r3
 80013a2:	68bb      	ldr	r3, [r7, #8]
 80013a4:	009b      	lsls	r3, r3, #2
 80013a6:	4413      	add	r3, r2
 80013a8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80013aa:	697b      	ldr	r3, [r7, #20]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	431a      	orrs	r2, r3
 80013b6:	697b      	ldr	r3, [r7, #20]
 80013b8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80013ba:	bf00      	nop
 80013bc:	371c      	adds	r7, #28
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr

080013c6 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80013c6:	b480      	push	{r7}
 80013c8:	b083      	sub	sp, #12
 80013ca:	af00      	add	r7, sp, #0
 80013cc:	6078      	str	r0, [r7, #4]
 80013ce:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	695b      	ldr	r3, [r3, #20]
 80013d4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	431a      	orrs	r2, r3
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	615a      	str	r2, [r3, #20]
}
 80013e0:	bf00      	nop
 80013e2:	370c      	adds	r7, #12
 80013e4:	46bd      	mov	sp, r7
 80013e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ea:	4770      	bx	lr

080013ec <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b087      	sub	sp, #28
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	60f8      	str	r0, [r7, #12]
 80013f4:	60b9      	str	r1, [r7, #8]
 80013f6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	3330      	adds	r3, #48	; 0x30
 80013fc:	461a      	mov	r2, r3
 80013fe:	68bb      	ldr	r3, [r7, #8]
 8001400:	0a1b      	lsrs	r3, r3, #8
 8001402:	009b      	lsls	r3, r3, #2
 8001404:	f003 030c 	and.w	r3, r3, #12
 8001408:	4413      	add	r3, r2
 800140a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	681a      	ldr	r2, [r3, #0]
 8001410:	68bb      	ldr	r3, [r7, #8]
 8001412:	f003 031f 	and.w	r3, r3, #31
 8001416:	211f      	movs	r1, #31
 8001418:	fa01 f303 	lsl.w	r3, r1, r3
 800141c:	43db      	mvns	r3, r3
 800141e:	401a      	ands	r2, r3
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	0e9b      	lsrs	r3, r3, #26
 8001424:	f003 011f 	and.w	r1, r3, #31
 8001428:	68bb      	ldr	r3, [r7, #8]
 800142a:	f003 031f 	and.w	r3, r3, #31
 800142e:	fa01 f303 	lsl.w	r3, r1, r3
 8001432:	431a      	orrs	r2, r3
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001438:	bf00      	nop
 800143a:	371c      	adds	r7, #28
 800143c:	46bd      	mov	sp, r7
 800143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001442:	4770      	bx	lr

08001444 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001444:	b480      	push	{r7}
 8001446:	b087      	sub	sp, #28
 8001448:	af00      	add	r7, sp, #0
 800144a:	60f8      	str	r0, [r7, #12]
 800144c:	60b9      	str	r1, [r7, #8]
 800144e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	3314      	adds	r3, #20
 8001454:	461a      	mov	r2, r3
 8001456:	68bb      	ldr	r3, [r7, #8]
 8001458:	0e5b      	lsrs	r3, r3, #25
 800145a:	009b      	lsls	r3, r3, #2
 800145c:	f003 0304 	and.w	r3, r3, #4
 8001460:	4413      	add	r3, r2
 8001462:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	681a      	ldr	r2, [r3, #0]
 8001468:	68bb      	ldr	r3, [r7, #8]
 800146a:	0d1b      	lsrs	r3, r3, #20
 800146c:	f003 031f 	and.w	r3, r3, #31
 8001470:	2107      	movs	r1, #7
 8001472:	fa01 f303 	lsl.w	r3, r1, r3
 8001476:	43db      	mvns	r3, r3
 8001478:	401a      	ands	r2, r3
 800147a:	68bb      	ldr	r3, [r7, #8]
 800147c:	0d1b      	lsrs	r3, r3, #20
 800147e:	f003 031f 	and.w	r3, r3, #31
 8001482:	6879      	ldr	r1, [r7, #4]
 8001484:	fa01 f303 	lsl.w	r3, r1, r3
 8001488:	431a      	orrs	r2, r3
 800148a:	697b      	ldr	r3, [r7, #20]
 800148c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800148e:	bf00      	nop
 8001490:	371c      	adds	r7, #28
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr
	...

0800149c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800149c:	b480      	push	{r7}
 800149e:	b085      	sub	sp, #20
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	60f8      	str	r0, [r7, #12]
 80014a4:	60b9      	str	r1, [r7, #8]
 80014a6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80014ae:	68bb      	ldr	r3, [r7, #8]
 80014b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80014b4:	43db      	mvns	r3, r3
 80014b6:	401a      	ands	r2, r3
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	f003 0318 	and.w	r3, r3, #24
 80014be:	4908      	ldr	r1, [pc, #32]	; (80014e0 <LL_ADC_SetChannelSingleDiff+0x44>)
 80014c0:	40d9      	lsrs	r1, r3
 80014c2:	68bb      	ldr	r3, [r7, #8]
 80014c4:	400b      	ands	r3, r1
 80014c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80014ca:	431a      	orrs	r2, r3
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80014d2:	bf00      	nop
 80014d4:	3714      	adds	r7, #20
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr
 80014de:	bf00      	nop
 80014e0:	0007ffff 	.word	0x0007ffff

080014e4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b083      	sub	sp, #12
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	689b      	ldr	r3, [r3, #8]
 80014f0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80014f4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80014f8:	687a      	ldr	r2, [r7, #4]
 80014fa:	6093      	str	r3, [r2, #8]
}
 80014fc:	bf00      	nop
 80014fe:	370c      	adds	r7, #12
 8001500:	46bd      	mov	sp, r7
 8001502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001506:	4770      	bx	lr

08001508 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001508:	b480      	push	{r7}
 800150a:	b083      	sub	sp, #12
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	689b      	ldr	r3, [r3, #8]
 8001514:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001518:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800151c:	d101      	bne.n	8001522 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800151e:	2301      	movs	r3, #1
 8001520:	e000      	b.n	8001524 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001522:	2300      	movs	r3, #0
}
 8001524:	4618      	mov	r0, r3
 8001526:	370c      	adds	r7, #12
 8001528:	46bd      	mov	sp, r7
 800152a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152e:	4770      	bx	lr

08001530 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001530:	b480      	push	{r7}
 8001532:	b083      	sub	sp, #12
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	689b      	ldr	r3, [r3, #8]
 800153c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001540:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001544:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800154c:	bf00      	nop
 800154e:	370c      	adds	r7, #12
 8001550:	46bd      	mov	sp, r7
 8001552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001556:	4770      	bx	lr

08001558 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001558:	b480      	push	{r7}
 800155a:	b083      	sub	sp, #12
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	689b      	ldr	r3, [r3, #8]
 8001564:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001568:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800156c:	d101      	bne.n	8001572 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800156e:	2301      	movs	r3, #1
 8001570:	e000      	b.n	8001574 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001572:	2300      	movs	r3, #0
}
 8001574:	4618      	mov	r0, r3
 8001576:	370c      	adds	r7, #12
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr

08001580 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001580:	b480      	push	{r7}
 8001582:	b083      	sub	sp, #12
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	689b      	ldr	r3, [r3, #8]
 800158c:	f003 0301 	and.w	r3, r3, #1
 8001590:	2b01      	cmp	r3, #1
 8001592:	d101      	bne.n	8001598 <LL_ADC_IsEnabled+0x18>
 8001594:	2301      	movs	r3, #1
 8001596:	e000      	b.n	800159a <LL_ADC_IsEnabled+0x1a>
 8001598:	2300      	movs	r3, #0
}
 800159a:	4618      	mov	r0, r3
 800159c:	370c      	adds	r7, #12
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr

080015a6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80015a6:	b480      	push	{r7}
 80015a8:	b083      	sub	sp, #12
 80015aa:	af00      	add	r7, sp, #0
 80015ac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	689b      	ldr	r3, [r3, #8]
 80015b2:	f003 0304 	and.w	r3, r3, #4
 80015b6:	2b04      	cmp	r3, #4
 80015b8:	d101      	bne.n	80015be <LL_ADC_REG_IsConversionOngoing+0x18>
 80015ba:	2301      	movs	r3, #1
 80015bc:	e000      	b.n	80015c0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80015be:	2300      	movs	r3, #0
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	370c      	adds	r7, #12
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr

080015cc <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b083      	sub	sp, #12
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	689b      	ldr	r3, [r3, #8]
 80015d8:	f003 0308 	and.w	r3, r3, #8
 80015dc:	2b08      	cmp	r3, #8
 80015de:	d101      	bne.n	80015e4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80015e0:	2301      	movs	r3, #1
 80015e2:	e000      	b.n	80015e6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80015e4:	2300      	movs	r3, #0
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	370c      	adds	r7, #12
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr
	...

080015f4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b088      	sub	sp, #32
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015fc:	2300      	movs	r3, #0
 80015fe:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001600:	2300      	movs	r3, #0
 8001602:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d101      	bne.n	800160e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800160a:	2301      	movs	r3, #1
 800160c:	e12f      	b.n	800186e <HAL_ADC_Init+0x27a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	691b      	ldr	r3, [r3, #16]
 8001612:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001618:	2b00      	cmp	r3, #0
 800161a:	d109      	bne.n	8001630 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800161c:	6878      	ldr	r0, [r7, #4]
 800161e:	f7ff fa73 	bl	8000b08 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	2200      	movs	r2, #0
 8001626:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2200      	movs	r2, #0
 800162c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4618      	mov	r0, r3
 8001636:	f7ff ff67 	bl	8001508 <LL_ADC_IsDeepPowerDownEnabled>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d004      	beq.n	800164a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4618      	mov	r0, r3
 8001646:	f7ff ff4d 	bl	80014e4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4618      	mov	r0, r3
 8001650:	f7ff ff82 	bl	8001558 <LL_ADC_IsInternalRegulatorEnabled>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d115      	bne.n	8001686 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4618      	mov	r0, r3
 8001660:	f7ff ff66 	bl	8001530 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001664:	4b84      	ldr	r3, [pc, #528]	; (8001878 <HAL_ADC_Init+0x284>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	099b      	lsrs	r3, r3, #6
 800166a:	4a84      	ldr	r2, [pc, #528]	; (800187c <HAL_ADC_Init+0x288>)
 800166c:	fba2 2303 	umull	r2, r3, r2, r3
 8001670:	099b      	lsrs	r3, r3, #6
 8001672:	3301      	adds	r3, #1
 8001674:	005b      	lsls	r3, r3, #1
 8001676:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001678:	e002      	b.n	8001680 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800167a:	68bb      	ldr	r3, [r7, #8]
 800167c:	3b01      	subs	r3, #1
 800167e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001680:	68bb      	ldr	r3, [r7, #8]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d1f9      	bne.n	800167a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4618      	mov	r0, r3
 800168c:	f7ff ff64 	bl	8001558 <LL_ADC_IsInternalRegulatorEnabled>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d10d      	bne.n	80016b2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800169a:	f043 0210 	orr.w	r2, r3, #16
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016a6:	f043 0201 	orr.w	r2, r3, #1
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80016ae:	2301      	movs	r3, #1
 80016b0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4618      	mov	r0, r3
 80016b8:	f7ff ff75 	bl	80015a6 <LL_ADC_REG_IsConversionOngoing>
 80016bc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016c2:	f003 0310 	and.w	r3, r3, #16
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	f040 80c8 	bne.w	800185c <HAL_ADC_Init+0x268>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	f040 80c4 	bne.w	800185c <HAL_ADC_Init+0x268>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016d8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80016dc:	f043 0202 	orr.w	r2, r3, #2
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4618      	mov	r0, r3
 80016ea:	f7ff ff49 	bl	8001580 <LL_ADC_IsEnabled>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d10b      	bne.n	800170c <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80016f4:	4862      	ldr	r0, [pc, #392]	; (8001880 <HAL_ADC_Init+0x28c>)
 80016f6:	f7ff ff43 	bl	8001580 <LL_ADC_IsEnabled>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d105      	bne.n	800170c <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	4619      	mov	r1, r3
 8001706:	485f      	ldr	r0, [pc, #380]	; (8001884 <HAL_ADC_Init+0x290>)
 8001708:	f7ff fdd4 	bl	80012b4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	7e5b      	ldrb	r3, [r3, #25]
 8001710:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001716:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 800171c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001722:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	f893 3020 	ldrb.w	r3, [r3, #32]
 800172a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800172c:	4313      	orrs	r3, r2
 800172e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001736:	2b01      	cmp	r3, #1
 8001738:	d106      	bne.n	8001748 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800173e:	3b01      	subs	r3, #1
 8001740:	045b      	lsls	r3, r3, #17
 8001742:	69ba      	ldr	r2, [r7, #24]
 8001744:	4313      	orrs	r3, r2
 8001746:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800174c:	2b00      	cmp	r3, #0
 800174e:	d009      	beq.n	8001764 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001754:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800175c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800175e:	69ba      	ldr	r2, [r7, #24]
 8001760:	4313      	orrs	r3, r2
 8001762:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	68da      	ldr	r2, [r3, #12]
 800176a:	4b47      	ldr	r3, [pc, #284]	; (8001888 <HAL_ADC_Init+0x294>)
 800176c:	4013      	ands	r3, r2
 800176e:	687a      	ldr	r2, [r7, #4]
 8001770:	6812      	ldr	r2, [r2, #0]
 8001772:	69b9      	ldr	r1, [r7, #24]
 8001774:	430b      	orrs	r3, r1
 8001776:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4618      	mov	r0, r3
 800177e:	f7ff ff12 	bl	80015a6 <LL_ADC_REG_IsConversionOngoing>
 8001782:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4618      	mov	r0, r3
 800178a:	f7ff ff1f 	bl	80015cc <LL_ADC_INJ_IsConversionOngoing>
 800178e:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001790:	693b      	ldr	r3, [r7, #16]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d140      	bne.n	8001818 <HAL_ADC_Init+0x224>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d13d      	bne.n	8001818 <HAL_ADC_Init+0x224>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	7e1b      	ldrb	r3, [r3, #24]
 80017a4:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80017a6:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80017ae:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80017b0:	4313      	orrs	r3, r2
 80017b2:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	68db      	ldr	r3, [r3, #12]
 80017ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80017be:	f023 0306 	bic.w	r3, r3, #6
 80017c2:	687a      	ldr	r2, [r7, #4]
 80017c4:	6812      	ldr	r2, [r2, #0]
 80017c6:	69b9      	ldr	r1, [r7, #24]
 80017c8:	430b      	orrs	r3, r1
 80017ca:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80017d2:	2b01      	cmp	r3, #1
 80017d4:	d118      	bne.n	8001808 <HAL_ADC_Init+0x214>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	691b      	ldr	r3, [r3, #16]
 80017dc:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80017e0:	f023 0304 	bic.w	r3, r3, #4
 80017e4:	687a      	ldr	r2, [r7, #4]
 80017e6:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80017e8:	687a      	ldr	r2, [r7, #4]
 80017ea:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80017ec:	4311      	orrs	r1, r2
 80017ee:	687a      	ldr	r2, [r7, #4]
 80017f0:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80017f2:	4311      	orrs	r1, r2
 80017f4:	687a      	ldr	r2, [r7, #4]
 80017f6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80017f8:	430a      	orrs	r2, r1
 80017fa:	431a      	orrs	r2, r3
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f042 0201 	orr.w	r2, r2, #1
 8001804:	611a      	str	r2, [r3, #16]
 8001806:	e007      	b.n	8001818 <HAL_ADC_Init+0x224>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	691a      	ldr	r2, [r3, #16]
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f022 0201 	bic.w	r2, r2, #1
 8001816:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	691b      	ldr	r3, [r3, #16]
 800181c:	2b01      	cmp	r3, #1
 800181e:	d10c      	bne.n	800183a <HAL_ADC_Init+0x246>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001826:	f023 010f 	bic.w	r1, r3, #15
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	69db      	ldr	r3, [r3, #28]
 800182e:	1e5a      	subs	r2, r3, #1
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	430a      	orrs	r2, r1
 8001836:	631a      	str	r2, [r3, #48]	; 0x30
 8001838:	e007      	b.n	800184a <HAL_ADC_Init+0x256>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f022 020f 	bic.w	r2, r2, #15
 8001848:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800184e:	f023 0303 	bic.w	r3, r3, #3
 8001852:	f043 0201 	orr.w	r2, r3, #1
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	659a      	str	r2, [r3, #88]	; 0x58
 800185a:	e007      	b.n	800186c <HAL_ADC_Init+0x278>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001860:	f043 0210 	orr.w	r2, r3, #16
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001868:	2301      	movs	r3, #1
 800186a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800186c:	7ffb      	ldrb	r3, [r7, #31]
}
 800186e:	4618      	mov	r0, r3
 8001870:	3720      	adds	r7, #32
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	20000000 	.word	0x20000000
 800187c:	053e2d63 	.word	0x053e2d63
 8001880:	50040000 	.word	0x50040000
 8001884:	50040300 	.word	0x50040300
 8001888:	fff0c007 	.word	0xfff0c007

0800188c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b0b6      	sub	sp, #216	; 0xd8
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
 8001894:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001896:	2300      	movs	r3, #0
 8001898:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800189c:	2300      	movs	r3, #0
 800189e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80018a6:	2b01      	cmp	r3, #1
 80018a8:	d101      	bne.n	80018ae <HAL_ADC_ConfigChannel+0x22>
 80018aa:	2302      	movs	r3, #2
 80018ac:	e3d5      	b.n	800205a <HAL_ADC_ConfigChannel+0x7ce>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2201      	movs	r2, #1
 80018b2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4618      	mov	r0, r3
 80018bc:	f7ff fe73 	bl	80015a6 <LL_ADC_REG_IsConversionOngoing>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	f040 83ba 	bne.w	800203c <HAL_ADC_ConfigChannel+0x7b0>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	2b05      	cmp	r3, #5
 80018ce:	d824      	bhi.n	800191a <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	3b02      	subs	r3, #2
 80018d6:	2b03      	cmp	r3, #3
 80018d8:	d81b      	bhi.n	8001912 <HAL_ADC_ConfigChannel+0x86>
 80018da:	a201      	add	r2, pc, #4	; (adr r2, 80018e0 <HAL_ADC_ConfigChannel+0x54>)
 80018dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018e0:	080018f1 	.word	0x080018f1
 80018e4:	080018f9 	.word	0x080018f9
 80018e8:	08001901 	.word	0x08001901
 80018ec:	08001909 	.word	0x08001909
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	220c      	movs	r2, #12
 80018f4:	605a      	str	r2, [r3, #4]
          break;
 80018f6:	e011      	b.n	800191c <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	2212      	movs	r2, #18
 80018fc:	605a      	str	r2, [r3, #4]
          break;
 80018fe:	e00d      	b.n	800191c <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	2218      	movs	r2, #24
 8001904:	605a      	str	r2, [r3, #4]
          break;
 8001906:	e009      	b.n	800191c <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800190e:	605a      	str	r2, [r3, #4]
          break;
 8001910:	e004      	b.n	800191c <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	2206      	movs	r2, #6
 8001916:	605a      	str	r2, [r3, #4]
          break;
 8001918:	e000      	b.n	800191c <HAL_ADC_ConfigChannel+0x90>
      }
    }
 800191a:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6818      	ldr	r0, [r3, #0]
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	6859      	ldr	r1, [r3, #4]
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	461a      	mov	r2, r3
 800192a:	f7ff fd5f 	bl	80013ec <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4618      	mov	r0, r3
 8001934:	f7ff fe37 	bl	80015a6 <LL_ADC_REG_IsConversionOngoing>
 8001938:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4618      	mov	r0, r3
 8001942:	f7ff fe43 	bl	80015cc <LL_ADC_INJ_IsConversionOngoing>
 8001946:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800194a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800194e:	2b00      	cmp	r3, #0
 8001950:	f040 81c1 	bne.w	8001cd6 <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001954:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001958:	2b00      	cmp	r3, #0
 800195a:	f040 81bc 	bne.w	8001cd6 <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	689b      	ldr	r3, [r3, #8]
 8001962:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001966:	d10f      	bne.n	8001988 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6818      	ldr	r0, [r3, #0]
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	2200      	movs	r2, #0
 8001972:	4619      	mov	r1, r3
 8001974:	f7ff fd66 	bl	8001444 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8001980:	4618      	mov	r0, r3
 8001982:	f7ff fd20 	bl	80013c6 <LL_ADC_SetSamplingTimeCommonConfig>
 8001986:	e00e      	b.n	80019a6 <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6818      	ldr	r0, [r3, #0]
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	6819      	ldr	r1, [r3, #0]
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	689b      	ldr	r3, [r3, #8]
 8001994:	461a      	mov	r2, r3
 8001996:	f7ff fd55 	bl	8001444 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	2100      	movs	r1, #0
 80019a0:	4618      	mov	r0, r3
 80019a2:	f7ff fd10 	bl	80013c6 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	695a      	ldr	r2, [r3, #20]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	68db      	ldr	r3, [r3, #12]
 80019b0:	08db      	lsrs	r3, r3, #3
 80019b2:	f003 0303 	and.w	r3, r3, #3
 80019b6:	005b      	lsls	r3, r3, #1
 80019b8:	fa02 f303 	lsl.w	r3, r2, r3
 80019bc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	691b      	ldr	r3, [r3, #16]
 80019c4:	2b04      	cmp	r3, #4
 80019c6:	d00a      	beq.n	80019de <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6818      	ldr	r0, [r3, #0]
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	6919      	ldr	r1, [r3, #16]
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80019d8:	f7ff fca0 	bl	800131c <LL_ADC_SetOffset>
 80019dc:	e17b      	b.n	8001cd6 <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	2100      	movs	r1, #0
 80019e4:	4618      	mov	r0, r3
 80019e6:	f7ff fcbd 	bl	8001364 <LL_ADC_GetOffsetChannel>
 80019ea:	4603      	mov	r3, r0
 80019ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d10a      	bne.n	8001a0a <HAL_ADC_ConfigChannel+0x17e>
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	2100      	movs	r1, #0
 80019fa:	4618      	mov	r0, r3
 80019fc:	f7ff fcb2 	bl	8001364 <LL_ADC_GetOffsetChannel>
 8001a00:	4603      	mov	r3, r0
 8001a02:	0e9b      	lsrs	r3, r3, #26
 8001a04:	f003 021f 	and.w	r2, r3, #31
 8001a08:	e01e      	b.n	8001a48 <HAL_ADC_ConfigChannel+0x1bc>
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	2100      	movs	r1, #0
 8001a10:	4618      	mov	r0, r3
 8001a12:	f7ff fca7 	bl	8001364 <LL_ADC_GetOffsetChannel>
 8001a16:	4603      	mov	r3, r0
 8001a18:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a1c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001a20:	fa93 f3a3 	rbit	r3, r3
 8001a24:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001a28:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001a2c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001a30:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d101      	bne.n	8001a3c <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 8001a38:	2320      	movs	r3, #32
 8001a3a:	e004      	b.n	8001a46 <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 8001a3c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001a40:	fab3 f383 	clz	r3, r3
 8001a44:	b2db      	uxtb	r3, r3
 8001a46:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d105      	bne.n	8001a60 <HAL_ADC_ConfigChannel+0x1d4>
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	0e9b      	lsrs	r3, r3, #26
 8001a5a:	f003 031f 	and.w	r3, r3, #31
 8001a5e:	e018      	b.n	8001a92 <HAL_ADC_ConfigChannel+0x206>
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a68:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001a6c:	fa93 f3a3 	rbit	r3, r3
 8001a70:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001a74:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001a78:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001a7c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d101      	bne.n	8001a88 <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 8001a84:	2320      	movs	r3, #32
 8001a86:	e004      	b.n	8001a92 <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 8001a88:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001a8c:	fab3 f383 	clz	r3, r3
 8001a90:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001a92:	429a      	cmp	r2, r3
 8001a94:	d106      	bne.n	8001aa4 <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	2100      	movs	r1, #0
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f7ff fc76 	bl	8001390 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	2101      	movs	r1, #1
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f7ff fc5a 	bl	8001364 <LL_ADC_GetOffsetChannel>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d10a      	bne.n	8001ad0 <HAL_ADC_ConfigChannel+0x244>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	2101      	movs	r1, #1
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f7ff fc4f 	bl	8001364 <LL_ADC_GetOffsetChannel>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	0e9b      	lsrs	r3, r3, #26
 8001aca:	f003 021f 	and.w	r2, r3, #31
 8001ace:	e01e      	b.n	8001b0e <HAL_ADC_ConfigChannel+0x282>
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	2101      	movs	r1, #1
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f7ff fc44 	bl	8001364 <LL_ADC_GetOffsetChannel>
 8001adc:	4603      	mov	r3, r0
 8001ade:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ae2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001ae6:	fa93 f3a3 	rbit	r3, r3
 8001aea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001aee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001af2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001af6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d101      	bne.n	8001b02 <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 8001afe:	2320      	movs	r3, #32
 8001b00:	e004      	b.n	8001b0c <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 8001b02:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001b06:	fab3 f383 	clz	r3, r3
 8001b0a:	b2db      	uxtb	r3, r3
 8001b0c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d105      	bne.n	8001b26 <HAL_ADC_ConfigChannel+0x29a>
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	0e9b      	lsrs	r3, r3, #26
 8001b20:	f003 031f 	and.w	r3, r3, #31
 8001b24:	e018      	b.n	8001b58 <HAL_ADC_ConfigChannel+0x2cc>
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b2e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001b32:	fa93 f3a3 	rbit	r3, r3
 8001b36:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001b3a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001b3e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001b42:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d101      	bne.n	8001b4e <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 8001b4a:	2320      	movs	r3, #32
 8001b4c:	e004      	b.n	8001b58 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 8001b4e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001b52:	fab3 f383 	clz	r3, r3
 8001b56:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	d106      	bne.n	8001b6a <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	2200      	movs	r2, #0
 8001b62:	2101      	movs	r1, #1
 8001b64:	4618      	mov	r0, r3
 8001b66:	f7ff fc13 	bl	8001390 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	2102      	movs	r1, #2
 8001b70:	4618      	mov	r0, r3
 8001b72:	f7ff fbf7 	bl	8001364 <LL_ADC_GetOffsetChannel>
 8001b76:	4603      	mov	r3, r0
 8001b78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d10a      	bne.n	8001b96 <HAL_ADC_ConfigChannel+0x30a>
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	2102      	movs	r1, #2
 8001b86:	4618      	mov	r0, r3
 8001b88:	f7ff fbec 	bl	8001364 <LL_ADC_GetOffsetChannel>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	0e9b      	lsrs	r3, r3, #26
 8001b90:	f003 021f 	and.w	r2, r3, #31
 8001b94:	e01e      	b.n	8001bd4 <HAL_ADC_ConfigChannel+0x348>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	2102      	movs	r1, #2
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f7ff fbe1 	bl	8001364 <LL_ADC_GetOffsetChannel>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ba8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001bac:	fa93 f3a3 	rbit	r3, r3
 8001bb0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001bb4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001bb8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001bbc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d101      	bne.n	8001bc8 <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 8001bc4:	2320      	movs	r3, #32
 8001bc6:	e004      	b.n	8001bd2 <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 8001bc8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001bcc:	fab3 f383 	clz	r3, r3
 8001bd0:	b2db      	uxtb	r3, r3
 8001bd2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d105      	bne.n	8001bec <HAL_ADC_ConfigChannel+0x360>
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	0e9b      	lsrs	r3, r3, #26
 8001be6:	f003 031f 	and.w	r3, r3, #31
 8001bea:	e016      	b.n	8001c1a <HAL_ADC_ConfigChannel+0x38e>
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bf4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001bf8:	fa93 f3a3 	rbit	r3, r3
 8001bfc:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001bfe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001c00:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001c04:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d101      	bne.n	8001c10 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 8001c0c:	2320      	movs	r3, #32
 8001c0e:	e004      	b.n	8001c1a <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8001c10:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001c14:	fab3 f383 	clz	r3, r3
 8001c18:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001c1a:	429a      	cmp	r2, r3
 8001c1c:	d106      	bne.n	8001c2c <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	2200      	movs	r2, #0
 8001c24:	2102      	movs	r1, #2
 8001c26:	4618      	mov	r0, r3
 8001c28:	f7ff fbb2 	bl	8001390 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	2103      	movs	r1, #3
 8001c32:	4618      	mov	r0, r3
 8001c34:	f7ff fb96 	bl	8001364 <LL_ADC_GetOffsetChannel>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d10a      	bne.n	8001c58 <HAL_ADC_ConfigChannel+0x3cc>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	2103      	movs	r1, #3
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f7ff fb8b 	bl	8001364 <LL_ADC_GetOffsetChannel>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	0e9b      	lsrs	r3, r3, #26
 8001c52:	f003 021f 	and.w	r2, r3, #31
 8001c56:	e017      	b.n	8001c88 <HAL_ADC_ConfigChannel+0x3fc>
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	2103      	movs	r1, #3
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f7ff fb80 	bl	8001364 <LL_ADC_GetOffsetChannel>
 8001c64:	4603      	mov	r3, r0
 8001c66:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c68:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001c6a:	fa93 f3a3 	rbit	r3, r3
 8001c6e:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001c70:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001c72:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001c74:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d101      	bne.n	8001c7e <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 8001c7a:	2320      	movs	r3, #32
 8001c7c:	e003      	b.n	8001c86 <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 8001c7e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001c80:	fab3 f383 	clz	r3, r3
 8001c84:	b2db      	uxtb	r3, r3
 8001c86:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d105      	bne.n	8001ca0 <HAL_ADC_ConfigChannel+0x414>
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	0e9b      	lsrs	r3, r3, #26
 8001c9a:	f003 031f 	and.w	r3, r3, #31
 8001c9e:	e011      	b.n	8001cc4 <HAL_ADC_ConfigChannel+0x438>
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ca6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001ca8:	fa93 f3a3 	rbit	r3, r3
 8001cac:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001cae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001cb0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001cb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d101      	bne.n	8001cbc <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8001cb8:	2320      	movs	r3, #32
 8001cba:	e003      	b.n	8001cc4 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8001cbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001cbe:	fab3 f383 	clz	r3, r3
 8001cc2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001cc4:	429a      	cmp	r2, r3
 8001cc6:	d106      	bne.n	8001cd6 <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	2200      	movs	r2, #0
 8001cce:	2103      	movs	r1, #3
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f7ff fb5d 	bl	8001390 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f7ff fc50 	bl	8001580 <LL_ADC_IsEnabled>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	f040 8140 	bne.w	8001f68 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6818      	ldr	r0, [r3, #0]
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	6819      	ldr	r1, [r3, #0]
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	68db      	ldr	r3, [r3, #12]
 8001cf4:	461a      	mov	r2, r3
 8001cf6:	f7ff fbd1 	bl	800149c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	68db      	ldr	r3, [r3, #12]
 8001cfe:	4a8f      	ldr	r2, [pc, #572]	; (8001f3c <HAL_ADC_ConfigChannel+0x6b0>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	f040 8131 	bne.w	8001f68 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d10b      	bne.n	8001d2e <HAL_ADC_ConfigChannel+0x4a2>
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	0e9b      	lsrs	r3, r3, #26
 8001d1c:	3301      	adds	r3, #1
 8001d1e:	f003 031f 	and.w	r3, r3, #31
 8001d22:	2b09      	cmp	r3, #9
 8001d24:	bf94      	ite	ls
 8001d26:	2301      	movls	r3, #1
 8001d28:	2300      	movhi	r3, #0
 8001d2a:	b2db      	uxtb	r3, r3
 8001d2c:	e019      	b.n	8001d62 <HAL_ADC_ConfigChannel+0x4d6>
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d34:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d36:	fa93 f3a3 	rbit	r3, r3
 8001d3a:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001d3c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001d3e:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001d40:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d101      	bne.n	8001d4a <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 8001d46:	2320      	movs	r3, #32
 8001d48:	e003      	b.n	8001d52 <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 8001d4a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001d4c:	fab3 f383 	clz	r3, r3
 8001d50:	b2db      	uxtb	r3, r3
 8001d52:	3301      	adds	r3, #1
 8001d54:	f003 031f 	and.w	r3, r3, #31
 8001d58:	2b09      	cmp	r3, #9
 8001d5a:	bf94      	ite	ls
 8001d5c:	2301      	movls	r3, #1
 8001d5e:	2300      	movhi	r3, #0
 8001d60:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d079      	beq.n	8001e5a <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d107      	bne.n	8001d82 <HAL_ADC_ConfigChannel+0x4f6>
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	0e9b      	lsrs	r3, r3, #26
 8001d78:	3301      	adds	r3, #1
 8001d7a:	069b      	lsls	r3, r3, #26
 8001d7c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001d80:	e015      	b.n	8001dae <HAL_ADC_ConfigChannel+0x522>
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001d8a:	fa93 f3a3 	rbit	r3, r3
 8001d8e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001d90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d92:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001d94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d101      	bne.n	8001d9e <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 8001d9a:	2320      	movs	r3, #32
 8001d9c:	e003      	b.n	8001da6 <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 8001d9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001da0:	fab3 f383 	clz	r3, r3
 8001da4:	b2db      	uxtb	r3, r3
 8001da6:	3301      	adds	r3, #1
 8001da8:	069b      	lsls	r3, r3, #26
 8001daa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d109      	bne.n	8001dce <HAL_ADC_ConfigChannel+0x542>
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	0e9b      	lsrs	r3, r3, #26
 8001dc0:	3301      	adds	r3, #1
 8001dc2:	f003 031f 	and.w	r3, r3, #31
 8001dc6:	2101      	movs	r1, #1
 8001dc8:	fa01 f303 	lsl.w	r3, r1, r3
 8001dcc:	e017      	b.n	8001dfe <HAL_ADC_ConfigChannel+0x572>
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001dd6:	fa93 f3a3 	rbit	r3, r3
 8001dda:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001ddc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001dde:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001de0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d101      	bne.n	8001dea <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 8001de6:	2320      	movs	r3, #32
 8001de8:	e003      	b.n	8001df2 <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 8001dea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001dec:	fab3 f383 	clz	r3, r3
 8001df0:	b2db      	uxtb	r3, r3
 8001df2:	3301      	adds	r3, #1
 8001df4:	f003 031f 	and.w	r3, r3, #31
 8001df8:	2101      	movs	r1, #1
 8001dfa:	fa01 f303 	lsl.w	r3, r1, r3
 8001dfe:	ea42 0103 	orr.w	r1, r2, r3
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d10a      	bne.n	8001e24 <HAL_ADC_ConfigChannel+0x598>
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	0e9b      	lsrs	r3, r3, #26
 8001e14:	3301      	adds	r3, #1
 8001e16:	f003 021f 	and.w	r2, r3, #31
 8001e1a:	4613      	mov	r3, r2
 8001e1c:	005b      	lsls	r3, r3, #1
 8001e1e:	4413      	add	r3, r2
 8001e20:	051b      	lsls	r3, r3, #20
 8001e22:	e018      	b.n	8001e56 <HAL_ADC_ConfigChannel+0x5ca>
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e2c:	fa93 f3a3 	rbit	r3, r3
 8001e30:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001e32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e34:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001e36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d101      	bne.n	8001e40 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 8001e3c:	2320      	movs	r3, #32
 8001e3e:	e003      	b.n	8001e48 <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 8001e40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e42:	fab3 f383 	clz	r3, r3
 8001e46:	b2db      	uxtb	r3, r3
 8001e48:	3301      	adds	r3, #1
 8001e4a:	f003 021f 	and.w	r2, r3, #31
 8001e4e:	4613      	mov	r3, r2
 8001e50:	005b      	lsls	r3, r3, #1
 8001e52:	4413      	add	r3, r2
 8001e54:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e56:	430b      	orrs	r3, r1
 8001e58:	e081      	b.n	8001f5e <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d107      	bne.n	8001e76 <HAL_ADC_ConfigChannel+0x5ea>
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	0e9b      	lsrs	r3, r3, #26
 8001e6c:	3301      	adds	r3, #1
 8001e6e:	069b      	lsls	r3, r3, #26
 8001e70:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001e74:	e015      	b.n	8001ea2 <HAL_ADC_ConfigChannel+0x616>
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e7e:	fa93 f3a3 	rbit	r3, r3
 8001e82:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8001e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e86:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8001e88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d101      	bne.n	8001e92 <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 8001e8e:	2320      	movs	r3, #32
 8001e90:	e003      	b.n	8001e9a <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 8001e92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e94:	fab3 f383 	clz	r3, r3
 8001e98:	b2db      	uxtb	r3, r3
 8001e9a:	3301      	adds	r3, #1
 8001e9c:	069b      	lsls	r3, r3, #26
 8001e9e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d109      	bne.n	8001ec2 <HAL_ADC_ConfigChannel+0x636>
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	0e9b      	lsrs	r3, r3, #26
 8001eb4:	3301      	adds	r3, #1
 8001eb6:	f003 031f 	and.w	r3, r3, #31
 8001eba:	2101      	movs	r1, #1
 8001ebc:	fa01 f303 	lsl.w	r3, r1, r3
 8001ec0:	e017      	b.n	8001ef2 <HAL_ADC_ConfigChannel+0x666>
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ec8:	6a3b      	ldr	r3, [r7, #32]
 8001eca:	fa93 f3a3 	rbit	r3, r3
 8001ece:	61fb      	str	r3, [r7, #28]
  return result;
 8001ed0:	69fb      	ldr	r3, [r7, #28]
 8001ed2:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d101      	bne.n	8001ede <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 8001eda:	2320      	movs	r3, #32
 8001edc:	e003      	b.n	8001ee6 <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 8001ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee0:	fab3 f383 	clz	r3, r3
 8001ee4:	b2db      	uxtb	r3, r3
 8001ee6:	3301      	adds	r3, #1
 8001ee8:	f003 031f 	and.w	r3, r3, #31
 8001eec:	2101      	movs	r1, #1
 8001eee:	fa01 f303 	lsl.w	r3, r1, r3
 8001ef2:	ea42 0103 	orr.w	r1, r2, r3
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d10d      	bne.n	8001f1e <HAL_ADC_ConfigChannel+0x692>
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	0e9b      	lsrs	r3, r3, #26
 8001f08:	3301      	adds	r3, #1
 8001f0a:	f003 021f 	and.w	r2, r3, #31
 8001f0e:	4613      	mov	r3, r2
 8001f10:	005b      	lsls	r3, r3, #1
 8001f12:	4413      	add	r3, r2
 8001f14:	3b1e      	subs	r3, #30
 8001f16:	051b      	lsls	r3, r3, #20
 8001f18:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001f1c:	e01e      	b.n	8001f5c <HAL_ADC_ConfigChannel+0x6d0>
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	fa93 f3a3 	rbit	r3, r3
 8001f2a:	613b      	str	r3, [r7, #16]
  return result;
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001f30:	69bb      	ldr	r3, [r7, #24]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d104      	bne.n	8001f40 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8001f36:	2320      	movs	r3, #32
 8001f38:	e006      	b.n	8001f48 <HAL_ADC_ConfigChannel+0x6bc>
 8001f3a:	bf00      	nop
 8001f3c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001f40:	69bb      	ldr	r3, [r7, #24]
 8001f42:	fab3 f383 	clz	r3, r3
 8001f46:	b2db      	uxtb	r3, r3
 8001f48:	3301      	adds	r3, #1
 8001f4a:	f003 021f 	and.w	r2, r3, #31
 8001f4e:	4613      	mov	r3, r2
 8001f50:	005b      	lsls	r3, r3, #1
 8001f52:	4413      	add	r3, r2
 8001f54:	3b1e      	subs	r3, #30
 8001f56:	051b      	lsls	r3, r3, #20
 8001f58:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f5c:	430b      	orrs	r3, r1
 8001f5e:	683a      	ldr	r2, [r7, #0]
 8001f60:	6892      	ldr	r2, [r2, #8]
 8001f62:	4619      	mov	r1, r3
 8001f64:	f7ff fa6e 	bl	8001444 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	681a      	ldr	r2, [r3, #0]
 8001f6c:	4b3d      	ldr	r3, [pc, #244]	; (8002064 <HAL_ADC_ConfigChannel+0x7d8>)
 8001f6e:	4013      	ands	r3, r2
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d06c      	beq.n	800204e <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001f74:	483c      	ldr	r0, [pc, #240]	; (8002068 <HAL_ADC_ConfigChannel+0x7dc>)
 8001f76:	f7ff f9c3 	bl	8001300 <LL_ADC_GetCommonPathInternalCh>
 8001f7a:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a3a      	ldr	r2, [pc, #232]	; (800206c <HAL_ADC_ConfigChannel+0x7e0>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d127      	bne.n	8001fd8 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001f88:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001f8c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d121      	bne.n	8001fd8 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a35      	ldr	r2, [pc, #212]	; (8002070 <HAL_ADC_ConfigChannel+0x7e4>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d157      	bne.n	800204e <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001f9e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001fa2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001fa6:	4619      	mov	r1, r3
 8001fa8:	482f      	ldr	r0, [pc, #188]	; (8002068 <HAL_ADC_ConfigChannel+0x7dc>)
 8001faa:	f7ff f996 	bl	80012da <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001fae:	4b31      	ldr	r3, [pc, #196]	; (8002074 <HAL_ADC_ConfigChannel+0x7e8>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	099b      	lsrs	r3, r3, #6
 8001fb4:	4a30      	ldr	r2, [pc, #192]	; (8002078 <HAL_ADC_ConfigChannel+0x7ec>)
 8001fb6:	fba2 2303 	umull	r2, r3, r2, r3
 8001fba:	099b      	lsrs	r3, r3, #6
 8001fbc:	1c5a      	adds	r2, r3, #1
 8001fbe:	4613      	mov	r3, r2
 8001fc0:	005b      	lsls	r3, r3, #1
 8001fc2:	4413      	add	r3, r2
 8001fc4:	009b      	lsls	r3, r3, #2
 8001fc6:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001fc8:	e002      	b.n	8001fd0 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	3b01      	subs	r3, #1
 8001fce:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d1f9      	bne.n	8001fca <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001fd6:	e03a      	b.n	800204e <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a27      	ldr	r2, [pc, #156]	; (800207c <HAL_ADC_ConfigChannel+0x7f0>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d113      	bne.n	800200a <HAL_ADC_ConfigChannel+0x77e>
 8001fe2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001fe6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d10d      	bne.n	800200a <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4a1f      	ldr	r2, [pc, #124]	; (8002070 <HAL_ADC_ConfigChannel+0x7e4>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d12a      	bne.n	800204e <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001ff8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001ffc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002000:	4619      	mov	r1, r3
 8002002:	4819      	ldr	r0, [pc, #100]	; (8002068 <HAL_ADC_ConfigChannel+0x7dc>)
 8002004:	f7ff f969 	bl	80012da <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002008:	e021      	b.n	800204e <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4a1c      	ldr	r2, [pc, #112]	; (8002080 <HAL_ADC_ConfigChannel+0x7f4>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d11c      	bne.n	800204e <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002014:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002018:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800201c:	2b00      	cmp	r3, #0
 800201e:	d116      	bne.n	800204e <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a12      	ldr	r2, [pc, #72]	; (8002070 <HAL_ADC_ConfigChannel+0x7e4>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d111      	bne.n	800204e <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800202a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800202e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002032:	4619      	mov	r1, r3
 8002034:	480c      	ldr	r0, [pc, #48]	; (8002068 <HAL_ADC_ConfigChannel+0x7dc>)
 8002036:	f7ff f950 	bl	80012da <LL_ADC_SetCommonPathInternalCh>
 800203a:	e008      	b.n	800204e <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002040:	f043 0220 	orr.w	r2, r3, #32
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002048:	2301      	movs	r3, #1
 800204a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2200      	movs	r2, #0
 8002052:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8002056:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800205a:	4618      	mov	r0, r3
 800205c:	37d8      	adds	r7, #216	; 0xd8
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	80080000 	.word	0x80080000
 8002068:	50040300 	.word	0x50040300
 800206c:	c7520000 	.word	0xc7520000
 8002070:	50040000 	.word	0x50040000
 8002074:	20000000 	.word	0x20000000
 8002078:	053e2d63 	.word	0x053e2d63
 800207c:	cb840000 	.word	0xcb840000
 8002080:	80000001 	.word	0x80000001

08002084 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b084      	sub	sp, #16
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d101      	bne.n	8002096 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002092:	2301      	movs	r3, #1
 8002094:	e0ed      	b.n	8002272 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	f893 3020 	ldrb.w	r3, [r3, #32]
 800209c:	b2db      	uxtb	r3, r3
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d102      	bne.n	80020a8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80020a2:	6878      	ldr	r0, [r7, #4]
 80020a4:	f7fe fdd2 	bl	8000c4c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	681a      	ldr	r2, [r3, #0]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f042 0201 	orr.w	r2, r2, #1
 80020b6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80020b8:	f7ff f8cc 	bl	8001254 <HAL_GetTick>
 80020bc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80020be:	e012      	b.n	80020e6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80020c0:	f7ff f8c8 	bl	8001254 <HAL_GetTick>
 80020c4:	4602      	mov	r2, r0
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	1ad3      	subs	r3, r2, r3
 80020ca:	2b0a      	cmp	r3, #10
 80020cc:	d90b      	bls.n	80020e6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2205      	movs	r2, #5
 80020de:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
 80020e4:	e0c5      	b.n	8002272 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	f003 0301 	and.w	r3, r3, #1
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d0e5      	beq.n	80020c0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	681a      	ldr	r2, [r3, #0]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f022 0202 	bic.w	r2, r2, #2
 8002102:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002104:	f7ff f8a6 	bl	8001254 <HAL_GetTick>
 8002108:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800210a:	e012      	b.n	8002132 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800210c:	f7ff f8a2 	bl	8001254 <HAL_GetTick>
 8002110:	4602      	mov	r2, r0
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	1ad3      	subs	r3, r2, r3
 8002116:	2b0a      	cmp	r3, #10
 8002118:	d90b      	bls.n	8002132 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800211e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2205      	movs	r2, #5
 800212a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800212e:	2301      	movs	r3, #1
 8002130:	e09f      	b.n	8002272 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	f003 0302 	and.w	r3, r3, #2
 800213c:	2b00      	cmp	r3, #0
 800213e:	d1e5      	bne.n	800210c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	7e1b      	ldrb	r3, [r3, #24]
 8002144:	2b01      	cmp	r3, #1
 8002146:	d108      	bne.n	800215a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	681a      	ldr	r2, [r3, #0]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002156:	601a      	str	r2, [r3, #0]
 8002158:	e007      	b.n	800216a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	681a      	ldr	r2, [r3, #0]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002168:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	7e5b      	ldrb	r3, [r3, #25]
 800216e:	2b01      	cmp	r3, #1
 8002170:	d108      	bne.n	8002184 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	681a      	ldr	r2, [r3, #0]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002180:	601a      	str	r2, [r3, #0]
 8002182:	e007      	b.n	8002194 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	681a      	ldr	r2, [r3, #0]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002192:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	7e9b      	ldrb	r3, [r3, #26]
 8002198:	2b01      	cmp	r3, #1
 800219a:	d108      	bne.n	80021ae <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	681a      	ldr	r2, [r3, #0]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f042 0220 	orr.w	r2, r2, #32
 80021aa:	601a      	str	r2, [r3, #0]
 80021ac:	e007      	b.n	80021be <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	681a      	ldr	r2, [r3, #0]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f022 0220 	bic.w	r2, r2, #32
 80021bc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	7edb      	ldrb	r3, [r3, #27]
 80021c2:	2b01      	cmp	r3, #1
 80021c4:	d108      	bne.n	80021d8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	681a      	ldr	r2, [r3, #0]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f022 0210 	bic.w	r2, r2, #16
 80021d4:	601a      	str	r2, [r3, #0]
 80021d6:	e007      	b.n	80021e8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	681a      	ldr	r2, [r3, #0]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f042 0210 	orr.w	r2, r2, #16
 80021e6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	7f1b      	ldrb	r3, [r3, #28]
 80021ec:	2b01      	cmp	r3, #1
 80021ee:	d108      	bne.n	8002202 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	681a      	ldr	r2, [r3, #0]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f042 0208 	orr.w	r2, r2, #8
 80021fe:	601a      	str	r2, [r3, #0]
 8002200:	e007      	b.n	8002212 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	681a      	ldr	r2, [r3, #0]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f022 0208 	bic.w	r2, r2, #8
 8002210:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	7f5b      	ldrb	r3, [r3, #29]
 8002216:	2b01      	cmp	r3, #1
 8002218:	d108      	bne.n	800222c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	681a      	ldr	r2, [r3, #0]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f042 0204 	orr.w	r2, r2, #4
 8002228:	601a      	str	r2, [r3, #0]
 800222a:	e007      	b.n	800223c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f022 0204 	bic.w	r2, r2, #4
 800223a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	689a      	ldr	r2, [r3, #8]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	68db      	ldr	r3, [r3, #12]
 8002244:	431a      	orrs	r2, r3
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	691b      	ldr	r3, [r3, #16]
 800224a:	431a      	orrs	r2, r3
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	695b      	ldr	r3, [r3, #20]
 8002250:	ea42 0103 	orr.w	r1, r2, r3
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	1e5a      	subs	r2, r3, #1
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	430a      	orrs	r2, r1
 8002260:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2200      	movs	r2, #0
 8002266:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2201      	movs	r2, #1
 800226c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002270:	2300      	movs	r3, #0
}
 8002272:	4618      	mov	r0, r3
 8002274:	3710      	adds	r7, #16
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}
	...

0800227c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800227c:	b480      	push	{r7}
 800227e:	b085      	sub	sp, #20
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	f003 0307 	and.w	r3, r3, #7
 800228a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800228c:	4b0c      	ldr	r3, [pc, #48]	; (80022c0 <__NVIC_SetPriorityGrouping+0x44>)
 800228e:	68db      	ldr	r3, [r3, #12]
 8002290:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002292:	68ba      	ldr	r2, [r7, #8]
 8002294:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002298:	4013      	ands	r3, r2
 800229a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80022a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022ae:	4a04      	ldr	r2, [pc, #16]	; (80022c0 <__NVIC_SetPriorityGrouping+0x44>)
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	60d3      	str	r3, [r2, #12]
}
 80022b4:	bf00      	nop
 80022b6:	3714      	adds	r7, #20
 80022b8:	46bd      	mov	sp, r7
 80022ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022be:	4770      	bx	lr
 80022c0:	e000ed00 	.word	0xe000ed00

080022c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022c4:	b480      	push	{r7}
 80022c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022c8:	4b04      	ldr	r3, [pc, #16]	; (80022dc <__NVIC_GetPriorityGrouping+0x18>)
 80022ca:	68db      	ldr	r3, [r3, #12]
 80022cc:	0a1b      	lsrs	r3, r3, #8
 80022ce:	f003 0307 	and.w	r3, r3, #7
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	46bd      	mov	sp, r7
 80022d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022da:	4770      	bx	lr
 80022dc:	e000ed00 	.word	0xe000ed00

080022e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b083      	sub	sp, #12
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	4603      	mov	r3, r0
 80022e8:	6039      	str	r1, [r7, #0]
 80022ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	db0a      	blt.n	800230a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	b2da      	uxtb	r2, r3
 80022f8:	490c      	ldr	r1, [pc, #48]	; (800232c <__NVIC_SetPriority+0x4c>)
 80022fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022fe:	0112      	lsls	r2, r2, #4
 8002300:	b2d2      	uxtb	r2, r2
 8002302:	440b      	add	r3, r1
 8002304:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002308:	e00a      	b.n	8002320 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	b2da      	uxtb	r2, r3
 800230e:	4908      	ldr	r1, [pc, #32]	; (8002330 <__NVIC_SetPriority+0x50>)
 8002310:	79fb      	ldrb	r3, [r7, #7]
 8002312:	f003 030f 	and.w	r3, r3, #15
 8002316:	3b04      	subs	r3, #4
 8002318:	0112      	lsls	r2, r2, #4
 800231a:	b2d2      	uxtb	r2, r2
 800231c:	440b      	add	r3, r1
 800231e:	761a      	strb	r2, [r3, #24]
}
 8002320:	bf00      	nop
 8002322:	370c      	adds	r7, #12
 8002324:	46bd      	mov	sp, r7
 8002326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232a:	4770      	bx	lr
 800232c:	e000e100 	.word	0xe000e100
 8002330:	e000ed00 	.word	0xe000ed00

08002334 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002334:	b480      	push	{r7}
 8002336:	b089      	sub	sp, #36	; 0x24
 8002338:	af00      	add	r7, sp, #0
 800233a:	60f8      	str	r0, [r7, #12]
 800233c:	60b9      	str	r1, [r7, #8]
 800233e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	f003 0307 	and.w	r3, r3, #7
 8002346:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002348:	69fb      	ldr	r3, [r7, #28]
 800234a:	f1c3 0307 	rsb	r3, r3, #7
 800234e:	2b04      	cmp	r3, #4
 8002350:	bf28      	it	cs
 8002352:	2304      	movcs	r3, #4
 8002354:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002356:	69fb      	ldr	r3, [r7, #28]
 8002358:	3304      	adds	r3, #4
 800235a:	2b06      	cmp	r3, #6
 800235c:	d902      	bls.n	8002364 <NVIC_EncodePriority+0x30>
 800235e:	69fb      	ldr	r3, [r7, #28]
 8002360:	3b03      	subs	r3, #3
 8002362:	e000      	b.n	8002366 <NVIC_EncodePriority+0x32>
 8002364:	2300      	movs	r3, #0
 8002366:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002368:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800236c:	69bb      	ldr	r3, [r7, #24]
 800236e:	fa02 f303 	lsl.w	r3, r2, r3
 8002372:	43da      	mvns	r2, r3
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	401a      	ands	r2, r3
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800237c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	fa01 f303 	lsl.w	r3, r1, r3
 8002386:	43d9      	mvns	r1, r3
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800238c:	4313      	orrs	r3, r2
         );
}
 800238e:	4618      	mov	r0, r3
 8002390:	3724      	adds	r7, #36	; 0x24
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr
	...

0800239c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b082      	sub	sp, #8
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	3b01      	subs	r3, #1
 80023a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023ac:	d301      	bcc.n	80023b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023ae:	2301      	movs	r3, #1
 80023b0:	e00f      	b.n	80023d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023b2:	4a0a      	ldr	r2, [pc, #40]	; (80023dc <SysTick_Config+0x40>)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	3b01      	subs	r3, #1
 80023b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023ba:	210f      	movs	r1, #15
 80023bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80023c0:	f7ff ff8e 	bl	80022e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023c4:	4b05      	ldr	r3, [pc, #20]	; (80023dc <SysTick_Config+0x40>)
 80023c6:	2200      	movs	r2, #0
 80023c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023ca:	4b04      	ldr	r3, [pc, #16]	; (80023dc <SysTick_Config+0x40>)
 80023cc:	2207      	movs	r2, #7
 80023ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023d0:	2300      	movs	r3, #0
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	3708      	adds	r7, #8
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	e000e010 	.word	0xe000e010

080023e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b082      	sub	sp, #8
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023e8:	6878      	ldr	r0, [r7, #4]
 80023ea:	f7ff ff47 	bl	800227c <__NVIC_SetPriorityGrouping>
}
 80023ee:	bf00      	nop
 80023f0:	3708      	adds	r7, #8
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}

080023f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023f6:	b580      	push	{r7, lr}
 80023f8:	b086      	sub	sp, #24
 80023fa:	af00      	add	r7, sp, #0
 80023fc:	4603      	mov	r3, r0
 80023fe:	60b9      	str	r1, [r7, #8]
 8002400:	607a      	str	r2, [r7, #4]
 8002402:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002404:	2300      	movs	r3, #0
 8002406:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002408:	f7ff ff5c 	bl	80022c4 <__NVIC_GetPriorityGrouping>
 800240c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800240e:	687a      	ldr	r2, [r7, #4]
 8002410:	68b9      	ldr	r1, [r7, #8]
 8002412:	6978      	ldr	r0, [r7, #20]
 8002414:	f7ff ff8e 	bl	8002334 <NVIC_EncodePriority>
 8002418:	4602      	mov	r2, r0
 800241a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800241e:	4611      	mov	r1, r2
 8002420:	4618      	mov	r0, r3
 8002422:	f7ff ff5d 	bl	80022e0 <__NVIC_SetPriority>
}
 8002426:	bf00      	nop
 8002428:	3718      	adds	r7, #24
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}

0800242e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800242e:	b580      	push	{r7, lr}
 8002430:	b082      	sub	sp, #8
 8002432:	af00      	add	r7, sp, #0
 8002434:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002436:	6878      	ldr	r0, [r7, #4]
 8002438:	f7ff ffb0 	bl	800239c <SysTick_Config>
 800243c:	4603      	mov	r3, r0
}
 800243e:	4618      	mov	r0, r3
 8002440:	3708      	adds	r7, #8
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}
	...

08002448 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002448:	b480      	push	{r7}
 800244a:	b087      	sub	sp, #28
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
 8002450:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002452:	2300      	movs	r3, #0
 8002454:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002456:	e166      	b.n	8002726 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	681a      	ldr	r2, [r3, #0]
 800245c:	2101      	movs	r1, #1
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	fa01 f303 	lsl.w	r3, r1, r3
 8002464:	4013      	ands	r3, r2
 8002466:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	2b00      	cmp	r3, #0
 800246c:	f000 8158 	beq.w	8002720 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	f003 0303 	and.w	r3, r3, #3
 8002478:	2b01      	cmp	r3, #1
 800247a:	d005      	beq.n	8002488 <HAL_GPIO_Init+0x40>
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	f003 0303 	and.w	r3, r3, #3
 8002484:	2b02      	cmp	r3, #2
 8002486:	d130      	bne.n	80024ea <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	689b      	ldr	r3, [r3, #8]
 800248c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	005b      	lsls	r3, r3, #1
 8002492:	2203      	movs	r2, #3
 8002494:	fa02 f303 	lsl.w	r3, r2, r3
 8002498:	43db      	mvns	r3, r3
 800249a:	693a      	ldr	r2, [r7, #16]
 800249c:	4013      	ands	r3, r2
 800249e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	68da      	ldr	r2, [r3, #12]
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	005b      	lsls	r3, r3, #1
 80024a8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ac:	693a      	ldr	r2, [r7, #16]
 80024ae:	4313      	orrs	r3, r2
 80024b0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	693a      	ldr	r2, [r7, #16]
 80024b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80024be:	2201      	movs	r2, #1
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	fa02 f303 	lsl.w	r3, r2, r3
 80024c6:	43db      	mvns	r3, r3
 80024c8:	693a      	ldr	r2, [r7, #16]
 80024ca:	4013      	ands	r3, r2
 80024cc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	091b      	lsrs	r3, r3, #4
 80024d4:	f003 0201 	and.w	r2, r3, #1
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	fa02 f303 	lsl.w	r3, r2, r3
 80024de:	693a      	ldr	r2, [r7, #16]
 80024e0:	4313      	orrs	r3, r2
 80024e2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	693a      	ldr	r2, [r7, #16]
 80024e8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	f003 0303 	and.w	r3, r3, #3
 80024f2:	2b03      	cmp	r3, #3
 80024f4:	d017      	beq.n	8002526 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	68db      	ldr	r3, [r3, #12]
 80024fa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	005b      	lsls	r3, r3, #1
 8002500:	2203      	movs	r2, #3
 8002502:	fa02 f303 	lsl.w	r3, r2, r3
 8002506:	43db      	mvns	r3, r3
 8002508:	693a      	ldr	r2, [r7, #16]
 800250a:	4013      	ands	r3, r2
 800250c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	689a      	ldr	r2, [r3, #8]
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	005b      	lsls	r3, r3, #1
 8002516:	fa02 f303 	lsl.w	r3, r2, r3
 800251a:	693a      	ldr	r2, [r7, #16]
 800251c:	4313      	orrs	r3, r2
 800251e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	693a      	ldr	r2, [r7, #16]
 8002524:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	f003 0303 	and.w	r3, r3, #3
 800252e:	2b02      	cmp	r3, #2
 8002530:	d123      	bne.n	800257a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	08da      	lsrs	r2, r3, #3
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	3208      	adds	r2, #8
 800253a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800253e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	f003 0307 	and.w	r3, r3, #7
 8002546:	009b      	lsls	r3, r3, #2
 8002548:	220f      	movs	r2, #15
 800254a:	fa02 f303 	lsl.w	r3, r2, r3
 800254e:	43db      	mvns	r3, r3
 8002550:	693a      	ldr	r2, [r7, #16]
 8002552:	4013      	ands	r3, r2
 8002554:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	691a      	ldr	r2, [r3, #16]
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	f003 0307 	and.w	r3, r3, #7
 8002560:	009b      	lsls	r3, r3, #2
 8002562:	fa02 f303 	lsl.w	r3, r2, r3
 8002566:	693a      	ldr	r2, [r7, #16]
 8002568:	4313      	orrs	r3, r2
 800256a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	08da      	lsrs	r2, r3, #3
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	3208      	adds	r2, #8
 8002574:	6939      	ldr	r1, [r7, #16]
 8002576:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	005b      	lsls	r3, r3, #1
 8002584:	2203      	movs	r2, #3
 8002586:	fa02 f303 	lsl.w	r3, r2, r3
 800258a:	43db      	mvns	r3, r3
 800258c:	693a      	ldr	r2, [r7, #16]
 800258e:	4013      	ands	r3, r2
 8002590:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	f003 0203 	and.w	r2, r3, #3
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	005b      	lsls	r3, r3, #1
 800259e:	fa02 f303 	lsl.w	r3, r2, r3
 80025a2:	693a      	ldr	r2, [r7, #16]
 80025a4:	4313      	orrs	r3, r2
 80025a6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	693a      	ldr	r2, [r7, #16]
 80025ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	f000 80b2 	beq.w	8002720 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025bc:	4b61      	ldr	r3, [pc, #388]	; (8002744 <HAL_GPIO_Init+0x2fc>)
 80025be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025c0:	4a60      	ldr	r2, [pc, #384]	; (8002744 <HAL_GPIO_Init+0x2fc>)
 80025c2:	f043 0301 	orr.w	r3, r3, #1
 80025c6:	6613      	str	r3, [r2, #96]	; 0x60
 80025c8:	4b5e      	ldr	r3, [pc, #376]	; (8002744 <HAL_GPIO_Init+0x2fc>)
 80025ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025cc:	f003 0301 	and.w	r3, r3, #1
 80025d0:	60bb      	str	r3, [r7, #8]
 80025d2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80025d4:	4a5c      	ldr	r2, [pc, #368]	; (8002748 <HAL_GPIO_Init+0x300>)
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	089b      	lsrs	r3, r3, #2
 80025da:	3302      	adds	r3, #2
 80025dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025e0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	f003 0303 	and.w	r3, r3, #3
 80025e8:	009b      	lsls	r3, r3, #2
 80025ea:	220f      	movs	r2, #15
 80025ec:	fa02 f303 	lsl.w	r3, r2, r3
 80025f0:	43db      	mvns	r3, r3
 80025f2:	693a      	ldr	r2, [r7, #16]
 80025f4:	4013      	ands	r3, r2
 80025f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80025fe:	d02b      	beq.n	8002658 <HAL_GPIO_Init+0x210>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	4a52      	ldr	r2, [pc, #328]	; (800274c <HAL_GPIO_Init+0x304>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d025      	beq.n	8002654 <HAL_GPIO_Init+0x20c>
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	4a51      	ldr	r2, [pc, #324]	; (8002750 <HAL_GPIO_Init+0x308>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d01f      	beq.n	8002650 <HAL_GPIO_Init+0x208>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	4a50      	ldr	r2, [pc, #320]	; (8002754 <HAL_GPIO_Init+0x30c>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d019      	beq.n	800264c <HAL_GPIO_Init+0x204>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	4a4f      	ldr	r2, [pc, #316]	; (8002758 <HAL_GPIO_Init+0x310>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d013      	beq.n	8002648 <HAL_GPIO_Init+0x200>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	4a4e      	ldr	r2, [pc, #312]	; (800275c <HAL_GPIO_Init+0x314>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d00d      	beq.n	8002644 <HAL_GPIO_Init+0x1fc>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	4a4d      	ldr	r2, [pc, #308]	; (8002760 <HAL_GPIO_Init+0x318>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d007      	beq.n	8002640 <HAL_GPIO_Init+0x1f8>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	4a4c      	ldr	r2, [pc, #304]	; (8002764 <HAL_GPIO_Init+0x31c>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d101      	bne.n	800263c <HAL_GPIO_Init+0x1f4>
 8002638:	2307      	movs	r3, #7
 800263a:	e00e      	b.n	800265a <HAL_GPIO_Init+0x212>
 800263c:	2308      	movs	r3, #8
 800263e:	e00c      	b.n	800265a <HAL_GPIO_Init+0x212>
 8002640:	2306      	movs	r3, #6
 8002642:	e00a      	b.n	800265a <HAL_GPIO_Init+0x212>
 8002644:	2305      	movs	r3, #5
 8002646:	e008      	b.n	800265a <HAL_GPIO_Init+0x212>
 8002648:	2304      	movs	r3, #4
 800264a:	e006      	b.n	800265a <HAL_GPIO_Init+0x212>
 800264c:	2303      	movs	r3, #3
 800264e:	e004      	b.n	800265a <HAL_GPIO_Init+0x212>
 8002650:	2302      	movs	r3, #2
 8002652:	e002      	b.n	800265a <HAL_GPIO_Init+0x212>
 8002654:	2301      	movs	r3, #1
 8002656:	e000      	b.n	800265a <HAL_GPIO_Init+0x212>
 8002658:	2300      	movs	r3, #0
 800265a:	697a      	ldr	r2, [r7, #20]
 800265c:	f002 0203 	and.w	r2, r2, #3
 8002660:	0092      	lsls	r2, r2, #2
 8002662:	4093      	lsls	r3, r2
 8002664:	693a      	ldr	r2, [r7, #16]
 8002666:	4313      	orrs	r3, r2
 8002668:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800266a:	4937      	ldr	r1, [pc, #220]	; (8002748 <HAL_GPIO_Init+0x300>)
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	089b      	lsrs	r3, r3, #2
 8002670:	3302      	adds	r3, #2
 8002672:	693a      	ldr	r2, [r7, #16]
 8002674:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002678:	4b3b      	ldr	r3, [pc, #236]	; (8002768 <HAL_GPIO_Init+0x320>)
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	43db      	mvns	r3, r3
 8002682:	693a      	ldr	r2, [r7, #16]
 8002684:	4013      	ands	r3, r2
 8002686:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002690:	2b00      	cmp	r3, #0
 8002692:	d003      	beq.n	800269c <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8002694:	693a      	ldr	r2, [r7, #16]
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	4313      	orrs	r3, r2
 800269a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800269c:	4a32      	ldr	r2, [pc, #200]	; (8002768 <HAL_GPIO_Init+0x320>)
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80026a2:	4b31      	ldr	r3, [pc, #196]	; (8002768 <HAL_GPIO_Init+0x320>)
 80026a4:	68db      	ldr	r3, [r3, #12]
 80026a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	43db      	mvns	r3, r3
 80026ac:	693a      	ldr	r2, [r7, #16]
 80026ae:	4013      	ands	r3, r2
 80026b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d003      	beq.n	80026c6 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80026be:	693a      	ldr	r2, [r7, #16]
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	4313      	orrs	r3, r2
 80026c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80026c6:	4a28      	ldr	r2, [pc, #160]	; (8002768 <HAL_GPIO_Init+0x320>)
 80026c8:	693b      	ldr	r3, [r7, #16]
 80026ca:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80026cc:	4b26      	ldr	r3, [pc, #152]	; (8002768 <HAL_GPIO_Init+0x320>)
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	43db      	mvns	r3, r3
 80026d6:	693a      	ldr	r2, [r7, #16]
 80026d8:	4013      	ands	r3, r2
 80026da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d003      	beq.n	80026f0 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80026e8:	693a      	ldr	r2, [r7, #16]
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	4313      	orrs	r3, r2
 80026ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80026f0:	4a1d      	ldr	r2, [pc, #116]	; (8002768 <HAL_GPIO_Init+0x320>)
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80026f6:	4b1c      	ldr	r3, [pc, #112]	; (8002768 <HAL_GPIO_Init+0x320>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	43db      	mvns	r3, r3
 8002700:	693a      	ldr	r2, [r7, #16]
 8002702:	4013      	ands	r3, r2
 8002704:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800270e:	2b00      	cmp	r3, #0
 8002710:	d003      	beq.n	800271a <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8002712:	693a      	ldr	r2, [r7, #16]
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	4313      	orrs	r3, r2
 8002718:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800271a:	4a13      	ldr	r2, [pc, #76]	; (8002768 <HAL_GPIO_Init+0x320>)
 800271c:	693b      	ldr	r3, [r7, #16]
 800271e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	3301      	adds	r3, #1
 8002724:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	681a      	ldr	r2, [r3, #0]
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	fa22 f303 	lsr.w	r3, r2, r3
 8002730:	2b00      	cmp	r3, #0
 8002732:	f47f ae91 	bne.w	8002458 <HAL_GPIO_Init+0x10>
  }
}
 8002736:	bf00      	nop
 8002738:	bf00      	nop
 800273a:	371c      	adds	r7, #28
 800273c:	46bd      	mov	sp, r7
 800273e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002742:	4770      	bx	lr
 8002744:	40021000 	.word	0x40021000
 8002748:	40010000 	.word	0x40010000
 800274c:	48000400 	.word	0x48000400
 8002750:	48000800 	.word	0x48000800
 8002754:	48000c00 	.word	0x48000c00
 8002758:	48001000 	.word	0x48001000
 800275c:	48001400 	.word	0x48001400
 8002760:	48001800 	.word	0x48001800
 8002764:	48001c00 	.word	0x48001c00
 8002768:	40010400 	.word	0x40010400

0800276c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800276c:	b480      	push	{r7}
 800276e:	b083      	sub	sp, #12
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
 8002774:	460b      	mov	r3, r1
 8002776:	807b      	strh	r3, [r7, #2]
 8002778:	4613      	mov	r3, r2
 800277a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800277c:	787b      	ldrb	r3, [r7, #1]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d003      	beq.n	800278a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002782:	887a      	ldrh	r2, [r7, #2]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002788:	e002      	b.n	8002790 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800278a:	887a      	ldrh	r2, [r7, #2]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002790:	bf00      	nop
 8002792:	370c      	adds	r7, #12
 8002794:	46bd      	mov	sp, r7
 8002796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279a:	4770      	bx	lr

0800279c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b082      	sub	sp, #8
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d101      	bne.n	80027ae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	e081      	b.n	80028b2 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027b4:	b2db      	uxtb	r3, r3
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d106      	bne.n	80027c8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2200      	movs	r2, #0
 80027be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80027c2:	6878      	ldr	r0, [r7, #4]
 80027c4:	f7fe fa86 	bl	8000cd4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2224      	movs	r2, #36	; 0x24
 80027cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	681a      	ldr	r2, [r3, #0]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f022 0201 	bic.w	r2, r2, #1
 80027de:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	685a      	ldr	r2, [r3, #4]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80027ec:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	689a      	ldr	r2, [r3, #8]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80027fc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	68db      	ldr	r3, [r3, #12]
 8002802:	2b01      	cmp	r3, #1
 8002804:	d107      	bne.n	8002816 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	689a      	ldr	r2, [r3, #8]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002812:	609a      	str	r2, [r3, #8]
 8002814:	e006      	b.n	8002824 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	689a      	ldr	r2, [r3, #8]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002822:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	68db      	ldr	r3, [r3, #12]
 8002828:	2b02      	cmp	r3, #2
 800282a:	d104      	bne.n	8002836 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002834:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	687a      	ldr	r2, [r7, #4]
 800283e:	6812      	ldr	r2, [r2, #0]
 8002840:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002844:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002848:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	68da      	ldr	r2, [r3, #12]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002858:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	691a      	ldr	r2, [r3, #16]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	695b      	ldr	r3, [r3, #20]
 8002862:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	699b      	ldr	r3, [r3, #24]
 800286a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	430a      	orrs	r2, r1
 8002872:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	69d9      	ldr	r1, [r3, #28]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6a1a      	ldr	r2, [r3, #32]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	430a      	orrs	r2, r1
 8002882:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	681a      	ldr	r2, [r3, #0]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f042 0201 	orr.w	r2, r2, #1
 8002892:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2200      	movs	r2, #0
 8002898:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2220      	movs	r2, #32
 800289e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2200      	movs	r2, #0
 80028a6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2200      	movs	r2, #0
 80028ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80028b0:	2300      	movs	r3, #0
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	3708      	adds	r7, #8
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}

080028ba <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80028ba:	b480      	push	{r7}
 80028bc:	b083      	sub	sp, #12
 80028be:	af00      	add	r7, sp, #0
 80028c0:	6078      	str	r0, [r7, #4]
 80028c2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028ca:	b2db      	uxtb	r3, r3
 80028cc:	2b20      	cmp	r3, #32
 80028ce:	d138      	bne.n	8002942 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	d101      	bne.n	80028de <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80028da:	2302      	movs	r3, #2
 80028dc:	e032      	b.n	8002944 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2201      	movs	r2, #1
 80028e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2224      	movs	r2, #36	; 0x24
 80028ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	681a      	ldr	r2, [r3, #0]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f022 0201 	bic.w	r2, r2, #1
 80028fc:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	681a      	ldr	r2, [r3, #0]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800290c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	6819      	ldr	r1, [r3, #0]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	683a      	ldr	r2, [r7, #0]
 800291a:	430a      	orrs	r2, r1
 800291c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	681a      	ldr	r2, [r3, #0]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f042 0201 	orr.w	r2, r2, #1
 800292c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2220      	movs	r2, #32
 8002932:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2200      	movs	r2, #0
 800293a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800293e:	2300      	movs	r3, #0
 8002940:	e000      	b.n	8002944 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002942:	2302      	movs	r3, #2
  }
}
 8002944:	4618      	mov	r0, r3
 8002946:	370c      	adds	r7, #12
 8002948:	46bd      	mov	sp, r7
 800294a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294e:	4770      	bx	lr

08002950 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002950:	b480      	push	{r7}
 8002952:	b085      	sub	sp, #20
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
 8002958:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002960:	b2db      	uxtb	r3, r3
 8002962:	2b20      	cmp	r3, #32
 8002964:	d139      	bne.n	80029da <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800296c:	2b01      	cmp	r3, #1
 800296e:	d101      	bne.n	8002974 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002970:	2302      	movs	r3, #2
 8002972:	e033      	b.n	80029dc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2201      	movs	r2, #1
 8002978:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2224      	movs	r2, #36	; 0x24
 8002980:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	681a      	ldr	r2, [r3, #0]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f022 0201 	bic.w	r2, r2, #1
 8002992:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80029a2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	021b      	lsls	r3, r3, #8
 80029a8:	68fa      	ldr	r2, [r7, #12]
 80029aa:	4313      	orrs	r3, r2
 80029ac:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	68fa      	ldr	r2, [r7, #12]
 80029b4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	681a      	ldr	r2, [r3, #0]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f042 0201 	orr.w	r2, r2, #1
 80029c4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2220      	movs	r2, #32
 80029ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2200      	movs	r2, #0
 80029d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80029d6:	2300      	movs	r3, #0
 80029d8:	e000      	b.n	80029dc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80029da:	2302      	movs	r3, #2
  }
}
 80029dc:	4618      	mov	r0, r3
 80029de:	3714      	adds	r7, #20
 80029e0:	46bd      	mov	sp, r7
 80029e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e6:	4770      	bx	lr

080029e8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80029e8:	b480      	push	{r7}
 80029ea:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80029ec:	4b0d      	ldr	r3, [pc, #52]	; (8002a24 <HAL_PWREx_GetVoltageRange+0x3c>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80029f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029f8:	d102      	bne.n	8002a00 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80029fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80029fe:	e00b      	b.n	8002a18 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8002a00:	4b08      	ldr	r3, [pc, #32]	; (8002a24 <HAL_PWREx_GetVoltageRange+0x3c>)
 8002a02:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002a06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a0e:	d102      	bne.n	8002a16 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8002a10:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a14:	e000      	b.n	8002a18 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8002a16:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8002a18:	4618      	mov	r0, r3
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a20:	4770      	bx	lr
 8002a22:	bf00      	nop
 8002a24:	40007000 	.word	0x40007000

08002a28 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b085      	sub	sp, #20
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d141      	bne.n	8002aba <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002a36:	4b4b      	ldr	r3, [pc, #300]	; (8002b64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002a3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a42:	d131      	bne.n	8002aa8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002a44:	4b47      	ldr	r3, [pc, #284]	; (8002b64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002a4a:	4a46      	ldr	r2, [pc, #280]	; (8002b64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a50:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002a54:	4b43      	ldr	r3, [pc, #268]	; (8002b64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002a5c:	4a41      	ldr	r2, [pc, #260]	; (8002b64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a62:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002a64:	4b40      	ldr	r3, [pc, #256]	; (8002b68 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	2232      	movs	r2, #50	; 0x32
 8002a6a:	fb02 f303 	mul.w	r3, r2, r3
 8002a6e:	4a3f      	ldr	r2, [pc, #252]	; (8002b6c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002a70:	fba2 2303 	umull	r2, r3, r2, r3
 8002a74:	0c9b      	lsrs	r3, r3, #18
 8002a76:	3301      	adds	r3, #1
 8002a78:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002a7a:	e002      	b.n	8002a82 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	3b01      	subs	r3, #1
 8002a80:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002a82:	4b38      	ldr	r3, [pc, #224]	; (8002b64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a84:	695b      	ldr	r3, [r3, #20]
 8002a86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a8e:	d102      	bne.n	8002a96 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d1f2      	bne.n	8002a7c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002a96:	4b33      	ldr	r3, [pc, #204]	; (8002b64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a98:	695b      	ldr	r3, [r3, #20]
 8002a9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002aa2:	d158      	bne.n	8002b56 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002aa4:	2303      	movs	r3, #3
 8002aa6:	e057      	b.n	8002b58 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002aa8:	4b2e      	ldr	r3, [pc, #184]	; (8002b64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002aaa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002aae:	4a2d      	ldr	r2, [pc, #180]	; (8002b64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ab0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ab4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002ab8:	e04d      	b.n	8002b56 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ac0:	d141      	bne.n	8002b46 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002ac2:	4b28      	ldr	r3, [pc, #160]	; (8002b64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002aca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ace:	d131      	bne.n	8002b34 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002ad0:	4b24      	ldr	r3, [pc, #144]	; (8002b64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ad2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ad6:	4a23      	ldr	r2, [pc, #140]	; (8002b64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ad8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002adc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002ae0:	4b20      	ldr	r3, [pc, #128]	; (8002b64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002ae8:	4a1e      	ldr	r2, [pc, #120]	; (8002b64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002aea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002aee:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002af0:	4b1d      	ldr	r3, [pc, #116]	; (8002b68 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	2232      	movs	r2, #50	; 0x32
 8002af6:	fb02 f303 	mul.w	r3, r2, r3
 8002afa:	4a1c      	ldr	r2, [pc, #112]	; (8002b6c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002afc:	fba2 2303 	umull	r2, r3, r2, r3
 8002b00:	0c9b      	lsrs	r3, r3, #18
 8002b02:	3301      	adds	r3, #1
 8002b04:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b06:	e002      	b.n	8002b0e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	3b01      	subs	r3, #1
 8002b0c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b0e:	4b15      	ldr	r3, [pc, #84]	; (8002b64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b10:	695b      	ldr	r3, [r3, #20]
 8002b12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b1a:	d102      	bne.n	8002b22 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d1f2      	bne.n	8002b08 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002b22:	4b10      	ldr	r3, [pc, #64]	; (8002b64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b24:	695b      	ldr	r3, [r3, #20]
 8002b26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b2e:	d112      	bne.n	8002b56 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002b30:	2303      	movs	r3, #3
 8002b32:	e011      	b.n	8002b58 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002b34:	4b0b      	ldr	r3, [pc, #44]	; (8002b64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b3a:	4a0a      	ldr	r2, [pc, #40]	; (8002b64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b40:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002b44:	e007      	b.n	8002b56 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002b46:	4b07      	ldr	r3, [pc, #28]	; (8002b64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002b4e:	4a05      	ldr	r2, [pc, #20]	; (8002b64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b50:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b54:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002b56:	2300      	movs	r3, #0
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	3714      	adds	r7, #20
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b62:	4770      	bx	lr
 8002b64:	40007000 	.word	0x40007000
 8002b68:	20000000 	.word	0x20000000
 8002b6c:	431bde83 	.word	0x431bde83

08002b70 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8002b70:	b480      	push	{r7}
 8002b72:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8002b74:	4b05      	ldr	r3, [pc, #20]	; (8002b8c <HAL_PWREx_EnableVddIO2+0x1c>)
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	4a04      	ldr	r2, [pc, #16]	; (8002b8c <HAL_PWREx_EnableVddIO2+0x1c>)
 8002b7a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b7e:	6053      	str	r3, [r2, #4]
}
 8002b80:	bf00      	nop
 8002b82:	46bd      	mov	sp, r7
 8002b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b88:	4770      	bx	lr
 8002b8a:	bf00      	nop
 8002b8c:	40007000 	.word	0x40007000

08002b90 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b088      	sub	sp, #32
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d102      	bne.n	8002ba4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	f000 bc08 	b.w	80033b4 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ba4:	4b96      	ldr	r3, [pc, #600]	; (8002e00 <HAL_RCC_OscConfig+0x270>)
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	f003 030c 	and.w	r3, r3, #12
 8002bac:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002bae:	4b94      	ldr	r3, [pc, #592]	; (8002e00 <HAL_RCC_OscConfig+0x270>)
 8002bb0:	68db      	ldr	r3, [r3, #12]
 8002bb2:	f003 0303 	and.w	r3, r3, #3
 8002bb6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f003 0310 	and.w	r3, r3, #16
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	f000 80e4 	beq.w	8002d8e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002bc6:	69bb      	ldr	r3, [r7, #24]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d007      	beq.n	8002bdc <HAL_RCC_OscConfig+0x4c>
 8002bcc:	69bb      	ldr	r3, [r7, #24]
 8002bce:	2b0c      	cmp	r3, #12
 8002bd0:	f040 808b 	bne.w	8002cea <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	2b01      	cmp	r3, #1
 8002bd8:	f040 8087 	bne.w	8002cea <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002bdc:	4b88      	ldr	r3, [pc, #544]	; (8002e00 <HAL_RCC_OscConfig+0x270>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f003 0302 	and.w	r3, r3, #2
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d005      	beq.n	8002bf4 <HAL_RCC_OscConfig+0x64>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	699b      	ldr	r3, [r3, #24]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d101      	bne.n	8002bf4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	e3df      	b.n	80033b4 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6a1a      	ldr	r2, [r3, #32]
 8002bf8:	4b81      	ldr	r3, [pc, #516]	; (8002e00 <HAL_RCC_OscConfig+0x270>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f003 0308 	and.w	r3, r3, #8
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d004      	beq.n	8002c0e <HAL_RCC_OscConfig+0x7e>
 8002c04:	4b7e      	ldr	r3, [pc, #504]	; (8002e00 <HAL_RCC_OscConfig+0x270>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c0c:	e005      	b.n	8002c1a <HAL_RCC_OscConfig+0x8a>
 8002c0e:	4b7c      	ldr	r3, [pc, #496]	; (8002e00 <HAL_RCC_OscConfig+0x270>)
 8002c10:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c14:	091b      	lsrs	r3, r3, #4
 8002c16:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d223      	bcs.n	8002c66 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6a1b      	ldr	r3, [r3, #32]
 8002c22:	4618      	mov	r0, r3
 8002c24:	f000 fdca 	bl	80037bc <RCC_SetFlashLatencyFromMSIRange>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d001      	beq.n	8002c32 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e3c0      	b.n	80033b4 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c32:	4b73      	ldr	r3, [pc, #460]	; (8002e00 <HAL_RCC_OscConfig+0x270>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a72      	ldr	r2, [pc, #456]	; (8002e00 <HAL_RCC_OscConfig+0x270>)
 8002c38:	f043 0308 	orr.w	r3, r3, #8
 8002c3c:	6013      	str	r3, [r2, #0]
 8002c3e:	4b70      	ldr	r3, [pc, #448]	; (8002e00 <HAL_RCC_OscConfig+0x270>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6a1b      	ldr	r3, [r3, #32]
 8002c4a:	496d      	ldr	r1, [pc, #436]	; (8002e00 <HAL_RCC_OscConfig+0x270>)
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c50:	4b6b      	ldr	r3, [pc, #428]	; (8002e00 <HAL_RCC_OscConfig+0x270>)
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	69db      	ldr	r3, [r3, #28]
 8002c5c:	021b      	lsls	r3, r3, #8
 8002c5e:	4968      	ldr	r1, [pc, #416]	; (8002e00 <HAL_RCC_OscConfig+0x270>)
 8002c60:	4313      	orrs	r3, r2
 8002c62:	604b      	str	r3, [r1, #4]
 8002c64:	e025      	b.n	8002cb2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c66:	4b66      	ldr	r3, [pc, #408]	; (8002e00 <HAL_RCC_OscConfig+0x270>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a65      	ldr	r2, [pc, #404]	; (8002e00 <HAL_RCC_OscConfig+0x270>)
 8002c6c:	f043 0308 	orr.w	r3, r3, #8
 8002c70:	6013      	str	r3, [r2, #0]
 8002c72:	4b63      	ldr	r3, [pc, #396]	; (8002e00 <HAL_RCC_OscConfig+0x270>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6a1b      	ldr	r3, [r3, #32]
 8002c7e:	4960      	ldr	r1, [pc, #384]	; (8002e00 <HAL_RCC_OscConfig+0x270>)
 8002c80:	4313      	orrs	r3, r2
 8002c82:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c84:	4b5e      	ldr	r3, [pc, #376]	; (8002e00 <HAL_RCC_OscConfig+0x270>)
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	69db      	ldr	r3, [r3, #28]
 8002c90:	021b      	lsls	r3, r3, #8
 8002c92:	495b      	ldr	r1, [pc, #364]	; (8002e00 <HAL_RCC_OscConfig+0x270>)
 8002c94:	4313      	orrs	r3, r2
 8002c96:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002c98:	69bb      	ldr	r3, [r7, #24]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d109      	bne.n	8002cb2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6a1b      	ldr	r3, [r3, #32]
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f000 fd8a 	bl	80037bc <RCC_SetFlashLatencyFromMSIRange>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d001      	beq.n	8002cb2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e380      	b.n	80033b4 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002cb2:	f000 fcc1 	bl	8003638 <HAL_RCC_GetSysClockFreq>
 8002cb6:	4602      	mov	r2, r0
 8002cb8:	4b51      	ldr	r3, [pc, #324]	; (8002e00 <HAL_RCC_OscConfig+0x270>)
 8002cba:	689b      	ldr	r3, [r3, #8]
 8002cbc:	091b      	lsrs	r3, r3, #4
 8002cbe:	f003 030f 	and.w	r3, r3, #15
 8002cc2:	4950      	ldr	r1, [pc, #320]	; (8002e04 <HAL_RCC_OscConfig+0x274>)
 8002cc4:	5ccb      	ldrb	r3, [r1, r3]
 8002cc6:	f003 031f 	and.w	r3, r3, #31
 8002cca:	fa22 f303 	lsr.w	r3, r2, r3
 8002cce:	4a4e      	ldr	r2, [pc, #312]	; (8002e08 <HAL_RCC_OscConfig+0x278>)
 8002cd0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002cd2:	4b4e      	ldr	r3, [pc, #312]	; (8002e0c <HAL_RCC_OscConfig+0x27c>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f7fe fa6c 	bl	80011b4 <HAL_InitTick>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002ce0:	7bfb      	ldrb	r3, [r7, #15]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d052      	beq.n	8002d8c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002ce6:	7bfb      	ldrb	r3, [r7, #15]
 8002ce8:	e364      	b.n	80033b4 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	699b      	ldr	r3, [r3, #24]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d032      	beq.n	8002d58 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002cf2:	4b43      	ldr	r3, [pc, #268]	; (8002e00 <HAL_RCC_OscConfig+0x270>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a42      	ldr	r2, [pc, #264]	; (8002e00 <HAL_RCC_OscConfig+0x270>)
 8002cf8:	f043 0301 	orr.w	r3, r3, #1
 8002cfc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002cfe:	f7fe faa9 	bl	8001254 <HAL_GetTick>
 8002d02:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002d04:	e008      	b.n	8002d18 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002d06:	f7fe faa5 	bl	8001254 <HAL_GetTick>
 8002d0a:	4602      	mov	r2, r0
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	1ad3      	subs	r3, r2, r3
 8002d10:	2b02      	cmp	r3, #2
 8002d12:	d901      	bls.n	8002d18 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002d14:	2303      	movs	r3, #3
 8002d16:	e34d      	b.n	80033b4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002d18:	4b39      	ldr	r3, [pc, #228]	; (8002e00 <HAL_RCC_OscConfig+0x270>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f003 0302 	and.w	r3, r3, #2
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d0f0      	beq.n	8002d06 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d24:	4b36      	ldr	r3, [pc, #216]	; (8002e00 <HAL_RCC_OscConfig+0x270>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a35      	ldr	r2, [pc, #212]	; (8002e00 <HAL_RCC_OscConfig+0x270>)
 8002d2a:	f043 0308 	orr.w	r3, r3, #8
 8002d2e:	6013      	str	r3, [r2, #0]
 8002d30:	4b33      	ldr	r3, [pc, #204]	; (8002e00 <HAL_RCC_OscConfig+0x270>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6a1b      	ldr	r3, [r3, #32]
 8002d3c:	4930      	ldr	r1, [pc, #192]	; (8002e00 <HAL_RCC_OscConfig+0x270>)
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d42:	4b2f      	ldr	r3, [pc, #188]	; (8002e00 <HAL_RCC_OscConfig+0x270>)
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	69db      	ldr	r3, [r3, #28]
 8002d4e:	021b      	lsls	r3, r3, #8
 8002d50:	492b      	ldr	r1, [pc, #172]	; (8002e00 <HAL_RCC_OscConfig+0x270>)
 8002d52:	4313      	orrs	r3, r2
 8002d54:	604b      	str	r3, [r1, #4]
 8002d56:	e01a      	b.n	8002d8e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002d58:	4b29      	ldr	r3, [pc, #164]	; (8002e00 <HAL_RCC_OscConfig+0x270>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a28      	ldr	r2, [pc, #160]	; (8002e00 <HAL_RCC_OscConfig+0x270>)
 8002d5e:	f023 0301 	bic.w	r3, r3, #1
 8002d62:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002d64:	f7fe fa76 	bl	8001254 <HAL_GetTick>
 8002d68:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002d6a:	e008      	b.n	8002d7e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002d6c:	f7fe fa72 	bl	8001254 <HAL_GetTick>
 8002d70:	4602      	mov	r2, r0
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	1ad3      	subs	r3, r2, r3
 8002d76:	2b02      	cmp	r3, #2
 8002d78:	d901      	bls.n	8002d7e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002d7a:	2303      	movs	r3, #3
 8002d7c:	e31a      	b.n	80033b4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002d7e:	4b20      	ldr	r3, [pc, #128]	; (8002e00 <HAL_RCC_OscConfig+0x270>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f003 0302 	and.w	r3, r3, #2
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d1f0      	bne.n	8002d6c <HAL_RCC_OscConfig+0x1dc>
 8002d8a:	e000      	b.n	8002d8e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002d8c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 0301 	and.w	r3, r3, #1
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d073      	beq.n	8002e82 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002d9a:	69bb      	ldr	r3, [r7, #24]
 8002d9c:	2b08      	cmp	r3, #8
 8002d9e:	d005      	beq.n	8002dac <HAL_RCC_OscConfig+0x21c>
 8002da0:	69bb      	ldr	r3, [r7, #24]
 8002da2:	2b0c      	cmp	r3, #12
 8002da4:	d10e      	bne.n	8002dc4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	2b03      	cmp	r3, #3
 8002daa:	d10b      	bne.n	8002dc4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dac:	4b14      	ldr	r3, [pc, #80]	; (8002e00 <HAL_RCC_OscConfig+0x270>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d063      	beq.n	8002e80 <HAL_RCC_OscConfig+0x2f0>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d15f      	bne.n	8002e80 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	e2f7      	b.n	80033b4 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dcc:	d106      	bne.n	8002ddc <HAL_RCC_OscConfig+0x24c>
 8002dce:	4b0c      	ldr	r3, [pc, #48]	; (8002e00 <HAL_RCC_OscConfig+0x270>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a0b      	ldr	r2, [pc, #44]	; (8002e00 <HAL_RCC_OscConfig+0x270>)
 8002dd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dd8:	6013      	str	r3, [r2, #0]
 8002dda:	e025      	b.n	8002e28 <HAL_RCC_OscConfig+0x298>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002de4:	d114      	bne.n	8002e10 <HAL_RCC_OscConfig+0x280>
 8002de6:	4b06      	ldr	r3, [pc, #24]	; (8002e00 <HAL_RCC_OscConfig+0x270>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a05      	ldr	r2, [pc, #20]	; (8002e00 <HAL_RCC_OscConfig+0x270>)
 8002dec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002df0:	6013      	str	r3, [r2, #0]
 8002df2:	4b03      	ldr	r3, [pc, #12]	; (8002e00 <HAL_RCC_OscConfig+0x270>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a02      	ldr	r2, [pc, #8]	; (8002e00 <HAL_RCC_OscConfig+0x270>)
 8002df8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dfc:	6013      	str	r3, [r2, #0]
 8002dfe:	e013      	b.n	8002e28 <HAL_RCC_OscConfig+0x298>
 8002e00:	40021000 	.word	0x40021000
 8002e04:	0800751c 	.word	0x0800751c
 8002e08:	20000000 	.word	0x20000000
 8002e0c:	20000004 	.word	0x20000004
 8002e10:	4ba0      	ldr	r3, [pc, #640]	; (8003094 <HAL_RCC_OscConfig+0x504>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a9f      	ldr	r2, [pc, #636]	; (8003094 <HAL_RCC_OscConfig+0x504>)
 8002e16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e1a:	6013      	str	r3, [r2, #0]
 8002e1c:	4b9d      	ldr	r3, [pc, #628]	; (8003094 <HAL_RCC_OscConfig+0x504>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a9c      	ldr	r2, [pc, #624]	; (8003094 <HAL_RCC_OscConfig+0x504>)
 8002e22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e26:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d013      	beq.n	8002e58 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e30:	f7fe fa10 	bl	8001254 <HAL_GetTick>
 8002e34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e36:	e008      	b.n	8002e4a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e38:	f7fe fa0c 	bl	8001254 <HAL_GetTick>
 8002e3c:	4602      	mov	r2, r0
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	1ad3      	subs	r3, r2, r3
 8002e42:	2b64      	cmp	r3, #100	; 0x64
 8002e44:	d901      	bls.n	8002e4a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002e46:	2303      	movs	r3, #3
 8002e48:	e2b4      	b.n	80033b4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e4a:	4b92      	ldr	r3, [pc, #584]	; (8003094 <HAL_RCC_OscConfig+0x504>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d0f0      	beq.n	8002e38 <HAL_RCC_OscConfig+0x2a8>
 8002e56:	e014      	b.n	8002e82 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e58:	f7fe f9fc 	bl	8001254 <HAL_GetTick>
 8002e5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002e5e:	e008      	b.n	8002e72 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e60:	f7fe f9f8 	bl	8001254 <HAL_GetTick>
 8002e64:	4602      	mov	r2, r0
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	1ad3      	subs	r3, r2, r3
 8002e6a:	2b64      	cmp	r3, #100	; 0x64
 8002e6c:	d901      	bls.n	8002e72 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002e6e:	2303      	movs	r3, #3
 8002e70:	e2a0      	b.n	80033b4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002e72:	4b88      	ldr	r3, [pc, #544]	; (8003094 <HAL_RCC_OscConfig+0x504>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d1f0      	bne.n	8002e60 <HAL_RCC_OscConfig+0x2d0>
 8002e7e:	e000      	b.n	8002e82 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 0302 	and.w	r3, r3, #2
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d060      	beq.n	8002f50 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002e8e:	69bb      	ldr	r3, [r7, #24]
 8002e90:	2b04      	cmp	r3, #4
 8002e92:	d005      	beq.n	8002ea0 <HAL_RCC_OscConfig+0x310>
 8002e94:	69bb      	ldr	r3, [r7, #24]
 8002e96:	2b0c      	cmp	r3, #12
 8002e98:	d119      	bne.n	8002ece <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002e9a:	697b      	ldr	r3, [r7, #20]
 8002e9c:	2b02      	cmp	r3, #2
 8002e9e:	d116      	bne.n	8002ece <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ea0:	4b7c      	ldr	r3, [pc, #496]	; (8003094 <HAL_RCC_OscConfig+0x504>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d005      	beq.n	8002eb8 <HAL_RCC_OscConfig+0x328>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	68db      	ldr	r3, [r3, #12]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d101      	bne.n	8002eb8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	e27d      	b.n	80033b4 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002eb8:	4b76      	ldr	r3, [pc, #472]	; (8003094 <HAL_RCC_OscConfig+0x504>)
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	691b      	ldr	r3, [r3, #16]
 8002ec4:	061b      	lsls	r3, r3, #24
 8002ec6:	4973      	ldr	r1, [pc, #460]	; (8003094 <HAL_RCC_OscConfig+0x504>)
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ecc:	e040      	b.n	8002f50 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	68db      	ldr	r3, [r3, #12]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d023      	beq.n	8002f1e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ed6:	4b6f      	ldr	r3, [pc, #444]	; (8003094 <HAL_RCC_OscConfig+0x504>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a6e      	ldr	r2, [pc, #440]	; (8003094 <HAL_RCC_OscConfig+0x504>)
 8002edc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ee0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ee2:	f7fe f9b7 	bl	8001254 <HAL_GetTick>
 8002ee6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ee8:	e008      	b.n	8002efc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002eea:	f7fe f9b3 	bl	8001254 <HAL_GetTick>
 8002eee:	4602      	mov	r2, r0
 8002ef0:	693b      	ldr	r3, [r7, #16]
 8002ef2:	1ad3      	subs	r3, r2, r3
 8002ef4:	2b02      	cmp	r3, #2
 8002ef6:	d901      	bls.n	8002efc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002ef8:	2303      	movs	r3, #3
 8002efa:	e25b      	b.n	80033b4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002efc:	4b65      	ldr	r3, [pc, #404]	; (8003094 <HAL_RCC_OscConfig+0x504>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d0f0      	beq.n	8002eea <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f08:	4b62      	ldr	r3, [pc, #392]	; (8003094 <HAL_RCC_OscConfig+0x504>)
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	691b      	ldr	r3, [r3, #16]
 8002f14:	061b      	lsls	r3, r3, #24
 8002f16:	495f      	ldr	r1, [pc, #380]	; (8003094 <HAL_RCC_OscConfig+0x504>)
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	604b      	str	r3, [r1, #4]
 8002f1c:	e018      	b.n	8002f50 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f1e:	4b5d      	ldr	r3, [pc, #372]	; (8003094 <HAL_RCC_OscConfig+0x504>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a5c      	ldr	r2, [pc, #368]	; (8003094 <HAL_RCC_OscConfig+0x504>)
 8002f24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f2a:	f7fe f993 	bl	8001254 <HAL_GetTick>
 8002f2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002f30:	e008      	b.n	8002f44 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f32:	f7fe f98f 	bl	8001254 <HAL_GetTick>
 8002f36:	4602      	mov	r2, r0
 8002f38:	693b      	ldr	r3, [r7, #16]
 8002f3a:	1ad3      	subs	r3, r2, r3
 8002f3c:	2b02      	cmp	r3, #2
 8002f3e:	d901      	bls.n	8002f44 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002f40:	2303      	movs	r3, #3
 8002f42:	e237      	b.n	80033b4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002f44:	4b53      	ldr	r3, [pc, #332]	; (8003094 <HAL_RCC_OscConfig+0x504>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d1f0      	bne.n	8002f32 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f003 0308 	and.w	r3, r3, #8
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d03c      	beq.n	8002fd6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	695b      	ldr	r3, [r3, #20]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d01c      	beq.n	8002f9e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f64:	4b4b      	ldr	r3, [pc, #300]	; (8003094 <HAL_RCC_OscConfig+0x504>)
 8002f66:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f6a:	4a4a      	ldr	r2, [pc, #296]	; (8003094 <HAL_RCC_OscConfig+0x504>)
 8002f6c:	f043 0301 	orr.w	r3, r3, #1
 8002f70:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f74:	f7fe f96e 	bl	8001254 <HAL_GetTick>
 8002f78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002f7a:	e008      	b.n	8002f8e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f7c:	f7fe f96a 	bl	8001254 <HAL_GetTick>
 8002f80:	4602      	mov	r2, r0
 8002f82:	693b      	ldr	r3, [r7, #16]
 8002f84:	1ad3      	subs	r3, r2, r3
 8002f86:	2b02      	cmp	r3, #2
 8002f88:	d901      	bls.n	8002f8e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002f8a:	2303      	movs	r3, #3
 8002f8c:	e212      	b.n	80033b4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002f8e:	4b41      	ldr	r3, [pc, #260]	; (8003094 <HAL_RCC_OscConfig+0x504>)
 8002f90:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f94:	f003 0302 	and.w	r3, r3, #2
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d0ef      	beq.n	8002f7c <HAL_RCC_OscConfig+0x3ec>
 8002f9c:	e01b      	b.n	8002fd6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f9e:	4b3d      	ldr	r3, [pc, #244]	; (8003094 <HAL_RCC_OscConfig+0x504>)
 8002fa0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fa4:	4a3b      	ldr	r2, [pc, #236]	; (8003094 <HAL_RCC_OscConfig+0x504>)
 8002fa6:	f023 0301 	bic.w	r3, r3, #1
 8002faa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fae:	f7fe f951 	bl	8001254 <HAL_GetTick>
 8002fb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002fb4:	e008      	b.n	8002fc8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fb6:	f7fe f94d 	bl	8001254 <HAL_GetTick>
 8002fba:	4602      	mov	r2, r0
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	1ad3      	subs	r3, r2, r3
 8002fc0:	2b02      	cmp	r3, #2
 8002fc2:	d901      	bls.n	8002fc8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002fc4:	2303      	movs	r3, #3
 8002fc6:	e1f5      	b.n	80033b4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002fc8:	4b32      	ldr	r3, [pc, #200]	; (8003094 <HAL_RCC_OscConfig+0x504>)
 8002fca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fce:	f003 0302 	and.w	r3, r3, #2
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d1ef      	bne.n	8002fb6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f003 0304 	and.w	r3, r3, #4
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	f000 80a6 	beq.w	8003130 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002fe8:	4b2a      	ldr	r3, [pc, #168]	; (8003094 <HAL_RCC_OscConfig+0x504>)
 8002fea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d10d      	bne.n	8003010 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ff4:	4b27      	ldr	r3, [pc, #156]	; (8003094 <HAL_RCC_OscConfig+0x504>)
 8002ff6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ff8:	4a26      	ldr	r2, [pc, #152]	; (8003094 <HAL_RCC_OscConfig+0x504>)
 8002ffa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ffe:	6593      	str	r3, [r2, #88]	; 0x58
 8003000:	4b24      	ldr	r3, [pc, #144]	; (8003094 <HAL_RCC_OscConfig+0x504>)
 8003002:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003004:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003008:	60bb      	str	r3, [r7, #8]
 800300a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800300c:	2301      	movs	r3, #1
 800300e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003010:	4b21      	ldr	r3, [pc, #132]	; (8003098 <HAL_RCC_OscConfig+0x508>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003018:	2b00      	cmp	r3, #0
 800301a:	d118      	bne.n	800304e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800301c:	4b1e      	ldr	r3, [pc, #120]	; (8003098 <HAL_RCC_OscConfig+0x508>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a1d      	ldr	r2, [pc, #116]	; (8003098 <HAL_RCC_OscConfig+0x508>)
 8003022:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003026:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003028:	f7fe f914 	bl	8001254 <HAL_GetTick>
 800302c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800302e:	e008      	b.n	8003042 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003030:	f7fe f910 	bl	8001254 <HAL_GetTick>
 8003034:	4602      	mov	r2, r0
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	1ad3      	subs	r3, r2, r3
 800303a:	2b02      	cmp	r3, #2
 800303c:	d901      	bls.n	8003042 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800303e:	2303      	movs	r3, #3
 8003040:	e1b8      	b.n	80033b4 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003042:	4b15      	ldr	r3, [pc, #84]	; (8003098 <HAL_RCC_OscConfig+0x508>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800304a:	2b00      	cmp	r3, #0
 800304c:	d0f0      	beq.n	8003030 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	2b01      	cmp	r3, #1
 8003054:	d108      	bne.n	8003068 <HAL_RCC_OscConfig+0x4d8>
 8003056:	4b0f      	ldr	r3, [pc, #60]	; (8003094 <HAL_RCC_OscConfig+0x504>)
 8003058:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800305c:	4a0d      	ldr	r2, [pc, #52]	; (8003094 <HAL_RCC_OscConfig+0x504>)
 800305e:	f043 0301 	orr.w	r3, r3, #1
 8003062:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003066:	e029      	b.n	80030bc <HAL_RCC_OscConfig+0x52c>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	2b05      	cmp	r3, #5
 800306e:	d115      	bne.n	800309c <HAL_RCC_OscConfig+0x50c>
 8003070:	4b08      	ldr	r3, [pc, #32]	; (8003094 <HAL_RCC_OscConfig+0x504>)
 8003072:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003076:	4a07      	ldr	r2, [pc, #28]	; (8003094 <HAL_RCC_OscConfig+0x504>)
 8003078:	f043 0304 	orr.w	r3, r3, #4
 800307c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003080:	4b04      	ldr	r3, [pc, #16]	; (8003094 <HAL_RCC_OscConfig+0x504>)
 8003082:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003086:	4a03      	ldr	r2, [pc, #12]	; (8003094 <HAL_RCC_OscConfig+0x504>)
 8003088:	f043 0301 	orr.w	r3, r3, #1
 800308c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003090:	e014      	b.n	80030bc <HAL_RCC_OscConfig+0x52c>
 8003092:	bf00      	nop
 8003094:	40021000 	.word	0x40021000
 8003098:	40007000 	.word	0x40007000
 800309c:	4b9d      	ldr	r3, [pc, #628]	; (8003314 <HAL_RCC_OscConfig+0x784>)
 800309e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030a2:	4a9c      	ldr	r2, [pc, #624]	; (8003314 <HAL_RCC_OscConfig+0x784>)
 80030a4:	f023 0301 	bic.w	r3, r3, #1
 80030a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80030ac:	4b99      	ldr	r3, [pc, #612]	; (8003314 <HAL_RCC_OscConfig+0x784>)
 80030ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030b2:	4a98      	ldr	r2, [pc, #608]	; (8003314 <HAL_RCC_OscConfig+0x784>)
 80030b4:	f023 0304 	bic.w	r3, r3, #4
 80030b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	689b      	ldr	r3, [r3, #8]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d016      	beq.n	80030f2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030c4:	f7fe f8c6 	bl	8001254 <HAL_GetTick>
 80030c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030ca:	e00a      	b.n	80030e2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030cc:	f7fe f8c2 	bl	8001254 <HAL_GetTick>
 80030d0:	4602      	mov	r2, r0
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	1ad3      	subs	r3, r2, r3
 80030d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80030da:	4293      	cmp	r3, r2
 80030dc:	d901      	bls.n	80030e2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80030de:	2303      	movs	r3, #3
 80030e0:	e168      	b.n	80033b4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030e2:	4b8c      	ldr	r3, [pc, #560]	; (8003314 <HAL_RCC_OscConfig+0x784>)
 80030e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030e8:	f003 0302 	and.w	r3, r3, #2
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d0ed      	beq.n	80030cc <HAL_RCC_OscConfig+0x53c>
 80030f0:	e015      	b.n	800311e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030f2:	f7fe f8af 	bl	8001254 <HAL_GetTick>
 80030f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80030f8:	e00a      	b.n	8003110 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030fa:	f7fe f8ab 	bl	8001254 <HAL_GetTick>
 80030fe:	4602      	mov	r2, r0
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	1ad3      	subs	r3, r2, r3
 8003104:	f241 3288 	movw	r2, #5000	; 0x1388
 8003108:	4293      	cmp	r3, r2
 800310a:	d901      	bls.n	8003110 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800310c:	2303      	movs	r3, #3
 800310e:	e151      	b.n	80033b4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003110:	4b80      	ldr	r3, [pc, #512]	; (8003314 <HAL_RCC_OscConfig+0x784>)
 8003112:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003116:	f003 0302 	and.w	r3, r3, #2
 800311a:	2b00      	cmp	r3, #0
 800311c:	d1ed      	bne.n	80030fa <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800311e:	7ffb      	ldrb	r3, [r7, #31]
 8003120:	2b01      	cmp	r3, #1
 8003122:	d105      	bne.n	8003130 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003124:	4b7b      	ldr	r3, [pc, #492]	; (8003314 <HAL_RCC_OscConfig+0x784>)
 8003126:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003128:	4a7a      	ldr	r2, [pc, #488]	; (8003314 <HAL_RCC_OscConfig+0x784>)
 800312a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800312e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f003 0320 	and.w	r3, r3, #32
 8003138:	2b00      	cmp	r3, #0
 800313a:	d03c      	beq.n	80031b6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003140:	2b00      	cmp	r3, #0
 8003142:	d01c      	beq.n	800317e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003144:	4b73      	ldr	r3, [pc, #460]	; (8003314 <HAL_RCC_OscConfig+0x784>)
 8003146:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800314a:	4a72      	ldr	r2, [pc, #456]	; (8003314 <HAL_RCC_OscConfig+0x784>)
 800314c:	f043 0301 	orr.w	r3, r3, #1
 8003150:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003154:	f7fe f87e 	bl	8001254 <HAL_GetTick>
 8003158:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800315a:	e008      	b.n	800316e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800315c:	f7fe f87a 	bl	8001254 <HAL_GetTick>
 8003160:	4602      	mov	r2, r0
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	1ad3      	subs	r3, r2, r3
 8003166:	2b02      	cmp	r3, #2
 8003168:	d901      	bls.n	800316e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800316a:	2303      	movs	r3, #3
 800316c:	e122      	b.n	80033b4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800316e:	4b69      	ldr	r3, [pc, #420]	; (8003314 <HAL_RCC_OscConfig+0x784>)
 8003170:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003174:	f003 0302 	and.w	r3, r3, #2
 8003178:	2b00      	cmp	r3, #0
 800317a:	d0ef      	beq.n	800315c <HAL_RCC_OscConfig+0x5cc>
 800317c:	e01b      	b.n	80031b6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800317e:	4b65      	ldr	r3, [pc, #404]	; (8003314 <HAL_RCC_OscConfig+0x784>)
 8003180:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003184:	4a63      	ldr	r2, [pc, #396]	; (8003314 <HAL_RCC_OscConfig+0x784>)
 8003186:	f023 0301 	bic.w	r3, r3, #1
 800318a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800318e:	f7fe f861 	bl	8001254 <HAL_GetTick>
 8003192:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003194:	e008      	b.n	80031a8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003196:	f7fe f85d 	bl	8001254 <HAL_GetTick>
 800319a:	4602      	mov	r2, r0
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	1ad3      	subs	r3, r2, r3
 80031a0:	2b02      	cmp	r3, #2
 80031a2:	d901      	bls.n	80031a8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80031a4:	2303      	movs	r3, #3
 80031a6:	e105      	b.n	80033b4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80031a8:	4b5a      	ldr	r3, [pc, #360]	; (8003314 <HAL_RCC_OscConfig+0x784>)
 80031aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80031ae:	f003 0302 	and.w	r3, r3, #2
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d1ef      	bne.n	8003196 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	f000 80f9 	beq.w	80033b2 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031c4:	2b02      	cmp	r3, #2
 80031c6:	f040 80cf 	bne.w	8003368 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80031ca:	4b52      	ldr	r3, [pc, #328]	; (8003314 <HAL_RCC_OscConfig+0x784>)
 80031cc:	68db      	ldr	r3, [r3, #12]
 80031ce:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	f003 0203 	and.w	r2, r3, #3
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031da:	429a      	cmp	r2, r3
 80031dc:	d12c      	bne.n	8003238 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031e8:	3b01      	subs	r3, #1
 80031ea:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80031ec:	429a      	cmp	r2, r3
 80031ee:	d123      	bne.n	8003238 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031fa:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80031fc:	429a      	cmp	r2, r3
 80031fe:	d11b      	bne.n	8003238 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800320a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800320c:	429a      	cmp	r2, r3
 800320e:	d113      	bne.n	8003238 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003210:	697b      	ldr	r3, [r7, #20]
 8003212:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800321a:	085b      	lsrs	r3, r3, #1
 800321c:	3b01      	subs	r3, #1
 800321e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003220:	429a      	cmp	r2, r3
 8003222:	d109      	bne.n	8003238 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800322e:	085b      	lsrs	r3, r3, #1
 8003230:	3b01      	subs	r3, #1
 8003232:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003234:	429a      	cmp	r2, r3
 8003236:	d071      	beq.n	800331c <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003238:	69bb      	ldr	r3, [r7, #24]
 800323a:	2b0c      	cmp	r3, #12
 800323c:	d068      	beq.n	8003310 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800323e:	4b35      	ldr	r3, [pc, #212]	; (8003314 <HAL_RCC_OscConfig+0x784>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003246:	2b00      	cmp	r3, #0
 8003248:	d105      	bne.n	8003256 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800324a:	4b32      	ldr	r3, [pc, #200]	; (8003314 <HAL_RCC_OscConfig+0x784>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003252:	2b00      	cmp	r3, #0
 8003254:	d001      	beq.n	800325a <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8003256:	2301      	movs	r3, #1
 8003258:	e0ac      	b.n	80033b4 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800325a:	4b2e      	ldr	r3, [pc, #184]	; (8003314 <HAL_RCC_OscConfig+0x784>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a2d      	ldr	r2, [pc, #180]	; (8003314 <HAL_RCC_OscConfig+0x784>)
 8003260:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003264:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003266:	f7fd fff5 	bl	8001254 <HAL_GetTick>
 800326a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800326c:	e008      	b.n	8003280 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800326e:	f7fd fff1 	bl	8001254 <HAL_GetTick>
 8003272:	4602      	mov	r2, r0
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	1ad3      	subs	r3, r2, r3
 8003278:	2b02      	cmp	r3, #2
 800327a:	d901      	bls.n	8003280 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 800327c:	2303      	movs	r3, #3
 800327e:	e099      	b.n	80033b4 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003280:	4b24      	ldr	r3, [pc, #144]	; (8003314 <HAL_RCC_OscConfig+0x784>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003288:	2b00      	cmp	r3, #0
 800328a:	d1f0      	bne.n	800326e <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800328c:	4b21      	ldr	r3, [pc, #132]	; (8003314 <HAL_RCC_OscConfig+0x784>)
 800328e:	68da      	ldr	r2, [r3, #12]
 8003290:	4b21      	ldr	r3, [pc, #132]	; (8003318 <HAL_RCC_OscConfig+0x788>)
 8003292:	4013      	ands	r3, r2
 8003294:	687a      	ldr	r2, [r7, #4]
 8003296:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003298:	687a      	ldr	r2, [r7, #4]
 800329a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800329c:	3a01      	subs	r2, #1
 800329e:	0112      	lsls	r2, r2, #4
 80032a0:	4311      	orrs	r1, r2
 80032a2:	687a      	ldr	r2, [r7, #4]
 80032a4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80032a6:	0212      	lsls	r2, r2, #8
 80032a8:	4311      	orrs	r1, r2
 80032aa:	687a      	ldr	r2, [r7, #4]
 80032ac:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80032ae:	0852      	lsrs	r2, r2, #1
 80032b0:	3a01      	subs	r2, #1
 80032b2:	0552      	lsls	r2, r2, #21
 80032b4:	4311      	orrs	r1, r2
 80032b6:	687a      	ldr	r2, [r7, #4]
 80032b8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80032ba:	0852      	lsrs	r2, r2, #1
 80032bc:	3a01      	subs	r2, #1
 80032be:	0652      	lsls	r2, r2, #25
 80032c0:	4311      	orrs	r1, r2
 80032c2:	687a      	ldr	r2, [r7, #4]
 80032c4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80032c6:	06d2      	lsls	r2, r2, #27
 80032c8:	430a      	orrs	r2, r1
 80032ca:	4912      	ldr	r1, [pc, #72]	; (8003314 <HAL_RCC_OscConfig+0x784>)
 80032cc:	4313      	orrs	r3, r2
 80032ce:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80032d0:	4b10      	ldr	r3, [pc, #64]	; (8003314 <HAL_RCC_OscConfig+0x784>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a0f      	ldr	r2, [pc, #60]	; (8003314 <HAL_RCC_OscConfig+0x784>)
 80032d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80032da:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80032dc:	4b0d      	ldr	r3, [pc, #52]	; (8003314 <HAL_RCC_OscConfig+0x784>)
 80032de:	68db      	ldr	r3, [r3, #12]
 80032e0:	4a0c      	ldr	r2, [pc, #48]	; (8003314 <HAL_RCC_OscConfig+0x784>)
 80032e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80032e6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80032e8:	f7fd ffb4 	bl	8001254 <HAL_GetTick>
 80032ec:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032ee:	e008      	b.n	8003302 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032f0:	f7fd ffb0 	bl	8001254 <HAL_GetTick>
 80032f4:	4602      	mov	r2, r0
 80032f6:	693b      	ldr	r3, [r7, #16]
 80032f8:	1ad3      	subs	r3, r2, r3
 80032fa:	2b02      	cmp	r3, #2
 80032fc:	d901      	bls.n	8003302 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80032fe:	2303      	movs	r3, #3
 8003300:	e058      	b.n	80033b4 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003302:	4b04      	ldr	r3, [pc, #16]	; (8003314 <HAL_RCC_OscConfig+0x784>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800330a:	2b00      	cmp	r3, #0
 800330c:	d0f0      	beq.n	80032f0 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800330e:	e050      	b.n	80033b2 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003310:	2301      	movs	r3, #1
 8003312:	e04f      	b.n	80033b4 <HAL_RCC_OscConfig+0x824>
 8003314:	40021000 	.word	0x40021000
 8003318:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800331c:	4b27      	ldr	r3, [pc, #156]	; (80033bc <HAL_RCC_OscConfig+0x82c>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003324:	2b00      	cmp	r3, #0
 8003326:	d144      	bne.n	80033b2 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003328:	4b24      	ldr	r3, [pc, #144]	; (80033bc <HAL_RCC_OscConfig+0x82c>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a23      	ldr	r2, [pc, #140]	; (80033bc <HAL_RCC_OscConfig+0x82c>)
 800332e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003332:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003334:	4b21      	ldr	r3, [pc, #132]	; (80033bc <HAL_RCC_OscConfig+0x82c>)
 8003336:	68db      	ldr	r3, [r3, #12]
 8003338:	4a20      	ldr	r2, [pc, #128]	; (80033bc <HAL_RCC_OscConfig+0x82c>)
 800333a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800333e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003340:	f7fd ff88 	bl	8001254 <HAL_GetTick>
 8003344:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003346:	e008      	b.n	800335a <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003348:	f7fd ff84 	bl	8001254 <HAL_GetTick>
 800334c:	4602      	mov	r2, r0
 800334e:	693b      	ldr	r3, [r7, #16]
 8003350:	1ad3      	subs	r3, r2, r3
 8003352:	2b02      	cmp	r3, #2
 8003354:	d901      	bls.n	800335a <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8003356:	2303      	movs	r3, #3
 8003358:	e02c      	b.n	80033b4 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800335a:	4b18      	ldr	r3, [pc, #96]	; (80033bc <HAL_RCC_OscConfig+0x82c>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003362:	2b00      	cmp	r3, #0
 8003364:	d0f0      	beq.n	8003348 <HAL_RCC_OscConfig+0x7b8>
 8003366:	e024      	b.n	80033b2 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003368:	69bb      	ldr	r3, [r7, #24]
 800336a:	2b0c      	cmp	r3, #12
 800336c:	d01f      	beq.n	80033ae <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800336e:	4b13      	ldr	r3, [pc, #76]	; (80033bc <HAL_RCC_OscConfig+0x82c>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a12      	ldr	r2, [pc, #72]	; (80033bc <HAL_RCC_OscConfig+0x82c>)
 8003374:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003378:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800337a:	f7fd ff6b 	bl	8001254 <HAL_GetTick>
 800337e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003380:	e008      	b.n	8003394 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003382:	f7fd ff67 	bl	8001254 <HAL_GetTick>
 8003386:	4602      	mov	r2, r0
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	1ad3      	subs	r3, r2, r3
 800338c:	2b02      	cmp	r3, #2
 800338e:	d901      	bls.n	8003394 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8003390:	2303      	movs	r3, #3
 8003392:	e00f      	b.n	80033b4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003394:	4b09      	ldr	r3, [pc, #36]	; (80033bc <HAL_RCC_OscConfig+0x82c>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800339c:	2b00      	cmp	r3, #0
 800339e:	d1f0      	bne.n	8003382 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80033a0:	4b06      	ldr	r3, [pc, #24]	; (80033bc <HAL_RCC_OscConfig+0x82c>)
 80033a2:	68da      	ldr	r2, [r3, #12]
 80033a4:	4905      	ldr	r1, [pc, #20]	; (80033bc <HAL_RCC_OscConfig+0x82c>)
 80033a6:	4b06      	ldr	r3, [pc, #24]	; (80033c0 <HAL_RCC_OscConfig+0x830>)
 80033a8:	4013      	ands	r3, r2
 80033aa:	60cb      	str	r3, [r1, #12]
 80033ac:	e001      	b.n	80033b2 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80033ae:	2301      	movs	r3, #1
 80033b0:	e000      	b.n	80033b4 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 80033b2:	2300      	movs	r3, #0
}
 80033b4:	4618      	mov	r0, r3
 80033b6:	3720      	adds	r7, #32
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bd80      	pop	{r7, pc}
 80033bc:	40021000 	.word	0x40021000
 80033c0:	feeefffc 	.word	0xfeeefffc

080033c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b086      	sub	sp, #24
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
 80033cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80033ce:	2300      	movs	r3, #0
 80033d0:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d101      	bne.n	80033dc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80033d8:	2301      	movs	r3, #1
 80033da:	e11d      	b.n	8003618 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80033dc:	4b90      	ldr	r3, [pc, #576]	; (8003620 <HAL_RCC_ClockConfig+0x25c>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f003 030f 	and.w	r3, r3, #15
 80033e4:	683a      	ldr	r2, [r7, #0]
 80033e6:	429a      	cmp	r2, r3
 80033e8:	d910      	bls.n	800340c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033ea:	4b8d      	ldr	r3, [pc, #564]	; (8003620 <HAL_RCC_ClockConfig+0x25c>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f023 020f 	bic.w	r2, r3, #15
 80033f2:	498b      	ldr	r1, [pc, #556]	; (8003620 <HAL_RCC_ClockConfig+0x25c>)
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	4313      	orrs	r3, r2
 80033f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033fa:	4b89      	ldr	r3, [pc, #548]	; (8003620 <HAL_RCC_ClockConfig+0x25c>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f003 030f 	and.w	r3, r3, #15
 8003402:	683a      	ldr	r2, [r7, #0]
 8003404:	429a      	cmp	r2, r3
 8003406:	d001      	beq.n	800340c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003408:	2301      	movs	r3, #1
 800340a:	e105      	b.n	8003618 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f003 0302 	and.w	r3, r3, #2
 8003414:	2b00      	cmp	r3, #0
 8003416:	d010      	beq.n	800343a <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	689a      	ldr	r2, [r3, #8]
 800341c:	4b81      	ldr	r3, [pc, #516]	; (8003624 <HAL_RCC_ClockConfig+0x260>)
 800341e:	689b      	ldr	r3, [r3, #8]
 8003420:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003424:	429a      	cmp	r2, r3
 8003426:	d908      	bls.n	800343a <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003428:	4b7e      	ldr	r3, [pc, #504]	; (8003624 <HAL_RCC_ClockConfig+0x260>)
 800342a:	689b      	ldr	r3, [r3, #8]
 800342c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	689b      	ldr	r3, [r3, #8]
 8003434:	497b      	ldr	r1, [pc, #492]	; (8003624 <HAL_RCC_ClockConfig+0x260>)
 8003436:	4313      	orrs	r3, r2
 8003438:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f003 0301 	and.w	r3, r3, #1
 8003442:	2b00      	cmp	r3, #0
 8003444:	d079      	beq.n	800353a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	2b03      	cmp	r3, #3
 800344c:	d11e      	bne.n	800348c <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800344e:	4b75      	ldr	r3, [pc, #468]	; (8003624 <HAL_RCC_ClockConfig+0x260>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003456:	2b00      	cmp	r3, #0
 8003458:	d101      	bne.n	800345e <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 800345a:	2301      	movs	r3, #1
 800345c:	e0dc      	b.n	8003618 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800345e:	f000 fa07 	bl	8003870 <RCC_GetSysClockFreqFromPLLSource>
 8003462:	4603      	mov	r3, r0
 8003464:	4a70      	ldr	r2, [pc, #448]	; (8003628 <HAL_RCC_ClockConfig+0x264>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d946      	bls.n	80034f8 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800346a:	4b6e      	ldr	r3, [pc, #440]	; (8003624 <HAL_RCC_ClockConfig+0x260>)
 800346c:	689b      	ldr	r3, [r3, #8]
 800346e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003472:	2b00      	cmp	r3, #0
 8003474:	d140      	bne.n	80034f8 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003476:	4b6b      	ldr	r3, [pc, #428]	; (8003624 <HAL_RCC_ClockConfig+0x260>)
 8003478:	689b      	ldr	r3, [r3, #8]
 800347a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800347e:	4a69      	ldr	r2, [pc, #420]	; (8003624 <HAL_RCC_ClockConfig+0x260>)
 8003480:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003484:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003486:	2380      	movs	r3, #128	; 0x80
 8003488:	617b      	str	r3, [r7, #20]
 800348a:	e035      	b.n	80034f8 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	2b02      	cmp	r3, #2
 8003492:	d107      	bne.n	80034a4 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003494:	4b63      	ldr	r3, [pc, #396]	; (8003624 <HAL_RCC_ClockConfig+0x260>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800349c:	2b00      	cmp	r3, #0
 800349e:	d115      	bne.n	80034cc <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80034a0:	2301      	movs	r3, #1
 80034a2:	e0b9      	b.n	8003618 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d107      	bne.n	80034bc <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80034ac:	4b5d      	ldr	r3, [pc, #372]	; (8003624 <HAL_RCC_ClockConfig+0x260>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f003 0302 	and.w	r3, r3, #2
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d109      	bne.n	80034cc <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80034b8:	2301      	movs	r3, #1
 80034ba:	e0ad      	b.n	8003618 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80034bc:	4b59      	ldr	r3, [pc, #356]	; (8003624 <HAL_RCC_ClockConfig+0x260>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d101      	bne.n	80034cc <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80034c8:	2301      	movs	r3, #1
 80034ca:	e0a5      	b.n	8003618 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80034cc:	f000 f8b4 	bl	8003638 <HAL_RCC_GetSysClockFreq>
 80034d0:	4603      	mov	r3, r0
 80034d2:	4a55      	ldr	r2, [pc, #340]	; (8003628 <HAL_RCC_ClockConfig+0x264>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d90f      	bls.n	80034f8 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80034d8:	4b52      	ldr	r3, [pc, #328]	; (8003624 <HAL_RCC_ClockConfig+0x260>)
 80034da:	689b      	ldr	r3, [r3, #8]
 80034dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d109      	bne.n	80034f8 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80034e4:	4b4f      	ldr	r3, [pc, #316]	; (8003624 <HAL_RCC_ClockConfig+0x260>)
 80034e6:	689b      	ldr	r3, [r3, #8]
 80034e8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80034ec:	4a4d      	ldr	r2, [pc, #308]	; (8003624 <HAL_RCC_ClockConfig+0x260>)
 80034ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034f2:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80034f4:	2380      	movs	r3, #128	; 0x80
 80034f6:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80034f8:	4b4a      	ldr	r3, [pc, #296]	; (8003624 <HAL_RCC_ClockConfig+0x260>)
 80034fa:	689b      	ldr	r3, [r3, #8]
 80034fc:	f023 0203 	bic.w	r2, r3, #3
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	4947      	ldr	r1, [pc, #284]	; (8003624 <HAL_RCC_ClockConfig+0x260>)
 8003506:	4313      	orrs	r3, r2
 8003508:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800350a:	f7fd fea3 	bl	8001254 <HAL_GetTick>
 800350e:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003510:	e00a      	b.n	8003528 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003512:	f7fd fe9f 	bl	8001254 <HAL_GetTick>
 8003516:	4602      	mov	r2, r0
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	1ad3      	subs	r3, r2, r3
 800351c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003520:	4293      	cmp	r3, r2
 8003522:	d901      	bls.n	8003528 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8003524:	2303      	movs	r3, #3
 8003526:	e077      	b.n	8003618 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003528:	4b3e      	ldr	r3, [pc, #248]	; (8003624 <HAL_RCC_ClockConfig+0x260>)
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	f003 020c 	and.w	r2, r3, #12
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	009b      	lsls	r3, r3, #2
 8003536:	429a      	cmp	r2, r3
 8003538:	d1eb      	bne.n	8003512 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	2b80      	cmp	r3, #128	; 0x80
 800353e:	d105      	bne.n	800354c <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003540:	4b38      	ldr	r3, [pc, #224]	; (8003624 <HAL_RCC_ClockConfig+0x260>)
 8003542:	689b      	ldr	r3, [r3, #8]
 8003544:	4a37      	ldr	r2, [pc, #220]	; (8003624 <HAL_RCC_ClockConfig+0x260>)
 8003546:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800354a:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f003 0302 	and.w	r3, r3, #2
 8003554:	2b00      	cmp	r3, #0
 8003556:	d010      	beq.n	800357a <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	689a      	ldr	r2, [r3, #8]
 800355c:	4b31      	ldr	r3, [pc, #196]	; (8003624 <HAL_RCC_ClockConfig+0x260>)
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003564:	429a      	cmp	r2, r3
 8003566:	d208      	bcs.n	800357a <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003568:	4b2e      	ldr	r3, [pc, #184]	; (8003624 <HAL_RCC_ClockConfig+0x260>)
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	492b      	ldr	r1, [pc, #172]	; (8003624 <HAL_RCC_ClockConfig+0x260>)
 8003576:	4313      	orrs	r3, r2
 8003578:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800357a:	4b29      	ldr	r3, [pc, #164]	; (8003620 <HAL_RCC_ClockConfig+0x25c>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f003 030f 	and.w	r3, r3, #15
 8003582:	683a      	ldr	r2, [r7, #0]
 8003584:	429a      	cmp	r2, r3
 8003586:	d210      	bcs.n	80035aa <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003588:	4b25      	ldr	r3, [pc, #148]	; (8003620 <HAL_RCC_ClockConfig+0x25c>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f023 020f 	bic.w	r2, r3, #15
 8003590:	4923      	ldr	r1, [pc, #140]	; (8003620 <HAL_RCC_ClockConfig+0x25c>)
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	4313      	orrs	r3, r2
 8003596:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003598:	4b21      	ldr	r3, [pc, #132]	; (8003620 <HAL_RCC_ClockConfig+0x25c>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f003 030f 	and.w	r3, r3, #15
 80035a0:	683a      	ldr	r2, [r7, #0]
 80035a2:	429a      	cmp	r2, r3
 80035a4:	d001      	beq.n	80035aa <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 80035a6:	2301      	movs	r3, #1
 80035a8:	e036      	b.n	8003618 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f003 0304 	and.w	r3, r3, #4
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d008      	beq.n	80035c8 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035b6:	4b1b      	ldr	r3, [pc, #108]	; (8003624 <HAL_RCC_ClockConfig+0x260>)
 80035b8:	689b      	ldr	r3, [r3, #8]
 80035ba:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	68db      	ldr	r3, [r3, #12]
 80035c2:	4918      	ldr	r1, [pc, #96]	; (8003624 <HAL_RCC_ClockConfig+0x260>)
 80035c4:	4313      	orrs	r3, r2
 80035c6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f003 0308 	and.w	r3, r3, #8
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d009      	beq.n	80035e8 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80035d4:	4b13      	ldr	r3, [pc, #76]	; (8003624 <HAL_RCC_ClockConfig+0x260>)
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	691b      	ldr	r3, [r3, #16]
 80035e0:	00db      	lsls	r3, r3, #3
 80035e2:	4910      	ldr	r1, [pc, #64]	; (8003624 <HAL_RCC_ClockConfig+0x260>)
 80035e4:	4313      	orrs	r3, r2
 80035e6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80035e8:	f000 f826 	bl	8003638 <HAL_RCC_GetSysClockFreq>
 80035ec:	4602      	mov	r2, r0
 80035ee:	4b0d      	ldr	r3, [pc, #52]	; (8003624 <HAL_RCC_ClockConfig+0x260>)
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	091b      	lsrs	r3, r3, #4
 80035f4:	f003 030f 	and.w	r3, r3, #15
 80035f8:	490c      	ldr	r1, [pc, #48]	; (800362c <HAL_RCC_ClockConfig+0x268>)
 80035fa:	5ccb      	ldrb	r3, [r1, r3]
 80035fc:	f003 031f 	and.w	r3, r3, #31
 8003600:	fa22 f303 	lsr.w	r3, r2, r3
 8003604:	4a0a      	ldr	r2, [pc, #40]	; (8003630 <HAL_RCC_ClockConfig+0x26c>)
 8003606:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003608:	4b0a      	ldr	r3, [pc, #40]	; (8003634 <HAL_RCC_ClockConfig+0x270>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4618      	mov	r0, r3
 800360e:	f7fd fdd1 	bl	80011b4 <HAL_InitTick>
 8003612:	4603      	mov	r3, r0
 8003614:	73fb      	strb	r3, [r7, #15]

  return status;
 8003616:	7bfb      	ldrb	r3, [r7, #15]
}
 8003618:	4618      	mov	r0, r3
 800361a:	3718      	adds	r7, #24
 800361c:	46bd      	mov	sp, r7
 800361e:	bd80      	pop	{r7, pc}
 8003620:	40022000 	.word	0x40022000
 8003624:	40021000 	.word	0x40021000
 8003628:	04c4b400 	.word	0x04c4b400
 800362c:	0800751c 	.word	0x0800751c
 8003630:	20000000 	.word	0x20000000
 8003634:	20000004 	.word	0x20000004

08003638 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003638:	b480      	push	{r7}
 800363a:	b089      	sub	sp, #36	; 0x24
 800363c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800363e:	2300      	movs	r3, #0
 8003640:	61fb      	str	r3, [r7, #28]
 8003642:	2300      	movs	r3, #0
 8003644:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003646:	4b3e      	ldr	r3, [pc, #248]	; (8003740 <HAL_RCC_GetSysClockFreq+0x108>)
 8003648:	689b      	ldr	r3, [r3, #8]
 800364a:	f003 030c 	and.w	r3, r3, #12
 800364e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003650:	4b3b      	ldr	r3, [pc, #236]	; (8003740 <HAL_RCC_GetSysClockFreq+0x108>)
 8003652:	68db      	ldr	r3, [r3, #12]
 8003654:	f003 0303 	and.w	r3, r3, #3
 8003658:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800365a:	693b      	ldr	r3, [r7, #16]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d005      	beq.n	800366c <HAL_RCC_GetSysClockFreq+0x34>
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	2b0c      	cmp	r3, #12
 8003664:	d121      	bne.n	80036aa <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	2b01      	cmp	r3, #1
 800366a:	d11e      	bne.n	80036aa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800366c:	4b34      	ldr	r3, [pc, #208]	; (8003740 <HAL_RCC_GetSysClockFreq+0x108>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f003 0308 	and.w	r3, r3, #8
 8003674:	2b00      	cmp	r3, #0
 8003676:	d107      	bne.n	8003688 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003678:	4b31      	ldr	r3, [pc, #196]	; (8003740 <HAL_RCC_GetSysClockFreq+0x108>)
 800367a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800367e:	0a1b      	lsrs	r3, r3, #8
 8003680:	f003 030f 	and.w	r3, r3, #15
 8003684:	61fb      	str	r3, [r7, #28]
 8003686:	e005      	b.n	8003694 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003688:	4b2d      	ldr	r3, [pc, #180]	; (8003740 <HAL_RCC_GetSysClockFreq+0x108>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	091b      	lsrs	r3, r3, #4
 800368e:	f003 030f 	and.w	r3, r3, #15
 8003692:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003694:	4a2b      	ldr	r2, [pc, #172]	; (8003744 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003696:	69fb      	ldr	r3, [r7, #28]
 8003698:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800369c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800369e:	693b      	ldr	r3, [r7, #16]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d10d      	bne.n	80036c0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80036a4:	69fb      	ldr	r3, [r7, #28]
 80036a6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80036a8:	e00a      	b.n	80036c0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80036aa:	693b      	ldr	r3, [r7, #16]
 80036ac:	2b04      	cmp	r3, #4
 80036ae:	d102      	bne.n	80036b6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80036b0:	4b25      	ldr	r3, [pc, #148]	; (8003748 <HAL_RCC_GetSysClockFreq+0x110>)
 80036b2:	61bb      	str	r3, [r7, #24]
 80036b4:	e004      	b.n	80036c0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	2b08      	cmp	r3, #8
 80036ba:	d101      	bne.n	80036c0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80036bc:	4b22      	ldr	r3, [pc, #136]	; (8003748 <HAL_RCC_GetSysClockFreq+0x110>)
 80036be:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80036c0:	693b      	ldr	r3, [r7, #16]
 80036c2:	2b0c      	cmp	r3, #12
 80036c4:	d134      	bne.n	8003730 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80036c6:	4b1e      	ldr	r3, [pc, #120]	; (8003740 <HAL_RCC_GetSysClockFreq+0x108>)
 80036c8:	68db      	ldr	r3, [r3, #12]
 80036ca:	f003 0303 	and.w	r3, r3, #3
 80036ce:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	2b02      	cmp	r3, #2
 80036d4:	d003      	beq.n	80036de <HAL_RCC_GetSysClockFreq+0xa6>
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	2b03      	cmp	r3, #3
 80036da:	d003      	beq.n	80036e4 <HAL_RCC_GetSysClockFreq+0xac>
 80036dc:	e005      	b.n	80036ea <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80036de:	4b1a      	ldr	r3, [pc, #104]	; (8003748 <HAL_RCC_GetSysClockFreq+0x110>)
 80036e0:	617b      	str	r3, [r7, #20]
      break;
 80036e2:	e005      	b.n	80036f0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80036e4:	4b18      	ldr	r3, [pc, #96]	; (8003748 <HAL_RCC_GetSysClockFreq+0x110>)
 80036e6:	617b      	str	r3, [r7, #20]
      break;
 80036e8:	e002      	b.n	80036f0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80036ea:	69fb      	ldr	r3, [r7, #28]
 80036ec:	617b      	str	r3, [r7, #20]
      break;
 80036ee:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80036f0:	4b13      	ldr	r3, [pc, #76]	; (8003740 <HAL_RCC_GetSysClockFreq+0x108>)
 80036f2:	68db      	ldr	r3, [r3, #12]
 80036f4:	091b      	lsrs	r3, r3, #4
 80036f6:	f003 030f 	and.w	r3, r3, #15
 80036fa:	3301      	adds	r3, #1
 80036fc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80036fe:	4b10      	ldr	r3, [pc, #64]	; (8003740 <HAL_RCC_GetSysClockFreq+0x108>)
 8003700:	68db      	ldr	r3, [r3, #12]
 8003702:	0a1b      	lsrs	r3, r3, #8
 8003704:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003708:	697a      	ldr	r2, [r7, #20]
 800370a:	fb03 f202 	mul.w	r2, r3, r2
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	fbb2 f3f3 	udiv	r3, r2, r3
 8003714:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003716:	4b0a      	ldr	r3, [pc, #40]	; (8003740 <HAL_RCC_GetSysClockFreq+0x108>)
 8003718:	68db      	ldr	r3, [r3, #12]
 800371a:	0e5b      	lsrs	r3, r3, #25
 800371c:	f003 0303 	and.w	r3, r3, #3
 8003720:	3301      	adds	r3, #1
 8003722:	005b      	lsls	r3, r3, #1
 8003724:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003726:	697a      	ldr	r2, [r7, #20]
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	fbb2 f3f3 	udiv	r3, r2, r3
 800372e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003730:	69bb      	ldr	r3, [r7, #24]
}
 8003732:	4618      	mov	r0, r3
 8003734:	3724      	adds	r7, #36	; 0x24
 8003736:	46bd      	mov	sp, r7
 8003738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373c:	4770      	bx	lr
 800373e:	bf00      	nop
 8003740:	40021000 	.word	0x40021000
 8003744:	08007534 	.word	0x08007534
 8003748:	00f42400 	.word	0x00f42400

0800374c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800374c:	b480      	push	{r7}
 800374e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003750:	4b03      	ldr	r3, [pc, #12]	; (8003760 <HAL_RCC_GetHCLKFreq+0x14>)
 8003752:	681b      	ldr	r3, [r3, #0]
}
 8003754:	4618      	mov	r0, r3
 8003756:	46bd      	mov	sp, r7
 8003758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375c:	4770      	bx	lr
 800375e:	bf00      	nop
 8003760:	20000000 	.word	0x20000000

08003764 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003768:	f7ff fff0 	bl	800374c <HAL_RCC_GetHCLKFreq>
 800376c:	4602      	mov	r2, r0
 800376e:	4b06      	ldr	r3, [pc, #24]	; (8003788 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003770:	689b      	ldr	r3, [r3, #8]
 8003772:	0a1b      	lsrs	r3, r3, #8
 8003774:	f003 0307 	and.w	r3, r3, #7
 8003778:	4904      	ldr	r1, [pc, #16]	; (800378c <HAL_RCC_GetPCLK1Freq+0x28>)
 800377a:	5ccb      	ldrb	r3, [r1, r3]
 800377c:	f003 031f 	and.w	r3, r3, #31
 8003780:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003784:	4618      	mov	r0, r3
 8003786:	bd80      	pop	{r7, pc}
 8003788:	40021000 	.word	0x40021000
 800378c:	0800752c 	.word	0x0800752c

08003790 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003794:	f7ff ffda 	bl	800374c <HAL_RCC_GetHCLKFreq>
 8003798:	4602      	mov	r2, r0
 800379a:	4b06      	ldr	r3, [pc, #24]	; (80037b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800379c:	689b      	ldr	r3, [r3, #8]
 800379e:	0adb      	lsrs	r3, r3, #11
 80037a0:	f003 0307 	and.w	r3, r3, #7
 80037a4:	4904      	ldr	r1, [pc, #16]	; (80037b8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80037a6:	5ccb      	ldrb	r3, [r1, r3]
 80037a8:	f003 031f 	and.w	r3, r3, #31
 80037ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037b0:	4618      	mov	r0, r3
 80037b2:	bd80      	pop	{r7, pc}
 80037b4:	40021000 	.word	0x40021000
 80037b8:	0800752c 	.word	0x0800752c

080037bc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b086      	sub	sp, #24
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80037c4:	2300      	movs	r3, #0
 80037c6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80037c8:	4b27      	ldr	r3, [pc, #156]	; (8003868 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80037ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d003      	beq.n	80037dc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80037d4:	f7ff f908 	bl	80029e8 <HAL_PWREx_GetVoltageRange>
 80037d8:	6178      	str	r0, [r7, #20]
 80037da:	e014      	b.n	8003806 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80037dc:	4b22      	ldr	r3, [pc, #136]	; (8003868 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80037de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037e0:	4a21      	ldr	r2, [pc, #132]	; (8003868 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80037e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037e6:	6593      	str	r3, [r2, #88]	; 0x58
 80037e8:	4b1f      	ldr	r3, [pc, #124]	; (8003868 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80037ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037f0:	60fb      	str	r3, [r7, #12]
 80037f2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80037f4:	f7ff f8f8 	bl	80029e8 <HAL_PWREx_GetVoltageRange>
 80037f8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80037fa:	4b1b      	ldr	r3, [pc, #108]	; (8003868 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80037fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037fe:	4a1a      	ldr	r2, [pc, #104]	; (8003868 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003800:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003804:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800380c:	d10b      	bne.n	8003826 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2b80      	cmp	r3, #128	; 0x80
 8003812:	d913      	bls.n	800383c <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2ba0      	cmp	r3, #160	; 0xa0
 8003818:	d902      	bls.n	8003820 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800381a:	2302      	movs	r3, #2
 800381c:	613b      	str	r3, [r7, #16]
 800381e:	e00d      	b.n	800383c <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003820:	2301      	movs	r3, #1
 8003822:	613b      	str	r3, [r7, #16]
 8003824:	e00a      	b.n	800383c <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2b7f      	cmp	r3, #127	; 0x7f
 800382a:	d902      	bls.n	8003832 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 800382c:	2302      	movs	r3, #2
 800382e:	613b      	str	r3, [r7, #16]
 8003830:	e004      	b.n	800383c <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2b70      	cmp	r3, #112	; 0x70
 8003836:	d101      	bne.n	800383c <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003838:	2301      	movs	r3, #1
 800383a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800383c:	4b0b      	ldr	r3, [pc, #44]	; (800386c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f023 020f 	bic.w	r2, r3, #15
 8003844:	4909      	ldr	r1, [pc, #36]	; (800386c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	4313      	orrs	r3, r2
 800384a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800384c:	4b07      	ldr	r3, [pc, #28]	; (800386c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f003 030f 	and.w	r3, r3, #15
 8003854:	693a      	ldr	r2, [r7, #16]
 8003856:	429a      	cmp	r2, r3
 8003858:	d001      	beq.n	800385e <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 800385a:	2301      	movs	r3, #1
 800385c:	e000      	b.n	8003860 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 800385e:	2300      	movs	r3, #0
}
 8003860:	4618      	mov	r0, r3
 8003862:	3718      	adds	r7, #24
 8003864:	46bd      	mov	sp, r7
 8003866:	bd80      	pop	{r7, pc}
 8003868:	40021000 	.word	0x40021000
 800386c:	40022000 	.word	0x40022000

08003870 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003870:	b480      	push	{r7}
 8003872:	b087      	sub	sp, #28
 8003874:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003876:	4b2d      	ldr	r3, [pc, #180]	; (800392c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003878:	68db      	ldr	r3, [r3, #12]
 800387a:	f003 0303 	and.w	r3, r3, #3
 800387e:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	2b03      	cmp	r3, #3
 8003884:	d00b      	beq.n	800389e <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	2b03      	cmp	r3, #3
 800388a:	d825      	bhi.n	80038d8 <RCC_GetSysClockFreqFromPLLSource+0x68>
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	2b01      	cmp	r3, #1
 8003890:	d008      	beq.n	80038a4 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	2b02      	cmp	r3, #2
 8003896:	d11f      	bne.n	80038d8 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8003898:	4b25      	ldr	r3, [pc, #148]	; (8003930 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800389a:	613b      	str	r3, [r7, #16]
    break;
 800389c:	e01f      	b.n	80038de <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 800389e:	4b24      	ldr	r3, [pc, #144]	; (8003930 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80038a0:	613b      	str	r3, [r7, #16]
    break;
 80038a2:	e01c      	b.n	80038de <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80038a4:	4b21      	ldr	r3, [pc, #132]	; (800392c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f003 0308 	and.w	r3, r3, #8
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d107      	bne.n	80038c0 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80038b0:	4b1e      	ldr	r3, [pc, #120]	; (800392c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80038b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038b6:	0a1b      	lsrs	r3, r3, #8
 80038b8:	f003 030f 	and.w	r3, r3, #15
 80038bc:	617b      	str	r3, [r7, #20]
 80038be:	e005      	b.n	80038cc <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80038c0:	4b1a      	ldr	r3, [pc, #104]	; (800392c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	091b      	lsrs	r3, r3, #4
 80038c6:	f003 030f 	and.w	r3, r3, #15
 80038ca:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 80038cc:	4a19      	ldr	r2, [pc, #100]	; (8003934 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 80038ce:	697b      	ldr	r3, [r7, #20]
 80038d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038d4:	613b      	str	r3, [r7, #16]
    break;
 80038d6:	e002      	b.n	80038de <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 80038d8:	2300      	movs	r3, #0
 80038da:	613b      	str	r3, [r7, #16]
    break;
 80038dc:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80038de:	4b13      	ldr	r3, [pc, #76]	; (800392c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80038e0:	68db      	ldr	r3, [r3, #12]
 80038e2:	091b      	lsrs	r3, r3, #4
 80038e4:	f003 030f 	and.w	r3, r3, #15
 80038e8:	3301      	adds	r3, #1
 80038ea:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80038ec:	4b0f      	ldr	r3, [pc, #60]	; (800392c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80038ee:	68db      	ldr	r3, [r3, #12]
 80038f0:	0a1b      	lsrs	r3, r3, #8
 80038f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80038f6:	693a      	ldr	r2, [r7, #16]
 80038f8:	fb03 f202 	mul.w	r2, r3, r2
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003902:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003904:	4b09      	ldr	r3, [pc, #36]	; (800392c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003906:	68db      	ldr	r3, [r3, #12]
 8003908:	0e5b      	lsrs	r3, r3, #25
 800390a:	f003 0303 	and.w	r3, r3, #3
 800390e:	3301      	adds	r3, #1
 8003910:	005b      	lsls	r3, r3, #1
 8003912:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8003914:	693a      	ldr	r2, [r7, #16]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	fbb2 f3f3 	udiv	r3, r2, r3
 800391c:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800391e:	683b      	ldr	r3, [r7, #0]
}
 8003920:	4618      	mov	r0, r3
 8003922:	371c      	adds	r7, #28
 8003924:	46bd      	mov	sp, r7
 8003926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392a:	4770      	bx	lr
 800392c:	40021000 	.word	0x40021000
 8003930:	00f42400 	.word	0x00f42400
 8003934:	08007534 	.word	0x08007534

08003938 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b086      	sub	sp, #24
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003940:	2300      	movs	r3, #0
 8003942:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003944:	2300      	movs	r3, #0
 8003946:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003950:	2b00      	cmp	r3, #0
 8003952:	d040      	beq.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003958:	2b80      	cmp	r3, #128	; 0x80
 800395a:	d02a      	beq.n	80039b2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800395c:	2b80      	cmp	r3, #128	; 0x80
 800395e:	d825      	bhi.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003960:	2b60      	cmp	r3, #96	; 0x60
 8003962:	d026      	beq.n	80039b2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003964:	2b60      	cmp	r3, #96	; 0x60
 8003966:	d821      	bhi.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003968:	2b40      	cmp	r3, #64	; 0x40
 800396a:	d006      	beq.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x42>
 800396c:	2b40      	cmp	r3, #64	; 0x40
 800396e:	d81d      	bhi.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003970:	2b00      	cmp	r3, #0
 8003972:	d009      	beq.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8003974:	2b20      	cmp	r3, #32
 8003976:	d010      	beq.n	800399a <HAL_RCCEx_PeriphCLKConfig+0x62>
 8003978:	e018      	b.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800397a:	4b89      	ldr	r3, [pc, #548]	; (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800397c:	68db      	ldr	r3, [r3, #12]
 800397e:	4a88      	ldr	r2, [pc, #544]	; (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003980:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003984:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003986:	e015      	b.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	3304      	adds	r3, #4
 800398c:	2100      	movs	r1, #0
 800398e:	4618      	mov	r0, r3
 8003990:	f001 fa82 	bl	8004e98 <RCCEx_PLLSAI1_Config>
 8003994:	4603      	mov	r3, r0
 8003996:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003998:	e00c      	b.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	3320      	adds	r3, #32
 800399e:	2100      	movs	r1, #0
 80039a0:	4618      	mov	r0, r3
 80039a2:	f001 fb6d 	bl	8005080 <RCCEx_PLLSAI2_Config>
 80039a6:	4603      	mov	r3, r0
 80039a8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80039aa:	e003      	b.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80039ac:	2301      	movs	r3, #1
 80039ae:	74fb      	strb	r3, [r7, #19]
      break;
 80039b0:	e000      	b.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 80039b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80039b4:	7cfb      	ldrb	r3, [r7, #19]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d10b      	bne.n	80039d2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80039ba:	4b79      	ldr	r3, [pc, #484]	; (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80039bc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80039c0:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80039c8:	4975      	ldr	r1, [pc, #468]	; (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80039ca:	4313      	orrs	r3, r2
 80039cc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80039d0:	e001      	b.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039d2:	7cfb      	ldrb	r3, [r7, #19]
 80039d4:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d047      	beq.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039ea:	d030      	beq.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x116>
 80039ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039f0:	d82a      	bhi.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80039f2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80039f6:	d02a      	beq.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x116>
 80039f8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80039fc:	d824      	bhi.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80039fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a02:	d008      	beq.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8003a04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a08:	d81e      	bhi.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d00a      	beq.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8003a0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a12:	d010      	beq.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003a14:	e018      	b.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003a16:	4b62      	ldr	r3, [pc, #392]	; (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003a18:	68db      	ldr	r3, [r3, #12]
 8003a1a:	4a61      	ldr	r2, [pc, #388]	; (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003a1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a20:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003a22:	e015      	b.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	3304      	adds	r3, #4
 8003a28:	2100      	movs	r1, #0
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f001 fa34 	bl	8004e98 <RCCEx_PLLSAI1_Config>
 8003a30:	4603      	mov	r3, r0
 8003a32:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003a34:	e00c      	b.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	3320      	adds	r3, #32
 8003a3a:	2100      	movs	r1, #0
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	f001 fb1f 	bl	8005080 <RCCEx_PLLSAI2_Config>
 8003a42:	4603      	mov	r3, r0
 8003a44:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003a46:	e003      	b.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a48:	2301      	movs	r3, #1
 8003a4a:	74fb      	strb	r3, [r7, #19]
      break;
 8003a4c:	e000      	b.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8003a4e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a50:	7cfb      	ldrb	r3, [r7, #19]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d10b      	bne.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003a56:	4b52      	ldr	r3, [pc, #328]	; (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003a58:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003a5c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a64:	494e      	ldr	r1, [pc, #312]	; (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003a66:	4313      	orrs	r3, r2
 8003a68:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003a6c:	e001      	b.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a6e:	7cfb      	ldrb	r3, [r7, #19]
 8003a70:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	f000 809f 	beq.w	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a80:	2300      	movs	r3, #0
 8003a82:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003a84:	4b46      	ldr	r3, [pc, #280]	; (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003a86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d101      	bne.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8003a90:	2301      	movs	r3, #1
 8003a92:	e000      	b.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003a94:	2300      	movs	r3, #0
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d00d      	beq.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a9a:	4b41      	ldr	r3, [pc, #260]	; (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003a9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a9e:	4a40      	ldr	r2, [pc, #256]	; (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003aa0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003aa4:	6593      	str	r3, [r2, #88]	; 0x58
 8003aa6:	4b3e      	ldr	r3, [pc, #248]	; (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003aa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003aaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003aae:	60bb      	str	r3, [r7, #8]
 8003ab0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ab6:	4b3b      	ldr	r3, [pc, #236]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4a3a      	ldr	r2, [pc, #232]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003abc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ac0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003ac2:	f7fd fbc7 	bl	8001254 <HAL_GetTick>
 8003ac6:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003ac8:	e009      	b.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003aca:	f7fd fbc3 	bl	8001254 <HAL_GetTick>
 8003ace:	4602      	mov	r2, r0
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	1ad3      	subs	r3, r2, r3
 8003ad4:	2b02      	cmp	r3, #2
 8003ad6:	d902      	bls.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8003ad8:	2303      	movs	r3, #3
 8003ada:	74fb      	strb	r3, [r7, #19]
        break;
 8003adc:	e005      	b.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003ade:	4b31      	ldr	r3, [pc, #196]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d0ef      	beq.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8003aea:	7cfb      	ldrb	r3, [r7, #19]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d15b      	bne.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003af0:	4b2b      	ldr	r3, [pc, #172]	; (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003af2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003af6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003afa:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003afc:	697b      	ldr	r3, [r7, #20]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d01f      	beq.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b08:	697a      	ldr	r2, [r7, #20]
 8003b0a:	429a      	cmp	r2, r3
 8003b0c:	d019      	beq.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003b0e:	4b24      	ldr	r3, [pc, #144]	; (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003b10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b18:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003b1a:	4b21      	ldr	r3, [pc, #132]	; (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003b1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b20:	4a1f      	ldr	r2, [pc, #124]	; (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003b22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b26:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003b2a:	4b1d      	ldr	r3, [pc, #116]	; (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003b2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b30:	4a1b      	ldr	r2, [pc, #108]	; (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003b32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b36:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003b3a:	4a19      	ldr	r2, [pc, #100]	; (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003b42:	697b      	ldr	r3, [r7, #20]
 8003b44:	f003 0301 	and.w	r3, r3, #1
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d016      	beq.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b4c:	f7fd fb82 	bl	8001254 <HAL_GetTick>
 8003b50:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b52:	e00b      	b.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b54:	f7fd fb7e 	bl	8001254 <HAL_GetTick>
 8003b58:	4602      	mov	r2, r0
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	1ad3      	subs	r3, r2, r3
 8003b5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d902      	bls.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8003b66:	2303      	movs	r3, #3
 8003b68:	74fb      	strb	r3, [r7, #19]
            break;
 8003b6a:	e006      	b.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b6c:	4b0c      	ldr	r3, [pc, #48]	; (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003b6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b72:	f003 0302 	and.w	r3, r3, #2
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d0ec      	beq.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8003b7a:	7cfb      	ldrb	r3, [r7, #19]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d10c      	bne.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003b80:	4b07      	ldr	r3, [pc, #28]	; (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003b82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b86:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b90:	4903      	ldr	r1, [pc, #12]	; (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003b92:	4313      	orrs	r3, r2
 8003b94:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003b98:	e008      	b.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003b9a:	7cfb      	ldrb	r3, [r7, #19]
 8003b9c:	74bb      	strb	r3, [r7, #18]
 8003b9e:	e005      	b.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x274>
 8003ba0:	40021000 	.word	0x40021000
 8003ba4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ba8:	7cfb      	ldrb	r3, [r7, #19]
 8003baa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003bac:	7c7b      	ldrb	r3, [r7, #17]
 8003bae:	2b01      	cmp	r3, #1
 8003bb0:	d105      	bne.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bb2:	4ba0      	ldr	r3, [pc, #640]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003bb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bb6:	4a9f      	ldr	r2, [pc, #636]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003bb8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bbc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f003 0301 	and.w	r3, r3, #1
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d00a      	beq.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003bca:	4b9a      	ldr	r3, [pc, #616]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003bcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bd0:	f023 0203 	bic.w	r2, r3, #3
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bd8:	4996      	ldr	r1, [pc, #600]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f003 0302 	and.w	r3, r3, #2
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d00a      	beq.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003bec:	4b91      	ldr	r3, [pc, #580]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003bee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bf2:	f023 020c 	bic.w	r2, r3, #12
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bfa:	498e      	ldr	r1, [pc, #568]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f003 0304 	and.w	r3, r3, #4
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d00a      	beq.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003c0e:	4b89      	ldr	r3, [pc, #548]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003c10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c14:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c1c:	4985      	ldr	r1, [pc, #532]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f003 0308 	and.w	r3, r3, #8
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d00a      	beq.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003c30:	4b80      	ldr	r3, [pc, #512]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003c32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c36:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c3e:	497d      	ldr	r1, [pc, #500]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003c40:	4313      	orrs	r3, r2
 8003c42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f003 0310 	and.w	r3, r3, #16
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d00a      	beq.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003c52:	4b78      	ldr	r3, [pc, #480]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003c54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c58:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c60:	4974      	ldr	r1, [pc, #464]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003c62:	4313      	orrs	r3, r2
 8003c64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f003 0320 	and.w	r3, r3, #32
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d00a      	beq.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003c74:	4b6f      	ldr	r3, [pc, #444]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003c76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c7a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c82:	496c      	ldr	r1, [pc, #432]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003c84:	4313      	orrs	r3, r2
 8003c86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d00a      	beq.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003c96:	4b67      	ldr	r3, [pc, #412]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003c98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c9c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ca4:	4963      	ldr	r1, [pc, #396]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d00a      	beq.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003cb8:	4b5e      	ldr	r3, [pc, #376]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003cba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cbe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003cc6:	495b      	ldr	r1, [pc, #364]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d00a      	beq.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003cda:	4b56      	ldr	r3, [pc, #344]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003cdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ce0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ce8:	4952      	ldr	r1, [pc, #328]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003cea:	4313      	orrs	r3, r2
 8003cec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d00a      	beq.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003cfc:	4b4d      	ldr	r3, [pc, #308]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003cfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d02:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d0a:	494a      	ldr	r1, [pc, #296]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d00a      	beq.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003d1e:	4b45      	ldr	r3, [pc, #276]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003d20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d24:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d2c:	4941      	ldr	r1, [pc, #260]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d00a      	beq.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003d40:	4b3c      	ldr	r3, [pc, #240]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003d42:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003d46:	f023 0203 	bic.w	r2, r3, #3
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d4e:	4939      	ldr	r1, [pc, #228]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003d50:	4313      	orrs	r3, r2
 8003d52:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d028      	beq.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003d62:	4b34      	ldr	r3, [pc, #208]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003d64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d68:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d70:	4930      	ldr	r1, [pc, #192]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003d72:	4313      	orrs	r3, r2
 8003d74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d7c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003d80:	d106      	bne.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d82:	4b2c      	ldr	r3, [pc, #176]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003d84:	68db      	ldr	r3, [r3, #12]
 8003d86:	4a2b      	ldr	r2, [pc, #172]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003d88:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003d8c:	60d3      	str	r3, [r2, #12]
 8003d8e:	e011      	b.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d94:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003d98:	d10c      	bne.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	3304      	adds	r3, #4
 8003d9e:	2101      	movs	r1, #1
 8003da0:	4618      	mov	r0, r3
 8003da2:	f001 f879 	bl	8004e98 <RCCEx_PLLSAI1_Config>
 8003da6:	4603      	mov	r3, r0
 8003da8:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003daa:	7cfb      	ldrb	r3, [r7, #19]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d001      	beq.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8003db0:	7cfb      	ldrb	r3, [r7, #19]
 8003db2:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d04d      	beq.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003dc4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003dc8:	d108      	bne.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8003dca:	4b1a      	ldr	r3, [pc, #104]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003dcc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003dd0:	4a18      	ldr	r2, [pc, #96]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003dd2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003dd6:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8003dda:	e012      	b.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8003ddc:	4b15      	ldr	r3, [pc, #84]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003dde:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003de2:	4a14      	ldr	r2, [pc, #80]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003de4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003de8:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8003dec:	4b11      	ldr	r3, [pc, #68]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003dee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003df2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003dfa:	490e      	ldr	r1, [pc, #56]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e06:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e0a:	d106      	bne.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e0c:	4b09      	ldr	r3, [pc, #36]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e0e:	68db      	ldr	r3, [r3, #12]
 8003e10:	4a08      	ldr	r2, [pc, #32]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e12:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e16:	60d3      	str	r3, [r2, #12]
 8003e18:	e020      	b.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e1e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e22:	d109      	bne.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003e24:	4b03      	ldr	r3, [pc, #12]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e26:	68db      	ldr	r3, [r3, #12]
 8003e28:	4a02      	ldr	r2, [pc, #8]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e2e:	60d3      	str	r3, [r2, #12]
 8003e30:	e014      	b.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x524>
 8003e32:	bf00      	nop
 8003e34:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e3c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003e40:	d10c      	bne.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	3304      	adds	r3, #4
 8003e46:	2101      	movs	r1, #1
 8003e48:	4618      	mov	r0, r3
 8003e4a:	f001 f825 	bl	8004e98 <RCCEx_PLLSAI1_Config>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003e52:	7cfb      	ldrb	r3, [r7, #19]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d001      	beq.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8003e58:	7cfb      	ldrb	r3, [r7, #19]
 8003e5a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d028      	beq.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003e68:	4b7a      	ldr	r3, [pc, #488]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003e6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e6e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e76:	4977      	ldr	r1, [pc, #476]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e82:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e86:	d106      	bne.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e88:	4b72      	ldr	r3, [pc, #456]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003e8a:	68db      	ldr	r3, [r3, #12]
 8003e8c:	4a71      	ldr	r2, [pc, #452]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003e8e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e92:	60d3      	str	r3, [r2, #12]
 8003e94:	e011      	b.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e9a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003e9e:	d10c      	bne.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	3304      	adds	r3, #4
 8003ea4:	2101      	movs	r1, #1
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	f000 fff6 	bl	8004e98 <RCCEx_PLLSAI1_Config>
 8003eac:	4603      	mov	r3, r0
 8003eae:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003eb0:	7cfb      	ldrb	r3, [r7, #19]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d001      	beq.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8003eb6:	7cfb      	ldrb	r3, [r7, #19]
 8003eb8:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d01e      	beq.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003ec6:	4b63      	ldr	r3, [pc, #396]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003ec8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ecc:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ed6:	495f      	ldr	r1, [pc, #380]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ee4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003ee8:	d10c      	bne.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	3304      	adds	r3, #4
 8003eee:	2102      	movs	r1, #2
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	f000 ffd1 	bl	8004e98 <RCCEx_PLLSAI1_Config>
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003efa:	7cfb      	ldrb	r3, [r7, #19]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d001      	beq.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8003f00:	7cfb      	ldrb	r3, [r7, #19]
 8003f02:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d00b      	beq.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003f10:	4b50      	ldr	r3, [pc, #320]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003f12:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003f16:	f023 0204 	bic.w	r2, r3, #4
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f20:	494c      	ldr	r1, [pc, #304]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003f22:	4313      	orrs	r3, r2
 8003f24:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d00b      	beq.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003f34:	4b47      	ldr	r3, [pc, #284]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003f36:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003f3a:	f023 0218 	bic.w	r2, r3, #24
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f44:	4943      	ldr	r1, [pc, #268]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003f46:	4313      	orrs	r3, r2
 8003f48:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DFSDM1_Filter0 */

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d035      	beq.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x68c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003f58:	4b3e      	ldr	r3, [pc, #248]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4a3d      	ldr	r2, [pc, #244]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003f5e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f62:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f64:	f7fd f976 	bl	8001254 <HAL_GetTick>
 8003f68:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003f6a:	e009      	b.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003f6c:	f7fd f972 	bl	8001254 <HAL_GetTick>
 8003f70:	4602      	mov	r2, r0
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	1ad3      	subs	r3, r2, r3
 8003f76:	2b02      	cmp	r3, #2
 8003f78:	d902      	bls.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        ret = HAL_TIMEOUT;
 8003f7a:	2303      	movs	r3, #3
 8003f7c:	74fb      	strb	r3, [r7, #19]
        break;
 8003f7e:	e005      	b.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x654>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003f80:	4b34      	ldr	r3, [pc, #208]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d1ef      	bne.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0x634>
      }
    }

    if(ret == HAL_OK)
 8003f8c:	7cfb      	ldrb	r3, [r7, #19]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d113      	bne.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0x682>
    {
      /* Configure the LTDC clock source */
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 8003f92:	4b30      	ldr	r3, [pc, #192]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003f94:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003f98:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003fa2:	492c      	ldr	r1, [pc, #176]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	3320      	adds	r3, #32
 8003fae:	2102      	movs	r1, #2
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	f001 f865 	bl	8005080 <RCCEx_PLLSAI2_Config>
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	74fb      	strb	r3, [r7, #19]
    }

    if(ret != HAL_OK)
 8003fba:	7cfb      	ldrb	r3, [r7, #19]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d001      	beq.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* set overall return value */
      status = ret;
 8003fc0:	7cfb      	ldrb	r3, [r7, #19]
 8003fc2:	74bb      	strb	r3, [r7, #18]
#endif /* LTDC */

#if defined(DSI)

  /*-------------------------- DSI clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d01e      	beq.n	800400e <HAL_RCCEx_PeriphCLKConfig+0x6d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DSICLKSOURCE(PeriphClkInit->DsiClockSelection));

    /* Configure the DSI clock source */
    __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8003fd0:	4b20      	ldr	r3, [pc, #128]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003fd2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003fd6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fe0:	491c      	ldr	r1, [pc, #112]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLLSAI2)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ff2:	d10c      	bne.n	800400e <HAL_RCCEx_PeriphCLKConfig+0x6d6>
    {
      /* PLLSAI2 input clock, parameters M, N & Q configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_Q_UPDATE);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	3320      	adds	r3, #32
 8003ff8:	2101      	movs	r1, #1
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	f001 f840 	bl	8005080 <RCCEx_PLLSAI2_Config>
 8004000:	4603      	mov	r3, r0
 8004002:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004004:	7cfb      	ldrb	r3, [r7, #19]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d001      	beq.n	800400e <HAL_RCCEx_PeriphCLKConfig+0x6d6>
      {
        /* set overall return value */
        status = ret;
 800400a:	7cfb      	ldrb	r3, [r7, #19]
 800400c:	74bb      	strb	r3, [r7, #18]
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004016:	2b00      	cmp	r3, #0
 8004018:	d017      	beq.n	800404a <HAL_RCCEx_PeriphCLKConfig+0x712>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800401a:	4b0e      	ldr	r3, [pc, #56]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800401c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004020:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800402a:	490a      	ldr	r1, [pc, #40]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800402c:	4313      	orrs	r3, r2
 800402e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004038:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800403c:	d105      	bne.n	800404a <HAL_RCCEx_PeriphCLKConfig+0x712>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800403e:	4b05      	ldr	r3, [pc, #20]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004040:	68db      	ldr	r3, [r3, #12]
 8004042:	4a04      	ldr	r2, [pc, #16]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004044:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004048:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800404a:	7cbb      	ldrb	r3, [r7, #18]
}
 800404c:	4618      	mov	r0, r3
 800404e:	3718      	adds	r7, #24
 8004050:	46bd      	mov	sp, r7
 8004052:	bd80      	pop	{r7, pc}
 8004054:	40021000 	.word	0x40021000

08004058 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b088      	sub	sp, #32
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8004060:	2300      	movs	r3, #0
 8004062:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800406a:	d13e      	bne.n	80040ea <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800406c:	4bb6      	ldr	r3, [pc, #728]	; (8004348 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800406e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004072:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004076:	60fb      	str	r3, [r7, #12]

    switch(srcclk)
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800407e:	d028      	beq.n	80040d2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004086:	f200 86f2 	bhi.w	8004e6e <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004090:	d005      	beq.n	800409e <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004098:	d00e      	beq.n	80040b8 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 800409a:	f000 bee8 	b.w	8004e6e <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800409e:	4baa      	ldr	r3, [pc, #680]	; (8004348 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80040a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040a4:	f003 0302 	and.w	r3, r3, #2
 80040a8:	2b02      	cmp	r3, #2
 80040aa:	f040 86e2 	bne.w	8004e72 <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
        frequency = LSE_VALUE;
 80040ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80040b2:	61fb      	str	r3, [r7, #28]
      break;
 80040b4:	f000 bedd 	b.w	8004e72 <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80040b8:	4ba3      	ldr	r3, [pc, #652]	; (8004348 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80040ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040be:	f003 0302 	and.w	r3, r3, #2
 80040c2:	2b02      	cmp	r3, #2
 80040c4:	f040 86d7 	bne.w	8004e76 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
          frequency = LSI_VALUE;
 80040c8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80040cc:	61fb      	str	r3, [r7, #28]
      break;
 80040ce:	f000 bed2 	b.w	8004e76 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80040d2:	4b9d      	ldr	r3, [pc, #628]	; (8004348 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040da:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80040de:	f040 86cc 	bne.w	8004e7a <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
        frequency = HSE_VALUE / 32U;
 80040e2:	4b9a      	ldr	r3, [pc, #616]	; (800434c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80040e4:	61fb      	str	r3, [r7, #28]
      break;
 80040e6:	f000 bec8 	b.w	8004e7a <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80040ea:	4b97      	ldr	r3, [pc, #604]	; (8004348 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80040ec:	68db      	ldr	r3, [r3, #12]
 80040ee:	f003 0303 	and.w	r3, r3, #3
 80040f2:	613b      	str	r3, [r7, #16]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 80040f4:	693b      	ldr	r3, [r7, #16]
 80040f6:	2b03      	cmp	r3, #3
 80040f8:	d036      	beq.n	8004168 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	2b03      	cmp	r3, #3
 80040fe:	d840      	bhi.n	8004182 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 8004100:	693b      	ldr	r3, [r7, #16]
 8004102:	2b01      	cmp	r3, #1
 8004104:	d003      	beq.n	800410e <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 8004106:	693b      	ldr	r3, [r7, #16]
 8004108:	2b02      	cmp	r3, #2
 800410a:	d020      	beq.n	800414e <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 800410c:	e039      	b.n	8004182 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800410e:	4b8e      	ldr	r3, [pc, #568]	; (8004348 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f003 0302 	and.w	r3, r3, #2
 8004116:	2b02      	cmp	r3, #2
 8004118:	d116      	bne.n	8004148 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800411a:	4b8b      	ldr	r3, [pc, #556]	; (8004348 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f003 0308 	and.w	r3, r3, #8
 8004122:	2b00      	cmp	r3, #0
 8004124:	d005      	beq.n	8004132 <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 8004126:	4b88      	ldr	r3, [pc, #544]	; (8004348 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	091b      	lsrs	r3, r3, #4
 800412c:	f003 030f 	and.w	r3, r3, #15
 8004130:	e005      	b.n	800413e <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 8004132:	4b85      	ldr	r3, [pc, #532]	; (8004348 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004134:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004138:	0a1b      	lsrs	r3, r3, #8
 800413a:	f003 030f 	and.w	r3, r3, #15
 800413e:	4a84      	ldr	r2, [pc, #528]	; (8004350 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8004140:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004144:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8004146:	e01f      	b.n	8004188 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8004148:	2300      	movs	r3, #0
 800414a:	61bb      	str	r3, [r7, #24]
      break;
 800414c:	e01c      	b.n	8004188 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800414e:	4b7e      	ldr	r3, [pc, #504]	; (8004348 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004156:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800415a:	d102      	bne.n	8004162 <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 800415c:	4b7d      	ldr	r3, [pc, #500]	; (8004354 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 800415e:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8004160:	e012      	b.n	8004188 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8004162:	2300      	movs	r3, #0
 8004164:	61bb      	str	r3, [r7, #24]
      break;
 8004166:	e00f      	b.n	8004188 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004168:	4b77      	ldr	r3, [pc, #476]	; (8004348 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004170:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004174:	d102      	bne.n	800417c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 8004176:	4b77      	ldr	r3, [pc, #476]	; (8004354 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8004178:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 800417a:	e005      	b.n	8004188 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 800417c:	2300      	movs	r3, #0
 800417e:	61bb      	str	r3, [r7, #24]
      break;
 8004180:	e002      	b.n	8004188 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 8004182:	2300      	movs	r3, #0
 8004184:	61bb      	str	r3, [r7, #24]
      break;
 8004186:	bf00      	nop
    }

    switch(PeriphClk)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800418e:	f000 8604 	beq.w	8004d9a <HAL_RCCEx_GetPeriphCLKFreq+0xd42>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004198:	f200 8671 	bhi.w	8004e7e <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80041a2:	f000 8467 	beq.w	8004a74 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80041ac:	f200 8667 	bhi.w	8004e7e <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80041b6:	f000 852f 	beq.w	8004c18 <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80041c0:	f200 865d 	bhi.w	8004e7e <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80041ca:	f000 8185 	beq.w	80044d8 <HAL_RCCEx_GetPeriphCLKFreq+0x480>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80041d4:	f200 8653 	bhi.w	8004e7e <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80041de:	f000 80cb 	beq.w	8004378 <HAL_RCCEx_GetPeriphCLKFreq+0x320>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80041e8:	f200 8649 	bhi.w	8004e7e <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041f2:	f000 842e 	beq.w	8004a52 <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041fc:	f200 863f 	bhi.w	8004e7e <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004206:	f000 83e2 	beq.w	80049ce <HAL_RCCEx_GetPeriphCLKFreq+0x976>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004210:	f200 8635 	bhi.w	8004e7e <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800421a:	f000 80ad 	beq.w	8004378 <HAL_RCCEx_GetPeriphCLKFreq+0x320>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004224:	f200 862b 	bhi.w	8004e7e <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800422e:	f000 809b 	beq.w	8004368 <HAL_RCCEx_GetPeriphCLKFreq+0x310>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004238:	f200 8621 	bhi.w	8004e7e <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004242:	f000 8089 	beq.w	8004358 <HAL_RCCEx_GetPeriphCLKFreq+0x300>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800424c:	f200 8617 	bhi.w	8004e7e <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004256:	f000 8552 	beq.w	8004cfe <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004260:	f200 860d 	bhi.w	8004e7e <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800426a:	f000 84fe 	beq.w	8004c6a <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004274:	f200 8603 	bhi.w	8004e7e <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800427e:	f000 849f 	beq.w	8004bc0 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004288:	f200 85f9 	bhi.w	8004e7e <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2b80      	cmp	r3, #128	; 0x80
 8004290:	f000 846a 	beq.w	8004b68 <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2b80      	cmp	r3, #128	; 0x80
 8004298:	f200 85f1 	bhi.w	8004e7e <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2b20      	cmp	r3, #32
 80042a0:	d84c      	bhi.n	800433c <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	f000 85ea 	beq.w	8004e7e <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	3b01      	subs	r3, #1
 80042ae:	2b1f      	cmp	r3, #31
 80042b0:	f200 85e5 	bhi.w	8004e7e <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 80042b4:	a201      	add	r2, pc, #4	; (adr r2, 80042bc <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 80042b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042ba:	bf00      	nop
 80042bc:	080046cd 	.word	0x080046cd
 80042c0:	0800473b 	.word	0x0800473b
 80042c4:	08004e7f 	.word	0x08004e7f
 80042c8:	080047cf 	.word	0x080047cf
 80042cc:	08004e7f 	.word	0x08004e7f
 80042d0:	08004e7f 	.word	0x08004e7f
 80042d4:	08004e7f 	.word	0x08004e7f
 80042d8:	08004847 	.word	0x08004847
 80042dc:	08004e7f 	.word	0x08004e7f
 80042e0:	08004e7f 	.word	0x08004e7f
 80042e4:	08004e7f 	.word	0x08004e7f
 80042e8:	08004e7f 	.word	0x08004e7f
 80042ec:	08004e7f 	.word	0x08004e7f
 80042f0:	08004e7f 	.word	0x08004e7f
 80042f4:	08004e7f 	.word	0x08004e7f
 80042f8:	080048cb 	.word	0x080048cb
 80042fc:	08004e7f 	.word	0x08004e7f
 8004300:	08004e7f 	.word	0x08004e7f
 8004304:	08004e7f 	.word	0x08004e7f
 8004308:	08004e7f 	.word	0x08004e7f
 800430c:	08004e7f 	.word	0x08004e7f
 8004310:	08004e7f 	.word	0x08004e7f
 8004314:	08004e7f 	.word	0x08004e7f
 8004318:	08004e7f 	.word	0x08004e7f
 800431c:	08004e7f 	.word	0x08004e7f
 8004320:	08004e7f 	.word	0x08004e7f
 8004324:	08004e7f 	.word	0x08004e7f
 8004328:	08004e7f 	.word	0x08004e7f
 800432c:	08004e7f 	.word	0x08004e7f
 8004330:	08004e7f 	.word	0x08004e7f
 8004334:	08004e7f 	.word	0x08004e7f
 8004338:	0800494d 	.word	0x0800494d
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2b40      	cmp	r3, #64	; 0x40
 8004340:	f000 83e6 	beq.w	8004b10 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 8004344:	f000 bd9b 	b.w	8004e7e <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8004348:	40021000 	.word	0x40021000
 800434c:	0007a120 	.word	0x0007a120
 8004350:	08007534 	.word	0x08007534
 8004354:	00f42400 	.word	0x00f42400
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8004358:	69b9      	ldr	r1, [r7, #24]
 800435a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800435e:	f000 ff83 	bl	8005268 <RCCEx_GetSAIxPeriphCLKFreq>
 8004362:	61f8      	str	r0, [r7, #28]
      break;
 8004364:	f000 bd8e 	b.w	8004e84 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 8004368:	69b9      	ldr	r1, [r7, #24]
 800436a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800436e:	f000 ff7b 	bl	8005268 <RCCEx_GetSAIxPeriphCLKFreq>
 8004372:	61f8      	str	r0, [r7, #28]
      break;
 8004374:	f000 bd86 	b.w	8004e84 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8004378:	4b9a      	ldr	r3, [pc, #616]	; (80045e4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800437a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800437e:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8004382:	60fb      	str	r3, [r7, #12]
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800438a:	d015      	beq.n	80043b8 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004392:	f200 8092 	bhi.w	80044ba <HAL_RCCEx_GetPeriphCLKFreq+0x462>
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800439c:	d029      	beq.n	80043f2 <HAL_RCCEx_GetPeriphCLKFreq+0x39a>
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80043a4:	f200 8089 	bhi.w	80044ba <HAL_RCCEx_GetPeriphCLKFreq+0x462>
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d07b      	beq.n	80044a6 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80043b4:	d04a      	beq.n	800444c <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
          break;
 80043b6:	e080      	b.n	80044ba <HAL_RCCEx_GetPeriphCLKFreq+0x462>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80043b8:	4b8a      	ldr	r3, [pc, #552]	; (80045e4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f003 0302 	and.w	r3, r3, #2
 80043c0:	2b02      	cmp	r3, #2
 80043c2:	d17d      	bne.n	80044c0 <HAL_RCCEx_GetPeriphCLKFreq+0x468>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80043c4:	4b87      	ldr	r3, [pc, #540]	; (80045e4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f003 0308 	and.w	r3, r3, #8
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d005      	beq.n	80043dc <HAL_RCCEx_GetPeriphCLKFreq+0x384>
 80043d0:	4b84      	ldr	r3, [pc, #528]	; (80045e4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	091b      	lsrs	r3, r3, #4
 80043d6:	f003 030f 	and.w	r3, r3, #15
 80043da:	e005      	b.n	80043e8 <HAL_RCCEx_GetPeriphCLKFreq+0x390>
 80043dc:	4b81      	ldr	r3, [pc, #516]	; (80045e4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80043de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043e2:	0a1b      	lsrs	r3, r3, #8
 80043e4:	f003 030f 	and.w	r3, r3, #15
 80043e8:	4a7f      	ldr	r2, [pc, #508]	; (80045e8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80043ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043ee:	61fb      	str	r3, [r7, #28]
          break;
 80043f0:	e066      	b.n	80044c0 <HAL_RCCEx_GetPeriphCLKFreq+0x468>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 80043f2:	4b7c      	ldr	r3, [pc, #496]	; (80045e4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043fa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80043fe:	d162      	bne.n	80044c6 <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8004400:	4b78      	ldr	r3, [pc, #480]	; (80045e4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004402:	68db      	ldr	r3, [r3, #12]
 8004404:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004408:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800440c:	d15b      	bne.n	80044c6 <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800440e:	4b75      	ldr	r3, [pc, #468]	; (80045e4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004410:	68db      	ldr	r3, [r3, #12]
 8004412:	0a1b      	lsrs	r3, r3, #8
 8004414:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004418:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800441a:	69bb      	ldr	r3, [r7, #24]
 800441c:	68ba      	ldr	r2, [r7, #8]
 800441e:	fb03 f202 	mul.w	r2, r3, r2
 8004422:	4b70      	ldr	r3, [pc, #448]	; (80045e4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004424:	68db      	ldr	r3, [r3, #12]
 8004426:	091b      	lsrs	r3, r3, #4
 8004428:	f003 030f 	and.w	r3, r3, #15
 800442c:	3301      	adds	r3, #1
 800442e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004432:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8004434:	4b6b      	ldr	r3, [pc, #428]	; (80045e4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004436:	68db      	ldr	r3, [r3, #12]
 8004438:	0d5b      	lsrs	r3, r3, #21
 800443a:	f003 0303 	and.w	r3, r3, #3
 800443e:	3301      	adds	r3, #1
 8004440:	005b      	lsls	r3, r3, #1
 8004442:	69ba      	ldr	r2, [r7, #24]
 8004444:	fbb2 f3f3 	udiv	r3, r2, r3
 8004448:	61fb      	str	r3, [r7, #28]
          break;
 800444a:	e03c      	b.n	80044c6 <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 800444c:	4b65      	ldr	r3, [pc, #404]	; (80045e4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004454:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004458:	d138      	bne.n	80044cc <HAL_RCCEx_GetPeriphCLKFreq+0x474>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 800445a:	4b62      	ldr	r3, [pc, #392]	; (80045e4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800445c:	691b      	ldr	r3, [r3, #16]
 800445e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004462:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004466:	d131      	bne.n	80044cc <HAL_RCCEx_GetPeriphCLKFreq+0x474>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8004468:	4b5e      	ldr	r3, [pc, #376]	; (80045e4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800446a:	691b      	ldr	r3, [r3, #16]
 800446c:	0a1b      	lsrs	r3, r3, #8
 800446e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004472:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8004474:	69bb      	ldr	r3, [r7, #24]
 8004476:	68ba      	ldr	r2, [r7, #8]
 8004478:	fb03 f202 	mul.w	r2, r3, r2
 800447c:	4b59      	ldr	r3, [pc, #356]	; (80045e4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800447e:	691b      	ldr	r3, [r3, #16]
 8004480:	091b      	lsrs	r3, r3, #4
 8004482:	f003 030f 	and.w	r3, r3, #15
 8004486:	3301      	adds	r3, #1
 8004488:	fbb2 f3f3 	udiv	r3, r2, r3
 800448c:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 800448e:	4b55      	ldr	r3, [pc, #340]	; (80045e4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004490:	691b      	ldr	r3, [r3, #16]
 8004492:	0d5b      	lsrs	r3, r3, #21
 8004494:	f003 0303 	and.w	r3, r3, #3
 8004498:	3301      	adds	r3, #1
 800449a:	005b      	lsls	r3, r3, #1
 800449c:	69ba      	ldr	r2, [r7, #24]
 800449e:	fbb2 f3f3 	udiv	r3, r2, r3
 80044a2:	61fb      	str	r3, [r7, #28]
          break;
 80044a4:	e012      	b.n	80044cc <HAL_RCCEx_GetPeriphCLKFreq+0x474>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 80044a6:	4b4f      	ldr	r3, [pc, #316]	; (80045e4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80044a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80044ac:	f003 0302 	and.w	r3, r3, #2
 80044b0:	2b02      	cmp	r3, #2
 80044b2:	d10e      	bne.n	80044d2 <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
            frequency = HSI48_VALUE;
 80044b4:	4b4d      	ldr	r3, [pc, #308]	; (80045ec <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80044b6:	61fb      	str	r3, [r7, #28]
          break;
 80044b8:	e00b      	b.n	80044d2 <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
          break;
 80044ba:	bf00      	nop
 80044bc:	f000 bce2 	b.w	8004e84 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80044c0:	bf00      	nop
 80044c2:	f000 bcdf 	b.w	8004e84 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80044c6:	bf00      	nop
 80044c8:	f000 bcdc 	b.w	8004e84 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80044cc:	bf00      	nop
 80044ce:	f000 bcd9 	b.w	8004e84 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80044d2:	bf00      	nop
        break;
 80044d4:	f000 bcd6 	b.w	8004e84 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      if(HAL_IS_BIT_SET(RCC->CCIPR2, RCC_CCIPR2_SDMMCSEL))  /* PLL "P" ? */
 80044d8:	4b42      	ldr	r3, [pc, #264]	; (80045e4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80044da:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80044de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80044e2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80044e6:	d13d      	bne.n	8004564 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 80044e8:	4b3e      	ldr	r3, [pc, #248]	; (80045e4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044f0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80044f4:	f040 84c5 	bne.w	8004e82 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLPEN))
 80044f8:	4b3a      	ldr	r3, [pc, #232]	; (80045e4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80044fa:	68db      	ldr	r3, [r3, #12]
 80044fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004500:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004504:	f040 84bd 	bne.w	8004e82 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8004508:	4b36      	ldr	r3, [pc, #216]	; (80045e4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800450a:	68db      	ldr	r3, [r3, #12]
 800450c:	0a1b      	lsrs	r3, r3, #8
 800450e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004512:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004514:	69bb      	ldr	r3, [r7, #24]
 8004516:	68ba      	ldr	r2, [r7, #8]
 8004518:	fb03 f202 	mul.w	r2, r3, r2
 800451c:	4b31      	ldr	r3, [pc, #196]	; (80045e4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800451e:	68db      	ldr	r3, [r3, #12]
 8004520:	091b      	lsrs	r3, r3, #4
 8004522:	f003 030f 	and.w	r3, r3, #15
 8004526:	3301      	adds	r3, #1
 8004528:	fbb2 f3f3 	udiv	r3, r2, r3
 800452c:	61bb      	str	r3, [r7, #24]
            pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 800452e:	4b2d      	ldr	r3, [pc, #180]	; (80045e4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004530:	68db      	ldr	r3, [r3, #12]
 8004532:	0edb      	lsrs	r3, r3, #27
 8004534:	f003 031f 	and.w	r3, r3, #31
 8004538:	617b      	str	r3, [r7, #20]
            if(pllp == 0U)
 800453a:	697b      	ldr	r3, [r7, #20]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d10a      	bne.n	8004556 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
              if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8004540:	4b28      	ldr	r3, [pc, #160]	; (80045e4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004542:	68db      	ldr	r3, [r3, #12]
 8004544:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004548:	2b00      	cmp	r3, #0
 800454a:	d002      	beq.n	8004552 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
                pllp = 17U;
 800454c:	2311      	movs	r3, #17
 800454e:	617b      	str	r3, [r7, #20]
 8004550:	e001      	b.n	8004556 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
                pllp = 7U;
 8004552:	2307      	movs	r3, #7
 8004554:	617b      	str	r3, [r7, #20]
            frequency = (pllvco / pllp);
 8004556:	69ba      	ldr	r2, [r7, #24]
 8004558:	697b      	ldr	r3, [r7, #20]
 800455a:	fbb2 f3f3 	udiv	r3, r2, r3
 800455e:	61fb      	str	r3, [r7, #28]
      break;
 8004560:	f000 bc8f 	b.w	8004e82 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8004564:	4b1f      	ldr	r3, [pc, #124]	; (80045e4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004566:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800456a:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800456e:	60fb      	str	r3, [r7, #12]
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004576:	d016      	beq.n	80045a6 <HAL_RCCEx_GetPeriphCLKFreq+0x54e>
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800457e:	f200 809b 	bhi.w	80046b8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004588:	d032      	beq.n	80045f0 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004590:	f200 8092 	bhi.w	80046b8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	2b00      	cmp	r3, #0
 8004598:	f000 8084 	beq.w	80046a4 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80045a2:	d052      	beq.n	800464a <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
          break;
 80045a4:	e088      	b.n	80046b8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80045a6:	4b0f      	ldr	r3, [pc, #60]	; (80045e4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f003 0302 	and.w	r3, r3, #2
 80045ae:	2b02      	cmp	r3, #2
 80045b0:	f040 8084 	bne.w	80046bc <HAL_RCCEx_GetPeriphCLKFreq+0x664>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80045b4:	4b0b      	ldr	r3, [pc, #44]	; (80045e4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f003 0308 	and.w	r3, r3, #8
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d005      	beq.n	80045cc <HAL_RCCEx_GetPeriphCLKFreq+0x574>
 80045c0:	4b08      	ldr	r3, [pc, #32]	; (80045e4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	091b      	lsrs	r3, r3, #4
 80045c6:	f003 030f 	and.w	r3, r3, #15
 80045ca:	e005      	b.n	80045d8 <HAL_RCCEx_GetPeriphCLKFreq+0x580>
 80045cc:	4b05      	ldr	r3, [pc, #20]	; (80045e4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80045ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80045d2:	0a1b      	lsrs	r3, r3, #8
 80045d4:	f003 030f 	and.w	r3, r3, #15
 80045d8:	4a03      	ldr	r2, [pc, #12]	; (80045e8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80045da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045de:	61fb      	str	r3, [r7, #28]
          break;
 80045e0:	e06c      	b.n	80046bc <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 80045e2:	bf00      	nop
 80045e4:	40021000 	.word	0x40021000
 80045e8:	08007534 	.word	0x08007534
 80045ec:	02dc6c00 	.word	0x02dc6c00
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 80045f0:	4ba5      	ldr	r3, [pc, #660]	; (8004888 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045f8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80045fc:	d160      	bne.n	80046c0 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 80045fe:	4ba2      	ldr	r3, [pc, #648]	; (8004888 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004600:	68db      	ldr	r3, [r3, #12]
 8004602:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004606:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800460a:	d159      	bne.n	80046c0 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800460c:	4b9e      	ldr	r3, [pc, #632]	; (8004888 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800460e:	68db      	ldr	r3, [r3, #12]
 8004610:	0a1b      	lsrs	r3, r3, #8
 8004612:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004616:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004618:	69bb      	ldr	r3, [r7, #24]
 800461a:	68ba      	ldr	r2, [r7, #8]
 800461c:	fb03 f202 	mul.w	r2, r3, r2
 8004620:	4b99      	ldr	r3, [pc, #612]	; (8004888 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004622:	68db      	ldr	r3, [r3, #12]
 8004624:	091b      	lsrs	r3, r3, #4
 8004626:	f003 030f 	and.w	r3, r3, #15
 800462a:	3301      	adds	r3, #1
 800462c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004630:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8004632:	4b95      	ldr	r3, [pc, #596]	; (8004888 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004634:	68db      	ldr	r3, [r3, #12]
 8004636:	0d5b      	lsrs	r3, r3, #21
 8004638:	f003 0303 	and.w	r3, r3, #3
 800463c:	3301      	adds	r3, #1
 800463e:	005b      	lsls	r3, r3, #1
 8004640:	69ba      	ldr	r2, [r7, #24]
 8004642:	fbb2 f3f3 	udiv	r3, r2, r3
 8004646:	61fb      	str	r3, [r7, #28]
          break;
 8004648:	e03a      	b.n	80046c0 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 800464a:	4b8f      	ldr	r3, [pc, #572]	; (8004888 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004652:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004656:	d135      	bne.n	80046c4 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8004658:	4b8b      	ldr	r3, [pc, #556]	; (8004888 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800465a:	691b      	ldr	r3, [r3, #16]
 800465c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004660:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004664:	d12e      	bne.n	80046c4 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8004666:	4b88      	ldr	r3, [pc, #544]	; (8004888 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004668:	691b      	ldr	r3, [r3, #16]
 800466a:	0a1b      	lsrs	r3, r3, #8
 800466c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004670:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8004672:	69bb      	ldr	r3, [r7, #24]
 8004674:	68ba      	ldr	r2, [r7, #8]
 8004676:	fb03 f202 	mul.w	r2, r3, r2
 800467a:	4b83      	ldr	r3, [pc, #524]	; (8004888 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800467c:	691b      	ldr	r3, [r3, #16]
 800467e:	091b      	lsrs	r3, r3, #4
 8004680:	f003 030f 	and.w	r3, r3, #15
 8004684:	3301      	adds	r3, #1
 8004686:	fbb2 f3f3 	udiv	r3, r2, r3
 800468a:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 800468c:	4b7e      	ldr	r3, [pc, #504]	; (8004888 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800468e:	691b      	ldr	r3, [r3, #16]
 8004690:	0d5b      	lsrs	r3, r3, #21
 8004692:	f003 0303 	and.w	r3, r3, #3
 8004696:	3301      	adds	r3, #1
 8004698:	005b      	lsls	r3, r3, #1
 800469a:	69ba      	ldr	r2, [r7, #24]
 800469c:	fbb2 f3f3 	udiv	r3, r2, r3
 80046a0:	61fb      	str	r3, [r7, #28]
          break;
 80046a2:	e00f      	b.n	80046c4 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 80046a4:	4b78      	ldr	r3, [pc, #480]	; (8004888 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80046a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80046aa:	f003 0302 	and.w	r3, r3, #2
 80046ae:	2b02      	cmp	r3, #2
 80046b0:	d10a      	bne.n	80046c8 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
            frequency = HSI48_VALUE;
 80046b2:	4b76      	ldr	r3, [pc, #472]	; (800488c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80046b4:	61fb      	str	r3, [r7, #28]
          break;
 80046b6:	e007      	b.n	80046c8 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
          break;
 80046b8:	bf00      	nop
 80046ba:	e3e2      	b.n	8004e82 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          break;
 80046bc:	bf00      	nop
 80046be:	e3e0      	b.n	8004e82 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          break;
 80046c0:	bf00      	nop
 80046c2:	e3de      	b.n	8004e82 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          break;
 80046c4:	bf00      	nop
 80046c6:	e3dc      	b.n	8004e82 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          break;
 80046c8:	bf00      	nop
      break;
 80046ca:	e3da      	b.n	8004e82 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 80046cc:	4b6e      	ldr	r3, [pc, #440]	; (8004888 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80046ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046d2:	f003 0303 	and.w	r3, r3, #3
 80046d6:	60fb      	str	r3, [r7, #12]
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	2b03      	cmp	r3, #3
 80046dc:	d827      	bhi.n	800472e <HAL_RCCEx_GetPeriphCLKFreq+0x6d6>
 80046de:	a201      	add	r2, pc, #4	; (adr r2, 80046e4 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>)
 80046e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046e4:	080046f5 	.word	0x080046f5
 80046e8:	080046fd 	.word	0x080046fd
 80046ec:	08004705 	.word	0x08004705
 80046f0:	08004719 	.word	0x08004719
          frequency = HAL_RCC_GetPCLK2Freq();
 80046f4:	f7ff f84c 	bl	8003790 <HAL_RCC_GetPCLK2Freq>
 80046f8:	61f8      	str	r0, [r7, #28]
          break;
 80046fa:	e01d      	b.n	8004738 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
          frequency = HAL_RCC_GetSysClockFreq();
 80046fc:	f7fe ff9c 	bl	8003638 <HAL_RCC_GetSysClockFreq>
 8004700:	61f8      	str	r0, [r7, #28]
          break;
 8004702:	e019      	b.n	8004738 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004704:	4b60      	ldr	r3, [pc, #384]	; (8004888 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800470c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004710:	d10f      	bne.n	8004732 <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
            frequency = HSI_VALUE;
 8004712:	4b5f      	ldr	r3, [pc, #380]	; (8004890 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8004714:	61fb      	str	r3, [r7, #28]
          break;
 8004716:	e00c      	b.n	8004732 <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004718:	4b5b      	ldr	r3, [pc, #364]	; (8004888 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800471a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800471e:	f003 0302 	and.w	r3, r3, #2
 8004722:	2b02      	cmp	r3, #2
 8004724:	d107      	bne.n	8004736 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
            frequency = LSE_VALUE;
 8004726:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800472a:	61fb      	str	r3, [r7, #28]
          break;
 800472c:	e003      	b.n	8004736 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
          break;
 800472e:	bf00      	nop
 8004730:	e3a8      	b.n	8004e84 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004732:	bf00      	nop
 8004734:	e3a6      	b.n	8004e84 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004736:	bf00      	nop
        break;
 8004738:	e3a4      	b.n	8004e84 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800473a:	4b53      	ldr	r3, [pc, #332]	; (8004888 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800473c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004740:	f003 030c 	and.w	r3, r3, #12
 8004744:	60fb      	str	r3, [r7, #12]
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	2b0c      	cmp	r3, #12
 800474a:	d83a      	bhi.n	80047c2 <HAL_RCCEx_GetPeriphCLKFreq+0x76a>
 800474c:	a201      	add	r2, pc, #4	; (adr r2, 8004754 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>)
 800474e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004752:	bf00      	nop
 8004754:	08004789 	.word	0x08004789
 8004758:	080047c3 	.word	0x080047c3
 800475c:	080047c3 	.word	0x080047c3
 8004760:	080047c3 	.word	0x080047c3
 8004764:	08004791 	.word	0x08004791
 8004768:	080047c3 	.word	0x080047c3
 800476c:	080047c3 	.word	0x080047c3
 8004770:	080047c3 	.word	0x080047c3
 8004774:	08004799 	.word	0x08004799
 8004778:	080047c3 	.word	0x080047c3
 800477c:	080047c3 	.word	0x080047c3
 8004780:	080047c3 	.word	0x080047c3
 8004784:	080047ad 	.word	0x080047ad
          frequency = HAL_RCC_GetPCLK1Freq();
 8004788:	f7fe ffec 	bl	8003764 <HAL_RCC_GetPCLK1Freq>
 800478c:	61f8      	str	r0, [r7, #28]
          break;
 800478e:	e01d      	b.n	80047cc <HAL_RCCEx_GetPeriphCLKFreq+0x774>
          frequency = HAL_RCC_GetSysClockFreq();
 8004790:	f7fe ff52 	bl	8003638 <HAL_RCC_GetSysClockFreq>
 8004794:	61f8      	str	r0, [r7, #28]
          break;
 8004796:	e019      	b.n	80047cc <HAL_RCCEx_GetPeriphCLKFreq+0x774>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004798:	4b3b      	ldr	r3, [pc, #236]	; (8004888 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047a4:	d10f      	bne.n	80047c6 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
            frequency = HSI_VALUE;
 80047a6:	4b3a      	ldr	r3, [pc, #232]	; (8004890 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 80047a8:	61fb      	str	r3, [r7, #28]
          break;
 80047aa:	e00c      	b.n	80047c6 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80047ac:	4b36      	ldr	r3, [pc, #216]	; (8004888 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80047ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047b2:	f003 0302 	and.w	r3, r3, #2
 80047b6:	2b02      	cmp	r3, #2
 80047b8:	d107      	bne.n	80047ca <HAL_RCCEx_GetPeriphCLKFreq+0x772>
            frequency = LSE_VALUE;
 80047ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80047be:	61fb      	str	r3, [r7, #28]
          break;
 80047c0:	e003      	b.n	80047ca <HAL_RCCEx_GetPeriphCLKFreq+0x772>
          break;
 80047c2:	bf00      	nop
 80047c4:	e35e      	b.n	8004e84 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80047c6:	bf00      	nop
 80047c8:	e35c      	b.n	8004e84 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80047ca:	bf00      	nop
        break;
 80047cc:	e35a      	b.n	8004e84 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 80047ce:	4b2e      	ldr	r3, [pc, #184]	; (8004888 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80047d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047d4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80047d8:	60fb      	str	r3, [r7, #12]
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	2b30      	cmp	r3, #48	; 0x30
 80047de:	d021      	beq.n	8004824 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	2b30      	cmp	r3, #48	; 0x30
 80047e4:	d829      	bhi.n	800483a <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	2b20      	cmp	r3, #32
 80047ea:	d011      	beq.n	8004810 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	2b20      	cmp	r3, #32
 80047f0:	d823      	bhi.n	800483a <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d003      	beq.n	8004800 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	2b10      	cmp	r3, #16
 80047fc:	d004      	beq.n	8004808 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>
          break;
 80047fe:	e01c      	b.n	800483a <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004800:	f7fe ffb0 	bl	8003764 <HAL_RCC_GetPCLK1Freq>
 8004804:	61f8      	str	r0, [r7, #28]
          break;
 8004806:	e01d      	b.n	8004844 <HAL_RCCEx_GetPeriphCLKFreq+0x7ec>
          frequency = HAL_RCC_GetSysClockFreq();
 8004808:	f7fe ff16 	bl	8003638 <HAL_RCC_GetSysClockFreq>
 800480c:	61f8      	str	r0, [r7, #28]
          break;
 800480e:	e019      	b.n	8004844 <HAL_RCCEx_GetPeriphCLKFreq+0x7ec>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004810:	4b1d      	ldr	r3, [pc, #116]	; (8004888 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004818:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800481c:	d10f      	bne.n	800483e <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
            frequency = HSI_VALUE;
 800481e:	4b1c      	ldr	r3, [pc, #112]	; (8004890 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8004820:	61fb      	str	r3, [r7, #28]
          break;
 8004822:	e00c      	b.n	800483e <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004824:	4b18      	ldr	r3, [pc, #96]	; (8004888 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004826:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800482a:	f003 0302 	and.w	r3, r3, #2
 800482e:	2b02      	cmp	r3, #2
 8004830:	d107      	bne.n	8004842 <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
            frequency = LSE_VALUE;
 8004832:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004836:	61fb      	str	r3, [r7, #28]
          break;
 8004838:	e003      	b.n	8004842 <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
          break;
 800483a:	bf00      	nop
 800483c:	e322      	b.n	8004e84 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800483e:	bf00      	nop
 8004840:	e320      	b.n	8004e84 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004842:	bf00      	nop
        break;
 8004844:	e31e      	b.n	8004e84 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8004846:	4b10      	ldr	r3, [pc, #64]	; (8004888 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004848:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800484c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004850:	60fb      	str	r3, [r7, #12]
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	2bc0      	cmp	r3, #192	; 0xc0
 8004856:	d027      	beq.n	80048a8 <HAL_RCCEx_GetPeriphCLKFreq+0x850>
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	2bc0      	cmp	r3, #192	; 0xc0
 800485c:	d82f      	bhi.n	80048be <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	2b80      	cmp	r3, #128	; 0x80
 8004862:	d017      	beq.n	8004894 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	2b80      	cmp	r3, #128	; 0x80
 8004868:	d829      	bhi.n	80048be <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d003      	beq.n	8004878 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	2b40      	cmp	r3, #64	; 0x40
 8004874:	d004      	beq.n	8004880 <HAL_RCCEx_GetPeriphCLKFreq+0x828>
          break;
 8004876:	e022      	b.n	80048be <HAL_RCCEx_GetPeriphCLKFreq+0x866>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004878:	f7fe ff74 	bl	8003764 <HAL_RCC_GetPCLK1Freq>
 800487c:	61f8      	str	r0, [r7, #28]
          break;
 800487e:	e023      	b.n	80048c8 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
          frequency = HAL_RCC_GetSysClockFreq();
 8004880:	f7fe feda 	bl	8003638 <HAL_RCC_GetSysClockFreq>
 8004884:	61f8      	str	r0, [r7, #28]
          break;
 8004886:	e01f      	b.n	80048c8 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
 8004888:	40021000 	.word	0x40021000
 800488c:	02dc6c00 	.word	0x02dc6c00
 8004890:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004894:	4b9b      	ldr	r3, [pc, #620]	; (8004b04 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800489c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048a0:	d10f      	bne.n	80048c2 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
            frequency = HSI_VALUE;
 80048a2:	4b99      	ldr	r3, [pc, #612]	; (8004b08 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80048a4:	61fb      	str	r3, [r7, #28]
          break;
 80048a6:	e00c      	b.n	80048c2 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80048a8:	4b96      	ldr	r3, [pc, #600]	; (8004b04 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80048aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048ae:	f003 0302 	and.w	r3, r3, #2
 80048b2:	2b02      	cmp	r3, #2
 80048b4:	d107      	bne.n	80048c6 <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
            frequency = LSE_VALUE;
 80048b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80048ba:	61fb      	str	r3, [r7, #28]
          break;
 80048bc:	e003      	b.n	80048c6 <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
          break;
 80048be:	bf00      	nop
 80048c0:	e2e0      	b.n	8004e84 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80048c2:	bf00      	nop
 80048c4:	e2de      	b.n	8004e84 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80048c6:	bf00      	nop
        break;
 80048c8:	e2dc      	b.n	8004e84 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 80048ca:	4b8e      	ldr	r3, [pc, #568]	; (8004b04 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80048cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048d4:	60fb      	str	r3, [r7, #12]
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80048dc:	d025      	beq.n	800492a <HAL_RCCEx_GetPeriphCLKFreq+0x8d2>
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80048e4:	d82c      	bhi.n	8004940 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048ec:	d013      	beq.n	8004916 <HAL_RCCEx_GetPeriphCLKFreq+0x8be>
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048f4:	d824      	bhi.n	8004940 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d004      	beq.n	8004906 <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004902:	d004      	beq.n	800490e <HAL_RCCEx_GetPeriphCLKFreq+0x8b6>
          break;
 8004904:	e01c      	b.n	8004940 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004906:	f7fe ff2d 	bl	8003764 <HAL_RCC_GetPCLK1Freq>
 800490a:	61f8      	str	r0, [r7, #28]
          break;
 800490c:	e01d      	b.n	800494a <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
          frequency = HAL_RCC_GetSysClockFreq();
 800490e:	f7fe fe93 	bl	8003638 <HAL_RCC_GetSysClockFreq>
 8004912:	61f8      	str	r0, [r7, #28]
          break;
 8004914:	e019      	b.n	800494a <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004916:	4b7b      	ldr	r3, [pc, #492]	; (8004b04 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800491e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004922:	d10f      	bne.n	8004944 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
            frequency = HSI_VALUE;
 8004924:	4b78      	ldr	r3, [pc, #480]	; (8004b08 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8004926:	61fb      	str	r3, [r7, #28]
          break;
 8004928:	e00c      	b.n	8004944 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800492a:	4b76      	ldr	r3, [pc, #472]	; (8004b04 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 800492c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004930:	f003 0302 	and.w	r3, r3, #2
 8004934:	2b02      	cmp	r3, #2
 8004936:	d107      	bne.n	8004948 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
            frequency = LSE_VALUE;
 8004938:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800493c:	61fb      	str	r3, [r7, #28]
          break;
 800493e:	e003      	b.n	8004948 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          break;
 8004940:	bf00      	nop
 8004942:	e29f      	b.n	8004e84 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004944:	bf00      	nop
 8004946:	e29d      	b.n	8004e84 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004948:	bf00      	nop
        break;
 800494a:	e29b      	b.n	8004e84 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800494c:	4b6d      	ldr	r3, [pc, #436]	; (8004b04 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 800494e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004952:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004956:	60fb      	str	r3, [r7, #12]
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800495e:	d025      	beq.n	80049ac <HAL_RCCEx_GetPeriphCLKFreq+0x954>
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004966:	d82c      	bhi.n	80049c2 <HAL_RCCEx_GetPeriphCLKFreq+0x96a>
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800496e:	d013      	beq.n	8004998 <HAL_RCCEx_GetPeriphCLKFreq+0x940>
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004976:	d824      	bhi.n	80049c2 <HAL_RCCEx_GetPeriphCLKFreq+0x96a>
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d004      	beq.n	8004988 <HAL_RCCEx_GetPeriphCLKFreq+0x930>
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004984:	d004      	beq.n	8004990 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
          break;
 8004986:	e01c      	b.n	80049c2 <HAL_RCCEx_GetPeriphCLKFreq+0x96a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004988:	f7fe feec 	bl	8003764 <HAL_RCC_GetPCLK1Freq>
 800498c:	61f8      	str	r0, [r7, #28]
          break;
 800498e:	e01d      	b.n	80049cc <HAL_RCCEx_GetPeriphCLKFreq+0x974>
          frequency = HAL_RCC_GetSysClockFreq();
 8004990:	f7fe fe52 	bl	8003638 <HAL_RCC_GetSysClockFreq>
 8004994:	61f8      	str	r0, [r7, #28]
          break;
 8004996:	e019      	b.n	80049cc <HAL_RCCEx_GetPeriphCLKFreq+0x974>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004998:	4b5a      	ldr	r3, [pc, #360]	; (8004b04 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049a4:	d10f      	bne.n	80049c6 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
            frequency = HSI_VALUE;
 80049a6:	4b58      	ldr	r3, [pc, #352]	; (8004b08 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80049a8:	61fb      	str	r3, [r7, #28]
          break;
 80049aa:	e00c      	b.n	80049c6 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80049ac:	4b55      	ldr	r3, [pc, #340]	; (8004b04 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80049ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049b2:	f003 0302 	and.w	r3, r3, #2
 80049b6:	2b02      	cmp	r3, #2
 80049b8:	d107      	bne.n	80049ca <HAL_RCCEx_GetPeriphCLKFreq+0x972>
            frequency = LSE_VALUE;
 80049ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80049be:	61fb      	str	r3, [r7, #28]
          break;
 80049c0:	e003      	b.n	80049ca <HAL_RCCEx_GetPeriphCLKFreq+0x972>
          break;
 80049c2:	bf00      	nop
 80049c4:	e25e      	b.n	8004e84 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80049c6:	bf00      	nop
 80049c8:	e25c      	b.n	8004e84 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80049ca:	bf00      	nop
        break;
 80049cc:	e25a      	b.n	8004e84 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80049ce:	4b4d      	ldr	r3, [pc, #308]	; (8004b04 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80049d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049d4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80049d8:	60fb      	str	r3, [r7, #12]
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80049e0:	d007      	beq.n	80049f2 <HAL_RCCEx_GetPeriphCLKFreq+0x99a>
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80049e8:	d12f      	bne.n	8004a4a <HAL_RCCEx_GetPeriphCLKFreq+0x9f2>
          frequency = HAL_RCC_GetSysClockFreq();
 80049ea:	f7fe fe25 	bl	8003638 <HAL_RCC_GetSysClockFreq>
 80049ee:	61f8      	str	r0, [r7, #28]
          break;
 80049f0:	e02e      	b.n	8004a50 <HAL_RCCEx_GetPeriphCLKFreq+0x9f8>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 80049f2:	4b44      	ldr	r3, [pc, #272]	; (8004b04 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80049fa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80049fe:	d126      	bne.n	8004a4e <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
 8004a00:	4b40      	ldr	r3, [pc, #256]	; (8004b04 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8004a02:	691b      	ldr	r3, [r3, #16]
 8004a04:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d020      	beq.n	8004a4e <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8004a0c:	4b3d      	ldr	r3, [pc, #244]	; (8004b04 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8004a0e:	691b      	ldr	r3, [r3, #16]
 8004a10:	0a1b      	lsrs	r3, r3, #8
 8004a12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a16:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8004a18:	69bb      	ldr	r3, [r7, #24]
 8004a1a:	68ba      	ldr	r2, [r7, #8]
 8004a1c:	fb03 f202 	mul.w	r2, r3, r2
 8004a20:	4b38      	ldr	r3, [pc, #224]	; (8004b04 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8004a22:	691b      	ldr	r3, [r3, #16]
 8004a24:	091b      	lsrs	r3, r3, #4
 8004a26:	f003 030f 	and.w	r3, r3, #15
 8004a2a:	3301      	adds	r3, #1
 8004a2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a30:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 8004a32:	4b34      	ldr	r3, [pc, #208]	; (8004b04 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8004a34:	691b      	ldr	r3, [r3, #16]
 8004a36:	0e5b      	lsrs	r3, r3, #25
 8004a38:	f003 0303 	and.w	r3, r3, #3
 8004a3c:	3301      	adds	r3, #1
 8004a3e:	005b      	lsls	r3, r3, #1
 8004a40:	69ba      	ldr	r2, [r7, #24]
 8004a42:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a46:	61fb      	str	r3, [r7, #28]
          break;
 8004a48:	e001      	b.n	8004a4e <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
          break;
 8004a4a:	bf00      	nop
 8004a4c:	e21a      	b.n	8004e84 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004a4e:	bf00      	nop
        break;
 8004a50:	e218      	b.n	8004e84 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 8004a52:	4b2c      	ldr	r3, [pc, #176]	; (8004b04 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8004a54:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004a58:	f003 0304 	and.w	r3, r3, #4
 8004a5c:	60fb      	str	r3, [r7, #12]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d103      	bne.n	8004a6c <HAL_RCCEx_GetPeriphCLKFreq+0xa14>
          frequency = HAL_RCC_GetPCLK2Freq();
 8004a64:	f7fe fe94 	bl	8003790 <HAL_RCC_GetPCLK2Freq>
 8004a68:	61f8      	str	r0, [r7, #28]
        break;
 8004a6a:	e20b      	b.n	8004e84 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          frequency = HAL_RCC_GetSysClockFreq();
 8004a6c:	f7fe fde4 	bl	8003638 <HAL_RCC_GetSysClockFreq>
 8004a70:	61f8      	str	r0, [r7, #28]
        break;
 8004a72:	e207      	b.n	8004e84 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
 8004a74:	4b23      	ldr	r3, [pc, #140]	; (8004b04 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8004a76:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004a7a:	f003 0318 	and.w	r3, r3, #24
 8004a7e:	60fb      	str	r3, [r7, #12]
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	2b10      	cmp	r3, #16
 8004a84:	d010      	beq.n	8004aa8 <HAL_RCCEx_GetPeriphCLKFreq+0xa50>
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	2b10      	cmp	r3, #16
 8004a8a:	d834      	bhi.n	8004af6 <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d003      	beq.n	8004a9a <HAL_RCCEx_GetPeriphCLKFreq+0xa42>
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	2b08      	cmp	r3, #8
 8004a96:	d024      	beq.n	8004ae2 <HAL_RCCEx_GetPeriphCLKFreq+0xa8a>
          break;
 8004a98:	e02d      	b.n	8004af6 <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
          frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8004a9a:	69b9      	ldr	r1, [r7, #24]
 8004a9c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004aa0:	f000 fbe2 	bl	8005268 <RCCEx_GetSAIxPeriphCLKFreq>
 8004aa4:	61f8      	str	r0, [r7, #28]
          break;
 8004aa6:	e02b      	b.n	8004b00 <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8004aa8:	4b16      	ldr	r3, [pc, #88]	; (8004b04 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f003 0302 	and.w	r3, r3, #2
 8004ab0:	2b02      	cmp	r3, #2
 8004ab2:	d122      	bne.n	8004afa <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8004ab4:	4b13      	ldr	r3, [pc, #76]	; (8004b04 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f003 0308 	and.w	r3, r3, #8
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d005      	beq.n	8004acc <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
 8004ac0:	4b10      	ldr	r3, [pc, #64]	; (8004b04 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	091b      	lsrs	r3, r3, #4
 8004ac6:	f003 030f 	and.w	r3, r3, #15
 8004aca:	e005      	b.n	8004ad8 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 8004acc:	4b0d      	ldr	r3, [pc, #52]	; (8004b04 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8004ace:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ad2:	0a1b      	lsrs	r3, r3, #8
 8004ad4:	f003 030f 	and.w	r3, r3, #15
 8004ad8:	4a0c      	ldr	r2, [pc, #48]	; (8004b0c <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8004ada:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ade:	61fb      	str	r3, [r7, #28]
          break;
 8004ae0:	e00b      	b.n	8004afa <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004ae2:	4b08      	ldr	r3, [pc, #32]	; (8004b04 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004aea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004aee:	d106      	bne.n	8004afe <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
            frequency = HSI_VALUE;
 8004af0:	4b05      	ldr	r3, [pc, #20]	; (8004b08 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8004af2:	61fb      	str	r3, [r7, #28]
          break;
 8004af4:	e003      	b.n	8004afe <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
          break;
 8004af6:	bf00      	nop
 8004af8:	e1c4      	b.n	8004e84 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004afa:	bf00      	nop
 8004afc:	e1c2      	b.n	8004e84 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004afe:	bf00      	nop
        break;
 8004b00:	e1c0      	b.n	8004e84 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
 8004b02:	bf00      	nop
 8004b04:	40021000 	.word	0x40021000
 8004b08:	00f42400 	.word	0x00f42400
 8004b0c:	08007534 	.word	0x08007534
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8004b10:	4b96      	ldr	r3, [pc, #600]	; (8004d6c <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8004b12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b16:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004b1a:	60fb      	str	r3, [r7, #12]
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b22:	d013      	beq.n	8004b4c <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b2a:	d819      	bhi.n	8004b60 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d004      	beq.n	8004b3c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b38:	d004      	beq.n	8004b44 <HAL_RCCEx_GetPeriphCLKFreq+0xaec>
          break;
 8004b3a:	e011      	b.n	8004b60 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004b3c:	f7fe fe12 	bl	8003764 <HAL_RCC_GetPCLK1Freq>
 8004b40:	61f8      	str	r0, [r7, #28]
          break;
 8004b42:	e010      	b.n	8004b66 <HAL_RCCEx_GetPeriphCLKFreq+0xb0e>
          frequency = HAL_RCC_GetSysClockFreq();
 8004b44:	f7fe fd78 	bl	8003638 <HAL_RCC_GetSysClockFreq>
 8004b48:	61f8      	str	r0, [r7, #28]
          break;
 8004b4a:	e00c      	b.n	8004b66 <HAL_RCCEx_GetPeriphCLKFreq+0xb0e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004b4c:	4b87      	ldr	r3, [pc, #540]	; (8004d6c <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b58:	d104      	bne.n	8004b64 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
            frequency = HSI_VALUE;
 8004b5a:	4b85      	ldr	r3, [pc, #532]	; (8004d70 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8004b5c:	61fb      	str	r3, [r7, #28]
          break;
 8004b5e:	e001      	b.n	8004b64 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
          break;
 8004b60:	bf00      	nop
 8004b62:	e18f      	b.n	8004e84 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004b64:	bf00      	nop
        break;
 8004b66:	e18d      	b.n	8004e84 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8004b68:	4b80      	ldr	r3, [pc, #512]	; (8004d6c <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8004b6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b6e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004b72:	60fb      	str	r3, [r7, #12]
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b7a:	d013      	beq.n	8004ba4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b82:	d819      	bhi.n	8004bb8 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d004      	beq.n	8004b94 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004b90:	d004      	beq.n	8004b9c <HAL_RCCEx_GetPeriphCLKFreq+0xb44>
          break;
 8004b92:	e011      	b.n	8004bb8 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004b94:	f7fe fde6 	bl	8003764 <HAL_RCC_GetPCLK1Freq>
 8004b98:	61f8      	str	r0, [r7, #28]
          break;
 8004b9a:	e010      	b.n	8004bbe <HAL_RCCEx_GetPeriphCLKFreq+0xb66>
          frequency = HAL_RCC_GetSysClockFreq();
 8004b9c:	f7fe fd4c 	bl	8003638 <HAL_RCC_GetSysClockFreq>
 8004ba0:	61f8      	str	r0, [r7, #28]
          break;
 8004ba2:	e00c      	b.n	8004bbe <HAL_RCCEx_GetPeriphCLKFreq+0xb66>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004ba4:	4b71      	ldr	r3, [pc, #452]	; (8004d6c <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bb0:	d104      	bne.n	8004bbc <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
            frequency = HSI_VALUE;
 8004bb2:	4b6f      	ldr	r3, [pc, #444]	; (8004d70 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8004bb4:	61fb      	str	r3, [r7, #28]
          break;
 8004bb6:	e001      	b.n	8004bbc <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
          break;
 8004bb8:	bf00      	nop
 8004bba:	e163      	b.n	8004e84 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004bbc:	bf00      	nop
        break;
 8004bbe:	e161      	b.n	8004e84 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8004bc0:	4b6a      	ldr	r3, [pc, #424]	; (8004d6c <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8004bc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bc6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004bca:	60fb      	str	r3, [r7, #12]
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004bd2:	d013      	beq.n	8004bfc <HAL_RCCEx_GetPeriphCLKFreq+0xba4>
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004bda:	d819      	bhi.n	8004c10 <HAL_RCCEx_GetPeriphCLKFreq+0xbb8>
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d004      	beq.n	8004bec <HAL_RCCEx_GetPeriphCLKFreq+0xb94>
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004be8:	d004      	beq.n	8004bf4 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>
          break;
 8004bea:	e011      	b.n	8004c10 <HAL_RCCEx_GetPeriphCLKFreq+0xbb8>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004bec:	f7fe fdba 	bl	8003764 <HAL_RCC_GetPCLK1Freq>
 8004bf0:	61f8      	str	r0, [r7, #28]
          break;
 8004bf2:	e010      	b.n	8004c16 <HAL_RCCEx_GetPeriphCLKFreq+0xbbe>
          frequency = HAL_RCC_GetSysClockFreq();
 8004bf4:	f7fe fd20 	bl	8003638 <HAL_RCC_GetSysClockFreq>
 8004bf8:	61f8      	str	r0, [r7, #28]
          break;
 8004bfa:	e00c      	b.n	8004c16 <HAL_RCCEx_GetPeriphCLKFreq+0xbbe>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004bfc:	4b5b      	ldr	r3, [pc, #364]	; (8004d6c <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c08:	d104      	bne.n	8004c14 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
            frequency = HSI_VALUE;
 8004c0a:	4b59      	ldr	r3, [pc, #356]	; (8004d70 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8004c0c:	61fb      	str	r3, [r7, #28]
          break;
 8004c0e:	e001      	b.n	8004c14 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
          break;
 8004c10:	bf00      	nop
 8004c12:	e137      	b.n	8004e84 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004c14:	bf00      	nop
        break;
 8004c16:	e135      	b.n	8004e84 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8004c18:	4b54      	ldr	r3, [pc, #336]	; (8004d6c <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8004c1a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004c1e:	f003 0303 	and.w	r3, r3, #3
 8004c22:	60fb      	str	r3, [r7, #12]
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	2b02      	cmp	r3, #2
 8004c28:	d011      	beq.n	8004c4e <HAL_RCCEx_GetPeriphCLKFreq+0xbf6>
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	2b02      	cmp	r3, #2
 8004c2e:	d818      	bhi.n	8004c62 <HAL_RCCEx_GetPeriphCLKFreq+0xc0a>
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d003      	beq.n	8004c3e <HAL_RCCEx_GetPeriphCLKFreq+0xbe6>
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	2b01      	cmp	r3, #1
 8004c3a:	d004      	beq.n	8004c46 <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
          break;
 8004c3c:	e011      	b.n	8004c62 <HAL_RCCEx_GetPeriphCLKFreq+0xc0a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004c3e:	f7fe fd91 	bl	8003764 <HAL_RCC_GetPCLK1Freq>
 8004c42:	61f8      	str	r0, [r7, #28]
          break;
 8004c44:	e010      	b.n	8004c68 <HAL_RCCEx_GetPeriphCLKFreq+0xc10>
          frequency = HAL_RCC_GetSysClockFreq();
 8004c46:	f7fe fcf7 	bl	8003638 <HAL_RCC_GetSysClockFreq>
 8004c4a:	61f8      	str	r0, [r7, #28]
          break;
 8004c4c:	e00c      	b.n	8004c68 <HAL_RCCEx_GetPeriphCLKFreq+0xc10>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004c4e:	4b47      	ldr	r3, [pc, #284]	; (8004d6c <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c5a:	d104      	bne.n	8004c66 <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
            frequency = HSI_VALUE;
 8004c5c:	4b44      	ldr	r3, [pc, #272]	; (8004d70 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8004c5e:	61fb      	str	r3, [r7, #28]
          break;
 8004c60:	e001      	b.n	8004c66 <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
          break;
 8004c62:	bf00      	nop
 8004c64:	e10e      	b.n	8004e84 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004c66:	bf00      	nop
        break;
 8004c68:	e10c      	b.n	8004e84 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8004c6a:	4b40      	ldr	r3, [pc, #256]	; (8004d6c <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8004c6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c70:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8004c74:	60fb      	str	r3, [r7, #12]
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004c7c:	d02c      	beq.n	8004cd8 <HAL_RCCEx_GetPeriphCLKFreq+0xc80>
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004c84:	d833      	bhi.n	8004cee <HAL_RCCEx_GetPeriphCLKFreq+0xc96>
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004c8c:	d01a      	beq.n	8004cc4 <HAL_RCCEx_GetPeriphCLKFreq+0xc6c>
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004c94:	d82b      	bhi.n	8004cee <HAL_RCCEx_GetPeriphCLKFreq+0xc96>
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d004      	beq.n	8004ca6 <HAL_RCCEx_GetPeriphCLKFreq+0xc4e>
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004ca2:	d004      	beq.n	8004cae <HAL_RCCEx_GetPeriphCLKFreq+0xc56>
          break;
 8004ca4:	e023      	b.n	8004cee <HAL_RCCEx_GetPeriphCLKFreq+0xc96>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004ca6:	f7fe fd5d 	bl	8003764 <HAL_RCC_GetPCLK1Freq>
 8004caa:	61f8      	str	r0, [r7, #28]
          break;
 8004cac:	e026      	b.n	8004cfc <HAL_RCCEx_GetPeriphCLKFreq+0xca4>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8004cae:	4b2f      	ldr	r3, [pc, #188]	; (8004d6c <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8004cb0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004cb4:	f003 0302 	and.w	r3, r3, #2
 8004cb8:	2b02      	cmp	r3, #2
 8004cba:	d11a      	bne.n	8004cf2 <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
              frequency = LSI_VALUE;
 8004cbc:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8004cc0:	61fb      	str	r3, [r7, #28]
          break;
 8004cc2:	e016      	b.n	8004cf2 <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004cc4:	4b29      	ldr	r3, [pc, #164]	; (8004d6c <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ccc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cd0:	d111      	bne.n	8004cf6 <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
            frequency = HSI_VALUE;
 8004cd2:	4b27      	ldr	r3, [pc, #156]	; (8004d70 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8004cd4:	61fb      	str	r3, [r7, #28]
          break;
 8004cd6:	e00e      	b.n	8004cf6 <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004cd8:	4b24      	ldr	r3, [pc, #144]	; (8004d6c <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8004cda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cde:	f003 0302 	and.w	r3, r3, #2
 8004ce2:	2b02      	cmp	r3, #2
 8004ce4:	d109      	bne.n	8004cfa <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
            frequency = LSE_VALUE;
 8004ce6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004cea:	61fb      	str	r3, [r7, #28]
          break;
 8004cec:	e005      	b.n	8004cfa <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
          break;
 8004cee:	bf00      	nop
 8004cf0:	e0c8      	b.n	8004e84 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004cf2:	bf00      	nop
 8004cf4:	e0c6      	b.n	8004e84 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004cf6:	bf00      	nop
 8004cf8:	e0c4      	b.n	8004e84 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004cfa:	bf00      	nop
        break;
 8004cfc:	e0c2      	b.n	8004e84 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8004cfe:	4b1b      	ldr	r3, [pc, #108]	; (8004d6c <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8004d00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d04:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004d08:	60fb      	str	r3, [r7, #12]
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004d10:	d030      	beq.n	8004d74 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004d18:	d837      	bhi.n	8004d8a <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004d20:	d01a      	beq.n	8004d58 <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004d28:	d82f      	bhi.n	8004d8a <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d004      	beq.n	8004d3a <HAL_RCCEx_GetPeriphCLKFreq+0xce2>
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d36:	d004      	beq.n	8004d42 <HAL_RCCEx_GetPeriphCLKFreq+0xcea>
          break;
 8004d38:	e027      	b.n	8004d8a <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004d3a:	f7fe fd13 	bl	8003764 <HAL_RCC_GetPCLK1Freq>
 8004d3e:	61f8      	str	r0, [r7, #28]
          break;
 8004d40:	e02a      	b.n	8004d98 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8004d42:	4b0a      	ldr	r3, [pc, #40]	; (8004d6c <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8004d44:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d48:	f003 0302 	and.w	r3, r3, #2
 8004d4c:	2b02      	cmp	r3, #2
 8004d4e:	d11e      	bne.n	8004d8e <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
              frequency = LSI_VALUE;
 8004d50:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8004d54:	61fb      	str	r3, [r7, #28]
          break;
 8004d56:	e01a      	b.n	8004d8e <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004d58:	4b04      	ldr	r3, [pc, #16]	; (8004d6c <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d64:	d115      	bne.n	8004d92 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
            frequency = HSI_VALUE;
 8004d66:	4b02      	ldr	r3, [pc, #8]	; (8004d70 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8004d68:	61fb      	str	r3, [r7, #28]
          break;
 8004d6a:	e012      	b.n	8004d92 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
 8004d6c:	40021000 	.word	0x40021000
 8004d70:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004d74:	4b46      	ldr	r3, [pc, #280]	; (8004e90 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8004d76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d7a:	f003 0302 	and.w	r3, r3, #2
 8004d7e:	2b02      	cmp	r3, #2
 8004d80:	d109      	bne.n	8004d96 <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
            frequency = LSE_VALUE;
 8004d82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d86:	61fb      	str	r3, [r7, #28]
          break;
 8004d88:	e005      	b.n	8004d96 <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
          break;
 8004d8a:	bf00      	nop
 8004d8c:	e07a      	b.n	8004e84 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004d8e:	bf00      	nop
 8004d90:	e078      	b.n	8004e84 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004d92:	bf00      	nop
 8004d94:	e076      	b.n	8004e84 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004d96:	bf00      	nop
        break;
 8004d98:	e074      	b.n	8004e84 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8004d9a:	4b3d      	ldr	r3, [pc, #244]	; (8004e90 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8004d9c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004da0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004da4:	60fb      	str	r3, [r7, #12]
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004dac:	d02c      	beq.n	8004e08 <HAL_RCCEx_GetPeriphCLKFreq+0xdb0>
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004db4:	d855      	bhi.n	8004e62 <HAL_RCCEx_GetPeriphCLKFreq+0xe0a>
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d004      	beq.n	8004dc6 <HAL_RCCEx_GetPeriphCLKFreq+0xd6e>
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004dc2:	d004      	beq.n	8004dce <HAL_RCCEx_GetPeriphCLKFreq+0xd76>
          break;
 8004dc4:	e04d      	b.n	8004e62 <HAL_RCCEx_GetPeriphCLKFreq+0xe0a>
          frequency = HAL_RCC_GetSysClockFreq();
 8004dc6:	f7fe fc37 	bl	8003638 <HAL_RCC_GetSysClockFreq>
 8004dca:	61f8      	str	r0, [r7, #28]
          break;
 8004dcc:	e04e      	b.n	8004e6c <HAL_RCCEx_GetPeriphCLKFreq+0xe14>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8004dce:	4b30      	ldr	r3, [pc, #192]	; (8004e90 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f003 0302 	and.w	r3, r3, #2
 8004dd6:	2b02      	cmp	r3, #2
 8004dd8:	d145      	bne.n	8004e66 <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8004dda:	4b2d      	ldr	r3, [pc, #180]	; (8004e90 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f003 0308 	and.w	r3, r3, #8
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d005      	beq.n	8004df2 <HAL_RCCEx_GetPeriphCLKFreq+0xd9a>
 8004de6:	4b2a      	ldr	r3, [pc, #168]	; (8004e90 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	091b      	lsrs	r3, r3, #4
 8004dec:	f003 030f 	and.w	r3, r3, #15
 8004df0:	e005      	b.n	8004dfe <HAL_RCCEx_GetPeriphCLKFreq+0xda6>
 8004df2:	4b27      	ldr	r3, [pc, #156]	; (8004e90 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8004df4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004df8:	0a1b      	lsrs	r3, r3, #8
 8004dfa:	f003 030f 	and.w	r3, r3, #15
 8004dfe:	4a25      	ldr	r2, [pc, #148]	; (8004e94 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8004e00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e04:	61fb      	str	r3, [r7, #28]
          break;
 8004e06:	e02e      	b.n	8004e66 <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8004e08:	4b21      	ldr	r3, [pc, #132]	; (8004e90 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e10:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004e14:	d129      	bne.n	8004e6a <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8004e16:	4b1e      	ldr	r3, [pc, #120]	; (8004e90 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8004e18:	68db      	ldr	r3, [r3, #12]
 8004e1a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e1e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e22:	d122      	bne.n	8004e6a <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8004e24:	4b1a      	ldr	r3, [pc, #104]	; (8004e90 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8004e26:	68db      	ldr	r3, [r3, #12]
 8004e28:	0a1b      	lsrs	r3, r3, #8
 8004e2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e2e:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004e30:	69bb      	ldr	r3, [r7, #24]
 8004e32:	68ba      	ldr	r2, [r7, #8]
 8004e34:	fb03 f202 	mul.w	r2, r3, r2
 8004e38:	4b15      	ldr	r3, [pc, #84]	; (8004e90 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8004e3a:	68db      	ldr	r3, [r3, #12]
 8004e3c:	091b      	lsrs	r3, r3, #4
 8004e3e:	f003 030f 	and.w	r3, r3, #15
 8004e42:	3301      	adds	r3, #1
 8004e44:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e48:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8004e4a:	4b11      	ldr	r3, [pc, #68]	; (8004e90 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8004e4c:	68db      	ldr	r3, [r3, #12]
 8004e4e:	0d5b      	lsrs	r3, r3, #21
 8004e50:	f003 0303 	and.w	r3, r3, #3
 8004e54:	3301      	adds	r3, #1
 8004e56:	005b      	lsls	r3, r3, #1
 8004e58:	69ba      	ldr	r2, [r7, #24]
 8004e5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e5e:	61fb      	str	r3, [r7, #28]
          break;
 8004e60:	e003      	b.n	8004e6a <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
          break;
 8004e62:	bf00      	nop
 8004e64:	e00e      	b.n	8004e84 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004e66:	bf00      	nop
 8004e68:	e00c      	b.n	8004e84 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004e6a:	bf00      	nop
        break;
 8004e6c:	e00a      	b.n	8004e84 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 8004e6e:	bf00      	nop
 8004e70:	e008      	b.n	8004e84 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 8004e72:	bf00      	nop
 8004e74:	e006      	b.n	8004e84 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 8004e76:	bf00      	nop
 8004e78:	e004      	b.n	8004e84 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 8004e7a:	bf00      	nop
 8004e7c:	e002      	b.n	8004e84 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 8004e7e:	bf00      	nop
 8004e80:	e000      	b.n	8004e84 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 8004e82:	bf00      	nop
    }
  }

  return(frequency);
 8004e84:	69fb      	ldr	r3, [r7, #28]
}
 8004e86:	4618      	mov	r0, r3
 8004e88:	3720      	adds	r7, #32
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bd80      	pop	{r7, pc}
 8004e8e:	bf00      	nop
 8004e90:	40021000 	.word	0x40021000
 8004e94:	08007534 	.word	0x08007534

08004e98 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b084      	sub	sp, #16
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
 8004ea0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004ea6:	4b72      	ldr	r3, [pc, #456]	; (8005070 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004ea8:	68db      	ldr	r3, [r3, #12]
 8004eaa:	f003 0303 	and.w	r3, r3, #3
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d00e      	beq.n	8004ed0 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004eb2:	4b6f      	ldr	r3, [pc, #444]	; (8005070 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004eb4:	68db      	ldr	r3, [r3, #12]
 8004eb6:	f003 0203 	and.w	r2, r3, #3
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	429a      	cmp	r2, r3
 8004ec0:	d103      	bne.n	8004eca <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
       ||
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d142      	bne.n	8004f50 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8004eca:	2301      	movs	r3, #1
 8004ecc:	73fb      	strb	r3, [r7, #15]
 8004ece:	e03f      	b.n	8004f50 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	2b03      	cmp	r3, #3
 8004ed6:	d018      	beq.n	8004f0a <RCCEx_PLLSAI1_Config+0x72>
 8004ed8:	2b03      	cmp	r3, #3
 8004eda:	d825      	bhi.n	8004f28 <RCCEx_PLLSAI1_Config+0x90>
 8004edc:	2b01      	cmp	r3, #1
 8004ede:	d002      	beq.n	8004ee6 <RCCEx_PLLSAI1_Config+0x4e>
 8004ee0:	2b02      	cmp	r3, #2
 8004ee2:	d009      	beq.n	8004ef8 <RCCEx_PLLSAI1_Config+0x60>
 8004ee4:	e020      	b.n	8004f28 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004ee6:	4b62      	ldr	r3, [pc, #392]	; (8005070 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f003 0302 	and.w	r3, r3, #2
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d11d      	bne.n	8004f2e <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ef6:	e01a      	b.n	8004f2e <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004ef8:	4b5d      	ldr	r3, [pc, #372]	; (8005070 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d116      	bne.n	8004f32 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8004f04:	2301      	movs	r3, #1
 8004f06:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f08:	e013      	b.n	8004f32 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004f0a:	4b59      	ldr	r3, [pc, #356]	; (8005070 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d10f      	bne.n	8004f36 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004f16:	4b56      	ldr	r3, [pc, #344]	; (8005070 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d109      	bne.n	8004f36 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8004f22:	2301      	movs	r3, #1
 8004f24:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004f26:	e006      	b.n	8004f36 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8004f28:	2301      	movs	r3, #1
 8004f2a:	73fb      	strb	r3, [r7, #15]
      break;
 8004f2c:	e004      	b.n	8004f38 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004f2e:	bf00      	nop
 8004f30:	e002      	b.n	8004f38 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004f32:	bf00      	nop
 8004f34:	e000      	b.n	8004f38 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004f36:	bf00      	nop
    }

    if(status == HAL_OK)
 8004f38:	7bfb      	ldrb	r3, [r7, #15]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d108      	bne.n	8004f50 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8004f3e:	4b4c      	ldr	r3, [pc, #304]	; (8005070 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004f40:	68db      	ldr	r3, [r3, #12]
 8004f42:	f023 0203 	bic.w	r2, r3, #3
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4949      	ldr	r1, [pc, #292]	; (8005070 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8004f50:	7bfb      	ldrb	r3, [r7, #15]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	f040 8086 	bne.w	8005064 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004f58:	4b45      	ldr	r3, [pc, #276]	; (8005070 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4a44      	ldr	r2, [pc, #272]	; (8005070 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004f5e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004f62:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f64:	f7fc f976 	bl	8001254 <HAL_GetTick>
 8004f68:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004f6a:	e009      	b.n	8004f80 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004f6c:	f7fc f972 	bl	8001254 <HAL_GetTick>
 8004f70:	4602      	mov	r2, r0
 8004f72:	68bb      	ldr	r3, [r7, #8]
 8004f74:	1ad3      	subs	r3, r2, r3
 8004f76:	2b02      	cmp	r3, #2
 8004f78:	d902      	bls.n	8004f80 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8004f7a:	2303      	movs	r3, #3
 8004f7c:	73fb      	strb	r3, [r7, #15]
        break;
 8004f7e:	e005      	b.n	8004f8c <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004f80:	4b3b      	ldr	r3, [pc, #236]	; (8005070 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d1ef      	bne.n	8004f6c <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8004f8c:	7bfb      	ldrb	r3, [r7, #15]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d168      	bne.n	8005064 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d113      	bne.n	8004fc0 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004f98:	4b35      	ldr	r3, [pc, #212]	; (8005070 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004f9a:	691a      	ldr	r2, [r3, #16]
 8004f9c:	4b35      	ldr	r3, [pc, #212]	; (8005074 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004f9e:	4013      	ands	r3, r2
 8004fa0:	687a      	ldr	r2, [r7, #4]
 8004fa2:	6892      	ldr	r2, [r2, #8]
 8004fa4:	0211      	lsls	r1, r2, #8
 8004fa6:	687a      	ldr	r2, [r7, #4]
 8004fa8:	68d2      	ldr	r2, [r2, #12]
 8004faa:	06d2      	lsls	r2, r2, #27
 8004fac:	4311      	orrs	r1, r2
 8004fae:	687a      	ldr	r2, [r7, #4]
 8004fb0:	6852      	ldr	r2, [r2, #4]
 8004fb2:	3a01      	subs	r2, #1
 8004fb4:	0112      	lsls	r2, r2, #4
 8004fb6:	430a      	orrs	r2, r1
 8004fb8:	492d      	ldr	r1, [pc, #180]	; (8005070 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004fba:	4313      	orrs	r3, r2
 8004fbc:	610b      	str	r3, [r1, #16]
 8004fbe:	e02d      	b.n	800501c <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	2b01      	cmp	r3, #1
 8004fc4:	d115      	bne.n	8004ff2 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004fc6:	4b2a      	ldr	r3, [pc, #168]	; (8005070 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004fc8:	691a      	ldr	r2, [r3, #16]
 8004fca:	4b2b      	ldr	r3, [pc, #172]	; (8005078 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004fcc:	4013      	ands	r3, r2
 8004fce:	687a      	ldr	r2, [r7, #4]
 8004fd0:	6892      	ldr	r2, [r2, #8]
 8004fd2:	0211      	lsls	r1, r2, #8
 8004fd4:	687a      	ldr	r2, [r7, #4]
 8004fd6:	6912      	ldr	r2, [r2, #16]
 8004fd8:	0852      	lsrs	r2, r2, #1
 8004fda:	3a01      	subs	r2, #1
 8004fdc:	0552      	lsls	r2, r2, #21
 8004fde:	4311      	orrs	r1, r2
 8004fe0:	687a      	ldr	r2, [r7, #4]
 8004fe2:	6852      	ldr	r2, [r2, #4]
 8004fe4:	3a01      	subs	r2, #1
 8004fe6:	0112      	lsls	r2, r2, #4
 8004fe8:	430a      	orrs	r2, r1
 8004fea:	4921      	ldr	r1, [pc, #132]	; (8005070 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004fec:	4313      	orrs	r3, r2
 8004fee:	610b      	str	r3, [r1, #16]
 8004ff0:	e014      	b.n	800501c <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004ff2:	4b1f      	ldr	r3, [pc, #124]	; (8005070 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004ff4:	691a      	ldr	r2, [r3, #16]
 8004ff6:	4b21      	ldr	r3, [pc, #132]	; (800507c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ff8:	4013      	ands	r3, r2
 8004ffa:	687a      	ldr	r2, [r7, #4]
 8004ffc:	6892      	ldr	r2, [r2, #8]
 8004ffe:	0211      	lsls	r1, r2, #8
 8005000:	687a      	ldr	r2, [r7, #4]
 8005002:	6952      	ldr	r2, [r2, #20]
 8005004:	0852      	lsrs	r2, r2, #1
 8005006:	3a01      	subs	r2, #1
 8005008:	0652      	lsls	r2, r2, #25
 800500a:	4311      	orrs	r1, r2
 800500c:	687a      	ldr	r2, [r7, #4]
 800500e:	6852      	ldr	r2, [r2, #4]
 8005010:	3a01      	subs	r2, #1
 8005012:	0112      	lsls	r2, r2, #4
 8005014:	430a      	orrs	r2, r1
 8005016:	4916      	ldr	r1, [pc, #88]	; (8005070 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005018:	4313      	orrs	r3, r2
 800501a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800501c:	4b14      	ldr	r3, [pc, #80]	; (8005070 <RCCEx_PLLSAI1_Config+0x1d8>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	4a13      	ldr	r2, [pc, #76]	; (8005070 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005022:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005026:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005028:	f7fc f914 	bl	8001254 <HAL_GetTick>
 800502c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800502e:	e009      	b.n	8005044 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005030:	f7fc f910 	bl	8001254 <HAL_GetTick>
 8005034:	4602      	mov	r2, r0
 8005036:	68bb      	ldr	r3, [r7, #8]
 8005038:	1ad3      	subs	r3, r2, r3
 800503a:	2b02      	cmp	r3, #2
 800503c:	d902      	bls.n	8005044 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800503e:	2303      	movs	r3, #3
 8005040:	73fb      	strb	r3, [r7, #15]
          break;
 8005042:	e005      	b.n	8005050 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005044:	4b0a      	ldr	r3, [pc, #40]	; (8005070 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800504c:	2b00      	cmp	r3, #0
 800504e:	d0ef      	beq.n	8005030 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8005050:	7bfb      	ldrb	r3, [r7, #15]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d106      	bne.n	8005064 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005056:	4b06      	ldr	r3, [pc, #24]	; (8005070 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005058:	691a      	ldr	r2, [r3, #16]
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	699b      	ldr	r3, [r3, #24]
 800505e:	4904      	ldr	r1, [pc, #16]	; (8005070 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005060:	4313      	orrs	r3, r2
 8005062:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005064:	7bfb      	ldrb	r3, [r7, #15]
}
 8005066:	4618      	mov	r0, r3
 8005068:	3710      	adds	r7, #16
 800506a:	46bd      	mov	sp, r7
 800506c:	bd80      	pop	{r7, pc}
 800506e:	bf00      	nop
 8005070:	40021000 	.word	0x40021000
 8005074:	07ff800f 	.word	0x07ff800f
 8005078:	ff9f800f 	.word	0xff9f800f
 800507c:	f9ff800f 	.word	0xf9ff800f

08005080 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b084      	sub	sp, #16
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
 8005088:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800508a:	2300      	movs	r3, #0
 800508c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800508e:	4b72      	ldr	r3, [pc, #456]	; (8005258 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005090:	68db      	ldr	r3, [r3, #12]
 8005092:	f003 0303 	and.w	r3, r3, #3
 8005096:	2b00      	cmp	r3, #0
 8005098:	d00e      	beq.n	80050b8 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800509a:	4b6f      	ldr	r3, [pc, #444]	; (8005258 <RCCEx_PLLSAI2_Config+0x1d8>)
 800509c:	68db      	ldr	r3, [r3, #12]
 800509e:	f003 0203 	and.w	r2, r3, #3
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	429a      	cmp	r2, r3
 80050a8:	d103      	bne.n	80050b2 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
       ||
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d142      	bne.n	8005138 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80050b2:	2301      	movs	r3, #1
 80050b4:	73fb      	strb	r3, [r7, #15]
 80050b6:	e03f      	b.n	8005138 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	2b03      	cmp	r3, #3
 80050be:	d018      	beq.n	80050f2 <RCCEx_PLLSAI2_Config+0x72>
 80050c0:	2b03      	cmp	r3, #3
 80050c2:	d825      	bhi.n	8005110 <RCCEx_PLLSAI2_Config+0x90>
 80050c4:	2b01      	cmp	r3, #1
 80050c6:	d002      	beq.n	80050ce <RCCEx_PLLSAI2_Config+0x4e>
 80050c8:	2b02      	cmp	r3, #2
 80050ca:	d009      	beq.n	80050e0 <RCCEx_PLLSAI2_Config+0x60>
 80050cc:	e020      	b.n	8005110 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80050ce:	4b62      	ldr	r3, [pc, #392]	; (8005258 <RCCEx_PLLSAI2_Config+0x1d8>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f003 0302 	and.w	r3, r3, #2
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d11d      	bne.n	8005116 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 80050da:	2301      	movs	r3, #1
 80050dc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80050de:	e01a      	b.n	8005116 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80050e0:	4b5d      	ldr	r3, [pc, #372]	; (8005258 <RCCEx_PLLSAI2_Config+0x1d8>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d116      	bne.n	800511a <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 80050ec:	2301      	movs	r3, #1
 80050ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80050f0:	e013      	b.n	800511a <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80050f2:	4b59      	ldr	r3, [pc, #356]	; (8005258 <RCCEx_PLLSAI2_Config+0x1d8>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d10f      	bne.n	800511e <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80050fe:	4b56      	ldr	r3, [pc, #344]	; (8005258 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005106:	2b00      	cmp	r3, #0
 8005108:	d109      	bne.n	800511e <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 800510a:	2301      	movs	r3, #1
 800510c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800510e:	e006      	b.n	800511e <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8005110:	2301      	movs	r3, #1
 8005112:	73fb      	strb	r3, [r7, #15]
      break;
 8005114:	e004      	b.n	8005120 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8005116:	bf00      	nop
 8005118:	e002      	b.n	8005120 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800511a:	bf00      	nop
 800511c:	e000      	b.n	8005120 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800511e:	bf00      	nop
    }

    if(status == HAL_OK)
 8005120:	7bfb      	ldrb	r3, [r7, #15]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d108      	bne.n	8005138 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8005126:	4b4c      	ldr	r3, [pc, #304]	; (8005258 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005128:	68db      	ldr	r3, [r3, #12]
 800512a:	f023 0203 	bic.w	r2, r3, #3
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	4949      	ldr	r1, [pc, #292]	; (8005258 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005134:	4313      	orrs	r3, r2
 8005136:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8005138:	7bfb      	ldrb	r3, [r7, #15]
 800513a:	2b00      	cmp	r3, #0
 800513c:	f040 8086 	bne.w	800524c <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005140:	4b45      	ldr	r3, [pc, #276]	; (8005258 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4a44      	ldr	r2, [pc, #272]	; (8005258 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005146:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800514a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800514c:	f7fc f882 	bl	8001254 <HAL_GetTick>
 8005150:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005152:	e009      	b.n	8005168 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005154:	f7fc f87e 	bl	8001254 <HAL_GetTick>
 8005158:	4602      	mov	r2, r0
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	1ad3      	subs	r3, r2, r3
 800515e:	2b02      	cmp	r3, #2
 8005160:	d902      	bls.n	8005168 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8005162:	2303      	movs	r3, #3
 8005164:	73fb      	strb	r3, [r7, #15]
        break;
 8005166:	e005      	b.n	8005174 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005168:	4b3b      	ldr	r3, [pc, #236]	; (8005258 <RCCEx_PLLSAI2_Config+0x1d8>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005170:	2b00      	cmp	r3, #0
 8005172:	d1ef      	bne.n	8005154 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8005174:	7bfb      	ldrb	r3, [r7, #15]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d168      	bne.n	800524c <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d113      	bne.n	80051a8 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005180:	4b35      	ldr	r3, [pc, #212]	; (8005258 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005182:	695a      	ldr	r2, [r3, #20]
 8005184:	4b35      	ldr	r3, [pc, #212]	; (800525c <RCCEx_PLLSAI2_Config+0x1dc>)
 8005186:	4013      	ands	r3, r2
 8005188:	687a      	ldr	r2, [r7, #4]
 800518a:	6892      	ldr	r2, [r2, #8]
 800518c:	0211      	lsls	r1, r2, #8
 800518e:	687a      	ldr	r2, [r7, #4]
 8005190:	68d2      	ldr	r2, [r2, #12]
 8005192:	06d2      	lsls	r2, r2, #27
 8005194:	4311      	orrs	r1, r2
 8005196:	687a      	ldr	r2, [r7, #4]
 8005198:	6852      	ldr	r2, [r2, #4]
 800519a:	3a01      	subs	r2, #1
 800519c:	0112      	lsls	r2, r2, #4
 800519e:	430a      	orrs	r2, r1
 80051a0:	492d      	ldr	r1, [pc, #180]	; (8005258 <RCCEx_PLLSAI2_Config+0x1d8>)
 80051a2:	4313      	orrs	r3, r2
 80051a4:	614b      	str	r3, [r1, #20]
 80051a6:	e02d      	b.n	8005204 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	2b01      	cmp	r3, #1
 80051ac:	d115      	bne.n	80051da <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80051ae:	4b2a      	ldr	r3, [pc, #168]	; (8005258 <RCCEx_PLLSAI2_Config+0x1d8>)
 80051b0:	695a      	ldr	r2, [r3, #20]
 80051b2:	4b2b      	ldr	r3, [pc, #172]	; (8005260 <RCCEx_PLLSAI2_Config+0x1e0>)
 80051b4:	4013      	ands	r3, r2
 80051b6:	687a      	ldr	r2, [r7, #4]
 80051b8:	6892      	ldr	r2, [r2, #8]
 80051ba:	0211      	lsls	r1, r2, #8
 80051bc:	687a      	ldr	r2, [r7, #4]
 80051be:	6912      	ldr	r2, [r2, #16]
 80051c0:	0852      	lsrs	r2, r2, #1
 80051c2:	3a01      	subs	r2, #1
 80051c4:	0552      	lsls	r2, r2, #21
 80051c6:	4311      	orrs	r1, r2
 80051c8:	687a      	ldr	r2, [r7, #4]
 80051ca:	6852      	ldr	r2, [r2, #4]
 80051cc:	3a01      	subs	r2, #1
 80051ce:	0112      	lsls	r2, r2, #4
 80051d0:	430a      	orrs	r2, r1
 80051d2:	4921      	ldr	r1, [pc, #132]	; (8005258 <RCCEx_PLLSAI2_Config+0x1d8>)
 80051d4:	4313      	orrs	r3, r2
 80051d6:	614b      	str	r3, [r1, #20]
 80051d8:	e014      	b.n	8005204 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80051da:	4b1f      	ldr	r3, [pc, #124]	; (8005258 <RCCEx_PLLSAI2_Config+0x1d8>)
 80051dc:	695a      	ldr	r2, [r3, #20]
 80051de:	4b21      	ldr	r3, [pc, #132]	; (8005264 <RCCEx_PLLSAI2_Config+0x1e4>)
 80051e0:	4013      	ands	r3, r2
 80051e2:	687a      	ldr	r2, [r7, #4]
 80051e4:	6892      	ldr	r2, [r2, #8]
 80051e6:	0211      	lsls	r1, r2, #8
 80051e8:	687a      	ldr	r2, [r7, #4]
 80051ea:	6952      	ldr	r2, [r2, #20]
 80051ec:	0852      	lsrs	r2, r2, #1
 80051ee:	3a01      	subs	r2, #1
 80051f0:	0652      	lsls	r2, r2, #25
 80051f2:	4311      	orrs	r1, r2
 80051f4:	687a      	ldr	r2, [r7, #4]
 80051f6:	6852      	ldr	r2, [r2, #4]
 80051f8:	3a01      	subs	r2, #1
 80051fa:	0112      	lsls	r2, r2, #4
 80051fc:	430a      	orrs	r2, r1
 80051fe:	4916      	ldr	r1, [pc, #88]	; (8005258 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005200:	4313      	orrs	r3, r2
 8005202:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005204:	4b14      	ldr	r3, [pc, #80]	; (8005258 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	4a13      	ldr	r2, [pc, #76]	; (8005258 <RCCEx_PLLSAI2_Config+0x1d8>)
 800520a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800520e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005210:	f7fc f820 	bl	8001254 <HAL_GetTick>
 8005214:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005216:	e009      	b.n	800522c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005218:	f7fc f81c 	bl	8001254 <HAL_GetTick>
 800521c:	4602      	mov	r2, r0
 800521e:	68bb      	ldr	r3, [r7, #8]
 8005220:	1ad3      	subs	r3, r2, r3
 8005222:	2b02      	cmp	r3, #2
 8005224:	d902      	bls.n	800522c <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8005226:	2303      	movs	r3, #3
 8005228:	73fb      	strb	r3, [r7, #15]
          break;
 800522a:	e005      	b.n	8005238 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800522c:	4b0a      	ldr	r3, [pc, #40]	; (8005258 <RCCEx_PLLSAI2_Config+0x1d8>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005234:	2b00      	cmp	r3, #0
 8005236:	d0ef      	beq.n	8005218 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8005238:	7bfb      	ldrb	r3, [r7, #15]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d106      	bne.n	800524c <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800523e:	4b06      	ldr	r3, [pc, #24]	; (8005258 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005240:	695a      	ldr	r2, [r3, #20]
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	699b      	ldr	r3, [r3, #24]
 8005246:	4904      	ldr	r1, [pc, #16]	; (8005258 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005248:	4313      	orrs	r3, r2
 800524a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800524c:	7bfb      	ldrb	r3, [r7, #15]
}
 800524e:	4618      	mov	r0, r3
 8005250:	3710      	adds	r7, #16
 8005252:	46bd      	mov	sp, r7
 8005254:	bd80      	pop	{r7, pc}
 8005256:	bf00      	nop
 8005258:	40021000 	.word	0x40021000
 800525c:	07ff800f 	.word	0x07ff800f
 8005260:	ff9f800f 	.word	0xff9f800f
 8005264:	f9ff800f 	.word	0xf9ff800f

08005268 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 8005268:	b480      	push	{r7}
 800526a:	b089      	sub	sp, #36	; 0x24
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
 8005270:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 8005272:	2300      	movs	r3, #0
 8005274:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 8005276:	2300      	movs	r3, #0
 8005278:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 800527a:	2300      	movs	r3, #0
 800527c:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005284:	d10b      	bne.n	800529e <RCCEx_GetSAIxPeriphCLKFreq+0x36>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8005286:	4b7e      	ldr	r3, [pc, #504]	; (8005480 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005288:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800528c:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8005290:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 8005292:	69bb      	ldr	r3, [r7, #24]
 8005294:	2b60      	cmp	r3, #96	; 0x60
 8005296:	d112      	bne.n	80052be <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8005298:	4b7a      	ldr	r3, [pc, #488]	; (8005484 <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 800529a:	61fb      	str	r3, [r7, #28]
 800529c:	e00f      	b.n	80052be <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052a4:	d10b      	bne.n	80052be <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 80052a6:	4b76      	ldr	r3, [pc, #472]	; (8005480 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80052a8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80052ac:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80052b0:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 80052b2:	69bb      	ldr	r3, [r7, #24]
 80052b4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80052b8:	d101      	bne.n	80052be <RCCEx_GetSAIxPeriphCLKFreq+0x56>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 80052ba:	4b72      	ldr	r3, [pc, #456]	; (8005484 <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 80052bc:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 80052be:	69fb      	ldr	r3, [r7, #28]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	f040 80d6 	bne.w	8005472 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
  {
    pllvco = InputFrequency;
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 80052ca:	69bb      	ldr	r3, [r7, #24]
 80052cc:	2b40      	cmp	r3, #64	; 0x40
 80052ce:	d003      	beq.n	80052d8 <RCCEx_GetSAIxPeriphCLKFreq+0x70>
 80052d0:	69bb      	ldr	r3, [r7, #24]
 80052d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80052d6:	d13b      	bne.n	8005350 <RCCEx_GetSAIxPeriphCLKFreq+0xe8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 80052d8:	4b69      	ldr	r3, [pc, #420]	; (8005480 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052e0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80052e4:	f040 80c4 	bne.w	8005470 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
 80052e8:	4b65      	ldr	r3, [pc, #404]	; (8005480 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80052ea:	68db      	ldr	r3, [r3, #12]
 80052ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	f000 80bd 	beq.w	8005470 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80052f6:	4b62      	ldr	r3, [pc, #392]	; (8005480 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80052f8:	68db      	ldr	r3, [r3, #12]
 80052fa:	091b      	lsrs	r3, r3, #4
 80052fc:	f003 030f 	and.w	r3, r3, #15
 8005300:	3301      	adds	r3, #1
 8005302:	693a      	ldr	r2, [r7, #16]
 8005304:	fbb2 f3f3 	udiv	r3, r2, r3
 8005308:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800530a:	4b5d      	ldr	r3, [pc, #372]	; (8005480 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800530c:	68db      	ldr	r3, [r3, #12]
 800530e:	0a1b      	lsrs	r3, r3, #8
 8005310:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005314:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 8005316:	4b5a      	ldr	r3, [pc, #360]	; (8005480 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005318:	68db      	ldr	r3, [r3, #12]
 800531a:	0edb      	lsrs	r3, r3, #27
 800531c:	f003 031f 	and.w	r3, r3, #31
 8005320:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8005322:	697b      	ldr	r3, [r7, #20]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d10a      	bne.n	800533e <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8005328:	4b55      	ldr	r3, [pc, #340]	; (8005480 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800532a:	68db      	ldr	r3, [r3, #12]
 800532c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005330:	2b00      	cmp	r3, #0
 8005332:	d002      	beq.n	800533a <RCCEx_GetSAIxPeriphCLKFreq+0xd2>
          {
            pllp = 17U;
 8005334:	2311      	movs	r3, #17
 8005336:	617b      	str	r3, [r7, #20]
 8005338:	e001      	b.n	800533e <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
          }
          else
          {
            pllp = 7U;
 800533a:	2307      	movs	r3, #7
 800533c:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800533e:	693b      	ldr	r3, [r7, #16]
 8005340:	68fa      	ldr	r2, [r7, #12]
 8005342:	fb03 f202 	mul.w	r2, r3, r2
 8005346:	697b      	ldr	r3, [r7, #20]
 8005348:	fbb2 f3f3 	udiv	r3, r2, r3
 800534c:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800534e:	e08f      	b.n	8005470 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 8005350:	69bb      	ldr	r3, [r7, #24]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d13a      	bne.n	80053cc <RCCEx_GetSAIxPeriphCLKFreq+0x164>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 8005356:	4b4a      	ldr	r3, [pc, #296]	; (8005480 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800535e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005362:	f040 8086 	bne.w	8005472 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 8005366:	4b46      	ldr	r3, [pc, #280]	; (8005480 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005368:	691b      	ldr	r3, [r3, #16]
 800536a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800536e:	2b00      	cmp	r3, #0
 8005370:	d07f      	beq.n	8005472 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8005372:	4b43      	ldr	r3, [pc, #268]	; (8005480 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005374:	691b      	ldr	r3, [r3, #16]
 8005376:	091b      	lsrs	r3, r3, #4
 8005378:	f003 030f 	and.w	r3, r3, #15
 800537c:	3301      	adds	r3, #1
 800537e:	693a      	ldr	r2, [r7, #16]
 8005380:	fbb2 f3f3 	udiv	r3, r2, r3
 8005384:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8005386:	4b3e      	ldr	r3, [pc, #248]	; (8005480 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005388:	691b      	ldr	r3, [r3, #16]
 800538a:	0a1b      	lsrs	r3, r3, #8
 800538c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005390:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 8005392:	4b3b      	ldr	r3, [pc, #236]	; (8005480 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005394:	691b      	ldr	r3, [r3, #16]
 8005396:	0edb      	lsrs	r3, r3, #27
 8005398:	f003 031f 	and.w	r3, r3, #31
 800539c:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 800539e:	697b      	ldr	r3, [r7, #20]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d10a      	bne.n	80053ba <RCCEx_GetSAIxPeriphCLKFreq+0x152>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 80053a4:	4b36      	ldr	r3, [pc, #216]	; (8005480 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80053a6:	691b      	ldr	r3, [r3, #16]
 80053a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d002      	beq.n	80053b6 <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
          {
            pllp = 17U;
 80053b0:	2311      	movs	r3, #17
 80053b2:	617b      	str	r3, [r7, #20]
 80053b4:	e001      	b.n	80053ba <RCCEx_GetSAIxPeriphCLKFreq+0x152>
          }
          else
          {
            pllp = 7U;
 80053b6:	2307      	movs	r3, #7
 80053b8:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 80053ba:	693b      	ldr	r3, [r7, #16]
 80053bc:	68fa      	ldr	r2, [r7, #12]
 80053be:	fb03 f202 	mul.w	r2, r3, r2
 80053c2:	697b      	ldr	r3, [r7, #20]
 80053c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80053c8:	61fb      	str	r3, [r7, #28]
 80053ca:	e052      	b.n	8005472 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      }
    }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    else if((srcclk == RCC_SAI1CLKSOURCE_HSI) || (srcclk == RCC_SAI2CLKSOURCE_HSI))
 80053cc:	69bb      	ldr	r3, [r7, #24]
 80053ce:	2b80      	cmp	r3, #128	; 0x80
 80053d0:	d003      	beq.n	80053da <RCCEx_GetSAIxPeriphCLKFreq+0x172>
 80053d2:	69bb      	ldr	r3, [r7, #24]
 80053d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053d8:	d109      	bne.n	80053ee <RCCEx_GetSAIxPeriphCLKFreq+0x186>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80053da:	4b29      	ldr	r3, [pc, #164]	; (8005480 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053e6:	d144      	bne.n	8005472 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
        frequency = HSI_VALUE;
 80053e8:	4b27      	ldr	r3, [pc, #156]	; (8005488 <RCCEx_GetSAIxPeriphCLKFreq+0x220>)
 80053ea:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80053ec:	e041      	b.n	8005472 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 80053ee:	69bb      	ldr	r3, [r7, #24]
 80053f0:	2b20      	cmp	r3, #32
 80053f2:	d003      	beq.n	80053fc <RCCEx_GetSAIxPeriphCLKFreq+0x194>
 80053f4:	69bb      	ldr	r3, [r7, #24]
 80053f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053fa:	d13a      	bne.n	8005472 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 80053fc:	4b20      	ldr	r3, [pc, #128]	; (8005480 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005404:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005408:	d133      	bne.n	8005472 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 800540a:	4b1d      	ldr	r3, [pc, #116]	; (8005480 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800540c:	695b      	ldr	r3, [r3, #20]
 800540e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005412:	2b00      	cmp	r3, #0
 8005414:	d02d      	beq.n	8005472 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
 8005416:	4b1a      	ldr	r3, [pc, #104]	; (8005480 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005418:	695b      	ldr	r3, [r3, #20]
 800541a:	091b      	lsrs	r3, r3, #4
 800541c:	f003 030f 	and.w	r3, r3, #15
 8005420:	3301      	adds	r3, #1
 8005422:	693a      	ldr	r2, [r7, #16]
 8005424:	fbb2 f3f3 	udiv	r3, r2, r3
 8005428:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 800542a:	4b15      	ldr	r3, [pc, #84]	; (8005480 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800542c:	695b      	ldr	r3, [r3, #20]
 800542e:	0a1b      	lsrs	r3, r3, #8
 8005430:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005434:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
 8005436:	4b12      	ldr	r3, [pc, #72]	; (8005480 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005438:	695b      	ldr	r3, [r3, #20]
 800543a:	0edb      	lsrs	r3, r3, #27
 800543c:	f003 031f 	and.w	r3, r3, #31
 8005440:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8005442:	697b      	ldr	r3, [r7, #20]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d10a      	bne.n	800545e <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 8005448:	4b0d      	ldr	r3, [pc, #52]	; (8005480 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800544a:	695b      	ldr	r3, [r3, #20]
 800544c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005450:	2b00      	cmp	r3, #0
 8005452:	d002      	beq.n	800545a <RCCEx_GetSAIxPeriphCLKFreq+0x1f2>
          {
            pllp = 17U;
 8005454:	2311      	movs	r3, #17
 8005456:	617b      	str	r3, [r7, #20]
 8005458:	e001      	b.n	800545e <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
          }
          else
          {
            pllp = 7U;
 800545a:	2307      	movs	r3, #7
 800545c:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800545e:	693b      	ldr	r3, [r7, #16]
 8005460:	68fa      	ldr	r2, [r7, #12]
 8005462:	fb03 f202 	mul.w	r2, r3, r2
 8005466:	697b      	ldr	r3, [r7, #20]
 8005468:	fbb2 f3f3 	udiv	r3, r2, r3
 800546c:	61fb      	str	r3, [r7, #28]
 800546e:	e000      	b.n	8005472 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8005470:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 8005472:	69fb      	ldr	r3, [r7, #28]
}
 8005474:	4618      	mov	r0, r3
 8005476:	3724      	adds	r7, #36	; 0x24
 8005478:	46bd      	mov	sp, r7
 800547a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547e:	4770      	bx	lr
 8005480:	40021000 	.word	0x40021000
 8005484:	001fff68 	.word	0x001fff68
 8005488:	00f42400 	.word	0x00f42400

0800548c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b08a      	sub	sp, #40	; 0x28
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;
#endif

  /* Check the SD handle allocation */
  if(hsd == NULL)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d101      	bne.n	800549e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800549a:	2301      	movs	r3, #1
 800549c:	e078      	b.n	8005590 <HAL_SD_Init+0x104>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80054a4:	b2db      	uxtb	r3, r3
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d105      	bne.n	80054b6 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2200      	movs	r2, #0
 80054ae:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80054b0:	6878      	ldr	r0, [r7, #4]
 80054b2:	f7fb fc93 	bl	8000ddc <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2203      	movs	r2, #3
 80054ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80054be:	6878      	ldr	r0, [r7, #4]
 80054c0:	f000 f86a 	bl	8005598 <HAL_SD_InitCard>
 80054c4:	4603      	mov	r3, r0
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d001      	beq.n	80054ce <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80054ca:	2301      	movs	r3, #1
 80054cc:	e060      	b.n	8005590 <HAL_SD_Init+0x104>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 80054ce:	f107 0308 	add.w	r3, r7, #8
 80054d2:	4619      	mov	r1, r3
 80054d4:	6878      	ldr	r0, [r7, #4]
 80054d6:	f000 faa5 	bl	8005a24 <HAL_SD_GetCardStatus>
 80054da:	4603      	mov	r3, r0
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d001      	beq.n	80054e4 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 80054e0:	2301      	movs	r3, #1
 80054e2:	e055      	b.n	8005590 <HAL_SD_Init+0x104>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 80054e4:	7e3b      	ldrb	r3, [r7, #24]
 80054e6:	b2db      	uxtb	r3, r3
 80054e8:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 80054ea:	7e7b      	ldrb	r3, [r7, #25]
 80054ec:	b2db      	uxtb	r3, r3
 80054ee:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054f4:	2b01      	cmp	r3, #1
 80054f6:	d10a      	bne.n	800550e <HAL_SD_Init+0x82>
 80054f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d102      	bne.n	8005504 <HAL_SD_Init+0x78>
 80054fe:	6a3b      	ldr	r3, [r7, #32]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d004      	beq.n	800550e <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	f44f 7200 	mov.w	r2, #512	; 0x200
 800550a:	65da      	str	r2, [r3, #92]	; 0x5c
 800550c:	e00b      	b.n	8005526 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005512:	2b01      	cmp	r3, #1
 8005514:	d104      	bne.n	8005520 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	f44f 7280 	mov.w	r2, #256	; 0x100
 800551c:	65da      	str	r2, [r3, #92]	; 0x5c
 800551e:	e002      	b.n	8005526 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2200      	movs	r2, #0
 8005524:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }
  /* Configure the bus wide */
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	68db      	ldr	r3, [r3, #12]
 800552a:	4619      	mov	r1, r3
 800552c:	6878      	ldr	r0, [r7, #4]
 800552e:	f000 fb2f 	bl	8005b90 <HAL_SD_ConfigWideBusOperation>
 8005532:	4603      	mov	r3, r0
 8005534:	2b00      	cmp	r3, #0
 8005536:	d001      	beq.n	800553c <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 8005538:	2301      	movs	r3, #1
 800553a:	e029      	b.n	8005590 <HAL_SD_Init+0x104>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800553c:	f7fb fe8a 	bl	8001254 <HAL_GetTick>
 8005540:	61f8      	str	r0, [r7, #28]
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8005542:	e014      	b.n	800556e <HAL_SD_Init+0xe2>
  {
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
 8005544:	f7fb fe86 	bl	8001254 <HAL_GetTick>
 8005548:	4602      	mov	r2, r0
 800554a:	69fb      	ldr	r3, [r7, #28]
 800554c:	1ad3      	subs	r3, r2, r3
 800554e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005552:	d10c      	bne.n	800556e <HAL_SD_Init+0xe2>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800555a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2201      	movs	r2, #1
 8005560:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2200      	movs	r2, #0
 8005568:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 800556a:	2303      	movs	r3, #3
 800556c:	e010      	b.n	8005590 <HAL_SD_Init+0x104>
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800556e:	6878      	ldr	r0, [r7, #4]
 8005570:	f000 fc22 	bl	8005db8 <HAL_SD_GetCardState>
 8005574:	4603      	mov	r3, r0
 8005576:	2b04      	cmp	r3, #4
 8005578:	d1e4      	bne.n	8005544 <HAL_SD_Init+0xb8>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2200      	movs	r2, #0
 800557e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2200      	movs	r2, #0
 8005584:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2201      	movs	r2, #1
 800558a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800558e:	2300      	movs	r3, #0
}
 8005590:	4618      	mov	r0, r3
 8005592:	3728      	adds	r7, #40	; 0x28
 8005594:	46bd      	mov	sp, r7
 8005596:	bd80      	pop	{r7, pc}

08005598 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005598:	b5b0      	push	{r4, r5, r7, lr}
 800559a:	b08e      	sub	sp, #56	; 0x38
 800559c:	af04      	add	r7, sp, #16
 800559e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80055a0:	2300      	movs	r3, #0
 80055a2:	60bb      	str	r3, [r7, #8]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80055a4:	2300      	movs	r3, #0
 80055a6:	60fb      	str	r3, [r7, #12]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80055a8:	2300      	movs	r3, #0
 80055aa:	613b      	str	r3, [r7, #16]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80055ac:	2300      	movs	r3, #0
 80055ae:	617b      	str	r3, [r7, #20]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 80055b0:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80055b4:	f7fe fd50 	bl	8004058 <HAL_RCCEx_GetPeriphCLKFreq>
 80055b8:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 80055ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d109      	bne.n	80055d4 <HAL_SD_InitCard+0x3c>
  {
      hsd->State = HAL_SD_STATE_READY;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2201      	movs	r2, #1
 80055c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80055ce:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80055d0:	2301      	movs	r3, #1
 80055d2:	e079      	b.n	80056c8 <HAL_SD_InitCard+0x130>
  }
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockDiv = ((sdmmc_clk / SD_INIT_FREQ) - 2U);
#else
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 80055d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d6:	0a1b      	lsrs	r3, r3, #8
 80055d8:	4a3d      	ldr	r2, [pc, #244]	; (80056d0 <HAL_SD_InitCard+0x138>)
 80055da:	fba2 2303 	umull	r2, r3, r2, r3
 80055de:	091b      	lsrs	r3, r3, #4
 80055e0:	61bb      	str	r3, [r7, #24]
#endif

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  Init.Transceiver = hsd->Init.Transceiver;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	699b      	ldr	r3, [r3, #24]
 80055e6:	61fb      	str	r3, [r7, #28]
  if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	699b      	ldr	r3, [r3, #24]
 80055ec:	2b01      	cmp	r3, #1
 80055ee:	d107      	bne.n	8005600 <HAL_SD_InitCard+0x68>
  {
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	681a      	ldr	r2, [r3, #0]
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f042 0210 	orr.w	r2, r2, #16
 80055fe:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681d      	ldr	r5, [r3, #0]
 8005604:	466c      	mov	r4, sp
 8005606:	f107 0314 	add.w	r3, r7, #20
 800560a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800560e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005612:	f107 0308 	add.w	r3, r7, #8
 8005616:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005618:	4628      	mov	r0, r5
 800561a:	f001 fa33 	bl	8006a84 <SDMMC_Init>
  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	4618      	mov	r0, r3
 8005624:	f001 fa65 	bl	8006af2 <SDMMC_PowerState_ON>
  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  sdmmc_clk = sdmmc_clk/(Init.ClockDiv + 2U);
#else
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
 8005628:	69bb      	ldr	r3, [r7, #24]
 800562a:	005b      	lsls	r3, r3, #1
 800562c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800562e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005632:	627b      	str	r3, [r7, #36]	; 0x24
#endif
  HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 8005634:	4a27      	ldr	r2, [pc, #156]	; (80056d4 <HAL_SD_InitCard+0x13c>)
 8005636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005638:	fbb2 f3f3 	udiv	r3, r2, r3
 800563c:	3301      	adds	r3, #1
 800563e:	4618      	mov	r0, r3
 8005640:	f7fb fe14 	bl	800126c <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8005644:	6878      	ldr	r0, [r7, #4]
 8005646:	f000 fc97 	bl	8005f78 <SD_PowerON>
 800564a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800564c:	6a3b      	ldr	r3, [r7, #32]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d00b      	beq.n	800566a <HAL_SD_InitCard+0xd2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2201      	movs	r2, #1
 8005656:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800565e:	6a3b      	ldr	r3, [r7, #32]
 8005660:	431a      	orrs	r2, r3
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005666:	2301      	movs	r3, #1
 8005668:	e02e      	b.n	80056c8 <HAL_SD_InitCard+0x130>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800566a:	6878      	ldr	r0, [r7, #4]
 800566c:	f000 fbc4 	bl	8005df8 <SD_InitCard>
 8005670:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005672:	6a3b      	ldr	r3, [r7, #32]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d00b      	beq.n	8005690 <HAL_SD_InitCard+0xf8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2201      	movs	r2, #1
 800567c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005684:	6a3b      	ldr	r3, [r7, #32]
 8005686:	431a      	orrs	r2, r3
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800568c:	2301      	movs	r3, #1
 800568e:	e01b      	b.n	80056c8 <HAL_SD_InitCard+0x130>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005698:	4618      	mov	r0, r3
 800569a:	f001 fac1 	bl	8006c20 <SDMMC_CmdBlockLength>
 800569e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80056a0:	6a3b      	ldr	r3, [r7, #32]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d00f      	beq.n	80056c6 <HAL_SD_InitCard+0x12e>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4a0b      	ldr	r2, [pc, #44]	; (80056d8 <HAL_SD_InitCard+0x140>)
 80056ac:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80056b2:	6a3b      	ldr	r3, [r7, #32]
 80056b4:	431a      	orrs	r2, r3
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2201      	movs	r2, #1
 80056be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80056c2:	2301      	movs	r3, #1
 80056c4:	e000      	b.n	80056c8 <HAL_SD_InitCard+0x130>
  }

  return HAL_OK;
 80056c6:	2300      	movs	r3, #0
}
 80056c8:	4618      	mov	r0, r3
 80056ca:	3728      	adds	r7, #40	; 0x28
 80056cc:	46bd      	mov	sp, r7
 80056ce:	bdb0      	pop	{r4, r5, r7, pc}
 80056d0:	014f8b59 	.word	0x014f8b59
 80056d4:	00012110 	.word	0x00012110
 80056d8:	1fe00fff 	.word	0x1fe00fff

080056dc <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80056dc:	b480      	push	{r7}
 80056de:	b083      	sub	sp, #12
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
 80056e4:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056ea:	0f9b      	lsrs	r3, r3, #30
 80056ec:	b2da      	uxtb	r2, r3
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056f6:	0e9b      	lsrs	r3, r3, #26
 80056f8:	b2db      	uxtb	r3, r3
 80056fa:	f003 030f 	and.w	r3, r3, #15
 80056fe:	b2da      	uxtb	r2, r3
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005708:	0e1b      	lsrs	r3, r3, #24
 800570a:	b2db      	uxtb	r3, r3
 800570c:	f003 0303 	and.w	r3, r3, #3
 8005710:	b2da      	uxtb	r2, r3
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800571a:	0c1b      	lsrs	r3, r3, #16
 800571c:	b2da      	uxtb	r2, r3
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005726:	0a1b      	lsrs	r3, r3, #8
 8005728:	b2da      	uxtb	r2, r3
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005732:	b2da      	uxtb	r2, r3
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800573c:	0d1b      	lsrs	r3, r3, #20
 800573e:	b29a      	uxth	r2, r3
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005748:	0c1b      	lsrs	r3, r3, #16
 800574a:	b2db      	uxtb	r3, r3
 800574c:	f003 030f 	and.w	r3, r3, #15
 8005750:	b2da      	uxtb	r2, r3
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800575a:	0bdb      	lsrs	r3, r3, #15
 800575c:	b2db      	uxtb	r3, r3
 800575e:	f003 0301 	and.w	r3, r3, #1
 8005762:	b2da      	uxtb	r2, r3
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800576c:	0b9b      	lsrs	r3, r3, #14
 800576e:	b2db      	uxtb	r3, r3
 8005770:	f003 0301 	and.w	r3, r3, #1
 8005774:	b2da      	uxtb	r2, r3
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800577e:	0b5b      	lsrs	r3, r3, #13
 8005780:	b2db      	uxtb	r3, r3
 8005782:	f003 0301 	and.w	r3, r3, #1
 8005786:	b2da      	uxtb	r2, r3
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005790:	0b1b      	lsrs	r3, r3, #12
 8005792:	b2db      	uxtb	r3, r3
 8005794:	f003 0301 	and.w	r3, r3, #1
 8005798:	b2da      	uxtb	r2, r3
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	2200      	movs	r2, #0
 80057a2:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d163      	bne.n	8005874 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80057b0:	009a      	lsls	r2, r3, #2
 80057b2:	f640 73fc 	movw	r3, #4092	; 0xffc
 80057b6:	4013      	ands	r3, r2
 80057b8:	687a      	ldr	r2, [r7, #4]
 80057ba:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80057bc:	0f92      	lsrs	r2, r2, #30
 80057be:	431a      	orrs	r2, r3
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80057c8:	0edb      	lsrs	r3, r3, #27
 80057ca:	b2db      	uxtb	r3, r3
 80057cc:	f003 0307 	and.w	r3, r3, #7
 80057d0:	b2da      	uxtb	r2, r3
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80057da:	0e1b      	lsrs	r3, r3, #24
 80057dc:	b2db      	uxtb	r3, r3
 80057de:	f003 0307 	and.w	r3, r3, #7
 80057e2:	b2da      	uxtb	r2, r3
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80057ec:	0d5b      	lsrs	r3, r3, #21
 80057ee:	b2db      	uxtb	r3, r3
 80057f0:	f003 0307 	and.w	r3, r3, #7
 80057f4:	b2da      	uxtb	r2, r3
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80057fe:	0c9b      	lsrs	r3, r3, #18
 8005800:	b2db      	uxtb	r3, r3
 8005802:	f003 0307 	and.w	r3, r3, #7
 8005806:	b2da      	uxtb	r2, r3
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005810:	0bdb      	lsrs	r3, r3, #15
 8005812:	b2db      	uxtb	r3, r3
 8005814:	f003 0307 	and.w	r3, r3, #7
 8005818:	b2da      	uxtb	r2, r3
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	691b      	ldr	r3, [r3, #16]
 8005822:	1c5a      	adds	r2, r3, #1
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	7e1b      	ldrb	r3, [r3, #24]
 800582c:	b2db      	uxtb	r3, r3
 800582e:	f003 0307 	and.w	r3, r3, #7
 8005832:	3302      	adds	r3, #2
 8005834:	2201      	movs	r2, #1
 8005836:	fa02 f303 	lsl.w	r3, r2, r3
 800583a:	687a      	ldr	r2, [r7, #4]
 800583c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800583e:	fb03 f202 	mul.w	r2, r3, r2
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	7a1b      	ldrb	r3, [r3, #8]
 800584a:	b2db      	uxtb	r3, r3
 800584c:	f003 030f 	and.w	r3, r3, #15
 8005850:	2201      	movs	r2, #1
 8005852:	409a      	lsls	r2, r3
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	651a      	str	r2, [r3, #80]	; 0x50

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800585c:	687a      	ldr	r2, [r7, #4]
 800585e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005860:	0a52      	lsrs	r2, r2, #9
 8005862:	fb03 f202 	mul.w	r2, r3, r2
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockSize = 512U;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005870:	659a      	str	r2, [r3, #88]	; 0x58
 8005872:	e031      	b.n	80058d8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005878:	2b01      	cmp	r3, #1
 800587a:	d11d      	bne.n	80058b8 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005880:	041b      	lsls	r3, r3, #16
 8005882:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800588a:	0c1b      	lsrs	r3, r3, #16
 800588c:	431a      	orrs	r2, r3
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	691b      	ldr	r3, [r3, #16]
 8005896:	3301      	adds	r3, #1
 8005898:	029a      	lsls	r2, r3, #10
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 512U;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80058ac:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	659a      	str	r2, [r3, #88]	; 0x58
 80058b6:	e00f      	b.n	80058d8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4a58      	ldr	r2, [pc, #352]	; (8005a20 <HAL_SD_GetCardCSD+0x344>)
 80058be:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058c4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2201      	movs	r2, #1
 80058d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80058d4:	2301      	movs	r3, #1
 80058d6:	e09d      	b.n	8005a14 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80058dc:	0b9b      	lsrs	r3, r3, #14
 80058de:	b2db      	uxtb	r3, r3
 80058e0:	f003 0301 	and.w	r3, r3, #1
 80058e4:	b2da      	uxtb	r2, r3
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80058ee:	09db      	lsrs	r3, r3, #7
 80058f0:	b2db      	uxtb	r3, r3
 80058f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80058f6:	b2da      	uxtb	r2, r3
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005900:	b2db      	uxtb	r3, r3
 8005902:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005906:	b2da      	uxtb	r2, r3
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005910:	0fdb      	lsrs	r3, r3, #31
 8005912:	b2da      	uxtb	r2, r3
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800591c:	0f5b      	lsrs	r3, r3, #29
 800591e:	b2db      	uxtb	r3, r3
 8005920:	f003 0303 	and.w	r3, r3, #3
 8005924:	b2da      	uxtb	r2, r3
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800592e:	0e9b      	lsrs	r3, r3, #26
 8005930:	b2db      	uxtb	r3, r3
 8005932:	f003 0307 	and.w	r3, r3, #7
 8005936:	b2da      	uxtb	r2, r3
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005940:	0d9b      	lsrs	r3, r3, #22
 8005942:	b2db      	uxtb	r3, r3
 8005944:	f003 030f 	and.w	r3, r3, #15
 8005948:	b2da      	uxtb	r2, r3
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005952:	0d5b      	lsrs	r3, r3, #21
 8005954:	b2db      	uxtb	r3, r3
 8005956:	f003 0301 	and.w	r3, r3, #1
 800595a:	b2da      	uxtb	r2, r3
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	2200      	movs	r2, #0
 8005966:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800596e:	0c1b      	lsrs	r3, r3, #16
 8005970:	b2db      	uxtb	r3, r3
 8005972:	f003 0301 	and.w	r3, r3, #1
 8005976:	b2da      	uxtb	r2, r3
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005982:	0bdb      	lsrs	r3, r3, #15
 8005984:	b2db      	uxtb	r3, r3
 8005986:	f003 0301 	and.w	r3, r3, #1
 800598a:	b2da      	uxtb	r2, r3
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005996:	0b9b      	lsrs	r3, r3, #14
 8005998:	b2db      	uxtb	r3, r3
 800599a:	f003 0301 	and.w	r3, r3, #1
 800599e:	b2da      	uxtb	r2, r3
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80059aa:	0b5b      	lsrs	r3, r3, #13
 80059ac:	b2db      	uxtb	r3, r3
 80059ae:	f003 0301 	and.w	r3, r3, #1
 80059b2:	b2da      	uxtb	r2, r3
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80059be:	0b1b      	lsrs	r3, r3, #12
 80059c0:	b2db      	uxtb	r3, r3
 80059c2:	f003 0301 	and.w	r3, r3, #1
 80059c6:	b2da      	uxtb	r2, r3
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80059d2:	0a9b      	lsrs	r3, r3, #10
 80059d4:	b2db      	uxtb	r3, r3
 80059d6:	f003 0303 	and.w	r3, r3, #3
 80059da:	b2da      	uxtb	r2, r3
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80059e6:	0a1b      	lsrs	r3, r3, #8
 80059e8:	b2db      	uxtb	r3, r3
 80059ea:	f003 0303 	and.w	r3, r3, #3
 80059ee:	b2da      	uxtb	r2, r3
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80059fa:	085b      	lsrs	r3, r3, #1
 80059fc:	b2db      	uxtb	r3, r3
 80059fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a02:	b2da      	uxtb	r2, r3
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	2201      	movs	r2, #1
 8005a0e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8005a12:	2300      	movs	r3, #0
}
 8005a14:	4618      	mov	r0, r3
 8005a16:	370c      	adds	r7, #12
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1e:	4770      	bx	lr
 8005a20:	1fe00fff 	.word	0x1fe00fff

08005a24 <HAL_SD_GetCardStatus>:
  * @param  pStatus Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b094      	sub	sp, #80	; 0x50
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
 8005a2c:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8005a2e:	2300      	movs	r3, #0
 8005a30:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  errorstate = SD_SendSDStatus(hsd, sd_status);
 8005a34:	f107 0308 	add.w	r3, r7, #8
 8005a38:	4619      	mov	r1, r3
 8005a3a:	6878      	ldr	r0, [r7, #4]
 8005a3c:	f000 fba8 	bl	8006190 <SD_SendSDStatus>
 8005a40:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 8005a42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d011      	beq.n	8005a6c <HAL_SD_GetCardStatus+0x48>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	4a4f      	ldr	r2, [pc, #316]	; (8005b8c <HAL_SD_GetCardStatus+0x168>)
 8005a4e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a56:	431a      	orrs	r2, r3
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2201      	movs	r2, #1
 8005a60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8005a64:	2301      	movs	r3, #1
 8005a66:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8005a6a:	e070      	b.n	8005b4e <HAL_SD_GetCardStatus+0x12a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8005a6c:	68bb      	ldr	r3, [r7, #8]
 8005a6e:	099b      	lsrs	r3, r3, #6
 8005a70:	b2db      	uxtb	r3, r3
 8005a72:	f003 0303 	and.w	r3, r3, #3
 8005a76:	b2da      	uxtb	r2, r3
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8005a7c:	68bb      	ldr	r3, [r7, #8]
 8005a7e:	095b      	lsrs	r3, r3, #5
 8005a80:	b2db      	uxtb	r3, r3
 8005a82:	f003 0301 	and.w	r3, r3, #1
 8005a86:	b2da      	uxtb	r2, r3
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8005a8c:	68bb      	ldr	r3, [r7, #8]
 8005a8e:	0a1b      	lsrs	r3, r3, #8
 8005a90:	b29b      	uxth	r3, r3
 8005a92:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005a96:	b29a      	uxth	r2, r3
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	0e1b      	lsrs	r3, r3, #24
 8005a9c:	b29b      	uxth	r3, r3
 8005a9e:	4313      	orrs	r3, r2
 8005aa0:	b29a      	uxth	r2, r3
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	061a      	lsls	r2, r3, #24
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	021b      	lsls	r3, r3, #8
 8005aae:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005ab2:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	0a1b      	lsrs	r3, r3, #8
 8005ab8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8005abc:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	0e1b      	lsrs	r3, r3, #24
 8005ac2:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8005ac8:	693b      	ldr	r3, [r7, #16]
 8005aca:	b2da      	uxtb	r2, r3
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8005ad0:	693b      	ldr	r3, [r7, #16]
 8005ad2:	0a1b      	lsrs	r3, r3, #8
 8005ad4:	b2da      	uxtb	r2, r3
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8005ada:	693b      	ldr	r3, [r7, #16]
 8005adc:	0d1b      	lsrs	r3, r3, #20
 8005ade:	b2db      	uxtb	r3, r3
 8005ae0:	f003 030f 	and.w	r3, r3, #15
 8005ae4:	b2da      	uxtb	r2, r3
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8005aea:	693b      	ldr	r3, [r7, #16]
 8005aec:	0c1b      	lsrs	r3, r3, #16
 8005aee:	b29b      	uxth	r3, r3
 8005af0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005af4:	b29a      	uxth	r2, r3
 8005af6:	697b      	ldr	r3, [r7, #20]
 8005af8:	b29b      	uxth	r3, r3
 8005afa:	b2db      	uxtb	r3, r3
 8005afc:	b29b      	uxth	r3, r3
 8005afe:	4313      	orrs	r3, r2
 8005b00:	b29a      	uxth	r2, r3
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8005b06:	697b      	ldr	r3, [r7, #20]
 8005b08:	0a9b      	lsrs	r3, r3, #10
 8005b0a:	b2db      	uxtb	r3, r3
 8005b0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005b10:	b2da      	uxtb	r2, r3
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8005b16:	697b      	ldr	r3, [r7, #20]
 8005b18:	0a1b      	lsrs	r3, r3, #8
 8005b1a:	b2db      	uxtb	r3, r3
 8005b1c:	f003 0303 	and.w	r3, r3, #3
 8005b20:	b2da      	uxtb	r2, r3
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	73da      	strb	r2, [r3, #15]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8005b26:	697b      	ldr	r3, [r7, #20]
 8005b28:	091b      	lsrs	r3, r3, #4
 8005b2a:	b2db      	uxtb	r3, r3
 8005b2c:	f003 030f 	and.w	r3, r3, #15
 8005b30:	b2da      	uxtb	r2, r3
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8005b36:	697b      	ldr	r3, [r7, #20]
 8005b38:	b2db      	uxtb	r3, r3
 8005b3a:	f003 030f 	and.w	r3, r3, #15
 8005b3e:	b2da      	uxtb	r2, r3
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8005b44:	69bb      	ldr	r3, [r7, #24]
 8005b46:	0e1b      	lsrs	r3, r3, #24
 8005b48:	b2da      	uxtb	r2, r3
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	749a      	strb	r2, [r3, #18]
#endif
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005b56:	4618      	mov	r0, r3
 8005b58:	f001 f862 	bl	8006c20 <SDMMC_CmdBlockLength>
 8005b5c:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 8005b5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d00d      	beq.n	8005b80 <HAL_SD_GetCardStatus+0x15c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	4a08      	ldr	r2, [pc, #32]	; (8005b8c <HAL_SD_GetCardStatus+0x168>)
 8005b6a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005b70:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2201      	movs	r2, #1
 8005b76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8005b7a:	2301      	movs	r3, #1
 8005b7c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }

  return status;
 8005b80:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8005b84:	4618      	mov	r0, r3
 8005b86:	3750      	adds	r7, #80	; 0x50
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	bd80      	pop	{r7, pc}
 8005b8c:	1fe00fff 	.word	0x1fe00fff

08005b90 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8005b90:	b5b0      	push	{r4, r5, r7, lr}
 8005b92:	b090      	sub	sp, #64	; 0x40
 8005b94:	af04      	add	r7, sp, #16
 8005b96:	6078      	str	r0, [r7, #4]
 8005b98:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2203      	movs	r2, #3
 8005ba4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bac:	2b03      	cmp	r3, #3
 8005bae:	d02e      	beq.n	8005c0e <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005bb6:	d106      	bne.n	8005bc6 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bbc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	639a      	str	r2, [r3, #56]	; 0x38
 8005bc4:	e029      	b.n	8005c1a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005bcc:	d10a      	bne.n	8005be4 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8005bce:	6878      	ldr	r0, [r7, #4]
 8005bd0:	f000 fbd6 	bl	8006380 <SD_WideBus_Enable>
 8005bd4:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005bda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bdc:	431a      	orrs	r2, r3
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	639a      	str	r2, [r3, #56]	; 0x38
 8005be2:	e01a      	b.n	8005c1a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d10a      	bne.n	8005c00 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8005bea:	6878      	ldr	r0, [r7, #4]
 8005bec:	f000 fc13 	bl	8006416 <SD_WideBus_Disable>
 8005bf0:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bf8:	431a      	orrs	r2, r3
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	639a      	str	r2, [r3, #56]	; 0x38
 8005bfe:	e00c      	b.n	8005c1a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c04:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	639a      	str	r2, [r3, #56]	; 0x38
 8005c0c:	e005      	b.n	8005c1a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c12:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d007      	beq.n	8005c32 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	4a60      	ldr	r2, [pc, #384]	; (8005da8 <HAL_SD_ConfigWideBusOperation+0x218>)
 8005c28:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8005c2a:	2301      	movs	r3, #1
 8005c2c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8005c30:	e097      	b.n	8005d62 <HAL_SD_ConfigWideBusOperation+0x1d2>
  }
  else
  {
    sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 8005c32:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8005c36:	f7fe fa0f 	bl	8004058 <HAL_RCCEx_GetPeriphCLKFreq>
 8005c3a:	6278      	str	r0, [r7, #36]	; 0x24
    if (sdmmc_clk != 0U)
 8005c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	f000 8086 	beq.w	8005d50 <HAL_SD_ConfigWideBusOperation+0x1c0>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	685b      	ldr	r3, [r3, #4]
 8005c48:	60fb      	str	r3, [r7, #12]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
      Init.ClockBypass         = hsd->Init.ClockBypass;
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	689b      	ldr	r3, [r3, #8]
 8005c4e:	613b      	str	r3, [r7, #16]
      Init.BusWide             = WideMode;
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	617b      	str	r3, [r7, #20]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	691b      	ldr	r3, [r3, #16]
 8005c58:	61bb      	str	r3, [r7, #24]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	695a      	ldr	r2, [r3, #20]
 8005c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c60:	4952      	ldr	r1, [pc, #328]	; (8005dac <HAL_SD_ConfigWideBusOperation+0x21c>)
 8005c62:	fba1 1303 	umull	r1, r3, r1, r3
 8005c66:	0e1b      	lsrs	r3, r3, #24
 8005c68:	429a      	cmp	r2, r3
 8005c6a:	d303      	bcc.n	8005c74 <HAL_SD_ConfigWideBusOperation+0xe4>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	695b      	ldr	r3, [r3, #20]
 8005c70:	61fb      	str	r3, [r7, #28]
 8005c72:	e05a      	b.n	8005d2a <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c7c:	d103      	bne.n	8005c86 <HAL_SD_ConfigWideBusOperation+0xf6>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	695b      	ldr	r3, [r3, #20]
 8005c82:	61fb      	str	r3, [r7, #28]
 8005c84:	e051      	b.n	8005d2a <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c8e:	d126      	bne.n	8005cde <HAL_SD_ConfigWideBusOperation+0x14e>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	695b      	ldr	r3, [r3, #20]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d10e      	bne.n	8005cb6 <HAL_SD_ConfigWideBusOperation+0x126>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 8005c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c9a:	4a45      	ldr	r2, [pc, #276]	; (8005db0 <HAL_SD_ConfigWideBusOperation+0x220>)
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d906      	bls.n	8005cae <HAL_SD_ConfigWideBusOperation+0x11e>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8005ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ca2:	4a42      	ldr	r2, [pc, #264]	; (8005dac <HAL_SD_ConfigWideBusOperation+0x21c>)
 8005ca4:	fba2 2303 	umull	r2, r3, r2, r3
 8005ca8:	0e5b      	lsrs	r3, r3, #25
 8005caa:	61fb      	str	r3, [r7, #28]
 8005cac:	e03d      	b.n	8005d2a <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	695b      	ldr	r3, [r3, #20]
 8005cb2:	61fb      	str	r3, [r7, #28]
 8005cb4:	e039      	b.n	8005d2a <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	695b      	ldr	r3, [r3, #20]
 8005cba:	005b      	lsls	r3, r3, #1
 8005cbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cc2:	4a3b      	ldr	r2, [pc, #236]	; (8005db0 <HAL_SD_ConfigWideBusOperation+0x220>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d906      	bls.n	8005cd6 <HAL_SD_ConfigWideBusOperation+0x146>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8005cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cca:	4a38      	ldr	r2, [pc, #224]	; (8005dac <HAL_SD_ConfigWideBusOperation+0x21c>)
 8005ccc:	fba2 2303 	umull	r2, r3, r2, r3
 8005cd0:	0e5b      	lsrs	r3, r3, #25
 8005cd2:	61fb      	str	r3, [r7, #28]
 8005cd4:	e029      	b.n	8005d2a <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	695b      	ldr	r3, [r3, #20]
 8005cda:	61fb      	str	r3, [r7, #28]
 8005cdc:	e025      	b.n	8005d2a <HAL_SD_ConfigWideBusOperation+0x19a>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	695b      	ldr	r3, [r3, #20]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d10e      	bne.n	8005d04 <HAL_SD_ConfigWideBusOperation+0x174>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 8005ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ce8:	4a32      	ldr	r2, [pc, #200]	; (8005db4 <HAL_SD_ConfigWideBusOperation+0x224>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d906      	bls.n	8005cfc <HAL_SD_ConfigWideBusOperation+0x16c>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8005cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf0:	4a2e      	ldr	r2, [pc, #184]	; (8005dac <HAL_SD_ConfigWideBusOperation+0x21c>)
 8005cf2:	fba2 2303 	umull	r2, r3, r2, r3
 8005cf6:	0e1b      	lsrs	r3, r3, #24
 8005cf8:	61fb      	str	r3, [r7, #28]
 8005cfa:	e016      	b.n	8005d2a <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	695b      	ldr	r3, [r3, #20]
 8005d00:	61fb      	str	r3, [r7, #28]
 8005d02:	e012      	b.n	8005d2a <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	695b      	ldr	r3, [r3, #20]
 8005d08:	005b      	lsls	r3, r3, #1
 8005d0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d10:	4a28      	ldr	r2, [pc, #160]	; (8005db4 <HAL_SD_ConfigWideBusOperation+0x224>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d906      	bls.n	8005d24 <HAL_SD_ConfigWideBusOperation+0x194>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8005d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d18:	4a24      	ldr	r2, [pc, #144]	; (8005dac <HAL_SD_ConfigWideBusOperation+0x21c>)
 8005d1a:	fba2 2303 	umull	r2, r3, r2, r3
 8005d1e:	0e1b      	lsrs	r3, r3, #24
 8005d20:	61fb      	str	r3, [r7, #28]
 8005d22:	e002      	b.n	8005d2a <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	695b      	ldr	r3, [r3, #20]
 8005d28:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      Init.Transceiver = hsd->Init.Transceiver;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	699b      	ldr	r3, [r3, #24]
 8005d2e:	623b      	str	r3, [r7, #32]
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
      }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

      (void)SDMMC_Init(hsd->Instance, Init);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681d      	ldr	r5, [r3, #0]
 8005d34:	466c      	mov	r4, sp
 8005d36:	f107 0318 	add.w	r3, r7, #24
 8005d3a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005d3e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005d42:	f107 030c 	add.w	r3, r7, #12
 8005d46:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005d48:	4628      	mov	r0, r5
 8005d4a:	f000 fe9b 	bl	8006a84 <SDMMC_Init>
 8005d4e:	e008      	b.n	8005d62 <HAL_SD_ConfigWideBusOperation+0x1d2>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d54:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	639a      	str	r2, [r3, #56]	; 0x38
      status = HAL_ERROR;
 8005d5c:	2301      	movs	r3, #1
 8005d5e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	f000 ff58 	bl	8006c20 <SDMMC_CmdBlockLength>
 8005d70:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8005d72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d00c      	beq.n	8005d92 <HAL_SD_ConfigWideBusOperation+0x202>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	4a0a      	ldr	r2, [pc, #40]	; (8005da8 <HAL_SD_ConfigWideBusOperation+0x218>)
 8005d7e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d86:	431a      	orrs	r2, r3
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8005d8c:	2301      	movs	r3, #1
 8005d8e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2201      	movs	r2, #1
 8005d96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8005d9a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8005d9e:	4618      	mov	r0, r3
 8005da0:	3730      	adds	r7, #48	; 0x30
 8005da2:	46bd      	mov	sp, r7
 8005da4:	bdb0      	pop	{r4, r5, r7, pc}
 8005da6:	bf00      	nop
 8005da8:	1fe00fff 	.word	0x1fe00fff
 8005dac:	55e63b89 	.word	0x55e63b89
 8005db0:	02faf080 	.word	0x02faf080
 8005db4:	017d7840 	.word	0x017d7840

08005db8 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b086      	sub	sp, #24
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8005dc4:	f107 030c 	add.w	r3, r7, #12
 8005dc8:	4619      	mov	r1, r3
 8005dca:	6878      	ldr	r0, [r7, #4]
 8005dcc:	f000 fab0 	bl	8006330 <SD_SendStatus>
 8005dd0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005dd2:	697b      	ldr	r3, [r7, #20]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d005      	beq.n	8005de4 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ddc:	697b      	ldr	r3, [r7, #20]
 8005dde:	431a      	orrs	r2, r3
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	0a5b      	lsrs	r3, r3, #9
 8005de8:	f003 030f 	and.w	r3, r3, #15
 8005dec:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8005dee:	693b      	ldr	r3, [r7, #16]
}
 8005df0:	4618      	mov	r0, r3
 8005df2:	3718      	adds	r7, #24
 8005df4:	46bd      	mov	sp, r7
 8005df6:	bd80      	pop	{r7, pc}

08005df8 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005df8:	b5b0      	push	{r4, r5, r7, lr}
 8005dfa:	b090      	sub	sp, #64	; 0x40
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8005e00:	2301      	movs	r3, #1
 8005e02:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	4618      	mov	r0, r3
 8005e0a:	f000 fe84 	bl	8006b16 <SDMMC_GetPowerState>
 8005e0e:	4603      	mov	r3, r0
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d102      	bne.n	8005e1a <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005e14:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8005e18:	e0a9      	b.n	8005f6e <SD_InitCard+0x176>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e1e:	2b03      	cmp	r3, #3
 8005e20:	d02e      	beq.n	8005e80 <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	4618      	mov	r0, r3
 8005e28:	f001 f807 	bl	8006e3a <SDMMC_CmdSendCID>
 8005e2c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005e2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d001      	beq.n	8005e38 <SD_InitCard+0x40>
    {
      return errorstate;
 8005e34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e36:	e09a      	b.n	8005f6e <SD_InitCard+0x176>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	2100      	movs	r1, #0
 8005e3e:	4618      	mov	r0, r3
 8005e40:	f000 feaf 	bl	8006ba2 <SDMMC_GetResponse>
 8005e44:	4602      	mov	r2, r0
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	2104      	movs	r1, #4
 8005e50:	4618      	mov	r0, r3
 8005e52:	f000 fea6 	bl	8006ba2 <SDMMC_GetResponse>
 8005e56:	4602      	mov	r2, r0
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	2108      	movs	r1, #8
 8005e62:	4618      	mov	r0, r3
 8005e64:	f000 fe9d 	bl	8006ba2 <SDMMC_GetResponse>
 8005e68:	4602      	mov	r2, r0
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	210c      	movs	r1, #12
 8005e74:	4618      	mov	r0, r3
 8005e76:	f000 fe94 	bl	8006ba2 <SDMMC_GetResponse>
 8005e7a:	4602      	mov	r2, r0
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	67da      	str	r2, [r3, #124]	; 0x7c
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e84:	2b03      	cmp	r3, #3
 8005e86:	d00d      	beq.n	8005ea4 <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f107 020e 	add.w	r2, r7, #14
 8005e90:	4611      	mov	r1, r2
 8005e92:	4618      	mov	r0, r3
 8005e94:	f001 f810 	bl	8006eb8 <SDMMC_CmdSetRelAdd>
 8005e98:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005e9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d001      	beq.n	8005ea4 <SD_InitCard+0xac>
    {
      return errorstate;
 8005ea0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ea2:	e064      	b.n	8005f6e <SD_InitCard+0x176>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ea8:	2b03      	cmp	r3, #3
 8005eaa:	d036      	beq.n	8005f1a <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8005eac:	89fb      	ldrh	r3, [r7, #14]
 8005eae:	461a      	mov	r2, r3
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	649a      	str	r2, [r3, #72]	; 0x48

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681a      	ldr	r2, [r3, #0]
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ebc:	041b      	lsls	r3, r3, #16
 8005ebe:	4619      	mov	r1, r3
 8005ec0:	4610      	mov	r0, r2
 8005ec2:	f000 ffd9 	bl	8006e78 <SDMMC_CmdSendCSD>
 8005ec6:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005ec8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d001      	beq.n	8005ed2 <SD_InitCard+0xda>
    {
      return errorstate;
 8005ece:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ed0:	e04d      	b.n	8005f6e <SD_InitCard+0x176>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	2100      	movs	r1, #0
 8005ed8:	4618      	mov	r0, r3
 8005eda:	f000 fe62 	bl	8006ba2 <SDMMC_GetResponse>
 8005ede:	4602      	mov	r2, r0
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	2104      	movs	r1, #4
 8005eea:	4618      	mov	r0, r3
 8005eec:	f000 fe59 	bl	8006ba2 <SDMMC_GetResponse>
 8005ef0:	4602      	mov	r2, r0
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	2108      	movs	r1, #8
 8005efc:	4618      	mov	r0, r3
 8005efe:	f000 fe50 	bl	8006ba2 <SDMMC_GetResponse>
 8005f02:	4602      	mov	r2, r0
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	210c      	movs	r1, #12
 8005f0e:	4618      	mov	r0, r3
 8005f10:	f000 fe47 	bl	8006ba2 <SDMMC_GetResponse>
 8005f14:	4602      	mov	r2, r0
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	66da      	str	r2, [r3, #108]	; 0x6c
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	2104      	movs	r1, #4
 8005f20:	4618      	mov	r0, r3
 8005f22:	f000 fe3e 	bl	8006ba2 <SDMMC_GetResponse>
 8005f26:	4603      	mov	r3, r0
 8005f28:	0d1a      	lsrs	r2, r3, #20
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8005f2e:	f107 0310 	add.w	r3, r7, #16
 8005f32:	4619      	mov	r1, r3
 8005f34:	6878      	ldr	r0, [r7, #4]
 8005f36:	f7ff fbd1 	bl	80056dc <HAL_SD_GetCardCSD>
 8005f3a:	4603      	mov	r3, r0
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d002      	beq.n	8005f46 <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005f40:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005f44:	e013      	b.n	8005f6e <SD_InitCard+0x176>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6819      	ldr	r1, [r3, #0]
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f4e:	041b      	lsls	r3, r3, #16
 8005f50:	2200      	movs	r2, #0
 8005f52:	461c      	mov	r4, r3
 8005f54:	4615      	mov	r5, r2
 8005f56:	4622      	mov	r2, r4
 8005f58:	462b      	mov	r3, r5
 8005f5a:	4608      	mov	r0, r1
 8005f5c:	f000 fe83 	bl	8006c66 <SDMMC_CmdSelDesel>
 8005f60:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8005f62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d001      	beq.n	8005f6c <SD_InitCard+0x174>
  {
    return errorstate;
 8005f68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f6a:	e000      	b.n	8005f6e <SD_InitCard+0x176>
  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8005f6c:	2300      	movs	r3, #0
}
 8005f6e:	4618      	mov	r0, r3
 8005f70:	3740      	adds	r7, #64	; 0x40
 8005f72:	46bd      	mov	sp, r7
 8005f74:	bdb0      	pop	{r4, r5, r7, pc}
	...

08005f78 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b088      	sub	sp, #32
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005f80:	2300      	movs	r3, #0
 8005f82:	60fb      	str	r3, [r7, #12]
  uint32_t response = 0U, validvoltage = 0U;
 8005f84:	2300      	movs	r3, #0
 8005f86:	61fb      	str	r3, [r7, #28]
 8005f88:	2300      	movs	r3, #0
 8005f8a:	61bb      	str	r3, [r7, #24]
  uint32_t errorstate;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t tickstart = HAL_GetTick();
 8005f8c:	f7fb f962 	bl	8001254 <HAL_GetTick>
 8005f90:	6178      	str	r0, [r7, #20]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	4618      	mov	r0, r3
 8005f98:	f000 fe89 	bl	8006cae <SDMMC_CmdGoIdleState>
 8005f9c:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005f9e:	693b      	ldr	r3, [r7, #16]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d001      	beq.n	8005fa8 <SD_PowerON+0x30>
  {
    return errorstate;
 8005fa4:	693b      	ldr	r3, [r7, #16]
 8005fa6:	e0ed      	b.n	8006184 <SD_PowerON+0x20c>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	4618      	mov	r0, r3
 8005fae:	f000 fe9c 	bl	8006cea <SDMMC_CmdOperCond>
 8005fb2:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005fb4:	693b      	ldr	r3, [r7, #16]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d00d      	beq.n	8005fd6 <SD_PowerON+0x5e>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	641a      	str	r2, [r3, #64]	; 0x40
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	f000 fe72 	bl	8006cae <SDMMC_CmdGoIdleState>
 8005fca:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005fcc:	693b      	ldr	r3, [r7, #16]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d004      	beq.n	8005fdc <SD_PowerON+0x64>
    {
      return errorstate;
 8005fd2:	693b      	ldr	r3, [r7, #16]
 8005fd4:	e0d6      	b.n	8006184 <SD_PowerON+0x20c>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2201      	movs	r2, #1
 8005fda:	641a      	str	r2, [r3, #64]	; 0x40
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fe0:	2b01      	cmp	r3, #1
 8005fe2:	d137      	bne.n	8006054 <SD_PowerON+0xdc>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	2100      	movs	r1, #0
 8005fea:	4618      	mov	r0, r3
 8005fec:	f000 fe9d 	bl	8006d2a <SDMMC_CmdAppCommand>
 8005ff0:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005ff2:	693b      	ldr	r3, [r7, #16]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d02d      	beq.n	8006054 <SD_PowerON+0xdc>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005ff8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005ffc:	e0c2      	b.n	8006184 <SD_PowerON+0x20c>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	2100      	movs	r1, #0
 8006004:	4618      	mov	r0, r3
 8006006:	f000 fe90 	bl	8006d2a <SDMMC_CmdAppCommand>
 800600a:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800600c:	693b      	ldr	r3, [r7, #16]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d001      	beq.n	8006016 <SD_PowerON+0x9e>
    {
      return errorstate;
 8006012:	693b      	ldr	r3, [r7, #16]
 8006014:	e0b6      	b.n	8006184 <SD_PowerON+0x20c>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	495c      	ldr	r1, [pc, #368]	; (800618c <SD_PowerON+0x214>)
 800601c:	4618      	mov	r0, r3
 800601e:	f000 fea7 	bl	8006d70 <SDMMC_CmdAppOperCommand>
 8006022:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006024:	693b      	ldr	r3, [r7, #16]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d002      	beq.n	8006030 <SD_PowerON+0xb8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800602a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800602e:	e0a9      	b.n	8006184 <SD_PowerON+0x20c>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	2100      	movs	r1, #0
 8006036:	4618      	mov	r0, r3
 8006038:	f000 fdb3 	bl	8006ba2 <SDMMC_GetResponse>
 800603c:	61f8      	str	r0, [r7, #28]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800603e:	69fb      	ldr	r3, [r7, #28]
 8006040:	0fdb      	lsrs	r3, r3, #31
 8006042:	2b01      	cmp	r3, #1
 8006044:	d101      	bne.n	800604a <SD_PowerON+0xd2>
 8006046:	2301      	movs	r3, #1
 8006048:	e000      	b.n	800604c <SD_PowerON+0xd4>
 800604a:	2300      	movs	r3, #0
 800604c:	61bb      	str	r3, [r7, #24]

    count++;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	3301      	adds	r3, #1
 8006052:	60fb      	str	r3, [r7, #12]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800605a:	4293      	cmp	r3, r2
 800605c:	d802      	bhi.n	8006064 <SD_PowerON+0xec>
 800605e:	69bb      	ldr	r3, [r7, #24]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d0cc      	beq.n	8005ffe <SD_PowerON+0x86>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800606a:	4293      	cmp	r3, r2
 800606c:	d902      	bls.n	8006074 <SD_PowerON+0xfc>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800606e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006072:	e087      	b.n	8006184 <SD_PowerON+0x20c>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8006074:	69fb      	ldr	r3, [r7, #28]
 8006076:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800607a:	2b00      	cmp	r3, #0
 800607c:	d07e      	beq.n	800617c <SD_PowerON+0x204>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2201      	movs	r2, #1
 8006082:	63da      	str	r2, [r3, #60]	; 0x3c
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	699b      	ldr	r3, [r3, #24]
 8006088:	2b01      	cmp	r3, #1
 800608a:	d17a      	bne.n	8006182 <SD_PowerON+0x20a>
    {
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 800608c:	69fb      	ldr	r3, [r7, #28]
 800608e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006092:	2b00      	cmp	r3, #0
 8006094:	d075      	beq.n	8006182 <SD_PowerON+0x20a>
      {
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	f44f 7200 	mov.w	r2, #512	; 0x200
 800609c:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Start switching procedue */
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	681a      	ldr	r2, [r3, #0]
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f042 0208 	orr.w	r2, r2, #8
 80060ac:	601a      	str	r2, [r3, #0]

        /* Send CMD11 to switch 1.8V mode */
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	4618      	mov	r0, r3
 80060b4:	f000 ff67 	bl	8006f86 <SDMMC_CmdVoltageSwitch>
 80060b8:	6138      	str	r0, [r7, #16]
        if(errorstate != HAL_SD_ERROR_NONE)
 80060ba:	693b      	ldr	r3, [r7, #16]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d00c      	beq.n	80060da <SD_PowerON+0x162>
        {
          return errorstate;
 80060c0:	693b      	ldr	r3, [r7, #16]
 80060c2:	e05f      	b.n	8006184 <SD_PowerON+0x20c>
        }

        /* Check to CKSTOP */
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
        {
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80060c4:	f7fb f8c6 	bl	8001254 <HAL_GetTick>
 80060c8:	4602      	mov	r2, r0
 80060ca:	697b      	ldr	r3, [r7, #20]
 80060cc:	1ad3      	subs	r3, r2, r3
 80060ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80060d2:	d102      	bne.n	80060da <SD_PowerON+0x162>
          {
            return HAL_SD_ERROR_TIMEOUT;
 80060d4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80060d8:	e054      	b.n	8006184 <SD_PowerON+0x20c>
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060e0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80060e4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80060e8:	d1ec      	bne.n	80060c4 <SD_PowerON+0x14c>
          }
        }

        /* Clear CKSTOP Flag */
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80060f2:	639a      	str	r2, [r3, #56]	; 0x38

        /* Check to BusyD0 */
        if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80060fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006102:	d002      	beq.n	800610a <SD_PowerON+0x192>
        {
          /* Error when activate Voltage Switch in SDMMC Peripheral */
          return SDMMC_ERROR_UNSUPPORTED_FEATURE;
 8006104:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006108:	e03c      	b.n	8006184 <SD_PowerON+0x20c>
        {
          /* Enable Transceiver Switch PIN */
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->DriveTransceiver_1_8V_Callback(SET);
#else
          HAL_SDEx_DriveTransceiver_1_8V_Callback(SET);
 800610a:	2001      	movs	r0, #1
 800610c:	f000 fa9e 	bl	800664c <HAL_SDEx_DriveTransceiver_1_8V_Callback>
#endif

          /* Switch ready */
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	681a      	ldr	r2, [r3, #0]
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f042 0204 	orr.w	r2, r2, #4
 800611e:	601a      	str	r2, [r3, #0]

          /* Check VSWEND Flag */
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 8006120:	e00a      	b.n	8006138 <SD_PowerON+0x1c0>
          {
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8006122:	f7fb f897 	bl	8001254 <HAL_GetTick>
 8006126:	4602      	mov	r2, r0
 8006128:	697b      	ldr	r3, [r7, #20]
 800612a:	1ad3      	subs	r3, r2, r3
 800612c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006130:	d102      	bne.n	8006138 <SD_PowerON+0x1c0>
            {
              return HAL_SD_ERROR_TIMEOUT;
 8006132:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006136:	e025      	b.n	8006184 <SD_PowerON+0x20c>
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800613e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006142:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006146:	d1ec      	bne.n	8006122 <SD_PowerON+0x1aa>
            }
          }

          /* Clear VSWEND Flag */
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006150:	639a      	str	r2, [r3, #56]	; 0x38

          /* Check BusyD0 status */
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006158:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800615c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006160:	d102      	bne.n	8006168 <SD_PowerON+0x1f0>
          {
            /* Error when enabling 1.8V mode */
            return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8006162:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006166:	e00d      	b.n	8006184 <SD_PowerON+0x20c>
          }
          /* Switch to 1.8V OK */

          /* Disable VSWITCH FLAG from SDMMC Peripheral */
          hsd->Instance->POWER = 0x13U;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	2213      	movs	r2, #19
 800616e:	601a      	str	r2, [r3, #0]

          /* Clean Status flags */
          hsd->Instance->ICR = 0xFFFFFFFFU;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006178:	639a      	str	r2, [r3, #56]	; 0x38
 800617a:	e002      	b.n	8006182 <SD_PowerON+0x20a>
    }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2200      	movs	r2, #0
 8006180:	63da      	str	r2, [r3, #60]	; 0x3c
  }


  return HAL_SD_ERROR_NONE;
 8006182:	2300      	movs	r3, #0
}
 8006184:	4618      	mov	r0, r3
 8006186:	3720      	adds	r7, #32
 8006188:	46bd      	mov	sp, r7
 800618a:	bd80      	pop	{r7, pc}
 800618c:	c1100000 	.word	0xc1100000

08006190 <SD_SendSDStatus>:
  * @param  pSDstatus Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8006190:	b580      	push	{r7, lr}
 8006192:	b08c      	sub	sp, #48	; 0x30
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
 8006198:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800619a:	f7fb f85b 	bl	8001254 <HAL_GetTick>
 800619e:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	2100      	movs	r1, #0
 80061aa:	4618      	mov	r0, r3
 80061ac:	f000 fcf9 	bl	8006ba2 <SDMMC_GetResponse>
 80061b0:	4603      	mov	r3, r0
 80061b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061b6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80061ba:	d102      	bne.n	80061c2 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80061bc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80061c0:	e0b0      	b.n	8006324 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	2140      	movs	r1, #64	; 0x40
 80061c8:	4618      	mov	r0, r3
 80061ca:	f000 fd29 	bl	8006c20 <SDMMC_CmdBlockLength>
 80061ce:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80061d0:	6a3b      	ldr	r3, [r7, #32]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d005      	beq.n	80061e2 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 80061de:	6a3b      	ldr	r3, [r7, #32]
 80061e0:	e0a0      	b.n	8006324 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681a      	ldr	r2, [r3, #0]
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061ea:	041b      	lsls	r3, r3, #16
 80061ec:	4619      	mov	r1, r3
 80061ee:	4610      	mov	r0, r2
 80061f0:	f000 fd9b 	bl	8006d2a <SDMMC_CmdAppCommand>
 80061f4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80061f6:	6a3b      	ldr	r3, [r7, #32]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d005      	beq.n	8006208 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8006204:	6a3b      	ldr	r3, [r7, #32]
 8006206:	e08d      	b.n	8006324 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006208:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800620c:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800620e:	2340      	movs	r3, #64	; 0x40
 8006210:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8006212:	2360      	movs	r3, #96	; 0x60
 8006214:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8006216:	2302      	movs	r3, #2
 8006218:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800621a:	2300      	movs	r3, #0
 800621c:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800621e:	2301      	movs	r3, #1
 8006220:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f107 0208 	add.w	r2, r7, #8
 800622a:	4611      	mov	r1, r2
 800622c:	4618      	mov	r0, r3
 800622e:	f000 fccb 	bl	8006bc8 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	4618      	mov	r0, r3
 8006238:	f000 fe83 	bl	8006f42 <SDMMC_CmdStatusRegister>
 800623c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800623e:	6a3b      	ldr	r3, [r7, #32]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d02b      	beq.n	800629c <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800624c:	6a3b      	ldr	r3, [r7, #32]
 800624e:	e069      	b.n	8006324 <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
#else
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006256:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800625a:	2b00      	cmp	r3, #0
 800625c:	d013      	beq.n	8006286 <SD_SendSDStatus+0xf6>
    {
      for(count = 0U; count < 8U; count++)
 800625e:	2300      	movs	r3, #0
 8006260:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006262:	e00d      	b.n	8006280 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	4618      	mov	r0, r3
 800626a:	f000 fc35 	bl	8006ad8 <SDMMC_ReadFIFO>
 800626e:	4602      	mov	r2, r0
 8006270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006272:	601a      	str	r2, [r3, #0]
        pData++;
 8006274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006276:	3304      	adds	r3, #4
 8006278:	62bb      	str	r3, [r7, #40]	; 0x28
      for(count = 0U; count < 8U; count++)
 800627a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800627c:	3301      	adds	r3, #1
 800627e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006282:	2b07      	cmp	r3, #7
 8006284:	d9ee      	bls.n	8006264 <SD_SendSDStatus+0xd4>
      }
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8006286:	f7fa ffe5 	bl	8001254 <HAL_GetTick>
 800628a:	4602      	mov	r2, r0
 800628c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800628e:	1ad3      	subs	r3, r2, r3
 8006290:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006294:	d102      	bne.n	800629c <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8006296:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800629a:	e043      	b.n	8006324 <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062a2:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d0d2      	beq.n	8006250 <SD_SendSDStatus+0xc0>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062b0:	f003 0308 	and.w	r3, r3, #8
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d001      	beq.n	80062bc <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 80062b8:	2308      	movs	r3, #8
 80062ba:	e033      	b.n	8006324 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062c2:	f003 0302 	and.w	r3, r3, #2
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d001      	beq.n	80062ce <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80062ca:	2302      	movs	r3, #2
 80062cc:	e02a      	b.n	8006324 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062d4:	f003 0320 	and.w	r3, r3, #32
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d017      	beq.n	800630c <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 80062dc:	2320      	movs	r3, #32
 80062de:	e021      	b.n	8006324 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
#else
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)))
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	4618      	mov	r0, r3
 80062e6:	f000 fbf7 	bl	8006ad8 <SDMMC_ReadFIFO>
 80062ea:	4602      	mov	r2, r0
 80062ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062ee:	601a      	str	r2, [r3, #0]
    pData++;
 80062f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062f2:	3304      	adds	r3, #4
 80062f4:	62bb      	str	r3, [r7, #40]	; 0x28

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80062f6:	f7fa ffad 	bl	8001254 <HAL_GetTick>
 80062fa:	4602      	mov	r2, r0
 80062fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062fe:	1ad3      	subs	r3, r2, r3
 8006300:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006304:	d102      	bne.n	800630c <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8006306:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800630a:	e00b      	b.n	8006324 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006312:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006316:	2b00      	cmp	r3, #0
 8006318:	d1e2      	bne.n	80062e0 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	4a03      	ldr	r2, [pc, #12]	; (800632c <SD_SendSDStatus+0x19c>)
 8006320:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 8006322:	2300      	movs	r3, #0
}
 8006324:	4618      	mov	r0, r3
 8006326:	3730      	adds	r7, #48	; 0x30
 8006328:	46bd      	mov	sp, r7
 800632a:	bd80      	pop	{r7, pc}
 800632c:	18000f3a 	.word	0x18000f3a

08006330 <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8006330:	b580      	push	{r7, lr}
 8006332:	b084      	sub	sp, #16
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
 8006338:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d102      	bne.n	8006346 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8006340:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006344:	e018      	b.n	8006378 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681a      	ldr	r2, [r3, #0]
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800634e:	041b      	lsls	r3, r3, #16
 8006350:	4619      	mov	r1, r3
 8006352:	4610      	mov	r0, r2
 8006354:	f000 fdd2 	bl	8006efc <SDMMC_CmdSendStatus>
 8006358:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d001      	beq.n	8006364 <SD_SendStatus+0x34>
  {
    return errorstate;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	e009      	b.n	8006378 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	2100      	movs	r1, #0
 800636a:	4618      	mov	r0, r3
 800636c:	f000 fc19 	bl	8006ba2 <SDMMC_GetResponse>
 8006370:	4602      	mov	r2, r0
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8006376:	2300      	movs	r3, #0
}
 8006378:	4618      	mov	r0, r3
 800637a:	3710      	adds	r7, #16
 800637c:	46bd      	mov	sp, r7
 800637e:	bd80      	pop	{r7, pc}

08006380 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8006380:	b580      	push	{r7, lr}
 8006382:	b086      	sub	sp, #24
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8006388:	2300      	movs	r3, #0
 800638a:	60fb      	str	r3, [r7, #12]
 800638c:	2300      	movs	r3, #0
 800638e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	2100      	movs	r1, #0
 8006396:	4618      	mov	r0, r3
 8006398:	f000 fc03 	bl	8006ba2 <SDMMC_GetResponse>
 800639c:	4603      	mov	r3, r0
 800639e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063a2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80063a6:	d102      	bne.n	80063ae <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80063a8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80063ac:	e02f      	b.n	800640e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80063ae:	f107 030c 	add.w	r3, r7, #12
 80063b2:	4619      	mov	r1, r3
 80063b4:	6878      	ldr	r0, [r7, #4]
 80063b6:	f000 f879 	bl	80064ac <SD_FindSCR>
 80063ba:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80063bc:	697b      	ldr	r3, [r7, #20]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d001      	beq.n	80063c6 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80063c2:	697b      	ldr	r3, [r7, #20]
 80063c4:	e023      	b.n	800640e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80063c6:	693b      	ldr	r3, [r7, #16]
 80063c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d01c      	beq.n	800640a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681a      	ldr	r2, [r3, #0]
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063d8:	041b      	lsls	r3, r3, #16
 80063da:	4619      	mov	r1, r3
 80063dc:	4610      	mov	r0, r2
 80063de:	f000 fca4 	bl	8006d2a <SDMMC_CmdAppCommand>
 80063e2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80063e4:	697b      	ldr	r3, [r7, #20]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d001      	beq.n	80063ee <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80063ea:	697b      	ldr	r3, [r7, #20]
 80063ec:	e00f      	b.n	800640e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	2102      	movs	r1, #2
 80063f4:	4618      	mov	r0, r3
 80063f6:	f000 fcdb 	bl	8006db0 <SDMMC_CmdBusWidth>
 80063fa:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80063fc:	697b      	ldr	r3, [r7, #20]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d001      	beq.n	8006406 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8006402:	697b      	ldr	r3, [r7, #20]
 8006404:	e003      	b.n	800640e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8006406:	2300      	movs	r3, #0
 8006408:	e001      	b.n	800640e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800640a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800640e:	4618      	mov	r0, r3
 8006410:	3718      	adds	r7, #24
 8006412:	46bd      	mov	sp, r7
 8006414:	bd80      	pop	{r7, pc}

08006416 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8006416:	b580      	push	{r7, lr}
 8006418:	b086      	sub	sp, #24
 800641a:	af00      	add	r7, sp, #0
 800641c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800641e:	2300      	movs	r3, #0
 8006420:	60fb      	str	r3, [r7, #12]
 8006422:	2300      	movs	r3, #0
 8006424:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	2100      	movs	r1, #0
 800642c:	4618      	mov	r0, r3
 800642e:	f000 fbb8 	bl	8006ba2 <SDMMC_GetResponse>
 8006432:	4603      	mov	r3, r0
 8006434:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006438:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800643c:	d102      	bne.n	8006444 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800643e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006442:	e02f      	b.n	80064a4 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8006444:	f107 030c 	add.w	r3, r7, #12
 8006448:	4619      	mov	r1, r3
 800644a:	6878      	ldr	r0, [r7, #4]
 800644c:	f000 f82e 	bl	80064ac <SD_FindSCR>
 8006450:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006452:	697b      	ldr	r3, [r7, #20]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d001      	beq.n	800645c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8006458:	697b      	ldr	r3, [r7, #20]
 800645a:	e023      	b.n	80064a4 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800645c:	693b      	ldr	r3, [r7, #16]
 800645e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006462:	2b00      	cmp	r3, #0
 8006464:	d01c      	beq.n	80064a0 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681a      	ldr	r2, [r3, #0]
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800646e:	041b      	lsls	r3, r3, #16
 8006470:	4619      	mov	r1, r3
 8006472:	4610      	mov	r0, r2
 8006474:	f000 fc59 	bl	8006d2a <SDMMC_CmdAppCommand>
 8006478:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800647a:	697b      	ldr	r3, [r7, #20]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d001      	beq.n	8006484 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8006480:	697b      	ldr	r3, [r7, #20]
 8006482:	e00f      	b.n	80064a4 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	2100      	movs	r1, #0
 800648a:	4618      	mov	r0, r3
 800648c:	f000 fc90 	bl	8006db0 <SDMMC_CmdBusWidth>
 8006490:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006492:	697b      	ldr	r3, [r7, #20]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d001      	beq.n	800649c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8006498:	697b      	ldr	r3, [r7, #20]
 800649a:	e003      	b.n	80064a4 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800649c:	2300      	movs	r3, #0
 800649e:	e001      	b.n	80064a4 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80064a0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80064a4:	4618      	mov	r0, r3
 80064a6:	3718      	adds	r7, #24
 80064a8:	46bd      	mov	sp, r7
 80064aa:	bd80      	pop	{r7, pc}

080064ac <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b08e      	sub	sp, #56	; 0x38
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
 80064b4:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80064b6:	f7fa fecd 	bl	8001254 <HAL_GetTick>
 80064ba:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 80064bc:	2300      	movs	r3, #0
 80064be:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 80064c0:	2300      	movs	r3, #0
 80064c2:	60bb      	str	r3, [r7, #8]
 80064c4:	2300      	movs	r3, #0
 80064c6:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	2108      	movs	r1, #8
 80064d2:	4618      	mov	r0, r3
 80064d4:	f000 fba4 	bl	8006c20 <SDMMC_CmdBlockLength>
 80064d8:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80064da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d001      	beq.n	80064e4 <SD_FindSCR+0x38>
  {
    return errorstate;
 80064e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064e2:	e0ad      	b.n	8006640 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681a      	ldr	r2, [r3, #0]
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80064ec:	041b      	lsls	r3, r3, #16
 80064ee:	4619      	mov	r1, r3
 80064f0:	4610      	mov	r0, r2
 80064f2:	f000 fc1a 	bl	8006d2a <SDMMC_CmdAppCommand>
 80064f6:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80064f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d001      	beq.n	8006502 <SD_FindSCR+0x56>
  {
    return errorstate;
 80064fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006500:	e09e      	b.n	8006640 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006502:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006506:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8006508:	2308      	movs	r3, #8
 800650a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800650c:	2330      	movs	r3, #48	; 0x30
 800650e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8006510:	2302      	movs	r3, #2
 8006512:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006514:	2300      	movs	r3, #0
 8006516:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8006518:	2301      	movs	r3, #1
 800651a:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f107 0210 	add.w	r2, r7, #16
 8006524:	4611      	mov	r1, r2
 8006526:	4618      	mov	r0, r3
 8006528:	f000 fb4e 	bl	8006bc8 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	4618      	mov	r0, r3
 8006532:	f000 fc60 	bl	8006df6 <SDMMC_CmdSendSCR>
 8006536:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8006538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800653a:	2b00      	cmp	r3, #0
 800653c:	d027      	beq.n	800658e <SD_FindSCR+0xe2>
  {
    return errorstate;
 800653e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006540:	e07e      	b.n	8006640 <SD_FindSCR+0x194>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
  {
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006548:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800654c:	2b00      	cmp	r3, #0
 800654e:	d113      	bne.n	8006578 <SD_FindSCR+0xcc>
 8006550:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006552:	2b00      	cmp	r3, #0
 8006554:	d110      	bne.n	8006578 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	4618      	mov	r0, r3
 800655c:	f000 fabc 	bl	8006ad8 <SDMMC_ReadFIFO>
 8006560:	4603      	mov	r3, r0
 8006562:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	4618      	mov	r0, r3
 800656a:	f000 fab5 	bl	8006ad8 <SDMMC_ReadFIFO>
 800656e:	4603      	mov	r3, r0
 8006570:	60fb      	str	r3, [r7, #12]
      index++;
 8006572:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006574:	3301      	adds	r3, #1
 8006576:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8006578:	f7fa fe6c 	bl	8001254 <HAL_GetTick>
 800657c:	4602      	mov	r2, r0
 800657e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006580:	1ad3      	subs	r3, r2, r3
 8006582:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006586:	d102      	bne.n	800658e <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8006588:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800658c:	e058      	b.n	8006640 <SD_FindSCR+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006594:	f240 532a 	movw	r3, #1322	; 0x52a
 8006598:	4013      	ands	r3, r2
 800659a:	2b00      	cmp	r3, #0
 800659c:	d0d1      	beq.n	8006542 <SD_FindSCR+0x96>
      return HAL_SD_ERROR_TIMEOUT;
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065a4:	f003 0308 	and.w	r3, r3, #8
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d005      	beq.n	80065b8 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	2208      	movs	r2, #8
 80065b2:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 80065b4:	2308      	movs	r3, #8
 80065b6:	e043      	b.n	8006640 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065be:	f003 0302 	and.w	r3, r3, #2
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d005      	beq.n	80065d2 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	2202      	movs	r2, #2
 80065cc:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80065ce:	2302      	movs	r3, #2
 80065d0:	e036      	b.n	8006640 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065d8:	f003 0320 	and.w	r3, r3, #32
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d005      	beq.n	80065ec <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	2220      	movs	r2, #32
 80065e6:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80065e8:	2320      	movs	r3, #32
 80065ea:	e029      	b.n	8006640 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	4a15      	ldr	r2, [pc, #84]	; (8006648 <SD_FindSCR+0x19c>)
 80065f2:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	061a      	lsls	r2, r3, #24
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	021b      	lsls	r3, r3, #8
 80065fc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006600:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	0a1b      	lsrs	r3, r3, #8
 8006606:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800660a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	0e1b      	lsrs	r3, r3, #24
 8006610:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8006612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006614:	601a      	str	r2, [r3, #0]
    scr++;
 8006616:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006618:	3304      	adds	r3, #4
 800661a:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800661c:	68bb      	ldr	r3, [r7, #8]
 800661e:	061a      	lsls	r2, r3, #24
 8006620:	68bb      	ldr	r3, [r7, #8]
 8006622:	021b      	lsls	r3, r3, #8
 8006624:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006628:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800662a:	68bb      	ldr	r3, [r7, #8]
 800662c:	0a1b      	lsrs	r3, r3, #8
 800662e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8006632:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8006634:	68bb      	ldr	r3, [r7, #8]
 8006636:	0e1b      	lsrs	r3, r3, #24
 8006638:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800663a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800663c:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800663e:	2300      	movs	r3, #0
}
 8006640:	4618      	mov	r0, r3
 8006642:	3738      	adds	r7, #56	; 0x38
 8006644:	46bd      	mov	sp, r7
 8006646:	bd80      	pop	{r7, pc}
 8006648:	18000f3a 	.word	0x18000f3a

0800664c <HAL_SDEx_DriveTransceiver_1_8V_Callback>:
  * @brief  Enable/Disable the SD Transceiver 1.8V Mode Callback.
  * @param  status Voltage Switch State
  * @retval None
  */
__weak void HAL_SDEx_DriveTransceiver_1_8V_Callback(FlagStatus status)
{
 800664c:	b480      	push	{r7}
 800664e:	b083      	sub	sp, #12
 8006650:	af00      	add	r7, sp, #0
 8006652:	4603      	mov	r3, r0
 8006654:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SD_EnableTransciver could be implemented in the user file
   */
}
 8006656:	bf00      	nop
 8006658:	370c      	adds	r7, #12
 800665a:	46bd      	mov	sp, r7
 800665c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006660:	4770      	bx	lr

08006662 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006662:	b580      	push	{r7, lr}
 8006664:	b084      	sub	sp, #16
 8006666:	af00      	add	r7, sp, #0
 8006668:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d101      	bne.n	8006674 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006670:	2301      	movs	r3, #1
 8006672:	e095      	b.n	80067a0 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006678:	2b00      	cmp	r3, #0
 800667a:	d108      	bne.n	800668e <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	685b      	ldr	r3, [r3, #4]
 8006680:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006684:	d009      	beq.n	800669a <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2200      	movs	r2, #0
 800668a:	61da      	str	r2, [r3, #28]
 800668c:	e005      	b.n	800669a <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2200      	movs	r2, #0
 8006692:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2200      	movs	r2, #0
 8006698:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2200      	movs	r2, #0
 800669e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80066a6:	b2db      	uxtb	r3, r3
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d106      	bne.n	80066ba <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2200      	movs	r2, #0
 80066b0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80066b4:	6878      	ldr	r0, [r7, #4]
 80066b6:	f7fa fc15 	bl	8000ee4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2202      	movs	r2, #2
 80066be:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	681a      	ldr	r2, [r3, #0]
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80066d0:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	68db      	ldr	r3, [r3, #12]
 80066d6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80066da:	d902      	bls.n	80066e2 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80066dc:	2300      	movs	r3, #0
 80066de:	60fb      	str	r3, [r7, #12]
 80066e0:	e002      	b.n	80066e8 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80066e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80066e6:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	68db      	ldr	r3, [r3, #12]
 80066ec:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80066f0:	d007      	beq.n	8006702 <HAL_SPI_Init+0xa0>
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	68db      	ldr	r3, [r3, #12]
 80066f6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80066fa:	d002      	beq.n	8006702 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2200      	movs	r2, #0
 8006700:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	685b      	ldr	r3, [r3, #4]
 8006706:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	689b      	ldr	r3, [r3, #8]
 800670e:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006712:	431a      	orrs	r2, r3
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	691b      	ldr	r3, [r3, #16]
 8006718:	f003 0302 	and.w	r3, r3, #2
 800671c:	431a      	orrs	r2, r3
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	695b      	ldr	r3, [r3, #20]
 8006722:	f003 0301 	and.w	r3, r3, #1
 8006726:	431a      	orrs	r2, r3
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	699b      	ldr	r3, [r3, #24]
 800672c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006730:	431a      	orrs	r2, r3
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	69db      	ldr	r3, [r3, #28]
 8006736:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800673a:	431a      	orrs	r2, r3
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	6a1b      	ldr	r3, [r3, #32]
 8006740:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006744:	ea42 0103 	orr.w	r1, r2, r3
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800674c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	430a      	orrs	r2, r1
 8006756:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	699b      	ldr	r3, [r3, #24]
 800675c:	0c1b      	lsrs	r3, r3, #16
 800675e:	f003 0204 	and.w	r2, r3, #4
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006766:	f003 0310 	and.w	r3, r3, #16
 800676a:	431a      	orrs	r2, r3
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006770:	f003 0308 	and.w	r3, r3, #8
 8006774:	431a      	orrs	r2, r3
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	68db      	ldr	r3, [r3, #12]
 800677a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800677e:	ea42 0103 	orr.w	r1, r2, r3
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	430a      	orrs	r2, r1
 800678e:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2200      	movs	r2, #0
 8006794:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	2201      	movs	r2, #1
 800679a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800679e:	2300      	movs	r3, #0
}
 80067a0:	4618      	mov	r0, r3
 80067a2:	3710      	adds	r7, #16
 80067a4:	46bd      	mov	sp, r7
 80067a6:	bd80      	pop	{r7, pc}

080067a8 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b084      	sub	sp, #16
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	60f8      	str	r0, [r7, #12]
 80067b0:	60b9      	str	r1, [r7, #8]
 80067b2:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d101      	bne.n	80067be <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 80067ba:	2301      	movs	r3, #1
 80067bc:	e038      	b.n	8006830 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 80067c4:	b2db      	uxtb	r3, r3
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d106      	bne.n	80067d8 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	2200      	movs	r2, #0
 80067ce:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 80067d2:	68f8      	ldr	r0, [r7, #12]
 80067d4:	f7fa fc66 	bl	80010a4 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	681a      	ldr	r2, [r3, #0]
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	3308      	adds	r3, #8
 80067e0:	4619      	mov	r1, r3
 80067e2:	4610      	mov	r0, r2
 80067e4:	f000 f828 	bl	8006838 <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	6818      	ldr	r0, [r3, #0]
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	689b      	ldr	r3, [r3, #8]
 80067f0:	461a      	mov	r2, r3
 80067f2:	68b9      	ldr	r1, [r7, #8]
 80067f4:	f000 f8ba 	bl	800696c <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	6858      	ldr	r0, [r3, #4]
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	689a      	ldr	r2, [r3, #8]
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006804:	6879      	ldr	r1, [r7, #4]
 8006806:	f000 f903 	bl	8006a10 <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	68fa      	ldr	r2, [r7, #12]
 8006810:	6892      	ldr	r2, [r2, #8]
 8006812:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	68fa      	ldr	r2, [r7, #12]
 800681c:	6892      	ldr	r2, [r2, #8]
 800681e:	f041 0101 	orr.w	r1, r1, #1
 8006822:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	2201      	movs	r2, #1
 800682a:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  return HAL_OK;
 800682e:	2300      	movs	r3, #0
}
 8006830:	4618      	mov	r0, r3
 8006832:	3710      	adds	r7, #16
 8006834:	46bd      	mov	sp, r7
 8006836:	bd80      	pop	{r7, pc}

08006838 <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    FMC_NORSRAM_InitTypeDef *Init)
{
 8006838:	b480      	push	{r7}
 800683a:	b087      	sub	sp, #28
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
 8006840:	6039      	str	r1, [r7, #0]
#if defined(FMC_PCSCNTR_CSCOUNT)
  assert_param(IS_FUNCTIONAL_STATE(Init->MaxChipSelectPulse));
#endif /* FMC_PCSCNTR_CSCOUNT */

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	681a      	ldr	r2, [r3, #0]
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800684c:	683a      	ldr	r2, [r7, #0]
 800684e:	6812      	ldr	r2, [r2, #0]
 8006850:	f023 0101 	bic.w	r1, r3, #1
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 800685a:	683b      	ldr	r3, [r7, #0]
 800685c:	689b      	ldr	r3, [r3, #8]
 800685e:	2b08      	cmp	r3, #8
 8006860:	d102      	bne.n	8006868 <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8006862:	2340      	movs	r3, #64	; 0x40
 8006864:	617b      	str	r3, [r7, #20]
 8006866:	e001      	b.n	800686c <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8006868:	2300      	movs	r3, #0
 800686a:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8006870:	697b      	ldr	r3, [r7, #20]
 8006872:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8006878:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 800687e:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8006884:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 800688a:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	699b      	ldr	r3, [r3, #24]
              Init->WaitSignalPolarity      | \
 8006890:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalActive        | \
 8006896:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	6a1b      	ldr	r3, [r3, #32]
              Init->WriteOperation          | \
 800689c:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WaitSignal              | \
 80068a2:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->ExtendedMode            | \
 80068a8:	431a      	orrs	r2, r3
              Init->WriteBurst);
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  btcr_reg = (flashaccess                   | \
 80068ae:	4313      	orrs	r3, r2
 80068b0:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->ContinuousClock;
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068b6:	693a      	ldr	r2, [r7, #16]
 80068b8:	4313      	orrs	r3, r2
 80068ba:	613b      	str	r3, [r7, #16]
#if defined(FMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068c0:	693a      	ldr	r2, [r7, #16]
 80068c2:	4313      	orrs	r3, r2
 80068c4:	613b      	str	r3, [r7, #16]
#endif /* FMC_BCR1_WFDIS */
#if defined(FMC_BCRx_NBLSET)
  btcr_reg |= Init->NBLSetupTime;
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068ca:	693a      	ldr	r2, [r7, #16]
 80068cc:	4313      	orrs	r3, r2
 80068ce:	613b      	str	r3, [r7, #16]
#endif /* FMC_BCRx_NBLSET */
  btcr_reg |= Init->PageSize;
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068d4:	693a      	ldr	r2, [r7, #16]
 80068d6:	4313      	orrs	r3, r2
 80068d8:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCRx_MBKEN                |
 80068da:	4b23      	ldr	r3, [pc, #140]	; (8006968 <FMC_NORSRAM_Init+0x130>)
 80068dc:	60fb      	str	r3, [r7, #12]
          FMC_BCRx_WAITEN               |
          FMC_BCRx_EXTMOD               |
          FMC_BCRx_ASYNCWAIT            |
          FMC_BCRx_CBURSTRW);

  mask |= FMC_BCR1_CCLKEN;
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80068e4:	60fb      	str	r3, [r7, #12]
#if defined(FMC_BCR1_WFDIS)
  mask |= FMC_BCR1_WFDIS;
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80068ec:	60fb      	str	r3, [r7, #12]
#endif /* FMC_BCR1_WFDIS */
#if defined(FMC_BCRx_NBLSET)
  mask |= FMC_BCRx_NBLSET;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	f443 0340 	orr.w	r3, r3, #12582912	; 0xc00000
 80068f4:	60fb      	str	r3, [r7, #12]
#endif /* FMC_BCRx_NBLSET */
  mask |= FMC_BCRx_CPSIZE;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 80068fc:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 80068fe:	683b      	ldr	r3, [r7, #0]
 8006900:	681a      	ldr	r2, [r3, #0]
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	43db      	mvns	r3, r3
 800690c:	ea02 0103 	and.w	r1, r2, r3
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	681a      	ldr	r2, [r3, #0]
 8006914:	693b      	ldr	r3, [r7, #16]
 8006916:	4319      	orrs	r1, r3
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006922:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006926:	d10c      	bne.n	8006942 <FMC_NORSRAM_Init+0x10a>
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d008      	beq.n	8006942 <FMC_NORSRAM_Init+0x10a>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800693c:	431a      	orrs	r2, r3
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	601a      	str	r2, [r3, #0]
  }
#if defined(FMC_BCR1_WFDIS)

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d006      	beq.n	8006958 <FMC_NORSRAM_Init+0x120>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681a      	ldr	r2, [r3, #0]
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006952:	431a      	orrs	r2, r3
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	601a      	str	r2, [r3, #0]
        break;
    }
  }
#endif /* FMC_PCSCNTR_CSCOUNT */

  return HAL_OK;
 8006958:	2300      	movs	r3, #0
}
 800695a:	4618      	mov	r0, r3
 800695c:	371c      	adds	r7, #28
 800695e:	46bd      	mov	sp, r7
 8006960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006964:	4770      	bx	lr
 8006966:	bf00      	nop
 8006968:	0008fb7f 	.word	0x0008fb7f

0800696c <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800696c:	b480      	push	{r7}
 800696e:	b087      	sub	sp, #28
 8006970:	af00      	add	r7, sp, #0
 8006972:	60f8      	str	r0, [r7, #12]
 8006974:	60b9      	str	r1, [r7, #8]
 8006976:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Set FMC_NORSRAM device timing parameters */
#if defined(FMC_BTRx_DATAHLD)
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	1c5a      	adds	r2, r3, #1
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006982:	68bb      	ldr	r3, [r7, #8]
 8006984:	681a      	ldr	r2, [r3, #0]
 8006986:	68bb      	ldr	r3, [r7, #8]
 8006988:	685b      	ldr	r3, [r3, #4]
 800698a:	011b      	lsls	r3, r3, #4
 800698c:	431a      	orrs	r2, r3
 800698e:	68bb      	ldr	r3, [r7, #8]
 8006990:	689b      	ldr	r3, [r3, #8]
 8006992:	021b      	lsls	r3, r3, #8
 8006994:	431a      	orrs	r2, r3
 8006996:	68bb      	ldr	r3, [r7, #8]
 8006998:	68db      	ldr	r3, [r3, #12]
 800699a:	079b      	lsls	r3, r3, #30
 800699c:	431a      	orrs	r2, r3
 800699e:	68bb      	ldr	r3, [r7, #8]
 80069a0:	691b      	ldr	r3, [r3, #16]
 80069a2:	041b      	lsls	r3, r3, #16
 80069a4:	431a      	orrs	r2, r3
 80069a6:	68bb      	ldr	r3, [r7, #8]
 80069a8:	695b      	ldr	r3, [r3, #20]
 80069aa:	3b01      	subs	r3, #1
 80069ac:	051b      	lsls	r3, r3, #20
 80069ae:	431a      	orrs	r2, r3
 80069b0:	68bb      	ldr	r3, [r7, #8]
 80069b2:	699b      	ldr	r3, [r3, #24]
 80069b4:	3b02      	subs	r3, #2
 80069b6:	061b      	lsls	r3, r3, #24
 80069b8:	ea42 0103 	orr.w	r1, r2, r3
 80069bc:	68bb      	ldr	r3, [r7, #8]
 80069be:	69db      	ldr	r3, [r3, #28]
 80069c0:	687a      	ldr	r2, [r7, #4]
 80069c2:	3201      	adds	r2, #1
 80069c4:	4319      	orrs	r1, r3
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));
#endif /* FMC_BTRx_DATAHLD */

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80069d4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80069d8:	d113      	bne.n	8006a02 <FMC_NORSRAM_Timing_Init+0x96>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTRx_CLKDIV_Pos));
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	685b      	ldr	r3, [r3, #4]
 80069de:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80069e2:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTRx_CLKDIV_Pos);
 80069e4:	68bb      	ldr	r3, [r7, #8]
 80069e6:	695b      	ldr	r3, [r3, #20]
 80069e8:	3b01      	subs	r3, #1
 80069ea:	051b      	lsls	r3, r3, #20
 80069ec:	697a      	ldr	r2, [r7, #20]
 80069ee:	4313      	orrs	r3, r2
 80069f0:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTRx_CLKDIV, tmpr);
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	685b      	ldr	r3, [r3, #4]
 80069f6:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80069fa:	697b      	ldr	r3, [r7, #20]
 80069fc:	431a      	orrs	r2, r3
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8006a02:	2300      	movs	r3, #0
}
 8006a04:	4618      	mov	r0, r3
 8006a06:	371c      	adds	r7, #28
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0e:	4770      	bx	lr

08006a10 <FMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 8006a10:	b480      	push	{r7}
 8006a12:	b085      	sub	sp, #20
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	60f8      	str	r0, [r7, #12]
 8006a18:	60b9      	str	r1, [r7, #8]
 8006a1a:	607a      	str	r2, [r7, #4]
 8006a1c:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006a24:	d121      	bne.n	8006a6a <FMC_NORSRAM_Extended_Timing_Init+0x5a>
    assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
#if defined(FMC_BTRx_DATAHLD)
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	687a      	ldr	r2, [r7, #4]
 8006a2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a2e:	f003 627f 	and.w	r2, r3, #267386880	; 0xff00000
 8006a32:	68bb      	ldr	r3, [r7, #8]
 8006a34:	6819      	ldr	r1, [r3, #0]
 8006a36:	68bb      	ldr	r3, [r7, #8]
 8006a38:	685b      	ldr	r3, [r3, #4]
 8006a3a:	011b      	lsls	r3, r3, #4
 8006a3c:	4319      	orrs	r1, r3
 8006a3e:	68bb      	ldr	r3, [r7, #8]
 8006a40:	689b      	ldr	r3, [r3, #8]
 8006a42:	021b      	lsls	r3, r3, #8
 8006a44:	4319      	orrs	r1, r3
 8006a46:	68bb      	ldr	r3, [r7, #8]
 8006a48:	68db      	ldr	r3, [r3, #12]
 8006a4a:	079b      	lsls	r3, r3, #30
 8006a4c:	4319      	orrs	r1, r3
 8006a4e:	68bb      	ldr	r3, [r7, #8]
 8006a50:	69db      	ldr	r3, [r3, #28]
 8006a52:	4319      	orrs	r1, r3
 8006a54:	68bb      	ldr	r3, [r7, #8]
 8006a56:	691b      	ldr	r3, [r3, #16]
 8006a58:	041b      	lsls	r3, r3, #16
 8006a5a:	430b      	orrs	r3, r1
 8006a5c:	ea42 0103 	orr.w	r1, r2, r3
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	687a      	ldr	r2, [r7, #4]
 8006a64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8006a68:	e005      	b.n	8006a76 <FMC_NORSRAM_Extended_Timing_Init+0x66>
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTRx_BUSTURN_Pos)));
#endif /* FMC_BTRx_DATAHLD */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	687a      	ldr	r2, [r7, #4]
 8006a6e:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8006a72:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8006a76:	2300      	movs	r3, #0
}
 8006a78:	4618      	mov	r0, r3
 8006a7a:	3714      	adds	r7, #20
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a82:	4770      	bx	lr

08006a84 <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8006a84:	b084      	sub	sp, #16
 8006a86:	b480      	push	{r7}
 8006a88:	b085      	sub	sp, #20
 8006a8a:	af00      	add	r7, sp, #0
 8006a8c:	6078      	str	r0, [r7, #4]
 8006a8e:	f107 001c 	add.w	r0, r7, #28
 8006a92:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8006a96:	2300      	movs	r3, #0
 8006a98:	60fb      	str	r3, [r7, #12]

  /* Set SDMMC configuration parameters */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  tmpreg |= Init.ClockBypass;
#endif
  tmpreg |= (Init.ClockEdge           |\
 8006a9a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 8006a9c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8006a9e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8006aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      |\
 8006aa2:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8006aa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             |\
 8006aa6:	431a      	orrs	r2, r3
             Init.ClockDiv
 8006aa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl |\
 8006aaa:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8006aac:	68fa      	ldr	r2, [r7, #12]
 8006aae:	4313      	orrs	r3, r2
 8006ab0:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	685a      	ldr	r2, [r3, #4]
 8006ab6:	4b07      	ldr	r3, [pc, #28]	; (8006ad4 <SDMMC_Init+0x50>)
 8006ab8:	4013      	ands	r3, r2
 8006aba:	68fa      	ldr	r2, [r7, #12]
 8006abc:	431a      	orrs	r2, r3
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8006ac2:	2300      	movs	r3, #0
}
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	3714      	adds	r7, #20
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ace:	b004      	add	sp, #16
 8006ad0:	4770      	bx	lr
 8006ad2:	bf00      	nop
 8006ad4:	ffc02c00 	.word	0xffc02c00

08006ad8 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8006ad8:	b480      	push	{r7}
 8006ada:	b083      	sub	sp, #12
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	370c      	adds	r7, #12
 8006aea:	46bd      	mov	sp, r7
 8006aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af0:	4770      	bx	lr

08006af2 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8006af2:	b580      	push	{r7, lr}
 8006af4:	b082      	sub	sp, #8
 8006af6:	af00      	add	r7, sp, #0
 8006af8:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	f043 0203 	orr.w	r2, r3, #3
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	601a      	str	r2, [r3, #0]
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8006b06:	2002      	movs	r0, #2
 8006b08:	f7fa fbb0 	bl	800126c <HAL_Delay>

  return HAL_OK;
 8006b0c:	2300      	movs	r3, #0
}
 8006b0e:	4618      	mov	r0, r3
 8006b10:	3708      	adds	r7, #8
 8006b12:	46bd      	mov	sp, r7
 8006b14:	bd80      	pop	{r7, pc}

08006b16 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8006b16:	b480      	push	{r7}
 8006b18:	b083      	sub	sp, #12
 8006b1a:	af00      	add	r7, sp, #0
 8006b1c:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f003 0303 	and.w	r3, r3, #3
}
 8006b26:	4618      	mov	r0, r3
 8006b28:	370c      	adds	r7, #12
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b30:	4770      	bx	lr
	...

08006b34 <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8006b34:	b480      	push	{r7}
 8006b36:	b085      	sub	sp, #20
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
 8006b3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8006b3e:	2300      	movs	r3, #0
 8006b40:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	681a      	ldr	r2, [r3, #0]
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8006b52:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8006b58:	431a      	orrs	r2, r3
                       Command->CPSM);
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8006b5e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8006b60:	68fa      	ldr	r2, [r7, #12]
 8006b62:	4313      	orrs	r3, r2
 8006b64:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	68da      	ldr	r2, [r3, #12]
 8006b6a:	4b06      	ldr	r3, [pc, #24]	; (8006b84 <SDMMC_SendCommand+0x50>)
 8006b6c:	4013      	ands	r3, r2
 8006b6e:	68fa      	ldr	r2, [r7, #12]
 8006b70:	431a      	orrs	r2, r3
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006b76:	2300      	movs	r3, #0
}
 8006b78:	4618      	mov	r0, r3
 8006b7a:	3714      	adds	r7, #20
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b82:	4770      	bx	lr
 8006b84:	fffee0c0 	.word	0xfffee0c0

08006b88 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8006b88:	b480      	push	{r7}
 8006b8a:	b083      	sub	sp, #12
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	691b      	ldr	r3, [r3, #16]
 8006b94:	b2db      	uxtb	r3, r3
}
 8006b96:	4618      	mov	r0, r3
 8006b98:	370c      	adds	r7, #12
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba0:	4770      	bx	lr

08006ba2 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8006ba2:	b480      	push	{r7}
 8006ba4:	b085      	sub	sp, #20
 8006ba6:	af00      	add	r7, sp, #0
 8006ba8:	6078      	str	r0, [r7, #4]
 8006baa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	3314      	adds	r3, #20
 8006bb0:	461a      	mov	r2, r3
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	4413      	add	r3, r2
 8006bb6:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	681b      	ldr	r3, [r3, #0]
}
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	3714      	adds	r7, #20
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc6:	4770      	bx	lr

08006bc8 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8006bc8:	b480      	push	{r7}
 8006bca:	b085      	sub	sp, #20
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
 8006bd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	681a      	ldr	r2, [r3, #0]
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	685a      	ldr	r2, [r3, #4]
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8006bea:	683b      	ldr	r3, [r7, #0]
 8006bec:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8006bee:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8006bf0:	683b      	ldr	r3, [r7, #0]
 8006bf2:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8006bf4:	431a      	orrs	r2, r3
                       Data->DPSM);
 8006bf6:	683b      	ldr	r3, [r7, #0]
 8006bf8:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8006bfa:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8006bfc:	68fa      	ldr	r2, [r7, #12]
 8006bfe:	4313      	orrs	r3, r2
 8006c00:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c06:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	431a      	orrs	r2, r3
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8006c12:	2300      	movs	r3, #0

}
 8006c14:	4618      	mov	r0, r3
 8006c16:	3714      	adds	r7, #20
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1e:	4770      	bx	lr

08006c20 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b088      	sub	sp, #32
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
 8006c28:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8006c2e:	2310      	movs	r3, #16
 8006c30:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006c32:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006c36:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006c38:	2300      	movs	r3, #0
 8006c3a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006c3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006c40:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006c42:	f107 0308 	add.w	r3, r7, #8
 8006c46:	4619      	mov	r1, r3
 8006c48:	6878      	ldr	r0, [r7, #4]
 8006c4a:	f7ff ff73 	bl	8006b34 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8006c4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c52:	2110      	movs	r1, #16
 8006c54:	6878      	ldr	r0, [r7, #4]
 8006c56:	f000 f9b9 	bl	8006fcc <SDMMC_GetCmdResp1>
 8006c5a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006c5c:	69fb      	ldr	r3, [r7, #28]
}
 8006c5e:	4618      	mov	r0, r3
 8006c60:	3720      	adds	r7, #32
 8006c62:	46bd      	mov	sp, r7
 8006c64:	bd80      	pop	{r7, pc}

08006c66 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  addr Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8006c66:	b580      	push	{r7, lr}
 8006c68:	b08a      	sub	sp, #40	; 0x28
 8006c6a:	af00      	add	r7, sp, #0
 8006c6c:	60f8      	str	r0, [r7, #12]
 8006c6e:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8006c76:	2307      	movs	r3, #7
 8006c78:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006c7a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006c7e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006c80:	2300      	movs	r3, #0
 8006c82:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006c84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006c88:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006c8a:	f107 0310 	add.w	r3, r7, #16
 8006c8e:	4619      	mov	r1, r3
 8006c90:	68f8      	ldr	r0, [r7, #12]
 8006c92:	f7ff ff4f 	bl	8006b34 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8006c96:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c9a:	2107      	movs	r1, #7
 8006c9c:	68f8      	ldr	r0, [r7, #12]
 8006c9e:	f000 f995 	bl	8006fcc <SDMMC_GetCmdResp1>
 8006ca2:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8006ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	3728      	adds	r7, #40	; 0x28
 8006caa:	46bd      	mov	sp, r7
 8006cac:	bd80      	pop	{r7, pc}

08006cae <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8006cae:	b580      	push	{r7, lr}
 8006cb0:	b088      	sub	sp, #32
 8006cb2:	af00      	add	r7, sp, #0
 8006cb4:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8006cba:	2300      	movs	r3, #0
 8006cbc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006cc6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006cca:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006ccc:	f107 0308 	add.w	r3, r7, #8
 8006cd0:	4619      	mov	r1, r3
 8006cd2:	6878      	ldr	r0, [r7, #4]
 8006cd4:	f7ff ff2e 	bl	8006b34 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8006cd8:	6878      	ldr	r0, [r7, #4]
 8006cda:	f000 fbb9 	bl	8007450 <SDMMC_GetCmdError>
 8006cde:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006ce0:	69fb      	ldr	r3, [r7, #28]
}
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	3720      	adds	r7, #32
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	bd80      	pop	{r7, pc}

08006cea <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8006cea:	b580      	push	{r7, lr}
 8006cec:	b088      	sub	sp, #32
 8006cee:	af00      	add	r7, sp, #0
 8006cf0:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8006cf2:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8006cf6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8006cf8:	2308      	movs	r3, #8
 8006cfa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006cfc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006d00:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006d02:	2300      	movs	r3, #0
 8006d04:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006d06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006d0a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006d0c:	f107 0308 	add.w	r3, r7, #8
 8006d10:	4619      	mov	r1, r3
 8006d12:	6878      	ldr	r0, [r7, #4]
 8006d14:	f7ff ff0e 	bl	8006b34 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8006d18:	6878      	ldr	r0, [r7, #4]
 8006d1a:	f000 fb4b 	bl	80073b4 <SDMMC_GetCmdResp7>
 8006d1e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006d20:	69fb      	ldr	r3, [r7, #28]
}
 8006d22:	4618      	mov	r0, r3
 8006d24:	3720      	adds	r7, #32
 8006d26:	46bd      	mov	sp, r7
 8006d28:	bd80      	pop	{r7, pc}

08006d2a <SDMMC_CmdAppCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8006d2a:	b580      	push	{r7, lr}
 8006d2c:	b088      	sub	sp, #32
 8006d2e:	af00      	add	r7, sp, #0
 8006d30:	6078      	str	r0, [r7, #4]
 8006d32:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8006d38:	2337      	movs	r3, #55	; 0x37
 8006d3a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006d3c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006d40:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006d42:	2300      	movs	r3, #0
 8006d44:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006d46:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006d4a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006d4c:	f107 0308 	add.w	r3, r7, #8
 8006d50:	4619      	mov	r1, r3
 8006d52:	6878      	ldr	r0, [r7, #4]
 8006d54:	f7ff feee 	bl	8006b34 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8006d58:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d5c:	2137      	movs	r1, #55	; 0x37
 8006d5e:	6878      	ldr	r0, [r7, #4]
 8006d60:	f000 f934 	bl	8006fcc <SDMMC_GetCmdResp1>
 8006d64:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006d66:	69fb      	ldr	r3, [r7, #28]
}
 8006d68:	4618      	mov	r0, r3
 8006d6a:	3720      	adds	r7, #32
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	bd80      	pop	{r7, pc}

08006d70 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b088      	sub	sp, #32
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
 8006d78:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  sdmmc_cmdinit.Argument         = Argument;
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	60bb      	str	r3, [r7, #8]
#else
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8006d7e:	2329      	movs	r3, #41	; 0x29
 8006d80:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006d82:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006d86:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006d88:	2300      	movs	r3, #0
 8006d8a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006d8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006d90:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006d92:	f107 0308 	add.w	r3, r7, #8
 8006d96:	4619      	mov	r1, r3
 8006d98:	6878      	ldr	r0, [r7, #4]
 8006d9a:	f7ff fecb 	bl	8006b34 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8006d9e:	6878      	ldr	r0, [r7, #4]
 8006da0:	f000 fa50 	bl	8007244 <SDMMC_GetCmdResp3>
 8006da4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006da6:	69fb      	ldr	r3, [r7, #28]
}
 8006da8:	4618      	mov	r0, r3
 8006daa:	3720      	adds	r7, #32
 8006dac:	46bd      	mov	sp, r7
 8006dae:	bd80      	pop	{r7, pc}

08006db0 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  BusWidth BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b088      	sub	sp, #32
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
 8006db8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8006dba:	683b      	ldr	r3, [r7, #0]
 8006dbc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8006dbe:	2306      	movs	r3, #6
 8006dc0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006dc2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006dc6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006dc8:	2300      	movs	r3, #0
 8006dca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006dcc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006dd0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006dd2:	f107 0308 	add.w	r3, r7, #8
 8006dd6:	4619      	mov	r1, r3
 8006dd8:	6878      	ldr	r0, [r7, #4]
 8006dda:	f7ff feab 	bl	8006b34 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8006dde:	f241 3288 	movw	r2, #5000	; 0x1388
 8006de2:	2106      	movs	r1, #6
 8006de4:	6878      	ldr	r0, [r7, #4]
 8006de6:	f000 f8f1 	bl	8006fcc <SDMMC_GetCmdResp1>
 8006dea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006dec:	69fb      	ldr	r3, [r7, #28]
}
 8006dee:	4618      	mov	r0, r3
 8006df0:	3720      	adds	r7, #32
 8006df2:	46bd      	mov	sp, r7
 8006df4:	bd80      	pop	{r7, pc}

08006df6 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8006df6:	b580      	push	{r7, lr}
 8006df8:	b088      	sub	sp, #32
 8006dfa:	af00      	add	r7, sp, #0
 8006dfc:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8006dfe:	2300      	movs	r3, #0
 8006e00:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8006e02:	2333      	movs	r3, #51	; 0x33
 8006e04:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006e06:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006e0a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006e10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006e14:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006e16:	f107 0308 	add.w	r3, r7, #8
 8006e1a:	4619      	mov	r1, r3
 8006e1c:	6878      	ldr	r0, [r7, #4]
 8006e1e:	f7ff fe89 	bl	8006b34 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8006e22:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e26:	2133      	movs	r1, #51	; 0x33
 8006e28:	6878      	ldr	r0, [r7, #4]
 8006e2a:	f000 f8cf 	bl	8006fcc <SDMMC_GetCmdResp1>
 8006e2e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006e30:	69fb      	ldr	r3, [r7, #28]
}
 8006e32:	4618      	mov	r0, r3
 8006e34:	3720      	adds	r7, #32
 8006e36:	46bd      	mov	sp, r7
 8006e38:	bd80      	pop	{r7, pc}

08006e3a <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8006e3a:	b580      	push	{r7, lr}
 8006e3c:	b088      	sub	sp, #32
 8006e3e:	af00      	add	r7, sp, #0
 8006e40:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8006e42:	2300      	movs	r3, #0
 8006e44:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8006e46:	2302      	movs	r3, #2
 8006e48:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8006e4a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8006e4e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006e50:	2300      	movs	r3, #0
 8006e52:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006e54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006e58:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006e5a:	f107 0308 	add.w	r3, r7, #8
 8006e5e:	4619      	mov	r1, r3
 8006e60:	6878      	ldr	r0, [r7, #4]
 8006e62:	f7ff fe67 	bl	8006b34 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8006e66:	6878      	ldr	r0, [r7, #4]
 8006e68:	f000 f9a2 	bl	80071b0 <SDMMC_GetCmdResp2>
 8006e6c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006e6e:	69fb      	ldr	r3, [r7, #28]
}
 8006e70:	4618      	mov	r0, r3
 8006e72:	3720      	adds	r7, #32
 8006e74:	46bd      	mov	sp, r7
 8006e76:	bd80      	pop	{r7, pc}

08006e78 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	b088      	sub	sp, #32
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
 8006e80:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8006e86:	2309      	movs	r3, #9
 8006e88:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8006e8a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8006e8e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006e90:	2300      	movs	r3, #0
 8006e92:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006e94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006e98:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006e9a:	f107 0308 	add.w	r3, r7, #8
 8006e9e:	4619      	mov	r1, r3
 8006ea0:	6878      	ldr	r0, [r7, #4]
 8006ea2:	f7ff fe47 	bl	8006b34 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8006ea6:	6878      	ldr	r0, [r7, #4]
 8006ea8:	f000 f982 	bl	80071b0 <SDMMC_GetCmdResp2>
 8006eac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006eae:	69fb      	ldr	r3, [r7, #28]
}
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	3720      	adds	r7, #32
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	bd80      	pop	{r7, pc}

08006eb8 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pRCA Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	b088      	sub	sp, #32
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
 8006ec0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8006ec6:	2303      	movs	r3, #3
 8006ec8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006eca:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006ece:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006ed4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006ed8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006eda:	f107 0308 	add.w	r3, r7, #8
 8006ede:	4619      	mov	r1, r3
 8006ee0:	6878      	ldr	r0, [r7, #4]
 8006ee2:	f7ff fe27 	bl	8006b34 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8006ee6:	683a      	ldr	r2, [r7, #0]
 8006ee8:	2103      	movs	r1, #3
 8006eea:	6878      	ldr	r0, [r7, #4]
 8006eec:	f000 f9ea 	bl	80072c4 <SDMMC_GetCmdResp6>
 8006ef0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006ef2:	69fb      	ldr	r3, [r7, #28]
}
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	3720      	adds	r7, #32
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	bd80      	pop	{r7, pc}

08006efc <SDMMC_CmdSendStatus>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8006efc:	b580      	push	{r7, lr}
 8006efe:	b088      	sub	sp, #32
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
 8006f04:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8006f06:	683b      	ldr	r3, [r7, #0]
 8006f08:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8006f0a:	230d      	movs	r3, #13
 8006f0c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006f0e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006f12:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006f14:	2300      	movs	r3, #0
 8006f16:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006f18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006f1c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006f1e:	f107 0308 	add.w	r3, r7, #8
 8006f22:	4619      	mov	r1, r3
 8006f24:	6878      	ldr	r0, [r7, #4]
 8006f26:	f7ff fe05 	bl	8006b34 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8006f2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f2e:	210d      	movs	r1, #13
 8006f30:	6878      	ldr	r0, [r7, #4]
 8006f32:	f000 f84b 	bl	8006fcc <SDMMC_GetCmdResp1>
 8006f36:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006f38:	69fb      	ldr	r3, [r7, #28]
}
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	3720      	adds	r7, #32
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	bd80      	pop	{r7, pc}

08006f42 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 8006f42:	b580      	push	{r7, lr}
 8006f44:	b088      	sub	sp, #32
 8006f46:	af00      	add	r7, sp, #0
 8006f48:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 8006f4e:	230d      	movs	r3, #13
 8006f50:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006f52:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006f56:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006f58:	2300      	movs	r3, #0
 8006f5a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006f5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006f60:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006f62:	f107 0308 	add.w	r3, r7, #8
 8006f66:	4619      	mov	r1, r3
 8006f68:	6878      	ldr	r0, [r7, #4]
 8006f6a:	f7ff fde3 	bl	8006b34 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 8006f6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f72:	210d      	movs	r1, #13
 8006f74:	6878      	ldr	r0, [r7, #4]
 8006f76:	f000 f829 	bl	8006fcc <SDMMC_GetCmdResp1>
 8006f7a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006f7c:	69fb      	ldr	r3, [r7, #28]
}
 8006f7e:	4618      	mov	r0, r3
 8006f80:	3720      	adds	r7, #32
 8006f82:	46bd      	mov	sp, r7
 8006f84:	bd80      	pop	{r7, pc}

08006f86 <SDMMC_CmdVoltageSwitch>:
  *         condition register (OCR)
  * @param  None
  * @retval HAL status
  */
uint32_t SDMMC_CmdVoltageSwitch(SDMMC_TypeDef *SDMMCx)
{
 8006f86:	b580      	push	{r7, lr}
 8006f88:	b088      	sub	sp, #32
 8006f8a:	af00      	add	r7, sp, #0
 8006f8c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0x00000000;
 8006f8e:	2300      	movs	r3, #0
 8006f90:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 8006f92:	230b      	movs	r3, #11
 8006f94:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006f96:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006f9a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006fa0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006fa4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006fa6:	f107 0308 	add.w	r3, r7, #8
 8006faa:	4619      	mov	r1, r3
 8006fac:	6878      	ldr	r0, [r7, #4]
 8006fae:	f7ff fdc1 	bl	8006b34 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 8006fb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8006fb6:	210b      	movs	r1, #11
 8006fb8:	6878      	ldr	r0, [r7, #4]
 8006fba:	f000 f807 	bl	8006fcc <SDMMC_GetCmdResp1>
 8006fbe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006fc0:	69fb      	ldr	r3, [r7, #28]
}
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	3720      	adds	r7, #32
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	bd80      	pop	{r7, pc}
	...

08006fcc <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b088      	sub	sp, #32
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	60f8      	str	r0, [r7, #12]
 8006fd4:	460b      	mov	r3, r1
 8006fd6:	607a      	str	r2, [r7, #4]
 8006fd8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8006fda:	4b70      	ldr	r3, [pc, #448]	; (800719c <SDMMC_GetCmdResp1+0x1d0>)
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	4a70      	ldr	r2, [pc, #448]	; (80071a0 <SDMMC_GetCmdResp1+0x1d4>)
 8006fe0:	fba2 2303 	umull	r2, r3, r2, r3
 8006fe4:	0a5a      	lsrs	r2, r3, #9
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	fb02 f303 	mul.w	r3, r2, r3
 8006fec:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8006fee:	69fb      	ldr	r3, [r7, #28]
 8006ff0:	1e5a      	subs	r2, r3, #1
 8006ff2:	61fa      	str	r2, [r7, #28]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d102      	bne.n	8006ffe <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006ff8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006ffc:	e0c9      	b.n	8007192 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007002:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8007004:	69ba      	ldr	r2, [r7, #24]
 8007006:	4b67      	ldr	r3, [pc, #412]	; (80071a4 <SDMMC_GetCmdResp1+0x1d8>)
 8007008:	4013      	ands	r3, r2
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800700a:	2b00      	cmp	r3, #0
 800700c:	d0ef      	beq.n	8006fee <SDMMC_GetCmdResp1+0x22>
 800700e:	69bb      	ldr	r3, [r7, #24]
 8007010:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8007014:	2b00      	cmp	r3, #0
 8007016:	d1ea      	bne.n	8006fee <SDMMC_GetCmdResp1+0x22>
#else
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800701c:	f003 0304 	and.w	r3, r3, #4
 8007020:	2b00      	cmp	r3, #0
 8007022:	d004      	beq.n	800702e <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	2204      	movs	r2, #4
 8007028:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800702a:	2304      	movs	r3, #4
 800702c:	e0b1      	b.n	8007192 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007032:	f003 0301 	and.w	r3, r3, #1
 8007036:	2b00      	cmp	r3, #0
 8007038:	d004      	beq.n	8007044 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	2201      	movs	r2, #1
 800703e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007040:	2301      	movs	r3, #1
 8007042:	e0a6      	b.n	8007192 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	4a58      	ldr	r2, [pc, #352]	; (80071a8 <SDMMC_GetCmdResp1+0x1dc>)
 8007048:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800704a:	68f8      	ldr	r0, [r7, #12]
 800704c:	f7ff fd9c 	bl	8006b88 <SDMMC_GetCommandResponse>
 8007050:	4603      	mov	r3, r0
 8007052:	461a      	mov	r2, r3
 8007054:	7afb      	ldrb	r3, [r7, #11]
 8007056:	4293      	cmp	r3, r2
 8007058:	d001      	beq.n	800705e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800705a:	2301      	movs	r3, #1
 800705c:	e099      	b.n	8007192 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800705e:	2100      	movs	r1, #0
 8007060:	68f8      	ldr	r0, [r7, #12]
 8007062:	f7ff fd9e 	bl	8006ba2 <SDMMC_GetResponse>
 8007066:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8007068:	697a      	ldr	r2, [r7, #20]
 800706a:	4b50      	ldr	r3, [pc, #320]	; (80071ac <SDMMC_GetCmdResp1+0x1e0>)
 800706c:	4013      	ands	r3, r2
 800706e:	2b00      	cmp	r3, #0
 8007070:	d101      	bne.n	8007076 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8007072:	2300      	movs	r3, #0
 8007074:	e08d      	b.n	8007192 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8007076:	697b      	ldr	r3, [r7, #20]
 8007078:	2b00      	cmp	r3, #0
 800707a:	da02      	bge.n	8007082 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800707c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007080:	e087      	b.n	8007192 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8007082:	697b      	ldr	r3, [r7, #20]
 8007084:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007088:	2b00      	cmp	r3, #0
 800708a:	d001      	beq.n	8007090 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800708c:	2340      	movs	r3, #64	; 0x40
 800708e:	e080      	b.n	8007192 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8007090:	697b      	ldr	r3, [r7, #20]
 8007092:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007096:	2b00      	cmp	r3, #0
 8007098:	d001      	beq.n	800709e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800709a:	2380      	movs	r3, #128	; 0x80
 800709c:	e079      	b.n	8007192 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800709e:	697b      	ldr	r3, [r7, #20]
 80070a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d002      	beq.n	80070ae <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80070a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80070ac:	e071      	b.n	8007192 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80070ae:	697b      	ldr	r3, [r7, #20]
 80070b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d002      	beq.n	80070be <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80070b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80070bc:	e069      	b.n	8007192 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80070be:	697b      	ldr	r3, [r7, #20]
 80070c0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d002      	beq.n	80070ce <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80070c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80070cc:	e061      	b.n	8007192 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80070ce:	697b      	ldr	r3, [r7, #20]
 80070d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d002      	beq.n	80070de <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80070d8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80070dc:	e059      	b.n	8007192 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80070de:	697b      	ldr	r3, [r7, #20]
 80070e0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d002      	beq.n	80070ee <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80070e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80070ec:	e051      	b.n	8007192 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80070ee:	697b      	ldr	r3, [r7, #20]
 80070f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d002      	beq.n	80070fe <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80070f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80070fc:	e049      	b.n	8007192 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80070fe:	697b      	ldr	r3, [r7, #20]
 8007100:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007104:	2b00      	cmp	r3, #0
 8007106:	d002      	beq.n	800710e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8007108:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800710c:	e041      	b.n	8007192 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800710e:	697b      	ldr	r3, [r7, #20]
 8007110:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007114:	2b00      	cmp	r3, #0
 8007116:	d002      	beq.n	800711e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8007118:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800711c:	e039      	b.n	8007192 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800711e:	697b      	ldr	r3, [r7, #20]
 8007120:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007124:	2b00      	cmp	r3, #0
 8007126:	d002      	beq.n	800712e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8007128:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800712c:	e031      	b.n	8007192 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800712e:	697b      	ldr	r3, [r7, #20]
 8007130:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007134:	2b00      	cmp	r3, #0
 8007136:	d002      	beq.n	800713e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8007138:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800713c:	e029      	b.n	8007192 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800713e:	697b      	ldr	r3, [r7, #20]
 8007140:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007144:	2b00      	cmp	r3, #0
 8007146:	d002      	beq.n	800714e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8007148:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800714c:	e021      	b.n	8007192 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800714e:	697b      	ldr	r3, [r7, #20]
 8007150:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007154:	2b00      	cmp	r3, #0
 8007156:	d002      	beq.n	800715e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8007158:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800715c:	e019      	b.n	8007192 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800715e:	697b      	ldr	r3, [r7, #20]
 8007160:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007164:	2b00      	cmp	r3, #0
 8007166:	d002      	beq.n	800716e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8007168:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800716c:	e011      	b.n	8007192 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800716e:	697b      	ldr	r3, [r7, #20]
 8007170:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007174:	2b00      	cmp	r3, #0
 8007176:	d002      	beq.n	800717e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8007178:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800717c:	e009      	b.n	8007192 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800717e:	697b      	ldr	r3, [r7, #20]
 8007180:	f003 0308 	and.w	r3, r3, #8
 8007184:	2b00      	cmp	r3, #0
 8007186:	d002      	beq.n	800718e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8007188:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800718c:	e001      	b.n	8007192 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800718e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8007192:	4618      	mov	r0, r3
 8007194:	3720      	adds	r7, #32
 8007196:	46bd      	mov	sp, r7
 8007198:	bd80      	pop	{r7, pc}
 800719a:	bf00      	nop
 800719c:	20000000 	.word	0x20000000
 80071a0:	10624dd3 	.word	0x10624dd3
 80071a4:	00200045 	.word	0x00200045
 80071a8:	002000c5 	.word	0x002000c5
 80071ac:	fdffe008 	.word	0xfdffe008

080071b0 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 80071b0:	b480      	push	{r7}
 80071b2:	b085      	sub	sp, #20
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80071b8:	4b1f      	ldr	r3, [pc, #124]	; (8007238 <SDMMC_GetCmdResp2+0x88>)
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	4a1f      	ldr	r2, [pc, #124]	; (800723c <SDMMC_GetCmdResp2+0x8c>)
 80071be:	fba2 2303 	umull	r2, r3, r2, r3
 80071c2:	0a5b      	lsrs	r3, r3, #9
 80071c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80071c8:	fb02 f303 	mul.w	r3, r2, r3
 80071cc:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	1e5a      	subs	r2, r3, #1
 80071d2:	60fa      	str	r2, [r7, #12]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d102      	bne.n	80071de <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80071d8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80071dc:	e026      	b.n	800722c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071e2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80071e4:	68bb      	ldr	r3, [r7, #8]
 80071e6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d0ef      	beq.n	80071ce <SDMMC_GetCmdResp2+0x1e>
 80071ee:	68bb      	ldr	r3, [r7, #8]
 80071f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d1ea      	bne.n	80071ce <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071fc:	f003 0304 	and.w	r3, r3, #4
 8007200:	2b00      	cmp	r3, #0
 8007202:	d004      	beq.n	800720e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2204      	movs	r2, #4
 8007208:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800720a:	2304      	movs	r3, #4
 800720c:	e00e      	b.n	800722c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007212:	f003 0301 	and.w	r3, r3, #1
 8007216:	2b00      	cmp	r3, #0
 8007218:	d004      	beq.n	8007224 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	2201      	movs	r2, #1
 800721e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007220:	2301      	movs	r3, #1
 8007222:	e003      	b.n	800722c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	4a06      	ldr	r2, [pc, #24]	; (8007240 <SDMMC_GetCmdResp2+0x90>)
 8007228:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800722a:	2300      	movs	r3, #0
}
 800722c:	4618      	mov	r0, r3
 800722e:	3714      	adds	r7, #20
 8007230:	46bd      	mov	sp, r7
 8007232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007236:	4770      	bx	lr
 8007238:	20000000 	.word	0x20000000
 800723c:	10624dd3 	.word	0x10624dd3
 8007240:	002000c5 	.word	0x002000c5

08007244 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8007244:	b480      	push	{r7}
 8007246:	b085      	sub	sp, #20
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800724c:	4b1a      	ldr	r3, [pc, #104]	; (80072b8 <SDMMC_GetCmdResp3+0x74>)
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	4a1a      	ldr	r2, [pc, #104]	; (80072bc <SDMMC_GetCmdResp3+0x78>)
 8007252:	fba2 2303 	umull	r2, r3, r2, r3
 8007256:	0a5b      	lsrs	r3, r3, #9
 8007258:	f241 3288 	movw	r2, #5000	; 0x1388
 800725c:	fb02 f303 	mul.w	r3, r2, r3
 8007260:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	1e5a      	subs	r2, r3, #1
 8007266:	60fa      	str	r2, [r7, #12]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d102      	bne.n	8007272 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800726c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007270:	e01b      	b.n	80072aa <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007276:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007278:	68bb      	ldr	r3, [r7, #8]
 800727a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800727e:	2b00      	cmp	r3, #0
 8007280:	d0ef      	beq.n	8007262 <SDMMC_GetCmdResp3+0x1e>
 8007282:	68bb      	ldr	r3, [r7, #8]
 8007284:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007288:	2b00      	cmp	r3, #0
 800728a:	d1ea      	bne.n	8007262 <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007290:	f003 0304 	and.w	r3, r3, #4
 8007294:	2b00      	cmp	r3, #0
 8007296:	d004      	beq.n	80072a2 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2204      	movs	r2, #4
 800729c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800729e:	2304      	movs	r3, #4
 80072a0:	e003      	b.n	80072aa <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	4a06      	ldr	r2, [pc, #24]	; (80072c0 <SDMMC_GetCmdResp3+0x7c>)
 80072a6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80072a8:	2300      	movs	r3, #0
}
 80072aa:	4618      	mov	r0, r3
 80072ac:	3714      	adds	r7, #20
 80072ae:	46bd      	mov	sp, r7
 80072b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b4:	4770      	bx	lr
 80072b6:	bf00      	nop
 80072b8:	20000000 	.word	0x20000000
 80072bc:	10624dd3 	.word	0x10624dd3
 80072c0:	002000c5 	.word	0x002000c5

080072c4 <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80072c4:	b580      	push	{r7, lr}
 80072c6:	b088      	sub	sp, #32
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	60f8      	str	r0, [r7, #12]
 80072cc:	460b      	mov	r3, r1
 80072ce:	607a      	str	r2, [r7, #4]
 80072d0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80072d2:	4b35      	ldr	r3, [pc, #212]	; (80073a8 <SDMMC_GetCmdResp6+0xe4>)
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	4a35      	ldr	r2, [pc, #212]	; (80073ac <SDMMC_GetCmdResp6+0xe8>)
 80072d8:	fba2 2303 	umull	r2, r3, r2, r3
 80072dc:	0a5b      	lsrs	r3, r3, #9
 80072de:	f241 3288 	movw	r2, #5000	; 0x1388
 80072e2:	fb02 f303 	mul.w	r3, r2, r3
 80072e6:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 80072e8:	69fb      	ldr	r3, [r7, #28]
 80072ea:	1e5a      	subs	r2, r3, #1
 80072ec:	61fa      	str	r2, [r7, #28]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d102      	bne.n	80072f8 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 80072f2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80072f6:	e052      	b.n	800739e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072fc:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80072fe:	69bb      	ldr	r3, [r7, #24]
 8007300:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8007304:	2b00      	cmp	r3, #0
 8007306:	d0ef      	beq.n	80072e8 <SDMMC_GetCmdResp6+0x24>
 8007308:	69bb      	ldr	r3, [r7, #24]
 800730a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800730e:	2b00      	cmp	r3, #0
 8007310:	d1ea      	bne.n	80072e8 <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007316:	f003 0304 	and.w	r3, r3, #4
 800731a:	2b00      	cmp	r3, #0
 800731c:	d004      	beq.n	8007328 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	2204      	movs	r2, #4
 8007322:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007324:	2304      	movs	r3, #4
 8007326:	e03a      	b.n	800739e <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800732c:	f003 0301 	and.w	r3, r3, #1
 8007330:	2b00      	cmp	r3, #0
 8007332:	d004      	beq.n	800733e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	2201      	movs	r2, #1
 8007338:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800733a:	2301      	movs	r3, #1
 800733c:	e02f      	b.n	800739e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800733e:	68f8      	ldr	r0, [r7, #12]
 8007340:	f7ff fc22 	bl	8006b88 <SDMMC_GetCommandResponse>
 8007344:	4603      	mov	r3, r0
 8007346:	461a      	mov	r2, r3
 8007348:	7afb      	ldrb	r3, [r7, #11]
 800734a:	4293      	cmp	r3, r2
 800734c:	d001      	beq.n	8007352 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800734e:	2301      	movs	r3, #1
 8007350:	e025      	b.n	800739e <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	4a16      	ldr	r2, [pc, #88]	; (80073b0 <SDMMC_GetCmdResp6+0xec>)
 8007356:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8007358:	2100      	movs	r1, #0
 800735a:	68f8      	ldr	r0, [r7, #12]
 800735c:	f7ff fc21 	bl	8006ba2 <SDMMC_GetResponse>
 8007360:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8007362:	697b      	ldr	r3, [r7, #20]
 8007364:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8007368:	2b00      	cmp	r3, #0
 800736a:	d106      	bne.n	800737a <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800736c:	697b      	ldr	r3, [r7, #20]
 800736e:	0c1b      	lsrs	r3, r3, #16
 8007370:	b29a      	uxth	r2, r3
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 8007376:	2300      	movs	r3, #0
 8007378:	e011      	b.n	800739e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800737a:	697b      	ldr	r3, [r7, #20]
 800737c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007380:	2b00      	cmp	r3, #0
 8007382:	d002      	beq.n	800738a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007384:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007388:	e009      	b.n	800739e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800738a:	697b      	ldr	r3, [r7, #20]
 800738c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007390:	2b00      	cmp	r3, #0
 8007392:	d002      	beq.n	800739a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007394:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007398:	e001      	b.n	800739e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800739a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800739e:	4618      	mov	r0, r3
 80073a0:	3720      	adds	r7, #32
 80073a2:	46bd      	mov	sp, r7
 80073a4:	bd80      	pop	{r7, pc}
 80073a6:	bf00      	nop
 80073a8:	20000000 	.word	0x20000000
 80073ac:	10624dd3 	.word	0x10624dd3
 80073b0:	002000c5 	.word	0x002000c5

080073b4 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 80073b4:	b480      	push	{r7}
 80073b6:	b085      	sub	sp, #20
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80073bc:	4b22      	ldr	r3, [pc, #136]	; (8007448 <SDMMC_GetCmdResp7+0x94>)
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	4a22      	ldr	r2, [pc, #136]	; (800744c <SDMMC_GetCmdResp7+0x98>)
 80073c2:	fba2 2303 	umull	r2, r3, r2, r3
 80073c6:	0a5b      	lsrs	r3, r3, #9
 80073c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80073cc:	fb02 f303 	mul.w	r3, r2, r3
 80073d0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	1e5a      	subs	r2, r3, #1
 80073d6:	60fa      	str	r2, [r7, #12]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d102      	bne.n	80073e2 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80073dc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80073e0:	e02c      	b.n	800743c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073e6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80073e8:	68bb      	ldr	r3, [r7, #8]
 80073ea:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d0ef      	beq.n	80073d2 <SDMMC_GetCmdResp7+0x1e>
 80073f2:	68bb      	ldr	r3, [r7, #8]
 80073f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d1ea      	bne.n	80073d2 <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007400:	f003 0304 	and.w	r3, r3, #4
 8007404:	2b00      	cmp	r3, #0
 8007406:	d004      	beq.n	8007412 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2204      	movs	r2, #4
 800740c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800740e:	2304      	movs	r3, #4
 8007410:	e014      	b.n	800743c <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007416:	f003 0301 	and.w	r3, r3, #1
 800741a:	2b00      	cmp	r3, #0
 800741c:	d004      	beq.n	8007428 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	2201      	movs	r2, #1
 8007422:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007424:	2301      	movs	r3, #1
 8007426:	e009      	b.n	800743c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800742c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007430:	2b00      	cmp	r3, #0
 8007432:	d002      	beq.n	800743a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2240      	movs	r2, #64	; 0x40
 8007438:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800743a:	2300      	movs	r3, #0

}
 800743c:	4618      	mov	r0, r3
 800743e:	3714      	adds	r7, #20
 8007440:	46bd      	mov	sp, r7
 8007442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007446:	4770      	bx	lr
 8007448:	20000000 	.word	0x20000000
 800744c:	10624dd3 	.word	0x10624dd3

08007450 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8007450:	b480      	push	{r7}
 8007452:	b085      	sub	sp, #20
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007458:	4b11      	ldr	r3, [pc, #68]	; (80074a0 <SDMMC_GetCmdError+0x50>)
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	4a11      	ldr	r2, [pc, #68]	; (80074a4 <SDMMC_GetCmdError+0x54>)
 800745e:	fba2 2303 	umull	r2, r3, r2, r3
 8007462:	0a5b      	lsrs	r3, r3, #9
 8007464:	f241 3288 	movw	r2, #5000	; 0x1388
 8007468:	fb02 f303 	mul.w	r3, r2, r3
 800746c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	1e5a      	subs	r2, r3, #1
 8007472:	60fa      	str	r2, [r7, #12]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d102      	bne.n	800747e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007478:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800747c:	e009      	b.n	8007492 <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007482:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007486:	2b00      	cmp	r3, #0
 8007488:	d0f1      	beq.n	800746e <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	4a06      	ldr	r2, [pc, #24]	; (80074a8 <SDMMC_GetCmdError+0x58>)
 800748e:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 8007490:	2300      	movs	r3, #0
}
 8007492:	4618      	mov	r0, r3
 8007494:	3714      	adds	r7, #20
 8007496:	46bd      	mov	sp, r7
 8007498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749c:	4770      	bx	lr
 800749e:	bf00      	nop
 80074a0:	20000000 	.word	0x20000000
 80074a4:	10624dd3 	.word	0x10624dd3
 80074a8:	002000c5 	.word	0x002000c5

080074ac <__libc_init_array>:
 80074ac:	b570      	push	{r4, r5, r6, lr}
 80074ae:	4d0d      	ldr	r5, [pc, #52]	; (80074e4 <__libc_init_array+0x38>)
 80074b0:	4c0d      	ldr	r4, [pc, #52]	; (80074e8 <__libc_init_array+0x3c>)
 80074b2:	1b64      	subs	r4, r4, r5
 80074b4:	10a4      	asrs	r4, r4, #2
 80074b6:	2600      	movs	r6, #0
 80074b8:	42a6      	cmp	r6, r4
 80074ba:	d109      	bne.n	80074d0 <__libc_init_array+0x24>
 80074bc:	4d0b      	ldr	r5, [pc, #44]	; (80074ec <__libc_init_array+0x40>)
 80074be:	4c0c      	ldr	r4, [pc, #48]	; (80074f0 <__libc_init_array+0x44>)
 80074c0:	f000 f820 	bl	8007504 <_init>
 80074c4:	1b64      	subs	r4, r4, r5
 80074c6:	10a4      	asrs	r4, r4, #2
 80074c8:	2600      	movs	r6, #0
 80074ca:	42a6      	cmp	r6, r4
 80074cc:	d105      	bne.n	80074da <__libc_init_array+0x2e>
 80074ce:	bd70      	pop	{r4, r5, r6, pc}
 80074d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80074d4:	4798      	blx	r3
 80074d6:	3601      	adds	r6, #1
 80074d8:	e7ee      	b.n	80074b8 <__libc_init_array+0xc>
 80074da:	f855 3b04 	ldr.w	r3, [r5], #4
 80074de:	4798      	blx	r3
 80074e0:	3601      	adds	r6, #1
 80074e2:	e7f2      	b.n	80074ca <__libc_init_array+0x1e>
 80074e4:	08007564 	.word	0x08007564
 80074e8:	08007564 	.word	0x08007564
 80074ec:	08007564 	.word	0x08007564
 80074f0:	08007568 	.word	0x08007568

080074f4 <memset>:
 80074f4:	4402      	add	r2, r0
 80074f6:	4603      	mov	r3, r0
 80074f8:	4293      	cmp	r3, r2
 80074fa:	d100      	bne.n	80074fe <memset+0xa>
 80074fc:	4770      	bx	lr
 80074fe:	f803 1b01 	strb.w	r1, [r3], #1
 8007502:	e7f9      	b.n	80074f8 <memset+0x4>

08007504 <_init>:
 8007504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007506:	bf00      	nop
 8007508:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800750a:	bc08      	pop	{r3}
 800750c:	469e      	mov	lr, r3
 800750e:	4770      	bx	lr

08007510 <_fini>:
 8007510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007512:	bf00      	nop
 8007514:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007516:	bc08      	pop	{r3}
 8007518:	469e      	mov	lr, r3
 800751a:	4770      	bx	lr
