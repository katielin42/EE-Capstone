
STM32_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d4e0  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000168  0800d6a0  0800d6a0  0001d6a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d808  0800d808  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  0800d808  0800d808  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d808  0800d808  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d808  0800d808  0001d808  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d80c  0800d80c  0001d80c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800d810  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001d9c  20000078  0800d888  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000c04  20001e14  0800d888  00021e14  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002d5f4  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005aba  00000000  00000000  0004d69c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000025e0  00000000  00000000  00053158  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002368  00000000  00000000  00055738  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00038bae  00000000  00000000  00057aa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002d014  00000000  00000000  0009064e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0014fe19  00000000  00000000  000bd662  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0020d47b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a3d8  00000000  00000000  0020d4cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000078 	.word	0x20000078
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800d688 	.word	0x0800d688

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	2000007c 	.word	0x2000007c
 80001fc:	0800d688 	.word	0x0800d688

08000200 <ADC_Init>:
/* USER CODE BEGIN PV */
/* Definitions for threads */


//initialize ADC thread
void ADC_Init(ADC_HandleTypeDef *argument) {
 8000200:	b580      	push	{r7, lr}
 8000202:	b084      	sub	sp, #16
 8000204:	af00      	add	r7, sp, #0
 8000206:	6078      	str	r0, [r7, #4]
	ADC_HandleTypeDef *hadc = argument;
 8000208:	687b      	ldr	r3, [r7, #4]
 800020a:	60fb      	str	r3, [r7, #12]
	ADC_semHandle = osSemaphoreNew(1, 1, &ADC_sem_attributes);
 800020c:	4a08      	ldr	r2, [pc, #32]	; (8000230 <ADC_Init+0x30>)
 800020e:	2101      	movs	r1, #1
 8000210:	2001      	movs	r0, #1
 8000212:	f009 fdeb 	bl	8009dec <osSemaphoreNew>
 8000216:	4603      	mov	r3, r0
 8000218:	4a06      	ldr	r2, [pc, #24]	; (8000234 <ADC_Init+0x34>)
 800021a:	6013      	str	r3, [r2, #0]
	HAL_ADC_Start_DMA(hadc, (uint32_t*)ADC_buffer_raw, 9);
 800021c:	2209      	movs	r2, #9
 800021e:	4906      	ldr	r1, [pc, #24]	; (8000238 <ADC_Init+0x38>)
 8000220:	68f8      	ldr	r0, [r7, #12]
 8000222:	f001 fd19 	bl	8001c58 <HAL_ADC_Start_DMA>
}
 8000226:	bf00      	nop
 8000228:	3710      	adds	r7, #16
 800022a:	46bd      	mov	sp, r7
 800022c:	bd80      	pop	{r7, pc}
 800022e:	bf00      	nop
 8000230:	0800d6e4 	.word	0x0800d6e4
 8000234:	200000b0 	.word	0x200000b0
 8000238:	20000094 	.word	0x20000094

0800023c <HAL_ADC_ConvCpltCallback>:

//since ADC 1 has 3 pins we are getting data from, our adc buffer raw has space for 9 values
//aka 3x of adc pins.
//We average out the 3 ADC values for each pin
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){
 800023c:	b580      	push	{r7, lr}
 800023e:	b084      	sub	sp, #16
 8000240:	af00      	add	r7, sp, #0
 8000242:	6078      	str	r0, [r7, #4]
	// ADC averaging
	for(int i = 0 ; i < 3; i++) {
 8000244:	2300      	movs	r3, #0
 8000246:	60fb      	str	r3, [r7, #12]
 8000248:	e01d      	b.n	8000286 <HAL_ADC_ConvCpltCallback+0x4a>
		ADC_buffer_processed[i] = (ADC_buffer_raw[0 + i] + ADC_buffer_raw[3 + i] + ADC_buffer_raw[6 + i])/3;
 800024a:	4a15      	ldr	r2, [pc, #84]	; (80002a0 <HAL_ADC_ConvCpltCallback+0x64>)
 800024c:	68fb      	ldr	r3, [r7, #12]
 800024e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000252:	4619      	mov	r1, r3
 8000254:	68fb      	ldr	r3, [r7, #12]
 8000256:	3303      	adds	r3, #3
 8000258:	4a11      	ldr	r2, [pc, #68]	; (80002a0 <HAL_ADC_ConvCpltCallback+0x64>)
 800025a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800025e:	440b      	add	r3, r1
 8000260:	68fa      	ldr	r2, [r7, #12]
 8000262:	3206      	adds	r2, #6
 8000264:	490e      	ldr	r1, [pc, #56]	; (80002a0 <HAL_ADC_ConvCpltCallback+0x64>)
 8000266:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 800026a:	4413      	add	r3, r2
 800026c:	4a0d      	ldr	r2, [pc, #52]	; (80002a4 <HAL_ADC_ConvCpltCallback+0x68>)
 800026e:	fb82 1203 	smull	r1, r2, r2, r3
 8000272:	17db      	asrs	r3, r3, #31
 8000274:	1ad3      	subs	r3, r2, r3
 8000276:	b299      	uxth	r1, r3
 8000278:	4a0b      	ldr	r2, [pc, #44]	; (80002a8 <HAL_ADC_ConvCpltCallback+0x6c>)
 800027a:	68fb      	ldr	r3, [r7, #12]
 800027c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int i = 0 ; i < 3; i++) {
 8000280:	68fb      	ldr	r3, [r7, #12]
 8000282:	3301      	adds	r3, #1
 8000284:	60fb      	str	r3, [r7, #12]
 8000286:	68fb      	ldr	r3, [r7, #12]
 8000288:	2b02      	cmp	r3, #2
 800028a:	ddde      	ble.n	800024a <HAL_ADC_ConvCpltCallback+0xe>
	}
	osSemaphoreRelease(ADC_semHandle);
 800028c:	4b07      	ldr	r3, [pc, #28]	; (80002ac <HAL_ADC_ConvCpltCallback+0x70>)
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	4618      	mov	r0, r3
 8000292:	f009 fe87 	bl	8009fa4 <osSemaphoreRelease>
}
 8000296:	bf00      	nop
 8000298:	3710      	adds	r7, #16
 800029a:	46bd      	mov	sp, r7
 800029c:	bd80      	pop	{r7, pc}
 800029e:	bf00      	nop
 80002a0:	20000094 	.word	0x20000094
 80002a4:	55555556 	.word	0x55555556
 80002a8:	200000a8 	.word	0x200000a8
 80002ac:	200000b0 	.word	0x200000b0

080002b0 <controller_init>:

///main controller loop///
void controller_state_machine(void *args);

///controller initialization///
void controller_init(void){
 80002b0:	b580      	push	{r7, lr}
 80002b2:	af00      	add	r7, sp, #0
	/* creation of  mutex, need to add the threads accessing the buffer resource*/
	mutex_1 = osMutexNew(&myMutex01_attributes);
 80002b4:	4807      	ldr	r0, [pc, #28]	; (80002d4 <controller_init+0x24>)
 80002b6:	f009 fd13 	bl	8009ce0 <osMutexNew>
 80002ba:	4603      	mov	r3, r0
 80002bc:	4a06      	ldr	r2, [pc, #24]	; (80002d8 <controller_init+0x28>)
 80002be:	6013      	str	r3, [r2, #0]
	///initialize a new thread for controller state machine
	thr_1 = osThreadNew(controller_state_machine, NULL, &thr_1_attributes);
 80002c0:	4a06      	ldr	r2, [pc, #24]	; (80002dc <controller_init+0x2c>)
 80002c2:	2100      	movs	r1, #0
 80002c4:	4806      	ldr	r0, [pc, #24]	; (80002e0 <controller_init+0x30>)
 80002c6:	f009 fc5e 	bl	8009b86 <osThreadNew>
 80002ca:	4603      	mov	r3, r0
 80002cc:	4a05      	ldr	r2, [pc, #20]	; (80002e4 <controller_init+0x34>)
 80002ce:	6013      	str	r3, [r2, #0]
};
 80002d0:	bf00      	nop
 80002d2:	bd80      	pop	{r7, pc}
 80002d4:	0800d6f4 	.word	0x0800d6f4
 80002d8:	20000154 	.word	0x20000154
 80002dc:	0800d704 	.word	0x0800d704
 80002e0:	080002e9 	.word	0x080002e9
 80002e4:	20000158 	.word	0x20000158

080002e8 <controller_state_machine>:
void APPS_sensor_1_fault(void){};
void APPS_sensor_2_fault(void){};
void BSE_fault(void){};
void limit_voltage_fault(void){};

void controller_state_machine(void *args){
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b082      	sub	sp, #8
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	6078      	str	r0, [r7, #4]
	  for(;;)
	  {
		  osSemaphoreAcquire(ADC_semHandle, ticks);
 80002f0:	4b05      	ldr	r3, [pc, #20]	; (8000308 <controller_state_machine+0x20>)
 80002f2:	681b      	ldr	r3, [r3, #0]
 80002f4:	4a05      	ldr	r2, [pc, #20]	; (800030c <controller_state_machine+0x24>)
 80002f6:	6812      	ldr	r2, [r2, #0]
 80002f8:	4611      	mov	r1, r2
 80002fa:	4618      	mov	r0, r3
 80002fc:	f009 fe00 	bl	8009f00 <osSemaphoreAcquire>
	    osDelay(1);
 8000300:	2001      	movs	r0, #1
 8000302:	f009 fcd2 	bl	8009caa <osDelay>
		  osSemaphoreAcquire(ADC_semHandle, ticks);
 8000306:	e7f3      	b.n	80002f0 <controller_state_machine+0x8>
 8000308:	200000b0 	.word	0x200000b0
 800030c:	20000000 	.word	0x20000000

08000310 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000314:	f001 f909 	bl	800152a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000318:	f000 f82c 	bl	8000374 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800031c:	f000 fa64 	bl	80007e8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000320:	f000 f9d2 	bl	80006c8 <MX_DMA_Init>
  MX_FMC_Init();
 8000324:	f000 f9fa 	bl	800071c <MX_FMC_Init>
  MX_I2C1_Init();
 8000328:	f000 f92e 	bl	8000588 <MX_I2C1_Init>
  MX_SDMMC1_SD_Init();
 800032c:	f000 f96c 	bl	8000608 <MX_SDMMC1_SD_Init>
  MX_SPI2_Init();
 8000330:	f000 f98c 	bl	800064c <MX_SPI2_Init>
  MX_CAN1_Init();
 8000334:	f000 f8f2 	bl	800051c <MX_CAN1_Init>
  MX_ADC1_Init();
 8000338:	f000 f86a 	bl	8000410 <MX_ADC1_Init>
  MX_FATFS_Init();
 800033c:	f009 f8a4 	bl	8009488 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000340:	f009 fba0 	bl	8009a84 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000344:	4a07      	ldr	r2, [pc, #28]	; (8000364 <main+0x54>)
 8000346:	2100      	movs	r1, #0
 8000348:	4807      	ldr	r0, [pc, #28]	; (8000368 <main+0x58>)
 800034a:	f009 fc1c 	bl	8009b86 <osThreadNew>
 800034e:	4603      	mov	r3, r0
 8000350:	4a06      	ldr	r2, [pc, #24]	; (800036c <main+0x5c>)
 8000352:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  ADC_Init(&hadc1);
 8000354:	4806      	ldr	r0, [pc, #24]	; (8000370 <main+0x60>)
 8000356:	f7ff ff53 	bl	8000200 <ADC_Init>
  controller_init();
 800035a:	f7ff ffa9 	bl	80002b0 <controller_init>
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  //please note that anything after this oskernalstart function is not gonna run. If you want to create y
  //your own functions, you need to create another .c and .h file as shown.
  osKernelStart();
 800035e:	f009 fbd7 	bl	8009b10 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000362:	e7fe      	b.n	8000362 <main+0x52>
 8000364:	0800d728 	.word	0x0800d728
 8000368:	08000c85 	.word	0x08000c85
 800036c:	200003d4 	.word	0x200003d4
 8000370:	2000015c 	.word	0x2000015c

08000374 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000374:	b580      	push	{r7, lr}
 8000376:	b096      	sub	sp, #88	; 0x58
 8000378:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800037a:	f107 0314 	add.w	r3, r7, #20
 800037e:	2244      	movs	r2, #68	; 0x44
 8000380:	2100      	movs	r1, #0
 8000382:	4618      	mov	r0, r3
 8000384:	f00d f8b6 	bl	800d4f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000388:	463b      	mov	r3, r7
 800038a:	2200      	movs	r2, #0
 800038c:	601a      	str	r2, [r3, #0]
 800038e:	605a      	str	r2, [r3, #4]
 8000390:	609a      	str	r2, [r3, #8]
 8000392:	60da      	str	r2, [r3, #12]
 8000394:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8000396:	2000      	movs	r0, #0
 8000398:	f003 fb54 	bl	8003a44 <HAL_PWREx_ControlVoltageScaling>
 800039c:	4603      	mov	r3, r0
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d001      	beq.n	80003a6 <SystemClock_Config+0x32>
  {
    Error_Handler();
 80003a2:	f000 fc89 	bl	8000cb8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80003a6:	2301      	movs	r3, #1
 80003a8:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80003aa:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80003ae:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003b0:	2302      	movs	r3, #2
 80003b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80003b4:	2303      	movs	r3, #3
 80003b6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 2;
 80003b8:	2302      	movs	r3, #2
 80003ba:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 30;
 80003bc:	231e      	movs	r3, #30
 80003be:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80003c0:	2302      	movs	r3, #2
 80003c2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80003c4:	2302      	movs	r3, #2
 80003c6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80003c8:	2302      	movs	r3, #2
 80003ca:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003cc:	f107 0314 	add.w	r3, r7, #20
 80003d0:	4618      	mov	r0, r3
 80003d2:	f003 fbeb 	bl	8003bac <HAL_RCC_OscConfig>
 80003d6:	4603      	mov	r3, r0
 80003d8:	2b00      	cmp	r3, #0
 80003da:	d001      	beq.n	80003e0 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 80003dc:	f000 fc6c 	bl	8000cb8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003e0:	230f      	movs	r3, #15
 80003e2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003e4:	2303      	movs	r3, #3
 80003e6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003e8:	2300      	movs	r3, #0
 80003ea:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003ec:	2300      	movs	r3, #0
 80003ee:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003f0:	2300      	movs	r3, #0
 80003f2:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80003f4:	463b      	mov	r3, r7
 80003f6:	2105      	movs	r1, #5
 80003f8:	4618      	mov	r0, r3
 80003fa:	f003 fff1 	bl	80043e0 <HAL_RCC_ClockConfig>
 80003fe:	4603      	mov	r3, r0
 8000400:	2b00      	cmp	r3, #0
 8000402:	d001      	beq.n	8000408 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000404:	f000 fc58 	bl	8000cb8 <Error_Handler>
  }
}
 8000408:	bf00      	nop
 800040a:	3758      	adds	r7, #88	; 0x58
 800040c:	46bd      	mov	sp, r7
 800040e:	bd80      	pop	{r7, pc}

08000410 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000410:	b580      	push	{r7, lr}
 8000412:	b086      	sub	sp, #24
 8000414:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000416:	463b      	mov	r3, r7
 8000418:	2200      	movs	r2, #0
 800041a:	601a      	str	r2, [r3, #0]
 800041c:	605a      	str	r2, [r3, #4]
 800041e:	609a      	str	r2, [r3, #8]
 8000420:	60da      	str	r2, [r3, #12]
 8000422:	611a      	str	r2, [r3, #16]
 8000424:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000426:	4b38      	ldr	r3, [pc, #224]	; (8000508 <MX_ADC1_Init+0xf8>)
 8000428:	4a38      	ldr	r2, [pc, #224]	; (800050c <MX_ADC1_Init+0xfc>)
 800042a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800042c:	4b36      	ldr	r3, [pc, #216]	; (8000508 <MX_ADC1_Init+0xf8>)
 800042e:	2200      	movs	r2, #0
 8000430:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000432:	4b35      	ldr	r3, [pc, #212]	; (8000508 <MX_ADC1_Init+0xf8>)
 8000434:	2200      	movs	r2, #0
 8000436:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000438:	4b33      	ldr	r3, [pc, #204]	; (8000508 <MX_ADC1_Init+0xf8>)
 800043a:	2200      	movs	r2, #0
 800043c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800043e:	4b32      	ldr	r3, [pc, #200]	; (8000508 <MX_ADC1_Init+0xf8>)
 8000440:	2201      	movs	r2, #1
 8000442:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000444:	4b30      	ldr	r3, [pc, #192]	; (8000508 <MX_ADC1_Init+0xf8>)
 8000446:	2204      	movs	r2, #4
 8000448:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800044a:	4b2f      	ldr	r3, [pc, #188]	; (8000508 <MX_ADC1_Init+0xf8>)
 800044c:	2200      	movs	r2, #0
 800044e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000450:	4b2d      	ldr	r3, [pc, #180]	; (8000508 <MX_ADC1_Init+0xf8>)
 8000452:	2200      	movs	r2, #0
 8000454:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 3;
 8000456:	4b2c      	ldr	r3, [pc, #176]	; (8000508 <MX_ADC1_Init+0xf8>)
 8000458:	2203      	movs	r2, #3
 800045a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800045c:	4b2a      	ldr	r3, [pc, #168]	; (8000508 <MX_ADC1_Init+0xf8>)
 800045e:	2200      	movs	r2, #0
 8000460:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000464:	4b28      	ldr	r3, [pc, #160]	; (8000508 <MX_ADC1_Init+0xf8>)
 8000466:	2200      	movs	r2, #0
 8000468:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800046a:	4b27      	ldr	r3, [pc, #156]	; (8000508 <MX_ADC1_Init+0xf8>)
 800046c:	2200      	movs	r2, #0
 800046e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000470:	4b25      	ldr	r3, [pc, #148]	; (8000508 <MX_ADC1_Init+0xf8>)
 8000472:	2201      	movs	r2, #1
 8000474:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000478:	4b23      	ldr	r3, [pc, #140]	; (8000508 <MX_ADC1_Init+0xf8>)
 800047a:	2200      	movs	r2, #0
 800047c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800047e:	4b22      	ldr	r3, [pc, #136]	; (8000508 <MX_ADC1_Init+0xf8>)
 8000480:	2200      	movs	r2, #0
 8000482:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.DFSDMConfig = ADC_DFSDM_MODE_ENABLE;
 8000486:	4b20      	ldr	r3, [pc, #128]	; (8000508 <MX_ADC1_Init+0xf8>)
 8000488:	2204      	movs	r2, #4
 800048a:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800048c:	481e      	ldr	r0, [pc, #120]	; (8000508 <MX_ADC1_Init+0xf8>)
 800048e:	f001 fa97 	bl	80019c0 <HAL_ADC_Init>
 8000492:	4603      	mov	r3, r0
 8000494:	2b00      	cmp	r3, #0
 8000496:	d001      	beq.n	800049c <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000498:	f000 fc0e 	bl	8000cb8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800049c:	4b1c      	ldr	r3, [pc, #112]	; (8000510 <MX_ADC1_Init+0x100>)
 800049e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80004a0:	2306      	movs	r3, #6
 80004a2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80004a4:	2300      	movs	r3, #0
 80004a6:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80004a8:	237f      	movs	r3, #127	; 0x7f
 80004aa:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80004ac:	2304      	movs	r3, #4
 80004ae:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80004b0:	2300      	movs	r3, #0
 80004b2:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80004b4:	463b      	mov	r3, r7
 80004b6:	4619      	mov	r1, r3
 80004b8:	4813      	ldr	r0, [pc, #76]	; (8000508 <MX_ADC1_Init+0xf8>)
 80004ba:	f001 fe23 	bl	8002104 <HAL_ADC_ConfigChannel>
 80004be:	4603      	mov	r3, r0
 80004c0:	2b00      	cmp	r3, #0
 80004c2:	d001      	beq.n	80004c8 <MX_ADC1_Init+0xb8>
  {
    Error_Handler();
 80004c4:	f000 fbf8 	bl	8000cb8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80004c8:	4b12      	ldr	r3, [pc, #72]	; (8000514 <MX_ADC1_Init+0x104>)
 80004ca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80004cc:	230c      	movs	r3, #12
 80004ce:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80004d0:	463b      	mov	r3, r7
 80004d2:	4619      	mov	r1, r3
 80004d4:	480c      	ldr	r0, [pc, #48]	; (8000508 <MX_ADC1_Init+0xf8>)
 80004d6:	f001 fe15 	bl	8002104 <HAL_ADC_ConfigChannel>
 80004da:	4603      	mov	r3, r0
 80004dc:	2b00      	cmp	r3, #0
 80004de:	d001      	beq.n	80004e4 <MX_ADC1_Init+0xd4>
  {
    Error_Handler();
 80004e0:	f000 fbea 	bl	8000cb8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80004e4:	4b0c      	ldr	r3, [pc, #48]	; (8000518 <MX_ADC1_Init+0x108>)
 80004e6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80004e8:	2312      	movs	r3, #18
 80004ea:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80004ec:	463b      	mov	r3, r7
 80004ee:	4619      	mov	r1, r3
 80004f0:	4805      	ldr	r0, [pc, #20]	; (8000508 <MX_ADC1_Init+0xf8>)
 80004f2:	f001 fe07 	bl	8002104 <HAL_ADC_ConfigChannel>
 80004f6:	4603      	mov	r3, r0
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d001      	beq.n	8000500 <MX_ADC1_Init+0xf0>
  {
    Error_Handler();
 80004fc:	f000 fbdc 	bl	8000cb8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000500:	bf00      	nop
 8000502:	3718      	adds	r7, #24
 8000504:	46bd      	mov	sp, r7
 8000506:	bd80      	pop	{r7, pc}
 8000508:	2000015c 	.word	0x2000015c
 800050c:	50040000 	.word	0x50040000
 8000510:	14f00020 	.word	0x14f00020
 8000514:	19200040 	.word	0x19200040
 8000518:	1d500080 	.word	0x1d500080

0800051c <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000520:	4b17      	ldr	r3, [pc, #92]	; (8000580 <MX_CAN1_Init+0x64>)
 8000522:	4a18      	ldr	r2, [pc, #96]	; (8000584 <MX_CAN1_Init+0x68>)
 8000524:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 20;
 8000526:	4b16      	ldr	r3, [pc, #88]	; (8000580 <MX_CAN1_Init+0x64>)
 8000528:	2214      	movs	r2, #20
 800052a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800052c:	4b14      	ldr	r3, [pc, #80]	; (8000580 <MX_CAN1_Init+0x64>)
 800052e:	2200      	movs	r2, #0
 8000530:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000532:	4b13      	ldr	r3, [pc, #76]	; (8000580 <MX_CAN1_Init+0x64>)
 8000534:	2200      	movs	r2, #0
 8000536:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_10TQ;
 8000538:	4b11      	ldr	r3, [pc, #68]	; (8000580 <MX_CAN1_Init+0x64>)
 800053a:	f44f 2210 	mov.w	r2, #589824	; 0x90000
 800053e:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 8000540:	4b0f      	ldr	r3, [pc, #60]	; (8000580 <MX_CAN1_Init+0x64>)
 8000542:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8000546:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000548:	4b0d      	ldr	r3, [pc, #52]	; (8000580 <MX_CAN1_Init+0x64>)
 800054a:	2200      	movs	r2, #0
 800054c:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800054e:	4b0c      	ldr	r3, [pc, #48]	; (8000580 <MX_CAN1_Init+0x64>)
 8000550:	2200      	movs	r2, #0
 8000552:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000554:	4b0a      	ldr	r3, [pc, #40]	; (8000580 <MX_CAN1_Init+0x64>)
 8000556:	2200      	movs	r2, #0
 8000558:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800055a:	4b09      	ldr	r3, [pc, #36]	; (8000580 <MX_CAN1_Init+0x64>)
 800055c:	2200      	movs	r2, #0
 800055e:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000560:	4b07      	ldr	r3, [pc, #28]	; (8000580 <MX_CAN1_Init+0x64>)
 8000562:	2200      	movs	r2, #0
 8000564:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000566:	4b06      	ldr	r3, [pc, #24]	; (8000580 <MX_CAN1_Init+0x64>)
 8000568:	2200      	movs	r2, #0
 800056a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800056c:	4804      	ldr	r0, [pc, #16]	; (8000580 <MX_CAN1_Init+0x64>)
 800056e:	f002 fb11 	bl	8002b94 <HAL_CAN_Init>
 8000572:	4603      	mov	r3, r0
 8000574:	2b00      	cmp	r3, #0
 8000576:	d001      	beq.n	800057c <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000578:	f000 fb9e 	bl	8000cb8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 800057c:	bf00      	nop
 800057e:	bd80      	pop	{r7, pc}
 8000580:	20000224 	.word	0x20000224
 8000584:	40006400 	.word	0x40006400

08000588 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800058c:	4b1b      	ldr	r3, [pc, #108]	; (80005fc <MX_I2C1_Init+0x74>)
 800058e:	4a1c      	ldr	r2, [pc, #112]	; (8000600 <MX_I2C1_Init+0x78>)
 8000590:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 8000592:	4b1a      	ldr	r3, [pc, #104]	; (80005fc <MX_I2C1_Init+0x74>)
 8000594:	4a1b      	ldr	r2, [pc, #108]	; (8000604 <MX_I2C1_Init+0x7c>)
 8000596:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000598:	4b18      	ldr	r3, [pc, #96]	; (80005fc <MX_I2C1_Init+0x74>)
 800059a:	2200      	movs	r2, #0
 800059c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800059e:	4b17      	ldr	r3, [pc, #92]	; (80005fc <MX_I2C1_Init+0x74>)
 80005a0:	2201      	movs	r2, #1
 80005a2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005a4:	4b15      	ldr	r3, [pc, #84]	; (80005fc <MX_I2C1_Init+0x74>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80005aa:	4b14      	ldr	r3, [pc, #80]	; (80005fc <MX_I2C1_Init+0x74>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80005b0:	4b12      	ldr	r3, [pc, #72]	; (80005fc <MX_I2C1_Init+0x74>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005b6:	4b11      	ldr	r3, [pc, #68]	; (80005fc <MX_I2C1_Init+0x74>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80005bc:	4b0f      	ldr	r3, [pc, #60]	; (80005fc <MX_I2C1_Init+0x74>)
 80005be:	2200      	movs	r2, #0
 80005c0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80005c2:	480e      	ldr	r0, [pc, #56]	; (80005fc <MX_I2C1_Init+0x74>)
 80005c4:	f003 f8f8 	bl	80037b8 <HAL_I2C_Init>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d001      	beq.n	80005d2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80005ce:	f000 fb73 	bl	8000cb8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80005d2:	2100      	movs	r1, #0
 80005d4:	4809      	ldr	r0, [pc, #36]	; (80005fc <MX_I2C1_Init+0x74>)
 80005d6:	f003 f97e 	bl	80038d6 <HAL_I2CEx_ConfigAnalogFilter>
 80005da:	4603      	mov	r3, r0
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d001      	beq.n	80005e4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80005e0:	f000 fb6a 	bl	8000cb8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80005e4:	2100      	movs	r1, #0
 80005e6:	4805      	ldr	r0, [pc, #20]	; (80005fc <MX_I2C1_Init+0x74>)
 80005e8:	f003 f9c0 	bl	800396c <HAL_I2CEx_ConfigDigitalFilter>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d001      	beq.n	80005f6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80005f2:	f000 fb61 	bl	8000cb8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80005f6:	bf00      	nop
 80005f8:	bd80      	pop	{r7, pc}
 80005fa:	bf00      	nop
 80005fc:	2000024c 	.word	0x2000024c
 8000600:	40005400 	.word	0x40005400
 8000604:	307075b1 	.word	0x307075b1

08000608 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000608:	b480      	push	{r7}
 800060a:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 800060c:	4b0d      	ldr	r3, [pc, #52]	; (8000644 <MX_SDMMC1_SD_Init+0x3c>)
 800060e:	4a0e      	ldr	r2, [pc, #56]	; (8000648 <MX_SDMMC1_SD_Init+0x40>)
 8000610:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000612:	4b0c      	ldr	r3, [pc, #48]	; (8000644 <MX_SDMMC1_SD_Init+0x3c>)
 8000614:	2200      	movs	r2, #0
 8000616:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000618:	4b0a      	ldr	r3, [pc, #40]	; (8000644 <MX_SDMMC1_SD_Init+0x3c>)
 800061a:	2200      	movs	r2, #0
 800061c:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 800061e:	4b09      	ldr	r3, [pc, #36]	; (8000644 <MX_SDMMC1_SD_Init+0x3c>)
 8000620:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000624:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000626:	4b07      	ldr	r3, [pc, #28]	; (8000644 <MX_SDMMC1_SD_Init+0x3c>)
 8000628:	2200      	movs	r2, #0
 800062a:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 800062c:	4b05      	ldr	r3, [pc, #20]	; (8000644 <MX_SDMMC1_SD_Init+0x3c>)
 800062e:	2200      	movs	r2, #0
 8000630:	615a      	str	r2, [r3, #20]
  hsd1.Init.Transceiver = SDMMC_TRANSCEIVER_DISABLE;
 8000632:	4b04      	ldr	r3, [pc, #16]	; (8000644 <MX_SDMMC1_SD_Init+0x3c>)
 8000634:	2200      	movs	r2, #0
 8000636:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000638:	bf00      	nop
 800063a:	46bd      	mov	sp, r7
 800063c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000640:	4770      	bx	lr
 8000642:	bf00      	nop
 8000644:	200002a0 	.word	0x200002a0
 8000648:	50062400 	.word	0x50062400

0800064c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000650:	4b1b      	ldr	r3, [pc, #108]	; (80006c0 <MX_SPI2_Init+0x74>)
 8000652:	4a1c      	ldr	r2, [pc, #112]	; (80006c4 <MX_SPI2_Init+0x78>)
 8000654:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000656:	4b1a      	ldr	r3, [pc, #104]	; (80006c0 <MX_SPI2_Init+0x74>)
 8000658:	f44f 7282 	mov.w	r2, #260	; 0x104
 800065c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800065e:	4b18      	ldr	r3, [pc, #96]	; (80006c0 <MX_SPI2_Init+0x74>)
 8000660:	2200      	movs	r2, #0
 8000662:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8000664:	4b16      	ldr	r3, [pc, #88]	; (80006c0 <MX_SPI2_Init+0x74>)
 8000666:	f44f 7240 	mov.w	r2, #768	; 0x300
 800066a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800066c:	4b14      	ldr	r3, [pc, #80]	; (80006c0 <MX_SPI2_Init+0x74>)
 800066e:	2200      	movs	r2, #0
 8000670:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000672:	4b13      	ldr	r3, [pc, #76]	; (80006c0 <MX_SPI2_Init+0x74>)
 8000674:	2200      	movs	r2, #0
 8000676:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000678:	4b11      	ldr	r3, [pc, #68]	; (80006c0 <MX_SPI2_Init+0x74>)
 800067a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800067e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000680:	4b0f      	ldr	r3, [pc, #60]	; (80006c0 <MX_SPI2_Init+0x74>)
 8000682:	2208      	movs	r2, #8
 8000684:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000686:	4b0e      	ldr	r3, [pc, #56]	; (80006c0 <MX_SPI2_Init+0x74>)
 8000688:	2200      	movs	r2, #0
 800068a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800068c:	4b0c      	ldr	r3, [pc, #48]	; (80006c0 <MX_SPI2_Init+0x74>)
 800068e:	2200      	movs	r2, #0
 8000690:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000692:	4b0b      	ldr	r3, [pc, #44]	; (80006c0 <MX_SPI2_Init+0x74>)
 8000694:	2200      	movs	r2, #0
 8000696:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000698:	4b09      	ldr	r3, [pc, #36]	; (80006c0 <MX_SPI2_Init+0x74>)
 800069a:	2207      	movs	r2, #7
 800069c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800069e:	4b08      	ldr	r3, [pc, #32]	; (80006c0 <MX_SPI2_Init+0x74>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80006a4:	4b06      	ldr	r3, [pc, #24]	; (80006c0 <MX_SPI2_Init+0x74>)
 80006a6:	2208      	movs	r2, #8
 80006a8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80006aa:	4805      	ldr	r0, [pc, #20]	; (80006c0 <MX_SPI2_Init+0x74>)
 80006ac:	f007 fc23 	bl	8007ef6 <HAL_SPI_Init>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d001      	beq.n	80006ba <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80006b6:	f000 faff 	bl	8000cb8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80006ba:	bf00      	nop
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	20000320 	.word	0x20000320
 80006c4:	40003800 	.word	0x40003800

080006c8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b082      	sub	sp, #8
 80006cc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80006ce:	4b12      	ldr	r3, [pc, #72]	; (8000718 <MX_DMA_Init+0x50>)
 80006d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80006d2:	4a11      	ldr	r2, [pc, #68]	; (8000718 <MX_DMA_Init+0x50>)
 80006d4:	f043 0304 	orr.w	r3, r3, #4
 80006d8:	6493      	str	r3, [r2, #72]	; 0x48
 80006da:	4b0f      	ldr	r3, [pc, #60]	; (8000718 <MX_DMA_Init+0x50>)
 80006dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80006de:	f003 0304 	and.w	r3, r3, #4
 80006e2:	607b      	str	r3, [r7, #4]
 80006e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006e6:	4b0c      	ldr	r3, [pc, #48]	; (8000718 <MX_DMA_Init+0x50>)
 80006e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80006ea:	4a0b      	ldr	r2, [pc, #44]	; (8000718 <MX_DMA_Init+0x50>)
 80006ec:	f043 0301 	orr.w	r3, r3, #1
 80006f0:	6493      	str	r3, [r2, #72]	; 0x48
 80006f2:	4b09      	ldr	r3, [pc, #36]	; (8000718 <MX_DMA_Init+0x50>)
 80006f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80006f6:	f003 0301 	and.w	r3, r3, #1
 80006fa:	603b      	str	r3, [r7, #0]
 80006fc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 80006fe:	2200      	movs	r2, #0
 8000700:	2105      	movs	r1, #5
 8000702:	200b      	movs	r0, #11
 8000704:	f002 fbfa 	bl	8002efc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000708:	200b      	movs	r0, #11
 800070a:	f002 fc13 	bl	8002f34 <HAL_NVIC_EnableIRQ>

}
 800070e:	bf00      	nop
 8000710:	3708      	adds	r7, #8
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	40021000 	.word	0x40021000

0800071c <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b088      	sub	sp, #32
 8000720:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 8000722:	463b      	mov	r3, r7
 8000724:	2220      	movs	r2, #32
 8000726:	2100      	movs	r1, #0
 8000728:	4618      	mov	r0, r3
 800072a:	f00c fee3 	bl	800d4f4 <memset>

  /* USER CODE END FMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 800072e:	4b2c      	ldr	r3, [pc, #176]	; (80007e0 <MX_FMC_Init+0xc4>)
 8000730:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8000734:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 8000736:	4b2a      	ldr	r3, [pc, #168]	; (80007e0 <MX_FMC_Init+0xc4>)
 8000738:	4a2a      	ldr	r2, [pc, #168]	; (80007e4 <MX_FMC_Init+0xc8>)
 800073a:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FMC_NORSRAM_BANK1;
 800073c:	4b28      	ldr	r3, [pc, #160]	; (80007e0 <MX_FMC_Init+0xc4>)
 800073e:	2200      	movs	r2, #0
 8000740:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 8000742:	4b27      	ldr	r3, [pc, #156]	; (80007e0 <MX_FMC_Init+0xc4>)
 8000744:	2200      	movs	r2, #0
 8000746:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FMC_MEMORY_TYPE_PSRAM;
 8000748:	4b25      	ldr	r3, [pc, #148]	; (80007e0 <MX_FMC_Init+0xc4>)
 800074a:	2204      	movs	r2, #4
 800074c:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 800074e:	4b24      	ldr	r3, [pc, #144]	; (80007e0 <MX_FMC_Init+0xc4>)
 8000750:	2210      	movs	r2, #16
 8000752:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_ENABLE;
 8000754:	4b22      	ldr	r3, [pc, #136]	; (80007e0 <MX_FMC_Init+0xc4>)
 8000756:	f44f 7280 	mov.w	r2, #256	; 0x100
 800075a:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 800075c:	4b20      	ldr	r3, [pc, #128]	; (80007e0 <MX_FMC_Init+0xc4>)
 800075e:	2200      	movs	r2, #0
 8000760:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 8000762:	4b1f      	ldr	r3, [pc, #124]	; (80007e0 <MX_FMC_Init+0xc4>)
 8000764:	2200      	movs	r2, #0
 8000766:	621a      	str	r2, [r3, #32]
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_DISABLE;
 8000768:	4b1d      	ldr	r3, [pc, #116]	; (80007e0 <MX_FMC_Init+0xc4>)
 800076a:	2200      	movs	r2, #0
 800076c:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_ENABLE;
 800076e:	4b1c      	ldr	r3, [pc, #112]	; (80007e0 <MX_FMC_Init+0xc4>)
 8000770:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000774:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 8000776:	4b1a      	ldr	r3, [pc, #104]	; (80007e0 <MX_FMC_Init+0xc4>)
 8000778:	2200      	movs	r2, #0
 800077a:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 800077c:	4b18      	ldr	r3, [pc, #96]	; (80007e0 <MX_FMC_Init+0xc4>)
 800077e:	2200      	movs	r2, #0
 8000780:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.WriteBurst = FMC_WRITE_BURST_ENABLE;
 8000782:	4b17      	ldr	r3, [pc, #92]	; (80007e0 <MX_FMC_Init+0xc4>)
 8000784:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000788:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 800078a:	4b15      	ldr	r3, [pc, #84]	; (80007e0 <MX_FMC_Init+0xc4>)
 800078c:	2200      	movs	r2, #0
 800078e:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 8000790:	4b13      	ldr	r3, [pc, #76]	; (80007e0 <MX_FMC_Init+0xc4>)
 8000792:	2200      	movs	r2, #0
 8000794:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.NBLSetupTime = 0;
 8000796:	4b12      	ldr	r3, [pc, #72]	; (80007e0 <MX_FMC_Init+0xc4>)
 8000798:	2200      	movs	r2, #0
 800079a:	645a      	str	r2, [r3, #68]	; 0x44
  hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 800079c:	4b10      	ldr	r3, [pc, #64]	; (80007e0 <MX_FMC_Init+0xc4>)
 800079e:	2200      	movs	r2, #0
 80007a0:	641a      	str	r2, [r3, #64]	; 0x40
  /* Timing */
  Timing.AddressSetupTime = 15;
 80007a2:	230f      	movs	r3, #15
 80007a4:	603b      	str	r3, [r7, #0]
  Timing.AddressHoldTime = 15;
 80007a6:	230f      	movs	r3, #15
 80007a8:	607b      	str	r3, [r7, #4]
  Timing.DataSetupTime = 255;
 80007aa:	23ff      	movs	r3, #255	; 0xff
 80007ac:	60bb      	str	r3, [r7, #8]
  Timing.DataHoldTime = 0;
 80007ae:	2300      	movs	r3, #0
 80007b0:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 80007b2:	230f      	movs	r3, #15
 80007b4:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 80007b6:	2310      	movs	r3, #16
 80007b8:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 2;
 80007ba:	2302      	movs	r3, #2
 80007bc:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 80007be:	2300      	movs	r3, #0
 80007c0:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 80007c2:	463b      	mov	r3, r7
 80007c4:	2200      	movs	r2, #0
 80007c6:	4619      	mov	r1, r3
 80007c8:	4805      	ldr	r0, [pc, #20]	; (80007e0 <MX_FMC_Init+0xc4>)
 80007ca:	f007 fc37 	bl	800803c <HAL_SRAM_Init>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <MX_FMC_Init+0xbc>
  {
    Error_Handler( );
 80007d4:	f000 fa70 	bl	8000cb8 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 80007d8:	bf00      	nop
 80007da:	3720      	adds	r7, #32
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	20000384 	.word	0x20000384
 80007e4:	a0000104 	.word	0xa0000104

080007e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b08e      	sub	sp, #56	; 0x38
 80007ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007f2:	2200      	movs	r2, #0
 80007f4:	601a      	str	r2, [r3, #0]
 80007f6:	605a      	str	r2, [r3, #4]
 80007f8:	609a      	str	r2, [r3, #8]
 80007fa:	60da      	str	r2, [r3, #12]
 80007fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80007fe:	4bb2      	ldr	r3, [pc, #712]	; (8000ac8 <MX_GPIO_Init+0x2e0>)
 8000800:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000802:	4ab1      	ldr	r2, [pc, #708]	; (8000ac8 <MX_GPIO_Init+0x2e0>)
 8000804:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000808:	64d3      	str	r3, [r2, #76]	; 0x4c
 800080a:	4baf      	ldr	r3, [pc, #700]	; (8000ac8 <MX_GPIO_Init+0x2e0>)
 800080c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800080e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000812:	623b      	str	r3, [r7, #32]
 8000814:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000816:	4bac      	ldr	r3, [pc, #688]	; (8000ac8 <MX_GPIO_Init+0x2e0>)
 8000818:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800081a:	4aab      	ldr	r2, [pc, #684]	; (8000ac8 <MX_GPIO_Init+0x2e0>)
 800081c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000820:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000822:	4ba9      	ldr	r3, [pc, #676]	; (8000ac8 <MX_GPIO_Init+0x2e0>)
 8000824:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000826:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800082a:	61fb      	str	r3, [r7, #28]
 800082c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800082e:	4ba6      	ldr	r3, [pc, #664]	; (8000ac8 <MX_GPIO_Init+0x2e0>)
 8000830:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000832:	4aa5      	ldr	r2, [pc, #660]	; (8000ac8 <MX_GPIO_Init+0x2e0>)
 8000834:	f043 0310 	orr.w	r3, r3, #16
 8000838:	64d3      	str	r3, [r2, #76]	; 0x4c
 800083a:	4ba3      	ldr	r3, [pc, #652]	; (8000ac8 <MX_GPIO_Init+0x2e0>)
 800083c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800083e:	f003 0310 	and.w	r3, r3, #16
 8000842:	61bb      	str	r3, [r7, #24]
 8000844:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000846:	4ba0      	ldr	r3, [pc, #640]	; (8000ac8 <MX_GPIO_Init+0x2e0>)
 8000848:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800084a:	4a9f      	ldr	r2, [pc, #636]	; (8000ac8 <MX_GPIO_Init+0x2e0>)
 800084c:	f043 0302 	orr.w	r3, r3, #2
 8000850:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000852:	4b9d      	ldr	r3, [pc, #628]	; (8000ac8 <MX_GPIO_Init+0x2e0>)
 8000854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000856:	f003 0302 	and.w	r3, r3, #2
 800085a:	617b      	str	r3, [r7, #20]
 800085c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800085e:	4b9a      	ldr	r3, [pc, #616]	; (8000ac8 <MX_GPIO_Init+0x2e0>)
 8000860:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000862:	4a99      	ldr	r2, [pc, #612]	; (8000ac8 <MX_GPIO_Init+0x2e0>)
 8000864:	f043 0301 	orr.w	r3, r3, #1
 8000868:	64d3      	str	r3, [r2, #76]	; 0x4c
 800086a:	4b97      	ldr	r3, [pc, #604]	; (8000ac8 <MX_GPIO_Init+0x2e0>)
 800086c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800086e:	f003 0301 	and.w	r3, r3, #1
 8000872:	613b      	str	r3, [r7, #16]
 8000874:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000876:	4b94      	ldr	r3, [pc, #592]	; (8000ac8 <MX_GPIO_Init+0x2e0>)
 8000878:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800087a:	4a93      	ldr	r2, [pc, #588]	; (8000ac8 <MX_GPIO_Init+0x2e0>)
 800087c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000880:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000882:	4b91      	ldr	r3, [pc, #580]	; (8000ac8 <MX_GPIO_Init+0x2e0>)
 8000884:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000886:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800088a:	60fb      	str	r3, [r7, #12]
 800088c:	68fb      	ldr	r3, [r7, #12]
  HAL_PWREx_EnableVddIO2();
 800088e:	f003 f97d 	bl	8003b8c <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000892:	4b8d      	ldr	r3, [pc, #564]	; (8000ac8 <MX_GPIO_Init+0x2e0>)
 8000894:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000896:	4a8c      	ldr	r2, [pc, #560]	; (8000ac8 <MX_GPIO_Init+0x2e0>)
 8000898:	f043 0308 	orr.w	r3, r3, #8
 800089c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800089e:	4b8a      	ldr	r3, [pc, #552]	; (8000ac8 <MX_GPIO_Init+0x2e0>)
 80008a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008a2:	f003 0308 	and.w	r3, r3, #8
 80008a6:	60bb      	str	r3, [r7, #8]
 80008a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008aa:	4b87      	ldr	r3, [pc, #540]	; (8000ac8 <MX_GPIO_Init+0x2e0>)
 80008ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ae:	4a86      	ldr	r2, [pc, #536]	; (8000ac8 <MX_GPIO_Init+0x2e0>)
 80008b0:	f043 0304 	orr.w	r3, r3, #4
 80008b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008b6:	4b84      	ldr	r3, [pc, #528]	; (8000ac8 <MX_GPIO_Init+0x2e0>)
 80008b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ba:	f003 0304 	and.w	r3, r3, #4
 80008be:	607b      	str	r3, [r7, #4]
 80008c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008c2:	4b81      	ldr	r3, [pc, #516]	; (8000ac8 <MX_GPIO_Init+0x2e0>)
 80008c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008c6:	4a80      	ldr	r2, [pc, #512]	; (8000ac8 <MX_GPIO_Init+0x2e0>)
 80008c8:	f043 0320 	orr.w	r3, r3, #32
 80008cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008ce:	4b7e      	ldr	r3, [pc, #504]	; (8000ac8 <MX_GPIO_Init+0x2e0>)
 80008d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008d2:	f003 0320 	and.w	r3, r3, #32
 80008d6:	603b      	str	r3, [r7, #0]
 80008d8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, MIC_VDD_Pin|DSI_SPI_USART_CS_Pin|LED_GREEN_Pin, GPIO_PIN_RESET);
 80008da:	2200      	movs	r2, #0
 80008dc:	f244 0114 	movw	r1, #16404	; 0x4014
 80008e0:	487a      	ldr	r0, [pc, #488]	; (8000acc <MX_GPIO_Init+0x2e4>)
 80008e2:	f002 ff51 	bl	8003788 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(JOY_SEL_GPIO_Port, JOY_SEL_Pin, GPIO_PIN_RESET);
 80008e6:	2200      	movs	r2, #0
 80008e8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008ec:	4878      	ldr	r0, [pc, #480]	; (8000ad0 <MX_GPIO_Init+0x2e8>)
 80008ee:	f002 ff4b 	bl	8003788 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_RESET);
 80008f2:	2200      	movs	r2, #0
 80008f4:	2140      	movs	r1, #64	; 0x40
 80008f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008fa:	f002 ff45 	bl	8003788 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MFX_WAKEUP_GPIO_Port, MFX_WAKEUP_Pin, GPIO_PIN_RESET);
 80008fe:	2200      	movs	r2, #0
 8000900:	2104      	movs	r1, #4
 8000902:	4874      	ldr	r0, [pc, #464]	; (8000ad4 <MX_GPIO_Init+0x2ec>)
 8000904:	f002 ff40 	bl	8003788 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OCTOSPIM_P2_IO1_Pin OCTOSPIM_P2_CLK_Pin OCTOSPIM_P2_IO0_Pin */
  GPIO_InitStruct.Pin = OCTOSPIM_P2_IO1_Pin|OCTOSPIM_P2_CLK_Pin|OCTOSPIM_P2_IO0_Pin;
 8000908:	f44f 6344 	mov.w	r3, #3136	; 0xc40
 800090c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800090e:	2302      	movs	r3, #2
 8000910:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000912:	2300      	movs	r3, #0
 8000914:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000916:	2303      	movs	r3, #3
 8000918:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPIM_P2;
 800091a:	2305      	movs	r3, #5
 800091c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800091e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000922:	4619      	mov	r1, r3
 8000924:	486c      	ldr	r0, [pc, #432]	; (8000ad8 <MX_GPIO_Init+0x2f0>)
 8000926:	f002 fd85 	bl	8003434 <HAL_GPIO_Init>

  /*Configure GPIO pins : MIC_VDD_Pin DSI_SPI_USART_CS_Pin LED_GREEN_Pin */
  GPIO_InitStruct.Pin = MIC_VDD_Pin|DSI_SPI_USART_CS_Pin|LED_GREEN_Pin;
 800092a:	f244 0314 	movw	r3, #16404	; 0x4014
 800092e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000930:	2301      	movs	r3, #1
 8000932:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000934:	2300      	movs	r3, #0
 8000936:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000938:	2300      	movs	r3, #0
 800093a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800093c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000940:	4619      	mov	r1, r3
 8000942:	4862      	ldr	r0, [pc, #392]	; (8000acc <MX_GPIO_Init+0x2e4>)
 8000944:	f002 fd76 	bl	8003434 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8000948:	2310      	movs	r3, #16
 800094a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800094c:	2302      	movs	r3, #2
 800094e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000950:	2300      	movs	r3, #0
 8000952:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000954:	2300      	movs	r3, #0
 8000956:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000958:	2302      	movs	r3, #2
 800095a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 800095c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000960:	4619      	mov	r1, r3
 8000962:	485c      	ldr	r0, [pc, #368]	; (8000ad4 <MX_GPIO_Init+0x2ec>)
 8000964:	f002 fd66 	bl	8003434 <HAL_GPIO_Init>

  /*Configure GPIO pin : USART3_RTS_Pin */
  GPIO_InitStruct.Pin = USART3_RTS_Pin;
 8000968:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800096c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800096e:	2302      	movs	r3, #2
 8000970:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000972:	2300      	movs	r3, #0
 8000974:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000976:	2303      	movs	r3, #3
 8000978:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800097a:	2307      	movs	r3, #7
 800097c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USART3_RTS_GPIO_Port, &GPIO_InitStruct);
 800097e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000982:	4619      	mov	r1, r3
 8000984:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000988:	f002 fd54 	bl	8003434 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D7_Pin DCMI_D5_Pin DCMI_VSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_D7_Pin|DCMI_D5_Pin|DCMI_VSYNC_Pin;
 800098c:	23b0      	movs	r3, #176	; 0xb0
 800098e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000990:	2302      	movs	r3, #2
 8000992:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000994:	2300      	movs	r3, #0
 8000996:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000998:	2300      	movs	r3, #0
 800099a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 800099c:	230a      	movs	r3, #10
 800099e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80009a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009a4:	4619      	mov	r1, r3
 80009a6:	484c      	ldr	r0, [pc, #304]	; (8000ad8 <MX_GPIO_Init+0x2f0>)
 80009a8:	f002 fd44 	bl	8003434 <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI1_SDB_Pin SAI1_FSA_Pin */
  GPIO_InitStruct.Pin = SAI1_SDB_Pin|SAI1_FSA_Pin;
 80009ac:	f44f 7308 	mov.w	r3, #544	; 0x220
 80009b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b2:	2302      	movs	r3, #2
 80009b4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b6:	2300      	movs	r3, #0
 80009b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ba:	2300      	movs	r3, #0
 80009bc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 80009be:	230d      	movs	r3, #13
 80009c0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009c6:	4619      	mov	r1, r3
 80009c8:	4842      	ldr	r0, [pc, #264]	; (8000ad4 <MX_GPIO_Init+0x2ec>)
 80009ca:	f002 fd33 	bl	8003434 <HAL_GPIO_Init>

  /*Configure GPIO pins : OCTOSPIM_P2_IO6_Pin OCTOSPIM_P2_DQS_Pin OCTOSPIM_P2_IO7_Pin OCTOSPIM_P2_CS_Pin */
  GPIO_InitStruct.Pin = OCTOSPIM_P2_IO6_Pin|OCTOSPIM_P2_DQS_Pin|OCTOSPIM_P2_IO7_Pin|OCTOSPIM_P2_CS_Pin;
 80009ce:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 80009d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d4:	2302      	movs	r3, #2
 80009d6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d8:	2300      	movs	r3, #0
 80009da:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009dc:	2303      	movs	r3, #3
 80009de:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPIM_P2;
 80009e0:	2305      	movs	r3, #5
 80009e2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80009e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009e8:	4619      	mov	r1, r3
 80009ea:	483c      	ldr	r0, [pc, #240]	; (8000adc <MX_GPIO_Init+0x2f4>)
 80009ec:	f002 fd22 	bl	8003434 <HAL_GPIO_Init>

  /*Configure GPIO pin : MFX_IRQ_OUT_Pin */
  GPIO_InitStruct.Pin = MFX_IRQ_OUT_Pin;
 80009f0:	2302      	movs	r3, #2
 80009f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009f4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80009f8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fa:	2300      	movs	r3, #0
 80009fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(MFX_IRQ_OUT_GPIO_Port, &GPIO_InitStruct);
 80009fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a02:	4619      	mov	r1, r3
 8000a04:	4834      	ldr	r0, [pc, #208]	; (8000ad8 <MX_GPIO_Init+0x2f0>)
 8000a06:	f002 fd15 	bl	8003434 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D3_Pin DCMI_PIXCLK_Pin DCMI_D2_Pin */
  GPIO_InitStruct.Pin = DCMI_D3_Pin|DCMI_PIXCLK_Pin|DCMI_D2_Pin;
 8000a0a:	f44f 53c1 	mov.w	r3, #6176	; 0x1820
 8000a0e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a10:	2302      	movs	r3, #2
 8000a12:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a14:	2300      	movs	r3, #0
 8000a16:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 8000a1c:	230a      	movs	r3, #10
 8000a1e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000a20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a24:	4619      	mov	r1, r3
 8000a26:	4829      	ldr	r0, [pc, #164]	; (8000acc <MX_GPIO_Init+0x2e4>)
 8000a28:	f002 fd04 	bl	8003434 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D9_Pin;
 8000a2c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a30:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a32:	2302      	movs	r3, #2
 8000a34:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a36:	2300      	movs	r3, #0
 8000a38:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8000a3e:	2303      	movs	r3, #3
 8000a40:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D9_GPIO_Port, &GPIO_InitStruct);
 8000a42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a46:	4619      	mov	r1, r3
 8000a48:	4820      	ldr	r0, [pc, #128]	; (8000acc <MX_GPIO_Init+0x2e4>)
 8000a4a:	f002 fcf3 	bl	8003434 <HAL_GPIO_Init>

  /*Configure GPIO pins : OCTOPSIM_P2_IO4_Pin OCTOSPIM_P2_IO5_Pin OCTOSPI_P2_IO3_Pin */
  GPIO_InitStruct.Pin = OCTOPSIM_P2_IO4_Pin|OCTOSPIM_P2_IO5_Pin|OCTOSPI_P2_IO3_Pin;
 8000a4e:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000a52:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a54:	2302      	movs	r3, #2
 8000a56:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a5c:	2303      	movs	r3, #3
 8000a5e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPIM_P2;
 8000a60:	2305      	movs	r3, #5
 8000a62:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000a64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4818      	ldr	r0, [pc, #96]	; (8000acc <MX_GPIO_Init+0x2e4>)
 8000a6c:	f002 fce2 	bl	8003434 <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI1_MCKA_Pin SAI1_SDA_Pin SAI1_SCKA_Pin */
  GPIO_InitStruct.Pin = SAI1_MCKA_Pin|SAI1_SDA_Pin|SAI1_SCKA_Pin;
 8000a70:	2364      	movs	r3, #100	; 0x64
 8000a72:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a74:	2302      	movs	r3, #2
 8000a76:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8000a80:	230d      	movs	r3, #13
 8000a82:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a88:	4619      	mov	r1, r3
 8000a8a:	4815      	ldr	r0, [pc, #84]	; (8000ae0 <MX_GPIO_Init+0x2f8>)
 8000a8c:	f002 fcd2 	bl	8003434 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTGFS_ID_Pin */
  GPIO_InitStruct.Pin = USB_OTGFS_ID_Pin;
 8000a90:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a94:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a96:	2302      	movs	r3, #2
 8000a98:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a9e:	2303      	movs	r3, #3
 8000aa0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000aa2:	230a      	movs	r3, #10
 8000aa4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_OTGFS_ID_GPIO_Port, &GPIO_InitStruct);
 8000aa6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aaa:	4619      	mov	r1, r3
 8000aac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ab0:	f002 fcc0 	bl	8003434 <HAL_GPIO_Init>

  /*Configure GPIO pin : JOY_SEL_Pin */
  GPIO_InitStruct.Pin = JOY_SEL_Pin;
 8000ab4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ab8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aba:	2301      	movs	r3, #1
 8000abc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	633b      	str	r3, [r7, #48]	; 0x30
 8000ac6:	e00d      	b.n	8000ae4 <MX_GPIO_Init+0x2fc>
 8000ac8:	40021000 	.word	0x40021000
 8000acc:	48001c00 	.word	0x48001c00
 8000ad0:	48000800 	.word	0x48000800
 8000ad4:	48000400 	.word	0x48000400
 8000ad8:	48002000 	.word	0x48002000
 8000adc:	48001800 	.word	0x48001800
 8000ae0:	48001000 	.word	0x48001000
  HAL_GPIO_Init(JOY_SEL_GPIO_Port, &GPIO_InitStruct);
 8000ae4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ae8:	4619      	mov	r1, r3
 8000aea:	4862      	ldr	r0, [pc, #392]	; (8000c74 <MX_GPIO_Init+0x48c>)
 8000aec:	f002 fca2 	bl	8003434 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_14_Pin ARD_15_Pin */
  GPIO_InitStruct.Pin = ARD_14_Pin|ARD_15_Pin;
 8000af0:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000af4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000af6:	2312      	movs	r3, #18
 8000af8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afa:	2300      	movs	r3, #0
 8000afc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000afe:	2303      	movs	r3, #3
 8000b00:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000b02:	2304      	movs	r3, #4
 8000b04:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	485a      	ldr	r0, [pc, #360]	; (8000c78 <MX_GPIO_Init+0x490>)
 8000b0e:	f002 fc91 	bl	8003434 <HAL_GPIO_Init>

  /*Configure GPIO pin : STMOD_INT_Pin */
  GPIO_InitStruct.Pin = STMOD_INT_Pin;
 8000b12:	2340      	movs	r3, #64	; 0x40
 8000b14:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b16:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b1a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(STMOD_INT_GPIO_Port, &GPIO_InitStruct);
 8000b20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b24:	4619      	mov	r1, r3
 8000b26:	4853      	ldr	r0, [pc, #332]	; (8000c74 <MX_GPIO_Init+0x48c>)
 8000b28:	f002 fc84 	bl	8003434 <HAL_GPIO_Init>

  /*Configure GPIO pins : DFDATIN3_Pin DF_CKOUT_Pin */
  GPIO_InitStruct.Pin = DFDATIN3_Pin|DF_CKOUT_Pin;
 8000b2c:	2384      	movs	r3, #132	; 0x84
 8000b2e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b30:	2302      	movs	r3, #2
 8000b32:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b34:	2300      	movs	r3, #0
 8000b36:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000b3c:	2306      	movs	r3, #6
 8000b3e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b44:	4619      	mov	r1, r3
 8000b46:	484b      	ldr	r0, [pc, #300]	; (8000c74 <MX_GPIO_Init+0x48c>)
 8000b48:	f002 fc74 	bl	8003434 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART3_RX_Pin USART3_TX_Pin */
  GPIO_InitStruct.Pin = USART3_RX_Pin|USART3_TX_Pin;
 8000b4c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000b50:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b52:	2302      	movs	r3, #2
 8000b54:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b56:	2300      	movs	r3, #0
 8000b58:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b5a:	2303      	movs	r3, #3
 8000b5c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000b5e:	2307      	movs	r3, #7
 8000b60:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b66:	4619      	mov	r1, r3
 8000b68:	4844      	ldr	r0, [pc, #272]	; (8000c7c <MX_GPIO_Init+0x494>)
 8000b6a:	f002 fc63 	bl	8003434 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D0_Pin ARD_D1_Pin */
  GPIO_InitStruct.Pin = ARD_D0_Pin|ARD_D1_Pin;
 8000b6e:	2303      	movs	r3, #3
 8000b70:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b72:	2302      	movs	r3, #2
 8000b74:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b76:	2300      	movs	r3, #0
 8000b78:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b7a:	2303      	movs	r3, #3
 8000b7c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000b7e:	2308      	movs	r3, #8
 8000b80:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b86:	4619      	mov	r1, r3
 8000b88:	483a      	ldr	r0, [pc, #232]	; (8000c74 <MX_GPIO_Init+0x48c>)
 8000b8a:	f002 fc53 	bl	8003434 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000b8e:	2320      	movs	r3, #32
 8000b90:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b92:	2300      	movs	r3, #0
 8000b94:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b96:	2300      	movs	r3, #0
 8000b98:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ba4:	f002 fc46 	bl	8003434 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_CS_Pin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin;
 8000ba8:	2340      	movs	r3, #64	; 0x40
 8000baa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bac:	2301      	movs	r3, #1
 8000bae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 8000bb8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bc2:	f002 fc37 	bl	8003434 <HAL_GPIO_Init>

  /*Configure GPIO pin : USART2_RX_Pin */
  GPIO_InitStruct.Pin = USART2_RX_Pin;
 8000bc6:	2308      	movs	r3, #8
 8000bc8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bca:	2302      	movs	r3, #2
 8000bcc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bd2:	2303      	movs	r3, #3
 8000bd4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000bd6:	2307      	movs	r3, #7
 8000bd8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USART2_RX_GPIO_Port, &GPIO_InitStruct);
 8000bda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bde:	4619      	mov	r1, r3
 8000be0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000be4:	f002 fc26 	bl	8003434 <HAL_GPIO_Init>

  /*Configure GPIO pin : DSI_TE_Pin */
  GPIO_InitStruct.Pin = DSI_TE_Pin;
 8000be8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000bec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bee:	2302      	movs	r3, #2
 8000bf0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_DSI;
 8000bfa:	230b      	movs	r3, #11
 8000bfc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(DSI_TE_GPIO_Port, &GPIO_InitStruct);
 8000bfe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c02:	4619      	mov	r1, r3
 8000c04:	481e      	ldr	r0, [pc, #120]	; (8000c80 <MX_GPIO_Init+0x498>)
 8000c06:	f002 fc15 	bl	8003434 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_HSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin;
 8000c0a:	2310      	movs	r3, #16
 8000c0c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c0e:	2302      	movs	r3, #2
 8000c10:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c12:	2300      	movs	r3, #0
 8000c14:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c16:	2300      	movs	r3, #0
 8000c18:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 8000c1a:	230a      	movs	r3, #10
 8000c1c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(DCMI_HSYNC_GPIO_Port, &GPIO_InitStruct);
 8000c1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c22:	4619      	mov	r1, r3
 8000c24:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c28:	f002 fc04 	bl	8003434 <HAL_GPIO_Init>

  /*Configure GPIO pin : MFX_WAKEUP_Pin */
  GPIO_InitStruct.Pin = MFX_WAKEUP_Pin;
 8000c2c:	2304      	movs	r3, #4
 8000c2e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c30:	2301      	movs	r3, #1
 8000c32:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c34:	2300      	movs	r3, #0
 8000c36:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(MFX_WAKEUP_GPIO_Port, &GPIO_InitStruct);
 8000c3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c40:	4619      	mov	r1, r3
 8000c42:	480e      	ldr	r0, [pc, #56]	; (8000c7c <MX_GPIO_Init+0x494>)
 8000c44:	f002 fbf6 	bl	8003434 <HAL_GPIO_Init>

  /*Configure GPIO pin : DFDATIN1_Pin */
  GPIO_InitStruct.Pin = DFDATIN1_Pin;
 8000c48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c4c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c4e:	2302      	movs	r3, #2
 8000c50:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c52:	2300      	movs	r3, #0
 8000c54:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c56:	2300      	movs	r3, #0
 8000c58:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000c5a:	2306      	movs	r3, #6
 8000c5c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(DFDATIN1_GPIO_Port, &GPIO_InitStruct);
 8000c5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c62:	4619      	mov	r1, r3
 8000c64:	4805      	ldr	r0, [pc, #20]	; (8000c7c <MX_GPIO_Init+0x494>)
 8000c66:	f002 fbe5 	bl	8003434 <HAL_GPIO_Init>

}
 8000c6a:	bf00      	nop
 8000c6c:	3738      	adds	r7, #56	; 0x38
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	48000800 	.word	0x48000800
 8000c78:	48001800 	.word	0x48001800
 8000c7c:	48000400 	.word	0x48000400
 8000c80:	48001400 	.word	0x48001400

08000c84 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b082      	sub	sp, #8
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  for(;;)
  {
    osDelay(1);
 8000c8c:	2001      	movs	r0, #1
 8000c8e:	f009 f80c 	bl	8009caa <osDelay>
 8000c92:	e7fb      	b.n	8000c8c <StartDefaultTask+0x8>

08000c94 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	4a04      	ldr	r2, [pc, #16]	; (8000cb4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ca2:	4293      	cmp	r3, r2
 8000ca4:	d101      	bne.n	8000caa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000ca6:	f000 fc59 	bl	800155c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000caa:	bf00      	nop
 8000cac:	3708      	adds	r7, #8
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	40001000 	.word	0x40001000

08000cb8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cbc:	b672      	cpsid	i
}
 8000cbe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cc0:	e7fe      	b.n	8000cc0 <Error_Handler+0x8>
	...

08000cc4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b082      	sub	sp, #8
 8000cc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cca:	4b11      	ldr	r3, [pc, #68]	; (8000d10 <HAL_MspInit+0x4c>)
 8000ccc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cce:	4a10      	ldr	r2, [pc, #64]	; (8000d10 <HAL_MspInit+0x4c>)
 8000cd0:	f043 0301 	orr.w	r3, r3, #1
 8000cd4:	6613      	str	r3, [r2, #96]	; 0x60
 8000cd6:	4b0e      	ldr	r3, [pc, #56]	; (8000d10 <HAL_MspInit+0x4c>)
 8000cd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cda:	f003 0301 	and.w	r3, r3, #1
 8000cde:	607b      	str	r3, [r7, #4]
 8000ce0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ce2:	4b0b      	ldr	r3, [pc, #44]	; (8000d10 <HAL_MspInit+0x4c>)
 8000ce4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ce6:	4a0a      	ldr	r2, [pc, #40]	; (8000d10 <HAL_MspInit+0x4c>)
 8000ce8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cec:	6593      	str	r3, [r2, #88]	; 0x58
 8000cee:	4b08      	ldr	r3, [pc, #32]	; (8000d10 <HAL_MspInit+0x4c>)
 8000cf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cf6:	603b      	str	r3, [r7, #0]
 8000cf8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	210f      	movs	r1, #15
 8000cfe:	f06f 0001 	mvn.w	r0, #1
 8000d02:	f002 f8fb 	bl	8002efc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d06:	bf00      	nop
 8000d08:	3708      	adds	r7, #8
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	40021000 	.word	0x40021000

08000d14 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b0b2      	sub	sp, #200	; 0xc8
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d1c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000d20:	2200      	movs	r2, #0
 8000d22:	601a      	str	r2, [r3, #0]
 8000d24:	605a      	str	r2, [r3, #4]
 8000d26:	609a      	str	r2, [r3, #8]
 8000d28:	60da      	str	r2, [r3, #12]
 8000d2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d2c:	f107 0318 	add.w	r3, r7, #24
 8000d30:	229c      	movs	r2, #156	; 0x9c
 8000d32:	2100      	movs	r1, #0
 8000d34:	4618      	mov	r0, r3
 8000d36:	f00c fbdd 	bl	800d4f4 <memset>
  if(hadc->Instance==ADC1)
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	4a5c      	ldr	r2, [pc, #368]	; (8000eb0 <HAL_ADC_MspInit+0x19c>)
 8000d40:	4293      	cmp	r3, r2
 8000d42:	f040 80b1 	bne.w	8000ea8 <HAL_ADC_MspInit+0x194>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000d46:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000d4a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000d4c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000d50:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 8000d54:	2303      	movs	r3, #3
 8000d56:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 2;
 8000d58:	2302      	movs	r3, #2
 8000d5a:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8000d5c:	2308      	movs	r3, #8
 8000d5e:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8000d60:	2302      	movs	r3, #2
 8000d62:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000d64:	2302      	movs	r3, #2
 8000d66:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000d68:	2302      	movs	r3, #2
 8000d6a:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000d6c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000d70:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d72:	f107 0318 	add.w	r3, r7, #24
 8000d76:	4618      	mov	r0, r3
 8000d78:	f003 fe1e 	bl	80049b8 <HAL_RCCEx_PeriphCLKConfig>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d001      	beq.n	8000d86 <HAL_ADC_MspInit+0x72>
    {
      Error_Handler();
 8000d82:	f7ff ff99 	bl	8000cb8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000d86:	4b4b      	ldr	r3, [pc, #300]	; (8000eb4 <HAL_ADC_MspInit+0x1a0>)
 8000d88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d8a:	4a4a      	ldr	r2, [pc, #296]	; (8000eb4 <HAL_ADC_MspInit+0x1a0>)
 8000d8c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000d90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d92:	4b48      	ldr	r3, [pc, #288]	; (8000eb4 <HAL_ADC_MspInit+0x1a0>)
 8000d94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d96:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000d9a:	617b      	str	r3, [r7, #20]
 8000d9c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d9e:	4b45      	ldr	r3, [pc, #276]	; (8000eb4 <HAL_ADC_MspInit+0x1a0>)
 8000da0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000da2:	4a44      	ldr	r2, [pc, #272]	; (8000eb4 <HAL_ADC_MspInit+0x1a0>)
 8000da4:	f043 0304 	orr.w	r3, r3, #4
 8000da8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000daa:	4b42      	ldr	r3, [pc, #264]	; (8000eb4 <HAL_ADC_MspInit+0x1a0>)
 8000dac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dae:	f003 0304 	and.w	r3, r3, #4
 8000db2:	613b      	str	r3, [r7, #16]
 8000db4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000db6:	4b3f      	ldr	r3, [pc, #252]	; (8000eb4 <HAL_ADC_MspInit+0x1a0>)
 8000db8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dba:	4a3e      	ldr	r2, [pc, #248]	; (8000eb4 <HAL_ADC_MspInit+0x1a0>)
 8000dbc:	f043 0301 	orr.w	r3, r3, #1
 8000dc0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dc2:	4b3c      	ldr	r3, [pc, #240]	; (8000eb4 <HAL_ADC_MspInit+0x1a0>)
 8000dc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dc6:	f003 0301 	and.w	r3, r3, #1
 8000dca:	60fb      	str	r3, [r7, #12]
 8000dcc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dce:	4b39      	ldr	r3, [pc, #228]	; (8000eb4 <HAL_ADC_MspInit+0x1a0>)
 8000dd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dd2:	4a38      	ldr	r2, [pc, #224]	; (8000eb4 <HAL_ADC_MspInit+0x1a0>)
 8000dd4:	f043 0302 	orr.w	r3, r3, #2
 8000dd8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dda:	4b36      	ldr	r3, [pc, #216]	; (8000eb4 <HAL_ADC_MspInit+0x1a0>)
 8000ddc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dde:	f003 0302 	and.w	r3, r3, #2
 8000de2:	60bb      	str	r3, [r7, #8]
 8000de4:	68bb      	ldr	r3, [r7, #8]
    PA1     ------> ADC1_IN6
    PA7     ------> ADC1_IN12
    PA2     ------> ADC1_IN7
    PB0     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = ARD_A2_Pin|ARD_A1_Pin;
 8000de6:	2318      	movs	r3, #24
 8000de8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000dec:	230b      	movs	r3, #11
 8000dee:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df2:	2300      	movs	r3, #0
 8000df4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000df8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	482e      	ldr	r0, [pc, #184]	; (8000eb8 <HAL_ADC_MspInit+0x1a4>)
 8000e00:	f002 fb18 	bl	8003434 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|ARD_A0_Pin|GPIO_PIN_2;
 8000e04:	2387      	movs	r3, #135	; 0x87
 8000e06:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000e0a:	230b      	movs	r3, #11
 8000e0c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e10:	2300      	movs	r3, #0
 8000e12:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e16:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e20:	f002 fb08 	bl	8003434 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_A3_Pin;
 8000e24:	2301      	movs	r3, #1
 8000e26:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000e2a:	230b      	movs	r3, #11
 8000e2c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e30:	2300      	movs	r3, #0
 8000e32:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(ARD_A3_GPIO_Port, &GPIO_InitStruct);
 8000e36:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	481f      	ldr	r0, [pc, #124]	; (8000ebc <HAL_ADC_MspInit+0x1a8>)
 8000e3e:	f002 faf9 	bl	8003434 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000e42:	4b1f      	ldr	r3, [pc, #124]	; (8000ec0 <HAL_ADC_MspInit+0x1ac>)
 8000e44:	4a1f      	ldr	r2, [pc, #124]	; (8000ec4 <HAL_ADC_MspInit+0x1b0>)
 8000e46:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000e48:	4b1d      	ldr	r3, [pc, #116]	; (8000ec0 <HAL_ADC_MspInit+0x1ac>)
 8000e4a:	2205      	movs	r2, #5
 8000e4c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e4e:	4b1c      	ldr	r3, [pc, #112]	; (8000ec0 <HAL_ADC_MspInit+0x1ac>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e54:	4b1a      	ldr	r3, [pc, #104]	; (8000ec0 <HAL_ADC_MspInit+0x1ac>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000e5a:	4b19      	ldr	r3, [pc, #100]	; (8000ec0 <HAL_ADC_MspInit+0x1ac>)
 8000e5c:	2280      	movs	r2, #128	; 0x80
 8000e5e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000e60:	4b17      	ldr	r3, [pc, #92]	; (8000ec0 <HAL_ADC_MspInit+0x1ac>)
 8000e62:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e66:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000e68:	4b15      	ldr	r3, [pc, #84]	; (8000ec0 <HAL_ADC_MspInit+0x1ac>)
 8000e6a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e6e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000e70:	4b13      	ldr	r3, [pc, #76]	; (8000ec0 <HAL_ADC_MspInit+0x1ac>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000e76:	4b12      	ldr	r3, [pc, #72]	; (8000ec0 <HAL_ADC_MspInit+0x1ac>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000e7c:	4810      	ldr	r0, [pc, #64]	; (8000ec0 <HAL_ADC_MspInit+0x1ac>)
 8000e7e:	f002 f867 	bl	8002f50 <HAL_DMA_Init>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d001      	beq.n	8000e8c <HAL_ADC_MspInit+0x178>
    {
      Error_Handler();
 8000e88:	f7ff ff16 	bl	8000cb8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	4a0c      	ldr	r2, [pc, #48]	; (8000ec0 <HAL_ADC_MspInit+0x1ac>)
 8000e90:	651a      	str	r2, [r3, #80]	; 0x50
 8000e92:	4a0b      	ldr	r2, [pc, #44]	; (8000ec0 <HAL_ADC_MspInit+0x1ac>)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 5, 0);
 8000e98:	2200      	movs	r2, #0
 8000e9a:	2105      	movs	r1, #5
 8000e9c:	2012      	movs	r0, #18
 8000e9e:	f002 f82d 	bl	8002efc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8000ea2:	2012      	movs	r0, #18
 8000ea4:	f002 f846 	bl	8002f34 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000ea8:	bf00      	nop
 8000eaa:	37c8      	adds	r7, #200	; 0xc8
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	50040000 	.word	0x50040000
 8000eb4:	40021000 	.word	0x40021000
 8000eb8:	48000800 	.word	0x48000800
 8000ebc:	48000400 	.word	0x48000400
 8000ec0:	200001c4 	.word	0x200001c4
 8000ec4:	40020008 	.word	0x40020008

08000ec8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b08a      	sub	sp, #40	; 0x28
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed0:	f107 0314 	add.w	r3, r7, #20
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	601a      	str	r2, [r3, #0]
 8000ed8:	605a      	str	r2, [r3, #4]
 8000eda:	609a      	str	r2, [r3, #8]
 8000edc:	60da      	str	r2, [r3, #12]
 8000ede:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4a18      	ldr	r2, [pc, #96]	; (8000f48 <HAL_CAN_MspInit+0x80>)
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	d129      	bne.n	8000f3e <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000eea:	4b18      	ldr	r3, [pc, #96]	; (8000f4c <HAL_CAN_MspInit+0x84>)
 8000eec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eee:	4a17      	ldr	r2, [pc, #92]	; (8000f4c <HAL_CAN_MspInit+0x84>)
 8000ef0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000ef4:	6593      	str	r3, [r2, #88]	; 0x58
 8000ef6:	4b15      	ldr	r3, [pc, #84]	; (8000f4c <HAL_CAN_MspInit+0x84>)
 8000ef8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000efa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000efe:	613b      	str	r3, [r7, #16]
 8000f00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f02:	4b12      	ldr	r3, [pc, #72]	; (8000f4c <HAL_CAN_MspInit+0x84>)
 8000f04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f06:	4a11      	ldr	r2, [pc, #68]	; (8000f4c <HAL_CAN_MspInit+0x84>)
 8000f08:	f043 0301 	orr.w	r3, r3, #1
 8000f0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f0e:	4b0f      	ldr	r3, [pc, #60]	; (8000f4c <HAL_CAN_MspInit+0x84>)
 8000f10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f12:	f003 0301 	and.w	r3, r3, #1
 8000f16:	60fb      	str	r3, [r7, #12]
 8000f18:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA12     ------> CAN1_TX
    PA11     ------> CAN1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11;
 8000f1a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000f1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f20:	2302      	movs	r3, #2
 8000f22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f24:	2300      	movs	r3, #0
 8000f26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f28:	2303      	movs	r3, #3
 8000f2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000f2c:	2309      	movs	r3, #9
 8000f2e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f30:	f107 0314 	add.w	r3, r7, #20
 8000f34:	4619      	mov	r1, r3
 8000f36:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f3a:	f002 fa7b 	bl	8003434 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000f3e:	bf00      	nop
 8000f40:	3728      	adds	r7, #40	; 0x28
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	40006400 	.word	0x40006400
 8000f4c:	40021000 	.word	0x40021000

08000f50 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b0b2      	sub	sp, #200	; 0xc8
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f58:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	601a      	str	r2, [r3, #0]
 8000f60:	605a      	str	r2, [r3, #4]
 8000f62:	609a      	str	r2, [r3, #8]
 8000f64:	60da      	str	r2, [r3, #12]
 8000f66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f68:	f107 0318 	add.w	r3, r7, #24
 8000f6c:	229c      	movs	r2, #156	; 0x9c
 8000f6e:	2100      	movs	r1, #0
 8000f70:	4618      	mov	r0, r3
 8000f72:	f00c fabf 	bl	800d4f4 <memset>
  if(hi2c->Instance==I2C1)
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	4a33      	ldr	r2, [pc, #204]	; (8001048 <HAL_I2C_MspInit+0xf8>)
 8000f7c:	4293      	cmp	r3, r2
 8000f7e:	d15e      	bne.n	800103e <HAL_I2C_MspInit+0xee>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000f80:	2340      	movs	r3, #64	; 0x40
 8000f82:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000f84:	2300      	movs	r3, #0
 8000f86:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f88:	f107 0318 	add.w	r3, r7, #24
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f003 fd13 	bl	80049b8 <HAL_RCCEx_PeriphCLKConfig>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d001      	beq.n	8000f9c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000f98:	f7ff fe8e 	bl	8000cb8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f9c:	4b2b      	ldr	r3, [pc, #172]	; (800104c <HAL_I2C_MspInit+0xfc>)
 8000f9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fa0:	4a2a      	ldr	r2, [pc, #168]	; (800104c <HAL_I2C_MspInit+0xfc>)
 8000fa2:	f043 0302 	orr.w	r3, r3, #2
 8000fa6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fa8:	4b28      	ldr	r3, [pc, #160]	; (800104c <HAL_I2C_MspInit+0xfc>)
 8000faa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fac:	f003 0302 	and.w	r3, r3, #2
 8000fb0:	617b      	str	r3, [r7, #20]
 8000fb2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000fb4:	4b25      	ldr	r3, [pc, #148]	; (800104c <HAL_I2C_MspInit+0xfc>)
 8000fb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fb8:	4a24      	ldr	r2, [pc, #144]	; (800104c <HAL_I2C_MspInit+0xfc>)
 8000fba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000fbe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fc0:	4b22      	ldr	r3, [pc, #136]	; (800104c <HAL_I2C_MspInit+0xfc>)
 8000fc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fc8:	613b      	str	r3, [r7, #16]
 8000fca:	693b      	ldr	r3, [r7, #16]
    HAL_PWREx_EnableVddIO2();
 8000fcc:	f002 fdde 	bl	8003b8c <HAL_PWREx_EnableVddIO2>
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PG13     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin;
 8000fd0:	2340      	movs	r3, #64	; 0x40
 8000fd2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fd6:	2312      	movs	r3, #18
 8000fd8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fdc:	2301      	movs	r3, #1
 8000fde:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fe2:	2303      	movs	r3, #3
 8000fe4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000fe8:	2304      	movs	r3, #4
 8000fea:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(I2C1_SCL_GPIO_Port, &GPIO_InitStruct);
 8000fee:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	4816      	ldr	r0, [pc, #88]	; (8001050 <HAL_I2C_MspInit+0x100>)
 8000ff6:	f002 fa1d 	bl	8003434 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C1_SDA_Pin;
 8000ffa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ffe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001002:	2312      	movs	r3, #18
 8001004:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001008:	2301      	movs	r3, #1
 800100a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800100e:	2303      	movs	r3, #3
 8001010:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001014:	2304      	movs	r3, #4
 8001016:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(I2C1_SDA_GPIO_Port, &GPIO_InitStruct);
 800101a:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800101e:	4619      	mov	r1, r3
 8001020:	480c      	ldr	r0, [pc, #48]	; (8001054 <HAL_I2C_MspInit+0x104>)
 8001022:	f002 fa07 	bl	8003434 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001026:	4b09      	ldr	r3, [pc, #36]	; (800104c <HAL_I2C_MspInit+0xfc>)
 8001028:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800102a:	4a08      	ldr	r2, [pc, #32]	; (800104c <HAL_I2C_MspInit+0xfc>)
 800102c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001030:	6593      	str	r3, [r2, #88]	; 0x58
 8001032:	4b06      	ldr	r3, [pc, #24]	; (800104c <HAL_I2C_MspInit+0xfc>)
 8001034:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001036:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800103a:	60fb      	str	r3, [r7, #12]
 800103c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800103e:	bf00      	nop
 8001040:	37c8      	adds	r7, #200	; 0xc8
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	40005400 	.word	0x40005400
 800104c:	40021000 	.word	0x40021000
 8001050:	48000400 	.word	0x48000400
 8001054:	48001800 	.word	0x48001800

08001058 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b0b2      	sub	sp, #200	; 0xc8
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001060:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001064:	2200      	movs	r2, #0
 8001066:	601a      	str	r2, [r3, #0]
 8001068:	605a      	str	r2, [r3, #4]
 800106a:	609a      	str	r2, [r3, #8]
 800106c:	60da      	str	r2, [r3, #12]
 800106e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001070:	f107 0318 	add.w	r3, r7, #24
 8001074:	229c      	movs	r2, #156	; 0x9c
 8001076:	2100      	movs	r1, #0
 8001078:	4618      	mov	r0, r3
 800107a:	f00c fa3b 	bl	800d4f4 <memset>
  if(hsd->Instance==SDMMC1)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	4a37      	ldr	r2, [pc, #220]	; (8001160 <HAL_SD_MspInit+0x108>)
 8001084:	4293      	cmp	r3, r2
 8001086:	d167      	bne.n	8001158 <HAL_SD_MspInit+0x100>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1;
 8001088:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800108c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_PLLP;
 800108e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001092:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001096:	f107 0318 	add.w	r3, r7, #24
 800109a:	4618      	mov	r0, r3
 800109c:	f003 fc8c 	bl	80049b8 <HAL_RCCEx_PeriphCLKConfig>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d001      	beq.n	80010aa <HAL_SD_MspInit+0x52>
    {
      Error_Handler();
 80010a6:	f7ff fe07 	bl	8000cb8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80010aa:	4b2e      	ldr	r3, [pc, #184]	; (8001164 <HAL_SD_MspInit+0x10c>)
 80010ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ae:	4a2d      	ldr	r2, [pc, #180]	; (8001164 <HAL_SD_MspInit+0x10c>)
 80010b0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80010b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010b6:	4b2b      	ldr	r3, [pc, #172]	; (8001164 <HAL_SD_MspInit+0x10c>)
 80010b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010be:	617b      	str	r3, [r7, #20]
 80010c0:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80010c2:	4b28      	ldr	r3, [pc, #160]	; (8001164 <HAL_SD_MspInit+0x10c>)
 80010c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010c6:	4a27      	ldr	r2, [pc, #156]	; (8001164 <HAL_SD_MspInit+0x10c>)
 80010c8:	f043 0308 	orr.w	r3, r3, #8
 80010cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010ce:	4b25      	ldr	r3, [pc, #148]	; (8001164 <HAL_SD_MspInit+0x10c>)
 80010d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010d2:	f003 0308 	and.w	r3, r3, #8
 80010d6:	613b      	str	r3, [r7, #16]
 80010d8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010da:	4b22      	ldr	r3, [pc, #136]	; (8001164 <HAL_SD_MspInit+0x10c>)
 80010dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010de:	4a21      	ldr	r2, [pc, #132]	; (8001164 <HAL_SD_MspInit+0x10c>)
 80010e0:	f043 0304 	orr.w	r3, r3, #4
 80010e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010e6:	4b1f      	ldr	r3, [pc, #124]	; (8001164 <HAL_SD_MspInit+0x10c>)
 80010e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ea:	f003 0304 	and.w	r3, r3, #4
 80010ee:	60fb      	str	r3, [r7, #12]
 80010f0:	68fb      	ldr	r3, [r7, #12]
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PC8     ------> SDMMC1_D0
    PC9     ------> SDMMC1_D1
    */
    GPIO_InitStruct.Pin = uSD_CMD_Pin;
 80010f2:	2304      	movs	r3, #4
 80010f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f8:	2302      	movs	r3, #2
 80010fa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fe:	2300      	movs	r3, #0
 8001100:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001104:	2303      	movs	r3, #3
 8001106:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800110a:	230c      	movs	r3, #12
 800110c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(uSD_CMD_GPIO_Port, &GPIO_InitStruct);
 8001110:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001114:	4619      	mov	r1, r3
 8001116:	4814      	ldr	r0, [pc, #80]	; (8001168 <HAL_SD_MspInit+0x110>)
 8001118:	f002 f98c 	bl	8003434 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = uSD_D2_Pin|uSD_D3_Pin|uSD_CLK_Pin|uSD_D0_Pin
 800111c:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001120:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
                          |uSD_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001124:	2302      	movs	r3, #2
 8001126:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112a:	2300      	movs	r3, #0
 800112c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001130:	2303      	movs	r3, #3
 8001132:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001136:	230c      	movs	r3, #12
 8001138:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800113c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001140:	4619      	mov	r1, r3
 8001142:	480a      	ldr	r0, [pc, #40]	; (800116c <HAL_SD_MspInit+0x114>)
 8001144:	f002 f976 	bl	8003434 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 5, 0);
 8001148:	2200      	movs	r2, #0
 800114a:	2105      	movs	r1, #5
 800114c:	2031      	movs	r0, #49	; 0x31
 800114e:	f001 fed5 	bl	8002efc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8001152:	2031      	movs	r0, #49	; 0x31
 8001154:	f001 feee 	bl	8002f34 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8001158:	bf00      	nop
 800115a:	37c8      	adds	r7, #200	; 0xc8
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	50062400 	.word	0x50062400
 8001164:	40021000 	.word	0x40021000
 8001168:	48000c00 	.word	0x48000c00
 800116c:	48000800 	.word	0x48000800

08001170 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b08a      	sub	sp, #40	; 0x28
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001178:	f107 0314 	add.w	r3, r7, #20
 800117c:	2200      	movs	r2, #0
 800117e:	601a      	str	r2, [r3, #0]
 8001180:	605a      	str	r2, [r3, #4]
 8001182:	609a      	str	r2, [r3, #8]
 8001184:	60da      	str	r2, [r3, #12]
 8001186:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a25      	ldr	r2, [pc, #148]	; (8001224 <HAL_SPI_MspInit+0xb4>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d144      	bne.n	800121c <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001192:	4b25      	ldr	r3, [pc, #148]	; (8001228 <HAL_SPI_MspInit+0xb8>)
 8001194:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001196:	4a24      	ldr	r2, [pc, #144]	; (8001228 <HAL_SPI_MspInit+0xb8>)
 8001198:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800119c:	6593      	str	r3, [r2, #88]	; 0x58
 800119e:	4b22      	ldr	r3, [pc, #136]	; (8001228 <HAL_SPI_MspInit+0xb8>)
 80011a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011a6:	613b      	str	r3, [r7, #16]
 80011a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 80011aa:	4b1f      	ldr	r3, [pc, #124]	; (8001228 <HAL_SPI_MspInit+0xb8>)
 80011ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ae:	4a1e      	ldr	r2, [pc, #120]	; (8001228 <HAL_SPI_MspInit+0xb8>)
 80011b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011b6:	4b1c      	ldr	r3, [pc, #112]	; (8001228 <HAL_SPI_MspInit+0xb8>)
 80011b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011be:	60fb      	str	r3, [r7, #12]
 80011c0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011c2:	4b19      	ldr	r3, [pc, #100]	; (8001228 <HAL_SPI_MspInit+0xb8>)
 80011c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011c6:	4a18      	ldr	r2, [pc, #96]	; (8001228 <HAL_SPI_MspInit+0xb8>)
 80011c8:	f043 0302 	orr.w	r3, r3, #2
 80011cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011ce:	4b16      	ldr	r3, [pc, #88]	; (8001228 <HAL_SPI_MspInit+0xb8>)
 80011d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011d2:	f003 0302 	and.w	r3, r3, #2
 80011d6:	60bb      	str	r3, [r7, #8]
 80011d8:	68bb      	ldr	r3, [r7, #8]
    PI0     ------> SPI2_NSS
    PB15     ------> SPI2_MOSI
    PB14     ------> SPI2_MISO
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = ARD_10_Pin;
 80011da:	2301      	movs	r3, #1
 80011dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011de:	2302      	movs	r3, #2
 80011e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e2:	2300      	movs	r3, #0
 80011e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011e6:	2303      	movs	r3, #3
 80011e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80011ea:	2305      	movs	r3, #5
 80011ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARD_10_GPIO_Port, &GPIO_InitStruct);
 80011ee:	f107 0314 	add.w	r3, r7, #20
 80011f2:	4619      	mov	r1, r3
 80011f4:	480d      	ldr	r0, [pc, #52]	; (800122c <HAL_SPI_MspInit+0xbc>)
 80011f6:	f002 f91d 	bl	8003434 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI_MOSI_Pin|SPI2_MISO_Pin|SPI2_CLK_Pin;
 80011fa:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80011fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001200:	2302      	movs	r3, #2
 8001202:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001204:	2300      	movs	r3, #0
 8001206:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001208:	2303      	movs	r3, #3
 800120a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800120c:	2305      	movs	r3, #5
 800120e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001210:	f107 0314 	add.w	r3, r7, #20
 8001214:	4619      	mov	r1, r3
 8001216:	4806      	ldr	r0, [pc, #24]	; (8001230 <HAL_SPI_MspInit+0xc0>)
 8001218:	f002 f90c 	bl	8003434 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800121c:	bf00      	nop
 800121e:	3728      	adds	r7, #40	; 0x28
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	40003800 	.word	0x40003800
 8001228:	40021000 	.word	0x40021000
 800122c:	48002000 	.word	0x48002000
 8001230:	48000400 	.word	0x48000400

08001234 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001234:	b580      	push	{r7, lr}
 8001236:	b086      	sub	sp, #24
 8001238:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800123a:	1d3b      	adds	r3, r7, #4
 800123c:	2200      	movs	r2, #0
 800123e:	601a      	str	r2, [r3, #0]
 8001240:	605a      	str	r2, [r3, #4]
 8001242:	609a      	str	r2, [r3, #8]
 8001244:	60da      	str	r2, [r3, #12]
 8001246:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001248:	4b32      	ldr	r3, [pc, #200]	; (8001314 <HAL_FMC_MspInit+0xe0>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	2b00      	cmp	r3, #0
 800124e:	d15d      	bne.n	800130c <HAL_FMC_MspInit+0xd8>
    return;
  }
  FMC_Initialized = 1;
 8001250:	4b30      	ldr	r3, [pc, #192]	; (8001314 <HAL_FMC_MspInit+0xe0>)
 8001252:	2201      	movs	r2, #1
 8001254:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001256:	4b30      	ldr	r3, [pc, #192]	; (8001318 <HAL_FMC_MspInit+0xe4>)
 8001258:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800125a:	4a2f      	ldr	r2, [pc, #188]	; (8001318 <HAL_FMC_MspInit+0xe4>)
 800125c:	f043 0301 	orr.w	r3, r3, #1
 8001260:	6513      	str	r3, [r2, #80]	; 0x50
 8001262:	4b2d      	ldr	r3, [pc, #180]	; (8001318 <HAL_FMC_MspInit+0xe4>)
 8001264:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001266:	f003 0301 	and.w	r3, r3, #1
 800126a:	603b      	str	r3, [r7, #0]
 800126c:	683b      	ldr	r3, [r7, #0]
  PF13   ------> FMC_A7
  PE12   ------> FMC_D9
  PF12   ------> FMC_A6
  PE11   ------> FMC_D8
  */
  GPIO_InitStruct.Pin = PSRAM_NBL0_Pin|PSRAM_NBL1_Pin|PSRAM_A20_Pin|PSRAM_A19_Pin
 800126e:	f64f 739b 	movw	r3, #65435	; 0xff9b
 8001272:	607b      	str	r3, [r7, #4]
                          |D7_Pin|D6_Pin|D12_Pin|D5_Pin
                          |D11_Pin|D4_Pin|D10_Pin|D9_Pin
                          |D8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001274:	2302      	movs	r3, #2
 8001276:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001278:	2300      	movs	r3, #0
 800127a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800127c:	2303      	movs	r3, #3
 800127e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001280:	230c      	movs	r3, #12
 8001282:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001284:	1d3b      	adds	r3, r7, #4
 8001286:	4619      	mov	r1, r3
 8001288:	4824      	ldr	r0, [pc, #144]	; (800131c <HAL_FMC_MspInit+0xe8>)
 800128a:	f002 f8d3 	bl	8003434 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D2_Pin|PSRAM_OE_Pin|D3_Pin|PSRAM_WE_Pin
 800128e:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 8001292:	607b      	str	r3, [r7, #4]
                          |PSRAM_WAIT_Pin|PSRAM_CLK_Pin|PSRAM_NE1_Pin|PSRAM_A18_Pin
                          |D1_Pin|D0_Pin|PSRAM_A17_Pin|PSRAM_A16_Pin
                          |D15_Pin|D14_Pin|D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001294:	2302      	movs	r3, #2
 8001296:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001298:	2300      	movs	r3, #0
 800129a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800129c:	2303      	movs	r3, #3
 800129e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80012a0:	230c      	movs	r3, #12
 80012a2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012a4:	1d3b      	adds	r3, r7, #4
 80012a6:	4619      	mov	r1, r3
 80012a8:	481d      	ldr	r0, [pc, #116]	; (8001320 <HAL_FMC_MspInit+0xec>)
 80012aa:	f002 f8c3 	bl	8003434 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = PSRAM_ADV_Pin;
 80012ae:	2380      	movs	r3, #128	; 0x80
 80012b0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b2:	2302      	movs	r3, #2
 80012b4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b6:	2300      	movs	r3, #0
 80012b8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012ba:	2303      	movs	r3, #3
 80012bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80012be:	230c      	movs	r3, #12
 80012c0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(PSRAM_ADV_GPIO_Port, &GPIO_InitStruct);
 80012c2:	1d3b      	adds	r3, r7, #4
 80012c4:	4619      	mov	r1, r3
 80012c6:	4817      	ldr	r0, [pc, #92]	; (8001324 <HAL_FMC_MspInit+0xf0>)
 80012c8:	f002 f8b4 	bl	8003434 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = PSRAM_A2_Pin|PSRAM_A1_Pin|PSRAM_A0_Pin|PSRAM_A3_Pin
 80012cc:	f24f 033f 	movw	r3, #61503	; 0xf03f
 80012d0:	607b      	str	r3, [r7, #4]
                          |PSRAM_A4_Pin|PSRAM_A5_Pin|PSRAM_A9_Pin|PSRAM_A8_Pin
                          |PSRAM_A7_Pin|PSRAM_A6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d2:	2302      	movs	r3, #2
 80012d4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d6:	2300      	movs	r3, #0
 80012d8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012da:	2303      	movs	r3, #3
 80012dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80012de:	230c      	movs	r3, #12
 80012e0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80012e2:	1d3b      	adds	r3, r7, #4
 80012e4:	4619      	mov	r1, r3
 80012e6:	4810      	ldr	r0, [pc, #64]	; (8001328 <HAL_FMC_MspInit+0xf4>)
 80012e8:	f002 f8a4 	bl	8003434 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = PSRAM_A14_Pin|PSRAM_A13_Pin|PSRAM_A15_Pin|PSRAM_A11_Pin
 80012ec:	233f      	movs	r3, #63	; 0x3f
 80012ee:	607b      	str	r3, [r7, #4]
                          |PSRAM_A12_Pin|PSRAM_A10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f0:	2302      	movs	r3, #2
 80012f2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f4:	2300      	movs	r3, #0
 80012f6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012f8:	2303      	movs	r3, #3
 80012fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80012fc:	230c      	movs	r3, #12
 80012fe:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001300:	1d3b      	adds	r3, r7, #4
 8001302:	4619      	mov	r1, r3
 8001304:	4809      	ldr	r0, [pc, #36]	; (800132c <HAL_FMC_MspInit+0xf8>)
 8001306:	f002 f895 	bl	8003434 <HAL_GPIO_Init>
 800130a:	e000      	b.n	800130e <HAL_FMC_MspInit+0xda>
    return;
 800130c:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800130e:	3718      	adds	r7, #24
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}
 8001314:	200003d8 	.word	0x200003d8
 8001318:	40021000 	.word	0x40021000
 800131c:	48001000 	.word	0x48001000
 8001320:	48000c00 	.word	0x48000c00
 8001324:	48000400 	.word	0x48000400
 8001328:	48001400 	.word	0x48001400
 800132c:	48001800 	.word	0x48001800

08001330 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001338:	f7ff ff7c 	bl	8001234 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 800133c:	bf00      	nop
 800133e:	3708      	adds	r7, #8
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}

08001344 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b08e      	sub	sp, #56	; 0x38
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 800134c:	2300      	movs	r3, #0
 800134e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001352:	4b34      	ldr	r3, [pc, #208]	; (8001424 <HAL_InitTick+0xe0>)
 8001354:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001356:	4a33      	ldr	r2, [pc, #204]	; (8001424 <HAL_InitTick+0xe0>)
 8001358:	f043 0310 	orr.w	r3, r3, #16
 800135c:	6593      	str	r3, [r2, #88]	; 0x58
 800135e:	4b31      	ldr	r3, [pc, #196]	; (8001424 <HAL_InitTick+0xe0>)
 8001360:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001362:	f003 0310 	and.w	r3, r3, #16
 8001366:	60fb      	str	r3, [r7, #12]
 8001368:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800136a:	f107 0210 	add.w	r2, r7, #16
 800136e:	f107 0314 	add.w	r3, r7, #20
 8001372:	4611      	mov	r1, r2
 8001374:	4618      	mov	r0, r3
 8001376:	f003 fa2f 	bl	80047d8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800137a:	6a3b      	ldr	r3, [r7, #32]
 800137c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800137e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001380:	2b00      	cmp	r3, #0
 8001382:	d103      	bne.n	800138c <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001384:	f003 f9fc 	bl	8004780 <HAL_RCC_GetPCLK1Freq>
 8001388:	6378      	str	r0, [r7, #52]	; 0x34
 800138a:	e004      	b.n	8001396 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800138c:	f003 f9f8 	bl	8004780 <HAL_RCC_GetPCLK1Freq>
 8001390:	4603      	mov	r3, r0
 8001392:	005b      	lsls	r3, r3, #1
 8001394:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001396:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001398:	4a23      	ldr	r2, [pc, #140]	; (8001428 <HAL_InitTick+0xe4>)
 800139a:	fba2 2303 	umull	r2, r3, r2, r3
 800139e:	0c9b      	lsrs	r3, r3, #18
 80013a0:	3b01      	subs	r3, #1
 80013a2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80013a4:	4b21      	ldr	r3, [pc, #132]	; (800142c <HAL_InitTick+0xe8>)
 80013a6:	4a22      	ldr	r2, [pc, #136]	; (8001430 <HAL_InitTick+0xec>)
 80013a8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80013aa:	4b20      	ldr	r3, [pc, #128]	; (800142c <HAL_InitTick+0xe8>)
 80013ac:	f240 32e7 	movw	r2, #999	; 0x3e7
 80013b0:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80013b2:	4a1e      	ldr	r2, [pc, #120]	; (800142c <HAL_InitTick+0xe8>)
 80013b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013b6:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80013b8:	4b1c      	ldr	r3, [pc, #112]	; (800142c <HAL_InitTick+0xe8>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013be:	4b1b      	ldr	r3, [pc, #108]	; (800142c <HAL_InitTick+0xe8>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013c4:	4b19      	ldr	r3, [pc, #100]	; (800142c <HAL_InitTick+0xe8>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80013ca:	4818      	ldr	r0, [pc, #96]	; (800142c <HAL_InitTick+0xe8>)
 80013cc:	f006 fe7e 	bl	80080cc <HAL_TIM_Base_Init>
 80013d0:	4603      	mov	r3, r0
 80013d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80013d6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d11b      	bne.n	8001416 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80013de:	4813      	ldr	r0, [pc, #76]	; (800142c <HAL_InitTick+0xe8>)
 80013e0:	f006 fed6 	bl	8008190 <HAL_TIM_Base_Start_IT>
 80013e4:	4603      	mov	r3, r0
 80013e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80013ea:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d111      	bne.n	8001416 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80013f2:	2036      	movs	r0, #54	; 0x36
 80013f4:	f001 fd9e 	bl	8002f34 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	2b0f      	cmp	r3, #15
 80013fc:	d808      	bhi.n	8001410 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80013fe:	2200      	movs	r2, #0
 8001400:	6879      	ldr	r1, [r7, #4]
 8001402:	2036      	movs	r0, #54	; 0x36
 8001404:	f001 fd7a 	bl	8002efc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001408:	4a0a      	ldr	r2, [pc, #40]	; (8001434 <HAL_InitTick+0xf0>)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6013      	str	r3, [r2, #0]
 800140e:	e002      	b.n	8001416 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8001410:	2301      	movs	r3, #1
 8001412:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001416:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800141a:	4618      	mov	r0, r3
 800141c:	3738      	adds	r7, #56	; 0x38
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	40021000 	.word	0x40021000
 8001428:	431bde83 	.word	0x431bde83
 800142c:	200003dc 	.word	0x200003dc
 8001430:	40001000 	.word	0x40001000
 8001434:	20000008 	.word	0x20000008

08001438 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800143c:	e7fe      	b.n	800143c <NMI_Handler+0x4>

0800143e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800143e:	b480      	push	{r7}
 8001440:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001442:	e7fe      	b.n	8001442 <HardFault_Handler+0x4>

08001444 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001448:	e7fe      	b.n	8001448 <MemManage_Handler+0x4>

0800144a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800144a:	b480      	push	{r7}
 800144c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800144e:	e7fe      	b.n	800144e <BusFault_Handler+0x4>

08001450 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001454:	e7fe      	b.n	8001454 <UsageFault_Handler+0x4>

08001456 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001456:	b480      	push	{r7}
 8001458:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800145a:	bf00      	nop
 800145c:	46bd      	mov	sp, r7
 800145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001462:	4770      	bx	lr

08001464 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001468:	4802      	ldr	r0, [pc, #8]	; (8001474 <DMA1_Channel1_IRQHandler+0x10>)
 800146a:	f001 fe94 	bl	8003196 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800146e:	bf00      	nop
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	200001c4 	.word	0x200001c4

08001478 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800147c:	4802      	ldr	r0, [pc, #8]	; (8001488 <ADC1_IRQHandler+0x10>)
 800147e:	f000 fc6f 	bl	8001d60 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8001482:	bf00      	nop
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	2000015c 	.word	0x2000015c

0800148c <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8001490:	4802      	ldr	r0, [pc, #8]	; (800149c <SDMMC1_IRQHandler+0x10>)
 8001492:	f005 fab3 	bl	80069fc <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8001496:	bf00      	nop
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	200002a0 	.word	0x200002a0

080014a0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80014a4:	4802      	ldr	r0, [pc, #8]	; (80014b0 <TIM6_DAC_IRQHandler+0x10>)
 80014a6:	f006 fee3 	bl	8008270 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80014aa:	bf00      	nop
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	200003dc 	.word	0x200003dc

080014b4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80014b8:	4b06      	ldr	r3, [pc, #24]	; (80014d4 <SystemInit+0x20>)
 80014ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014be:	4a05      	ldr	r2, [pc, #20]	; (80014d4 <SystemInit+0x20>)
 80014c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80014c8:	bf00      	nop
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr
 80014d2:	bf00      	nop
 80014d4:	e000ed00 	.word	0xe000ed00

080014d8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80014d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001510 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80014dc:	f7ff ffea 	bl	80014b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014e0:	480c      	ldr	r0, [pc, #48]	; (8001514 <LoopForever+0x6>)
  ldr r1, =_edata
 80014e2:	490d      	ldr	r1, [pc, #52]	; (8001518 <LoopForever+0xa>)
  ldr r2, =_sidata
 80014e4:	4a0d      	ldr	r2, [pc, #52]	; (800151c <LoopForever+0xe>)
  movs r3, #0
 80014e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014e8:	e002      	b.n	80014f0 <LoopCopyDataInit>

080014ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014ee:	3304      	adds	r3, #4

080014f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014f4:	d3f9      	bcc.n	80014ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014f6:	4a0a      	ldr	r2, [pc, #40]	; (8001520 <LoopForever+0x12>)
  ldr r4, =_ebss
 80014f8:	4c0a      	ldr	r4, [pc, #40]	; (8001524 <LoopForever+0x16>)
  movs r3, #0
 80014fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014fc:	e001      	b.n	8001502 <LoopFillZerobss>

080014fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001500:	3204      	adds	r2, #4

08001502 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001502:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001504:	d3fb      	bcc.n	80014fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001506:	f00b ffc1 	bl	800d48c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800150a:	f7fe ff01 	bl	8000310 <main>

0800150e <LoopForever>:

LoopForever:
    b LoopForever
 800150e:	e7fe      	b.n	800150e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001510:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001514:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001518:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 800151c:	0800d810 	.word	0x0800d810
  ldr r2, =_sbss
 8001520:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001524:	20001e14 	.word	0x20001e14

08001528 <CAN1_RX0_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001528:	e7fe      	b.n	8001528 <CAN1_RX0_IRQHandler>

0800152a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800152a:	b580      	push	{r7, lr}
 800152c:	b082      	sub	sp, #8
 800152e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001530:	2300      	movs	r3, #0
 8001532:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001534:	2003      	movs	r0, #3
 8001536:	f001 fcd6 	bl	8002ee6 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800153a:	200f      	movs	r0, #15
 800153c:	f7ff ff02 	bl	8001344 <HAL_InitTick>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d002      	beq.n	800154c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001546:	2301      	movs	r3, #1
 8001548:	71fb      	strb	r3, [r7, #7]
 800154a:	e001      	b.n	8001550 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800154c:	f7ff fbba 	bl	8000cc4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001550:	79fb      	ldrb	r3, [r7, #7]
}
 8001552:	4618      	mov	r0, r3
 8001554:	3708      	adds	r7, #8
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
	...

0800155c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001560:	4b06      	ldr	r3, [pc, #24]	; (800157c <HAL_IncTick+0x20>)
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	461a      	mov	r2, r3
 8001566:	4b06      	ldr	r3, [pc, #24]	; (8001580 <HAL_IncTick+0x24>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4413      	add	r3, r2
 800156c:	4a04      	ldr	r2, [pc, #16]	; (8001580 <HAL_IncTick+0x24>)
 800156e:	6013      	str	r3, [r2, #0]
}
 8001570:	bf00      	nop
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr
 800157a:	bf00      	nop
 800157c:	2000000c 	.word	0x2000000c
 8001580:	20000428 	.word	0x20000428

08001584 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
  return uwTick;
 8001588:	4b03      	ldr	r3, [pc, #12]	; (8001598 <HAL_GetTick+0x14>)
 800158a:	681b      	ldr	r3, [r3, #0]
}
 800158c:	4618      	mov	r0, r3
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr
 8001596:	bf00      	nop
 8001598:	20000428 	.word	0x20000428

0800159c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b084      	sub	sp, #16
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015a4:	f7ff ffee 	bl	8001584 <HAL_GetTick>
 80015a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80015b4:	d005      	beq.n	80015c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80015b6:	4b0a      	ldr	r3, [pc, #40]	; (80015e0 <HAL_Delay+0x44>)
 80015b8:	781b      	ldrb	r3, [r3, #0]
 80015ba:	461a      	mov	r2, r3
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	4413      	add	r3, r2
 80015c0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015c2:	bf00      	nop
 80015c4:	f7ff ffde 	bl	8001584 <HAL_GetTick>
 80015c8:	4602      	mov	r2, r0
 80015ca:	68bb      	ldr	r3, [r7, #8]
 80015cc:	1ad3      	subs	r3, r2, r3
 80015ce:	68fa      	ldr	r2, [r7, #12]
 80015d0:	429a      	cmp	r2, r3
 80015d2:	d8f7      	bhi.n	80015c4 <HAL_Delay+0x28>
  {
  }
}
 80015d4:	bf00      	nop
 80015d6:	bf00      	nop
 80015d8:	3710      	adds	r7, #16
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	2000000c 	.word	0x2000000c

080015e4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b083      	sub	sp, #12
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
 80015ec:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	689b      	ldr	r3, [r3, #8]
 80015f2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	431a      	orrs	r2, r3
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	609a      	str	r2, [r3, #8]
}
 80015fe:	bf00      	nop
 8001600:	370c      	adds	r7, #12
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr

0800160a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800160a:	b480      	push	{r7}
 800160c:	b083      	sub	sp, #12
 800160e:	af00      	add	r7, sp, #0
 8001610:	6078      	str	r0, [r7, #4]
 8001612:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	689b      	ldr	r3, [r3, #8]
 8001618:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	431a      	orrs	r2, r3
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	609a      	str	r2, [r3, #8]
}
 8001624:	bf00      	nop
 8001626:	370c      	adds	r7, #12
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr

08001630 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001630:	b480      	push	{r7}
 8001632:	b083      	sub	sp, #12
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	689b      	ldr	r3, [r3, #8]
 800163c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001640:	4618      	mov	r0, r3
 8001642:	370c      	adds	r7, #12
 8001644:	46bd      	mov	sp, r7
 8001646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164a:	4770      	bx	lr

0800164c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800164c:	b480      	push	{r7}
 800164e:	b087      	sub	sp, #28
 8001650:	af00      	add	r7, sp, #0
 8001652:	60f8      	str	r0, [r7, #12]
 8001654:	60b9      	str	r1, [r7, #8]
 8001656:	607a      	str	r2, [r7, #4]
 8001658:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	3360      	adds	r3, #96	; 0x60
 800165e:	461a      	mov	r2, r3
 8001660:	68bb      	ldr	r3, [r7, #8]
 8001662:	009b      	lsls	r3, r3, #2
 8001664:	4413      	add	r3, r2
 8001666:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	681a      	ldr	r2, [r3, #0]
 800166c:	4b08      	ldr	r3, [pc, #32]	; (8001690 <LL_ADC_SetOffset+0x44>)
 800166e:	4013      	ands	r3, r2
 8001670:	687a      	ldr	r2, [r7, #4]
 8001672:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001676:	683a      	ldr	r2, [r7, #0]
 8001678:	430a      	orrs	r2, r1
 800167a:	4313      	orrs	r3, r2
 800167c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001684:	bf00      	nop
 8001686:	371c      	adds	r7, #28
 8001688:	46bd      	mov	sp, r7
 800168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168e:	4770      	bx	lr
 8001690:	03fff000 	.word	0x03fff000

08001694 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001694:	b480      	push	{r7}
 8001696:	b085      	sub	sp, #20
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
 800169c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	3360      	adds	r3, #96	; 0x60
 80016a2:	461a      	mov	r2, r3
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	009b      	lsls	r3, r3, #2
 80016a8:	4413      	add	r3, r2
 80016aa:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	3714      	adds	r7, #20
 80016b8:	46bd      	mov	sp, r7
 80016ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016be:	4770      	bx	lr

080016c0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b087      	sub	sp, #28
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	60f8      	str	r0, [r7, #12]
 80016c8:	60b9      	str	r1, [r7, #8]
 80016ca:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	3360      	adds	r3, #96	; 0x60
 80016d0:	461a      	mov	r2, r3
 80016d2:	68bb      	ldr	r3, [r7, #8]
 80016d4:	009b      	lsls	r3, r3, #2
 80016d6:	4413      	add	r3, r2
 80016d8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80016da:	697b      	ldr	r3, [r7, #20]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	431a      	orrs	r2, r3
 80016e6:	697b      	ldr	r3, [r7, #20]
 80016e8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80016ea:	bf00      	nop
 80016ec:	371c      	adds	r7, #28
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr

080016f6 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80016f6:	b480      	push	{r7}
 80016f8:	b083      	sub	sp, #12
 80016fa:	af00      	add	r7, sp, #0
 80016fc:	6078      	str	r0, [r7, #4]
 80016fe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	695b      	ldr	r3, [r3, #20]
 8001704:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	431a      	orrs	r2, r3
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	615a      	str	r2, [r3, #20]
}
 8001710:	bf00      	nop
 8001712:	370c      	adds	r7, #12
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr

0800171c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800171c:	b480      	push	{r7}
 800171e:	b083      	sub	sp, #12
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	68db      	ldr	r3, [r3, #12]
 8001728:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800172c:	2b00      	cmp	r3, #0
 800172e:	d101      	bne.n	8001734 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001730:	2301      	movs	r3, #1
 8001732:	e000      	b.n	8001736 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001734:	2300      	movs	r3, #0
}
 8001736:	4618      	mov	r0, r3
 8001738:	370c      	adds	r7, #12
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr

08001742 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001742:	b480      	push	{r7}
 8001744:	b087      	sub	sp, #28
 8001746:	af00      	add	r7, sp, #0
 8001748:	60f8      	str	r0, [r7, #12]
 800174a:	60b9      	str	r1, [r7, #8]
 800174c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	3330      	adds	r3, #48	; 0x30
 8001752:	461a      	mov	r2, r3
 8001754:	68bb      	ldr	r3, [r7, #8]
 8001756:	0a1b      	lsrs	r3, r3, #8
 8001758:	009b      	lsls	r3, r3, #2
 800175a:	f003 030c 	and.w	r3, r3, #12
 800175e:	4413      	add	r3, r2
 8001760:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	681a      	ldr	r2, [r3, #0]
 8001766:	68bb      	ldr	r3, [r7, #8]
 8001768:	f003 031f 	and.w	r3, r3, #31
 800176c:	211f      	movs	r1, #31
 800176e:	fa01 f303 	lsl.w	r3, r1, r3
 8001772:	43db      	mvns	r3, r3
 8001774:	401a      	ands	r2, r3
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	0e9b      	lsrs	r3, r3, #26
 800177a:	f003 011f 	and.w	r1, r3, #31
 800177e:	68bb      	ldr	r3, [r7, #8]
 8001780:	f003 031f 	and.w	r3, r3, #31
 8001784:	fa01 f303 	lsl.w	r3, r1, r3
 8001788:	431a      	orrs	r2, r3
 800178a:	697b      	ldr	r3, [r7, #20]
 800178c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800178e:	bf00      	nop
 8001790:	371c      	adds	r7, #28
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr

0800179a <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800179a:	b480      	push	{r7}
 800179c:	b083      	sub	sp, #12
 800179e:	af00      	add	r7, sp, #0
 80017a0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017a6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d101      	bne.n	80017b2 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80017ae:	2301      	movs	r3, #1
 80017b0:	e000      	b.n	80017b4 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80017b2:	2300      	movs	r3, #0
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	370c      	adds	r7, #12
 80017b8:	46bd      	mov	sp, r7
 80017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017be:	4770      	bx	lr

080017c0 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b087      	sub	sp, #28
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	60f8      	str	r0, [r7, #12]
 80017c8:	60b9      	str	r1, [r7, #8]
 80017ca:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	3314      	adds	r3, #20
 80017d0:	461a      	mov	r2, r3
 80017d2:	68bb      	ldr	r3, [r7, #8]
 80017d4:	0e5b      	lsrs	r3, r3, #25
 80017d6:	009b      	lsls	r3, r3, #2
 80017d8:	f003 0304 	and.w	r3, r3, #4
 80017dc:	4413      	add	r3, r2
 80017de:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	681a      	ldr	r2, [r3, #0]
 80017e4:	68bb      	ldr	r3, [r7, #8]
 80017e6:	0d1b      	lsrs	r3, r3, #20
 80017e8:	f003 031f 	and.w	r3, r3, #31
 80017ec:	2107      	movs	r1, #7
 80017ee:	fa01 f303 	lsl.w	r3, r1, r3
 80017f2:	43db      	mvns	r3, r3
 80017f4:	401a      	ands	r2, r3
 80017f6:	68bb      	ldr	r3, [r7, #8]
 80017f8:	0d1b      	lsrs	r3, r3, #20
 80017fa:	f003 031f 	and.w	r3, r3, #31
 80017fe:	6879      	ldr	r1, [r7, #4]
 8001800:	fa01 f303 	lsl.w	r3, r1, r3
 8001804:	431a      	orrs	r2, r3
 8001806:	697b      	ldr	r3, [r7, #20]
 8001808:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800180a:	bf00      	nop
 800180c:	371c      	adds	r7, #28
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr
	...

08001818 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001818:	b480      	push	{r7}
 800181a:	b085      	sub	sp, #20
 800181c:	af00      	add	r7, sp, #0
 800181e:	60f8      	str	r0, [r7, #12]
 8001820:	60b9      	str	r1, [r7, #8]
 8001822:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800182a:	68bb      	ldr	r3, [r7, #8]
 800182c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001830:	43db      	mvns	r3, r3
 8001832:	401a      	ands	r2, r3
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	f003 0318 	and.w	r3, r3, #24
 800183a:	4908      	ldr	r1, [pc, #32]	; (800185c <LL_ADC_SetChannelSingleDiff+0x44>)
 800183c:	40d9      	lsrs	r1, r3
 800183e:	68bb      	ldr	r3, [r7, #8]
 8001840:	400b      	ands	r3, r1
 8001842:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001846:	431a      	orrs	r2, r3
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800184e:	bf00      	nop
 8001850:	3714      	adds	r7, #20
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr
 800185a:	bf00      	nop
 800185c:	0007ffff 	.word	0x0007ffff

08001860 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001860:	b480      	push	{r7}
 8001862:	b083      	sub	sp, #12
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	689b      	ldr	r3, [r3, #8]
 800186c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001870:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001874:	687a      	ldr	r2, [r7, #4]
 8001876:	6093      	str	r3, [r2, #8]
}
 8001878:	bf00      	nop
 800187a:	370c      	adds	r7, #12
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr

08001884 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001884:	b480      	push	{r7}
 8001886:	b083      	sub	sp, #12
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	689b      	ldr	r3, [r3, #8]
 8001890:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001894:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001898:	d101      	bne.n	800189e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800189a:	2301      	movs	r3, #1
 800189c:	e000      	b.n	80018a0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800189e:	2300      	movs	r3, #0
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	370c      	adds	r7, #12
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr

080018ac <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b083      	sub	sp, #12
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	689b      	ldr	r3, [r3, #8]
 80018b8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80018bc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80018c0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80018c8:	bf00      	nop
 80018ca:	370c      	adds	r7, #12
 80018cc:	46bd      	mov	sp, r7
 80018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d2:	4770      	bx	lr

080018d4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b083      	sub	sp, #12
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	689b      	ldr	r3, [r3, #8]
 80018e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018e4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80018e8:	d101      	bne.n	80018ee <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80018ea:	2301      	movs	r3, #1
 80018ec:	e000      	b.n	80018f0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80018ee:	2300      	movs	r3, #0
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	370c      	adds	r7, #12
 80018f4:	46bd      	mov	sp, r7
 80018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fa:	4770      	bx	lr

080018fc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b083      	sub	sp, #12
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	689b      	ldr	r3, [r3, #8]
 8001908:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800190c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001910:	f043 0201 	orr.w	r2, r3, #1
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001918:	bf00      	nop
 800191a:	370c      	adds	r7, #12
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr

08001924 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001924:	b480      	push	{r7}
 8001926:	b083      	sub	sp, #12
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	689b      	ldr	r3, [r3, #8]
 8001930:	f003 0301 	and.w	r3, r3, #1
 8001934:	2b01      	cmp	r3, #1
 8001936:	d101      	bne.n	800193c <LL_ADC_IsEnabled+0x18>
 8001938:	2301      	movs	r3, #1
 800193a:	e000      	b.n	800193e <LL_ADC_IsEnabled+0x1a>
 800193c:	2300      	movs	r3, #0
}
 800193e:	4618      	mov	r0, r3
 8001940:	370c      	adds	r7, #12
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr

0800194a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800194a:	b480      	push	{r7}
 800194c:	b083      	sub	sp, #12
 800194e:	af00      	add	r7, sp, #0
 8001950:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	689b      	ldr	r3, [r3, #8]
 8001956:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800195a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800195e:	f043 0204 	orr.w	r2, r3, #4
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001966:	bf00      	nop
 8001968:	370c      	adds	r7, #12
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr

08001972 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001972:	b480      	push	{r7}
 8001974:	b083      	sub	sp, #12
 8001976:	af00      	add	r7, sp, #0
 8001978:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	689b      	ldr	r3, [r3, #8]
 800197e:	f003 0304 	and.w	r3, r3, #4
 8001982:	2b04      	cmp	r3, #4
 8001984:	d101      	bne.n	800198a <LL_ADC_REG_IsConversionOngoing+0x18>
 8001986:	2301      	movs	r3, #1
 8001988:	e000      	b.n	800198c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800198a:	2300      	movs	r3, #0
}
 800198c:	4618      	mov	r0, r3
 800198e:	370c      	adds	r7, #12
 8001990:	46bd      	mov	sp, r7
 8001992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001996:	4770      	bx	lr

08001998 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001998:	b480      	push	{r7}
 800199a:	b083      	sub	sp, #12
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	f003 0308 	and.w	r3, r3, #8
 80019a8:	2b08      	cmp	r3, #8
 80019aa:	d101      	bne.n	80019b0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80019ac:	2301      	movs	r3, #1
 80019ae:	e000      	b.n	80019b2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80019b0:	2300      	movs	r3, #0
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	370c      	adds	r7, #12
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr
	...

080019c0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b088      	sub	sp, #32
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019c8:	2300      	movs	r3, #0
 80019ca:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80019cc:	2300      	movs	r3, #0
 80019ce:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d101      	bne.n	80019da <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80019d6:	2301      	movs	r3, #1
 80019d8:	e12f      	b.n	8001c3a <HAL_ADC_Init+0x27a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	691b      	ldr	r3, [r3, #16]
 80019de:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d109      	bne.n	80019fc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80019e8:	6878      	ldr	r0, [r7, #4]
 80019ea:	f7ff f993 	bl	8000d14 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2200      	movs	r2, #0
 80019f2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2200      	movs	r2, #0
 80019f8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4618      	mov	r0, r3
 8001a02:	f7ff ff3f 	bl	8001884 <LL_ADC_IsDeepPowerDownEnabled>
 8001a06:	4603      	mov	r3, r0
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d004      	beq.n	8001a16 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4618      	mov	r0, r3
 8001a12:	f7ff ff25 	bl	8001860 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f7ff ff5a 	bl	80018d4 <LL_ADC_IsInternalRegulatorEnabled>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d115      	bne.n	8001a52 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f7ff ff3e 	bl	80018ac <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001a30:	4b84      	ldr	r3, [pc, #528]	; (8001c44 <HAL_ADC_Init+0x284>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	099b      	lsrs	r3, r3, #6
 8001a36:	4a84      	ldr	r2, [pc, #528]	; (8001c48 <HAL_ADC_Init+0x288>)
 8001a38:	fba2 2303 	umull	r2, r3, r2, r3
 8001a3c:	099b      	lsrs	r3, r3, #6
 8001a3e:	3301      	adds	r3, #1
 8001a40:	005b      	lsls	r3, r3, #1
 8001a42:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001a44:	e002      	b.n	8001a4c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001a46:	68bb      	ldr	r3, [r7, #8]
 8001a48:	3b01      	subs	r3, #1
 8001a4a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001a4c:	68bb      	ldr	r3, [r7, #8]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d1f9      	bne.n	8001a46 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4618      	mov	r0, r3
 8001a58:	f7ff ff3c 	bl	80018d4 <LL_ADC_IsInternalRegulatorEnabled>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d10d      	bne.n	8001a7e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a66:	f043 0210 	orr.w	r2, r3, #16
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a72:	f043 0201 	orr.w	r2, r3, #1
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4618      	mov	r0, r3
 8001a84:	f7ff ff75 	bl	8001972 <LL_ADC_REG_IsConversionOngoing>
 8001a88:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a8e:	f003 0310 	and.w	r3, r3, #16
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	f040 80c8 	bne.w	8001c28 <HAL_ADC_Init+0x268>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	f040 80c4 	bne.w	8001c28 <HAL_ADC_Init+0x268>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aa4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001aa8:	f043 0202 	orr.w	r2, r3, #2
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f7ff ff35 	bl	8001924 <LL_ADC_IsEnabled>
 8001aba:	4603      	mov	r3, r0
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d10b      	bne.n	8001ad8 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001ac0:	4862      	ldr	r0, [pc, #392]	; (8001c4c <HAL_ADC_Init+0x28c>)
 8001ac2:	f7ff ff2f 	bl	8001924 <LL_ADC_IsEnabled>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d105      	bne.n	8001ad8 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	485f      	ldr	r0, [pc, #380]	; (8001c50 <HAL_ADC_Init+0x290>)
 8001ad4:	f7ff fd86 	bl	80015e4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	7e5b      	ldrb	r3, [r3, #25]
 8001adc:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001ae2:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001ae8:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001aee:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001af6:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001af8:	4313      	orrs	r3, r2
 8001afa:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b02:	2b01      	cmp	r3, #1
 8001b04:	d106      	bne.n	8001b14 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b0a:	3b01      	subs	r3, #1
 8001b0c:	045b      	lsls	r3, r3, #17
 8001b0e:	69ba      	ldr	r2, [r7, #24]
 8001b10:	4313      	orrs	r3, r2
 8001b12:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d009      	beq.n	8001b30 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b20:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b28:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001b2a:	69ba      	ldr	r2, [r7, #24]
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	68da      	ldr	r2, [r3, #12]
 8001b36:	4b47      	ldr	r3, [pc, #284]	; (8001c54 <HAL_ADC_Init+0x294>)
 8001b38:	4013      	ands	r3, r2
 8001b3a:	687a      	ldr	r2, [r7, #4]
 8001b3c:	6812      	ldr	r2, [r2, #0]
 8001b3e:	69b9      	ldr	r1, [r7, #24]
 8001b40:	430b      	orrs	r3, r1
 8001b42:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f7ff ff12 	bl	8001972 <LL_ADC_REG_IsConversionOngoing>
 8001b4e:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4618      	mov	r0, r3
 8001b56:	f7ff ff1f 	bl	8001998 <LL_ADC_INJ_IsConversionOngoing>
 8001b5a:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001b5c:	693b      	ldr	r3, [r7, #16]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d140      	bne.n	8001be4 <HAL_ADC_Init+0x224>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d13d      	bne.n	8001be4 <HAL_ADC_Init+0x224>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	7e1b      	ldrb	r3, [r3, #24]
 8001b70:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001b72:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001b7a:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	68db      	ldr	r3, [r3, #12]
 8001b86:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001b8a:	f023 0306 	bic.w	r3, r3, #6
 8001b8e:	687a      	ldr	r2, [r7, #4]
 8001b90:	6812      	ldr	r2, [r2, #0]
 8001b92:	69b9      	ldr	r1, [r7, #24]
 8001b94:	430b      	orrs	r3, r1
 8001b96:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001b9e:	2b01      	cmp	r3, #1
 8001ba0:	d118      	bne.n	8001bd4 <HAL_ADC_Init+0x214>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	691b      	ldr	r3, [r3, #16]
 8001ba8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001bac:	f023 0304 	bic.w	r3, r3, #4
 8001bb0:	687a      	ldr	r2, [r7, #4]
 8001bb2:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001bb4:	687a      	ldr	r2, [r7, #4]
 8001bb6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001bb8:	4311      	orrs	r1, r2
 8001bba:	687a      	ldr	r2, [r7, #4]
 8001bbc:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001bbe:	4311      	orrs	r1, r2
 8001bc0:	687a      	ldr	r2, [r7, #4]
 8001bc2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001bc4:	430a      	orrs	r2, r1
 8001bc6:	431a      	orrs	r2, r3
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f042 0201 	orr.w	r2, r2, #1
 8001bd0:	611a      	str	r2, [r3, #16]
 8001bd2:	e007      	b.n	8001be4 <HAL_ADC_Init+0x224>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	691a      	ldr	r2, [r3, #16]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f022 0201 	bic.w	r2, r2, #1
 8001be2:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	691b      	ldr	r3, [r3, #16]
 8001be8:	2b01      	cmp	r3, #1
 8001bea:	d10c      	bne.n	8001c06 <HAL_ADC_Init+0x246>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf2:	f023 010f 	bic.w	r1, r3, #15
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	69db      	ldr	r3, [r3, #28]
 8001bfa:	1e5a      	subs	r2, r3, #1
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	430a      	orrs	r2, r1
 8001c02:	631a      	str	r2, [r3, #48]	; 0x30
 8001c04:	e007      	b.n	8001c16 <HAL_ADC_Init+0x256>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f022 020f 	bic.w	r2, r2, #15
 8001c14:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c1a:	f023 0303 	bic.w	r3, r3, #3
 8001c1e:	f043 0201 	orr.w	r2, r3, #1
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	659a      	str	r2, [r3, #88]	; 0x58
 8001c26:	e007      	b.n	8001c38 <HAL_ADC_Init+0x278>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c2c:	f043 0210 	orr.w	r2, r3, #16
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001c34:	2301      	movs	r3, #1
 8001c36:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001c38:	7ffb      	ldrb	r3, [r7, #31]
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	3720      	adds	r7, #32
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	20000004 	.word	0x20000004
 8001c48:	053e2d63 	.word	0x053e2d63
 8001c4c:	50040000 	.word	0x50040000
 8001c50:	50040300 	.word	0x50040300
 8001c54:	fff0c007 	.word	0xfff0c007

08001c58 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b086      	sub	sp, #24
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	60f8      	str	r0, [r7, #12]
 8001c60:	60b9      	str	r1, [r7, #8]
 8001c62:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f7ff fe82 	bl	8001972 <LL_ADC_REG_IsConversionOngoing>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d167      	bne.n	8001d44 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001c7a:	2b01      	cmp	r3, #1
 8001c7c:	d101      	bne.n	8001c82 <HAL_ADC_Start_DMA+0x2a>
 8001c7e:	2302      	movs	r3, #2
 8001c80:	e063      	b.n	8001d4a <HAL_ADC_Start_DMA+0xf2>
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	2201      	movs	r2, #1
 8001c86:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001c8a:	68f8      	ldr	r0, [r7, #12]
 8001c8c:	f000 fe36 	bl	80028fc <ADC_Enable>
 8001c90:	4603      	mov	r3, r0
 8001c92:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001c94:	7dfb      	ldrb	r3, [r7, #23]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d14f      	bne.n	8001d3a <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c9e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001ca2:	f023 0301 	bic.w	r3, r3, #1
 8001ca6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	659a      	str	r2, [r3, #88]	; 0x58
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cb2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d006      	beq.n	8001cc8 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cbe:	f023 0206 	bic.w	r2, r3, #6
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	65da      	str	r2, [r3, #92]	; 0x5c
 8001cc6:	e002      	b.n	8001cce <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	2200      	movs	r2, #0
 8001ccc:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001cd2:	4a20      	ldr	r2, [pc, #128]	; (8001d54 <HAL_ADC_Start_DMA+0xfc>)
 8001cd4:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001cda:	4a1f      	ldr	r2, [pc, #124]	; (8001d58 <HAL_ADC_Start_DMA+0x100>)
 8001cdc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ce2:	4a1e      	ldr	r2, [pc, #120]	; (8001d5c <HAL_ADC_Start_DMA+0x104>)
 8001ce4:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	221c      	movs	r2, #28
 8001cec:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	685a      	ldr	r2, [r3, #4]
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f042 0210 	orr.w	r2, r2, #16
 8001d04:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	68da      	ldr	r2, [r3, #12]
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f042 0201 	orr.w	r2, r2, #1
 8001d14:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	3340      	adds	r3, #64	; 0x40
 8001d20:	4619      	mov	r1, r3
 8001d22:	68ba      	ldr	r2, [r7, #8]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	f001 f9bb 	bl	80030a0 <HAL_DMA_Start_IT>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4618      	mov	r0, r3
 8001d34:	f7ff fe09 	bl	800194a <LL_ADC_REG_StartConversion>
 8001d38:	e006      	b.n	8001d48 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8001d42:	e001      	b.n	8001d48 <HAL_ADC_Start_DMA+0xf0>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001d44:	2302      	movs	r3, #2
 8001d46:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001d48:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	3718      	adds	r7, #24
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	08002a09 	.word	0x08002a09
 8001d58:	08002ae1 	.word	0x08002ae1
 8001d5c:	08002afd 	.word	0x08002afd

08001d60 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b088      	sub	sp, #32
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8001d68:	2300      	movs	r3, #0
 8001d6a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001d7c:	69bb      	ldr	r3, [r7, #24]
 8001d7e:	f003 0302 	and.w	r3, r3, #2
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d017      	beq.n	8001db6 <HAL_ADC_IRQHandler+0x56>
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	f003 0302 	and.w	r3, r3, #2
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d012      	beq.n	8001db6 <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d94:	f003 0310 	and.w	r3, r3, #16
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d105      	bne.n	8001da8 <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001da0:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	659a      	str	r2, [r3, #88]	; 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001da8:	6878      	ldr	r0, [r7, #4]
 8001daa:	f000 fee9 	bl	8002b80 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	2202      	movs	r2, #2
 8001db4:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001db6:	69bb      	ldr	r3, [r7, #24]
 8001db8:	f003 0304 	and.w	r3, r3, #4
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d004      	beq.n	8001dca <HAL_ADC_IRQHandler+0x6a>
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	f003 0304 	and.w	r3, r3, #4
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d109      	bne.n	8001dde <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001dca:	69bb      	ldr	r3, [r7, #24]
 8001dcc:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d05e      	beq.n	8001e92 <HAL_ADC_IRQHandler+0x132>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	f003 0308 	and.w	r3, r3, #8
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d059      	beq.n	8001e92 <HAL_ADC_IRQHandler+0x132>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001de2:	f003 0310 	and.w	r3, r3, #16
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d105      	bne.n	8001df6 <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dee:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f7ff fc8e 	bl	800171c <LL_ADC_REG_IsTriggerSourceSWStart>
 8001e00:	4603      	mov	r3, r0
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d03e      	beq.n	8001e84 <HAL_ADC_IRQHandler+0x124>
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
      }
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	68db      	ldr	r3, [r3, #12]
 8001e0c:	613b      	str	r3, [r7, #16]
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d135      	bne.n	8001e84 <HAL_ADC_IRQHandler+0x124>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f003 0308 	and.w	r3, r3, #8
 8001e22:	2b08      	cmp	r3, #8
 8001e24:	d12e      	bne.n	8001e84 <HAL_ADC_IRQHandler+0x124>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f7ff fda1 	bl	8001972 <LL_ADC_REG_IsConversionOngoing>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d11a      	bne.n	8001e6c <HAL_ADC_IRQHandler+0x10c>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	685a      	ldr	r2, [r3, #4]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f022 020c 	bic.w	r2, r2, #12
 8001e44:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e4a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	659a      	str	r2, [r3, #88]	; 0x58

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e56:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d112      	bne.n	8001e84 <HAL_ADC_IRQHandler+0x124>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e62:	f043 0201 	orr.w	r2, r3, #1
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	659a      	str	r2, [r3, #88]	; 0x58
 8001e6a:	e00b      	b.n	8001e84 <HAL_ADC_IRQHandler+0x124>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e70:	f043 0210 	orr.w	r2, r3, #16
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e7c:	f043 0201 	orr.w	r2, r3, #1
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	65da      	str	r2, [r3, #92]	; 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001e84:	6878      	ldr	r0, [r7, #4]
 8001e86:	f7fe f9d9 	bl	800023c <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	220c      	movs	r2, #12
 8001e90:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001e92:	69bb      	ldr	r3, [r7, #24]
 8001e94:	f003 0320 	and.w	r3, r3, #32
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d004      	beq.n	8001ea6 <HAL_ADC_IRQHandler+0x146>
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	f003 0320 	and.w	r3, r3, #32
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d109      	bne.n	8001eba <HAL_ADC_IRQHandler+0x15a>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001ea6:	69bb      	ldr	r3, [r7, #24]
 8001ea8:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d072      	beq.n	8001f96 <HAL_ADC_IRQHandler+0x236>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d06d      	beq.n	8001f96 <HAL_ADC_IRQHandler+0x236>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ebe:	f003 0310 	and.w	r3, r3, #16
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d105      	bne.n	8001ed2 <HAL_ADC_IRQHandler+0x172>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eca:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f7ff fc5f 	bl	800179a <LL_ADC_INJ_IsTriggerSourceSWStart>
 8001edc:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f7ff fc1a 	bl	800171c <LL_ADC_REG_IsTriggerSourceSWStart>
 8001ee8:	60b8      	str	r0, [r7, #8]
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
    }
#else
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	68db      	ldr	r3, [r3, #12]
 8001ef0:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d047      	beq.n	8001f88 <HAL_ADC_IRQHandler+0x228>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d007      	beq.n	8001f12 <HAL_ADC_IRQHandler+0x1b2>
 8001f02:	68bb      	ldr	r3, [r7, #8]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d03f      	beq.n	8001f88 <HAL_ADC_IRQHandler+0x228>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8001f08:	693b      	ldr	r3, [r7, #16]
 8001f0a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d13a      	bne.n	8001f88 <HAL_ADC_IRQHandler+0x228>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f1c:	2b40      	cmp	r3, #64	; 0x40
 8001f1e:	d133      	bne.n	8001f88 <HAL_ADC_IRQHandler+0x228>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8001f20:	693b      	ldr	r3, [r7, #16]
 8001f22:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d12e      	bne.n	8001f88 <HAL_ADC_IRQHandler+0x228>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f7ff fd32 	bl	8001998 <LL_ADC_INJ_IsConversionOngoing>
 8001f34:	4603      	mov	r3, r0
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d11a      	bne.n	8001f70 <HAL_ADC_IRQHandler+0x210>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	685a      	ldr	r2, [r3, #4]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001f48:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f4e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	659a      	str	r2, [r3, #88]	; 0x58

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d112      	bne.n	8001f88 <HAL_ADC_IRQHandler+0x228>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f66:	f043 0201 	orr.w	r2, r3, #1
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	659a      	str	r2, [r3, #88]	; 0x58
 8001f6e:	e00b      	b.n	8001f88 <HAL_ADC_IRQHandler+0x228>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f74:	f043 0210 	orr.w	r2, r3, #16
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	659a      	str	r2, [r3, #88]	; 0x58

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f80:	f043 0201 	orr.w	r2, r3, #1
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	65da      	str	r2, [r3, #92]	; 0x5c
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001f88:	6878      	ldr	r0, [r7, #4]
 8001f8a:	f000 fdd1 	bl	8002b30 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	2260      	movs	r2, #96	; 0x60
 8001f94:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8001f96:	69bb      	ldr	r3, [r7, #24]
 8001f98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d011      	beq.n	8001fc4 <HAL_ADC_IRQHandler+0x264>
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d00c      	beq.n	8001fc4 <HAL_ADC_IRQHandler+0x264>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fae:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001fb6:	6878      	ldr	r0, [r7, #4]
 8001fb8:	f000 f890 	bl	80020dc <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	2280      	movs	r2, #128	; 0x80
 8001fc2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8001fc4:	69bb      	ldr	r3, [r7, #24]
 8001fc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d012      	beq.n	8001ff4 <HAL_ADC_IRQHandler+0x294>
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d00d      	beq.n	8001ff4 <HAL_ADC_IRQHandler+0x294>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fdc:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001fe4:	6878      	ldr	r0, [r7, #4]
 8001fe6:	f000 fdb7 	bl	8002b58 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ff2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8001ff4:	69bb      	ldr	r3, [r7, #24]
 8001ff6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d012      	beq.n	8002024 <HAL_ADC_IRQHandler+0x2c4>
 8001ffe:	697b      	ldr	r3, [r7, #20]
 8002000:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002004:	2b00      	cmp	r3, #0
 8002006:	d00d      	beq.n	8002024 <HAL_ADC_IRQHandler+0x2c4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800200c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002014:	6878      	ldr	r0, [r7, #4]
 8002016:	f000 fda9 	bl	8002b6c <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002022:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002024:	69bb      	ldr	r3, [r7, #24]
 8002026:	f003 0310 	and.w	r3, r3, #16
 800202a:	2b00      	cmp	r3, #0
 800202c:	d02a      	beq.n	8002084 <HAL_ADC_IRQHandler+0x324>
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	f003 0310 	and.w	r3, r3, #16
 8002034:	2b00      	cmp	r3, #0
 8002036:	d025      	beq.n	8002084 <HAL_ADC_IRQHandler+0x324>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800203c:	2b00      	cmp	r3, #0
 800203e:	d102      	bne.n	8002046 <HAL_ADC_IRQHandler+0x2e6>
    {
      overrun_error = 1UL;
 8002040:	2301      	movs	r3, #1
 8002042:	61fb      	str	r3, [r7, #28]
 8002044:	e008      	b.n	8002058 <HAL_ADC_IRQHandler+0x2f8>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	68db      	ldr	r3, [r3, #12]
 800204c:	f003 0301 	and.w	r3, r3, #1
 8002050:	2b00      	cmp	r3, #0
 8002052:	d001      	beq.n	8002058 <HAL_ADC_IRQHandler+0x2f8>
        {
          overrun_error = 1UL;
 8002054:	2301      	movs	r3, #1
 8002056:	61fb      	str	r3, [r7, #28]
        }
      }
    }

    if (overrun_error == 1UL)
 8002058:	69fb      	ldr	r3, [r7, #28]
 800205a:	2b01      	cmp	r3, #1
 800205c:	d10e      	bne.n	800207c <HAL_ADC_IRQHandler+0x31c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002062:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800206e:	f043 0202 	orr.w	r2, r3, #2
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	65da      	str	r2, [r3, #92]	; 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002076:	6878      	ldr	r0, [r7, #4]
 8002078:	f000 f83a 	bl	80020f0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	2210      	movs	r2, #16
 8002082:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002084:	69bb      	ldr	r3, [r7, #24]
 8002086:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800208a:	2b00      	cmp	r3, #0
 800208c:	d018      	beq.n	80020c0 <HAL_ADC_IRQHandler+0x360>
 800208e:	697b      	ldr	r3, [r7, #20]
 8002090:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002094:	2b00      	cmp	r3, #0
 8002096:	d013      	beq.n	80020c0 <HAL_ADC_IRQHandler+0x360>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800209c:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020a8:	f043 0208 	orr.w	r2, r3, #8
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80020b8:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80020ba:	6878      	ldr	r0, [r7, #4]
 80020bc:	f000 fd42 	bl	8002b44 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80020c0:	bf00      	nop
 80020c2:	3720      	adds	r7, #32
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}

080020c8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b083      	sub	sp, #12
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80020d0:	bf00      	nop
 80020d2:	370c      	adds	r7, #12
 80020d4:	46bd      	mov	sp, r7
 80020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020da:	4770      	bx	lr

080020dc <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80020dc:	b480      	push	{r7}
 80020de:	b083      	sub	sp, #12
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80020e4:	bf00      	nop
 80020e6:	370c      	adds	r7, #12
 80020e8:	46bd      	mov	sp, r7
 80020ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ee:	4770      	bx	lr

080020f0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b083      	sub	sp, #12
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80020f8:	bf00      	nop
 80020fa:	370c      	adds	r7, #12
 80020fc:	46bd      	mov	sp, r7
 80020fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002102:	4770      	bx	lr

08002104 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b0b6      	sub	sp, #216	; 0xd8
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
 800210c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800210e:	2300      	movs	r3, #0
 8002110:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002114:	2300      	movs	r3, #0
 8002116:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800211e:	2b01      	cmp	r3, #1
 8002120:	d101      	bne.n	8002126 <HAL_ADC_ConfigChannel+0x22>
 8002122:	2302      	movs	r3, #2
 8002124:	e3d5      	b.n	80028d2 <HAL_ADC_ConfigChannel+0x7ce>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2201      	movs	r2, #1
 800212a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4618      	mov	r0, r3
 8002134:	f7ff fc1d 	bl	8001972 <LL_ADC_REG_IsConversionOngoing>
 8002138:	4603      	mov	r3, r0
 800213a:	2b00      	cmp	r3, #0
 800213c:	f040 83ba 	bne.w	80028b4 <HAL_ADC_ConfigChannel+0x7b0>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	2b05      	cmp	r3, #5
 8002146:	d824      	bhi.n	8002192 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	3b02      	subs	r3, #2
 800214e:	2b03      	cmp	r3, #3
 8002150:	d81b      	bhi.n	800218a <HAL_ADC_ConfigChannel+0x86>
 8002152:	a201      	add	r2, pc, #4	; (adr r2, 8002158 <HAL_ADC_ConfigChannel+0x54>)
 8002154:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002158:	08002169 	.word	0x08002169
 800215c:	08002171 	.word	0x08002171
 8002160:	08002179 	.word	0x08002179
 8002164:	08002181 	.word	0x08002181
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	220c      	movs	r2, #12
 800216c:	605a      	str	r2, [r3, #4]
          break;
 800216e:	e011      	b.n	8002194 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	2212      	movs	r2, #18
 8002174:	605a      	str	r2, [r3, #4]
          break;
 8002176:	e00d      	b.n	8002194 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	2218      	movs	r2, #24
 800217c:	605a      	str	r2, [r3, #4]
          break;
 800217e:	e009      	b.n	8002194 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002186:	605a      	str	r2, [r3, #4]
          break;
 8002188:	e004      	b.n	8002194 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	2206      	movs	r2, #6
 800218e:	605a      	str	r2, [r3, #4]
          break;
 8002190:	e000      	b.n	8002194 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8002192:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6818      	ldr	r0, [r3, #0]
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	6859      	ldr	r1, [r3, #4]
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	461a      	mov	r2, r3
 80021a2:	f7ff face 	bl	8001742 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4618      	mov	r0, r3
 80021ac:	f7ff fbe1 	bl	8001972 <LL_ADC_REG_IsConversionOngoing>
 80021b0:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4618      	mov	r0, r3
 80021ba:	f7ff fbed 	bl	8001998 <LL_ADC_INJ_IsConversionOngoing>
 80021be:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80021c2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	f040 81c1 	bne.w	800254e <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80021cc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	f040 81bc 	bne.w	800254e <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	689b      	ldr	r3, [r3, #8]
 80021da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80021de:	d10f      	bne.n	8002200 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6818      	ldr	r0, [r3, #0]
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	2200      	movs	r2, #0
 80021ea:	4619      	mov	r1, r3
 80021ec:	f7ff fae8 	bl	80017c0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80021f8:	4618      	mov	r0, r3
 80021fa:	f7ff fa7c 	bl	80016f6 <LL_ADC_SetSamplingTimeCommonConfig>
 80021fe:	e00e      	b.n	800221e <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6818      	ldr	r0, [r3, #0]
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	6819      	ldr	r1, [r3, #0]
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	689b      	ldr	r3, [r3, #8]
 800220c:	461a      	mov	r2, r3
 800220e:	f7ff fad7 	bl	80017c0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	2100      	movs	r1, #0
 8002218:	4618      	mov	r0, r3
 800221a:	f7ff fa6c 	bl	80016f6 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	695a      	ldr	r2, [r3, #20]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	68db      	ldr	r3, [r3, #12]
 8002228:	08db      	lsrs	r3, r3, #3
 800222a:	f003 0303 	and.w	r3, r3, #3
 800222e:	005b      	lsls	r3, r3, #1
 8002230:	fa02 f303 	lsl.w	r3, r2, r3
 8002234:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	691b      	ldr	r3, [r3, #16]
 800223c:	2b04      	cmp	r3, #4
 800223e:	d00a      	beq.n	8002256 <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6818      	ldr	r0, [r3, #0]
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	6919      	ldr	r1, [r3, #16]
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	681a      	ldr	r2, [r3, #0]
 800224c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002250:	f7ff f9fc 	bl	800164c <LL_ADC_SetOffset>
 8002254:	e17b      	b.n	800254e <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	2100      	movs	r1, #0
 800225c:	4618      	mov	r0, r3
 800225e:	f7ff fa19 	bl	8001694 <LL_ADC_GetOffsetChannel>
 8002262:	4603      	mov	r3, r0
 8002264:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002268:	2b00      	cmp	r3, #0
 800226a:	d10a      	bne.n	8002282 <HAL_ADC_ConfigChannel+0x17e>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	2100      	movs	r1, #0
 8002272:	4618      	mov	r0, r3
 8002274:	f7ff fa0e 	bl	8001694 <LL_ADC_GetOffsetChannel>
 8002278:	4603      	mov	r3, r0
 800227a:	0e9b      	lsrs	r3, r3, #26
 800227c:	f003 021f 	and.w	r2, r3, #31
 8002280:	e01e      	b.n	80022c0 <HAL_ADC_ConfigChannel+0x1bc>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	2100      	movs	r1, #0
 8002288:	4618      	mov	r0, r3
 800228a:	f7ff fa03 	bl	8001694 <LL_ADC_GetOffsetChannel>
 800228e:	4603      	mov	r3, r0
 8002290:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002294:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002298:	fa93 f3a3 	rbit	r3, r3
 800229c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80022a0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80022a4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80022a8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d101      	bne.n	80022b4 <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 80022b0:	2320      	movs	r3, #32
 80022b2:	e004      	b.n	80022be <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 80022b4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80022b8:	fab3 f383 	clz	r3, r3
 80022bc:	b2db      	uxtb	r3, r3
 80022be:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d105      	bne.n	80022d8 <HAL_ADC_ConfigChannel+0x1d4>
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	0e9b      	lsrs	r3, r3, #26
 80022d2:	f003 031f 	and.w	r3, r3, #31
 80022d6:	e018      	b.n	800230a <HAL_ADC_ConfigChannel+0x206>
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022e0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80022e4:	fa93 f3a3 	rbit	r3, r3
 80022e8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80022ec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80022f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80022f4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d101      	bne.n	8002300 <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 80022fc:	2320      	movs	r3, #32
 80022fe:	e004      	b.n	800230a <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 8002300:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002304:	fab3 f383 	clz	r3, r3
 8002308:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800230a:	429a      	cmp	r2, r3
 800230c:	d106      	bne.n	800231c <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	2200      	movs	r2, #0
 8002314:	2100      	movs	r1, #0
 8002316:	4618      	mov	r0, r3
 8002318:	f7ff f9d2 	bl	80016c0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	2101      	movs	r1, #1
 8002322:	4618      	mov	r0, r3
 8002324:	f7ff f9b6 	bl	8001694 <LL_ADC_GetOffsetChannel>
 8002328:	4603      	mov	r3, r0
 800232a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800232e:	2b00      	cmp	r3, #0
 8002330:	d10a      	bne.n	8002348 <HAL_ADC_ConfigChannel+0x244>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	2101      	movs	r1, #1
 8002338:	4618      	mov	r0, r3
 800233a:	f7ff f9ab 	bl	8001694 <LL_ADC_GetOffsetChannel>
 800233e:	4603      	mov	r3, r0
 8002340:	0e9b      	lsrs	r3, r3, #26
 8002342:	f003 021f 	and.w	r2, r3, #31
 8002346:	e01e      	b.n	8002386 <HAL_ADC_ConfigChannel+0x282>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	2101      	movs	r1, #1
 800234e:	4618      	mov	r0, r3
 8002350:	f7ff f9a0 	bl	8001694 <LL_ADC_GetOffsetChannel>
 8002354:	4603      	mov	r3, r0
 8002356:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800235a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800235e:	fa93 f3a3 	rbit	r3, r3
 8002362:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002366:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800236a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800236e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002372:	2b00      	cmp	r3, #0
 8002374:	d101      	bne.n	800237a <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 8002376:	2320      	movs	r3, #32
 8002378:	e004      	b.n	8002384 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 800237a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800237e:	fab3 f383 	clz	r3, r3
 8002382:	b2db      	uxtb	r3, r3
 8002384:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800238e:	2b00      	cmp	r3, #0
 8002390:	d105      	bne.n	800239e <HAL_ADC_ConfigChannel+0x29a>
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	0e9b      	lsrs	r3, r3, #26
 8002398:	f003 031f 	and.w	r3, r3, #31
 800239c:	e018      	b.n	80023d0 <HAL_ADC_ConfigChannel+0x2cc>
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023a6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80023aa:	fa93 f3a3 	rbit	r3, r3
 80023ae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80023b2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80023b6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80023ba:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d101      	bne.n	80023c6 <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 80023c2:	2320      	movs	r3, #32
 80023c4:	e004      	b.n	80023d0 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 80023c6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80023ca:	fab3 f383 	clz	r3, r3
 80023ce:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80023d0:	429a      	cmp	r2, r3
 80023d2:	d106      	bne.n	80023e2 <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	2200      	movs	r2, #0
 80023da:	2101      	movs	r1, #1
 80023dc:	4618      	mov	r0, r3
 80023de:	f7ff f96f 	bl	80016c0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	2102      	movs	r1, #2
 80023e8:	4618      	mov	r0, r3
 80023ea:	f7ff f953 	bl	8001694 <LL_ADC_GetOffsetChannel>
 80023ee:	4603      	mov	r3, r0
 80023f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d10a      	bne.n	800240e <HAL_ADC_ConfigChannel+0x30a>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	2102      	movs	r1, #2
 80023fe:	4618      	mov	r0, r3
 8002400:	f7ff f948 	bl	8001694 <LL_ADC_GetOffsetChannel>
 8002404:	4603      	mov	r3, r0
 8002406:	0e9b      	lsrs	r3, r3, #26
 8002408:	f003 021f 	and.w	r2, r3, #31
 800240c:	e01e      	b.n	800244c <HAL_ADC_ConfigChannel+0x348>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	2102      	movs	r1, #2
 8002414:	4618      	mov	r0, r3
 8002416:	f7ff f93d 	bl	8001694 <LL_ADC_GetOffsetChannel>
 800241a:	4603      	mov	r3, r0
 800241c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002420:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002424:	fa93 f3a3 	rbit	r3, r3
 8002428:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800242c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002430:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002434:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002438:	2b00      	cmp	r3, #0
 800243a:	d101      	bne.n	8002440 <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 800243c:	2320      	movs	r3, #32
 800243e:	e004      	b.n	800244a <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 8002440:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002444:	fab3 f383 	clz	r3, r3
 8002448:	b2db      	uxtb	r3, r3
 800244a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002454:	2b00      	cmp	r3, #0
 8002456:	d105      	bne.n	8002464 <HAL_ADC_ConfigChannel+0x360>
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	0e9b      	lsrs	r3, r3, #26
 800245e:	f003 031f 	and.w	r3, r3, #31
 8002462:	e016      	b.n	8002492 <HAL_ADC_ConfigChannel+0x38e>
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800246c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002470:	fa93 f3a3 	rbit	r3, r3
 8002474:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002476:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002478:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800247c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002480:	2b00      	cmp	r3, #0
 8002482:	d101      	bne.n	8002488 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 8002484:	2320      	movs	r3, #32
 8002486:	e004      	b.n	8002492 <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8002488:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800248c:	fab3 f383 	clz	r3, r3
 8002490:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002492:	429a      	cmp	r2, r3
 8002494:	d106      	bne.n	80024a4 <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	2200      	movs	r2, #0
 800249c:	2102      	movs	r1, #2
 800249e:	4618      	mov	r0, r3
 80024a0:	f7ff f90e 	bl	80016c0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	2103      	movs	r1, #3
 80024aa:	4618      	mov	r0, r3
 80024ac:	f7ff f8f2 	bl	8001694 <LL_ADC_GetOffsetChannel>
 80024b0:	4603      	mov	r3, r0
 80024b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d10a      	bne.n	80024d0 <HAL_ADC_ConfigChannel+0x3cc>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	2103      	movs	r1, #3
 80024c0:	4618      	mov	r0, r3
 80024c2:	f7ff f8e7 	bl	8001694 <LL_ADC_GetOffsetChannel>
 80024c6:	4603      	mov	r3, r0
 80024c8:	0e9b      	lsrs	r3, r3, #26
 80024ca:	f003 021f 	and.w	r2, r3, #31
 80024ce:	e017      	b.n	8002500 <HAL_ADC_ConfigChannel+0x3fc>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	2103      	movs	r1, #3
 80024d6:	4618      	mov	r0, r3
 80024d8:	f7ff f8dc 	bl	8001694 <LL_ADC_GetOffsetChannel>
 80024dc:	4603      	mov	r3, r0
 80024de:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80024e2:	fa93 f3a3 	rbit	r3, r3
 80024e6:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80024e8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80024ea:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80024ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d101      	bne.n	80024f6 <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 80024f2:	2320      	movs	r3, #32
 80024f4:	e003      	b.n	80024fe <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 80024f6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80024f8:	fab3 f383 	clz	r3, r3
 80024fc:	b2db      	uxtb	r3, r3
 80024fe:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002508:	2b00      	cmp	r3, #0
 800250a:	d105      	bne.n	8002518 <HAL_ADC_ConfigChannel+0x414>
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	0e9b      	lsrs	r3, r3, #26
 8002512:	f003 031f 	and.w	r3, r3, #31
 8002516:	e011      	b.n	800253c <HAL_ADC_ConfigChannel+0x438>
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800251e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002520:	fa93 f3a3 	rbit	r3, r3
 8002524:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002526:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002528:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800252a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800252c:	2b00      	cmp	r3, #0
 800252e:	d101      	bne.n	8002534 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8002530:	2320      	movs	r3, #32
 8002532:	e003      	b.n	800253c <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8002534:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002536:	fab3 f383 	clz	r3, r3
 800253a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800253c:	429a      	cmp	r2, r3
 800253e:	d106      	bne.n	800254e <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	2200      	movs	r2, #0
 8002546:	2103      	movs	r1, #3
 8002548:	4618      	mov	r0, r3
 800254a:	f7ff f8b9 	bl	80016c0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4618      	mov	r0, r3
 8002554:	f7ff f9e6 	bl	8001924 <LL_ADC_IsEnabled>
 8002558:	4603      	mov	r3, r0
 800255a:	2b00      	cmp	r3, #0
 800255c:	f040 8140 	bne.w	80027e0 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6818      	ldr	r0, [r3, #0]
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	6819      	ldr	r1, [r3, #0]
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	68db      	ldr	r3, [r3, #12]
 800256c:	461a      	mov	r2, r3
 800256e:	f7ff f953 	bl	8001818 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	68db      	ldr	r3, [r3, #12]
 8002576:	4a8f      	ldr	r2, [pc, #572]	; (80027b4 <HAL_ADC_ConfigChannel+0x6b0>)
 8002578:	4293      	cmp	r3, r2
 800257a:	f040 8131 	bne.w	80027e0 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800258a:	2b00      	cmp	r3, #0
 800258c:	d10b      	bne.n	80025a6 <HAL_ADC_ConfigChannel+0x4a2>
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	0e9b      	lsrs	r3, r3, #26
 8002594:	3301      	adds	r3, #1
 8002596:	f003 031f 	and.w	r3, r3, #31
 800259a:	2b09      	cmp	r3, #9
 800259c:	bf94      	ite	ls
 800259e:	2301      	movls	r3, #1
 80025a0:	2300      	movhi	r3, #0
 80025a2:	b2db      	uxtb	r3, r3
 80025a4:	e019      	b.n	80025da <HAL_ADC_ConfigChannel+0x4d6>
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80025ae:	fa93 f3a3 	rbit	r3, r3
 80025b2:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80025b4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80025b6:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80025b8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d101      	bne.n	80025c2 <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 80025be:	2320      	movs	r3, #32
 80025c0:	e003      	b.n	80025ca <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 80025c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80025c4:	fab3 f383 	clz	r3, r3
 80025c8:	b2db      	uxtb	r3, r3
 80025ca:	3301      	adds	r3, #1
 80025cc:	f003 031f 	and.w	r3, r3, #31
 80025d0:	2b09      	cmp	r3, #9
 80025d2:	bf94      	ite	ls
 80025d4:	2301      	movls	r3, #1
 80025d6:	2300      	movhi	r3, #0
 80025d8:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d079      	beq.n	80026d2 <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d107      	bne.n	80025fa <HAL_ADC_ConfigChannel+0x4f6>
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	0e9b      	lsrs	r3, r3, #26
 80025f0:	3301      	adds	r3, #1
 80025f2:	069b      	lsls	r3, r3, #26
 80025f4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80025f8:	e015      	b.n	8002626 <HAL_ADC_ConfigChannel+0x522>
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002600:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002602:	fa93 f3a3 	rbit	r3, r3
 8002606:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002608:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800260a:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800260c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800260e:	2b00      	cmp	r3, #0
 8002610:	d101      	bne.n	8002616 <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 8002612:	2320      	movs	r3, #32
 8002614:	e003      	b.n	800261e <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 8002616:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002618:	fab3 f383 	clz	r3, r3
 800261c:	b2db      	uxtb	r3, r3
 800261e:	3301      	adds	r3, #1
 8002620:	069b      	lsls	r3, r3, #26
 8002622:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800262e:	2b00      	cmp	r3, #0
 8002630:	d109      	bne.n	8002646 <HAL_ADC_ConfigChannel+0x542>
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	0e9b      	lsrs	r3, r3, #26
 8002638:	3301      	adds	r3, #1
 800263a:	f003 031f 	and.w	r3, r3, #31
 800263e:	2101      	movs	r1, #1
 8002640:	fa01 f303 	lsl.w	r3, r1, r3
 8002644:	e017      	b.n	8002676 <HAL_ADC_ConfigChannel+0x572>
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800264c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800264e:	fa93 f3a3 	rbit	r3, r3
 8002652:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002654:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002656:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002658:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800265a:	2b00      	cmp	r3, #0
 800265c:	d101      	bne.n	8002662 <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 800265e:	2320      	movs	r3, #32
 8002660:	e003      	b.n	800266a <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 8002662:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002664:	fab3 f383 	clz	r3, r3
 8002668:	b2db      	uxtb	r3, r3
 800266a:	3301      	adds	r3, #1
 800266c:	f003 031f 	and.w	r3, r3, #31
 8002670:	2101      	movs	r1, #1
 8002672:	fa01 f303 	lsl.w	r3, r1, r3
 8002676:	ea42 0103 	orr.w	r1, r2, r3
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002682:	2b00      	cmp	r3, #0
 8002684:	d10a      	bne.n	800269c <HAL_ADC_ConfigChannel+0x598>
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	0e9b      	lsrs	r3, r3, #26
 800268c:	3301      	adds	r3, #1
 800268e:	f003 021f 	and.w	r2, r3, #31
 8002692:	4613      	mov	r3, r2
 8002694:	005b      	lsls	r3, r3, #1
 8002696:	4413      	add	r3, r2
 8002698:	051b      	lsls	r3, r3, #20
 800269a:	e018      	b.n	80026ce <HAL_ADC_ConfigChannel+0x5ca>
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026a4:	fa93 f3a3 	rbit	r3, r3
 80026a8:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80026aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026ac:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80026ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d101      	bne.n	80026b8 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 80026b4:	2320      	movs	r3, #32
 80026b6:	e003      	b.n	80026c0 <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 80026b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026ba:	fab3 f383 	clz	r3, r3
 80026be:	b2db      	uxtb	r3, r3
 80026c0:	3301      	adds	r3, #1
 80026c2:	f003 021f 	and.w	r2, r3, #31
 80026c6:	4613      	mov	r3, r2
 80026c8:	005b      	lsls	r3, r3, #1
 80026ca:	4413      	add	r3, r2
 80026cc:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80026ce:	430b      	orrs	r3, r1
 80026d0:	e081      	b.n	80027d6 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d107      	bne.n	80026ee <HAL_ADC_ConfigChannel+0x5ea>
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	0e9b      	lsrs	r3, r3, #26
 80026e4:	3301      	adds	r3, #1
 80026e6:	069b      	lsls	r3, r3, #26
 80026e8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80026ec:	e015      	b.n	800271a <HAL_ADC_ConfigChannel+0x616>
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026f6:	fa93 f3a3 	rbit	r3, r3
 80026fa:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80026fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026fe:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002702:	2b00      	cmp	r3, #0
 8002704:	d101      	bne.n	800270a <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 8002706:	2320      	movs	r3, #32
 8002708:	e003      	b.n	8002712 <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 800270a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800270c:	fab3 f383 	clz	r3, r3
 8002710:	b2db      	uxtb	r3, r3
 8002712:	3301      	adds	r3, #1
 8002714:	069b      	lsls	r3, r3, #26
 8002716:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002722:	2b00      	cmp	r3, #0
 8002724:	d109      	bne.n	800273a <HAL_ADC_ConfigChannel+0x636>
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	0e9b      	lsrs	r3, r3, #26
 800272c:	3301      	adds	r3, #1
 800272e:	f003 031f 	and.w	r3, r3, #31
 8002732:	2101      	movs	r1, #1
 8002734:	fa01 f303 	lsl.w	r3, r1, r3
 8002738:	e017      	b.n	800276a <HAL_ADC_ConfigChannel+0x666>
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002740:	6a3b      	ldr	r3, [r7, #32]
 8002742:	fa93 f3a3 	rbit	r3, r3
 8002746:	61fb      	str	r3, [r7, #28]
  return result;
 8002748:	69fb      	ldr	r3, [r7, #28]
 800274a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800274c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800274e:	2b00      	cmp	r3, #0
 8002750:	d101      	bne.n	8002756 <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 8002752:	2320      	movs	r3, #32
 8002754:	e003      	b.n	800275e <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 8002756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002758:	fab3 f383 	clz	r3, r3
 800275c:	b2db      	uxtb	r3, r3
 800275e:	3301      	adds	r3, #1
 8002760:	f003 031f 	and.w	r3, r3, #31
 8002764:	2101      	movs	r1, #1
 8002766:	fa01 f303 	lsl.w	r3, r1, r3
 800276a:	ea42 0103 	orr.w	r1, r2, r3
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002776:	2b00      	cmp	r3, #0
 8002778:	d10d      	bne.n	8002796 <HAL_ADC_ConfigChannel+0x692>
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	0e9b      	lsrs	r3, r3, #26
 8002780:	3301      	adds	r3, #1
 8002782:	f003 021f 	and.w	r2, r3, #31
 8002786:	4613      	mov	r3, r2
 8002788:	005b      	lsls	r3, r3, #1
 800278a:	4413      	add	r3, r2
 800278c:	3b1e      	subs	r3, #30
 800278e:	051b      	lsls	r3, r3, #20
 8002790:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002794:	e01e      	b.n	80027d4 <HAL_ADC_ConfigChannel+0x6d0>
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	fa93 f3a3 	rbit	r3, r3
 80027a2:	613b      	str	r3, [r7, #16]
  return result;
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80027a8:	69bb      	ldr	r3, [r7, #24]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d104      	bne.n	80027b8 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 80027ae:	2320      	movs	r3, #32
 80027b0:	e006      	b.n	80027c0 <HAL_ADC_ConfigChannel+0x6bc>
 80027b2:	bf00      	nop
 80027b4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80027b8:	69bb      	ldr	r3, [r7, #24]
 80027ba:	fab3 f383 	clz	r3, r3
 80027be:	b2db      	uxtb	r3, r3
 80027c0:	3301      	adds	r3, #1
 80027c2:	f003 021f 	and.w	r2, r3, #31
 80027c6:	4613      	mov	r3, r2
 80027c8:	005b      	lsls	r3, r3, #1
 80027ca:	4413      	add	r3, r2
 80027cc:	3b1e      	subs	r3, #30
 80027ce:	051b      	lsls	r3, r3, #20
 80027d0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80027d4:	430b      	orrs	r3, r1
 80027d6:	683a      	ldr	r2, [r7, #0]
 80027d8:	6892      	ldr	r2, [r2, #8]
 80027da:	4619      	mov	r1, r3
 80027dc:	f7fe fff0 	bl	80017c0 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	681a      	ldr	r2, [r3, #0]
 80027e4:	4b3d      	ldr	r3, [pc, #244]	; (80028dc <HAL_ADC_ConfigChannel+0x7d8>)
 80027e6:	4013      	ands	r3, r2
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d06c      	beq.n	80028c6 <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80027ec:	483c      	ldr	r0, [pc, #240]	; (80028e0 <HAL_ADC_ConfigChannel+0x7dc>)
 80027ee:	f7fe ff1f 	bl	8001630 <LL_ADC_GetCommonPathInternalCh>
 80027f2:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a3a      	ldr	r2, [pc, #232]	; (80028e4 <HAL_ADC_ConfigChannel+0x7e0>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d127      	bne.n	8002850 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002800:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002804:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002808:	2b00      	cmp	r3, #0
 800280a:	d121      	bne.n	8002850 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a35      	ldr	r2, [pc, #212]	; (80028e8 <HAL_ADC_ConfigChannel+0x7e4>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d157      	bne.n	80028c6 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002816:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800281a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800281e:	4619      	mov	r1, r3
 8002820:	482f      	ldr	r0, [pc, #188]	; (80028e0 <HAL_ADC_ConfigChannel+0x7dc>)
 8002822:	f7fe fef2 	bl	800160a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002826:	4b31      	ldr	r3, [pc, #196]	; (80028ec <HAL_ADC_ConfigChannel+0x7e8>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	099b      	lsrs	r3, r3, #6
 800282c:	4a30      	ldr	r2, [pc, #192]	; (80028f0 <HAL_ADC_ConfigChannel+0x7ec>)
 800282e:	fba2 2303 	umull	r2, r3, r2, r3
 8002832:	099b      	lsrs	r3, r3, #6
 8002834:	1c5a      	adds	r2, r3, #1
 8002836:	4613      	mov	r3, r2
 8002838:	005b      	lsls	r3, r3, #1
 800283a:	4413      	add	r3, r2
 800283c:	009b      	lsls	r3, r3, #2
 800283e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002840:	e002      	b.n	8002848 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	3b01      	subs	r3, #1
 8002846:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d1f9      	bne.n	8002842 <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800284e:	e03a      	b.n	80028c6 <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a27      	ldr	r2, [pc, #156]	; (80028f4 <HAL_ADC_ConfigChannel+0x7f0>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d113      	bne.n	8002882 <HAL_ADC_ConfigChannel+0x77e>
 800285a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800285e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002862:	2b00      	cmp	r3, #0
 8002864:	d10d      	bne.n	8002882 <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4a1f      	ldr	r2, [pc, #124]	; (80028e8 <HAL_ADC_ConfigChannel+0x7e4>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d12a      	bne.n	80028c6 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002870:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002874:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002878:	4619      	mov	r1, r3
 800287a:	4819      	ldr	r0, [pc, #100]	; (80028e0 <HAL_ADC_ConfigChannel+0x7dc>)
 800287c:	f7fe fec5 	bl	800160a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002880:	e021      	b.n	80028c6 <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a1c      	ldr	r2, [pc, #112]	; (80028f8 <HAL_ADC_ConfigChannel+0x7f4>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d11c      	bne.n	80028c6 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800288c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002890:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002894:	2b00      	cmp	r3, #0
 8002896:	d116      	bne.n	80028c6 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a12      	ldr	r2, [pc, #72]	; (80028e8 <HAL_ADC_ConfigChannel+0x7e4>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d111      	bne.n	80028c6 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80028a2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80028a6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80028aa:	4619      	mov	r1, r3
 80028ac:	480c      	ldr	r0, [pc, #48]	; (80028e0 <HAL_ADC_ConfigChannel+0x7dc>)
 80028ae:	f7fe feac 	bl	800160a <LL_ADC_SetCommonPathInternalCh>
 80028b2:	e008      	b.n	80028c6 <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028b8:	f043 0220 	orr.w	r2, r3, #32
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80028c0:	2301      	movs	r3, #1
 80028c2:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2200      	movs	r2, #0
 80028ca:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 80028ce:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	37d8      	adds	r7, #216	; 0xd8
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}
 80028da:	bf00      	nop
 80028dc:	80080000 	.word	0x80080000
 80028e0:	50040300 	.word	0x50040300
 80028e4:	c7520000 	.word	0xc7520000
 80028e8:	50040000 	.word	0x50040000
 80028ec:	20000004 	.word	0x20000004
 80028f0:	053e2d63 	.word	0x053e2d63
 80028f4:	cb840000 	.word	0xcb840000
 80028f8:	80000001 	.word	0x80000001

080028fc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b084      	sub	sp, #16
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002904:	2300      	movs	r3, #0
 8002906:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4618      	mov	r0, r3
 800290e:	f7ff f809 	bl	8001924 <LL_ADC_IsEnabled>
 8002912:	4603      	mov	r3, r0
 8002914:	2b00      	cmp	r3, #0
 8002916:	d169      	bne.n	80029ec <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	689a      	ldr	r2, [r3, #8]
 800291e:	4b36      	ldr	r3, [pc, #216]	; (80029f8 <ADC_Enable+0xfc>)
 8002920:	4013      	ands	r3, r2
 8002922:	2b00      	cmp	r3, #0
 8002924:	d00d      	beq.n	8002942 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800292a:	f043 0210 	orr.w	r2, r3, #16
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002936:	f043 0201 	orr.w	r2, r3, #1
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800293e:	2301      	movs	r3, #1
 8002940:	e055      	b.n	80029ee <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4618      	mov	r0, r3
 8002948:	f7fe ffd8 	bl	80018fc <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800294c:	482b      	ldr	r0, [pc, #172]	; (80029fc <ADC_Enable+0x100>)
 800294e:	f7fe fe6f 	bl	8001630 <LL_ADC_GetCommonPathInternalCh>
 8002952:	4603      	mov	r3, r0
 8002954:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002958:	2b00      	cmp	r3, #0
 800295a:	d013      	beq.n	8002984 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800295c:	4b28      	ldr	r3, [pc, #160]	; (8002a00 <ADC_Enable+0x104>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	099b      	lsrs	r3, r3, #6
 8002962:	4a28      	ldr	r2, [pc, #160]	; (8002a04 <ADC_Enable+0x108>)
 8002964:	fba2 2303 	umull	r2, r3, r2, r3
 8002968:	099b      	lsrs	r3, r3, #6
 800296a:	1c5a      	adds	r2, r3, #1
 800296c:	4613      	mov	r3, r2
 800296e:	005b      	lsls	r3, r3, #1
 8002970:	4413      	add	r3, r2
 8002972:	009b      	lsls	r3, r3, #2
 8002974:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8002976:	e002      	b.n	800297e <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	3b01      	subs	r3, #1
 800297c:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800297e:	68bb      	ldr	r3, [r7, #8]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d1f9      	bne.n	8002978 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002984:	f7fe fdfe 	bl	8001584 <HAL_GetTick>
 8002988:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800298a:	e028      	b.n	80029de <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4618      	mov	r0, r3
 8002992:	f7fe ffc7 	bl	8001924 <LL_ADC_IsEnabled>
 8002996:	4603      	mov	r3, r0
 8002998:	2b00      	cmp	r3, #0
 800299a:	d104      	bne.n	80029a6 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4618      	mov	r0, r3
 80029a2:	f7fe ffab 	bl	80018fc <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80029a6:	f7fe fded 	bl	8001584 <HAL_GetTick>
 80029aa:	4602      	mov	r2, r0
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	1ad3      	subs	r3, r2, r3
 80029b0:	2b02      	cmp	r3, #2
 80029b2:	d914      	bls.n	80029de <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f003 0301 	and.w	r3, r3, #1
 80029be:	2b01      	cmp	r3, #1
 80029c0:	d00d      	beq.n	80029de <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029c6:	f043 0210 	orr.w	r2, r3, #16
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029d2:	f043 0201 	orr.w	r2, r3, #1
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	e007      	b.n	80029ee <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f003 0301 	and.w	r3, r3, #1
 80029e8:	2b01      	cmp	r3, #1
 80029ea:	d1cf      	bne.n	800298c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80029ec:	2300      	movs	r3, #0
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	3710      	adds	r7, #16
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}
 80029f6:	bf00      	nop
 80029f8:	8000003f 	.word	0x8000003f
 80029fc:	50040300 	.word	0x50040300
 8002a00:	20000004 	.word	0x20000004
 8002a04:	053e2d63 	.word	0x053e2d63

08002a08 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b084      	sub	sp, #16
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a14:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a1a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d14b      	bne.n	8002aba <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a26:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f003 0308 	and.w	r3, r3, #8
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d021      	beq.n	8002a80 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4618      	mov	r0, r3
 8002a42:	f7fe fe6b 	bl	800171c <LL_ADC_REG_IsTriggerSourceSWStart>
 8002a46:	4603      	mov	r3, r0
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d032      	beq.n	8002ab2 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	68db      	ldr	r3, [r3, #12]
 8002a52:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d12b      	bne.n	8002ab2 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a5e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	659a      	str	r2, [r3, #88]	; 0x58
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a6a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d11f      	bne.n	8002ab2 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a76:	f043 0201 	orr.w	r2, r3, #1
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	659a      	str	r2, [r3, #88]	; 0x58
 8002a7e:	e018      	b.n	8002ab2 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	68db      	ldr	r3, [r3, #12]
 8002a86:	f003 0302 	and.w	r3, r3, #2
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d111      	bne.n	8002ab2 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a92:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	659a      	str	r2, [r3, #88]	; 0x58
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a9e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d105      	bne.n	8002ab2 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aaa:	f043 0201 	orr.w	r2, r3, #1
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	659a      	str	r2, [r3, #88]	; 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002ab2:	68f8      	ldr	r0, [r7, #12]
 8002ab4:	f7fd fbc2 	bl	800023c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002ab8:	e00e      	b.n	8002ad8 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002abe:	f003 0310 	and.w	r3, r3, #16
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d003      	beq.n	8002ace <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002ac6:	68f8      	ldr	r0, [r7, #12]
 8002ac8:	f7ff fb12 	bl	80020f0 <HAL_ADC_ErrorCallback>
}
 8002acc:	e004      	b.n	8002ad8 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ad2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ad4:	6878      	ldr	r0, [r7, #4]
 8002ad6:	4798      	blx	r3
}
 8002ad8:	bf00      	nop
 8002ada:	3710      	adds	r7, #16
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}

08002ae0 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b084      	sub	sp, #16
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aec:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002aee:	68f8      	ldr	r0, [r7, #12]
 8002af0:	f7ff faea 	bl	80020c8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002af4:	bf00      	nop
 8002af6:	3710      	adds	r7, #16
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd80      	pop	{r7, pc}

08002afc <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b084      	sub	sp, #16
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b08:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b0e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b1a:	f043 0204 	orr.w	r2, r3, #4
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002b22:	68f8      	ldr	r0, [r7, #12]
 8002b24:	f7ff fae4 	bl	80020f0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002b28:	bf00      	nop
 8002b2a:	3710      	adds	r7, #16
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bd80      	pop	{r7, pc}

08002b30 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b083      	sub	sp, #12
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8002b38:	bf00      	nop
 8002b3a:	370c      	adds	r7, #12
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b42:	4770      	bx	lr

08002b44 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b083      	sub	sp, #12
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8002b4c:	bf00      	nop
 8002b4e:	370c      	adds	r7, #12
 8002b50:	46bd      	mov	sp, r7
 8002b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b56:	4770      	bx	lr

08002b58 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b083      	sub	sp, #12
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8002b60:	bf00      	nop
 8002b62:	370c      	adds	r7, #12
 8002b64:	46bd      	mov	sp, r7
 8002b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6a:	4770      	bx	lr

08002b6c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b083      	sub	sp, #12
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8002b74:	bf00      	nop
 8002b76:	370c      	adds	r7, #12
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7e:	4770      	bx	lr

08002b80 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b083      	sub	sp, #12
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8002b88:	bf00      	nop
 8002b8a:	370c      	adds	r7, #12
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b92:	4770      	bx	lr

08002b94 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b084      	sub	sp, #16
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d101      	bne.n	8002ba6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e0ed      	b.n	8002d82 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d102      	bne.n	8002bb8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002bb2:	6878      	ldr	r0, [r7, #4]
 8002bb4:	f7fe f988 	bl	8000ec8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	681a      	ldr	r2, [r3, #0]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f042 0201 	orr.w	r2, r2, #1
 8002bc6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002bc8:	f7fe fcdc 	bl	8001584 <HAL_GetTick>
 8002bcc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002bce:	e012      	b.n	8002bf6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002bd0:	f7fe fcd8 	bl	8001584 <HAL_GetTick>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	1ad3      	subs	r3, r2, r3
 8002bda:	2b0a      	cmp	r3, #10
 8002bdc:	d90b      	bls.n	8002bf6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2205      	movs	r2, #5
 8002bee:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e0c5      	b.n	8002d82 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	f003 0301 	and.w	r3, r3, #1
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d0e5      	beq.n	8002bd0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	681a      	ldr	r2, [r3, #0]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f022 0202 	bic.w	r2, r2, #2
 8002c12:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002c14:	f7fe fcb6 	bl	8001584 <HAL_GetTick>
 8002c18:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002c1a:	e012      	b.n	8002c42 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002c1c:	f7fe fcb2 	bl	8001584 <HAL_GetTick>
 8002c20:	4602      	mov	r2, r0
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	1ad3      	subs	r3, r2, r3
 8002c26:	2b0a      	cmp	r3, #10
 8002c28:	d90b      	bls.n	8002c42 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c2e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2205      	movs	r2, #5
 8002c3a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e09f      	b.n	8002d82 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	f003 0302 	and.w	r3, r3, #2
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d1e5      	bne.n	8002c1c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	7e1b      	ldrb	r3, [r3, #24]
 8002c54:	2b01      	cmp	r3, #1
 8002c56:	d108      	bne.n	8002c6a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	681a      	ldr	r2, [r3, #0]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002c66:	601a      	str	r2, [r3, #0]
 8002c68:	e007      	b.n	8002c7a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	681a      	ldr	r2, [r3, #0]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c78:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	7e5b      	ldrb	r3, [r3, #25]
 8002c7e:	2b01      	cmp	r3, #1
 8002c80:	d108      	bne.n	8002c94 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	681a      	ldr	r2, [r3, #0]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c90:	601a      	str	r2, [r3, #0]
 8002c92:	e007      	b.n	8002ca4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	681a      	ldr	r2, [r3, #0]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ca2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	7e9b      	ldrb	r3, [r3, #26]
 8002ca8:	2b01      	cmp	r3, #1
 8002caa:	d108      	bne.n	8002cbe <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	681a      	ldr	r2, [r3, #0]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f042 0220 	orr.w	r2, r2, #32
 8002cba:	601a      	str	r2, [r3, #0]
 8002cbc:	e007      	b.n	8002cce <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	681a      	ldr	r2, [r3, #0]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f022 0220 	bic.w	r2, r2, #32
 8002ccc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	7edb      	ldrb	r3, [r3, #27]
 8002cd2:	2b01      	cmp	r3, #1
 8002cd4:	d108      	bne.n	8002ce8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	681a      	ldr	r2, [r3, #0]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f022 0210 	bic.w	r2, r2, #16
 8002ce4:	601a      	str	r2, [r3, #0]
 8002ce6:	e007      	b.n	8002cf8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	681a      	ldr	r2, [r3, #0]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f042 0210 	orr.w	r2, r2, #16
 8002cf6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	7f1b      	ldrb	r3, [r3, #28]
 8002cfc:	2b01      	cmp	r3, #1
 8002cfe:	d108      	bne.n	8002d12 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	681a      	ldr	r2, [r3, #0]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f042 0208 	orr.w	r2, r2, #8
 8002d0e:	601a      	str	r2, [r3, #0]
 8002d10:	e007      	b.n	8002d22 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	681a      	ldr	r2, [r3, #0]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f022 0208 	bic.w	r2, r2, #8
 8002d20:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	7f5b      	ldrb	r3, [r3, #29]
 8002d26:	2b01      	cmp	r3, #1
 8002d28:	d108      	bne.n	8002d3c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	681a      	ldr	r2, [r3, #0]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f042 0204 	orr.w	r2, r2, #4
 8002d38:	601a      	str	r2, [r3, #0]
 8002d3a:	e007      	b.n	8002d4c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	681a      	ldr	r2, [r3, #0]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f022 0204 	bic.w	r2, r2, #4
 8002d4a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	689a      	ldr	r2, [r3, #8]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	68db      	ldr	r3, [r3, #12]
 8002d54:	431a      	orrs	r2, r3
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	691b      	ldr	r3, [r3, #16]
 8002d5a:	431a      	orrs	r2, r3
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	695b      	ldr	r3, [r3, #20]
 8002d60:	ea42 0103 	orr.w	r1, r2, r3
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	1e5a      	subs	r2, r3, #1
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	430a      	orrs	r2, r1
 8002d70:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2200      	movs	r2, #0
 8002d76:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002d80:	2300      	movs	r3, #0
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	3710      	adds	r7, #16
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}
	...

08002d8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b085      	sub	sp, #20
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	f003 0307 	and.w	r3, r3, #7
 8002d9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d9c:	4b0c      	ldr	r3, [pc, #48]	; (8002dd0 <__NVIC_SetPriorityGrouping+0x44>)
 8002d9e:	68db      	ldr	r3, [r3, #12]
 8002da0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002da2:	68ba      	ldr	r2, [r7, #8]
 8002da4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002da8:	4013      	ands	r3, r2
 8002daa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002db4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002db8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002dbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002dbe:	4a04      	ldr	r2, [pc, #16]	; (8002dd0 <__NVIC_SetPriorityGrouping+0x44>)
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	60d3      	str	r3, [r2, #12]
}
 8002dc4:	bf00      	nop
 8002dc6:	3714      	adds	r7, #20
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dce:	4770      	bx	lr
 8002dd0:	e000ed00 	.word	0xe000ed00

08002dd4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002dd8:	4b04      	ldr	r3, [pc, #16]	; (8002dec <__NVIC_GetPriorityGrouping+0x18>)
 8002dda:	68db      	ldr	r3, [r3, #12]
 8002ddc:	0a1b      	lsrs	r3, r3, #8
 8002dde:	f003 0307 	and.w	r3, r3, #7
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	46bd      	mov	sp, r7
 8002de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dea:	4770      	bx	lr
 8002dec:	e000ed00 	.word	0xe000ed00

08002df0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b083      	sub	sp, #12
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	4603      	mov	r3, r0
 8002df8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002dfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	db0b      	blt.n	8002e1a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e02:	79fb      	ldrb	r3, [r7, #7]
 8002e04:	f003 021f 	and.w	r2, r3, #31
 8002e08:	4907      	ldr	r1, [pc, #28]	; (8002e28 <__NVIC_EnableIRQ+0x38>)
 8002e0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e0e:	095b      	lsrs	r3, r3, #5
 8002e10:	2001      	movs	r0, #1
 8002e12:	fa00 f202 	lsl.w	r2, r0, r2
 8002e16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002e1a:	bf00      	nop
 8002e1c:	370c      	adds	r7, #12
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e24:	4770      	bx	lr
 8002e26:	bf00      	nop
 8002e28:	e000e100 	.word	0xe000e100

08002e2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b083      	sub	sp, #12
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	4603      	mov	r3, r0
 8002e34:	6039      	str	r1, [r7, #0]
 8002e36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	db0a      	blt.n	8002e56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	b2da      	uxtb	r2, r3
 8002e44:	490c      	ldr	r1, [pc, #48]	; (8002e78 <__NVIC_SetPriority+0x4c>)
 8002e46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e4a:	0112      	lsls	r2, r2, #4
 8002e4c:	b2d2      	uxtb	r2, r2
 8002e4e:	440b      	add	r3, r1
 8002e50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e54:	e00a      	b.n	8002e6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	b2da      	uxtb	r2, r3
 8002e5a:	4908      	ldr	r1, [pc, #32]	; (8002e7c <__NVIC_SetPriority+0x50>)
 8002e5c:	79fb      	ldrb	r3, [r7, #7]
 8002e5e:	f003 030f 	and.w	r3, r3, #15
 8002e62:	3b04      	subs	r3, #4
 8002e64:	0112      	lsls	r2, r2, #4
 8002e66:	b2d2      	uxtb	r2, r2
 8002e68:	440b      	add	r3, r1
 8002e6a:	761a      	strb	r2, [r3, #24]
}
 8002e6c:	bf00      	nop
 8002e6e:	370c      	adds	r7, #12
 8002e70:	46bd      	mov	sp, r7
 8002e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e76:	4770      	bx	lr
 8002e78:	e000e100 	.word	0xe000e100
 8002e7c:	e000ed00 	.word	0xe000ed00

08002e80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b089      	sub	sp, #36	; 0x24
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	60f8      	str	r0, [r7, #12]
 8002e88:	60b9      	str	r1, [r7, #8]
 8002e8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	f003 0307 	and.w	r3, r3, #7
 8002e92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e94:	69fb      	ldr	r3, [r7, #28]
 8002e96:	f1c3 0307 	rsb	r3, r3, #7
 8002e9a:	2b04      	cmp	r3, #4
 8002e9c:	bf28      	it	cs
 8002e9e:	2304      	movcs	r3, #4
 8002ea0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ea2:	69fb      	ldr	r3, [r7, #28]
 8002ea4:	3304      	adds	r3, #4
 8002ea6:	2b06      	cmp	r3, #6
 8002ea8:	d902      	bls.n	8002eb0 <NVIC_EncodePriority+0x30>
 8002eaa:	69fb      	ldr	r3, [r7, #28]
 8002eac:	3b03      	subs	r3, #3
 8002eae:	e000      	b.n	8002eb2 <NVIC_EncodePriority+0x32>
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002eb4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002eb8:	69bb      	ldr	r3, [r7, #24]
 8002eba:	fa02 f303 	lsl.w	r3, r2, r3
 8002ebe:	43da      	mvns	r2, r3
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	401a      	ands	r2, r3
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ec8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002ecc:	697b      	ldr	r3, [r7, #20]
 8002ece:	fa01 f303 	lsl.w	r3, r1, r3
 8002ed2:	43d9      	mvns	r1, r3
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ed8:	4313      	orrs	r3, r2
         );
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	3724      	adds	r7, #36	; 0x24
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee4:	4770      	bx	lr

08002ee6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ee6:	b580      	push	{r7, lr}
 8002ee8:	b082      	sub	sp, #8
 8002eea:	af00      	add	r7, sp, #0
 8002eec:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002eee:	6878      	ldr	r0, [r7, #4]
 8002ef0:	f7ff ff4c 	bl	8002d8c <__NVIC_SetPriorityGrouping>
}
 8002ef4:	bf00      	nop
 8002ef6:	3708      	adds	r7, #8
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bd80      	pop	{r7, pc}

08002efc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b086      	sub	sp, #24
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	4603      	mov	r3, r0
 8002f04:	60b9      	str	r1, [r7, #8]
 8002f06:	607a      	str	r2, [r7, #4]
 8002f08:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002f0e:	f7ff ff61 	bl	8002dd4 <__NVIC_GetPriorityGrouping>
 8002f12:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f14:	687a      	ldr	r2, [r7, #4]
 8002f16:	68b9      	ldr	r1, [r7, #8]
 8002f18:	6978      	ldr	r0, [r7, #20]
 8002f1a:	f7ff ffb1 	bl	8002e80 <NVIC_EncodePriority>
 8002f1e:	4602      	mov	r2, r0
 8002f20:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f24:	4611      	mov	r1, r2
 8002f26:	4618      	mov	r0, r3
 8002f28:	f7ff ff80 	bl	8002e2c <__NVIC_SetPriority>
}
 8002f2c:	bf00      	nop
 8002f2e:	3718      	adds	r7, #24
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}

08002f34 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b082      	sub	sp, #8
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f42:	4618      	mov	r0, r3
 8002f44:	f7ff ff54 	bl	8002df0 <__NVIC_EnableIRQ>
}
 8002f48:	bf00      	nop
 8002f4a:	3708      	adds	r7, #8
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bd80      	pop	{r7, pc}

08002f50 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b084      	sub	sp, #16
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d101      	bne.n	8002f62 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e08d      	b.n	800307e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	461a      	mov	r2, r3
 8002f68:	4b47      	ldr	r3, [pc, #284]	; (8003088 <HAL_DMA_Init+0x138>)
 8002f6a:	429a      	cmp	r2, r3
 8002f6c:	d80f      	bhi.n	8002f8e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	461a      	mov	r2, r3
 8002f74:	4b45      	ldr	r3, [pc, #276]	; (800308c <HAL_DMA_Init+0x13c>)
 8002f76:	4413      	add	r3, r2
 8002f78:	4a45      	ldr	r2, [pc, #276]	; (8003090 <HAL_DMA_Init+0x140>)
 8002f7a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f7e:	091b      	lsrs	r3, r3, #4
 8002f80:	009a      	lsls	r2, r3, #2
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	4a42      	ldr	r2, [pc, #264]	; (8003094 <HAL_DMA_Init+0x144>)
 8002f8a:	641a      	str	r2, [r3, #64]	; 0x40
 8002f8c:	e00e      	b.n	8002fac <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	461a      	mov	r2, r3
 8002f94:	4b40      	ldr	r3, [pc, #256]	; (8003098 <HAL_DMA_Init+0x148>)
 8002f96:	4413      	add	r3, r2
 8002f98:	4a3d      	ldr	r2, [pc, #244]	; (8003090 <HAL_DMA_Init+0x140>)
 8002f9a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f9e:	091b      	lsrs	r3, r3, #4
 8002fa0:	009a      	lsls	r2, r3, #2
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	4a3c      	ldr	r2, [pc, #240]	; (800309c <HAL_DMA_Init+0x14c>)
 8002faa:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2202      	movs	r2, #2
 8002fb0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002fc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fc6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002fd0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	691b      	ldr	r3, [r3, #16]
 8002fd6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002fdc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	699b      	ldr	r3, [r3, #24]
 8002fe2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002fe8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6a1b      	ldr	r3, [r3, #32]
 8002fee:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002ff0:	68fa      	ldr	r2, [r7, #12]
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	68fa      	ldr	r2, [r7, #12]
 8002ffc:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002ffe:	6878      	ldr	r0, [r7, #4]
 8003000:	f000 f9b6 	bl	8003370 <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	689b      	ldr	r3, [r3, #8]
 8003008:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800300c:	d102      	bne.n	8003014 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2200      	movs	r2, #0
 8003012:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	685a      	ldr	r2, [r3, #4]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800301c:	b2d2      	uxtb	r2, r2
 800301e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003024:	687a      	ldr	r2, [r7, #4]
 8003026:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003028:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d010      	beq.n	8003054 <HAL_DMA_Init+0x104>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	2b04      	cmp	r3, #4
 8003038:	d80c      	bhi.n	8003054 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800303a:	6878      	ldr	r0, [r7, #4]
 800303c:	f000 f9d6 	bl	80033ec <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003044:	2200      	movs	r2, #0
 8003046:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800304c:	687a      	ldr	r2, [r7, #4]
 800304e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003050:	605a      	str	r2, [r3, #4]
 8003052:	e008      	b.n	8003066 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2200      	movs	r2, #0
 8003058:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2200      	movs	r2, #0
 800305e:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2200      	movs	r2, #0
 8003064:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2200      	movs	r2, #0
 800306a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2201      	movs	r2, #1
 8003070:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2200      	movs	r2, #0
 8003078:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800307c:	2300      	movs	r3, #0
}
 800307e:	4618      	mov	r0, r3
 8003080:	3710      	adds	r7, #16
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}
 8003086:	bf00      	nop
 8003088:	40020407 	.word	0x40020407
 800308c:	bffdfff8 	.word	0xbffdfff8
 8003090:	cccccccd 	.word	0xcccccccd
 8003094:	40020000 	.word	0x40020000
 8003098:	bffdfbf8 	.word	0xbffdfbf8
 800309c:	40020400 	.word	0x40020400

080030a0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b086      	sub	sp, #24
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	60f8      	str	r0, [r7, #12]
 80030a8:	60b9      	str	r1, [r7, #8]
 80030aa:	607a      	str	r2, [r7, #4]
 80030ac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80030ae:	2300      	movs	r3, #0
 80030b0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80030b8:	2b01      	cmp	r3, #1
 80030ba:	d101      	bne.n	80030c0 <HAL_DMA_Start_IT+0x20>
 80030bc:	2302      	movs	r3, #2
 80030be:	e066      	b.n	800318e <HAL_DMA_Start_IT+0xee>
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	2201      	movs	r2, #1
 80030c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80030ce:	b2db      	uxtb	r3, r3
 80030d0:	2b01      	cmp	r3, #1
 80030d2:	d155      	bne.n	8003180 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	2202      	movs	r2, #2
 80030d8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	2200      	movs	r2, #0
 80030e0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	681a      	ldr	r2, [r3, #0]
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f022 0201 	bic.w	r2, r2, #1
 80030f0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	687a      	ldr	r2, [r7, #4]
 80030f6:	68b9      	ldr	r1, [r7, #8]
 80030f8:	68f8      	ldr	r0, [r7, #12]
 80030fa:	f000 f8fb 	bl	80032f4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003102:	2b00      	cmp	r3, #0
 8003104:	d008      	beq.n	8003118 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	681a      	ldr	r2, [r3, #0]
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f042 020e 	orr.w	r2, r2, #14
 8003114:	601a      	str	r2, [r3, #0]
 8003116:	e00f      	b.n	8003138 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	681a      	ldr	r2, [r3, #0]
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f022 0204 	bic.w	r2, r2, #4
 8003126:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	681a      	ldr	r2, [r3, #0]
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f042 020a 	orr.w	r2, r2, #10
 8003136:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003142:	2b00      	cmp	r3, #0
 8003144:	d007      	beq.n	8003156 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800314a:	681a      	ldr	r2, [r3, #0]
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003150:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003154:	601a      	str	r2, [r3, #0]
    }

    if(hdma->DMAmuxRequestGen != 0U)
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800315a:	2b00      	cmp	r3, #0
 800315c:	d007      	beq.n	800316e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003162:	681a      	ldr	r2, [r3, #0]
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003168:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800316c:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	681a      	ldr	r2, [r3, #0]
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f042 0201 	orr.w	r2, r2, #1
 800317c:	601a      	str	r2, [r3, #0]
 800317e:	e005      	b.n	800318c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	2200      	movs	r2, #0
 8003184:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003188:	2302      	movs	r3, #2
 800318a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800318c:	7dfb      	ldrb	r3, [r7, #23]
}
 800318e:	4618      	mov	r0, r3
 8003190:	3718      	adds	r7, #24
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}

08003196 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003196:	b580      	push	{r7, lr}
 8003198:	b084      	sub	sp, #16
 800319a:	af00      	add	r7, sp, #0
 800319c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031b2:	f003 031c 	and.w	r3, r3, #28
 80031b6:	2204      	movs	r2, #4
 80031b8:	409a      	lsls	r2, r3
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	4013      	ands	r3, r2
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d026      	beq.n	8003210 <HAL_DMA_IRQHandler+0x7a>
 80031c2:	68bb      	ldr	r3, [r7, #8]
 80031c4:	f003 0304 	and.w	r3, r3, #4
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d021      	beq.n	8003210 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f003 0320 	and.w	r3, r3, #32
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d107      	bne.n	80031ea <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	681a      	ldr	r2, [r3, #0]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f022 0204 	bic.w	r2, r2, #4
 80031e8:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031ee:	f003 021c 	and.w	r2, r3, #28
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f6:	2104      	movs	r1, #4
 80031f8:	fa01 f202 	lsl.w	r2, r1, r2
 80031fc:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003202:	2b00      	cmp	r3, #0
 8003204:	d071      	beq.n	80032ea <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800320a:	6878      	ldr	r0, [r7, #4]
 800320c:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 800320e:	e06c      	b.n	80032ea <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003214:	f003 031c 	and.w	r3, r3, #28
 8003218:	2202      	movs	r2, #2
 800321a:	409a      	lsls	r2, r3
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	4013      	ands	r3, r2
 8003220:	2b00      	cmp	r3, #0
 8003222:	d02e      	beq.n	8003282 <HAL_DMA_IRQHandler+0xec>
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	f003 0302 	and.w	r3, r3, #2
 800322a:	2b00      	cmp	r3, #0
 800322c:	d029      	beq.n	8003282 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f003 0320 	and.w	r3, r3, #32
 8003238:	2b00      	cmp	r3, #0
 800323a:	d10b      	bne.n	8003254 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	681a      	ldr	r2, [r3, #0]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f022 020a 	bic.w	r2, r2, #10
 800324a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2201      	movs	r2, #1
 8003250:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003258:	f003 021c 	and.w	r2, r3, #28
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003260:	2102      	movs	r1, #2
 8003262:	fa01 f202 	lsl.w	r2, r1, r2
 8003266:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2200      	movs	r2, #0
 800326c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003274:	2b00      	cmp	r3, #0
 8003276:	d038      	beq.n	80032ea <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800327c:	6878      	ldr	r0, [r7, #4]
 800327e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003280:	e033      	b.n	80032ea <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003286:	f003 031c 	and.w	r3, r3, #28
 800328a:	2208      	movs	r2, #8
 800328c:	409a      	lsls	r2, r3
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	4013      	ands	r3, r2
 8003292:	2b00      	cmp	r3, #0
 8003294:	d02a      	beq.n	80032ec <HAL_DMA_IRQHandler+0x156>
 8003296:	68bb      	ldr	r3, [r7, #8]
 8003298:	f003 0308 	and.w	r3, r3, #8
 800329c:	2b00      	cmp	r3, #0
 800329e:	d025      	beq.n	80032ec <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	681a      	ldr	r2, [r3, #0]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f022 020e 	bic.w	r2, r2, #14
 80032ae:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032b4:	f003 021c 	and.w	r2, r3, #28
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032bc:	2101      	movs	r1, #1
 80032be:	fa01 f202 	lsl.w	r2, r1, r2
 80032c2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2201      	movs	r2, #1
 80032c8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2201      	movs	r2, #1
 80032ce:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2200      	movs	r2, #0
 80032d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d004      	beq.n	80032ec <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032e6:	6878      	ldr	r0, [r7, #4]
 80032e8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80032ea:	bf00      	nop
 80032ec:	bf00      	nop
}
 80032ee:	3710      	adds	r7, #16
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bd80      	pop	{r7, pc}

080032f4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b085      	sub	sp, #20
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	60f8      	str	r0, [r7, #12]
 80032fc:	60b9      	str	r1, [r7, #8]
 80032fe:	607a      	str	r2, [r7, #4]
 8003300:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003306:	68fa      	ldr	r2, [r7, #12]
 8003308:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800330a:	605a      	str	r2, [r3, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003310:	2b00      	cmp	r3, #0
 8003312:	d004      	beq.n	800331e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003318:	68fa      	ldr	r2, [r7, #12]
 800331a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800331c:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003322:	f003 021c 	and.w	r2, r3, #28
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800332a:	2101      	movs	r1, #1
 800332c:	fa01 f202 	lsl.w	r2, r1, r2
 8003330:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	683a      	ldr	r2, [r7, #0]
 8003338:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	689b      	ldr	r3, [r3, #8]
 800333e:	2b10      	cmp	r3, #16
 8003340:	d108      	bne.n	8003354 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	687a      	ldr	r2, [r7, #4]
 8003348:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	68ba      	ldr	r2, [r7, #8]
 8003350:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003352:	e007      	b.n	8003364 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	68ba      	ldr	r2, [r7, #8]
 800335a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	687a      	ldr	r2, [r7, #4]
 8003362:	60da      	str	r2, [r3, #12]
}
 8003364:	bf00      	nop
 8003366:	3714      	adds	r7, #20
 8003368:	46bd      	mov	sp, r7
 800336a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336e:	4770      	bx	lr

08003370 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003370:	b480      	push	{r7}
 8003372:	b085      	sub	sp, #20
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	461a      	mov	r2, r3
 800337e:	4b17      	ldr	r3, [pc, #92]	; (80033dc <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003380:	429a      	cmp	r2, r3
 8003382:	d80a      	bhi.n	800339a <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003388:	089b      	lsrs	r3, r3, #2
 800338a:	009b      	lsls	r3, r3, #2
 800338c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003390:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8003394:	687a      	ldr	r2, [r7, #4]
 8003396:	6493      	str	r3, [r2, #72]	; 0x48
 8003398:	e007      	b.n	80033aa <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800339e:	089b      	lsrs	r3, r3, #2
 80033a0:	009a      	lsls	r2, r3, #2
 80033a2:	4b0f      	ldr	r3, [pc, #60]	; (80033e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80033a4:	4413      	add	r3, r2
 80033a6:	687a      	ldr	r2, [r7, #4]
 80033a8:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	b2db      	uxtb	r3, r3
 80033b0:	3b08      	subs	r3, #8
 80033b2:	4a0c      	ldr	r2, [pc, #48]	; (80033e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80033b4:	fba2 2303 	umull	r2, r3, r2, r3
 80033b8:	091b      	lsrs	r3, r3, #4
 80033ba:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	4a0a      	ldr	r2, [pc, #40]	; (80033e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80033c0:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	f003 031f 	and.w	r3, r3, #31
 80033c8:	2201      	movs	r2, #1
 80033ca:	409a      	lsls	r2, r3
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	651a      	str	r2, [r3, #80]	; 0x50
}
 80033d0:	bf00      	nop
 80033d2:	3714      	adds	r7, #20
 80033d4:	46bd      	mov	sp, r7
 80033d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033da:	4770      	bx	lr
 80033dc:	40020407 	.word	0x40020407
 80033e0:	4002081c 	.word	0x4002081c
 80033e4:	cccccccd 	.word	0xcccccccd
 80033e8:	40020880 	.word	0x40020880

080033ec <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80033ec:	b480      	push	{r7}
 80033ee:	b085      	sub	sp, #20
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	b2db      	uxtb	r3, r3
 80033fa:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80033fc:	68fa      	ldr	r2, [r7, #12]
 80033fe:	4b0b      	ldr	r3, [pc, #44]	; (800342c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003400:	4413      	add	r3, r2
 8003402:	009b      	lsls	r3, r3, #2
 8003404:	461a      	mov	r2, r3
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	4a08      	ldr	r2, [pc, #32]	; (8003430 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800340e:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	3b01      	subs	r3, #1
 8003414:	f003 0303 	and.w	r3, r3, #3
 8003418:	2201      	movs	r2, #1
 800341a:	409a      	lsls	r2, r3
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003420:	bf00      	nop
 8003422:	3714      	adds	r7, #20
 8003424:	46bd      	mov	sp, r7
 8003426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342a:	4770      	bx	lr
 800342c:	1000823f 	.word	0x1000823f
 8003430:	40020940 	.word	0x40020940

08003434 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003434:	b480      	push	{r7}
 8003436:	b087      	sub	sp, #28
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
 800343c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800343e:	2300      	movs	r3, #0
 8003440:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003442:	e166      	b.n	8003712 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	681a      	ldr	r2, [r3, #0]
 8003448:	2101      	movs	r1, #1
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	fa01 f303 	lsl.w	r3, r1, r3
 8003450:	4013      	ands	r3, r2
 8003452:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	2b00      	cmp	r3, #0
 8003458:	f000 8158 	beq.w	800370c <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	f003 0303 	and.w	r3, r3, #3
 8003464:	2b01      	cmp	r3, #1
 8003466:	d005      	beq.n	8003474 <HAL_GPIO_Init+0x40>
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	f003 0303 	and.w	r3, r3, #3
 8003470:	2b02      	cmp	r3, #2
 8003472:	d130      	bne.n	80034d6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	689b      	ldr	r3, [r3, #8]
 8003478:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	005b      	lsls	r3, r3, #1
 800347e:	2203      	movs	r2, #3
 8003480:	fa02 f303 	lsl.w	r3, r2, r3
 8003484:	43db      	mvns	r3, r3
 8003486:	693a      	ldr	r2, [r7, #16]
 8003488:	4013      	ands	r3, r2
 800348a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	68da      	ldr	r2, [r3, #12]
 8003490:	697b      	ldr	r3, [r7, #20]
 8003492:	005b      	lsls	r3, r3, #1
 8003494:	fa02 f303 	lsl.w	r3, r2, r3
 8003498:	693a      	ldr	r2, [r7, #16]
 800349a:	4313      	orrs	r3, r2
 800349c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	693a      	ldr	r2, [r7, #16]
 80034a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80034aa:	2201      	movs	r2, #1
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	fa02 f303 	lsl.w	r3, r2, r3
 80034b2:	43db      	mvns	r3, r3
 80034b4:	693a      	ldr	r2, [r7, #16]
 80034b6:	4013      	ands	r3, r2
 80034b8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	091b      	lsrs	r3, r3, #4
 80034c0:	f003 0201 	and.w	r2, r3, #1
 80034c4:	697b      	ldr	r3, [r7, #20]
 80034c6:	fa02 f303 	lsl.w	r3, r2, r3
 80034ca:	693a      	ldr	r2, [r7, #16]
 80034cc:	4313      	orrs	r3, r2
 80034ce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	693a      	ldr	r2, [r7, #16]
 80034d4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	f003 0303 	and.w	r3, r3, #3
 80034de:	2b03      	cmp	r3, #3
 80034e0:	d017      	beq.n	8003512 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	68db      	ldr	r3, [r3, #12]
 80034e6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80034e8:	697b      	ldr	r3, [r7, #20]
 80034ea:	005b      	lsls	r3, r3, #1
 80034ec:	2203      	movs	r2, #3
 80034ee:	fa02 f303 	lsl.w	r3, r2, r3
 80034f2:	43db      	mvns	r3, r3
 80034f4:	693a      	ldr	r2, [r7, #16]
 80034f6:	4013      	ands	r3, r2
 80034f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	689a      	ldr	r2, [r3, #8]
 80034fe:	697b      	ldr	r3, [r7, #20]
 8003500:	005b      	lsls	r3, r3, #1
 8003502:	fa02 f303 	lsl.w	r3, r2, r3
 8003506:	693a      	ldr	r2, [r7, #16]
 8003508:	4313      	orrs	r3, r2
 800350a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	693a      	ldr	r2, [r7, #16]
 8003510:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	f003 0303 	and.w	r3, r3, #3
 800351a:	2b02      	cmp	r3, #2
 800351c:	d123      	bne.n	8003566 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	08da      	lsrs	r2, r3, #3
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	3208      	adds	r2, #8
 8003526:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800352a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	f003 0307 	and.w	r3, r3, #7
 8003532:	009b      	lsls	r3, r3, #2
 8003534:	220f      	movs	r2, #15
 8003536:	fa02 f303 	lsl.w	r3, r2, r3
 800353a:	43db      	mvns	r3, r3
 800353c:	693a      	ldr	r2, [r7, #16]
 800353e:	4013      	ands	r3, r2
 8003540:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	691a      	ldr	r2, [r3, #16]
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	f003 0307 	and.w	r3, r3, #7
 800354c:	009b      	lsls	r3, r3, #2
 800354e:	fa02 f303 	lsl.w	r3, r2, r3
 8003552:	693a      	ldr	r2, [r7, #16]
 8003554:	4313      	orrs	r3, r2
 8003556:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003558:	697b      	ldr	r3, [r7, #20]
 800355a:	08da      	lsrs	r2, r3, #3
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	3208      	adds	r2, #8
 8003560:	6939      	ldr	r1, [r7, #16]
 8003562:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	005b      	lsls	r3, r3, #1
 8003570:	2203      	movs	r2, #3
 8003572:	fa02 f303 	lsl.w	r3, r2, r3
 8003576:	43db      	mvns	r3, r3
 8003578:	693a      	ldr	r2, [r7, #16]
 800357a:	4013      	ands	r3, r2
 800357c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	f003 0203 	and.w	r2, r3, #3
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	005b      	lsls	r3, r3, #1
 800358a:	fa02 f303 	lsl.w	r3, r2, r3
 800358e:	693a      	ldr	r2, [r7, #16]
 8003590:	4313      	orrs	r3, r2
 8003592:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	693a      	ldr	r2, [r7, #16]
 8003598:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	f000 80b2 	beq.w	800370c <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035a8:	4b61      	ldr	r3, [pc, #388]	; (8003730 <HAL_GPIO_Init+0x2fc>)
 80035aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035ac:	4a60      	ldr	r2, [pc, #384]	; (8003730 <HAL_GPIO_Init+0x2fc>)
 80035ae:	f043 0301 	orr.w	r3, r3, #1
 80035b2:	6613      	str	r3, [r2, #96]	; 0x60
 80035b4:	4b5e      	ldr	r3, [pc, #376]	; (8003730 <HAL_GPIO_Init+0x2fc>)
 80035b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035b8:	f003 0301 	and.w	r3, r3, #1
 80035bc:	60bb      	str	r3, [r7, #8]
 80035be:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80035c0:	4a5c      	ldr	r2, [pc, #368]	; (8003734 <HAL_GPIO_Init+0x300>)
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	089b      	lsrs	r3, r3, #2
 80035c6:	3302      	adds	r3, #2
 80035c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035cc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80035ce:	697b      	ldr	r3, [r7, #20]
 80035d0:	f003 0303 	and.w	r3, r3, #3
 80035d4:	009b      	lsls	r3, r3, #2
 80035d6:	220f      	movs	r2, #15
 80035d8:	fa02 f303 	lsl.w	r3, r2, r3
 80035dc:	43db      	mvns	r3, r3
 80035de:	693a      	ldr	r2, [r7, #16]
 80035e0:	4013      	ands	r3, r2
 80035e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80035ea:	d02b      	beq.n	8003644 <HAL_GPIO_Init+0x210>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	4a52      	ldr	r2, [pc, #328]	; (8003738 <HAL_GPIO_Init+0x304>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d025      	beq.n	8003640 <HAL_GPIO_Init+0x20c>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	4a51      	ldr	r2, [pc, #324]	; (800373c <HAL_GPIO_Init+0x308>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d01f      	beq.n	800363c <HAL_GPIO_Init+0x208>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	4a50      	ldr	r2, [pc, #320]	; (8003740 <HAL_GPIO_Init+0x30c>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d019      	beq.n	8003638 <HAL_GPIO_Init+0x204>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	4a4f      	ldr	r2, [pc, #316]	; (8003744 <HAL_GPIO_Init+0x310>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d013      	beq.n	8003634 <HAL_GPIO_Init+0x200>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	4a4e      	ldr	r2, [pc, #312]	; (8003748 <HAL_GPIO_Init+0x314>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d00d      	beq.n	8003630 <HAL_GPIO_Init+0x1fc>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	4a4d      	ldr	r2, [pc, #308]	; (800374c <HAL_GPIO_Init+0x318>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d007      	beq.n	800362c <HAL_GPIO_Init+0x1f8>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	4a4c      	ldr	r2, [pc, #304]	; (8003750 <HAL_GPIO_Init+0x31c>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d101      	bne.n	8003628 <HAL_GPIO_Init+0x1f4>
 8003624:	2307      	movs	r3, #7
 8003626:	e00e      	b.n	8003646 <HAL_GPIO_Init+0x212>
 8003628:	2308      	movs	r3, #8
 800362a:	e00c      	b.n	8003646 <HAL_GPIO_Init+0x212>
 800362c:	2306      	movs	r3, #6
 800362e:	e00a      	b.n	8003646 <HAL_GPIO_Init+0x212>
 8003630:	2305      	movs	r3, #5
 8003632:	e008      	b.n	8003646 <HAL_GPIO_Init+0x212>
 8003634:	2304      	movs	r3, #4
 8003636:	e006      	b.n	8003646 <HAL_GPIO_Init+0x212>
 8003638:	2303      	movs	r3, #3
 800363a:	e004      	b.n	8003646 <HAL_GPIO_Init+0x212>
 800363c:	2302      	movs	r3, #2
 800363e:	e002      	b.n	8003646 <HAL_GPIO_Init+0x212>
 8003640:	2301      	movs	r3, #1
 8003642:	e000      	b.n	8003646 <HAL_GPIO_Init+0x212>
 8003644:	2300      	movs	r3, #0
 8003646:	697a      	ldr	r2, [r7, #20]
 8003648:	f002 0203 	and.w	r2, r2, #3
 800364c:	0092      	lsls	r2, r2, #2
 800364e:	4093      	lsls	r3, r2
 8003650:	693a      	ldr	r2, [r7, #16]
 8003652:	4313      	orrs	r3, r2
 8003654:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003656:	4937      	ldr	r1, [pc, #220]	; (8003734 <HAL_GPIO_Init+0x300>)
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	089b      	lsrs	r3, r3, #2
 800365c:	3302      	adds	r3, #2
 800365e:	693a      	ldr	r2, [r7, #16]
 8003660:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003664:	4b3b      	ldr	r3, [pc, #236]	; (8003754 <HAL_GPIO_Init+0x320>)
 8003666:	689b      	ldr	r3, [r3, #8]
 8003668:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	43db      	mvns	r3, r3
 800366e:	693a      	ldr	r2, [r7, #16]
 8003670:	4013      	ands	r3, r2
 8003672:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800367c:	2b00      	cmp	r3, #0
 800367e:	d003      	beq.n	8003688 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8003680:	693a      	ldr	r2, [r7, #16]
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	4313      	orrs	r3, r2
 8003686:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003688:	4a32      	ldr	r2, [pc, #200]	; (8003754 <HAL_GPIO_Init+0x320>)
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800368e:	4b31      	ldr	r3, [pc, #196]	; (8003754 <HAL_GPIO_Init+0x320>)
 8003690:	68db      	ldr	r3, [r3, #12]
 8003692:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	43db      	mvns	r3, r3
 8003698:	693a      	ldr	r2, [r7, #16]
 800369a:	4013      	ands	r3, r2
 800369c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d003      	beq.n	80036b2 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80036aa:	693a      	ldr	r2, [r7, #16]
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	4313      	orrs	r3, r2
 80036b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80036b2:	4a28      	ldr	r2, [pc, #160]	; (8003754 <HAL_GPIO_Init+0x320>)
 80036b4:	693b      	ldr	r3, [r7, #16]
 80036b6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80036b8:	4b26      	ldr	r3, [pc, #152]	; (8003754 <HAL_GPIO_Init+0x320>)
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	43db      	mvns	r3, r3
 80036c2:	693a      	ldr	r2, [r7, #16]
 80036c4:	4013      	ands	r3, r2
 80036c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d003      	beq.n	80036dc <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80036d4:	693a      	ldr	r2, [r7, #16]
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	4313      	orrs	r3, r2
 80036da:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80036dc:	4a1d      	ldr	r2, [pc, #116]	; (8003754 <HAL_GPIO_Init+0x320>)
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80036e2:	4b1c      	ldr	r3, [pc, #112]	; (8003754 <HAL_GPIO_Init+0x320>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	43db      	mvns	r3, r3
 80036ec:	693a      	ldr	r2, [r7, #16]
 80036ee:	4013      	ands	r3, r2
 80036f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d003      	beq.n	8003706 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80036fe:	693a      	ldr	r2, [r7, #16]
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	4313      	orrs	r3, r2
 8003704:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003706:	4a13      	ldr	r2, [pc, #76]	; (8003754 <HAL_GPIO_Init+0x320>)
 8003708:	693b      	ldr	r3, [r7, #16]
 800370a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800370c:	697b      	ldr	r3, [r7, #20]
 800370e:	3301      	adds	r3, #1
 8003710:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	681a      	ldr	r2, [r3, #0]
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	fa22 f303 	lsr.w	r3, r2, r3
 800371c:	2b00      	cmp	r3, #0
 800371e:	f47f ae91 	bne.w	8003444 <HAL_GPIO_Init+0x10>
  }
}
 8003722:	bf00      	nop
 8003724:	bf00      	nop
 8003726:	371c      	adds	r7, #28
 8003728:	46bd      	mov	sp, r7
 800372a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372e:	4770      	bx	lr
 8003730:	40021000 	.word	0x40021000
 8003734:	40010000 	.word	0x40010000
 8003738:	48000400 	.word	0x48000400
 800373c:	48000800 	.word	0x48000800
 8003740:	48000c00 	.word	0x48000c00
 8003744:	48001000 	.word	0x48001000
 8003748:	48001400 	.word	0x48001400
 800374c:	48001800 	.word	0x48001800
 8003750:	48001c00 	.word	0x48001c00
 8003754:	40010400 	.word	0x40010400

08003758 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003758:	b480      	push	{r7}
 800375a:	b085      	sub	sp, #20
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
 8003760:	460b      	mov	r3, r1
 8003762:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	691a      	ldr	r2, [r3, #16]
 8003768:	887b      	ldrh	r3, [r7, #2]
 800376a:	4013      	ands	r3, r2
 800376c:	2b00      	cmp	r3, #0
 800376e:	d002      	beq.n	8003776 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003770:	2301      	movs	r3, #1
 8003772:	73fb      	strb	r3, [r7, #15]
 8003774:	e001      	b.n	800377a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003776:	2300      	movs	r3, #0
 8003778:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800377a:	7bfb      	ldrb	r3, [r7, #15]
}
 800377c:	4618      	mov	r0, r3
 800377e:	3714      	adds	r7, #20
 8003780:	46bd      	mov	sp, r7
 8003782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003786:	4770      	bx	lr

08003788 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003788:	b480      	push	{r7}
 800378a:	b083      	sub	sp, #12
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
 8003790:	460b      	mov	r3, r1
 8003792:	807b      	strh	r3, [r7, #2]
 8003794:	4613      	mov	r3, r2
 8003796:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003798:	787b      	ldrb	r3, [r7, #1]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d003      	beq.n	80037a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800379e:	887a      	ldrh	r2, [r7, #2]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80037a4:	e002      	b.n	80037ac <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80037a6:	887a      	ldrh	r2, [r7, #2]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	629a      	str	r2, [r3, #40]	; 0x28
}
 80037ac:	bf00      	nop
 80037ae:	370c      	adds	r7, #12
 80037b0:	46bd      	mov	sp, r7
 80037b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b6:	4770      	bx	lr

080037b8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b082      	sub	sp, #8
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d101      	bne.n	80037ca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
 80037c8:	e081      	b.n	80038ce <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037d0:	b2db      	uxtb	r3, r3
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d106      	bne.n	80037e4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2200      	movs	r2, #0
 80037da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80037de:	6878      	ldr	r0, [r7, #4]
 80037e0:	f7fd fbb6 	bl	8000f50 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2224      	movs	r2, #36	; 0x24
 80037e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	681a      	ldr	r2, [r3, #0]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f022 0201 	bic.w	r2, r2, #1
 80037fa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	685a      	ldr	r2, [r3, #4]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003808:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	689a      	ldr	r2, [r3, #8]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003818:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	68db      	ldr	r3, [r3, #12]
 800381e:	2b01      	cmp	r3, #1
 8003820:	d107      	bne.n	8003832 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	689a      	ldr	r2, [r3, #8]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800382e:	609a      	str	r2, [r3, #8]
 8003830:	e006      	b.n	8003840 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	689a      	ldr	r2, [r3, #8]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800383e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	68db      	ldr	r3, [r3, #12]
 8003844:	2b02      	cmp	r3, #2
 8003846:	d104      	bne.n	8003852 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003850:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	687a      	ldr	r2, [r7, #4]
 800385a:	6812      	ldr	r2, [r2, #0]
 800385c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003860:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003864:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	68da      	ldr	r2, [r3, #12]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003874:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	691a      	ldr	r2, [r3, #16]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	695b      	ldr	r3, [r3, #20]
 800387e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	699b      	ldr	r3, [r3, #24]
 8003886:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	430a      	orrs	r2, r1
 800388e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	69d9      	ldr	r1, [r3, #28]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6a1a      	ldr	r2, [r3, #32]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	430a      	orrs	r2, r1
 800389e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	681a      	ldr	r2, [r3, #0]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f042 0201 	orr.w	r2, r2, #1
 80038ae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2200      	movs	r2, #0
 80038b4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2220      	movs	r2, #32
 80038ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2200      	movs	r2, #0
 80038c2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2200      	movs	r2, #0
 80038c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80038cc:	2300      	movs	r3, #0
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	3708      	adds	r7, #8
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}

080038d6 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80038d6:	b480      	push	{r7}
 80038d8:	b083      	sub	sp, #12
 80038da:	af00      	add	r7, sp, #0
 80038dc:	6078      	str	r0, [r7, #4]
 80038de:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038e6:	b2db      	uxtb	r3, r3
 80038e8:	2b20      	cmp	r3, #32
 80038ea:	d138      	bne.n	800395e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80038f2:	2b01      	cmp	r3, #1
 80038f4:	d101      	bne.n	80038fa <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80038f6:	2302      	movs	r3, #2
 80038f8:	e032      	b.n	8003960 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2201      	movs	r2, #1
 80038fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2224      	movs	r2, #36	; 0x24
 8003906:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	681a      	ldr	r2, [r3, #0]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f022 0201 	bic.w	r2, r2, #1
 8003918:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	681a      	ldr	r2, [r3, #0]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003928:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	6819      	ldr	r1, [r3, #0]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	683a      	ldr	r2, [r7, #0]
 8003936:	430a      	orrs	r2, r1
 8003938:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	681a      	ldr	r2, [r3, #0]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f042 0201 	orr.w	r2, r2, #1
 8003948:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2220      	movs	r2, #32
 800394e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2200      	movs	r2, #0
 8003956:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800395a:	2300      	movs	r3, #0
 800395c:	e000      	b.n	8003960 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800395e:	2302      	movs	r3, #2
  }
}
 8003960:	4618      	mov	r0, r3
 8003962:	370c      	adds	r7, #12
 8003964:	46bd      	mov	sp, r7
 8003966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396a:	4770      	bx	lr

0800396c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800396c:	b480      	push	{r7}
 800396e:	b085      	sub	sp, #20
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
 8003974:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800397c:	b2db      	uxtb	r3, r3
 800397e:	2b20      	cmp	r3, #32
 8003980:	d139      	bne.n	80039f6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003988:	2b01      	cmp	r3, #1
 800398a:	d101      	bne.n	8003990 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800398c:	2302      	movs	r3, #2
 800398e:	e033      	b.n	80039f8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2201      	movs	r2, #1
 8003994:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2224      	movs	r2, #36	; 0x24
 800399c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	681a      	ldr	r2, [r3, #0]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f022 0201 	bic.w	r2, r2, #1
 80039ae:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80039be:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	021b      	lsls	r3, r3, #8
 80039c4:	68fa      	ldr	r2, [r7, #12]
 80039c6:	4313      	orrs	r3, r2
 80039c8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	68fa      	ldr	r2, [r7, #12]
 80039d0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	681a      	ldr	r2, [r3, #0]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f042 0201 	orr.w	r2, r2, #1
 80039e0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2220      	movs	r2, #32
 80039e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2200      	movs	r2, #0
 80039ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80039f2:	2300      	movs	r3, #0
 80039f4:	e000      	b.n	80039f8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80039f6:	2302      	movs	r3, #2
  }
}
 80039f8:	4618      	mov	r0, r3
 80039fa:	3714      	adds	r7, #20
 80039fc:	46bd      	mov	sp, r7
 80039fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a02:	4770      	bx	lr

08003a04 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003a04:	b480      	push	{r7}
 8003a06:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003a08:	4b0d      	ldr	r3, [pc, #52]	; (8003a40 <HAL_PWREx_GetVoltageRange+0x3c>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003a10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a14:	d102      	bne.n	8003a1c <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8003a16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003a1a:	e00b      	b.n	8003a34 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8003a1c:	4b08      	ldr	r3, [pc, #32]	; (8003a40 <HAL_PWREx_GetVoltageRange+0x3c>)
 8003a1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a2a:	d102      	bne.n	8003a32 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8003a2c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003a30:	e000      	b.n	8003a34 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8003a32:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8003a34:	4618      	mov	r0, r3
 8003a36:	46bd      	mov	sp, r7
 8003a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3c:	4770      	bx	lr
 8003a3e:	bf00      	nop
 8003a40:	40007000 	.word	0x40007000

08003a44 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003a44:	b480      	push	{r7}
 8003a46:	b085      	sub	sp, #20
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d141      	bne.n	8003ad6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003a52:	4b4b      	ldr	r3, [pc, #300]	; (8003b80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003a5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a5e:	d131      	bne.n	8003ac4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003a60:	4b47      	ldr	r3, [pc, #284]	; (8003b80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a62:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a66:	4a46      	ldr	r2, [pc, #280]	; (8003b80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a6c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003a70:	4b43      	ldr	r3, [pc, #268]	; (8003b80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003a78:	4a41      	ldr	r2, [pc, #260]	; (8003b80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a7a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003a7e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003a80:	4b40      	ldr	r3, [pc, #256]	; (8003b84 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	2232      	movs	r2, #50	; 0x32
 8003a86:	fb02 f303 	mul.w	r3, r2, r3
 8003a8a:	4a3f      	ldr	r2, [pc, #252]	; (8003b88 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003a8c:	fba2 2303 	umull	r2, r3, r2, r3
 8003a90:	0c9b      	lsrs	r3, r3, #18
 8003a92:	3301      	adds	r3, #1
 8003a94:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003a96:	e002      	b.n	8003a9e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	3b01      	subs	r3, #1
 8003a9c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003a9e:	4b38      	ldr	r3, [pc, #224]	; (8003b80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003aa0:	695b      	ldr	r3, [r3, #20]
 8003aa2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003aa6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003aaa:	d102      	bne.n	8003ab2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d1f2      	bne.n	8003a98 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003ab2:	4b33      	ldr	r3, [pc, #204]	; (8003b80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ab4:	695b      	ldr	r3, [r3, #20]
 8003ab6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003aba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003abe:	d158      	bne.n	8003b72 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003ac0:	2303      	movs	r3, #3
 8003ac2:	e057      	b.n	8003b74 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003ac4:	4b2e      	ldr	r3, [pc, #184]	; (8003b80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ac6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003aca:	4a2d      	ldr	r2, [pc, #180]	; (8003b80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003acc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ad0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003ad4:	e04d      	b.n	8003b72 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003adc:	d141      	bne.n	8003b62 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003ade:	4b28      	ldr	r3, [pc, #160]	; (8003b80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003ae6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003aea:	d131      	bne.n	8003b50 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003aec:	4b24      	ldr	r3, [pc, #144]	; (8003b80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003aee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003af2:	4a23      	ldr	r2, [pc, #140]	; (8003b80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003af4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003af8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003afc:	4b20      	ldr	r3, [pc, #128]	; (8003b80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003b04:	4a1e      	ldr	r2, [pc, #120]	; (8003b80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b06:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003b0a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003b0c:	4b1d      	ldr	r3, [pc, #116]	; (8003b84 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	2232      	movs	r2, #50	; 0x32
 8003b12:	fb02 f303 	mul.w	r3, r2, r3
 8003b16:	4a1c      	ldr	r2, [pc, #112]	; (8003b88 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003b18:	fba2 2303 	umull	r2, r3, r2, r3
 8003b1c:	0c9b      	lsrs	r3, r3, #18
 8003b1e:	3301      	adds	r3, #1
 8003b20:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003b22:	e002      	b.n	8003b2a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	3b01      	subs	r3, #1
 8003b28:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003b2a:	4b15      	ldr	r3, [pc, #84]	; (8003b80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b2c:	695b      	ldr	r3, [r3, #20]
 8003b2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b36:	d102      	bne.n	8003b3e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d1f2      	bne.n	8003b24 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003b3e:	4b10      	ldr	r3, [pc, #64]	; (8003b80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b40:	695b      	ldr	r3, [r3, #20]
 8003b42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b4a:	d112      	bne.n	8003b72 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003b4c:	2303      	movs	r3, #3
 8003b4e:	e011      	b.n	8003b74 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003b50:	4b0b      	ldr	r3, [pc, #44]	; (8003b80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b56:	4a0a      	ldr	r2, [pc, #40]	; (8003b80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b5c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003b60:	e007      	b.n	8003b72 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003b62:	4b07      	ldr	r3, [pc, #28]	; (8003b80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003b6a:	4a05      	ldr	r2, [pc, #20]	; (8003b80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b6c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003b70:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003b72:	2300      	movs	r3, #0
}
 8003b74:	4618      	mov	r0, r3
 8003b76:	3714      	adds	r7, #20
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7e:	4770      	bx	lr
 8003b80:	40007000 	.word	0x40007000
 8003b84:	20000004 	.word	0x20000004
 8003b88:	431bde83 	.word	0x431bde83

08003b8c <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8003b90:	4b05      	ldr	r3, [pc, #20]	; (8003ba8 <HAL_PWREx_EnableVddIO2+0x1c>)
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	4a04      	ldr	r2, [pc, #16]	; (8003ba8 <HAL_PWREx_EnableVddIO2+0x1c>)
 8003b96:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003b9a:	6053      	str	r3, [r2, #4]
}
 8003b9c:	bf00      	nop
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba4:	4770      	bx	lr
 8003ba6:	bf00      	nop
 8003ba8:	40007000 	.word	0x40007000

08003bac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b088      	sub	sp, #32
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d102      	bne.n	8003bc0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	f000 bc08 	b.w	80043d0 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003bc0:	4b96      	ldr	r3, [pc, #600]	; (8003e1c <HAL_RCC_OscConfig+0x270>)
 8003bc2:	689b      	ldr	r3, [r3, #8]
 8003bc4:	f003 030c 	and.w	r3, r3, #12
 8003bc8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003bca:	4b94      	ldr	r3, [pc, #592]	; (8003e1c <HAL_RCC_OscConfig+0x270>)
 8003bcc:	68db      	ldr	r3, [r3, #12]
 8003bce:	f003 0303 	and.w	r3, r3, #3
 8003bd2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f003 0310 	and.w	r3, r3, #16
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	f000 80e4 	beq.w	8003daa <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003be2:	69bb      	ldr	r3, [r7, #24]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d007      	beq.n	8003bf8 <HAL_RCC_OscConfig+0x4c>
 8003be8:	69bb      	ldr	r3, [r7, #24]
 8003bea:	2b0c      	cmp	r3, #12
 8003bec:	f040 808b 	bne.w	8003d06 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003bf0:	697b      	ldr	r3, [r7, #20]
 8003bf2:	2b01      	cmp	r3, #1
 8003bf4:	f040 8087 	bne.w	8003d06 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003bf8:	4b88      	ldr	r3, [pc, #544]	; (8003e1c <HAL_RCC_OscConfig+0x270>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f003 0302 	and.w	r3, r3, #2
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d005      	beq.n	8003c10 <HAL_RCC_OscConfig+0x64>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	699b      	ldr	r3, [r3, #24]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d101      	bne.n	8003c10 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	e3df      	b.n	80043d0 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6a1a      	ldr	r2, [r3, #32]
 8003c14:	4b81      	ldr	r3, [pc, #516]	; (8003e1c <HAL_RCC_OscConfig+0x270>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f003 0308 	and.w	r3, r3, #8
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d004      	beq.n	8003c2a <HAL_RCC_OscConfig+0x7e>
 8003c20:	4b7e      	ldr	r3, [pc, #504]	; (8003e1c <HAL_RCC_OscConfig+0x270>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c28:	e005      	b.n	8003c36 <HAL_RCC_OscConfig+0x8a>
 8003c2a:	4b7c      	ldr	r3, [pc, #496]	; (8003e1c <HAL_RCC_OscConfig+0x270>)
 8003c2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c30:	091b      	lsrs	r3, r3, #4
 8003c32:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d223      	bcs.n	8003c82 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6a1b      	ldr	r3, [r3, #32]
 8003c3e:	4618      	mov	r0, r3
 8003c40:	f000 fdfc 	bl	800483c <RCC_SetFlashLatencyFromMSIRange>
 8003c44:	4603      	mov	r3, r0
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d001      	beq.n	8003c4e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	e3c0      	b.n	80043d0 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003c4e:	4b73      	ldr	r3, [pc, #460]	; (8003e1c <HAL_RCC_OscConfig+0x270>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a72      	ldr	r2, [pc, #456]	; (8003e1c <HAL_RCC_OscConfig+0x270>)
 8003c54:	f043 0308 	orr.w	r3, r3, #8
 8003c58:	6013      	str	r3, [r2, #0]
 8003c5a:	4b70      	ldr	r3, [pc, #448]	; (8003e1c <HAL_RCC_OscConfig+0x270>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6a1b      	ldr	r3, [r3, #32]
 8003c66:	496d      	ldr	r1, [pc, #436]	; (8003e1c <HAL_RCC_OscConfig+0x270>)
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003c6c:	4b6b      	ldr	r3, [pc, #428]	; (8003e1c <HAL_RCC_OscConfig+0x270>)
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	69db      	ldr	r3, [r3, #28]
 8003c78:	021b      	lsls	r3, r3, #8
 8003c7a:	4968      	ldr	r1, [pc, #416]	; (8003e1c <HAL_RCC_OscConfig+0x270>)
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	604b      	str	r3, [r1, #4]
 8003c80:	e025      	b.n	8003cce <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003c82:	4b66      	ldr	r3, [pc, #408]	; (8003e1c <HAL_RCC_OscConfig+0x270>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4a65      	ldr	r2, [pc, #404]	; (8003e1c <HAL_RCC_OscConfig+0x270>)
 8003c88:	f043 0308 	orr.w	r3, r3, #8
 8003c8c:	6013      	str	r3, [r2, #0]
 8003c8e:	4b63      	ldr	r3, [pc, #396]	; (8003e1c <HAL_RCC_OscConfig+0x270>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6a1b      	ldr	r3, [r3, #32]
 8003c9a:	4960      	ldr	r1, [pc, #384]	; (8003e1c <HAL_RCC_OscConfig+0x270>)
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003ca0:	4b5e      	ldr	r3, [pc, #376]	; (8003e1c <HAL_RCC_OscConfig+0x270>)
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	69db      	ldr	r3, [r3, #28]
 8003cac:	021b      	lsls	r3, r3, #8
 8003cae:	495b      	ldr	r1, [pc, #364]	; (8003e1c <HAL_RCC_OscConfig+0x270>)
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003cb4:	69bb      	ldr	r3, [r7, #24]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d109      	bne.n	8003cce <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6a1b      	ldr	r3, [r3, #32]
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	f000 fdbc 	bl	800483c <RCC_SetFlashLatencyFromMSIRange>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d001      	beq.n	8003cce <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	e380      	b.n	80043d0 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003cce:	f000 fcc1 	bl	8004654 <HAL_RCC_GetSysClockFreq>
 8003cd2:	4602      	mov	r2, r0
 8003cd4:	4b51      	ldr	r3, [pc, #324]	; (8003e1c <HAL_RCC_OscConfig+0x270>)
 8003cd6:	689b      	ldr	r3, [r3, #8]
 8003cd8:	091b      	lsrs	r3, r3, #4
 8003cda:	f003 030f 	and.w	r3, r3, #15
 8003cde:	4950      	ldr	r1, [pc, #320]	; (8003e20 <HAL_RCC_OscConfig+0x274>)
 8003ce0:	5ccb      	ldrb	r3, [r1, r3]
 8003ce2:	f003 031f 	and.w	r3, r3, #31
 8003ce6:	fa22 f303 	lsr.w	r3, r2, r3
 8003cea:	4a4e      	ldr	r2, [pc, #312]	; (8003e24 <HAL_RCC_OscConfig+0x278>)
 8003cec:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003cee:	4b4e      	ldr	r3, [pc, #312]	; (8003e28 <HAL_RCC_OscConfig+0x27c>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	f7fd fb26 	bl	8001344 <HAL_InitTick>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003cfc:	7bfb      	ldrb	r3, [r7, #15]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d052      	beq.n	8003da8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003d02:	7bfb      	ldrb	r3, [r7, #15]
 8003d04:	e364      	b.n	80043d0 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	699b      	ldr	r3, [r3, #24]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d032      	beq.n	8003d74 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003d0e:	4b43      	ldr	r3, [pc, #268]	; (8003e1c <HAL_RCC_OscConfig+0x270>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4a42      	ldr	r2, [pc, #264]	; (8003e1c <HAL_RCC_OscConfig+0x270>)
 8003d14:	f043 0301 	orr.w	r3, r3, #1
 8003d18:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003d1a:	f7fd fc33 	bl	8001584 <HAL_GetTick>
 8003d1e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003d20:	e008      	b.n	8003d34 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003d22:	f7fd fc2f 	bl	8001584 <HAL_GetTick>
 8003d26:	4602      	mov	r2, r0
 8003d28:	693b      	ldr	r3, [r7, #16]
 8003d2a:	1ad3      	subs	r3, r2, r3
 8003d2c:	2b02      	cmp	r3, #2
 8003d2e:	d901      	bls.n	8003d34 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003d30:	2303      	movs	r3, #3
 8003d32:	e34d      	b.n	80043d0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003d34:	4b39      	ldr	r3, [pc, #228]	; (8003e1c <HAL_RCC_OscConfig+0x270>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f003 0302 	and.w	r3, r3, #2
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d0f0      	beq.n	8003d22 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003d40:	4b36      	ldr	r3, [pc, #216]	; (8003e1c <HAL_RCC_OscConfig+0x270>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a35      	ldr	r2, [pc, #212]	; (8003e1c <HAL_RCC_OscConfig+0x270>)
 8003d46:	f043 0308 	orr.w	r3, r3, #8
 8003d4a:	6013      	str	r3, [r2, #0]
 8003d4c:	4b33      	ldr	r3, [pc, #204]	; (8003e1c <HAL_RCC_OscConfig+0x270>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6a1b      	ldr	r3, [r3, #32]
 8003d58:	4930      	ldr	r1, [pc, #192]	; (8003e1c <HAL_RCC_OscConfig+0x270>)
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003d5e:	4b2f      	ldr	r3, [pc, #188]	; (8003e1c <HAL_RCC_OscConfig+0x270>)
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	69db      	ldr	r3, [r3, #28]
 8003d6a:	021b      	lsls	r3, r3, #8
 8003d6c:	492b      	ldr	r1, [pc, #172]	; (8003e1c <HAL_RCC_OscConfig+0x270>)
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	604b      	str	r3, [r1, #4]
 8003d72:	e01a      	b.n	8003daa <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003d74:	4b29      	ldr	r3, [pc, #164]	; (8003e1c <HAL_RCC_OscConfig+0x270>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a28      	ldr	r2, [pc, #160]	; (8003e1c <HAL_RCC_OscConfig+0x270>)
 8003d7a:	f023 0301 	bic.w	r3, r3, #1
 8003d7e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003d80:	f7fd fc00 	bl	8001584 <HAL_GetTick>
 8003d84:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003d86:	e008      	b.n	8003d9a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003d88:	f7fd fbfc 	bl	8001584 <HAL_GetTick>
 8003d8c:	4602      	mov	r2, r0
 8003d8e:	693b      	ldr	r3, [r7, #16]
 8003d90:	1ad3      	subs	r3, r2, r3
 8003d92:	2b02      	cmp	r3, #2
 8003d94:	d901      	bls.n	8003d9a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003d96:	2303      	movs	r3, #3
 8003d98:	e31a      	b.n	80043d0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003d9a:	4b20      	ldr	r3, [pc, #128]	; (8003e1c <HAL_RCC_OscConfig+0x270>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f003 0302 	and.w	r3, r3, #2
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d1f0      	bne.n	8003d88 <HAL_RCC_OscConfig+0x1dc>
 8003da6:	e000      	b.n	8003daa <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003da8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f003 0301 	and.w	r3, r3, #1
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d073      	beq.n	8003e9e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003db6:	69bb      	ldr	r3, [r7, #24]
 8003db8:	2b08      	cmp	r3, #8
 8003dba:	d005      	beq.n	8003dc8 <HAL_RCC_OscConfig+0x21c>
 8003dbc:	69bb      	ldr	r3, [r7, #24]
 8003dbe:	2b0c      	cmp	r3, #12
 8003dc0:	d10e      	bne.n	8003de0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003dc2:	697b      	ldr	r3, [r7, #20]
 8003dc4:	2b03      	cmp	r3, #3
 8003dc6:	d10b      	bne.n	8003de0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003dc8:	4b14      	ldr	r3, [pc, #80]	; (8003e1c <HAL_RCC_OscConfig+0x270>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d063      	beq.n	8003e9c <HAL_RCC_OscConfig+0x2f0>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d15f      	bne.n	8003e9c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003ddc:	2301      	movs	r3, #1
 8003dde:	e2f7      	b.n	80043d0 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003de8:	d106      	bne.n	8003df8 <HAL_RCC_OscConfig+0x24c>
 8003dea:	4b0c      	ldr	r3, [pc, #48]	; (8003e1c <HAL_RCC_OscConfig+0x270>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4a0b      	ldr	r2, [pc, #44]	; (8003e1c <HAL_RCC_OscConfig+0x270>)
 8003df0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003df4:	6013      	str	r3, [r2, #0]
 8003df6:	e025      	b.n	8003e44 <HAL_RCC_OscConfig+0x298>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e00:	d114      	bne.n	8003e2c <HAL_RCC_OscConfig+0x280>
 8003e02:	4b06      	ldr	r3, [pc, #24]	; (8003e1c <HAL_RCC_OscConfig+0x270>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4a05      	ldr	r2, [pc, #20]	; (8003e1c <HAL_RCC_OscConfig+0x270>)
 8003e08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e0c:	6013      	str	r3, [r2, #0]
 8003e0e:	4b03      	ldr	r3, [pc, #12]	; (8003e1c <HAL_RCC_OscConfig+0x270>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4a02      	ldr	r2, [pc, #8]	; (8003e1c <HAL_RCC_OscConfig+0x270>)
 8003e14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e18:	6013      	str	r3, [r2, #0]
 8003e1a:	e013      	b.n	8003e44 <HAL_RCC_OscConfig+0x298>
 8003e1c:	40021000 	.word	0x40021000
 8003e20:	0800d74c 	.word	0x0800d74c
 8003e24:	20000004 	.word	0x20000004
 8003e28:	20000008 	.word	0x20000008
 8003e2c:	4ba0      	ldr	r3, [pc, #640]	; (80040b0 <HAL_RCC_OscConfig+0x504>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a9f      	ldr	r2, [pc, #636]	; (80040b0 <HAL_RCC_OscConfig+0x504>)
 8003e32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e36:	6013      	str	r3, [r2, #0]
 8003e38:	4b9d      	ldr	r3, [pc, #628]	; (80040b0 <HAL_RCC_OscConfig+0x504>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a9c      	ldr	r2, [pc, #624]	; (80040b0 <HAL_RCC_OscConfig+0x504>)
 8003e3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d013      	beq.n	8003e74 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e4c:	f7fd fb9a 	bl	8001584 <HAL_GetTick>
 8003e50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e52:	e008      	b.n	8003e66 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e54:	f7fd fb96 	bl	8001584 <HAL_GetTick>
 8003e58:	4602      	mov	r2, r0
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	1ad3      	subs	r3, r2, r3
 8003e5e:	2b64      	cmp	r3, #100	; 0x64
 8003e60:	d901      	bls.n	8003e66 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003e62:	2303      	movs	r3, #3
 8003e64:	e2b4      	b.n	80043d0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e66:	4b92      	ldr	r3, [pc, #584]	; (80040b0 <HAL_RCC_OscConfig+0x504>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d0f0      	beq.n	8003e54 <HAL_RCC_OscConfig+0x2a8>
 8003e72:	e014      	b.n	8003e9e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e74:	f7fd fb86 	bl	8001584 <HAL_GetTick>
 8003e78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003e7a:	e008      	b.n	8003e8e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e7c:	f7fd fb82 	bl	8001584 <HAL_GetTick>
 8003e80:	4602      	mov	r2, r0
 8003e82:	693b      	ldr	r3, [r7, #16]
 8003e84:	1ad3      	subs	r3, r2, r3
 8003e86:	2b64      	cmp	r3, #100	; 0x64
 8003e88:	d901      	bls.n	8003e8e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003e8a:	2303      	movs	r3, #3
 8003e8c:	e2a0      	b.n	80043d0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003e8e:	4b88      	ldr	r3, [pc, #544]	; (80040b0 <HAL_RCC_OscConfig+0x504>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d1f0      	bne.n	8003e7c <HAL_RCC_OscConfig+0x2d0>
 8003e9a:	e000      	b.n	8003e9e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f003 0302 	and.w	r3, r3, #2
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d060      	beq.n	8003f6c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003eaa:	69bb      	ldr	r3, [r7, #24]
 8003eac:	2b04      	cmp	r3, #4
 8003eae:	d005      	beq.n	8003ebc <HAL_RCC_OscConfig+0x310>
 8003eb0:	69bb      	ldr	r3, [r7, #24]
 8003eb2:	2b0c      	cmp	r3, #12
 8003eb4:	d119      	bne.n	8003eea <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003eb6:	697b      	ldr	r3, [r7, #20]
 8003eb8:	2b02      	cmp	r3, #2
 8003eba:	d116      	bne.n	8003eea <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ebc:	4b7c      	ldr	r3, [pc, #496]	; (80040b0 <HAL_RCC_OscConfig+0x504>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d005      	beq.n	8003ed4 <HAL_RCC_OscConfig+0x328>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	68db      	ldr	r3, [r3, #12]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d101      	bne.n	8003ed4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	e27d      	b.n	80043d0 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ed4:	4b76      	ldr	r3, [pc, #472]	; (80040b0 <HAL_RCC_OscConfig+0x504>)
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	691b      	ldr	r3, [r3, #16]
 8003ee0:	061b      	lsls	r3, r3, #24
 8003ee2:	4973      	ldr	r1, [pc, #460]	; (80040b0 <HAL_RCC_OscConfig+0x504>)
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ee8:	e040      	b.n	8003f6c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	68db      	ldr	r3, [r3, #12]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d023      	beq.n	8003f3a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ef2:	4b6f      	ldr	r3, [pc, #444]	; (80040b0 <HAL_RCC_OscConfig+0x504>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a6e      	ldr	r2, [pc, #440]	; (80040b0 <HAL_RCC_OscConfig+0x504>)
 8003ef8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003efc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003efe:	f7fd fb41 	bl	8001584 <HAL_GetTick>
 8003f02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f04:	e008      	b.n	8003f18 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f06:	f7fd fb3d 	bl	8001584 <HAL_GetTick>
 8003f0a:	4602      	mov	r2, r0
 8003f0c:	693b      	ldr	r3, [r7, #16]
 8003f0e:	1ad3      	subs	r3, r2, r3
 8003f10:	2b02      	cmp	r3, #2
 8003f12:	d901      	bls.n	8003f18 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003f14:	2303      	movs	r3, #3
 8003f16:	e25b      	b.n	80043d0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f18:	4b65      	ldr	r3, [pc, #404]	; (80040b0 <HAL_RCC_OscConfig+0x504>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d0f0      	beq.n	8003f06 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f24:	4b62      	ldr	r3, [pc, #392]	; (80040b0 <HAL_RCC_OscConfig+0x504>)
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	691b      	ldr	r3, [r3, #16]
 8003f30:	061b      	lsls	r3, r3, #24
 8003f32:	495f      	ldr	r1, [pc, #380]	; (80040b0 <HAL_RCC_OscConfig+0x504>)
 8003f34:	4313      	orrs	r3, r2
 8003f36:	604b      	str	r3, [r1, #4]
 8003f38:	e018      	b.n	8003f6c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f3a:	4b5d      	ldr	r3, [pc, #372]	; (80040b0 <HAL_RCC_OscConfig+0x504>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a5c      	ldr	r2, [pc, #368]	; (80040b0 <HAL_RCC_OscConfig+0x504>)
 8003f40:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f46:	f7fd fb1d 	bl	8001584 <HAL_GetTick>
 8003f4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003f4c:	e008      	b.n	8003f60 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f4e:	f7fd fb19 	bl	8001584 <HAL_GetTick>
 8003f52:	4602      	mov	r2, r0
 8003f54:	693b      	ldr	r3, [r7, #16]
 8003f56:	1ad3      	subs	r3, r2, r3
 8003f58:	2b02      	cmp	r3, #2
 8003f5a:	d901      	bls.n	8003f60 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003f5c:	2303      	movs	r3, #3
 8003f5e:	e237      	b.n	80043d0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003f60:	4b53      	ldr	r3, [pc, #332]	; (80040b0 <HAL_RCC_OscConfig+0x504>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d1f0      	bne.n	8003f4e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f003 0308 	and.w	r3, r3, #8
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d03c      	beq.n	8003ff2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	695b      	ldr	r3, [r3, #20]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d01c      	beq.n	8003fba <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f80:	4b4b      	ldr	r3, [pc, #300]	; (80040b0 <HAL_RCC_OscConfig+0x504>)
 8003f82:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f86:	4a4a      	ldr	r2, [pc, #296]	; (80040b0 <HAL_RCC_OscConfig+0x504>)
 8003f88:	f043 0301 	orr.w	r3, r3, #1
 8003f8c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f90:	f7fd faf8 	bl	8001584 <HAL_GetTick>
 8003f94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003f96:	e008      	b.n	8003faa <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f98:	f7fd faf4 	bl	8001584 <HAL_GetTick>
 8003f9c:	4602      	mov	r2, r0
 8003f9e:	693b      	ldr	r3, [r7, #16]
 8003fa0:	1ad3      	subs	r3, r2, r3
 8003fa2:	2b02      	cmp	r3, #2
 8003fa4:	d901      	bls.n	8003faa <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003fa6:	2303      	movs	r3, #3
 8003fa8:	e212      	b.n	80043d0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003faa:	4b41      	ldr	r3, [pc, #260]	; (80040b0 <HAL_RCC_OscConfig+0x504>)
 8003fac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003fb0:	f003 0302 	and.w	r3, r3, #2
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d0ef      	beq.n	8003f98 <HAL_RCC_OscConfig+0x3ec>
 8003fb8:	e01b      	b.n	8003ff2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003fba:	4b3d      	ldr	r3, [pc, #244]	; (80040b0 <HAL_RCC_OscConfig+0x504>)
 8003fbc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003fc0:	4a3b      	ldr	r2, [pc, #236]	; (80040b0 <HAL_RCC_OscConfig+0x504>)
 8003fc2:	f023 0301 	bic.w	r3, r3, #1
 8003fc6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fca:	f7fd fadb 	bl	8001584 <HAL_GetTick>
 8003fce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003fd0:	e008      	b.n	8003fe4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003fd2:	f7fd fad7 	bl	8001584 <HAL_GetTick>
 8003fd6:	4602      	mov	r2, r0
 8003fd8:	693b      	ldr	r3, [r7, #16]
 8003fda:	1ad3      	subs	r3, r2, r3
 8003fdc:	2b02      	cmp	r3, #2
 8003fde:	d901      	bls.n	8003fe4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003fe0:	2303      	movs	r3, #3
 8003fe2:	e1f5      	b.n	80043d0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003fe4:	4b32      	ldr	r3, [pc, #200]	; (80040b0 <HAL_RCC_OscConfig+0x504>)
 8003fe6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003fea:	f003 0302 	and.w	r3, r3, #2
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d1ef      	bne.n	8003fd2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f003 0304 	and.w	r3, r3, #4
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	f000 80a6 	beq.w	800414c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004000:	2300      	movs	r3, #0
 8004002:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004004:	4b2a      	ldr	r3, [pc, #168]	; (80040b0 <HAL_RCC_OscConfig+0x504>)
 8004006:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004008:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800400c:	2b00      	cmp	r3, #0
 800400e:	d10d      	bne.n	800402c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004010:	4b27      	ldr	r3, [pc, #156]	; (80040b0 <HAL_RCC_OscConfig+0x504>)
 8004012:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004014:	4a26      	ldr	r2, [pc, #152]	; (80040b0 <HAL_RCC_OscConfig+0x504>)
 8004016:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800401a:	6593      	str	r3, [r2, #88]	; 0x58
 800401c:	4b24      	ldr	r3, [pc, #144]	; (80040b0 <HAL_RCC_OscConfig+0x504>)
 800401e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004020:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004024:	60bb      	str	r3, [r7, #8]
 8004026:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004028:	2301      	movs	r3, #1
 800402a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800402c:	4b21      	ldr	r3, [pc, #132]	; (80040b4 <HAL_RCC_OscConfig+0x508>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004034:	2b00      	cmp	r3, #0
 8004036:	d118      	bne.n	800406a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004038:	4b1e      	ldr	r3, [pc, #120]	; (80040b4 <HAL_RCC_OscConfig+0x508>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a1d      	ldr	r2, [pc, #116]	; (80040b4 <HAL_RCC_OscConfig+0x508>)
 800403e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004042:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004044:	f7fd fa9e 	bl	8001584 <HAL_GetTick>
 8004048:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800404a:	e008      	b.n	800405e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800404c:	f7fd fa9a 	bl	8001584 <HAL_GetTick>
 8004050:	4602      	mov	r2, r0
 8004052:	693b      	ldr	r3, [r7, #16]
 8004054:	1ad3      	subs	r3, r2, r3
 8004056:	2b02      	cmp	r3, #2
 8004058:	d901      	bls.n	800405e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800405a:	2303      	movs	r3, #3
 800405c:	e1b8      	b.n	80043d0 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800405e:	4b15      	ldr	r3, [pc, #84]	; (80040b4 <HAL_RCC_OscConfig+0x508>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004066:	2b00      	cmp	r3, #0
 8004068:	d0f0      	beq.n	800404c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	689b      	ldr	r3, [r3, #8]
 800406e:	2b01      	cmp	r3, #1
 8004070:	d108      	bne.n	8004084 <HAL_RCC_OscConfig+0x4d8>
 8004072:	4b0f      	ldr	r3, [pc, #60]	; (80040b0 <HAL_RCC_OscConfig+0x504>)
 8004074:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004078:	4a0d      	ldr	r2, [pc, #52]	; (80040b0 <HAL_RCC_OscConfig+0x504>)
 800407a:	f043 0301 	orr.w	r3, r3, #1
 800407e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004082:	e029      	b.n	80040d8 <HAL_RCC_OscConfig+0x52c>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	689b      	ldr	r3, [r3, #8]
 8004088:	2b05      	cmp	r3, #5
 800408a:	d115      	bne.n	80040b8 <HAL_RCC_OscConfig+0x50c>
 800408c:	4b08      	ldr	r3, [pc, #32]	; (80040b0 <HAL_RCC_OscConfig+0x504>)
 800408e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004092:	4a07      	ldr	r2, [pc, #28]	; (80040b0 <HAL_RCC_OscConfig+0x504>)
 8004094:	f043 0304 	orr.w	r3, r3, #4
 8004098:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800409c:	4b04      	ldr	r3, [pc, #16]	; (80040b0 <HAL_RCC_OscConfig+0x504>)
 800409e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040a2:	4a03      	ldr	r2, [pc, #12]	; (80040b0 <HAL_RCC_OscConfig+0x504>)
 80040a4:	f043 0301 	orr.w	r3, r3, #1
 80040a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80040ac:	e014      	b.n	80040d8 <HAL_RCC_OscConfig+0x52c>
 80040ae:	bf00      	nop
 80040b0:	40021000 	.word	0x40021000
 80040b4:	40007000 	.word	0x40007000
 80040b8:	4b9d      	ldr	r3, [pc, #628]	; (8004330 <HAL_RCC_OscConfig+0x784>)
 80040ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040be:	4a9c      	ldr	r2, [pc, #624]	; (8004330 <HAL_RCC_OscConfig+0x784>)
 80040c0:	f023 0301 	bic.w	r3, r3, #1
 80040c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80040c8:	4b99      	ldr	r3, [pc, #612]	; (8004330 <HAL_RCC_OscConfig+0x784>)
 80040ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040ce:	4a98      	ldr	r2, [pc, #608]	; (8004330 <HAL_RCC_OscConfig+0x784>)
 80040d0:	f023 0304 	bic.w	r3, r3, #4
 80040d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	689b      	ldr	r3, [r3, #8]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d016      	beq.n	800410e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040e0:	f7fd fa50 	bl	8001584 <HAL_GetTick>
 80040e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040e6:	e00a      	b.n	80040fe <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040e8:	f7fd fa4c 	bl	8001584 <HAL_GetTick>
 80040ec:	4602      	mov	r2, r0
 80040ee:	693b      	ldr	r3, [r7, #16]
 80040f0:	1ad3      	subs	r3, r2, r3
 80040f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d901      	bls.n	80040fe <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80040fa:	2303      	movs	r3, #3
 80040fc:	e168      	b.n	80043d0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040fe:	4b8c      	ldr	r3, [pc, #560]	; (8004330 <HAL_RCC_OscConfig+0x784>)
 8004100:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004104:	f003 0302 	and.w	r3, r3, #2
 8004108:	2b00      	cmp	r3, #0
 800410a:	d0ed      	beq.n	80040e8 <HAL_RCC_OscConfig+0x53c>
 800410c:	e015      	b.n	800413a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800410e:	f7fd fa39 	bl	8001584 <HAL_GetTick>
 8004112:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004114:	e00a      	b.n	800412c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004116:	f7fd fa35 	bl	8001584 <HAL_GetTick>
 800411a:	4602      	mov	r2, r0
 800411c:	693b      	ldr	r3, [r7, #16]
 800411e:	1ad3      	subs	r3, r2, r3
 8004120:	f241 3288 	movw	r2, #5000	; 0x1388
 8004124:	4293      	cmp	r3, r2
 8004126:	d901      	bls.n	800412c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004128:	2303      	movs	r3, #3
 800412a:	e151      	b.n	80043d0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800412c:	4b80      	ldr	r3, [pc, #512]	; (8004330 <HAL_RCC_OscConfig+0x784>)
 800412e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004132:	f003 0302 	and.w	r3, r3, #2
 8004136:	2b00      	cmp	r3, #0
 8004138:	d1ed      	bne.n	8004116 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800413a:	7ffb      	ldrb	r3, [r7, #31]
 800413c:	2b01      	cmp	r3, #1
 800413e:	d105      	bne.n	800414c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004140:	4b7b      	ldr	r3, [pc, #492]	; (8004330 <HAL_RCC_OscConfig+0x784>)
 8004142:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004144:	4a7a      	ldr	r2, [pc, #488]	; (8004330 <HAL_RCC_OscConfig+0x784>)
 8004146:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800414a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f003 0320 	and.w	r3, r3, #32
 8004154:	2b00      	cmp	r3, #0
 8004156:	d03c      	beq.n	80041d2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800415c:	2b00      	cmp	r3, #0
 800415e:	d01c      	beq.n	800419a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004160:	4b73      	ldr	r3, [pc, #460]	; (8004330 <HAL_RCC_OscConfig+0x784>)
 8004162:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004166:	4a72      	ldr	r2, [pc, #456]	; (8004330 <HAL_RCC_OscConfig+0x784>)
 8004168:	f043 0301 	orr.w	r3, r3, #1
 800416c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004170:	f7fd fa08 	bl	8001584 <HAL_GetTick>
 8004174:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004176:	e008      	b.n	800418a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004178:	f7fd fa04 	bl	8001584 <HAL_GetTick>
 800417c:	4602      	mov	r2, r0
 800417e:	693b      	ldr	r3, [r7, #16]
 8004180:	1ad3      	subs	r3, r2, r3
 8004182:	2b02      	cmp	r3, #2
 8004184:	d901      	bls.n	800418a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004186:	2303      	movs	r3, #3
 8004188:	e122      	b.n	80043d0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800418a:	4b69      	ldr	r3, [pc, #420]	; (8004330 <HAL_RCC_OscConfig+0x784>)
 800418c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004190:	f003 0302 	and.w	r3, r3, #2
 8004194:	2b00      	cmp	r3, #0
 8004196:	d0ef      	beq.n	8004178 <HAL_RCC_OscConfig+0x5cc>
 8004198:	e01b      	b.n	80041d2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800419a:	4b65      	ldr	r3, [pc, #404]	; (8004330 <HAL_RCC_OscConfig+0x784>)
 800419c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80041a0:	4a63      	ldr	r2, [pc, #396]	; (8004330 <HAL_RCC_OscConfig+0x784>)
 80041a2:	f023 0301 	bic.w	r3, r3, #1
 80041a6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041aa:	f7fd f9eb 	bl	8001584 <HAL_GetTick>
 80041ae:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80041b0:	e008      	b.n	80041c4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80041b2:	f7fd f9e7 	bl	8001584 <HAL_GetTick>
 80041b6:	4602      	mov	r2, r0
 80041b8:	693b      	ldr	r3, [r7, #16]
 80041ba:	1ad3      	subs	r3, r2, r3
 80041bc:	2b02      	cmp	r3, #2
 80041be:	d901      	bls.n	80041c4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80041c0:	2303      	movs	r3, #3
 80041c2:	e105      	b.n	80043d0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80041c4:	4b5a      	ldr	r3, [pc, #360]	; (8004330 <HAL_RCC_OscConfig+0x784>)
 80041c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80041ca:	f003 0302 	and.w	r3, r3, #2
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d1ef      	bne.n	80041b2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	f000 80f9 	beq.w	80043ce <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041e0:	2b02      	cmp	r3, #2
 80041e2:	f040 80cf 	bne.w	8004384 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80041e6:	4b52      	ldr	r3, [pc, #328]	; (8004330 <HAL_RCC_OscConfig+0x784>)
 80041e8:	68db      	ldr	r3, [r3, #12]
 80041ea:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80041ec:	697b      	ldr	r3, [r7, #20]
 80041ee:	f003 0203 	and.w	r2, r3, #3
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041f6:	429a      	cmp	r2, r3
 80041f8:	d12c      	bne.n	8004254 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004204:	3b01      	subs	r3, #1
 8004206:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004208:	429a      	cmp	r2, r3
 800420a:	d123      	bne.n	8004254 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800420c:	697b      	ldr	r3, [r7, #20]
 800420e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004216:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004218:	429a      	cmp	r2, r3
 800421a:	d11b      	bne.n	8004254 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004226:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004228:	429a      	cmp	r2, r3
 800422a:	d113      	bne.n	8004254 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800422c:	697b      	ldr	r3, [r7, #20]
 800422e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004236:	085b      	lsrs	r3, r3, #1
 8004238:	3b01      	subs	r3, #1
 800423a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800423c:	429a      	cmp	r2, r3
 800423e:	d109      	bne.n	8004254 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004240:	697b      	ldr	r3, [r7, #20]
 8004242:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800424a:	085b      	lsrs	r3, r3, #1
 800424c:	3b01      	subs	r3, #1
 800424e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004250:	429a      	cmp	r2, r3
 8004252:	d071      	beq.n	8004338 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004254:	69bb      	ldr	r3, [r7, #24]
 8004256:	2b0c      	cmp	r3, #12
 8004258:	d068      	beq.n	800432c <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800425a:	4b35      	ldr	r3, [pc, #212]	; (8004330 <HAL_RCC_OscConfig+0x784>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004262:	2b00      	cmp	r3, #0
 8004264:	d105      	bne.n	8004272 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004266:	4b32      	ldr	r3, [pc, #200]	; (8004330 <HAL_RCC_OscConfig+0x784>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800426e:	2b00      	cmp	r3, #0
 8004270:	d001      	beq.n	8004276 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8004272:	2301      	movs	r3, #1
 8004274:	e0ac      	b.n	80043d0 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004276:	4b2e      	ldr	r3, [pc, #184]	; (8004330 <HAL_RCC_OscConfig+0x784>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a2d      	ldr	r2, [pc, #180]	; (8004330 <HAL_RCC_OscConfig+0x784>)
 800427c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004280:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004282:	f7fd f97f 	bl	8001584 <HAL_GetTick>
 8004286:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004288:	e008      	b.n	800429c <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800428a:	f7fd f97b 	bl	8001584 <HAL_GetTick>
 800428e:	4602      	mov	r2, r0
 8004290:	693b      	ldr	r3, [r7, #16]
 8004292:	1ad3      	subs	r3, r2, r3
 8004294:	2b02      	cmp	r3, #2
 8004296:	d901      	bls.n	800429c <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8004298:	2303      	movs	r3, #3
 800429a:	e099      	b.n	80043d0 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800429c:	4b24      	ldr	r3, [pc, #144]	; (8004330 <HAL_RCC_OscConfig+0x784>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d1f0      	bne.n	800428a <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80042a8:	4b21      	ldr	r3, [pc, #132]	; (8004330 <HAL_RCC_OscConfig+0x784>)
 80042aa:	68da      	ldr	r2, [r3, #12]
 80042ac:	4b21      	ldr	r3, [pc, #132]	; (8004334 <HAL_RCC_OscConfig+0x788>)
 80042ae:	4013      	ands	r3, r2
 80042b0:	687a      	ldr	r2, [r7, #4]
 80042b2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80042b4:	687a      	ldr	r2, [r7, #4]
 80042b6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80042b8:	3a01      	subs	r2, #1
 80042ba:	0112      	lsls	r2, r2, #4
 80042bc:	4311      	orrs	r1, r2
 80042be:	687a      	ldr	r2, [r7, #4]
 80042c0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80042c2:	0212      	lsls	r2, r2, #8
 80042c4:	4311      	orrs	r1, r2
 80042c6:	687a      	ldr	r2, [r7, #4]
 80042c8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80042ca:	0852      	lsrs	r2, r2, #1
 80042cc:	3a01      	subs	r2, #1
 80042ce:	0552      	lsls	r2, r2, #21
 80042d0:	4311      	orrs	r1, r2
 80042d2:	687a      	ldr	r2, [r7, #4]
 80042d4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80042d6:	0852      	lsrs	r2, r2, #1
 80042d8:	3a01      	subs	r2, #1
 80042da:	0652      	lsls	r2, r2, #25
 80042dc:	4311      	orrs	r1, r2
 80042de:	687a      	ldr	r2, [r7, #4]
 80042e0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80042e2:	06d2      	lsls	r2, r2, #27
 80042e4:	430a      	orrs	r2, r1
 80042e6:	4912      	ldr	r1, [pc, #72]	; (8004330 <HAL_RCC_OscConfig+0x784>)
 80042e8:	4313      	orrs	r3, r2
 80042ea:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80042ec:	4b10      	ldr	r3, [pc, #64]	; (8004330 <HAL_RCC_OscConfig+0x784>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4a0f      	ldr	r2, [pc, #60]	; (8004330 <HAL_RCC_OscConfig+0x784>)
 80042f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80042f6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80042f8:	4b0d      	ldr	r3, [pc, #52]	; (8004330 <HAL_RCC_OscConfig+0x784>)
 80042fa:	68db      	ldr	r3, [r3, #12]
 80042fc:	4a0c      	ldr	r2, [pc, #48]	; (8004330 <HAL_RCC_OscConfig+0x784>)
 80042fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004302:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004304:	f7fd f93e 	bl	8001584 <HAL_GetTick>
 8004308:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800430a:	e008      	b.n	800431e <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800430c:	f7fd f93a 	bl	8001584 <HAL_GetTick>
 8004310:	4602      	mov	r2, r0
 8004312:	693b      	ldr	r3, [r7, #16]
 8004314:	1ad3      	subs	r3, r2, r3
 8004316:	2b02      	cmp	r3, #2
 8004318:	d901      	bls.n	800431e <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800431a:	2303      	movs	r3, #3
 800431c:	e058      	b.n	80043d0 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800431e:	4b04      	ldr	r3, [pc, #16]	; (8004330 <HAL_RCC_OscConfig+0x784>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004326:	2b00      	cmp	r3, #0
 8004328:	d0f0      	beq.n	800430c <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800432a:	e050      	b.n	80043ce <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800432c:	2301      	movs	r3, #1
 800432e:	e04f      	b.n	80043d0 <HAL_RCC_OscConfig+0x824>
 8004330:	40021000 	.word	0x40021000
 8004334:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004338:	4b27      	ldr	r3, [pc, #156]	; (80043d8 <HAL_RCC_OscConfig+0x82c>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004340:	2b00      	cmp	r3, #0
 8004342:	d144      	bne.n	80043ce <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004344:	4b24      	ldr	r3, [pc, #144]	; (80043d8 <HAL_RCC_OscConfig+0x82c>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4a23      	ldr	r2, [pc, #140]	; (80043d8 <HAL_RCC_OscConfig+0x82c>)
 800434a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800434e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004350:	4b21      	ldr	r3, [pc, #132]	; (80043d8 <HAL_RCC_OscConfig+0x82c>)
 8004352:	68db      	ldr	r3, [r3, #12]
 8004354:	4a20      	ldr	r2, [pc, #128]	; (80043d8 <HAL_RCC_OscConfig+0x82c>)
 8004356:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800435a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800435c:	f7fd f912 	bl	8001584 <HAL_GetTick>
 8004360:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004362:	e008      	b.n	8004376 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004364:	f7fd f90e 	bl	8001584 <HAL_GetTick>
 8004368:	4602      	mov	r2, r0
 800436a:	693b      	ldr	r3, [r7, #16]
 800436c:	1ad3      	subs	r3, r2, r3
 800436e:	2b02      	cmp	r3, #2
 8004370:	d901      	bls.n	8004376 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8004372:	2303      	movs	r3, #3
 8004374:	e02c      	b.n	80043d0 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004376:	4b18      	ldr	r3, [pc, #96]	; (80043d8 <HAL_RCC_OscConfig+0x82c>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800437e:	2b00      	cmp	r3, #0
 8004380:	d0f0      	beq.n	8004364 <HAL_RCC_OscConfig+0x7b8>
 8004382:	e024      	b.n	80043ce <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004384:	69bb      	ldr	r3, [r7, #24]
 8004386:	2b0c      	cmp	r3, #12
 8004388:	d01f      	beq.n	80043ca <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800438a:	4b13      	ldr	r3, [pc, #76]	; (80043d8 <HAL_RCC_OscConfig+0x82c>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a12      	ldr	r2, [pc, #72]	; (80043d8 <HAL_RCC_OscConfig+0x82c>)
 8004390:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004394:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004396:	f7fd f8f5 	bl	8001584 <HAL_GetTick>
 800439a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800439c:	e008      	b.n	80043b0 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800439e:	f7fd f8f1 	bl	8001584 <HAL_GetTick>
 80043a2:	4602      	mov	r2, r0
 80043a4:	693b      	ldr	r3, [r7, #16]
 80043a6:	1ad3      	subs	r3, r2, r3
 80043a8:	2b02      	cmp	r3, #2
 80043aa:	d901      	bls.n	80043b0 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 80043ac:	2303      	movs	r3, #3
 80043ae:	e00f      	b.n	80043d0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043b0:	4b09      	ldr	r3, [pc, #36]	; (80043d8 <HAL_RCC_OscConfig+0x82c>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d1f0      	bne.n	800439e <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80043bc:	4b06      	ldr	r3, [pc, #24]	; (80043d8 <HAL_RCC_OscConfig+0x82c>)
 80043be:	68da      	ldr	r2, [r3, #12]
 80043c0:	4905      	ldr	r1, [pc, #20]	; (80043d8 <HAL_RCC_OscConfig+0x82c>)
 80043c2:	4b06      	ldr	r3, [pc, #24]	; (80043dc <HAL_RCC_OscConfig+0x830>)
 80043c4:	4013      	ands	r3, r2
 80043c6:	60cb      	str	r3, [r1, #12]
 80043c8:	e001      	b.n	80043ce <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80043ca:	2301      	movs	r3, #1
 80043cc:	e000      	b.n	80043d0 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 80043ce:	2300      	movs	r3, #0
}
 80043d0:	4618      	mov	r0, r3
 80043d2:	3720      	adds	r7, #32
 80043d4:	46bd      	mov	sp, r7
 80043d6:	bd80      	pop	{r7, pc}
 80043d8:	40021000 	.word	0x40021000
 80043dc:	feeefffc 	.word	0xfeeefffc

080043e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b086      	sub	sp, #24
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
 80043e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80043ea:	2300      	movs	r3, #0
 80043ec:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d101      	bne.n	80043f8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80043f4:	2301      	movs	r3, #1
 80043f6:	e11d      	b.n	8004634 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80043f8:	4b90      	ldr	r3, [pc, #576]	; (800463c <HAL_RCC_ClockConfig+0x25c>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f003 030f 	and.w	r3, r3, #15
 8004400:	683a      	ldr	r2, [r7, #0]
 8004402:	429a      	cmp	r2, r3
 8004404:	d910      	bls.n	8004428 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004406:	4b8d      	ldr	r3, [pc, #564]	; (800463c <HAL_RCC_ClockConfig+0x25c>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f023 020f 	bic.w	r2, r3, #15
 800440e:	498b      	ldr	r1, [pc, #556]	; (800463c <HAL_RCC_ClockConfig+0x25c>)
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	4313      	orrs	r3, r2
 8004414:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004416:	4b89      	ldr	r3, [pc, #548]	; (800463c <HAL_RCC_ClockConfig+0x25c>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f003 030f 	and.w	r3, r3, #15
 800441e:	683a      	ldr	r2, [r7, #0]
 8004420:	429a      	cmp	r2, r3
 8004422:	d001      	beq.n	8004428 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004424:	2301      	movs	r3, #1
 8004426:	e105      	b.n	8004634 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f003 0302 	and.w	r3, r3, #2
 8004430:	2b00      	cmp	r3, #0
 8004432:	d010      	beq.n	8004456 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	689a      	ldr	r2, [r3, #8]
 8004438:	4b81      	ldr	r3, [pc, #516]	; (8004640 <HAL_RCC_ClockConfig+0x260>)
 800443a:	689b      	ldr	r3, [r3, #8]
 800443c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004440:	429a      	cmp	r2, r3
 8004442:	d908      	bls.n	8004456 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004444:	4b7e      	ldr	r3, [pc, #504]	; (8004640 <HAL_RCC_ClockConfig+0x260>)
 8004446:	689b      	ldr	r3, [r3, #8]
 8004448:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	689b      	ldr	r3, [r3, #8]
 8004450:	497b      	ldr	r1, [pc, #492]	; (8004640 <HAL_RCC_ClockConfig+0x260>)
 8004452:	4313      	orrs	r3, r2
 8004454:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f003 0301 	and.w	r3, r3, #1
 800445e:	2b00      	cmp	r3, #0
 8004460:	d079      	beq.n	8004556 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	2b03      	cmp	r3, #3
 8004468:	d11e      	bne.n	80044a8 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800446a:	4b75      	ldr	r3, [pc, #468]	; (8004640 <HAL_RCC_ClockConfig+0x260>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004472:	2b00      	cmp	r3, #0
 8004474:	d101      	bne.n	800447a <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8004476:	2301      	movs	r3, #1
 8004478:	e0dc      	b.n	8004634 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800447a:	f000 fa39 	bl	80048f0 <RCC_GetSysClockFreqFromPLLSource>
 800447e:	4603      	mov	r3, r0
 8004480:	4a70      	ldr	r2, [pc, #448]	; (8004644 <HAL_RCC_ClockConfig+0x264>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d946      	bls.n	8004514 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004486:	4b6e      	ldr	r3, [pc, #440]	; (8004640 <HAL_RCC_ClockConfig+0x260>)
 8004488:	689b      	ldr	r3, [r3, #8]
 800448a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800448e:	2b00      	cmp	r3, #0
 8004490:	d140      	bne.n	8004514 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004492:	4b6b      	ldr	r3, [pc, #428]	; (8004640 <HAL_RCC_ClockConfig+0x260>)
 8004494:	689b      	ldr	r3, [r3, #8]
 8004496:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800449a:	4a69      	ldr	r2, [pc, #420]	; (8004640 <HAL_RCC_ClockConfig+0x260>)
 800449c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044a0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80044a2:	2380      	movs	r3, #128	; 0x80
 80044a4:	617b      	str	r3, [r7, #20]
 80044a6:	e035      	b.n	8004514 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	2b02      	cmp	r3, #2
 80044ae:	d107      	bne.n	80044c0 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80044b0:	4b63      	ldr	r3, [pc, #396]	; (8004640 <HAL_RCC_ClockConfig+0x260>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d115      	bne.n	80044e8 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80044bc:	2301      	movs	r3, #1
 80044be:	e0b9      	b.n	8004634 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d107      	bne.n	80044d8 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80044c8:	4b5d      	ldr	r3, [pc, #372]	; (8004640 <HAL_RCC_ClockConfig+0x260>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f003 0302 	and.w	r3, r3, #2
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d109      	bne.n	80044e8 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80044d4:	2301      	movs	r3, #1
 80044d6:	e0ad      	b.n	8004634 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80044d8:	4b59      	ldr	r3, [pc, #356]	; (8004640 <HAL_RCC_ClockConfig+0x260>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d101      	bne.n	80044e8 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80044e4:	2301      	movs	r3, #1
 80044e6:	e0a5      	b.n	8004634 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80044e8:	f000 f8b4 	bl	8004654 <HAL_RCC_GetSysClockFreq>
 80044ec:	4603      	mov	r3, r0
 80044ee:	4a55      	ldr	r2, [pc, #340]	; (8004644 <HAL_RCC_ClockConfig+0x264>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d90f      	bls.n	8004514 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80044f4:	4b52      	ldr	r3, [pc, #328]	; (8004640 <HAL_RCC_ClockConfig+0x260>)
 80044f6:	689b      	ldr	r3, [r3, #8]
 80044f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d109      	bne.n	8004514 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004500:	4b4f      	ldr	r3, [pc, #316]	; (8004640 <HAL_RCC_ClockConfig+0x260>)
 8004502:	689b      	ldr	r3, [r3, #8]
 8004504:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004508:	4a4d      	ldr	r2, [pc, #308]	; (8004640 <HAL_RCC_ClockConfig+0x260>)
 800450a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800450e:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004510:	2380      	movs	r3, #128	; 0x80
 8004512:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004514:	4b4a      	ldr	r3, [pc, #296]	; (8004640 <HAL_RCC_ClockConfig+0x260>)
 8004516:	689b      	ldr	r3, [r3, #8]
 8004518:	f023 0203 	bic.w	r2, r3, #3
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	4947      	ldr	r1, [pc, #284]	; (8004640 <HAL_RCC_ClockConfig+0x260>)
 8004522:	4313      	orrs	r3, r2
 8004524:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004526:	f7fd f82d 	bl	8001584 <HAL_GetTick>
 800452a:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800452c:	e00a      	b.n	8004544 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800452e:	f7fd f829 	bl	8001584 <HAL_GetTick>
 8004532:	4602      	mov	r2, r0
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	1ad3      	subs	r3, r2, r3
 8004538:	f241 3288 	movw	r2, #5000	; 0x1388
 800453c:	4293      	cmp	r3, r2
 800453e:	d901      	bls.n	8004544 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8004540:	2303      	movs	r3, #3
 8004542:	e077      	b.n	8004634 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004544:	4b3e      	ldr	r3, [pc, #248]	; (8004640 <HAL_RCC_ClockConfig+0x260>)
 8004546:	689b      	ldr	r3, [r3, #8]
 8004548:	f003 020c 	and.w	r2, r3, #12
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	009b      	lsls	r3, r3, #2
 8004552:	429a      	cmp	r2, r3
 8004554:	d1eb      	bne.n	800452e <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	2b80      	cmp	r3, #128	; 0x80
 800455a:	d105      	bne.n	8004568 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800455c:	4b38      	ldr	r3, [pc, #224]	; (8004640 <HAL_RCC_ClockConfig+0x260>)
 800455e:	689b      	ldr	r3, [r3, #8]
 8004560:	4a37      	ldr	r2, [pc, #220]	; (8004640 <HAL_RCC_ClockConfig+0x260>)
 8004562:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004566:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f003 0302 	and.w	r3, r3, #2
 8004570:	2b00      	cmp	r3, #0
 8004572:	d010      	beq.n	8004596 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	689a      	ldr	r2, [r3, #8]
 8004578:	4b31      	ldr	r3, [pc, #196]	; (8004640 <HAL_RCC_ClockConfig+0x260>)
 800457a:	689b      	ldr	r3, [r3, #8]
 800457c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004580:	429a      	cmp	r2, r3
 8004582:	d208      	bcs.n	8004596 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004584:	4b2e      	ldr	r3, [pc, #184]	; (8004640 <HAL_RCC_ClockConfig+0x260>)
 8004586:	689b      	ldr	r3, [r3, #8]
 8004588:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	689b      	ldr	r3, [r3, #8]
 8004590:	492b      	ldr	r1, [pc, #172]	; (8004640 <HAL_RCC_ClockConfig+0x260>)
 8004592:	4313      	orrs	r3, r2
 8004594:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004596:	4b29      	ldr	r3, [pc, #164]	; (800463c <HAL_RCC_ClockConfig+0x25c>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f003 030f 	and.w	r3, r3, #15
 800459e:	683a      	ldr	r2, [r7, #0]
 80045a0:	429a      	cmp	r2, r3
 80045a2:	d210      	bcs.n	80045c6 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045a4:	4b25      	ldr	r3, [pc, #148]	; (800463c <HAL_RCC_ClockConfig+0x25c>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f023 020f 	bic.w	r2, r3, #15
 80045ac:	4923      	ldr	r1, [pc, #140]	; (800463c <HAL_RCC_ClockConfig+0x25c>)
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	4313      	orrs	r3, r2
 80045b2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80045b4:	4b21      	ldr	r3, [pc, #132]	; (800463c <HAL_RCC_ClockConfig+0x25c>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f003 030f 	and.w	r3, r3, #15
 80045bc:	683a      	ldr	r2, [r7, #0]
 80045be:	429a      	cmp	r2, r3
 80045c0:	d001      	beq.n	80045c6 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 80045c2:	2301      	movs	r3, #1
 80045c4:	e036      	b.n	8004634 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f003 0304 	and.w	r3, r3, #4
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d008      	beq.n	80045e4 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80045d2:	4b1b      	ldr	r3, [pc, #108]	; (8004640 <HAL_RCC_ClockConfig+0x260>)
 80045d4:	689b      	ldr	r3, [r3, #8]
 80045d6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	68db      	ldr	r3, [r3, #12]
 80045de:	4918      	ldr	r1, [pc, #96]	; (8004640 <HAL_RCC_ClockConfig+0x260>)
 80045e0:	4313      	orrs	r3, r2
 80045e2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f003 0308 	and.w	r3, r3, #8
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d009      	beq.n	8004604 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80045f0:	4b13      	ldr	r3, [pc, #76]	; (8004640 <HAL_RCC_ClockConfig+0x260>)
 80045f2:	689b      	ldr	r3, [r3, #8]
 80045f4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	691b      	ldr	r3, [r3, #16]
 80045fc:	00db      	lsls	r3, r3, #3
 80045fe:	4910      	ldr	r1, [pc, #64]	; (8004640 <HAL_RCC_ClockConfig+0x260>)
 8004600:	4313      	orrs	r3, r2
 8004602:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004604:	f000 f826 	bl	8004654 <HAL_RCC_GetSysClockFreq>
 8004608:	4602      	mov	r2, r0
 800460a:	4b0d      	ldr	r3, [pc, #52]	; (8004640 <HAL_RCC_ClockConfig+0x260>)
 800460c:	689b      	ldr	r3, [r3, #8]
 800460e:	091b      	lsrs	r3, r3, #4
 8004610:	f003 030f 	and.w	r3, r3, #15
 8004614:	490c      	ldr	r1, [pc, #48]	; (8004648 <HAL_RCC_ClockConfig+0x268>)
 8004616:	5ccb      	ldrb	r3, [r1, r3]
 8004618:	f003 031f 	and.w	r3, r3, #31
 800461c:	fa22 f303 	lsr.w	r3, r2, r3
 8004620:	4a0a      	ldr	r2, [pc, #40]	; (800464c <HAL_RCC_ClockConfig+0x26c>)
 8004622:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004624:	4b0a      	ldr	r3, [pc, #40]	; (8004650 <HAL_RCC_ClockConfig+0x270>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4618      	mov	r0, r3
 800462a:	f7fc fe8b 	bl	8001344 <HAL_InitTick>
 800462e:	4603      	mov	r3, r0
 8004630:	73fb      	strb	r3, [r7, #15]

  return status;
 8004632:	7bfb      	ldrb	r3, [r7, #15]
}
 8004634:	4618      	mov	r0, r3
 8004636:	3718      	adds	r7, #24
 8004638:	46bd      	mov	sp, r7
 800463a:	bd80      	pop	{r7, pc}
 800463c:	40022000 	.word	0x40022000
 8004640:	40021000 	.word	0x40021000
 8004644:	04c4b400 	.word	0x04c4b400
 8004648:	0800d74c 	.word	0x0800d74c
 800464c:	20000004 	.word	0x20000004
 8004650:	20000008 	.word	0x20000008

08004654 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004654:	b480      	push	{r7}
 8004656:	b089      	sub	sp, #36	; 0x24
 8004658:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800465a:	2300      	movs	r3, #0
 800465c:	61fb      	str	r3, [r7, #28]
 800465e:	2300      	movs	r3, #0
 8004660:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004662:	4b3e      	ldr	r3, [pc, #248]	; (800475c <HAL_RCC_GetSysClockFreq+0x108>)
 8004664:	689b      	ldr	r3, [r3, #8]
 8004666:	f003 030c 	and.w	r3, r3, #12
 800466a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800466c:	4b3b      	ldr	r3, [pc, #236]	; (800475c <HAL_RCC_GetSysClockFreq+0x108>)
 800466e:	68db      	ldr	r3, [r3, #12]
 8004670:	f003 0303 	and.w	r3, r3, #3
 8004674:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004676:	693b      	ldr	r3, [r7, #16]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d005      	beq.n	8004688 <HAL_RCC_GetSysClockFreq+0x34>
 800467c:	693b      	ldr	r3, [r7, #16]
 800467e:	2b0c      	cmp	r3, #12
 8004680:	d121      	bne.n	80046c6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	2b01      	cmp	r3, #1
 8004686:	d11e      	bne.n	80046c6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004688:	4b34      	ldr	r3, [pc, #208]	; (800475c <HAL_RCC_GetSysClockFreq+0x108>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f003 0308 	and.w	r3, r3, #8
 8004690:	2b00      	cmp	r3, #0
 8004692:	d107      	bne.n	80046a4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004694:	4b31      	ldr	r3, [pc, #196]	; (800475c <HAL_RCC_GetSysClockFreq+0x108>)
 8004696:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800469a:	0a1b      	lsrs	r3, r3, #8
 800469c:	f003 030f 	and.w	r3, r3, #15
 80046a0:	61fb      	str	r3, [r7, #28]
 80046a2:	e005      	b.n	80046b0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80046a4:	4b2d      	ldr	r3, [pc, #180]	; (800475c <HAL_RCC_GetSysClockFreq+0x108>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	091b      	lsrs	r3, r3, #4
 80046aa:	f003 030f 	and.w	r3, r3, #15
 80046ae:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80046b0:	4a2b      	ldr	r2, [pc, #172]	; (8004760 <HAL_RCC_GetSysClockFreq+0x10c>)
 80046b2:	69fb      	ldr	r3, [r7, #28]
 80046b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046b8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80046ba:	693b      	ldr	r3, [r7, #16]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d10d      	bne.n	80046dc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80046c0:	69fb      	ldr	r3, [r7, #28]
 80046c2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80046c4:	e00a      	b.n	80046dc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80046c6:	693b      	ldr	r3, [r7, #16]
 80046c8:	2b04      	cmp	r3, #4
 80046ca:	d102      	bne.n	80046d2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80046cc:	4b25      	ldr	r3, [pc, #148]	; (8004764 <HAL_RCC_GetSysClockFreq+0x110>)
 80046ce:	61bb      	str	r3, [r7, #24]
 80046d0:	e004      	b.n	80046dc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80046d2:	693b      	ldr	r3, [r7, #16]
 80046d4:	2b08      	cmp	r3, #8
 80046d6:	d101      	bne.n	80046dc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80046d8:	4b22      	ldr	r3, [pc, #136]	; (8004764 <HAL_RCC_GetSysClockFreq+0x110>)
 80046da:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80046dc:	693b      	ldr	r3, [r7, #16]
 80046de:	2b0c      	cmp	r3, #12
 80046e0:	d134      	bne.n	800474c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80046e2:	4b1e      	ldr	r3, [pc, #120]	; (800475c <HAL_RCC_GetSysClockFreq+0x108>)
 80046e4:	68db      	ldr	r3, [r3, #12]
 80046e6:	f003 0303 	and.w	r3, r3, #3
 80046ea:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80046ec:	68bb      	ldr	r3, [r7, #8]
 80046ee:	2b02      	cmp	r3, #2
 80046f0:	d003      	beq.n	80046fa <HAL_RCC_GetSysClockFreq+0xa6>
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	2b03      	cmp	r3, #3
 80046f6:	d003      	beq.n	8004700 <HAL_RCC_GetSysClockFreq+0xac>
 80046f8:	e005      	b.n	8004706 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80046fa:	4b1a      	ldr	r3, [pc, #104]	; (8004764 <HAL_RCC_GetSysClockFreq+0x110>)
 80046fc:	617b      	str	r3, [r7, #20]
      break;
 80046fe:	e005      	b.n	800470c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004700:	4b18      	ldr	r3, [pc, #96]	; (8004764 <HAL_RCC_GetSysClockFreq+0x110>)
 8004702:	617b      	str	r3, [r7, #20]
      break;
 8004704:	e002      	b.n	800470c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004706:	69fb      	ldr	r3, [r7, #28]
 8004708:	617b      	str	r3, [r7, #20]
      break;
 800470a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800470c:	4b13      	ldr	r3, [pc, #76]	; (800475c <HAL_RCC_GetSysClockFreq+0x108>)
 800470e:	68db      	ldr	r3, [r3, #12]
 8004710:	091b      	lsrs	r3, r3, #4
 8004712:	f003 030f 	and.w	r3, r3, #15
 8004716:	3301      	adds	r3, #1
 8004718:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800471a:	4b10      	ldr	r3, [pc, #64]	; (800475c <HAL_RCC_GetSysClockFreq+0x108>)
 800471c:	68db      	ldr	r3, [r3, #12]
 800471e:	0a1b      	lsrs	r3, r3, #8
 8004720:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004724:	697a      	ldr	r2, [r7, #20]
 8004726:	fb03 f202 	mul.w	r2, r3, r2
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004730:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004732:	4b0a      	ldr	r3, [pc, #40]	; (800475c <HAL_RCC_GetSysClockFreq+0x108>)
 8004734:	68db      	ldr	r3, [r3, #12]
 8004736:	0e5b      	lsrs	r3, r3, #25
 8004738:	f003 0303 	and.w	r3, r3, #3
 800473c:	3301      	adds	r3, #1
 800473e:	005b      	lsls	r3, r3, #1
 8004740:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004742:	697a      	ldr	r2, [r7, #20]
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	fbb2 f3f3 	udiv	r3, r2, r3
 800474a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800474c:	69bb      	ldr	r3, [r7, #24]
}
 800474e:	4618      	mov	r0, r3
 8004750:	3724      	adds	r7, #36	; 0x24
 8004752:	46bd      	mov	sp, r7
 8004754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004758:	4770      	bx	lr
 800475a:	bf00      	nop
 800475c:	40021000 	.word	0x40021000
 8004760:	0800d764 	.word	0x0800d764
 8004764:	00f42400 	.word	0x00f42400

08004768 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004768:	b480      	push	{r7}
 800476a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800476c:	4b03      	ldr	r3, [pc, #12]	; (800477c <HAL_RCC_GetHCLKFreq+0x14>)
 800476e:	681b      	ldr	r3, [r3, #0]
}
 8004770:	4618      	mov	r0, r3
 8004772:	46bd      	mov	sp, r7
 8004774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004778:	4770      	bx	lr
 800477a:	bf00      	nop
 800477c:	20000004 	.word	0x20000004

08004780 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004784:	f7ff fff0 	bl	8004768 <HAL_RCC_GetHCLKFreq>
 8004788:	4602      	mov	r2, r0
 800478a:	4b06      	ldr	r3, [pc, #24]	; (80047a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800478c:	689b      	ldr	r3, [r3, #8]
 800478e:	0a1b      	lsrs	r3, r3, #8
 8004790:	f003 0307 	and.w	r3, r3, #7
 8004794:	4904      	ldr	r1, [pc, #16]	; (80047a8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004796:	5ccb      	ldrb	r3, [r1, r3]
 8004798:	f003 031f 	and.w	r3, r3, #31
 800479c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047a0:	4618      	mov	r0, r3
 80047a2:	bd80      	pop	{r7, pc}
 80047a4:	40021000 	.word	0x40021000
 80047a8:	0800d75c 	.word	0x0800d75c

080047ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80047b0:	f7ff ffda 	bl	8004768 <HAL_RCC_GetHCLKFreq>
 80047b4:	4602      	mov	r2, r0
 80047b6:	4b06      	ldr	r3, [pc, #24]	; (80047d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80047b8:	689b      	ldr	r3, [r3, #8]
 80047ba:	0adb      	lsrs	r3, r3, #11
 80047bc:	f003 0307 	and.w	r3, r3, #7
 80047c0:	4904      	ldr	r1, [pc, #16]	; (80047d4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80047c2:	5ccb      	ldrb	r3, [r1, r3]
 80047c4:	f003 031f 	and.w	r3, r3, #31
 80047c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047cc:	4618      	mov	r0, r3
 80047ce:	bd80      	pop	{r7, pc}
 80047d0:	40021000 	.word	0x40021000
 80047d4:	0800d75c 	.word	0x0800d75c

080047d8 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80047d8:	b480      	push	{r7}
 80047da:	b083      	sub	sp, #12
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
 80047e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	220f      	movs	r2, #15
 80047e6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80047e8:	4b12      	ldr	r3, [pc, #72]	; (8004834 <HAL_RCC_GetClockConfig+0x5c>)
 80047ea:	689b      	ldr	r3, [r3, #8]
 80047ec:	f003 0203 	and.w	r2, r3, #3
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80047f4:	4b0f      	ldr	r3, [pc, #60]	; (8004834 <HAL_RCC_GetClockConfig+0x5c>)
 80047f6:	689b      	ldr	r3, [r3, #8]
 80047f8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8004800:	4b0c      	ldr	r3, [pc, #48]	; (8004834 <HAL_RCC_GetClockConfig+0x5c>)
 8004802:	689b      	ldr	r3, [r3, #8]
 8004804:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800480c:	4b09      	ldr	r3, [pc, #36]	; (8004834 <HAL_RCC_GetClockConfig+0x5c>)
 800480e:	689b      	ldr	r3, [r3, #8]
 8004810:	08db      	lsrs	r3, r3, #3
 8004812:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800481a:	4b07      	ldr	r3, [pc, #28]	; (8004838 <HAL_RCC_GetClockConfig+0x60>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f003 020f 	and.w	r2, r3, #15
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	601a      	str	r2, [r3, #0]
}
 8004826:	bf00      	nop
 8004828:	370c      	adds	r7, #12
 800482a:	46bd      	mov	sp, r7
 800482c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004830:	4770      	bx	lr
 8004832:	bf00      	nop
 8004834:	40021000 	.word	0x40021000
 8004838:	40022000 	.word	0x40022000

0800483c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b086      	sub	sp, #24
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004844:	2300      	movs	r3, #0
 8004846:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004848:	4b27      	ldr	r3, [pc, #156]	; (80048e8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800484a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800484c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004850:	2b00      	cmp	r3, #0
 8004852:	d003      	beq.n	800485c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004854:	f7ff f8d6 	bl	8003a04 <HAL_PWREx_GetVoltageRange>
 8004858:	6178      	str	r0, [r7, #20]
 800485a:	e014      	b.n	8004886 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800485c:	4b22      	ldr	r3, [pc, #136]	; (80048e8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800485e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004860:	4a21      	ldr	r2, [pc, #132]	; (80048e8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004862:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004866:	6593      	str	r3, [r2, #88]	; 0x58
 8004868:	4b1f      	ldr	r3, [pc, #124]	; (80048e8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800486a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800486c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004870:	60fb      	str	r3, [r7, #12]
 8004872:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004874:	f7ff f8c6 	bl	8003a04 <HAL_PWREx_GetVoltageRange>
 8004878:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800487a:	4b1b      	ldr	r3, [pc, #108]	; (80048e8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800487c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800487e:	4a1a      	ldr	r2, [pc, #104]	; (80048e8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004880:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004884:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004886:	697b      	ldr	r3, [r7, #20]
 8004888:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800488c:	d10b      	bne.n	80048a6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2b80      	cmp	r3, #128	; 0x80
 8004892:	d913      	bls.n	80048bc <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2ba0      	cmp	r3, #160	; 0xa0
 8004898:	d902      	bls.n	80048a0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800489a:	2302      	movs	r3, #2
 800489c:	613b      	str	r3, [r7, #16]
 800489e:	e00d      	b.n	80048bc <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80048a0:	2301      	movs	r3, #1
 80048a2:	613b      	str	r3, [r7, #16]
 80048a4:	e00a      	b.n	80048bc <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2b7f      	cmp	r3, #127	; 0x7f
 80048aa:	d902      	bls.n	80048b2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80048ac:	2302      	movs	r3, #2
 80048ae:	613b      	str	r3, [r7, #16]
 80048b0:	e004      	b.n	80048bc <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2b70      	cmp	r3, #112	; 0x70
 80048b6:	d101      	bne.n	80048bc <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80048b8:	2301      	movs	r3, #1
 80048ba:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80048bc:	4b0b      	ldr	r3, [pc, #44]	; (80048ec <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f023 020f 	bic.w	r2, r3, #15
 80048c4:	4909      	ldr	r1, [pc, #36]	; (80048ec <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80048c6:	693b      	ldr	r3, [r7, #16]
 80048c8:	4313      	orrs	r3, r2
 80048ca:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80048cc:	4b07      	ldr	r3, [pc, #28]	; (80048ec <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f003 030f 	and.w	r3, r3, #15
 80048d4:	693a      	ldr	r2, [r7, #16]
 80048d6:	429a      	cmp	r2, r3
 80048d8:	d001      	beq.n	80048de <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 80048da:	2301      	movs	r3, #1
 80048dc:	e000      	b.n	80048e0 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 80048de:	2300      	movs	r3, #0
}
 80048e0:	4618      	mov	r0, r3
 80048e2:	3718      	adds	r7, #24
 80048e4:	46bd      	mov	sp, r7
 80048e6:	bd80      	pop	{r7, pc}
 80048e8:	40021000 	.word	0x40021000
 80048ec:	40022000 	.word	0x40022000

080048f0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80048f0:	b480      	push	{r7}
 80048f2:	b087      	sub	sp, #28
 80048f4:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80048f6:	4b2d      	ldr	r3, [pc, #180]	; (80049ac <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80048f8:	68db      	ldr	r3, [r3, #12]
 80048fa:	f003 0303 	and.w	r3, r3, #3
 80048fe:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	2b03      	cmp	r3, #3
 8004904:	d00b      	beq.n	800491e <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	2b03      	cmp	r3, #3
 800490a:	d825      	bhi.n	8004958 <RCC_GetSysClockFreqFromPLLSource+0x68>
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	2b01      	cmp	r3, #1
 8004910:	d008      	beq.n	8004924 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	2b02      	cmp	r3, #2
 8004916:	d11f      	bne.n	8004958 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8004918:	4b25      	ldr	r3, [pc, #148]	; (80049b0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800491a:	613b      	str	r3, [r7, #16]
    break;
 800491c:	e01f      	b.n	800495e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 800491e:	4b24      	ldr	r3, [pc, #144]	; (80049b0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004920:	613b      	str	r3, [r7, #16]
    break;
 8004922:	e01c      	b.n	800495e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004924:	4b21      	ldr	r3, [pc, #132]	; (80049ac <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f003 0308 	and.w	r3, r3, #8
 800492c:	2b00      	cmp	r3, #0
 800492e:	d107      	bne.n	8004940 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004930:	4b1e      	ldr	r3, [pc, #120]	; (80049ac <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004932:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004936:	0a1b      	lsrs	r3, r3, #8
 8004938:	f003 030f 	and.w	r3, r3, #15
 800493c:	617b      	str	r3, [r7, #20]
 800493e:	e005      	b.n	800494c <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004940:	4b1a      	ldr	r3, [pc, #104]	; (80049ac <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	091b      	lsrs	r3, r3, #4
 8004946:	f003 030f 	and.w	r3, r3, #15
 800494a:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 800494c:	4a19      	ldr	r2, [pc, #100]	; (80049b4 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 800494e:	697b      	ldr	r3, [r7, #20]
 8004950:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004954:	613b      	str	r3, [r7, #16]
    break;
 8004956:	e002      	b.n	800495e <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8004958:	2300      	movs	r3, #0
 800495a:	613b      	str	r3, [r7, #16]
    break;
 800495c:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800495e:	4b13      	ldr	r3, [pc, #76]	; (80049ac <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004960:	68db      	ldr	r3, [r3, #12]
 8004962:	091b      	lsrs	r3, r3, #4
 8004964:	f003 030f 	and.w	r3, r3, #15
 8004968:	3301      	adds	r3, #1
 800496a:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800496c:	4b0f      	ldr	r3, [pc, #60]	; (80049ac <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800496e:	68db      	ldr	r3, [r3, #12]
 8004970:	0a1b      	lsrs	r3, r3, #8
 8004972:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004976:	693a      	ldr	r2, [r7, #16]
 8004978:	fb03 f202 	mul.w	r2, r3, r2
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004982:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004984:	4b09      	ldr	r3, [pc, #36]	; (80049ac <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004986:	68db      	ldr	r3, [r3, #12]
 8004988:	0e5b      	lsrs	r3, r3, #25
 800498a:	f003 0303 	and.w	r3, r3, #3
 800498e:	3301      	adds	r3, #1
 8004990:	005b      	lsls	r3, r3, #1
 8004992:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8004994:	693a      	ldr	r2, [r7, #16]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	fbb2 f3f3 	udiv	r3, r2, r3
 800499c:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800499e:	683b      	ldr	r3, [r7, #0]
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	371c      	adds	r7, #28
 80049a4:	46bd      	mov	sp, r7
 80049a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049aa:	4770      	bx	lr
 80049ac:	40021000 	.word	0x40021000
 80049b0:	00f42400 	.word	0x00f42400
 80049b4:	0800d764 	.word	0x0800d764

080049b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b086      	sub	sp, #24
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80049c0:	2300      	movs	r3, #0
 80049c2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80049c4:	2300      	movs	r3, #0
 80049c6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d040      	beq.n	8004a56 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80049d8:	2b80      	cmp	r3, #128	; 0x80
 80049da:	d02a      	beq.n	8004a32 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80049dc:	2b80      	cmp	r3, #128	; 0x80
 80049de:	d825      	bhi.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0x74>
 80049e0:	2b60      	cmp	r3, #96	; 0x60
 80049e2:	d026      	beq.n	8004a32 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80049e4:	2b60      	cmp	r3, #96	; 0x60
 80049e6:	d821      	bhi.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0x74>
 80049e8:	2b40      	cmp	r3, #64	; 0x40
 80049ea:	d006      	beq.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0x42>
 80049ec:	2b40      	cmp	r3, #64	; 0x40
 80049ee:	d81d      	bhi.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0x74>
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d009      	beq.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x50>
 80049f4:	2b20      	cmp	r3, #32
 80049f6:	d010      	beq.n	8004a1a <HAL_RCCEx_PeriphCLKConfig+0x62>
 80049f8:	e018      	b.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80049fa:	4b89      	ldr	r3, [pc, #548]	; (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80049fc:	68db      	ldr	r3, [r3, #12]
 80049fe:	4a88      	ldr	r2, [pc, #544]	; (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004a00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a04:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004a06:	e015      	b.n	8004a34 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	3304      	adds	r3, #4
 8004a0c:	2100      	movs	r1, #0
 8004a0e:	4618      	mov	r0, r3
 8004a10:	f001 fa82 	bl	8005f18 <RCCEx_PLLSAI1_Config>
 8004a14:	4603      	mov	r3, r0
 8004a16:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004a18:	e00c      	b.n	8004a34 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	3320      	adds	r3, #32
 8004a1e:	2100      	movs	r1, #0
 8004a20:	4618      	mov	r0, r3
 8004a22:	f001 fb6d 	bl	8006100 <RCCEx_PLLSAI2_Config>
 8004a26:	4603      	mov	r3, r0
 8004a28:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004a2a:	e003      	b.n	8004a34 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	74fb      	strb	r3, [r7, #19]
      break;
 8004a30:	e000      	b.n	8004a34 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8004a32:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a34:	7cfb      	ldrb	r3, [r7, #19]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d10b      	bne.n	8004a52 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004a3a:	4b79      	ldr	r3, [pc, #484]	; (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004a3c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004a40:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a48:	4975      	ldr	r1, [pc, #468]	; (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004a50:	e001      	b.n	8004a56 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a52:	7cfb      	ldrb	r3, [r7, #19]
 8004a54:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d047      	beq.n	8004af2 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a6a:	d030      	beq.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004a6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a70:	d82a      	bhi.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004a72:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a76:	d02a      	beq.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004a78:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a7c:	d824      	bhi.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004a7e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a82:	d008      	beq.n	8004a96 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8004a84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a88:	d81e      	bhi.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d00a      	beq.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8004a8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a92:	d010      	beq.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004a94:	e018      	b.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004a96:	4b62      	ldr	r3, [pc, #392]	; (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004a98:	68db      	ldr	r3, [r3, #12]
 8004a9a:	4a61      	ldr	r2, [pc, #388]	; (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004a9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004aa0:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004aa2:	e015      	b.n	8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	3304      	adds	r3, #4
 8004aa8:	2100      	movs	r1, #0
 8004aaa:	4618      	mov	r0, r3
 8004aac:	f001 fa34 	bl	8005f18 <RCCEx_PLLSAI1_Config>
 8004ab0:	4603      	mov	r3, r0
 8004ab2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004ab4:	e00c      	b.n	8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	3320      	adds	r3, #32
 8004aba:	2100      	movs	r1, #0
 8004abc:	4618      	mov	r0, r3
 8004abe:	f001 fb1f 	bl	8006100 <RCCEx_PLLSAI2_Config>
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004ac6:	e003      	b.n	8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004ac8:	2301      	movs	r3, #1
 8004aca:	74fb      	strb	r3, [r7, #19]
      break;
 8004acc:	e000      	b.n	8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8004ace:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ad0:	7cfb      	ldrb	r3, [r7, #19]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d10b      	bne.n	8004aee <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004ad6:	4b52      	ldr	r3, [pc, #328]	; (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004ad8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004adc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ae4:	494e      	ldr	r1, [pc, #312]	; (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004aec:	e001      	b.n	8004af2 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004aee:	7cfb      	ldrb	r3, [r7, #19]
 8004af0:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	f000 809f 	beq.w	8004c3e <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b00:	2300      	movs	r3, #0
 8004b02:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004b04:	4b46      	ldr	r3, [pc, #280]	; (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004b06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d101      	bne.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8004b10:	2301      	movs	r3, #1
 8004b12:	e000      	b.n	8004b16 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8004b14:	2300      	movs	r3, #0
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d00d      	beq.n	8004b36 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b1a:	4b41      	ldr	r3, [pc, #260]	; (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004b1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b1e:	4a40      	ldr	r2, [pc, #256]	; (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004b20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b24:	6593      	str	r3, [r2, #88]	; 0x58
 8004b26:	4b3e      	ldr	r3, [pc, #248]	; (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004b28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b2e:	60bb      	str	r3, [r7, #8]
 8004b30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b32:	2301      	movs	r3, #1
 8004b34:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004b36:	4b3b      	ldr	r3, [pc, #236]	; (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4a3a      	ldr	r2, [pc, #232]	; (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004b3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b40:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004b42:	f7fc fd1f 	bl	8001584 <HAL_GetTick>
 8004b46:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004b48:	e009      	b.n	8004b5e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b4a:	f7fc fd1b 	bl	8001584 <HAL_GetTick>
 8004b4e:	4602      	mov	r2, r0
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	1ad3      	subs	r3, r2, r3
 8004b54:	2b02      	cmp	r3, #2
 8004b56:	d902      	bls.n	8004b5e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8004b58:	2303      	movs	r3, #3
 8004b5a:	74fb      	strb	r3, [r7, #19]
        break;
 8004b5c:	e005      	b.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004b5e:	4b31      	ldr	r3, [pc, #196]	; (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d0ef      	beq.n	8004b4a <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8004b6a:	7cfb      	ldrb	r3, [r7, #19]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d15b      	bne.n	8004c28 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004b70:	4b2b      	ldr	r3, [pc, #172]	; (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004b72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b7a:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004b7c:	697b      	ldr	r3, [r7, #20]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d01f      	beq.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004b88:	697a      	ldr	r2, [r7, #20]
 8004b8a:	429a      	cmp	r2, r3
 8004b8c:	d019      	beq.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004b8e:	4b24      	ldr	r3, [pc, #144]	; (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004b90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b98:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004b9a:	4b21      	ldr	r3, [pc, #132]	; (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004b9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ba0:	4a1f      	ldr	r2, [pc, #124]	; (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004ba2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ba6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004baa:	4b1d      	ldr	r3, [pc, #116]	; (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004bac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bb0:	4a1b      	ldr	r2, [pc, #108]	; (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004bb2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bb6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004bba:	4a19      	ldr	r2, [pc, #100]	; (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004bbc:	697b      	ldr	r3, [r7, #20]
 8004bbe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004bc2:	697b      	ldr	r3, [r7, #20]
 8004bc4:	f003 0301 	and.w	r3, r3, #1
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d016      	beq.n	8004bfa <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bcc:	f7fc fcda 	bl	8001584 <HAL_GetTick>
 8004bd0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004bd2:	e00b      	b.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bd4:	f7fc fcd6 	bl	8001584 <HAL_GetTick>
 8004bd8:	4602      	mov	r2, r0
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	1ad3      	subs	r3, r2, r3
 8004bde:	f241 3288 	movw	r2, #5000	; 0x1388
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d902      	bls.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8004be6:	2303      	movs	r3, #3
 8004be8:	74fb      	strb	r3, [r7, #19]
            break;
 8004bea:	e006      	b.n	8004bfa <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004bec:	4b0c      	ldr	r3, [pc, #48]	; (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004bee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bf2:	f003 0302 	and.w	r3, r3, #2
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d0ec      	beq.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8004bfa:	7cfb      	ldrb	r3, [r7, #19]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d10c      	bne.n	8004c1a <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004c00:	4b07      	ldr	r3, [pc, #28]	; (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004c02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c06:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004c10:	4903      	ldr	r1, [pc, #12]	; (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004c12:	4313      	orrs	r3, r2
 8004c14:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004c18:	e008      	b.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004c1a:	7cfb      	ldrb	r3, [r7, #19]
 8004c1c:	74bb      	strb	r3, [r7, #18]
 8004c1e:	e005      	b.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0x274>
 8004c20:	40021000 	.word	0x40021000
 8004c24:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c28:	7cfb      	ldrb	r3, [r7, #19]
 8004c2a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004c2c:	7c7b      	ldrb	r3, [r7, #17]
 8004c2e:	2b01      	cmp	r3, #1
 8004c30:	d105      	bne.n	8004c3e <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c32:	4ba0      	ldr	r3, [pc, #640]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c36:	4a9f      	ldr	r2, [pc, #636]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c38:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c3c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f003 0301 	and.w	r3, r3, #1
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d00a      	beq.n	8004c60 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004c4a:	4b9a      	ldr	r3, [pc, #616]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c50:	f023 0203 	bic.w	r2, r3, #3
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c58:	4996      	ldr	r1, [pc, #600]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f003 0302 	and.w	r3, r3, #2
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d00a      	beq.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004c6c:	4b91      	ldr	r3, [pc, #580]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c72:	f023 020c 	bic.w	r2, r3, #12
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c7a:	498e      	ldr	r1, [pc, #568]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c7c:	4313      	orrs	r3, r2
 8004c7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f003 0304 	and.w	r3, r3, #4
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d00a      	beq.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004c8e:	4b89      	ldr	r3, [pc, #548]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c94:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c9c:	4985      	ldr	r1, [pc, #532]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f003 0308 	and.w	r3, r3, #8
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d00a      	beq.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004cb0:	4b80      	ldr	r3, [pc, #512]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004cb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cb6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cbe:	497d      	ldr	r1, [pc, #500]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004cc0:	4313      	orrs	r3, r2
 8004cc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f003 0310 	and.w	r3, r3, #16
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d00a      	beq.n	8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004cd2:	4b78      	ldr	r3, [pc, #480]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004cd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cd8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ce0:	4974      	ldr	r1, [pc, #464]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f003 0320 	and.w	r3, r3, #32
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d00a      	beq.n	8004d0a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004cf4:	4b6f      	ldr	r3, [pc, #444]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004cf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cfa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d02:	496c      	ldr	r1, [pc, #432]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d04:	4313      	orrs	r3, r2
 8004d06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d00a      	beq.n	8004d2c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004d16:	4b67      	ldr	r3, [pc, #412]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d1c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d24:	4963      	ldr	r1, [pc, #396]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d26:	4313      	orrs	r3, r2
 8004d28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d00a      	beq.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004d38:	4b5e      	ldr	r3, [pc, #376]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d3e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004d46:	495b      	ldr	r1, [pc, #364]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d48:	4313      	orrs	r3, r2
 8004d4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d00a      	beq.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004d5a:	4b56      	ldr	r3, [pc, #344]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d60:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d68:	4952      	ldr	r1, [pc, #328]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d6a:	4313      	orrs	r3, r2
 8004d6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d00a      	beq.n	8004d92 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004d7c:	4b4d      	ldr	r3, [pc, #308]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d82:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d8a:	494a      	ldr	r1, [pc, #296]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d8c:	4313      	orrs	r3, r2
 8004d8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d00a      	beq.n	8004db4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004d9e:	4b45      	ldr	r3, [pc, #276]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004da0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004da4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004dac:	4941      	ldr	r1, [pc, #260]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004dae:	4313      	orrs	r3, r2
 8004db0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d00a      	beq.n	8004dd6 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004dc0:	4b3c      	ldr	r3, [pc, #240]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004dc2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004dc6:	f023 0203 	bic.w	r2, r3, #3
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004dce:	4939      	ldr	r1, [pc, #228]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004dd0:	4313      	orrs	r3, r2
 8004dd2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d028      	beq.n	8004e34 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004de2:	4b34      	ldr	r3, [pc, #208]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004de4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004de8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004df0:	4930      	ldr	r1, [pc, #192]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004df2:	4313      	orrs	r3, r2
 8004df4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004dfc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e00:	d106      	bne.n	8004e10 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e02:	4b2c      	ldr	r3, [pc, #176]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e04:	68db      	ldr	r3, [r3, #12]
 8004e06:	4a2b      	ldr	r2, [pc, #172]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e08:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e0c:	60d3      	str	r3, [r2, #12]
 8004e0e:	e011      	b.n	8004e34 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e14:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004e18:	d10c      	bne.n	8004e34 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	3304      	adds	r3, #4
 8004e1e:	2101      	movs	r1, #1
 8004e20:	4618      	mov	r0, r3
 8004e22:	f001 f879 	bl	8005f18 <RCCEx_PLLSAI1_Config>
 8004e26:	4603      	mov	r3, r0
 8004e28:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004e2a:	7cfb      	ldrb	r3, [r7, #19]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d001      	beq.n	8004e34 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8004e30:	7cfb      	ldrb	r3, [r7, #19]
 8004e32:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d04d      	beq.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e44:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004e48:	d108      	bne.n	8004e5c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8004e4a:	4b1a      	ldr	r3, [pc, #104]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e4c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004e50:	4a18      	ldr	r2, [pc, #96]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e52:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004e56:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8004e5a:	e012      	b.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8004e5c:	4b15      	ldr	r3, [pc, #84]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e5e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004e62:	4a14      	ldr	r2, [pc, #80]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e64:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004e68:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8004e6c:	4b11      	ldr	r3, [pc, #68]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e72:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e7a:	490e      	ldr	r1, [pc, #56]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e7c:	4313      	orrs	r3, r2
 8004e7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e86:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e8a:	d106      	bne.n	8004e9a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e8c:	4b09      	ldr	r3, [pc, #36]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e8e:	68db      	ldr	r3, [r3, #12]
 8004e90:	4a08      	ldr	r2, [pc, #32]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e92:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e96:	60d3      	str	r3, [r2, #12]
 8004e98:	e020      	b.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e9e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004ea2:	d109      	bne.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004ea4:	4b03      	ldr	r3, [pc, #12]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ea6:	68db      	ldr	r3, [r3, #12]
 8004ea8:	4a02      	ldr	r2, [pc, #8]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004eaa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004eae:	60d3      	str	r3, [r2, #12]
 8004eb0:	e014      	b.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0x524>
 8004eb2:	bf00      	nop
 8004eb4:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004ebc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004ec0:	d10c      	bne.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	3304      	adds	r3, #4
 8004ec6:	2101      	movs	r1, #1
 8004ec8:	4618      	mov	r0, r3
 8004eca:	f001 f825 	bl	8005f18 <RCCEx_PLLSAI1_Config>
 8004ece:	4603      	mov	r3, r0
 8004ed0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004ed2:	7cfb      	ldrb	r3, [r7, #19]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d001      	beq.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8004ed8:	7cfb      	ldrb	r3, [r7, #19]
 8004eda:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d028      	beq.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004ee8:	4b7a      	ldr	r3, [pc, #488]	; (80050d4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004eea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004eee:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ef6:	4977      	ldr	r1, [pc, #476]	; (80050d4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f02:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f06:	d106      	bne.n	8004f16 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f08:	4b72      	ldr	r3, [pc, #456]	; (80050d4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004f0a:	68db      	ldr	r3, [r3, #12]
 8004f0c:	4a71      	ldr	r2, [pc, #452]	; (80050d4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004f0e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f12:	60d3      	str	r3, [r2, #12]
 8004f14:	e011      	b.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f1a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004f1e:	d10c      	bne.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	3304      	adds	r3, #4
 8004f24:	2101      	movs	r1, #1
 8004f26:	4618      	mov	r0, r3
 8004f28:	f000 fff6 	bl	8005f18 <RCCEx_PLLSAI1_Config>
 8004f2c:	4603      	mov	r3, r0
 8004f2e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004f30:	7cfb      	ldrb	r3, [r7, #19]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d001      	beq.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8004f36:	7cfb      	ldrb	r3, [r7, #19]
 8004f38:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d01e      	beq.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004f46:	4b63      	ldr	r3, [pc, #396]	; (80050d4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004f48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f4c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f56:	495f      	ldr	r1, [pc, #380]	; (80050d4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004f58:	4313      	orrs	r3, r2
 8004f5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f64:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004f68:	d10c      	bne.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	3304      	adds	r3, #4
 8004f6e:	2102      	movs	r1, #2
 8004f70:	4618      	mov	r0, r3
 8004f72:	f000 ffd1 	bl	8005f18 <RCCEx_PLLSAI1_Config>
 8004f76:	4603      	mov	r3, r0
 8004f78:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004f7a:	7cfb      	ldrb	r3, [r7, #19]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d001      	beq.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8004f80:	7cfb      	ldrb	r3, [r7, #19]
 8004f82:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d00b      	beq.n	8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004f90:	4b50      	ldr	r3, [pc, #320]	; (80050d4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004f92:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004f96:	f023 0204 	bic.w	r2, r3, #4
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004fa0:	494c      	ldr	r1, [pc, #304]	; (80050d4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004fa2:	4313      	orrs	r3, r2
 8004fa4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d00b      	beq.n	8004fcc <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004fb4:	4b47      	ldr	r3, [pc, #284]	; (80050d4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004fb6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004fba:	f023 0218 	bic.w	r2, r3, #24
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fc4:	4943      	ldr	r1, [pc, #268]	; (80050d4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DFSDM1_Filter0 */

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d035      	beq.n	8005044 <HAL_RCCEx_PeriphCLKConfig+0x68c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004fd8:	4b3e      	ldr	r3, [pc, #248]	; (80050d4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4a3d      	ldr	r2, [pc, #244]	; (80050d4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004fde:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004fe2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004fe4:	f7fc face 	bl	8001584 <HAL_GetTick>
 8004fe8:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004fea:	e009      	b.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004fec:	f7fc faca 	bl	8001584 <HAL_GetTick>
 8004ff0:	4602      	mov	r2, r0
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	1ad3      	subs	r3, r2, r3
 8004ff6:	2b02      	cmp	r3, #2
 8004ff8:	d902      	bls.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        ret = HAL_TIMEOUT;
 8004ffa:	2303      	movs	r3, #3
 8004ffc:	74fb      	strb	r3, [r7, #19]
        break;
 8004ffe:	e005      	b.n	800500c <HAL_RCCEx_PeriphCLKConfig+0x654>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005000:	4b34      	ldr	r3, [pc, #208]	; (80050d4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005008:	2b00      	cmp	r3, #0
 800500a:	d1ef      	bne.n	8004fec <HAL_RCCEx_PeriphCLKConfig+0x634>
      }
    }

    if(ret == HAL_OK)
 800500c:	7cfb      	ldrb	r3, [r7, #19]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d113      	bne.n	800503a <HAL_RCCEx_PeriphCLKConfig+0x682>
    {
      /* Configure the LTDC clock source */
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 8005012:	4b30      	ldr	r3, [pc, #192]	; (80050d4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005014:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005018:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005022:	492c      	ldr	r1, [pc, #176]	; (80050d4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005024:	4313      	orrs	r3, r2
 8005026:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	3320      	adds	r3, #32
 800502e:	2102      	movs	r1, #2
 8005030:	4618      	mov	r0, r3
 8005032:	f001 f865 	bl	8006100 <RCCEx_PLLSAI2_Config>
 8005036:	4603      	mov	r3, r0
 8005038:	74fb      	strb	r3, [r7, #19]
    }

    if(ret != HAL_OK)
 800503a:	7cfb      	ldrb	r3, [r7, #19]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d001      	beq.n	8005044 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* set overall return value */
      status = ret;
 8005040:	7cfb      	ldrb	r3, [r7, #19]
 8005042:	74bb      	strb	r3, [r7, #18]
#endif /* LTDC */

#if defined(DSI)

  /*-------------------------- DSI clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800504c:	2b00      	cmp	r3, #0
 800504e:	d01e      	beq.n	800508e <HAL_RCCEx_PeriphCLKConfig+0x6d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DSICLKSOURCE(PeriphClkInit->DsiClockSelection));

    /* Configure the DSI clock source */
    __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8005050:	4b20      	ldr	r3, [pc, #128]	; (80050d4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005052:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005056:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005060:	491c      	ldr	r1, [pc, #112]	; (80050d4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005062:	4313      	orrs	r3, r2
 8005064:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLLSAI2)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800506e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005072:	d10c      	bne.n	800508e <HAL_RCCEx_PeriphCLKConfig+0x6d6>
    {
      /* PLLSAI2 input clock, parameters M, N & Q configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_Q_UPDATE);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	3320      	adds	r3, #32
 8005078:	2101      	movs	r1, #1
 800507a:	4618      	mov	r0, r3
 800507c:	f001 f840 	bl	8006100 <RCCEx_PLLSAI2_Config>
 8005080:	4603      	mov	r3, r0
 8005082:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005084:	7cfb      	ldrb	r3, [r7, #19]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d001      	beq.n	800508e <HAL_RCCEx_PeriphCLKConfig+0x6d6>
      {
        /* set overall return value */
        status = ret;
 800508a:	7cfb      	ldrb	r3, [r7, #19]
 800508c:	74bb      	strb	r3, [r7, #18]
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005096:	2b00      	cmp	r3, #0
 8005098:	d017      	beq.n	80050ca <HAL_RCCEx_PeriphCLKConfig+0x712>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800509a:	4b0e      	ldr	r3, [pc, #56]	; (80050d4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800509c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80050a0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80050aa:	490a      	ldr	r1, [pc, #40]	; (80050d4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80050ac:	4313      	orrs	r3, r2
 80050ae:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80050b8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80050bc:	d105      	bne.n	80050ca <HAL_RCCEx_PeriphCLKConfig+0x712>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80050be:	4b05      	ldr	r3, [pc, #20]	; (80050d4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80050c0:	68db      	ldr	r3, [r3, #12]
 80050c2:	4a04      	ldr	r2, [pc, #16]	; (80050d4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80050c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80050c8:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80050ca:	7cbb      	ldrb	r3, [r7, #18]
}
 80050cc:	4618      	mov	r0, r3
 80050ce:	3718      	adds	r7, #24
 80050d0:	46bd      	mov	sp, r7
 80050d2:	bd80      	pop	{r7, pc}
 80050d4:	40021000 	.word	0x40021000

080050d8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b088      	sub	sp, #32
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 80050e0:	2300      	movs	r3, #0
 80050e2:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80050ea:	d13e      	bne.n	800516a <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80050ec:	4bb6      	ldr	r3, [pc, #728]	; (80053c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80050ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050f6:	60fb      	str	r3, [r7, #12]

    switch(srcclk)
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80050fe:	d028      	beq.n	8005152 <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005106:	f200 86f2 	bhi.w	8005eee <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005110:	d005      	beq.n	800511e <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005118:	d00e      	beq.n	8005138 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 800511a:	f000 bee8 	b.w	8005eee <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800511e:	4baa      	ldr	r3, [pc, #680]	; (80053c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005120:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005124:	f003 0302 	and.w	r3, r3, #2
 8005128:	2b02      	cmp	r3, #2
 800512a:	f040 86e2 	bne.w	8005ef2 <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
        frequency = LSE_VALUE;
 800512e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005132:	61fb      	str	r3, [r7, #28]
      break;
 8005134:	f000 bedd 	b.w	8005ef2 <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8005138:	4ba3      	ldr	r3, [pc, #652]	; (80053c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800513a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800513e:	f003 0302 	and.w	r3, r3, #2
 8005142:	2b02      	cmp	r3, #2
 8005144:	f040 86d7 	bne.w	8005ef6 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
          frequency = LSI_VALUE;
 8005148:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800514c:	61fb      	str	r3, [r7, #28]
      break;
 800514e:	f000 bed2 	b.w	8005ef6 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005152:	4b9d      	ldr	r3, [pc, #628]	; (80053c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800515a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800515e:	f040 86cc 	bne.w	8005efa <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
        frequency = HSE_VALUE / 32U;
 8005162:	4b9a      	ldr	r3, [pc, #616]	; (80053cc <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8005164:	61fb      	str	r3, [r7, #28]
      break;
 8005166:	f000 bec8 	b.w	8005efa <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800516a:	4b97      	ldr	r3, [pc, #604]	; (80053c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800516c:	68db      	ldr	r3, [r3, #12]
 800516e:	f003 0303 	and.w	r3, r3, #3
 8005172:	613b      	str	r3, [r7, #16]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 8005174:	693b      	ldr	r3, [r7, #16]
 8005176:	2b03      	cmp	r3, #3
 8005178:	d036      	beq.n	80051e8 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800517a:	693b      	ldr	r3, [r7, #16]
 800517c:	2b03      	cmp	r3, #3
 800517e:	d840      	bhi.n	8005202 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 8005180:	693b      	ldr	r3, [r7, #16]
 8005182:	2b01      	cmp	r3, #1
 8005184:	d003      	beq.n	800518e <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 8005186:	693b      	ldr	r3, [r7, #16]
 8005188:	2b02      	cmp	r3, #2
 800518a:	d020      	beq.n	80051ce <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 800518c:	e039      	b.n	8005202 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800518e:	4b8e      	ldr	r3, [pc, #568]	; (80053c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f003 0302 	and.w	r3, r3, #2
 8005196:	2b02      	cmp	r3, #2
 8005198:	d116      	bne.n	80051c8 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800519a:	4b8b      	ldr	r3, [pc, #556]	; (80053c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f003 0308 	and.w	r3, r3, #8
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d005      	beq.n	80051b2 <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 80051a6:	4b88      	ldr	r3, [pc, #544]	; (80053c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	091b      	lsrs	r3, r3, #4
 80051ac:	f003 030f 	and.w	r3, r3, #15
 80051b0:	e005      	b.n	80051be <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 80051b2:	4b85      	ldr	r3, [pc, #532]	; (80053c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80051b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80051b8:	0a1b      	lsrs	r3, r3, #8
 80051ba:	f003 030f 	and.w	r3, r3, #15
 80051be:	4a84      	ldr	r2, [pc, #528]	; (80053d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80051c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051c4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80051c6:	e01f      	b.n	8005208 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 80051c8:	2300      	movs	r3, #0
 80051ca:	61bb      	str	r3, [r7, #24]
      break;
 80051cc:	e01c      	b.n	8005208 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80051ce:	4b7e      	ldr	r3, [pc, #504]	; (80053c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051da:	d102      	bne.n	80051e2 <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 80051dc:	4b7d      	ldr	r3, [pc, #500]	; (80053d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 80051de:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80051e0:	e012      	b.n	8005208 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 80051e2:	2300      	movs	r3, #0
 80051e4:	61bb      	str	r3, [r7, #24]
      break;
 80051e6:	e00f      	b.n	8005208 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80051e8:	4b77      	ldr	r3, [pc, #476]	; (80053c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051f0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80051f4:	d102      	bne.n	80051fc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 80051f6:	4b77      	ldr	r3, [pc, #476]	; (80053d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 80051f8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80051fa:	e005      	b.n	8005208 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 80051fc:	2300      	movs	r3, #0
 80051fe:	61bb      	str	r3, [r7, #24]
      break;
 8005200:	e002      	b.n	8005208 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 8005202:	2300      	movs	r3, #0
 8005204:	61bb      	str	r3, [r7, #24]
      break;
 8005206:	bf00      	nop
    }

    switch(PeriphClk)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800520e:	f000 8604 	beq.w	8005e1a <HAL_RCCEx_GetPeriphCLKFreq+0xd42>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005218:	f200 8671 	bhi.w	8005efe <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005222:	f000 8467 	beq.w	8005af4 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800522c:	f200 8667 	bhi.w	8005efe <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005236:	f000 852f 	beq.w	8005c98 <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005240:	f200 865d 	bhi.w	8005efe <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800524a:	f000 8185 	beq.w	8005558 <HAL_RCCEx_GetPeriphCLKFreq+0x480>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005254:	f200 8653 	bhi.w	8005efe <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800525e:	f000 80cb 	beq.w	80053f8 <HAL_RCCEx_GetPeriphCLKFreq+0x320>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005268:	f200 8649 	bhi.w	8005efe <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005272:	f000 842e 	beq.w	8005ad2 <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800527c:	f200 863f 	bhi.w	8005efe <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005286:	f000 83e2 	beq.w	8005a4e <HAL_RCCEx_GetPeriphCLKFreq+0x976>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005290:	f200 8635 	bhi.w	8005efe <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800529a:	f000 80ad 	beq.w	80053f8 <HAL_RCCEx_GetPeriphCLKFreq+0x320>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052a4:	f200 862b 	bhi.w	8005efe <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052ae:	f000 809b 	beq.w	80053e8 <HAL_RCCEx_GetPeriphCLKFreq+0x310>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052b8:	f200 8621 	bhi.w	8005efe <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80052c2:	f000 8089 	beq.w	80053d8 <HAL_RCCEx_GetPeriphCLKFreq+0x300>
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80052cc:	f200 8617 	bhi.w	8005efe <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052d6:	f000 8552 	beq.w	8005d7e <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052e0:	f200 860d 	bhi.w	8005efe <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80052ea:	f000 84fe 	beq.w	8005cea <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80052f4:	f200 8603 	bhi.w	8005efe <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052fe:	f000 849f 	beq.w	8005c40 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005308:	f200 85f9 	bhi.w	8005efe <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2b80      	cmp	r3, #128	; 0x80
 8005310:	f000 846a 	beq.w	8005be8 <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2b80      	cmp	r3, #128	; 0x80
 8005318:	f200 85f1 	bhi.w	8005efe <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2b20      	cmp	r3, #32
 8005320:	d84c      	bhi.n	80053bc <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2b00      	cmp	r3, #0
 8005326:	f000 85ea 	beq.w	8005efe <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	3b01      	subs	r3, #1
 800532e:	2b1f      	cmp	r3, #31
 8005330:	f200 85e5 	bhi.w	8005efe <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8005334:	a201      	add	r2, pc, #4	; (adr r2, 800533c <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 8005336:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800533a:	bf00      	nop
 800533c:	0800574d 	.word	0x0800574d
 8005340:	080057bb 	.word	0x080057bb
 8005344:	08005eff 	.word	0x08005eff
 8005348:	0800584f 	.word	0x0800584f
 800534c:	08005eff 	.word	0x08005eff
 8005350:	08005eff 	.word	0x08005eff
 8005354:	08005eff 	.word	0x08005eff
 8005358:	080058c7 	.word	0x080058c7
 800535c:	08005eff 	.word	0x08005eff
 8005360:	08005eff 	.word	0x08005eff
 8005364:	08005eff 	.word	0x08005eff
 8005368:	08005eff 	.word	0x08005eff
 800536c:	08005eff 	.word	0x08005eff
 8005370:	08005eff 	.word	0x08005eff
 8005374:	08005eff 	.word	0x08005eff
 8005378:	0800594b 	.word	0x0800594b
 800537c:	08005eff 	.word	0x08005eff
 8005380:	08005eff 	.word	0x08005eff
 8005384:	08005eff 	.word	0x08005eff
 8005388:	08005eff 	.word	0x08005eff
 800538c:	08005eff 	.word	0x08005eff
 8005390:	08005eff 	.word	0x08005eff
 8005394:	08005eff 	.word	0x08005eff
 8005398:	08005eff 	.word	0x08005eff
 800539c:	08005eff 	.word	0x08005eff
 80053a0:	08005eff 	.word	0x08005eff
 80053a4:	08005eff 	.word	0x08005eff
 80053a8:	08005eff 	.word	0x08005eff
 80053ac:	08005eff 	.word	0x08005eff
 80053b0:	08005eff 	.word	0x08005eff
 80053b4:	08005eff 	.word	0x08005eff
 80053b8:	080059cd 	.word	0x080059cd
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2b40      	cmp	r3, #64	; 0x40
 80053c0:	f000 83e6 	beq.w	8005b90 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 80053c4:	f000 bd9b 	b.w	8005efe <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 80053c8:	40021000 	.word	0x40021000
 80053cc:	0007a120 	.word	0x0007a120
 80053d0:	0800d764 	.word	0x0800d764
 80053d4:	00f42400 	.word	0x00f42400
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 80053d8:	69b9      	ldr	r1, [r7, #24]
 80053da:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80053de:	f000 ff83 	bl	80062e8 <RCCEx_GetSAIxPeriphCLKFreq>
 80053e2:	61f8      	str	r0, [r7, #28]
      break;
 80053e4:	f000 bd8e 	b.w	8005f04 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 80053e8:	69b9      	ldr	r1, [r7, #24]
 80053ea:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80053ee:	f000 ff7b 	bl	80062e8 <RCCEx_GetSAIxPeriphCLKFreq>
 80053f2:	61f8      	str	r0, [r7, #28]
      break;
 80053f4:	f000 bd86 	b.w	8005f04 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 80053f8:	4b9a      	ldr	r3, [pc, #616]	; (8005664 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80053fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053fe:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8005402:	60fb      	str	r3, [r7, #12]
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800540a:	d015      	beq.n	8005438 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005412:	f200 8092 	bhi.w	800553a <HAL_RCCEx_GetPeriphCLKFreq+0x462>
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800541c:	d029      	beq.n	8005472 <HAL_RCCEx_GetPeriphCLKFreq+0x39a>
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005424:	f200 8089 	bhi.w	800553a <HAL_RCCEx_GetPeriphCLKFreq+0x462>
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d07b      	beq.n	8005526 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005434:	d04a      	beq.n	80054cc <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
          break;
 8005436:	e080      	b.n	800553a <HAL_RCCEx_GetPeriphCLKFreq+0x462>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8005438:	4b8a      	ldr	r3, [pc, #552]	; (8005664 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f003 0302 	and.w	r3, r3, #2
 8005440:	2b02      	cmp	r3, #2
 8005442:	d17d      	bne.n	8005540 <HAL_RCCEx_GetPeriphCLKFreq+0x468>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8005444:	4b87      	ldr	r3, [pc, #540]	; (8005664 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f003 0308 	and.w	r3, r3, #8
 800544c:	2b00      	cmp	r3, #0
 800544e:	d005      	beq.n	800545c <HAL_RCCEx_GetPeriphCLKFreq+0x384>
 8005450:	4b84      	ldr	r3, [pc, #528]	; (8005664 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	091b      	lsrs	r3, r3, #4
 8005456:	f003 030f 	and.w	r3, r3, #15
 800545a:	e005      	b.n	8005468 <HAL_RCCEx_GetPeriphCLKFreq+0x390>
 800545c:	4b81      	ldr	r3, [pc, #516]	; (8005664 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800545e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005462:	0a1b      	lsrs	r3, r3, #8
 8005464:	f003 030f 	and.w	r3, r3, #15
 8005468:	4a7f      	ldr	r2, [pc, #508]	; (8005668 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800546a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800546e:	61fb      	str	r3, [r7, #28]
          break;
 8005470:	e066      	b.n	8005540 <HAL_RCCEx_GetPeriphCLKFreq+0x468>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8005472:	4b7c      	ldr	r3, [pc, #496]	; (8005664 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800547a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800547e:	d162      	bne.n	8005546 <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8005480:	4b78      	ldr	r3, [pc, #480]	; (8005664 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005482:	68db      	ldr	r3, [r3, #12]
 8005484:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005488:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800548c:	d15b      	bne.n	8005546 <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800548e:	4b75      	ldr	r3, [pc, #468]	; (8005664 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005490:	68db      	ldr	r3, [r3, #12]
 8005492:	0a1b      	lsrs	r3, r3, #8
 8005494:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005498:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800549a:	69bb      	ldr	r3, [r7, #24]
 800549c:	68ba      	ldr	r2, [r7, #8]
 800549e:	fb03 f202 	mul.w	r2, r3, r2
 80054a2:	4b70      	ldr	r3, [pc, #448]	; (8005664 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80054a4:	68db      	ldr	r3, [r3, #12]
 80054a6:	091b      	lsrs	r3, r3, #4
 80054a8:	f003 030f 	and.w	r3, r3, #15
 80054ac:	3301      	adds	r3, #1
 80054ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80054b2:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 80054b4:	4b6b      	ldr	r3, [pc, #428]	; (8005664 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80054b6:	68db      	ldr	r3, [r3, #12]
 80054b8:	0d5b      	lsrs	r3, r3, #21
 80054ba:	f003 0303 	and.w	r3, r3, #3
 80054be:	3301      	adds	r3, #1
 80054c0:	005b      	lsls	r3, r3, #1
 80054c2:	69ba      	ldr	r2, [r7, #24]
 80054c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80054c8:	61fb      	str	r3, [r7, #28]
          break;
 80054ca:	e03c      	b.n	8005546 <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 80054cc:	4b65      	ldr	r3, [pc, #404]	; (8005664 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80054d4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80054d8:	d138      	bne.n	800554c <HAL_RCCEx_GetPeriphCLKFreq+0x474>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 80054da:	4b62      	ldr	r3, [pc, #392]	; (8005664 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80054dc:	691b      	ldr	r3, [r3, #16]
 80054de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80054e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80054e6:	d131      	bne.n	800554c <HAL_RCCEx_GetPeriphCLKFreq+0x474>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80054e8:	4b5e      	ldr	r3, [pc, #376]	; (8005664 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80054ea:	691b      	ldr	r3, [r3, #16]
 80054ec:	0a1b      	lsrs	r3, r3, #8
 80054ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80054f2:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 80054f4:	69bb      	ldr	r3, [r7, #24]
 80054f6:	68ba      	ldr	r2, [r7, #8]
 80054f8:	fb03 f202 	mul.w	r2, r3, r2
 80054fc:	4b59      	ldr	r3, [pc, #356]	; (8005664 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80054fe:	691b      	ldr	r3, [r3, #16]
 8005500:	091b      	lsrs	r3, r3, #4
 8005502:	f003 030f 	and.w	r3, r3, #15
 8005506:	3301      	adds	r3, #1
 8005508:	fbb2 f3f3 	udiv	r3, r2, r3
 800550c:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 800550e:	4b55      	ldr	r3, [pc, #340]	; (8005664 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005510:	691b      	ldr	r3, [r3, #16]
 8005512:	0d5b      	lsrs	r3, r3, #21
 8005514:	f003 0303 	and.w	r3, r3, #3
 8005518:	3301      	adds	r3, #1
 800551a:	005b      	lsls	r3, r3, #1
 800551c:	69ba      	ldr	r2, [r7, #24]
 800551e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005522:	61fb      	str	r3, [r7, #28]
          break;
 8005524:	e012      	b.n	800554c <HAL_RCCEx_GetPeriphCLKFreq+0x474>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 8005526:	4b4f      	ldr	r3, [pc, #316]	; (8005664 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005528:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800552c:	f003 0302 	and.w	r3, r3, #2
 8005530:	2b02      	cmp	r3, #2
 8005532:	d10e      	bne.n	8005552 <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
            frequency = HSI48_VALUE;
 8005534:	4b4d      	ldr	r3, [pc, #308]	; (800566c <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8005536:	61fb      	str	r3, [r7, #28]
          break;
 8005538:	e00b      	b.n	8005552 <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
          break;
 800553a:	bf00      	nop
 800553c:	f000 bce2 	b.w	8005f04 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005540:	bf00      	nop
 8005542:	f000 bcdf 	b.w	8005f04 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005546:	bf00      	nop
 8005548:	f000 bcdc 	b.w	8005f04 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800554c:	bf00      	nop
 800554e:	f000 bcd9 	b.w	8005f04 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005552:	bf00      	nop
        break;
 8005554:	f000 bcd6 	b.w	8005f04 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      if(HAL_IS_BIT_SET(RCC->CCIPR2, RCC_CCIPR2_SDMMCSEL))  /* PLL "P" ? */
 8005558:	4b42      	ldr	r3, [pc, #264]	; (8005664 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800555a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800555e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005562:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005566:	d13d      	bne.n	80055e4 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8005568:	4b3e      	ldr	r3, [pc, #248]	; (8005664 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005570:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005574:	f040 84c5 	bne.w	8005f02 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLPEN))
 8005578:	4b3a      	ldr	r3, [pc, #232]	; (8005664 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800557a:	68db      	ldr	r3, [r3, #12]
 800557c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005580:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005584:	f040 84bd 	bne.w	8005f02 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8005588:	4b36      	ldr	r3, [pc, #216]	; (8005664 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800558a:	68db      	ldr	r3, [r3, #12]
 800558c:	0a1b      	lsrs	r3, r3, #8
 800558e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005592:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005594:	69bb      	ldr	r3, [r7, #24]
 8005596:	68ba      	ldr	r2, [r7, #8]
 8005598:	fb03 f202 	mul.w	r2, r3, r2
 800559c:	4b31      	ldr	r3, [pc, #196]	; (8005664 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800559e:	68db      	ldr	r3, [r3, #12]
 80055a0:	091b      	lsrs	r3, r3, #4
 80055a2:	f003 030f 	and.w	r3, r3, #15
 80055a6:	3301      	adds	r3, #1
 80055a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80055ac:	61bb      	str	r3, [r7, #24]
            pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 80055ae:	4b2d      	ldr	r3, [pc, #180]	; (8005664 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80055b0:	68db      	ldr	r3, [r3, #12]
 80055b2:	0edb      	lsrs	r3, r3, #27
 80055b4:	f003 031f 	and.w	r3, r3, #31
 80055b8:	617b      	str	r3, [r7, #20]
            if(pllp == 0U)
 80055ba:	697b      	ldr	r3, [r7, #20]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d10a      	bne.n	80055d6 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
              if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 80055c0:	4b28      	ldr	r3, [pc, #160]	; (8005664 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80055c2:	68db      	ldr	r3, [r3, #12]
 80055c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d002      	beq.n	80055d2 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
                pllp = 17U;
 80055cc:	2311      	movs	r3, #17
 80055ce:	617b      	str	r3, [r7, #20]
 80055d0:	e001      	b.n	80055d6 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
                pllp = 7U;
 80055d2:	2307      	movs	r3, #7
 80055d4:	617b      	str	r3, [r7, #20]
            frequency = (pllvco / pllp);
 80055d6:	69ba      	ldr	r2, [r7, #24]
 80055d8:	697b      	ldr	r3, [r7, #20]
 80055da:	fbb2 f3f3 	udiv	r3, r2, r3
 80055de:	61fb      	str	r3, [r7, #28]
      break;
 80055e0:	f000 bc8f 	b.w	8005f02 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 80055e4:	4b1f      	ldr	r3, [pc, #124]	; (8005664 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80055e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055ea:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 80055ee:	60fb      	str	r3, [r7, #12]
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80055f6:	d016      	beq.n	8005626 <HAL_RCCEx_GetPeriphCLKFreq+0x54e>
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80055fe:	f200 809b 	bhi.w	8005738 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005608:	d032      	beq.n	8005670 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005610:	f200 8092 	bhi.w	8005738 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	2b00      	cmp	r3, #0
 8005618:	f000 8084 	beq.w	8005724 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005622:	d052      	beq.n	80056ca <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
          break;
 8005624:	e088      	b.n	8005738 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8005626:	4b0f      	ldr	r3, [pc, #60]	; (8005664 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f003 0302 	and.w	r3, r3, #2
 800562e:	2b02      	cmp	r3, #2
 8005630:	f040 8084 	bne.w	800573c <HAL_RCCEx_GetPeriphCLKFreq+0x664>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8005634:	4b0b      	ldr	r3, [pc, #44]	; (8005664 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f003 0308 	and.w	r3, r3, #8
 800563c:	2b00      	cmp	r3, #0
 800563e:	d005      	beq.n	800564c <HAL_RCCEx_GetPeriphCLKFreq+0x574>
 8005640:	4b08      	ldr	r3, [pc, #32]	; (8005664 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	091b      	lsrs	r3, r3, #4
 8005646:	f003 030f 	and.w	r3, r3, #15
 800564a:	e005      	b.n	8005658 <HAL_RCCEx_GetPeriphCLKFreq+0x580>
 800564c:	4b05      	ldr	r3, [pc, #20]	; (8005664 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800564e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005652:	0a1b      	lsrs	r3, r3, #8
 8005654:	f003 030f 	and.w	r3, r3, #15
 8005658:	4a03      	ldr	r2, [pc, #12]	; (8005668 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800565a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800565e:	61fb      	str	r3, [r7, #28]
          break;
 8005660:	e06c      	b.n	800573c <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 8005662:	bf00      	nop
 8005664:	40021000 	.word	0x40021000
 8005668:	0800d764 	.word	0x0800d764
 800566c:	02dc6c00 	.word	0x02dc6c00
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8005670:	4ba5      	ldr	r3, [pc, #660]	; (8005908 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005678:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800567c:	d160      	bne.n	8005740 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 800567e:	4ba2      	ldr	r3, [pc, #648]	; (8005908 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005680:	68db      	ldr	r3, [r3, #12]
 8005682:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005686:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800568a:	d159      	bne.n	8005740 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800568c:	4b9e      	ldr	r3, [pc, #632]	; (8005908 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800568e:	68db      	ldr	r3, [r3, #12]
 8005690:	0a1b      	lsrs	r3, r3, #8
 8005692:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005696:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005698:	69bb      	ldr	r3, [r7, #24]
 800569a:	68ba      	ldr	r2, [r7, #8]
 800569c:	fb03 f202 	mul.w	r2, r3, r2
 80056a0:	4b99      	ldr	r3, [pc, #612]	; (8005908 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80056a2:	68db      	ldr	r3, [r3, #12]
 80056a4:	091b      	lsrs	r3, r3, #4
 80056a6:	f003 030f 	and.w	r3, r3, #15
 80056aa:	3301      	adds	r3, #1
 80056ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80056b0:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 80056b2:	4b95      	ldr	r3, [pc, #596]	; (8005908 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80056b4:	68db      	ldr	r3, [r3, #12]
 80056b6:	0d5b      	lsrs	r3, r3, #21
 80056b8:	f003 0303 	and.w	r3, r3, #3
 80056bc:	3301      	adds	r3, #1
 80056be:	005b      	lsls	r3, r3, #1
 80056c0:	69ba      	ldr	r2, [r7, #24]
 80056c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80056c6:	61fb      	str	r3, [r7, #28]
          break;
 80056c8:	e03a      	b.n	8005740 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 80056ca:	4b8f      	ldr	r3, [pc, #572]	; (8005908 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80056d2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80056d6:	d135      	bne.n	8005744 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 80056d8:	4b8b      	ldr	r3, [pc, #556]	; (8005908 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80056da:	691b      	ldr	r3, [r3, #16]
 80056dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80056e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80056e4:	d12e      	bne.n	8005744 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80056e6:	4b88      	ldr	r3, [pc, #544]	; (8005908 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80056e8:	691b      	ldr	r3, [r3, #16]
 80056ea:	0a1b      	lsrs	r3, r3, #8
 80056ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80056f0:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 80056f2:	69bb      	ldr	r3, [r7, #24]
 80056f4:	68ba      	ldr	r2, [r7, #8]
 80056f6:	fb03 f202 	mul.w	r2, r3, r2
 80056fa:	4b83      	ldr	r3, [pc, #524]	; (8005908 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80056fc:	691b      	ldr	r3, [r3, #16]
 80056fe:	091b      	lsrs	r3, r3, #4
 8005700:	f003 030f 	and.w	r3, r3, #15
 8005704:	3301      	adds	r3, #1
 8005706:	fbb2 f3f3 	udiv	r3, r2, r3
 800570a:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 800570c:	4b7e      	ldr	r3, [pc, #504]	; (8005908 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800570e:	691b      	ldr	r3, [r3, #16]
 8005710:	0d5b      	lsrs	r3, r3, #21
 8005712:	f003 0303 	and.w	r3, r3, #3
 8005716:	3301      	adds	r3, #1
 8005718:	005b      	lsls	r3, r3, #1
 800571a:	69ba      	ldr	r2, [r7, #24]
 800571c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005720:	61fb      	str	r3, [r7, #28]
          break;
 8005722:	e00f      	b.n	8005744 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 8005724:	4b78      	ldr	r3, [pc, #480]	; (8005908 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005726:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800572a:	f003 0302 	and.w	r3, r3, #2
 800572e:	2b02      	cmp	r3, #2
 8005730:	d10a      	bne.n	8005748 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
            frequency = HSI48_VALUE;
 8005732:	4b76      	ldr	r3, [pc, #472]	; (800590c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005734:	61fb      	str	r3, [r7, #28]
          break;
 8005736:	e007      	b.n	8005748 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
          break;
 8005738:	bf00      	nop
 800573a:	e3e2      	b.n	8005f02 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          break;
 800573c:	bf00      	nop
 800573e:	e3e0      	b.n	8005f02 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          break;
 8005740:	bf00      	nop
 8005742:	e3de      	b.n	8005f02 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          break;
 8005744:	bf00      	nop
 8005746:	e3dc      	b.n	8005f02 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          break;
 8005748:	bf00      	nop
      break;
 800574a:	e3da      	b.n	8005f02 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800574c:	4b6e      	ldr	r3, [pc, #440]	; (8005908 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800574e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005752:	f003 0303 	and.w	r3, r3, #3
 8005756:	60fb      	str	r3, [r7, #12]
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	2b03      	cmp	r3, #3
 800575c:	d827      	bhi.n	80057ae <HAL_RCCEx_GetPeriphCLKFreq+0x6d6>
 800575e:	a201      	add	r2, pc, #4	; (adr r2, 8005764 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>)
 8005760:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005764:	08005775 	.word	0x08005775
 8005768:	0800577d 	.word	0x0800577d
 800576c:	08005785 	.word	0x08005785
 8005770:	08005799 	.word	0x08005799
          frequency = HAL_RCC_GetPCLK2Freq();
 8005774:	f7ff f81a 	bl	80047ac <HAL_RCC_GetPCLK2Freq>
 8005778:	61f8      	str	r0, [r7, #28]
          break;
 800577a:	e01d      	b.n	80057b8 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
          frequency = HAL_RCC_GetSysClockFreq();
 800577c:	f7fe ff6a 	bl	8004654 <HAL_RCC_GetSysClockFreq>
 8005780:	61f8      	str	r0, [r7, #28]
          break;
 8005782:	e019      	b.n	80057b8 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005784:	4b60      	ldr	r3, [pc, #384]	; (8005908 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800578c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005790:	d10f      	bne.n	80057b2 <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
            frequency = HSI_VALUE;
 8005792:	4b5f      	ldr	r3, [pc, #380]	; (8005910 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8005794:	61fb      	str	r3, [r7, #28]
          break;
 8005796:	e00c      	b.n	80057b2 <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005798:	4b5b      	ldr	r3, [pc, #364]	; (8005908 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800579a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800579e:	f003 0302 	and.w	r3, r3, #2
 80057a2:	2b02      	cmp	r3, #2
 80057a4:	d107      	bne.n	80057b6 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
            frequency = LSE_VALUE;
 80057a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80057aa:	61fb      	str	r3, [r7, #28]
          break;
 80057ac:	e003      	b.n	80057b6 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
          break;
 80057ae:	bf00      	nop
 80057b0:	e3a8      	b.n	8005f04 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80057b2:	bf00      	nop
 80057b4:	e3a6      	b.n	8005f04 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80057b6:	bf00      	nop
        break;
 80057b8:	e3a4      	b.n	8005f04 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 80057ba:	4b53      	ldr	r3, [pc, #332]	; (8005908 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80057bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057c0:	f003 030c 	and.w	r3, r3, #12
 80057c4:	60fb      	str	r3, [r7, #12]
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	2b0c      	cmp	r3, #12
 80057ca:	d83a      	bhi.n	8005842 <HAL_RCCEx_GetPeriphCLKFreq+0x76a>
 80057cc:	a201      	add	r2, pc, #4	; (adr r2, 80057d4 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>)
 80057ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057d2:	bf00      	nop
 80057d4:	08005809 	.word	0x08005809
 80057d8:	08005843 	.word	0x08005843
 80057dc:	08005843 	.word	0x08005843
 80057e0:	08005843 	.word	0x08005843
 80057e4:	08005811 	.word	0x08005811
 80057e8:	08005843 	.word	0x08005843
 80057ec:	08005843 	.word	0x08005843
 80057f0:	08005843 	.word	0x08005843
 80057f4:	08005819 	.word	0x08005819
 80057f8:	08005843 	.word	0x08005843
 80057fc:	08005843 	.word	0x08005843
 8005800:	08005843 	.word	0x08005843
 8005804:	0800582d 	.word	0x0800582d
          frequency = HAL_RCC_GetPCLK1Freq();
 8005808:	f7fe ffba 	bl	8004780 <HAL_RCC_GetPCLK1Freq>
 800580c:	61f8      	str	r0, [r7, #28]
          break;
 800580e:	e01d      	b.n	800584c <HAL_RCCEx_GetPeriphCLKFreq+0x774>
          frequency = HAL_RCC_GetSysClockFreq();
 8005810:	f7fe ff20 	bl	8004654 <HAL_RCC_GetSysClockFreq>
 8005814:	61f8      	str	r0, [r7, #28]
          break;
 8005816:	e019      	b.n	800584c <HAL_RCCEx_GetPeriphCLKFreq+0x774>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005818:	4b3b      	ldr	r3, [pc, #236]	; (8005908 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005820:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005824:	d10f      	bne.n	8005846 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
            frequency = HSI_VALUE;
 8005826:	4b3a      	ldr	r3, [pc, #232]	; (8005910 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8005828:	61fb      	str	r3, [r7, #28]
          break;
 800582a:	e00c      	b.n	8005846 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800582c:	4b36      	ldr	r3, [pc, #216]	; (8005908 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800582e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005832:	f003 0302 	and.w	r3, r3, #2
 8005836:	2b02      	cmp	r3, #2
 8005838:	d107      	bne.n	800584a <HAL_RCCEx_GetPeriphCLKFreq+0x772>
            frequency = LSE_VALUE;
 800583a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800583e:	61fb      	str	r3, [r7, #28]
          break;
 8005840:	e003      	b.n	800584a <HAL_RCCEx_GetPeriphCLKFreq+0x772>
          break;
 8005842:	bf00      	nop
 8005844:	e35e      	b.n	8005f04 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005846:	bf00      	nop
 8005848:	e35c      	b.n	8005f04 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800584a:	bf00      	nop
        break;
 800584c:	e35a      	b.n	8005f04 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800584e:	4b2e      	ldr	r3, [pc, #184]	; (8005908 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005850:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005854:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005858:	60fb      	str	r3, [r7, #12]
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	2b30      	cmp	r3, #48	; 0x30
 800585e:	d021      	beq.n	80058a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	2b30      	cmp	r3, #48	; 0x30
 8005864:	d829      	bhi.n	80058ba <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	2b20      	cmp	r3, #32
 800586a:	d011      	beq.n	8005890 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	2b20      	cmp	r3, #32
 8005870:	d823      	bhi.n	80058ba <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d003      	beq.n	8005880 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	2b10      	cmp	r3, #16
 800587c:	d004      	beq.n	8005888 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>
          break;
 800587e:	e01c      	b.n	80058ba <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005880:	f7fe ff7e 	bl	8004780 <HAL_RCC_GetPCLK1Freq>
 8005884:	61f8      	str	r0, [r7, #28]
          break;
 8005886:	e01d      	b.n	80058c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ec>
          frequency = HAL_RCC_GetSysClockFreq();
 8005888:	f7fe fee4 	bl	8004654 <HAL_RCC_GetSysClockFreq>
 800588c:	61f8      	str	r0, [r7, #28]
          break;
 800588e:	e019      	b.n	80058c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ec>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005890:	4b1d      	ldr	r3, [pc, #116]	; (8005908 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005898:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800589c:	d10f      	bne.n	80058be <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
            frequency = HSI_VALUE;
 800589e:	4b1c      	ldr	r3, [pc, #112]	; (8005910 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 80058a0:	61fb      	str	r3, [r7, #28]
          break;
 80058a2:	e00c      	b.n	80058be <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80058a4:	4b18      	ldr	r3, [pc, #96]	; (8005908 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80058a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058aa:	f003 0302 	and.w	r3, r3, #2
 80058ae:	2b02      	cmp	r3, #2
 80058b0:	d107      	bne.n	80058c2 <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
            frequency = LSE_VALUE;
 80058b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80058b6:	61fb      	str	r3, [r7, #28]
          break;
 80058b8:	e003      	b.n	80058c2 <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
          break;
 80058ba:	bf00      	nop
 80058bc:	e322      	b.n	8005f04 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80058be:	bf00      	nop
 80058c0:	e320      	b.n	8005f04 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80058c2:	bf00      	nop
        break;
 80058c4:	e31e      	b.n	8005f04 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 80058c6:	4b10      	ldr	r3, [pc, #64]	; (8005908 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80058c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058cc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80058d0:	60fb      	str	r3, [r7, #12]
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	2bc0      	cmp	r3, #192	; 0xc0
 80058d6:	d027      	beq.n	8005928 <HAL_RCCEx_GetPeriphCLKFreq+0x850>
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	2bc0      	cmp	r3, #192	; 0xc0
 80058dc:	d82f      	bhi.n	800593e <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	2b80      	cmp	r3, #128	; 0x80
 80058e2:	d017      	beq.n	8005914 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	2b80      	cmp	r3, #128	; 0x80
 80058e8:	d829      	bhi.n	800593e <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d003      	beq.n	80058f8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	2b40      	cmp	r3, #64	; 0x40
 80058f4:	d004      	beq.n	8005900 <HAL_RCCEx_GetPeriphCLKFreq+0x828>
          break;
 80058f6:	e022      	b.n	800593e <HAL_RCCEx_GetPeriphCLKFreq+0x866>
          frequency = HAL_RCC_GetPCLK1Freq();
 80058f8:	f7fe ff42 	bl	8004780 <HAL_RCC_GetPCLK1Freq>
 80058fc:	61f8      	str	r0, [r7, #28]
          break;
 80058fe:	e023      	b.n	8005948 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
          frequency = HAL_RCC_GetSysClockFreq();
 8005900:	f7fe fea8 	bl	8004654 <HAL_RCC_GetSysClockFreq>
 8005904:	61f8      	str	r0, [r7, #28]
          break;
 8005906:	e01f      	b.n	8005948 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
 8005908:	40021000 	.word	0x40021000
 800590c:	02dc6c00 	.word	0x02dc6c00
 8005910:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005914:	4b9b      	ldr	r3, [pc, #620]	; (8005b84 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800591c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005920:	d10f      	bne.n	8005942 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
            frequency = HSI_VALUE;
 8005922:	4b99      	ldr	r3, [pc, #612]	; (8005b88 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005924:	61fb      	str	r3, [r7, #28]
          break;
 8005926:	e00c      	b.n	8005942 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005928:	4b96      	ldr	r3, [pc, #600]	; (8005b84 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 800592a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800592e:	f003 0302 	and.w	r3, r3, #2
 8005932:	2b02      	cmp	r3, #2
 8005934:	d107      	bne.n	8005946 <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
            frequency = LSE_VALUE;
 8005936:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800593a:	61fb      	str	r3, [r7, #28]
          break;
 800593c:	e003      	b.n	8005946 <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
          break;
 800593e:	bf00      	nop
 8005940:	e2e0      	b.n	8005f04 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005942:	bf00      	nop
 8005944:	e2de      	b.n	8005f04 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005946:	bf00      	nop
        break;
 8005948:	e2dc      	b.n	8005f04 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800594a:	4b8e      	ldr	r3, [pc, #568]	; (8005b84 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 800594c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005950:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005954:	60fb      	str	r3, [r7, #12]
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800595c:	d025      	beq.n	80059aa <HAL_RCCEx_GetPeriphCLKFreq+0x8d2>
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005964:	d82c      	bhi.n	80059c0 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800596c:	d013      	beq.n	8005996 <HAL_RCCEx_GetPeriphCLKFreq+0x8be>
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005974:	d824      	bhi.n	80059c0 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d004      	beq.n	8005986 <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005982:	d004      	beq.n	800598e <HAL_RCCEx_GetPeriphCLKFreq+0x8b6>
          break;
 8005984:	e01c      	b.n	80059c0 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005986:	f7fe fefb 	bl	8004780 <HAL_RCC_GetPCLK1Freq>
 800598a:	61f8      	str	r0, [r7, #28]
          break;
 800598c:	e01d      	b.n	80059ca <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
          frequency = HAL_RCC_GetSysClockFreq();
 800598e:	f7fe fe61 	bl	8004654 <HAL_RCC_GetSysClockFreq>
 8005992:	61f8      	str	r0, [r7, #28]
          break;
 8005994:	e019      	b.n	80059ca <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005996:	4b7b      	ldr	r3, [pc, #492]	; (8005b84 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800599e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059a2:	d10f      	bne.n	80059c4 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
            frequency = HSI_VALUE;
 80059a4:	4b78      	ldr	r3, [pc, #480]	; (8005b88 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80059a6:	61fb      	str	r3, [r7, #28]
          break;
 80059a8:	e00c      	b.n	80059c4 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80059aa:	4b76      	ldr	r3, [pc, #472]	; (8005b84 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80059ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059b0:	f003 0302 	and.w	r3, r3, #2
 80059b4:	2b02      	cmp	r3, #2
 80059b6:	d107      	bne.n	80059c8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
            frequency = LSE_VALUE;
 80059b8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80059bc:	61fb      	str	r3, [r7, #28]
          break;
 80059be:	e003      	b.n	80059c8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          break;
 80059c0:	bf00      	nop
 80059c2:	e29f      	b.n	8005f04 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80059c4:	bf00      	nop
 80059c6:	e29d      	b.n	8005f04 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80059c8:	bf00      	nop
        break;
 80059ca:	e29b      	b.n	8005f04 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 80059cc:	4b6d      	ldr	r3, [pc, #436]	; (8005b84 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80059ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059d2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80059d6:	60fb      	str	r3, [r7, #12]
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80059de:	d025      	beq.n	8005a2c <HAL_RCCEx_GetPeriphCLKFreq+0x954>
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80059e6:	d82c      	bhi.n	8005a42 <HAL_RCCEx_GetPeriphCLKFreq+0x96a>
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80059ee:	d013      	beq.n	8005a18 <HAL_RCCEx_GetPeriphCLKFreq+0x940>
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80059f6:	d824      	bhi.n	8005a42 <HAL_RCCEx_GetPeriphCLKFreq+0x96a>
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d004      	beq.n	8005a08 <HAL_RCCEx_GetPeriphCLKFreq+0x930>
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a04:	d004      	beq.n	8005a10 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
          break;
 8005a06:	e01c      	b.n	8005a42 <HAL_RCCEx_GetPeriphCLKFreq+0x96a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005a08:	f7fe feba 	bl	8004780 <HAL_RCC_GetPCLK1Freq>
 8005a0c:	61f8      	str	r0, [r7, #28]
          break;
 8005a0e:	e01d      	b.n	8005a4c <HAL_RCCEx_GetPeriphCLKFreq+0x974>
          frequency = HAL_RCC_GetSysClockFreq();
 8005a10:	f7fe fe20 	bl	8004654 <HAL_RCC_GetSysClockFreq>
 8005a14:	61f8      	str	r0, [r7, #28]
          break;
 8005a16:	e019      	b.n	8005a4c <HAL_RCCEx_GetPeriphCLKFreq+0x974>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005a18:	4b5a      	ldr	r3, [pc, #360]	; (8005b84 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a24:	d10f      	bne.n	8005a46 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
            frequency = HSI_VALUE;
 8005a26:	4b58      	ldr	r3, [pc, #352]	; (8005b88 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005a28:	61fb      	str	r3, [r7, #28]
          break;
 8005a2a:	e00c      	b.n	8005a46 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005a2c:	4b55      	ldr	r3, [pc, #340]	; (8005b84 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8005a2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a32:	f003 0302 	and.w	r3, r3, #2
 8005a36:	2b02      	cmp	r3, #2
 8005a38:	d107      	bne.n	8005a4a <HAL_RCCEx_GetPeriphCLKFreq+0x972>
            frequency = LSE_VALUE;
 8005a3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a3e:	61fb      	str	r3, [r7, #28]
          break;
 8005a40:	e003      	b.n	8005a4a <HAL_RCCEx_GetPeriphCLKFreq+0x972>
          break;
 8005a42:	bf00      	nop
 8005a44:	e25e      	b.n	8005f04 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005a46:	bf00      	nop
 8005a48:	e25c      	b.n	8005f04 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005a4a:	bf00      	nop
        break;
 8005a4c:	e25a      	b.n	8005f04 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8005a4e:	4b4d      	ldr	r3, [pc, #308]	; (8005b84 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8005a50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a54:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005a58:	60fb      	str	r3, [r7, #12]
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005a60:	d007      	beq.n	8005a72 <HAL_RCCEx_GetPeriphCLKFreq+0x99a>
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005a68:	d12f      	bne.n	8005aca <HAL_RCCEx_GetPeriphCLKFreq+0x9f2>
          frequency = HAL_RCC_GetSysClockFreq();
 8005a6a:	f7fe fdf3 	bl	8004654 <HAL_RCC_GetSysClockFreq>
 8005a6e:	61f8      	str	r0, [r7, #28]
          break;
 8005a70:	e02e      	b.n	8005ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x9f8>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 8005a72:	4b44      	ldr	r3, [pc, #272]	; (8005b84 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a7a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005a7e:	d126      	bne.n	8005ace <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
 8005a80:	4b40      	ldr	r3, [pc, #256]	; (8005b84 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8005a82:	691b      	ldr	r3, [r3, #16]
 8005a84:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d020      	beq.n	8005ace <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8005a8c:	4b3d      	ldr	r3, [pc, #244]	; (8005b84 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8005a8e:	691b      	ldr	r3, [r3, #16]
 8005a90:	0a1b      	lsrs	r3, r3, #8
 8005a92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a96:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8005a98:	69bb      	ldr	r3, [r7, #24]
 8005a9a:	68ba      	ldr	r2, [r7, #8]
 8005a9c:	fb03 f202 	mul.w	r2, r3, r2
 8005aa0:	4b38      	ldr	r3, [pc, #224]	; (8005b84 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8005aa2:	691b      	ldr	r3, [r3, #16]
 8005aa4:	091b      	lsrs	r3, r3, #4
 8005aa6:	f003 030f 	and.w	r3, r3, #15
 8005aaa:	3301      	adds	r3, #1
 8005aac:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ab0:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 8005ab2:	4b34      	ldr	r3, [pc, #208]	; (8005b84 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8005ab4:	691b      	ldr	r3, [r3, #16]
 8005ab6:	0e5b      	lsrs	r3, r3, #25
 8005ab8:	f003 0303 	and.w	r3, r3, #3
 8005abc:	3301      	adds	r3, #1
 8005abe:	005b      	lsls	r3, r3, #1
 8005ac0:	69ba      	ldr	r2, [r7, #24]
 8005ac2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ac6:	61fb      	str	r3, [r7, #28]
          break;
 8005ac8:	e001      	b.n	8005ace <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
          break;
 8005aca:	bf00      	nop
 8005acc:	e21a      	b.n	8005f04 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005ace:	bf00      	nop
        break;
 8005ad0:	e218      	b.n	8005f04 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 8005ad2:	4b2c      	ldr	r3, [pc, #176]	; (8005b84 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8005ad4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005ad8:	f003 0304 	and.w	r3, r3, #4
 8005adc:	60fb      	str	r3, [r7, #12]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d103      	bne.n	8005aec <HAL_RCCEx_GetPeriphCLKFreq+0xa14>
          frequency = HAL_RCC_GetPCLK2Freq();
 8005ae4:	f7fe fe62 	bl	80047ac <HAL_RCC_GetPCLK2Freq>
 8005ae8:	61f8      	str	r0, [r7, #28]
        break;
 8005aea:	e20b      	b.n	8005f04 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          frequency = HAL_RCC_GetSysClockFreq();
 8005aec:	f7fe fdb2 	bl	8004654 <HAL_RCC_GetSysClockFreq>
 8005af0:	61f8      	str	r0, [r7, #28]
        break;
 8005af2:	e207      	b.n	8005f04 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
 8005af4:	4b23      	ldr	r3, [pc, #140]	; (8005b84 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8005af6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005afa:	f003 0318 	and.w	r3, r3, #24
 8005afe:	60fb      	str	r3, [r7, #12]
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	2b10      	cmp	r3, #16
 8005b04:	d010      	beq.n	8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0xa50>
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	2b10      	cmp	r3, #16
 8005b0a:	d834      	bhi.n	8005b76 <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d003      	beq.n	8005b1a <HAL_RCCEx_GetPeriphCLKFreq+0xa42>
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	2b08      	cmp	r3, #8
 8005b16:	d024      	beq.n	8005b62 <HAL_RCCEx_GetPeriphCLKFreq+0xa8a>
          break;
 8005b18:	e02d      	b.n	8005b76 <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
          frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8005b1a:	69b9      	ldr	r1, [r7, #24]
 8005b1c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8005b20:	f000 fbe2 	bl	80062e8 <RCCEx_GetSAIxPeriphCLKFreq>
 8005b24:	61f8      	str	r0, [r7, #28]
          break;
 8005b26:	e02b      	b.n	8005b80 <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8005b28:	4b16      	ldr	r3, [pc, #88]	; (8005b84 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f003 0302 	and.w	r3, r3, #2
 8005b30:	2b02      	cmp	r3, #2
 8005b32:	d122      	bne.n	8005b7a <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8005b34:	4b13      	ldr	r3, [pc, #76]	; (8005b84 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f003 0308 	and.w	r3, r3, #8
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d005      	beq.n	8005b4c <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
 8005b40:	4b10      	ldr	r3, [pc, #64]	; (8005b84 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	091b      	lsrs	r3, r3, #4
 8005b46:	f003 030f 	and.w	r3, r3, #15
 8005b4a:	e005      	b.n	8005b58 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 8005b4c:	4b0d      	ldr	r3, [pc, #52]	; (8005b84 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8005b4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005b52:	0a1b      	lsrs	r3, r3, #8
 8005b54:	f003 030f 	and.w	r3, r3, #15
 8005b58:	4a0c      	ldr	r2, [pc, #48]	; (8005b8c <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8005b5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b5e:	61fb      	str	r3, [r7, #28]
          break;
 8005b60:	e00b      	b.n	8005b7a <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005b62:	4b08      	ldr	r3, [pc, #32]	; (8005b84 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b6e:	d106      	bne.n	8005b7e <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
            frequency = HSI_VALUE;
 8005b70:	4b05      	ldr	r3, [pc, #20]	; (8005b88 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005b72:	61fb      	str	r3, [r7, #28]
          break;
 8005b74:	e003      	b.n	8005b7e <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
          break;
 8005b76:	bf00      	nop
 8005b78:	e1c4      	b.n	8005f04 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005b7a:	bf00      	nop
 8005b7c:	e1c2      	b.n	8005f04 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005b7e:	bf00      	nop
        break;
 8005b80:	e1c0      	b.n	8005f04 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
 8005b82:	bf00      	nop
 8005b84:	40021000 	.word	0x40021000
 8005b88:	00f42400 	.word	0x00f42400
 8005b8c:	0800d764 	.word	0x0800d764
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8005b90:	4b96      	ldr	r3, [pc, #600]	; (8005dec <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8005b92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b96:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005b9a:	60fb      	str	r3, [r7, #12]
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ba2:	d013      	beq.n	8005bcc <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005baa:	d819      	bhi.n	8005be0 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d004      	beq.n	8005bbc <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bb8:	d004      	beq.n	8005bc4 <HAL_RCCEx_GetPeriphCLKFreq+0xaec>
          break;
 8005bba:	e011      	b.n	8005be0 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005bbc:	f7fe fde0 	bl	8004780 <HAL_RCC_GetPCLK1Freq>
 8005bc0:	61f8      	str	r0, [r7, #28]
          break;
 8005bc2:	e010      	b.n	8005be6 <HAL_RCCEx_GetPeriphCLKFreq+0xb0e>
          frequency = HAL_RCC_GetSysClockFreq();
 8005bc4:	f7fe fd46 	bl	8004654 <HAL_RCC_GetSysClockFreq>
 8005bc8:	61f8      	str	r0, [r7, #28]
          break;
 8005bca:	e00c      	b.n	8005be6 <HAL_RCCEx_GetPeriphCLKFreq+0xb0e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005bcc:	4b87      	ldr	r3, [pc, #540]	; (8005dec <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005bd4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005bd8:	d104      	bne.n	8005be4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
            frequency = HSI_VALUE;
 8005bda:	4b85      	ldr	r3, [pc, #532]	; (8005df0 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005bdc:	61fb      	str	r3, [r7, #28]
          break;
 8005bde:	e001      	b.n	8005be4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
          break;
 8005be0:	bf00      	nop
 8005be2:	e18f      	b.n	8005f04 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005be4:	bf00      	nop
        break;
 8005be6:	e18d      	b.n	8005f04 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8005be8:	4b80      	ldr	r3, [pc, #512]	; (8005dec <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8005bea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bee:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005bf2:	60fb      	str	r3, [r7, #12]
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005bfa:	d013      	beq.n	8005c24 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c02:	d819      	bhi.n	8005c38 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d004      	beq.n	8005c14 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005c10:	d004      	beq.n	8005c1c <HAL_RCCEx_GetPeriphCLKFreq+0xb44>
          break;
 8005c12:	e011      	b.n	8005c38 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005c14:	f7fe fdb4 	bl	8004780 <HAL_RCC_GetPCLK1Freq>
 8005c18:	61f8      	str	r0, [r7, #28]
          break;
 8005c1a:	e010      	b.n	8005c3e <HAL_RCCEx_GetPeriphCLKFreq+0xb66>
          frequency = HAL_RCC_GetSysClockFreq();
 8005c1c:	f7fe fd1a 	bl	8004654 <HAL_RCC_GetSysClockFreq>
 8005c20:	61f8      	str	r0, [r7, #28]
          break;
 8005c22:	e00c      	b.n	8005c3e <HAL_RCCEx_GetPeriphCLKFreq+0xb66>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005c24:	4b71      	ldr	r3, [pc, #452]	; (8005dec <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c30:	d104      	bne.n	8005c3c <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
            frequency = HSI_VALUE;
 8005c32:	4b6f      	ldr	r3, [pc, #444]	; (8005df0 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005c34:	61fb      	str	r3, [r7, #28]
          break;
 8005c36:	e001      	b.n	8005c3c <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
          break;
 8005c38:	bf00      	nop
 8005c3a:	e163      	b.n	8005f04 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005c3c:	bf00      	nop
        break;
 8005c3e:	e161      	b.n	8005f04 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8005c40:	4b6a      	ldr	r3, [pc, #424]	; (8005dec <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8005c42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c46:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005c4a:	60fb      	str	r3, [r7, #12]
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005c52:	d013      	beq.n	8005c7c <HAL_RCCEx_GetPeriphCLKFreq+0xba4>
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005c5a:	d819      	bhi.n	8005c90 <HAL_RCCEx_GetPeriphCLKFreq+0xbb8>
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d004      	beq.n	8005c6c <HAL_RCCEx_GetPeriphCLKFreq+0xb94>
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c68:	d004      	beq.n	8005c74 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>
          break;
 8005c6a:	e011      	b.n	8005c90 <HAL_RCCEx_GetPeriphCLKFreq+0xbb8>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005c6c:	f7fe fd88 	bl	8004780 <HAL_RCC_GetPCLK1Freq>
 8005c70:	61f8      	str	r0, [r7, #28]
          break;
 8005c72:	e010      	b.n	8005c96 <HAL_RCCEx_GetPeriphCLKFreq+0xbbe>
          frequency = HAL_RCC_GetSysClockFreq();
 8005c74:	f7fe fcee 	bl	8004654 <HAL_RCC_GetSysClockFreq>
 8005c78:	61f8      	str	r0, [r7, #28]
          break;
 8005c7a:	e00c      	b.n	8005c96 <HAL_RCCEx_GetPeriphCLKFreq+0xbbe>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005c7c:	4b5b      	ldr	r3, [pc, #364]	; (8005dec <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c88:	d104      	bne.n	8005c94 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
            frequency = HSI_VALUE;
 8005c8a:	4b59      	ldr	r3, [pc, #356]	; (8005df0 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005c8c:	61fb      	str	r3, [r7, #28]
          break;
 8005c8e:	e001      	b.n	8005c94 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
          break;
 8005c90:	bf00      	nop
 8005c92:	e137      	b.n	8005f04 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005c94:	bf00      	nop
        break;
 8005c96:	e135      	b.n	8005f04 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8005c98:	4b54      	ldr	r3, [pc, #336]	; (8005dec <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8005c9a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005c9e:	f003 0303 	and.w	r3, r3, #3
 8005ca2:	60fb      	str	r3, [r7, #12]
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	2b02      	cmp	r3, #2
 8005ca8:	d011      	beq.n	8005cce <HAL_RCCEx_GetPeriphCLKFreq+0xbf6>
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	2b02      	cmp	r3, #2
 8005cae:	d818      	bhi.n	8005ce2 <HAL_RCCEx_GetPeriphCLKFreq+0xc0a>
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d003      	beq.n	8005cbe <HAL_RCCEx_GetPeriphCLKFreq+0xbe6>
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	2b01      	cmp	r3, #1
 8005cba:	d004      	beq.n	8005cc6 <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
          break;
 8005cbc:	e011      	b.n	8005ce2 <HAL_RCCEx_GetPeriphCLKFreq+0xc0a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005cbe:	f7fe fd5f 	bl	8004780 <HAL_RCC_GetPCLK1Freq>
 8005cc2:	61f8      	str	r0, [r7, #28]
          break;
 8005cc4:	e010      	b.n	8005ce8 <HAL_RCCEx_GetPeriphCLKFreq+0xc10>
          frequency = HAL_RCC_GetSysClockFreq();
 8005cc6:	f7fe fcc5 	bl	8004654 <HAL_RCC_GetSysClockFreq>
 8005cca:	61f8      	str	r0, [r7, #28]
          break;
 8005ccc:	e00c      	b.n	8005ce8 <HAL_RCCEx_GetPeriphCLKFreq+0xc10>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005cce:	4b47      	ldr	r3, [pc, #284]	; (8005dec <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005cd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005cda:	d104      	bne.n	8005ce6 <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
            frequency = HSI_VALUE;
 8005cdc:	4b44      	ldr	r3, [pc, #272]	; (8005df0 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005cde:	61fb      	str	r3, [r7, #28]
          break;
 8005ce0:	e001      	b.n	8005ce6 <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
          break;
 8005ce2:	bf00      	nop
 8005ce4:	e10e      	b.n	8005f04 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005ce6:	bf00      	nop
        break;
 8005ce8:	e10c      	b.n	8005f04 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8005cea:	4b40      	ldr	r3, [pc, #256]	; (8005dec <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8005cec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cf0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8005cf4:	60fb      	str	r3, [r7, #12]
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005cfc:	d02c      	beq.n	8005d58 <HAL_RCCEx_GetPeriphCLKFreq+0xc80>
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005d04:	d833      	bhi.n	8005d6e <HAL_RCCEx_GetPeriphCLKFreq+0xc96>
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005d0c:	d01a      	beq.n	8005d44 <HAL_RCCEx_GetPeriphCLKFreq+0xc6c>
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005d14:	d82b      	bhi.n	8005d6e <HAL_RCCEx_GetPeriphCLKFreq+0xc96>
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d004      	beq.n	8005d26 <HAL_RCCEx_GetPeriphCLKFreq+0xc4e>
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005d22:	d004      	beq.n	8005d2e <HAL_RCCEx_GetPeriphCLKFreq+0xc56>
          break;
 8005d24:	e023      	b.n	8005d6e <HAL_RCCEx_GetPeriphCLKFreq+0xc96>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005d26:	f7fe fd2b 	bl	8004780 <HAL_RCC_GetPCLK1Freq>
 8005d2a:	61f8      	str	r0, [r7, #28]
          break;
 8005d2c:	e026      	b.n	8005d7c <HAL_RCCEx_GetPeriphCLKFreq+0xca4>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8005d2e:	4b2f      	ldr	r3, [pc, #188]	; (8005dec <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8005d30:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005d34:	f003 0302 	and.w	r3, r3, #2
 8005d38:	2b02      	cmp	r3, #2
 8005d3a:	d11a      	bne.n	8005d72 <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
              frequency = LSI_VALUE;
 8005d3c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8005d40:	61fb      	str	r3, [r7, #28]
          break;
 8005d42:	e016      	b.n	8005d72 <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005d44:	4b29      	ldr	r3, [pc, #164]	; (8005dec <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d50:	d111      	bne.n	8005d76 <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
            frequency = HSI_VALUE;
 8005d52:	4b27      	ldr	r3, [pc, #156]	; (8005df0 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005d54:	61fb      	str	r3, [r7, #28]
          break;
 8005d56:	e00e      	b.n	8005d76 <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005d58:	4b24      	ldr	r3, [pc, #144]	; (8005dec <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8005d5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d5e:	f003 0302 	and.w	r3, r3, #2
 8005d62:	2b02      	cmp	r3, #2
 8005d64:	d109      	bne.n	8005d7a <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
            frequency = LSE_VALUE;
 8005d66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d6a:	61fb      	str	r3, [r7, #28]
          break;
 8005d6c:	e005      	b.n	8005d7a <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
          break;
 8005d6e:	bf00      	nop
 8005d70:	e0c8      	b.n	8005f04 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005d72:	bf00      	nop
 8005d74:	e0c6      	b.n	8005f04 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005d76:	bf00      	nop
 8005d78:	e0c4      	b.n	8005f04 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005d7a:	bf00      	nop
        break;
 8005d7c:	e0c2      	b.n	8005f04 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8005d7e:	4b1b      	ldr	r3, [pc, #108]	; (8005dec <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8005d80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d84:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005d88:	60fb      	str	r3, [r7, #12]
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005d90:	d030      	beq.n	8005df4 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005d98:	d837      	bhi.n	8005e0a <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005da0:	d01a      	beq.n	8005dd8 <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005da8:	d82f      	bhi.n	8005e0a <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d004      	beq.n	8005dba <HAL_RCCEx_GetPeriphCLKFreq+0xce2>
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005db6:	d004      	beq.n	8005dc2 <HAL_RCCEx_GetPeriphCLKFreq+0xcea>
          break;
 8005db8:	e027      	b.n	8005e0a <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005dba:	f7fe fce1 	bl	8004780 <HAL_RCC_GetPCLK1Freq>
 8005dbe:	61f8      	str	r0, [r7, #28]
          break;
 8005dc0:	e02a      	b.n	8005e18 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8005dc2:	4b0a      	ldr	r3, [pc, #40]	; (8005dec <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8005dc4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005dc8:	f003 0302 	and.w	r3, r3, #2
 8005dcc:	2b02      	cmp	r3, #2
 8005dce:	d11e      	bne.n	8005e0e <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
              frequency = LSI_VALUE;
 8005dd0:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8005dd4:	61fb      	str	r3, [r7, #28]
          break;
 8005dd6:	e01a      	b.n	8005e0e <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005dd8:	4b04      	ldr	r3, [pc, #16]	; (8005dec <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005de0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005de4:	d115      	bne.n	8005e12 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
            frequency = HSI_VALUE;
 8005de6:	4b02      	ldr	r3, [pc, #8]	; (8005df0 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005de8:	61fb      	str	r3, [r7, #28]
          break;
 8005dea:	e012      	b.n	8005e12 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
 8005dec:	40021000 	.word	0x40021000
 8005df0:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005df4:	4b46      	ldr	r3, [pc, #280]	; (8005f10 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8005df6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dfa:	f003 0302 	and.w	r3, r3, #2
 8005dfe:	2b02      	cmp	r3, #2
 8005e00:	d109      	bne.n	8005e16 <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
            frequency = LSE_VALUE;
 8005e02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e06:	61fb      	str	r3, [r7, #28]
          break;
 8005e08:	e005      	b.n	8005e16 <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
          break;
 8005e0a:	bf00      	nop
 8005e0c:	e07a      	b.n	8005f04 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005e0e:	bf00      	nop
 8005e10:	e078      	b.n	8005f04 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005e12:	bf00      	nop
 8005e14:	e076      	b.n	8005f04 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005e16:	bf00      	nop
        break;
 8005e18:	e074      	b.n	8005f04 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8005e1a:	4b3d      	ldr	r3, [pc, #244]	; (8005f10 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8005e1c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005e20:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005e24:	60fb      	str	r3, [r7, #12]
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005e2c:	d02c      	beq.n	8005e88 <HAL_RCCEx_GetPeriphCLKFreq+0xdb0>
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005e34:	d855      	bhi.n	8005ee2 <HAL_RCCEx_GetPeriphCLKFreq+0xe0a>
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d004      	beq.n	8005e46 <HAL_RCCEx_GetPeriphCLKFreq+0xd6e>
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e42:	d004      	beq.n	8005e4e <HAL_RCCEx_GetPeriphCLKFreq+0xd76>
          break;
 8005e44:	e04d      	b.n	8005ee2 <HAL_RCCEx_GetPeriphCLKFreq+0xe0a>
          frequency = HAL_RCC_GetSysClockFreq();
 8005e46:	f7fe fc05 	bl	8004654 <HAL_RCC_GetSysClockFreq>
 8005e4a:	61f8      	str	r0, [r7, #28]
          break;
 8005e4c:	e04e      	b.n	8005eec <HAL_RCCEx_GetPeriphCLKFreq+0xe14>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8005e4e:	4b30      	ldr	r3, [pc, #192]	; (8005f10 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f003 0302 	and.w	r3, r3, #2
 8005e56:	2b02      	cmp	r3, #2
 8005e58:	d145      	bne.n	8005ee6 <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8005e5a:	4b2d      	ldr	r3, [pc, #180]	; (8005f10 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f003 0308 	and.w	r3, r3, #8
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d005      	beq.n	8005e72 <HAL_RCCEx_GetPeriphCLKFreq+0xd9a>
 8005e66:	4b2a      	ldr	r3, [pc, #168]	; (8005f10 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	091b      	lsrs	r3, r3, #4
 8005e6c:	f003 030f 	and.w	r3, r3, #15
 8005e70:	e005      	b.n	8005e7e <HAL_RCCEx_GetPeriphCLKFreq+0xda6>
 8005e72:	4b27      	ldr	r3, [pc, #156]	; (8005f10 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8005e74:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005e78:	0a1b      	lsrs	r3, r3, #8
 8005e7a:	f003 030f 	and.w	r3, r3, #15
 8005e7e:	4a25      	ldr	r2, [pc, #148]	; (8005f14 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8005e80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e84:	61fb      	str	r3, [r7, #28]
          break;
 8005e86:	e02e      	b.n	8005ee6 <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8005e88:	4b21      	ldr	r3, [pc, #132]	; (8005f10 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e90:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005e94:	d129      	bne.n	8005eea <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8005e96:	4b1e      	ldr	r3, [pc, #120]	; (8005f10 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8005e98:	68db      	ldr	r3, [r3, #12]
 8005e9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005e9e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ea2:	d122      	bne.n	8005eea <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8005ea4:	4b1a      	ldr	r3, [pc, #104]	; (8005f10 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8005ea6:	68db      	ldr	r3, [r3, #12]
 8005ea8:	0a1b      	lsrs	r3, r3, #8
 8005eaa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005eae:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005eb0:	69bb      	ldr	r3, [r7, #24]
 8005eb2:	68ba      	ldr	r2, [r7, #8]
 8005eb4:	fb03 f202 	mul.w	r2, r3, r2
 8005eb8:	4b15      	ldr	r3, [pc, #84]	; (8005f10 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8005eba:	68db      	ldr	r3, [r3, #12]
 8005ebc:	091b      	lsrs	r3, r3, #4
 8005ebe:	f003 030f 	and.w	r3, r3, #15
 8005ec2:	3301      	adds	r3, #1
 8005ec4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ec8:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8005eca:	4b11      	ldr	r3, [pc, #68]	; (8005f10 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8005ecc:	68db      	ldr	r3, [r3, #12]
 8005ece:	0d5b      	lsrs	r3, r3, #21
 8005ed0:	f003 0303 	and.w	r3, r3, #3
 8005ed4:	3301      	adds	r3, #1
 8005ed6:	005b      	lsls	r3, r3, #1
 8005ed8:	69ba      	ldr	r2, [r7, #24]
 8005eda:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ede:	61fb      	str	r3, [r7, #28]
          break;
 8005ee0:	e003      	b.n	8005eea <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
          break;
 8005ee2:	bf00      	nop
 8005ee4:	e00e      	b.n	8005f04 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005ee6:	bf00      	nop
 8005ee8:	e00c      	b.n	8005f04 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005eea:	bf00      	nop
        break;
 8005eec:	e00a      	b.n	8005f04 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 8005eee:	bf00      	nop
 8005ef0:	e008      	b.n	8005f04 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 8005ef2:	bf00      	nop
 8005ef4:	e006      	b.n	8005f04 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 8005ef6:	bf00      	nop
 8005ef8:	e004      	b.n	8005f04 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 8005efa:	bf00      	nop
 8005efc:	e002      	b.n	8005f04 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 8005efe:	bf00      	nop
 8005f00:	e000      	b.n	8005f04 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 8005f02:	bf00      	nop
    }
  }

  return(frequency);
 8005f04:	69fb      	ldr	r3, [r7, #28]
}
 8005f06:	4618      	mov	r0, r3
 8005f08:	3720      	adds	r7, #32
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	bd80      	pop	{r7, pc}
 8005f0e:	bf00      	nop
 8005f10:	40021000 	.word	0x40021000
 8005f14:	0800d764 	.word	0x0800d764

08005f18 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b084      	sub	sp, #16
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
 8005f20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005f22:	2300      	movs	r3, #0
 8005f24:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005f26:	4b72      	ldr	r3, [pc, #456]	; (80060f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005f28:	68db      	ldr	r3, [r3, #12]
 8005f2a:	f003 0303 	and.w	r3, r3, #3
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d00e      	beq.n	8005f50 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005f32:	4b6f      	ldr	r3, [pc, #444]	; (80060f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005f34:	68db      	ldr	r3, [r3, #12]
 8005f36:	f003 0203 	and.w	r2, r3, #3
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	429a      	cmp	r2, r3
 8005f40:	d103      	bne.n	8005f4a <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
       ||
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d142      	bne.n	8005fd0 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8005f4a:	2301      	movs	r3, #1
 8005f4c:	73fb      	strb	r3, [r7, #15]
 8005f4e:	e03f      	b.n	8005fd0 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	2b03      	cmp	r3, #3
 8005f56:	d018      	beq.n	8005f8a <RCCEx_PLLSAI1_Config+0x72>
 8005f58:	2b03      	cmp	r3, #3
 8005f5a:	d825      	bhi.n	8005fa8 <RCCEx_PLLSAI1_Config+0x90>
 8005f5c:	2b01      	cmp	r3, #1
 8005f5e:	d002      	beq.n	8005f66 <RCCEx_PLLSAI1_Config+0x4e>
 8005f60:	2b02      	cmp	r3, #2
 8005f62:	d009      	beq.n	8005f78 <RCCEx_PLLSAI1_Config+0x60>
 8005f64:	e020      	b.n	8005fa8 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005f66:	4b62      	ldr	r3, [pc, #392]	; (80060f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f003 0302 	and.w	r3, r3, #2
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d11d      	bne.n	8005fae <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8005f72:	2301      	movs	r3, #1
 8005f74:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005f76:	e01a      	b.n	8005fae <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005f78:	4b5d      	ldr	r3, [pc, #372]	; (80060f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d116      	bne.n	8005fb2 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8005f84:	2301      	movs	r3, #1
 8005f86:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005f88:	e013      	b.n	8005fb2 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005f8a:	4b59      	ldr	r3, [pc, #356]	; (80060f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d10f      	bne.n	8005fb6 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005f96:	4b56      	ldr	r3, [pc, #344]	; (80060f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d109      	bne.n	8005fb6 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8005fa2:	2301      	movs	r3, #1
 8005fa4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005fa6:	e006      	b.n	8005fb6 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8005fa8:	2301      	movs	r3, #1
 8005faa:	73fb      	strb	r3, [r7, #15]
      break;
 8005fac:	e004      	b.n	8005fb8 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005fae:	bf00      	nop
 8005fb0:	e002      	b.n	8005fb8 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005fb2:	bf00      	nop
 8005fb4:	e000      	b.n	8005fb8 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005fb6:	bf00      	nop
    }

    if(status == HAL_OK)
 8005fb8:	7bfb      	ldrb	r3, [r7, #15]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d108      	bne.n	8005fd0 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8005fbe:	4b4c      	ldr	r3, [pc, #304]	; (80060f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005fc0:	68db      	ldr	r3, [r3, #12]
 8005fc2:	f023 0203 	bic.w	r2, r3, #3
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	4949      	ldr	r1, [pc, #292]	; (80060f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005fcc:	4313      	orrs	r3, r2
 8005fce:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8005fd0:	7bfb      	ldrb	r3, [r7, #15]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	f040 8086 	bne.w	80060e4 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005fd8:	4b45      	ldr	r3, [pc, #276]	; (80060f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	4a44      	ldr	r2, [pc, #272]	; (80060f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005fde:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005fe2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005fe4:	f7fb face 	bl	8001584 <HAL_GetTick>
 8005fe8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005fea:	e009      	b.n	8006000 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005fec:	f7fb faca 	bl	8001584 <HAL_GetTick>
 8005ff0:	4602      	mov	r2, r0
 8005ff2:	68bb      	ldr	r3, [r7, #8]
 8005ff4:	1ad3      	subs	r3, r2, r3
 8005ff6:	2b02      	cmp	r3, #2
 8005ff8:	d902      	bls.n	8006000 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8005ffa:	2303      	movs	r3, #3
 8005ffc:	73fb      	strb	r3, [r7, #15]
        break;
 8005ffe:	e005      	b.n	800600c <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006000:	4b3b      	ldr	r3, [pc, #236]	; (80060f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006008:	2b00      	cmp	r3, #0
 800600a:	d1ef      	bne.n	8005fec <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800600c:	7bfb      	ldrb	r3, [r7, #15]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d168      	bne.n	80060e4 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d113      	bne.n	8006040 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006018:	4b35      	ldr	r3, [pc, #212]	; (80060f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800601a:	691a      	ldr	r2, [r3, #16]
 800601c:	4b35      	ldr	r3, [pc, #212]	; (80060f4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800601e:	4013      	ands	r3, r2
 8006020:	687a      	ldr	r2, [r7, #4]
 8006022:	6892      	ldr	r2, [r2, #8]
 8006024:	0211      	lsls	r1, r2, #8
 8006026:	687a      	ldr	r2, [r7, #4]
 8006028:	68d2      	ldr	r2, [r2, #12]
 800602a:	06d2      	lsls	r2, r2, #27
 800602c:	4311      	orrs	r1, r2
 800602e:	687a      	ldr	r2, [r7, #4]
 8006030:	6852      	ldr	r2, [r2, #4]
 8006032:	3a01      	subs	r2, #1
 8006034:	0112      	lsls	r2, r2, #4
 8006036:	430a      	orrs	r2, r1
 8006038:	492d      	ldr	r1, [pc, #180]	; (80060f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800603a:	4313      	orrs	r3, r2
 800603c:	610b      	str	r3, [r1, #16]
 800603e:	e02d      	b.n	800609c <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	2b01      	cmp	r3, #1
 8006044:	d115      	bne.n	8006072 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006046:	4b2a      	ldr	r3, [pc, #168]	; (80060f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006048:	691a      	ldr	r2, [r3, #16]
 800604a:	4b2b      	ldr	r3, [pc, #172]	; (80060f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800604c:	4013      	ands	r3, r2
 800604e:	687a      	ldr	r2, [r7, #4]
 8006050:	6892      	ldr	r2, [r2, #8]
 8006052:	0211      	lsls	r1, r2, #8
 8006054:	687a      	ldr	r2, [r7, #4]
 8006056:	6912      	ldr	r2, [r2, #16]
 8006058:	0852      	lsrs	r2, r2, #1
 800605a:	3a01      	subs	r2, #1
 800605c:	0552      	lsls	r2, r2, #21
 800605e:	4311      	orrs	r1, r2
 8006060:	687a      	ldr	r2, [r7, #4]
 8006062:	6852      	ldr	r2, [r2, #4]
 8006064:	3a01      	subs	r2, #1
 8006066:	0112      	lsls	r2, r2, #4
 8006068:	430a      	orrs	r2, r1
 800606a:	4921      	ldr	r1, [pc, #132]	; (80060f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800606c:	4313      	orrs	r3, r2
 800606e:	610b      	str	r3, [r1, #16]
 8006070:	e014      	b.n	800609c <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006072:	4b1f      	ldr	r3, [pc, #124]	; (80060f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006074:	691a      	ldr	r2, [r3, #16]
 8006076:	4b21      	ldr	r3, [pc, #132]	; (80060fc <RCCEx_PLLSAI1_Config+0x1e4>)
 8006078:	4013      	ands	r3, r2
 800607a:	687a      	ldr	r2, [r7, #4]
 800607c:	6892      	ldr	r2, [r2, #8]
 800607e:	0211      	lsls	r1, r2, #8
 8006080:	687a      	ldr	r2, [r7, #4]
 8006082:	6952      	ldr	r2, [r2, #20]
 8006084:	0852      	lsrs	r2, r2, #1
 8006086:	3a01      	subs	r2, #1
 8006088:	0652      	lsls	r2, r2, #25
 800608a:	4311      	orrs	r1, r2
 800608c:	687a      	ldr	r2, [r7, #4]
 800608e:	6852      	ldr	r2, [r2, #4]
 8006090:	3a01      	subs	r2, #1
 8006092:	0112      	lsls	r2, r2, #4
 8006094:	430a      	orrs	r2, r1
 8006096:	4916      	ldr	r1, [pc, #88]	; (80060f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006098:	4313      	orrs	r3, r2
 800609a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800609c:	4b14      	ldr	r3, [pc, #80]	; (80060f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	4a13      	ldr	r2, [pc, #76]	; (80060f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80060a2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80060a6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060a8:	f7fb fa6c 	bl	8001584 <HAL_GetTick>
 80060ac:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80060ae:	e009      	b.n	80060c4 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80060b0:	f7fb fa68 	bl	8001584 <HAL_GetTick>
 80060b4:	4602      	mov	r2, r0
 80060b6:	68bb      	ldr	r3, [r7, #8]
 80060b8:	1ad3      	subs	r3, r2, r3
 80060ba:	2b02      	cmp	r3, #2
 80060bc:	d902      	bls.n	80060c4 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80060be:	2303      	movs	r3, #3
 80060c0:	73fb      	strb	r3, [r7, #15]
          break;
 80060c2:	e005      	b.n	80060d0 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80060c4:	4b0a      	ldr	r3, [pc, #40]	; (80060f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d0ef      	beq.n	80060b0 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80060d0:	7bfb      	ldrb	r3, [r7, #15]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d106      	bne.n	80060e4 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80060d6:	4b06      	ldr	r3, [pc, #24]	; (80060f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80060d8:	691a      	ldr	r2, [r3, #16]
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	699b      	ldr	r3, [r3, #24]
 80060de:	4904      	ldr	r1, [pc, #16]	; (80060f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80060e0:	4313      	orrs	r3, r2
 80060e2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80060e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80060e6:	4618      	mov	r0, r3
 80060e8:	3710      	adds	r7, #16
 80060ea:	46bd      	mov	sp, r7
 80060ec:	bd80      	pop	{r7, pc}
 80060ee:	bf00      	nop
 80060f0:	40021000 	.word	0x40021000
 80060f4:	07ff800f 	.word	0x07ff800f
 80060f8:	ff9f800f 	.word	0xff9f800f
 80060fc:	f9ff800f 	.word	0xf9ff800f

08006100 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8006100:	b580      	push	{r7, lr}
 8006102:	b084      	sub	sp, #16
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
 8006108:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800610a:	2300      	movs	r3, #0
 800610c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800610e:	4b72      	ldr	r3, [pc, #456]	; (80062d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006110:	68db      	ldr	r3, [r3, #12]
 8006112:	f003 0303 	and.w	r3, r3, #3
 8006116:	2b00      	cmp	r3, #0
 8006118:	d00e      	beq.n	8006138 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800611a:	4b6f      	ldr	r3, [pc, #444]	; (80062d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800611c:	68db      	ldr	r3, [r3, #12]
 800611e:	f003 0203 	and.w	r2, r3, #3
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	429a      	cmp	r2, r3
 8006128:	d103      	bne.n	8006132 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
       ||
 800612e:	2b00      	cmp	r3, #0
 8006130:	d142      	bne.n	80061b8 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8006132:	2301      	movs	r3, #1
 8006134:	73fb      	strb	r3, [r7, #15]
 8006136:	e03f      	b.n	80061b8 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	2b03      	cmp	r3, #3
 800613e:	d018      	beq.n	8006172 <RCCEx_PLLSAI2_Config+0x72>
 8006140:	2b03      	cmp	r3, #3
 8006142:	d825      	bhi.n	8006190 <RCCEx_PLLSAI2_Config+0x90>
 8006144:	2b01      	cmp	r3, #1
 8006146:	d002      	beq.n	800614e <RCCEx_PLLSAI2_Config+0x4e>
 8006148:	2b02      	cmp	r3, #2
 800614a:	d009      	beq.n	8006160 <RCCEx_PLLSAI2_Config+0x60>
 800614c:	e020      	b.n	8006190 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800614e:	4b62      	ldr	r3, [pc, #392]	; (80062d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f003 0302 	and.w	r3, r3, #2
 8006156:	2b00      	cmp	r3, #0
 8006158:	d11d      	bne.n	8006196 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 800615a:	2301      	movs	r3, #1
 800615c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800615e:	e01a      	b.n	8006196 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006160:	4b5d      	ldr	r3, [pc, #372]	; (80062d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006168:	2b00      	cmp	r3, #0
 800616a:	d116      	bne.n	800619a <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 800616c:	2301      	movs	r3, #1
 800616e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006170:	e013      	b.n	800619a <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006172:	4b59      	ldr	r3, [pc, #356]	; (80062d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800617a:	2b00      	cmp	r3, #0
 800617c:	d10f      	bne.n	800619e <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800617e:	4b56      	ldr	r3, [pc, #344]	; (80062d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006186:	2b00      	cmp	r3, #0
 8006188:	d109      	bne.n	800619e <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 800618a:	2301      	movs	r3, #1
 800618c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800618e:	e006      	b.n	800619e <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8006190:	2301      	movs	r3, #1
 8006192:	73fb      	strb	r3, [r7, #15]
      break;
 8006194:	e004      	b.n	80061a0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8006196:	bf00      	nop
 8006198:	e002      	b.n	80061a0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800619a:	bf00      	nop
 800619c:	e000      	b.n	80061a0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800619e:	bf00      	nop
    }

    if(status == HAL_OK)
 80061a0:	7bfb      	ldrb	r3, [r7, #15]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d108      	bne.n	80061b8 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 80061a6:	4b4c      	ldr	r3, [pc, #304]	; (80062d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80061a8:	68db      	ldr	r3, [r3, #12]
 80061aa:	f023 0203 	bic.w	r2, r3, #3
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	4949      	ldr	r1, [pc, #292]	; (80062d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80061b4:	4313      	orrs	r3, r2
 80061b6:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80061b8:	7bfb      	ldrb	r3, [r7, #15]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	f040 8086 	bne.w	80062cc <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80061c0:	4b45      	ldr	r3, [pc, #276]	; (80062d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	4a44      	ldr	r2, [pc, #272]	; (80062d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80061c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80061ca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80061cc:	f7fb f9da 	bl	8001584 <HAL_GetTick>
 80061d0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80061d2:	e009      	b.n	80061e8 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80061d4:	f7fb f9d6 	bl	8001584 <HAL_GetTick>
 80061d8:	4602      	mov	r2, r0
 80061da:	68bb      	ldr	r3, [r7, #8]
 80061dc:	1ad3      	subs	r3, r2, r3
 80061de:	2b02      	cmp	r3, #2
 80061e0:	d902      	bls.n	80061e8 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80061e2:	2303      	movs	r3, #3
 80061e4:	73fb      	strb	r3, [r7, #15]
        break;
 80061e6:	e005      	b.n	80061f4 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80061e8:	4b3b      	ldr	r3, [pc, #236]	; (80062d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d1ef      	bne.n	80061d4 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80061f4:	7bfb      	ldrb	r3, [r7, #15]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d168      	bne.n	80062cc <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d113      	bne.n	8006228 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006200:	4b35      	ldr	r3, [pc, #212]	; (80062d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006202:	695a      	ldr	r2, [r3, #20]
 8006204:	4b35      	ldr	r3, [pc, #212]	; (80062dc <RCCEx_PLLSAI2_Config+0x1dc>)
 8006206:	4013      	ands	r3, r2
 8006208:	687a      	ldr	r2, [r7, #4]
 800620a:	6892      	ldr	r2, [r2, #8]
 800620c:	0211      	lsls	r1, r2, #8
 800620e:	687a      	ldr	r2, [r7, #4]
 8006210:	68d2      	ldr	r2, [r2, #12]
 8006212:	06d2      	lsls	r2, r2, #27
 8006214:	4311      	orrs	r1, r2
 8006216:	687a      	ldr	r2, [r7, #4]
 8006218:	6852      	ldr	r2, [r2, #4]
 800621a:	3a01      	subs	r2, #1
 800621c:	0112      	lsls	r2, r2, #4
 800621e:	430a      	orrs	r2, r1
 8006220:	492d      	ldr	r1, [pc, #180]	; (80062d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006222:	4313      	orrs	r3, r2
 8006224:	614b      	str	r3, [r1, #20]
 8006226:	e02d      	b.n	8006284 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	2b01      	cmp	r3, #1
 800622c:	d115      	bne.n	800625a <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800622e:	4b2a      	ldr	r3, [pc, #168]	; (80062d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006230:	695a      	ldr	r2, [r3, #20]
 8006232:	4b2b      	ldr	r3, [pc, #172]	; (80062e0 <RCCEx_PLLSAI2_Config+0x1e0>)
 8006234:	4013      	ands	r3, r2
 8006236:	687a      	ldr	r2, [r7, #4]
 8006238:	6892      	ldr	r2, [r2, #8]
 800623a:	0211      	lsls	r1, r2, #8
 800623c:	687a      	ldr	r2, [r7, #4]
 800623e:	6912      	ldr	r2, [r2, #16]
 8006240:	0852      	lsrs	r2, r2, #1
 8006242:	3a01      	subs	r2, #1
 8006244:	0552      	lsls	r2, r2, #21
 8006246:	4311      	orrs	r1, r2
 8006248:	687a      	ldr	r2, [r7, #4]
 800624a:	6852      	ldr	r2, [r2, #4]
 800624c:	3a01      	subs	r2, #1
 800624e:	0112      	lsls	r2, r2, #4
 8006250:	430a      	orrs	r2, r1
 8006252:	4921      	ldr	r1, [pc, #132]	; (80062d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006254:	4313      	orrs	r3, r2
 8006256:	614b      	str	r3, [r1, #20]
 8006258:	e014      	b.n	8006284 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800625a:	4b1f      	ldr	r3, [pc, #124]	; (80062d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800625c:	695a      	ldr	r2, [r3, #20]
 800625e:	4b21      	ldr	r3, [pc, #132]	; (80062e4 <RCCEx_PLLSAI2_Config+0x1e4>)
 8006260:	4013      	ands	r3, r2
 8006262:	687a      	ldr	r2, [r7, #4]
 8006264:	6892      	ldr	r2, [r2, #8]
 8006266:	0211      	lsls	r1, r2, #8
 8006268:	687a      	ldr	r2, [r7, #4]
 800626a:	6952      	ldr	r2, [r2, #20]
 800626c:	0852      	lsrs	r2, r2, #1
 800626e:	3a01      	subs	r2, #1
 8006270:	0652      	lsls	r2, r2, #25
 8006272:	4311      	orrs	r1, r2
 8006274:	687a      	ldr	r2, [r7, #4]
 8006276:	6852      	ldr	r2, [r2, #4]
 8006278:	3a01      	subs	r2, #1
 800627a:	0112      	lsls	r2, r2, #4
 800627c:	430a      	orrs	r2, r1
 800627e:	4916      	ldr	r1, [pc, #88]	; (80062d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006280:	4313      	orrs	r3, r2
 8006282:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006284:	4b14      	ldr	r3, [pc, #80]	; (80062d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	4a13      	ldr	r2, [pc, #76]	; (80062d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800628a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800628e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006290:	f7fb f978 	bl	8001584 <HAL_GetTick>
 8006294:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006296:	e009      	b.n	80062ac <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006298:	f7fb f974 	bl	8001584 <HAL_GetTick>
 800629c:	4602      	mov	r2, r0
 800629e:	68bb      	ldr	r3, [r7, #8]
 80062a0:	1ad3      	subs	r3, r2, r3
 80062a2:	2b02      	cmp	r3, #2
 80062a4:	d902      	bls.n	80062ac <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80062a6:	2303      	movs	r3, #3
 80062a8:	73fb      	strb	r3, [r7, #15]
          break;
 80062aa:	e005      	b.n	80062b8 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80062ac:	4b0a      	ldr	r3, [pc, #40]	; (80062d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d0ef      	beq.n	8006298 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80062b8:	7bfb      	ldrb	r3, [r7, #15]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d106      	bne.n	80062cc <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80062be:	4b06      	ldr	r3, [pc, #24]	; (80062d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80062c0:	695a      	ldr	r2, [r3, #20]
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	699b      	ldr	r3, [r3, #24]
 80062c6:	4904      	ldr	r1, [pc, #16]	; (80062d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80062c8:	4313      	orrs	r3, r2
 80062ca:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80062cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80062ce:	4618      	mov	r0, r3
 80062d0:	3710      	adds	r7, #16
 80062d2:	46bd      	mov	sp, r7
 80062d4:	bd80      	pop	{r7, pc}
 80062d6:	bf00      	nop
 80062d8:	40021000 	.word	0x40021000
 80062dc:	07ff800f 	.word	0x07ff800f
 80062e0:	ff9f800f 	.word	0xff9f800f
 80062e4:	f9ff800f 	.word	0xf9ff800f

080062e8 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 80062e8:	b480      	push	{r7}
 80062ea:	b089      	sub	sp, #36	; 0x24
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
 80062f0:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 80062f2:	2300      	movs	r3, #0
 80062f4:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 80062f6:	2300      	movs	r3, #0
 80062f8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 80062fa:	2300      	movs	r3, #0
 80062fc:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006304:	d10b      	bne.n	800631e <RCCEx_GetSAIxPeriphCLKFreq+0x36>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8006306:	4b7e      	ldr	r3, [pc, #504]	; (8006500 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006308:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800630c:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8006310:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 8006312:	69bb      	ldr	r3, [r7, #24]
 8006314:	2b60      	cmp	r3, #96	; 0x60
 8006316:	d112      	bne.n	800633e <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8006318:	4b7a      	ldr	r3, [pc, #488]	; (8006504 <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 800631a:	61fb      	str	r3, [r7, #28]
 800631c:	e00f      	b.n	800633e <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006324:	d10b      	bne.n	800633e <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8006326:	4b76      	ldr	r3, [pc, #472]	; (8006500 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006328:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800632c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006330:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 8006332:	69bb      	ldr	r3, [r7, #24]
 8006334:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006338:	d101      	bne.n	800633e <RCCEx_GetSAIxPeriphCLKFreq+0x56>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 800633a:	4b72      	ldr	r3, [pc, #456]	; (8006504 <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 800633c:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 800633e:	69fb      	ldr	r3, [r7, #28]
 8006340:	2b00      	cmp	r3, #0
 8006342:	f040 80d6 	bne.w	80064f2 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
  {
    pllvco = InputFrequency;
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 800634a:	69bb      	ldr	r3, [r7, #24]
 800634c:	2b40      	cmp	r3, #64	; 0x40
 800634e:	d003      	beq.n	8006358 <RCCEx_GetSAIxPeriphCLKFreq+0x70>
 8006350:	69bb      	ldr	r3, [r7, #24]
 8006352:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006356:	d13b      	bne.n	80063d0 <RCCEx_GetSAIxPeriphCLKFreq+0xe8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8006358:	4b69      	ldr	r3, [pc, #420]	; (8006500 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006360:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006364:	f040 80c4 	bne.w	80064f0 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
 8006368:	4b65      	ldr	r3, [pc, #404]	; (8006500 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800636a:	68db      	ldr	r3, [r3, #12]
 800636c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006370:	2b00      	cmp	r3, #0
 8006372:	f000 80bd 	beq.w	80064f0 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8006376:	4b62      	ldr	r3, [pc, #392]	; (8006500 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006378:	68db      	ldr	r3, [r3, #12]
 800637a:	091b      	lsrs	r3, r3, #4
 800637c:	f003 030f 	and.w	r3, r3, #15
 8006380:	3301      	adds	r3, #1
 8006382:	693a      	ldr	r2, [r7, #16]
 8006384:	fbb2 f3f3 	udiv	r3, r2, r3
 8006388:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800638a:	4b5d      	ldr	r3, [pc, #372]	; (8006500 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800638c:	68db      	ldr	r3, [r3, #12]
 800638e:	0a1b      	lsrs	r3, r3, #8
 8006390:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006394:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 8006396:	4b5a      	ldr	r3, [pc, #360]	; (8006500 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006398:	68db      	ldr	r3, [r3, #12]
 800639a:	0edb      	lsrs	r3, r3, #27
 800639c:	f003 031f 	and.w	r3, r3, #31
 80063a0:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 80063a2:	697b      	ldr	r3, [r7, #20]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d10a      	bne.n	80063be <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 80063a8:	4b55      	ldr	r3, [pc, #340]	; (8006500 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80063aa:	68db      	ldr	r3, [r3, #12]
 80063ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d002      	beq.n	80063ba <RCCEx_GetSAIxPeriphCLKFreq+0xd2>
          {
            pllp = 17U;
 80063b4:	2311      	movs	r3, #17
 80063b6:	617b      	str	r3, [r7, #20]
 80063b8:	e001      	b.n	80063be <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
          }
          else
          {
            pllp = 7U;
 80063ba:	2307      	movs	r3, #7
 80063bc:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 80063be:	693b      	ldr	r3, [r7, #16]
 80063c0:	68fa      	ldr	r2, [r7, #12]
 80063c2:	fb03 f202 	mul.w	r2, r3, r2
 80063c6:	697b      	ldr	r3, [r7, #20]
 80063c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80063cc:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 80063ce:	e08f      	b.n	80064f0 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 80063d0:	69bb      	ldr	r3, [r7, #24]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d13a      	bne.n	800644c <RCCEx_GetSAIxPeriphCLKFreq+0x164>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 80063d6:	4b4a      	ldr	r3, [pc, #296]	; (8006500 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80063de:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80063e2:	f040 8086 	bne.w	80064f2 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 80063e6:	4b46      	ldr	r3, [pc, #280]	; (8006500 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80063e8:	691b      	ldr	r3, [r3, #16]
 80063ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d07f      	beq.n	80064f2 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 80063f2:	4b43      	ldr	r3, [pc, #268]	; (8006500 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80063f4:	691b      	ldr	r3, [r3, #16]
 80063f6:	091b      	lsrs	r3, r3, #4
 80063f8:	f003 030f 	and.w	r3, r3, #15
 80063fc:	3301      	adds	r3, #1
 80063fe:	693a      	ldr	r2, [r7, #16]
 8006400:	fbb2 f3f3 	udiv	r3, r2, r3
 8006404:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8006406:	4b3e      	ldr	r3, [pc, #248]	; (8006500 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006408:	691b      	ldr	r3, [r3, #16]
 800640a:	0a1b      	lsrs	r3, r3, #8
 800640c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006410:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 8006412:	4b3b      	ldr	r3, [pc, #236]	; (8006500 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006414:	691b      	ldr	r3, [r3, #16]
 8006416:	0edb      	lsrs	r3, r3, #27
 8006418:	f003 031f 	and.w	r3, r3, #31
 800641c:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 800641e:	697b      	ldr	r3, [r7, #20]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d10a      	bne.n	800643a <RCCEx_GetSAIxPeriphCLKFreq+0x152>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 8006424:	4b36      	ldr	r3, [pc, #216]	; (8006500 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006426:	691b      	ldr	r3, [r3, #16]
 8006428:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800642c:	2b00      	cmp	r3, #0
 800642e:	d002      	beq.n	8006436 <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
          {
            pllp = 17U;
 8006430:	2311      	movs	r3, #17
 8006432:	617b      	str	r3, [r7, #20]
 8006434:	e001      	b.n	800643a <RCCEx_GetSAIxPeriphCLKFreq+0x152>
          }
          else
          {
            pllp = 7U;
 8006436:	2307      	movs	r3, #7
 8006438:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800643a:	693b      	ldr	r3, [r7, #16]
 800643c:	68fa      	ldr	r2, [r7, #12]
 800643e:	fb03 f202 	mul.w	r2, r3, r2
 8006442:	697b      	ldr	r3, [r7, #20]
 8006444:	fbb2 f3f3 	udiv	r3, r2, r3
 8006448:	61fb      	str	r3, [r7, #28]
 800644a:	e052      	b.n	80064f2 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      }
    }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    else if((srcclk == RCC_SAI1CLKSOURCE_HSI) || (srcclk == RCC_SAI2CLKSOURCE_HSI))
 800644c:	69bb      	ldr	r3, [r7, #24]
 800644e:	2b80      	cmp	r3, #128	; 0x80
 8006450:	d003      	beq.n	800645a <RCCEx_GetSAIxPeriphCLKFreq+0x172>
 8006452:	69bb      	ldr	r3, [r7, #24]
 8006454:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006458:	d109      	bne.n	800646e <RCCEx_GetSAIxPeriphCLKFreq+0x186>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800645a:	4b29      	ldr	r3, [pc, #164]	; (8006500 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006462:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006466:	d144      	bne.n	80064f2 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
        frequency = HSI_VALUE;
 8006468:	4b27      	ldr	r3, [pc, #156]	; (8006508 <RCCEx_GetSAIxPeriphCLKFreq+0x220>)
 800646a:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800646c:	e041      	b.n	80064f2 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 800646e:	69bb      	ldr	r3, [r7, #24]
 8006470:	2b20      	cmp	r3, #32
 8006472:	d003      	beq.n	800647c <RCCEx_GetSAIxPeriphCLKFreq+0x194>
 8006474:	69bb      	ldr	r3, [r7, #24]
 8006476:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800647a:	d13a      	bne.n	80064f2 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 800647c:	4b20      	ldr	r3, [pc, #128]	; (8006500 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006484:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006488:	d133      	bne.n	80064f2 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 800648a:	4b1d      	ldr	r3, [pc, #116]	; (8006500 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800648c:	695b      	ldr	r3, [r3, #20]
 800648e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006492:	2b00      	cmp	r3, #0
 8006494:	d02d      	beq.n	80064f2 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
 8006496:	4b1a      	ldr	r3, [pc, #104]	; (8006500 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006498:	695b      	ldr	r3, [r3, #20]
 800649a:	091b      	lsrs	r3, r3, #4
 800649c:	f003 030f 	and.w	r3, r3, #15
 80064a0:	3301      	adds	r3, #1
 80064a2:	693a      	ldr	r2, [r7, #16]
 80064a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80064a8:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 80064aa:	4b15      	ldr	r3, [pc, #84]	; (8006500 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80064ac:	695b      	ldr	r3, [r3, #20]
 80064ae:	0a1b      	lsrs	r3, r3, #8
 80064b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80064b4:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
 80064b6:	4b12      	ldr	r3, [pc, #72]	; (8006500 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80064b8:	695b      	ldr	r3, [r3, #20]
 80064ba:	0edb      	lsrs	r3, r3, #27
 80064bc:	f003 031f 	and.w	r3, r3, #31
 80064c0:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 80064c2:	697b      	ldr	r3, [r7, #20]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d10a      	bne.n	80064de <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 80064c8:	4b0d      	ldr	r3, [pc, #52]	; (8006500 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80064ca:	695b      	ldr	r3, [r3, #20]
 80064cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d002      	beq.n	80064da <RCCEx_GetSAIxPeriphCLKFreq+0x1f2>
          {
            pllp = 17U;
 80064d4:	2311      	movs	r3, #17
 80064d6:	617b      	str	r3, [r7, #20]
 80064d8:	e001      	b.n	80064de <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
          }
          else
          {
            pllp = 7U;
 80064da:	2307      	movs	r3, #7
 80064dc:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 80064de:	693b      	ldr	r3, [r7, #16]
 80064e0:	68fa      	ldr	r2, [r7, #12]
 80064e2:	fb03 f202 	mul.w	r2, r3, r2
 80064e6:	697b      	ldr	r3, [r7, #20]
 80064e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80064ec:	61fb      	str	r3, [r7, #28]
 80064ee:	e000      	b.n	80064f2 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 80064f0:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 80064f2:	69fb      	ldr	r3, [r7, #28]
}
 80064f4:	4618      	mov	r0, r3
 80064f6:	3724      	adds	r7, #36	; 0x24
 80064f8:	46bd      	mov	sp, r7
 80064fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fe:	4770      	bx	lr
 8006500:	40021000 	.word	0x40021000
 8006504:	001fff68 	.word	0x001fff68
 8006508:	00f42400 	.word	0x00f42400

0800650c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800650c:	b580      	push	{r7, lr}
 800650e:	b08a      	sub	sp, #40	; 0x28
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;
#endif

  /* Check the SD handle allocation */
  if(hsd == NULL)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d101      	bne.n	800651e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800651a:	2301      	movs	r3, #1
 800651c:	e078      	b.n	8006610 <HAL_SD_Init+0x104>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006524:	b2db      	uxtb	r3, r3
 8006526:	2b00      	cmp	r3, #0
 8006528:	d105      	bne.n	8006536 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	2200      	movs	r2, #0
 800652e:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8006530:	6878      	ldr	r0, [r7, #4]
 8006532:	f7fa fd91 	bl	8001058 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	2203      	movs	r2, #3
 800653a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800653e:	6878      	ldr	r0, [r7, #4]
 8006540:	f000 f86a 	bl	8006618 <HAL_SD_InitCard>
 8006544:	4603      	mov	r3, r0
 8006546:	2b00      	cmp	r3, #0
 8006548:	d001      	beq.n	800654e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800654a:	2301      	movs	r3, #1
 800654c:	e060      	b.n	8006610 <HAL_SD_Init+0x104>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800654e:	f107 0308 	add.w	r3, r7, #8
 8006552:	4619      	mov	r1, r3
 8006554:	6878      	ldr	r0, [r7, #4]
 8006556:	f000 fdb5 	bl	80070c4 <HAL_SD_GetCardStatus>
 800655a:	4603      	mov	r3, r0
 800655c:	2b00      	cmp	r3, #0
 800655e:	d001      	beq.n	8006564 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 8006560:	2301      	movs	r3, #1
 8006562:	e055      	b.n	8006610 <HAL_SD_Init+0x104>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8006564:	7e3b      	ldrb	r3, [r7, #24]
 8006566:	b2db      	uxtb	r3, r3
 8006568:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800656a:	7e7b      	ldrb	r3, [r7, #25]
 800656c:	b2db      	uxtb	r3, r3
 800656e:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006574:	2b01      	cmp	r3, #1
 8006576:	d10a      	bne.n	800658e <HAL_SD_Init+0x82>
 8006578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800657a:	2b00      	cmp	r3, #0
 800657c:	d102      	bne.n	8006584 <HAL_SD_Init+0x78>
 800657e:	6a3b      	ldr	r3, [r7, #32]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d004      	beq.n	800658e <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	f44f 7200 	mov.w	r2, #512	; 0x200
 800658a:	65da      	str	r2, [r3, #92]	; 0x5c
 800658c:	e00b      	b.n	80065a6 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006592:	2b01      	cmp	r3, #1
 8006594:	d104      	bne.n	80065a0 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	f44f 7280 	mov.w	r2, #256	; 0x100
 800659c:	65da      	str	r2, [r3, #92]	; 0x5c
 800659e:	e002      	b.n	80065a6 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2200      	movs	r2, #0
 80065a4:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }
  /* Configure the bus wide */
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	68db      	ldr	r3, [r3, #12]
 80065aa:	4619      	mov	r1, r3
 80065ac:	6878      	ldr	r0, [r7, #4]
 80065ae:	f000 fe6b 	bl	8007288 <HAL_SD_ConfigWideBusOperation>
 80065b2:	4603      	mov	r3, r0
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d001      	beq.n	80065bc <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 80065b8:	2301      	movs	r3, #1
 80065ba:	e029      	b.n	8006610 <HAL_SD_Init+0x104>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 80065bc:	f7fa ffe2 	bl	8001584 <HAL_GetTick>
 80065c0:	61f8      	str	r0, [r7, #28]
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 80065c2:	e014      	b.n	80065ee <HAL_SD_Init+0xe2>
  {
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
 80065c4:	f7fa ffde 	bl	8001584 <HAL_GetTick>
 80065c8:	4602      	mov	r2, r0
 80065ca:	69fb      	ldr	r3, [r7, #28]
 80065cc:	1ad3      	subs	r3, r2, r3
 80065ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80065d2:	d10c      	bne.n	80065ee <HAL_SD_Init+0xe2>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80065da:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2201      	movs	r2, #1
 80065e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2200      	movs	r2, #0
 80065e8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 80065ea:	2303      	movs	r3, #3
 80065ec:	e010      	b.n	8006610 <HAL_SD_Init+0x104>
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 80065ee:	6878      	ldr	r0, [r7, #4]
 80065f0:	f000 ff5e 	bl	80074b0 <HAL_SD_GetCardState>
 80065f4:	4603      	mov	r3, r0
 80065f6:	2b04      	cmp	r3, #4
 80065f8:	d1e4      	bne.n	80065c4 <HAL_SD_Init+0xb8>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	2200      	movs	r2, #0
 80065fe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2200      	movs	r2, #0
 8006604:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	2201      	movs	r2, #1
 800660a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800660e:	2300      	movs	r3, #0
}
 8006610:	4618      	mov	r0, r3
 8006612:	3728      	adds	r7, #40	; 0x28
 8006614:	46bd      	mov	sp, r7
 8006616:	bd80      	pop	{r7, pc}

08006618 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006618:	b5b0      	push	{r4, r5, r7, lr}
 800661a:	b08e      	sub	sp, #56	; 0x38
 800661c:	af04      	add	r7, sp, #16
 800661e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8006620:	2300      	movs	r3, #0
 8006622:	60bb      	str	r3, [r7, #8]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8006624:	2300      	movs	r3, #0
 8006626:	60fb      	str	r3, [r7, #12]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8006628:	2300      	movs	r3, #0
 800662a:	613b      	str	r3, [r7, #16]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800662c:	2300      	movs	r3, #0
 800662e:	617b      	str	r3, [r7, #20]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 8006630:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8006634:	f7fe fd50 	bl	80050d8 <HAL_RCCEx_GetPeriphCLKFreq>
 8006638:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 800663a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800663c:	2b00      	cmp	r3, #0
 800663e:	d109      	bne.n	8006654 <HAL_SD_InitCard+0x3c>
  {
      hsd->State = HAL_SD_STATE_READY;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2201      	movs	r2, #1
 8006644:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800664e:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8006650:	2301      	movs	r3, #1
 8006652:	e079      	b.n	8006748 <HAL_SD_InitCard+0x130>
  }
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockDiv = ((sdmmc_clk / SD_INIT_FREQ) - 2U);
#else
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8006654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006656:	0a1b      	lsrs	r3, r3, #8
 8006658:	4a3d      	ldr	r2, [pc, #244]	; (8006750 <HAL_SD_InitCard+0x138>)
 800665a:	fba2 2303 	umull	r2, r3, r2, r3
 800665e:	091b      	lsrs	r3, r3, #4
 8006660:	61bb      	str	r3, [r7, #24]
#endif

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  Init.Transceiver = hsd->Init.Transceiver;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	699b      	ldr	r3, [r3, #24]
 8006666:	61fb      	str	r3, [r7, #28]
  if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	699b      	ldr	r3, [r3, #24]
 800666c:	2b01      	cmp	r3, #1
 800666e:	d107      	bne.n	8006680 <HAL_SD_InitCard+0x68>
  {
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	681a      	ldr	r2, [r3, #0]
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f042 0210 	orr.w	r2, r2, #16
 800667e:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681d      	ldr	r5, [r3, #0]
 8006684:	466c      	mov	r4, sp
 8006686:	f107 0314 	add.w	r3, r7, #20
 800668a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800668e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006692:	f107 0308 	add.w	r3, r7, #8
 8006696:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006698:	4628      	mov	r0, r5
 800669a:	f002 f90f 	bl	80088bc <SDMMC_Init>
  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	4618      	mov	r0, r3
 80066a4:	f002 f952 	bl	800894c <SDMMC_PowerState_ON>
  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  sdmmc_clk = sdmmc_clk/(Init.ClockDiv + 2U);
#else
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
 80066a8:	69bb      	ldr	r3, [r7, #24]
 80066aa:	005b      	lsls	r3, r3, #1
 80066ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80066b2:	627b      	str	r3, [r7, #36]	; 0x24
#endif
  HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 80066b4:	4a27      	ldr	r2, [pc, #156]	; (8006754 <HAL_SD_InitCard+0x13c>)
 80066b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80066bc:	3301      	adds	r3, #1
 80066be:	4618      	mov	r0, r3
 80066c0:	f7fa ff6c 	bl	800159c <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80066c4:	6878      	ldr	r0, [r7, #4]
 80066c6:	f000 ffd3 	bl	8007670 <SD_PowerON>
 80066ca:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80066cc:	6a3b      	ldr	r3, [r7, #32]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d00b      	beq.n	80066ea <HAL_SD_InitCard+0xd2>
  {
    hsd->State = HAL_SD_STATE_READY;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	2201      	movs	r2, #1
 80066d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80066de:	6a3b      	ldr	r3, [r7, #32]
 80066e0:	431a      	orrs	r2, r3
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80066e6:	2301      	movs	r3, #1
 80066e8:	e02e      	b.n	8006748 <HAL_SD_InitCard+0x130>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80066ea:	6878      	ldr	r0, [r7, #4]
 80066ec:	f000 ff00 	bl	80074f0 <SD_InitCard>
 80066f0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80066f2:	6a3b      	ldr	r3, [r7, #32]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d00b      	beq.n	8006710 <HAL_SD_InitCard+0xf8>
  {
    hsd->State = HAL_SD_STATE_READY;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2201      	movs	r2, #1
 80066fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006704:	6a3b      	ldr	r3, [r7, #32]
 8006706:	431a      	orrs	r2, r3
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800670c:	2301      	movs	r3, #1
 800670e:	e01b      	b.n	8006748 <HAL_SD_InitCard+0x130>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006718:	4618      	mov	r0, r3
 800671a:	f002 f9ad 	bl	8008a78 <SDMMC_CmdBlockLength>
 800671e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006720:	6a3b      	ldr	r3, [r7, #32]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d00f      	beq.n	8006746 <HAL_SD_InitCard+0x12e>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	4a0b      	ldr	r2, [pc, #44]	; (8006758 <HAL_SD_InitCard+0x140>)
 800672c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006732:	6a3b      	ldr	r3, [r7, #32]
 8006734:	431a      	orrs	r2, r3
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	2201      	movs	r2, #1
 800673e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006742:	2301      	movs	r3, #1
 8006744:	e000      	b.n	8006748 <HAL_SD_InitCard+0x130>
  }

  return HAL_OK;
 8006746:	2300      	movs	r3, #0
}
 8006748:	4618      	mov	r0, r3
 800674a:	3728      	adds	r7, #40	; 0x28
 800674c:	46bd      	mov	sp, r7
 800674e:	bdb0      	pop	{r4, r5, r7, pc}
 8006750:	014f8b59 	.word	0x014f8b59
 8006754:	00012110 	.word	0x00012110
 8006758:	1fe00fff 	.word	0x1fe00fff

0800675c <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd Block Address from where data is to be read
  * @param  NumberOfBlocks Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800675c:	b580      	push	{r7, lr}
 800675e:	b08c      	sub	sp, #48	; 0x30
 8006760:	af00      	add	r7, sp, #0
 8006762:	60f8      	str	r0, [r7, #12]
 8006764:	60b9      	str	r1, [r7, #8]
 8006766:	607a      	str	r2, [r7, #4]
 8006768:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800676e:	68bb      	ldr	r3, [r7, #8]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d107      	bne.n	8006784 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006778:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006780:	2301      	movs	r3, #1
 8006782:	e08d      	b.n	80068a0 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800678a:	b2db      	uxtb	r3, r3
 800678c:	2b01      	cmp	r3, #1
 800678e:	f040 8086 	bne.w	800689e <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	2200      	movs	r2, #0
 8006796:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006798:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	441a      	add	r2, r3
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067a2:	429a      	cmp	r2, r3
 80067a4:	d907      	bls.n	80067b6 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067aa:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80067b2:	2301      	movs	r3, #1
 80067b4:	e074      	b.n	80068a0 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	2203      	movs	r2, #3
 80067ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	2200      	movs	r2, #0
 80067c4:	62da      	str	r2, [r3, #44]	; 0x2c
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
#else
      hsd->pRxBuffPtr = pData;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	68ba      	ldr	r2, [r7, #8]
 80067ca:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	025a      	lsls	r2, r3, #9
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067d8:	2b01      	cmp	r3, #1
 80067da:	d002      	beq.n	80067e2 <HAL_SD_ReadBlocks_DMA+0x86>
      {
        add *= 512U;
 80067dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067de:	025b      	lsls	r3, r3, #9
 80067e0:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80067e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80067e6:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	025b      	lsls	r3, r3, #9
 80067ec:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80067ee:	2390      	movs	r3, #144	; 0x90
 80067f0:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80067f2:	2302      	movs	r3, #2
 80067f4:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80067f6:	2300      	movs	r3, #0
 80067f8:	623b      	str	r3, [r7, #32]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      config.DPSM          = SDMMC_DPSM_DISABLE;
 80067fa:	2300      	movs	r3, #0
 80067fc:	627b      	str	r3, [r7, #36]	; 0x24
#else
      config.DPSM          = SDMMC_DPSM_ENABLE;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f107 0210 	add.w	r2, r7, #16
 8006806:	4611      	mov	r1, r2
 8006808:	4618      	mov	r0, r3
 800680a:	f002 f909 	bl	8008a20 <SDMMC_ConfigData>

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)

      __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	68da      	ldr	r2, [r3, #12]
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800681c:	60da      	str	r2, [r3, #12]
      hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	68ba      	ldr	r2, [r7, #8]
 8006824:	659a      	str	r2, [r3, #88]	; 0x58
      hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	2201      	movs	r2, #1
 800682c:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	2b01      	cmp	r3, #1
 8006832:	d90a      	bls.n	800684a <HAL_SD_ReadBlocks_DMA+0xee>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	2282      	movs	r2, #130	; 0x82
 8006838:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006840:	4618      	mov	r0, r3
 8006842:	f002 f95f 	bl	8008b04 <SDMMC_CmdReadMultiBlock>
 8006846:	62f8      	str	r0, [r7, #44]	; 0x2c
 8006848:	e009      	b.n	800685e <HAL_SD_ReadBlocks_DMA+0x102>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	2281      	movs	r2, #129	; 0x81
 800684e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006856:	4618      	mov	r0, r3
 8006858:	f002 f931 	bl	8008abe <SDMMC_CmdReadSingleBlock>
 800685c:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800685e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006860:	2b00      	cmp	r3, #0
 8006862:	d012      	beq.n	800688a <HAL_SD_ReadBlocks_DMA+0x12e>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	4a0f      	ldr	r2, [pc, #60]	; (80068a8 <HAL_SD_ReadBlocks_DMA+0x14c>)
 800686a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006872:	431a      	orrs	r2, r3
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	2201      	movs	r2, #1
 800687c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	2200      	movs	r2, #0
 8006884:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8006886:	2301      	movs	r3, #1
 8006888:	e00a      	b.n	80068a0 <HAL_SD_ReadBlocks_DMA+0x144>
      }

      /* Enable transfer interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8006898:	63da      	str	r2, [r3, #60]	; 0x3c

      return HAL_OK;
 800689a:	2300      	movs	r3, #0
 800689c:	e000      	b.n	80068a0 <HAL_SD_ReadBlocks_DMA+0x144>
    }
#endif
  }
  else
  {
    return HAL_BUSY;
 800689e:	2302      	movs	r3, #2
  }
}
 80068a0:	4618      	mov	r0, r3
 80068a2:	3730      	adds	r7, #48	; 0x30
 80068a4:	46bd      	mov	sp, r7
 80068a6:	bd80      	pop	{r7, pc}
 80068a8:	1fe00fff 	.word	0x1fe00fff

080068ac <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd Block Address where data will be written
  * @param  NumberOfBlocks Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b08c      	sub	sp, #48	; 0x30
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	60f8      	str	r0, [r7, #12]
 80068b4:	60b9      	str	r1, [r7, #8]
 80068b6:	607a      	str	r2, [r7, #4]
 80068b8:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80068be:	68bb      	ldr	r3, [r7, #8]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d107      	bne.n	80068d4 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068c8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80068d0:	2301      	movs	r3, #1
 80068d2:	e08d      	b.n	80069f0 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80068da:	b2db      	uxtb	r3, r3
 80068dc:	2b01      	cmp	r3, #1
 80068de:	f040 8086 	bne.w	80069ee <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	2200      	movs	r2, #0
 80068e6:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80068e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	441a      	add	r2, r3
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068f2:	429a      	cmp	r2, r3
 80068f4:	d907      	bls.n	8006906 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068fa:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8006902:	2301      	movs	r3, #1
 8006904:	e074      	b.n	80069f0 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	2203      	movs	r2, #3
 800690a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	2200      	movs	r2, #0
 8006914:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    hsd->pTxBuffPtr = pData;
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	68ba      	ldr	r2, [r7, #8]
 800691a:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	025a      	lsls	r2, r3, #9
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006928:	2b01      	cmp	r3, #1
 800692a:	d002      	beq.n	8006932 <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 800692c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800692e:	025b      	lsls	r3, r3, #9
 8006930:	62bb      	str	r3, [r7, #40]	; 0x28
    }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006932:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006936:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	025b      	lsls	r3, r3, #9
 800693c:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800693e:	2390      	movs	r3, #144	; 0x90
 8006940:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8006942:	2300      	movs	r3, #0
 8006944:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006946:	2300      	movs	r3, #0
 8006948:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800694a:	2300      	movs	r3, #0
 800694c:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f107 0210 	add.w	r2, r7, #16
 8006956:	4611      	mov	r1, r2
 8006958:	4618      	mov	r0, r3
 800695a:	f002 f861 	bl	8008a20 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	68da      	ldr	r2, [r3, #12]
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800696c:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	68ba      	ldr	r2, [r7, #8]
 8006974:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	2201      	movs	r2, #1
 800697c:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	2b01      	cmp	r3, #1
 8006982:	d90a      	bls.n	800699a <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	22a0      	movs	r2, #160	; 0xa0
 8006988:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006990:	4618      	mov	r0, r3
 8006992:	f002 f8fd 	bl	8008b90 <SDMMC_CmdWriteMultiBlock>
 8006996:	62f8      	str	r0, [r7, #44]	; 0x2c
 8006998:	e009      	b.n	80069ae <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	2290      	movs	r2, #144	; 0x90
 800699e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80069a6:	4618      	mov	r0, r3
 80069a8:	f002 f8cf 	bl	8008b4a <SDMMC_CmdWriteSingleBlock>
 80069ac:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80069ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d012      	beq.n	80069da <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	4a0f      	ldr	r2, [pc, #60]	; (80069f8 <HAL_SD_WriteBlocks_DMA+0x14c>)
 80069ba:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80069c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069c2:	431a      	orrs	r2, r3
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	2201      	movs	r2, #1
 80069cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	2200      	movs	r2, #0
 80069d4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80069d6:	2301      	movs	r3, #1
 80069d8:	e00a      	b.n	80069f0 <HAL_SD_WriteBlocks_DMA+0x144>

      /* Enable SD Error interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));
#else
      /* Enable transfer interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 80069e8:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

      return HAL_OK;
 80069ea:	2300      	movs	r3, #0
 80069ec:	e000      	b.n	80069f0 <HAL_SD_WriteBlocks_DMA+0x144>
    }
#endif
  }
  else
  {
    return HAL_BUSY;
 80069ee:	2302      	movs	r3, #2
  }
}
 80069f0:	4618      	mov	r0, r3
 80069f2:	3730      	adds	r7, #48	; 0x30
 80069f4:	46bd      	mov	sp, r7
 80069f6:	bd80      	pop	{r7, pc}
 80069f8:	1fe00fff 	.word	0x1fe00fff

080069fc <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b084      	sub	sp, #16
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a08:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a10:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d008      	beq.n	8006a2a <HAL_SD_IRQHandler+0x2e>
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	f003 0308 	and.w	r3, r3, #8
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d003      	beq.n	8006a2a <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8006a22:	6878      	ldr	r0, [r7, #4]
 8006a24:	f001 f98e 	bl	8007d44 <SD_Read_IT>
 8006a28:	e199      	b.n	8006d5e <HAL_SD_IRQHandler+0x362>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	f000 80ae 	beq.w	8006b96 <HAL_SD_IRQHandler+0x19a>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006a42:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT |\
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a4a:	687a      	ldr	r2, [r7, #4]
 8006a4c:	6812      	ldr	r2, [r2, #0]
 8006a4e:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 8006a52:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8006a56:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8006a66:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	68da      	ldr	r2, [r3, #12]
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a76:	60da      	str	r2, [r3, #12]
#else
    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    if((context & SD_CONTEXT_IT) != 0U)
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	f003 0308 	and.w	r3, r3, #8
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d038      	beq.n	8006af4 <HAL_SD_IRQHandler+0xf8>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	f003 0302 	and.w	r3, r3, #2
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d104      	bne.n	8006a96 <HAL_SD_IRQHandler+0x9a>
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	f003 0320 	and.w	r3, r3, #32
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d011      	beq.n	8006aba <HAL_SD_IRQHandler+0xbe>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	f002 f89c 	bl	8008bd8 <SDMMC_CmdStopTransfer>
 8006aa0:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8006aa2:	68bb      	ldr	r3, [r7, #8]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d008      	beq.n	8006aba <HAL_SD_IRQHandler+0xbe>
        {
          hsd->ErrorCode |= errorstate;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006aac:	68bb      	ldr	r3, [r7, #8]
 8006aae:	431a      	orrs	r2, r3
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8006ab4:	6878      	ldr	r0, [r7, #4]
 8006ab6:	f000 f957 	bl	8006d68 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	4a90      	ldr	r2, [pc, #576]	; (8006d00 <HAL_SD_IRQHandler+0x304>)
 8006ac0:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	2201      	movs	r2, #1
 8006ac6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	2200      	movs	r2, #0
 8006ace:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	f003 0301 	and.w	r3, r3, #1
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d104      	bne.n	8006ae4 <HAL_SD_IRQHandler+0xe8>
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	f003 0302 	and.w	r3, r3, #2
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d003      	beq.n	8006aec <HAL_SD_IRQHandler+0xf0>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8006ae4:	6878      	ldr	r0, [r7, #4]
 8006ae6:	f002 fd63 	bl	80095b0 <HAL_SD_RxCpltCallback>
 8006aea:	e138      	b.n	8006d5e <HAL_SD_IRQHandler+0x362>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8006aec:	6878      	ldr	r0, [r7, #4]
 8006aee:	f002 fd55 	bl	800959c <HAL_SD_TxCpltCallback>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else
  {
    /* Nothing to do */
  }
}
 8006af2:	e134      	b.n	8006d5e <HAL_SD_IRQHandler+0x362>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	f000 812f 	beq.w	8006d5e <HAL_SD_IRQHandler+0x362>
      hsd->Instance->DLEN = 0;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	2200      	movs	r2, #0
 8006b06:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	2200      	movs	r2, #0
 8006b16:	651a      	str	r2, [r3, #80]	; 0x50
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	f003 0302 	and.w	r3, r3, #2
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d104      	bne.n	8006b2c <HAL_SD_IRQHandler+0x130>
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	f003 0320 	and.w	r3, r3, #32
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d011      	beq.n	8006b50 <HAL_SD_IRQHandler+0x154>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	4618      	mov	r0, r3
 8006b32:	f002 f851 	bl	8008bd8 <SDMMC_CmdStopTransfer>
 8006b36:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8006b38:	68bb      	ldr	r3, [r7, #8]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d008      	beq.n	8006b50 <HAL_SD_IRQHandler+0x154>
          hsd->ErrorCode |= errorstate;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b42:	68bb      	ldr	r3, [r7, #8]
 8006b44:	431a      	orrs	r2, r3
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8006b4a:	6878      	ldr	r0, [r7, #4]
 8006b4c:	f000 f90c 	bl	8006d68 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2201      	movs	r2, #1
 8006b54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	f003 0310 	and.w	r3, r3, #16
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d104      	bne.n	8006b72 <HAL_SD_IRQHandler+0x176>
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	f003 0320 	and.w	r3, r3, #32
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d002      	beq.n	8006b78 <HAL_SD_IRQHandler+0x17c>
        HAL_SD_TxCpltCallback(hsd);
 8006b72:	6878      	ldr	r0, [r7, #4]
 8006b74:	f002 fd12 	bl	800959c <HAL_SD_TxCpltCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	f003 0301 	and.w	r3, r3, #1
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d105      	bne.n	8006b8e <HAL_SD_IRQHandler+0x192>
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	f003 0302 	and.w	r3, r3, #2
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	f000 80e8 	beq.w	8006d5e <HAL_SD_IRQHandler+0x362>
        HAL_SD_RxCpltCallback(hsd);
 8006b8e:	6878      	ldr	r0, [r7, #4]
 8006b90:	f002 fd0e 	bl	80095b0 <HAL_SD_RxCpltCallback>
}
 8006b94:	e0e3      	b.n	8006d5e <HAL_SD_IRQHandler+0x362>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d008      	beq.n	8006bb6 <HAL_SD_IRQHandler+0x1ba>
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	f003 0308 	and.w	r3, r3, #8
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d003      	beq.n	8006bb6 <HAL_SD_IRQHandler+0x1ba>
    SD_Write_IT(hsd);
 8006bae:	6878      	ldr	r0, [r7, #4]
 8006bb0:	f001 f919 	bl	8007de6 <SD_Write_IT>
 8006bb4:	e0d3      	b.n	8006d5e <HAL_SD_IRQHandler+0x362>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bbc:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	f000 809f 	beq.w	8006d04 <HAL_SD_IRQHandler+0x308>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bcc:	f003 0302 	and.w	r3, r3, #2
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d005      	beq.n	8006be0 <HAL_SD_IRQHandler+0x1e4>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bd8:	f043 0202 	orr.w	r2, r3, #2
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006be6:	f003 0308 	and.w	r3, r3, #8
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d005      	beq.n	8006bfa <HAL_SD_IRQHandler+0x1fe>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bf2:	f043 0208 	orr.w	r2, r3, #8
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c00:	f003 0320 	and.w	r3, r3, #32
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d005      	beq.n	8006c14 <HAL_SD_IRQHandler+0x218>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c0c:	f043 0220 	orr.w	r2, r3, #32
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c1a:	f003 0310 	and.w	r3, r3, #16
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d005      	beq.n	8006c2e <HAL_SD_IRQHandler+0x232>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c26:	f043 0210 	orr.w	r2, r3, #16
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	4a33      	ldr	r2, [pc, #204]	; (8006d00 <HAL_SD_IRQHandler+0x304>)
 8006c34:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8006c44:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	68da      	ldr	r2, [r3, #12]
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c54:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006c64:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	68da      	ldr	r2, [r3, #12]
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006c74:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	f001 ffac 	bl	8008bd8 <SDMMC_CmdStopTransfer>
 8006c80:	4602      	mov	r2, r0
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c86:	431a      	orrs	r2, r3
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	68da      	ldr	r2, [r3, #12]
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006c9a:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006ca4:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	f003 0308 	and.w	r3, r3, #8
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d00a      	beq.n	8006cc6 <HAL_SD_IRQHandler+0x2ca>
      hsd->State = HAL_SD_STATE_READY;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2201      	movs	r2, #1
 8006cb4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2200      	movs	r2, #0
 8006cbc:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8006cbe:	6878      	ldr	r0, [r7, #4]
 8006cc0:	f000 f852 	bl	8006d68 <HAL_SD_ErrorCallback>
}
 8006cc4:	e04b      	b.n	8006d5e <HAL_SD_IRQHandler+0x362>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d046      	beq.n	8006d5e <HAL_SD_IRQHandler+0x362>
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d042      	beq.n	8006d5e <HAL_SD_IRQHandler+0x362>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8006ce6:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	2200      	movs	r2, #0
 8006cee:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2201      	movs	r2, #1
 8006cf4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_ErrorCallback(hsd);
 8006cf8:	6878      	ldr	r0, [r7, #4]
 8006cfa:	f000 f835 	bl	8006d68 <HAL_SD_ErrorCallback>
}
 8006cfe:	e02e      	b.n	8006d5e <HAL_SD_IRQHandler+0x362>
 8006d00:	18000f3a 	.word	0x18000f3a
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d025      	beq.n	8006d5e <HAL_SD_IRQHandler+0x362>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d1a:	639a      	str	r2, [r3, #56]	; 0x38
    if(READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d22:	f003 0304 	and.w	r3, r3, #4
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d10c      	bne.n	8006d44 <HAL_SD_IRQHandler+0x348>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	f003 0320 	and.w	r3, r3, #32
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d003      	beq.n	8006d3c <HAL_SD_IRQHandler+0x340>
        HAL_SDEx_Write_DMADoubleBuffer1CpltCallback(hsd);
 8006d34:	6878      	ldr	r0, [r7, #4]
 8006d36:	f001 f8d4 	bl	8007ee2 <HAL_SDEx_Write_DMADoubleBuffer1CpltCallback>
}
 8006d3a:	e010      	b.n	8006d5e <HAL_SD_IRQHandler+0x362>
        HAL_SDEx_Read_DMADoubleBuffer1CpltCallback(hsd);
 8006d3c:	6878      	ldr	r0, [r7, #4]
 8006d3e:	f001 f8bc 	bl	8007eba <HAL_SDEx_Read_DMADoubleBuffer1CpltCallback>
}
 8006d42:	e00c      	b.n	8006d5e <HAL_SD_IRQHandler+0x362>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	f003 0320 	and.w	r3, r3, #32
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d003      	beq.n	8006d56 <HAL_SD_IRQHandler+0x35a>
        HAL_SDEx_Write_DMADoubleBuffer0CpltCallback(hsd);
 8006d4e:	6878      	ldr	r0, [r7, #4]
 8006d50:	f001 f8bd 	bl	8007ece <HAL_SDEx_Write_DMADoubleBuffer0CpltCallback>
}
 8006d54:	e003      	b.n	8006d5e <HAL_SD_IRQHandler+0x362>
        HAL_SDEx_Read_DMADoubleBuffer0CpltCallback(hsd);
 8006d56:	6878      	ldr	r0, [r7, #4]
 8006d58:	f001 f8a5 	bl	8007ea6 <HAL_SDEx_Read_DMADoubleBuffer0CpltCallback>
}
 8006d5c:	e7ff      	b.n	8006d5e <HAL_SD_IRQHandler+0x362>
 8006d5e:	bf00      	nop
 8006d60:	3710      	adds	r7, #16
 8006d62:	46bd      	mov	sp, r7
 8006d64:	bd80      	pop	{r7, pc}
 8006d66:	bf00      	nop

08006d68 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8006d68:	b480      	push	{r7}
 8006d6a:	b083      	sub	sp, #12
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8006d70:	bf00      	nop
 8006d72:	370c      	adds	r7, #12
 8006d74:	46bd      	mov	sp, r7
 8006d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7a:	4770      	bx	lr

08006d7c <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8006d7c:	b480      	push	{r7}
 8006d7e:	b083      	sub	sp, #12
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
 8006d84:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d8a:	0f9b      	lsrs	r3, r3, #30
 8006d8c:	b2da      	uxtb	r2, r3
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d96:	0e9b      	lsrs	r3, r3, #26
 8006d98:	b2db      	uxtb	r3, r3
 8006d9a:	f003 030f 	and.w	r3, r3, #15
 8006d9e:	b2da      	uxtb	r2, r3
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006da8:	0e1b      	lsrs	r3, r3, #24
 8006daa:	b2db      	uxtb	r3, r3
 8006dac:	f003 0303 	and.w	r3, r3, #3
 8006db0:	b2da      	uxtb	r2, r3
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006dba:	0c1b      	lsrs	r3, r3, #16
 8006dbc:	b2da      	uxtb	r2, r3
 8006dbe:	683b      	ldr	r3, [r7, #0]
 8006dc0:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006dc6:	0a1b      	lsrs	r3, r3, #8
 8006dc8:	b2da      	uxtb	r2, r3
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006dd2:	b2da      	uxtb	r2, r3
 8006dd4:	683b      	ldr	r3, [r7, #0]
 8006dd6:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006ddc:	0d1b      	lsrs	r3, r3, #20
 8006dde:	b29a      	uxth	r2, r3
 8006de0:	683b      	ldr	r3, [r7, #0]
 8006de2:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006de8:	0c1b      	lsrs	r3, r3, #16
 8006dea:	b2db      	uxtb	r3, r3
 8006dec:	f003 030f 	and.w	r3, r3, #15
 8006df0:	b2da      	uxtb	r2, r3
 8006df2:	683b      	ldr	r3, [r7, #0]
 8006df4:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006dfa:	0bdb      	lsrs	r3, r3, #15
 8006dfc:	b2db      	uxtb	r3, r3
 8006dfe:	f003 0301 	and.w	r3, r3, #1
 8006e02:	b2da      	uxtb	r2, r3
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e0c:	0b9b      	lsrs	r3, r3, #14
 8006e0e:	b2db      	uxtb	r3, r3
 8006e10:	f003 0301 	and.w	r3, r3, #1
 8006e14:	b2da      	uxtb	r2, r3
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e1e:	0b5b      	lsrs	r3, r3, #13
 8006e20:	b2db      	uxtb	r3, r3
 8006e22:	f003 0301 	and.w	r3, r3, #1
 8006e26:	b2da      	uxtb	r2, r3
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e30:	0b1b      	lsrs	r3, r3, #12
 8006e32:	b2db      	uxtb	r3, r3
 8006e34:	f003 0301 	and.w	r3, r3, #1
 8006e38:	b2da      	uxtb	r2, r3
 8006e3a:	683b      	ldr	r3, [r7, #0]
 8006e3c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8006e3e:	683b      	ldr	r3, [r7, #0]
 8006e40:	2200      	movs	r2, #0
 8006e42:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d163      	bne.n	8006f14 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e50:	009a      	lsls	r2, r3, #2
 8006e52:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006e56:	4013      	ands	r3, r2
 8006e58:	687a      	ldr	r2, [r7, #4]
 8006e5a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006e5c:	0f92      	lsrs	r2, r2, #30
 8006e5e:	431a      	orrs	r2, r3
 8006e60:	683b      	ldr	r3, [r7, #0]
 8006e62:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006e68:	0edb      	lsrs	r3, r3, #27
 8006e6a:	b2db      	uxtb	r3, r3
 8006e6c:	f003 0307 	and.w	r3, r3, #7
 8006e70:	b2da      	uxtb	r2, r3
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006e7a:	0e1b      	lsrs	r3, r3, #24
 8006e7c:	b2db      	uxtb	r3, r3
 8006e7e:	f003 0307 	and.w	r3, r3, #7
 8006e82:	b2da      	uxtb	r2, r3
 8006e84:	683b      	ldr	r3, [r7, #0]
 8006e86:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006e8c:	0d5b      	lsrs	r3, r3, #21
 8006e8e:	b2db      	uxtb	r3, r3
 8006e90:	f003 0307 	and.w	r3, r3, #7
 8006e94:	b2da      	uxtb	r2, r3
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006e9e:	0c9b      	lsrs	r3, r3, #18
 8006ea0:	b2db      	uxtb	r3, r3
 8006ea2:	f003 0307 	and.w	r3, r3, #7
 8006ea6:	b2da      	uxtb	r2, r3
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006eb0:	0bdb      	lsrs	r3, r3, #15
 8006eb2:	b2db      	uxtb	r3, r3
 8006eb4:	f003 0307 	and.w	r3, r3, #7
 8006eb8:	b2da      	uxtb	r2, r3
 8006eba:	683b      	ldr	r3, [r7, #0]
 8006ebc:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	691b      	ldr	r3, [r3, #16]
 8006ec2:	1c5a      	adds	r2, r3, #1
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	7e1b      	ldrb	r3, [r3, #24]
 8006ecc:	b2db      	uxtb	r3, r3
 8006ece:	f003 0307 	and.w	r3, r3, #7
 8006ed2:	3302      	adds	r3, #2
 8006ed4:	2201      	movs	r2, #1
 8006ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8006eda:	687a      	ldr	r2, [r7, #4]
 8006edc:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8006ede:	fb03 f202 	mul.w	r2, r3, r2
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	7a1b      	ldrb	r3, [r3, #8]
 8006eea:	b2db      	uxtb	r3, r3
 8006eec:	f003 030f 	and.w	r3, r3, #15
 8006ef0:	2201      	movs	r2, #1
 8006ef2:	409a      	lsls	r2, r3
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	651a      	str	r2, [r3, #80]	; 0x50

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006efc:	687a      	ldr	r2, [r7, #4]
 8006efe:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8006f00:	0a52      	lsrs	r2, r2, #9
 8006f02:	fb03 f202 	mul.w	r2, r3, r2
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockSize = 512U;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006f10:	659a      	str	r2, [r3, #88]	; 0x58
 8006f12:	e031      	b.n	8006f78 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f18:	2b01      	cmp	r3, #1
 8006f1a:	d11d      	bne.n	8006f58 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006f20:	041b      	lsls	r3, r3, #16
 8006f22:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006f2a:	0c1b      	lsrs	r3, r3, #16
 8006f2c:	431a      	orrs	r2, r3
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	691b      	ldr	r3, [r3, #16]
 8006f36:	3301      	adds	r3, #1
 8006f38:	029a      	lsls	r2, r3, #10
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 512U;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006f4c:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	659a      	str	r2, [r3, #88]	; 0x58
 8006f56:	e00f      	b.n	8006f78 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	4a58      	ldr	r2, [pc, #352]	; (80070c0 <HAL_SD_GetCardCSD+0x344>)
 8006f5e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f64:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2201      	movs	r2, #1
 8006f70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006f74:	2301      	movs	r3, #1
 8006f76:	e09d      	b.n	80070b4 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006f7c:	0b9b      	lsrs	r3, r3, #14
 8006f7e:	b2db      	uxtb	r3, r3
 8006f80:	f003 0301 	and.w	r3, r3, #1
 8006f84:	b2da      	uxtb	r2, r3
 8006f86:	683b      	ldr	r3, [r7, #0]
 8006f88:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006f8e:	09db      	lsrs	r3, r3, #7
 8006f90:	b2db      	uxtb	r3, r3
 8006f92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f96:	b2da      	uxtb	r2, r3
 8006f98:	683b      	ldr	r3, [r7, #0]
 8006f9a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006fa0:	b2db      	uxtb	r3, r3
 8006fa2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006fa6:	b2da      	uxtb	r2, r3
 8006fa8:	683b      	ldr	r3, [r7, #0]
 8006faa:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006fb0:	0fdb      	lsrs	r3, r3, #31
 8006fb2:	b2da      	uxtb	r2, r3
 8006fb4:	683b      	ldr	r3, [r7, #0]
 8006fb6:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006fbc:	0f5b      	lsrs	r3, r3, #29
 8006fbe:	b2db      	uxtb	r3, r3
 8006fc0:	f003 0303 	and.w	r3, r3, #3
 8006fc4:	b2da      	uxtb	r2, r3
 8006fc6:	683b      	ldr	r3, [r7, #0]
 8006fc8:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006fce:	0e9b      	lsrs	r3, r3, #26
 8006fd0:	b2db      	uxtb	r3, r3
 8006fd2:	f003 0307 	and.w	r3, r3, #7
 8006fd6:	b2da      	uxtb	r2, r3
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006fe0:	0d9b      	lsrs	r3, r3, #22
 8006fe2:	b2db      	uxtb	r3, r3
 8006fe4:	f003 030f 	and.w	r3, r3, #15
 8006fe8:	b2da      	uxtb	r2, r3
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ff2:	0d5b      	lsrs	r3, r3, #21
 8006ff4:	b2db      	uxtb	r3, r3
 8006ff6:	f003 0301 	and.w	r3, r3, #1
 8006ffa:	b2da      	uxtb	r2, r3
 8006ffc:	683b      	ldr	r3, [r7, #0]
 8006ffe:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	2200      	movs	r2, #0
 8007006:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800700e:	0c1b      	lsrs	r3, r3, #16
 8007010:	b2db      	uxtb	r3, r3
 8007012:	f003 0301 	and.w	r3, r3, #1
 8007016:	b2da      	uxtb	r2, r3
 8007018:	683b      	ldr	r3, [r7, #0]
 800701a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007022:	0bdb      	lsrs	r3, r3, #15
 8007024:	b2db      	uxtb	r3, r3
 8007026:	f003 0301 	and.w	r3, r3, #1
 800702a:	b2da      	uxtb	r2, r3
 800702c:	683b      	ldr	r3, [r7, #0]
 800702e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007036:	0b9b      	lsrs	r3, r3, #14
 8007038:	b2db      	uxtb	r3, r3
 800703a:	f003 0301 	and.w	r3, r3, #1
 800703e:	b2da      	uxtb	r2, r3
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800704a:	0b5b      	lsrs	r3, r3, #13
 800704c:	b2db      	uxtb	r3, r3
 800704e:	f003 0301 	and.w	r3, r3, #1
 8007052:	b2da      	uxtb	r2, r3
 8007054:	683b      	ldr	r3, [r7, #0]
 8007056:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800705e:	0b1b      	lsrs	r3, r3, #12
 8007060:	b2db      	uxtb	r3, r3
 8007062:	f003 0301 	and.w	r3, r3, #1
 8007066:	b2da      	uxtb	r2, r3
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007072:	0a9b      	lsrs	r3, r3, #10
 8007074:	b2db      	uxtb	r3, r3
 8007076:	f003 0303 	and.w	r3, r3, #3
 800707a:	b2da      	uxtb	r2, r3
 800707c:	683b      	ldr	r3, [r7, #0]
 800707e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007086:	0a1b      	lsrs	r3, r3, #8
 8007088:	b2db      	uxtb	r3, r3
 800708a:	f003 0303 	and.w	r3, r3, #3
 800708e:	b2da      	uxtb	r2, r3
 8007090:	683b      	ldr	r3, [r7, #0]
 8007092:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800709a:	085b      	lsrs	r3, r3, #1
 800709c:	b2db      	uxtb	r3, r3
 800709e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80070a2:	b2da      	uxtb	r2, r3
 80070a4:	683b      	ldr	r3, [r7, #0]
 80070a6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80070aa:	683b      	ldr	r3, [r7, #0]
 80070ac:	2201      	movs	r2, #1
 80070ae:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80070b2:	2300      	movs	r3, #0
}
 80070b4:	4618      	mov	r0, r3
 80070b6:	370c      	adds	r7, #12
 80070b8:	46bd      	mov	sp, r7
 80070ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070be:	4770      	bx	lr
 80070c0:	1fe00fff 	.word	0x1fe00fff

080070c4 <HAL_SD_GetCardStatus>:
  * @param  pStatus Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b094      	sub	sp, #80	; 0x50
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
 80070cc:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 80070ce:	2300      	movs	r3, #0
 80070d0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  errorstate = SD_SendSDStatus(hsd, sd_status);
 80070d4:	f107 0308 	add.w	r3, r7, #8
 80070d8:	4619      	mov	r1, r3
 80070da:	6878      	ldr	r0, [r7, #4]
 80070dc:	f000 fbd4 	bl	8007888 <SD_SendSDStatus>
 80070e0:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 80070e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d011      	beq.n	800710c <HAL_SD_GetCardStatus+0x48>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	4a4f      	ldr	r2, [pc, #316]	; (800722c <HAL_SD_GetCardStatus+0x168>)
 80070ee:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80070f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80070f6:	431a      	orrs	r2, r3
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2201      	movs	r2, #1
 8007100:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8007104:	2301      	movs	r3, #1
 8007106:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800710a:	e070      	b.n	80071ee <HAL_SD_GetCardStatus+0x12a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800710c:	68bb      	ldr	r3, [r7, #8]
 800710e:	099b      	lsrs	r3, r3, #6
 8007110:	b2db      	uxtb	r3, r3
 8007112:	f003 0303 	and.w	r3, r3, #3
 8007116:	b2da      	uxtb	r2, r3
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800711c:	68bb      	ldr	r3, [r7, #8]
 800711e:	095b      	lsrs	r3, r3, #5
 8007120:	b2db      	uxtb	r3, r3
 8007122:	f003 0301 	and.w	r3, r3, #1
 8007126:	b2da      	uxtb	r2, r3
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800712c:	68bb      	ldr	r3, [r7, #8]
 800712e:	0a1b      	lsrs	r3, r3, #8
 8007130:	b29b      	uxth	r3, r3
 8007132:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007136:	b29a      	uxth	r2, r3
 8007138:	68bb      	ldr	r3, [r7, #8]
 800713a:	0e1b      	lsrs	r3, r3, #24
 800713c:	b29b      	uxth	r3, r3
 800713e:	4313      	orrs	r3, r2
 8007140:	b29a      	uxth	r2, r3
 8007142:	683b      	ldr	r3, [r7, #0]
 8007144:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	061a      	lsls	r2, r3, #24
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	021b      	lsls	r3, r3, #8
 800714e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007152:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	0a1b      	lsrs	r3, r3, #8
 8007158:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800715c:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	0e1b      	lsrs	r3, r3, #24
 8007162:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8007168:	693b      	ldr	r3, [r7, #16]
 800716a:	b2da      	uxtb	r2, r3
 800716c:	683b      	ldr	r3, [r7, #0]
 800716e:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8007170:	693b      	ldr	r3, [r7, #16]
 8007172:	0a1b      	lsrs	r3, r3, #8
 8007174:	b2da      	uxtb	r2, r3
 8007176:	683b      	ldr	r3, [r7, #0]
 8007178:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800717a:	693b      	ldr	r3, [r7, #16]
 800717c:	0d1b      	lsrs	r3, r3, #20
 800717e:	b2db      	uxtb	r3, r3
 8007180:	f003 030f 	and.w	r3, r3, #15
 8007184:	b2da      	uxtb	r2, r3
 8007186:	683b      	ldr	r3, [r7, #0]
 8007188:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800718a:	693b      	ldr	r3, [r7, #16]
 800718c:	0c1b      	lsrs	r3, r3, #16
 800718e:	b29b      	uxth	r3, r3
 8007190:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007194:	b29a      	uxth	r2, r3
 8007196:	697b      	ldr	r3, [r7, #20]
 8007198:	b29b      	uxth	r3, r3
 800719a:	b2db      	uxtb	r3, r3
 800719c:	b29b      	uxth	r3, r3
 800719e:	4313      	orrs	r3, r2
 80071a0:	b29a      	uxth	r2, r3
 80071a2:	683b      	ldr	r3, [r7, #0]
 80071a4:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 80071a6:	697b      	ldr	r3, [r7, #20]
 80071a8:	0a9b      	lsrs	r3, r3, #10
 80071aa:	b2db      	uxtb	r3, r3
 80071ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80071b0:	b2da      	uxtb	r2, r3
 80071b2:	683b      	ldr	r3, [r7, #0]
 80071b4:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 80071b6:	697b      	ldr	r3, [r7, #20]
 80071b8:	0a1b      	lsrs	r3, r3, #8
 80071ba:	b2db      	uxtb	r3, r3
 80071bc:	f003 0303 	and.w	r3, r3, #3
 80071c0:	b2da      	uxtb	r2, r3
 80071c2:	683b      	ldr	r3, [r7, #0]
 80071c4:	73da      	strb	r2, [r3, #15]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 80071c6:	697b      	ldr	r3, [r7, #20]
 80071c8:	091b      	lsrs	r3, r3, #4
 80071ca:	b2db      	uxtb	r3, r3
 80071cc:	f003 030f 	and.w	r3, r3, #15
 80071d0:	b2da      	uxtb	r2, r3
 80071d2:	683b      	ldr	r3, [r7, #0]
 80071d4:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 80071d6:	697b      	ldr	r3, [r7, #20]
 80071d8:	b2db      	uxtb	r3, r3
 80071da:	f003 030f 	and.w	r3, r3, #15
 80071de:	b2da      	uxtb	r2, r3
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 80071e4:	69bb      	ldr	r3, [r7, #24]
 80071e6:	0e1b      	lsrs	r3, r3, #24
 80071e8:	b2da      	uxtb	r2, r3
 80071ea:	683b      	ldr	r3, [r7, #0]
 80071ec:	749a      	strb	r2, [r3, #18]
#endif
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80071f6:	4618      	mov	r0, r3
 80071f8:	f001 fc3e 	bl	8008a78 <SDMMC_CmdBlockLength>
 80071fc:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 80071fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007200:	2b00      	cmp	r3, #0
 8007202:	d00d      	beq.n	8007220 <HAL_SD_GetCardStatus+0x15c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	4a08      	ldr	r2, [pc, #32]	; (800722c <HAL_SD_GetCardStatus+0x168>)
 800720a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007210:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	2201      	movs	r2, #1
 8007216:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800721a:	2301      	movs	r3, #1
 800721c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }

  return status;
 8007220:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8007224:	4618      	mov	r0, r3
 8007226:	3750      	adds	r7, #80	; 0x50
 8007228:	46bd      	mov	sp, r7
 800722a:	bd80      	pop	{r7, pc}
 800722c:	1fe00fff 	.word	0x1fe00fff

08007230 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8007230:	b480      	push	{r7}
 8007232:	b083      	sub	sp, #12
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
 8007238:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800723e:	683b      	ldr	r3, [r7, #0]
 8007240:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007246:	683b      	ldr	r3, [r7, #0]
 8007248:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800724e:	683b      	ldr	r3, [r7, #0]
 8007250:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007256:	683b      	ldr	r3, [r7, #0]
 8007258:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800725e:	683b      	ldr	r3, [r7, #0]
 8007260:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007266:	683b      	ldr	r3, [r7, #0]
 8007268:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800726e:	683b      	ldr	r3, [r7, #0]
 8007270:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007276:	683b      	ldr	r3, [r7, #0]
 8007278:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800727a:	2300      	movs	r3, #0
}
 800727c:	4618      	mov	r0, r3
 800727e:	370c      	adds	r7, #12
 8007280:	46bd      	mov	sp, r7
 8007282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007286:	4770      	bx	lr

08007288 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8007288:	b5b0      	push	{r4, r5, r7, lr}
 800728a:	b090      	sub	sp, #64	; 0x40
 800728c:	af04      	add	r7, sp, #16
 800728e:	6078      	str	r0, [r7, #4]
 8007290:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 8007292:	2300      	movs	r3, #0
 8007294:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2203      	movs	r2, #3
 800729c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072a4:	2b03      	cmp	r3, #3
 80072a6:	d02e      	beq.n	8007306 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80072ae:	d106      	bne.n	80072be <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072b4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	639a      	str	r2, [r3, #56]	; 0x38
 80072bc:	e029      	b.n	8007312 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 80072be:	683b      	ldr	r3, [r7, #0]
 80072c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80072c4:	d10a      	bne.n	80072dc <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80072c6:	6878      	ldr	r0, [r7, #4]
 80072c8:	f000 fbd6 	bl	8007a78 <SD_WideBus_Enable>
 80072cc:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80072d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072d4:	431a      	orrs	r2, r3
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	639a      	str	r2, [r3, #56]	; 0x38
 80072da:	e01a      	b.n	8007312 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 80072dc:	683b      	ldr	r3, [r7, #0]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d10a      	bne.n	80072f8 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80072e2:	6878      	ldr	r0, [r7, #4]
 80072e4:	f000 fc13 	bl	8007b0e <SD_WideBus_Disable>
 80072e8:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80072ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072f0:	431a      	orrs	r2, r3
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	639a      	str	r2, [r3, #56]	; 0x38
 80072f6:	e00c      	b.n	8007312 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072fc:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	639a      	str	r2, [r3, #56]	; 0x38
 8007304:	e005      	b.n	8007312 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800730a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007316:	2b00      	cmp	r3, #0
 8007318:	d007      	beq.n	800732a <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	4a60      	ldr	r2, [pc, #384]	; (80074a0 <HAL_SD_ConfigWideBusOperation+0x218>)
 8007320:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8007322:	2301      	movs	r3, #1
 8007324:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8007328:	e097      	b.n	800745a <HAL_SD_ConfigWideBusOperation+0x1d2>
  }
  else
  {
    sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 800732a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800732e:	f7fd fed3 	bl	80050d8 <HAL_RCCEx_GetPeriphCLKFreq>
 8007332:	6278      	str	r0, [r7, #36]	; 0x24
    if (sdmmc_clk != 0U)
 8007334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007336:	2b00      	cmp	r3, #0
 8007338:	f000 8086 	beq.w	8007448 <HAL_SD_ConfigWideBusOperation+0x1c0>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	685b      	ldr	r3, [r3, #4]
 8007340:	60fb      	str	r3, [r7, #12]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
      Init.ClockBypass         = hsd->Init.ClockBypass;
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	689b      	ldr	r3, [r3, #8]
 8007346:	613b      	str	r3, [r7, #16]
      Init.BusWide             = WideMode;
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	617b      	str	r3, [r7, #20]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	691b      	ldr	r3, [r3, #16]
 8007350:	61bb      	str	r3, [r7, #24]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	695a      	ldr	r2, [r3, #20]
 8007356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007358:	4952      	ldr	r1, [pc, #328]	; (80074a4 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800735a:	fba1 1303 	umull	r1, r3, r1, r3
 800735e:	0e1b      	lsrs	r3, r3, #24
 8007360:	429a      	cmp	r2, r3
 8007362:	d303      	bcc.n	800736c <HAL_SD_ConfigWideBusOperation+0xe4>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	695b      	ldr	r3, [r3, #20]
 8007368:	61fb      	str	r3, [r7, #28]
 800736a:	e05a      	b.n	8007422 <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007370:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007374:	d103      	bne.n	800737e <HAL_SD_ConfigWideBusOperation+0xf6>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	695b      	ldr	r3, [r3, #20]
 800737a:	61fb      	str	r3, [r7, #28]
 800737c:	e051      	b.n	8007422 <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007382:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007386:	d126      	bne.n	80073d6 <HAL_SD_ConfigWideBusOperation+0x14e>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	695b      	ldr	r3, [r3, #20]
 800738c:	2b00      	cmp	r3, #0
 800738e:	d10e      	bne.n	80073ae <HAL_SD_ConfigWideBusOperation+0x126>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 8007390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007392:	4a45      	ldr	r2, [pc, #276]	; (80074a8 <HAL_SD_ConfigWideBusOperation+0x220>)
 8007394:	4293      	cmp	r3, r2
 8007396:	d906      	bls.n	80073a6 <HAL_SD_ConfigWideBusOperation+0x11e>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8007398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800739a:	4a42      	ldr	r2, [pc, #264]	; (80074a4 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800739c:	fba2 2303 	umull	r2, r3, r2, r3
 80073a0:	0e5b      	lsrs	r3, r3, #25
 80073a2:	61fb      	str	r3, [r7, #28]
 80073a4:	e03d      	b.n	8007422 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	695b      	ldr	r3, [r3, #20]
 80073aa:	61fb      	str	r3, [r7, #28]
 80073ac:	e039      	b.n	8007422 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	695b      	ldr	r3, [r3, #20]
 80073b2:	005b      	lsls	r3, r3, #1
 80073b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80073ba:	4a3b      	ldr	r2, [pc, #236]	; (80074a8 <HAL_SD_ConfigWideBusOperation+0x220>)
 80073bc:	4293      	cmp	r3, r2
 80073be:	d906      	bls.n	80073ce <HAL_SD_ConfigWideBusOperation+0x146>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 80073c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073c2:	4a38      	ldr	r2, [pc, #224]	; (80074a4 <HAL_SD_ConfigWideBusOperation+0x21c>)
 80073c4:	fba2 2303 	umull	r2, r3, r2, r3
 80073c8:	0e5b      	lsrs	r3, r3, #25
 80073ca:	61fb      	str	r3, [r7, #28]
 80073cc:	e029      	b.n	8007422 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	695b      	ldr	r3, [r3, #20]
 80073d2:	61fb      	str	r3, [r7, #28]
 80073d4:	e025      	b.n	8007422 <HAL_SD_ConfigWideBusOperation+0x19a>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	695b      	ldr	r3, [r3, #20]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d10e      	bne.n	80073fc <HAL_SD_ConfigWideBusOperation+0x174>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 80073de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073e0:	4a32      	ldr	r2, [pc, #200]	; (80074ac <HAL_SD_ConfigWideBusOperation+0x224>)
 80073e2:	4293      	cmp	r3, r2
 80073e4:	d906      	bls.n	80073f4 <HAL_SD_ConfigWideBusOperation+0x16c>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 80073e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073e8:	4a2e      	ldr	r2, [pc, #184]	; (80074a4 <HAL_SD_ConfigWideBusOperation+0x21c>)
 80073ea:	fba2 2303 	umull	r2, r3, r2, r3
 80073ee:	0e1b      	lsrs	r3, r3, #24
 80073f0:	61fb      	str	r3, [r7, #28]
 80073f2:	e016      	b.n	8007422 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	695b      	ldr	r3, [r3, #20]
 80073f8:	61fb      	str	r3, [r7, #28]
 80073fa:	e012      	b.n	8007422 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	695b      	ldr	r3, [r3, #20]
 8007400:	005b      	lsls	r3, r3, #1
 8007402:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007404:	fbb2 f3f3 	udiv	r3, r2, r3
 8007408:	4a28      	ldr	r2, [pc, #160]	; (80074ac <HAL_SD_ConfigWideBusOperation+0x224>)
 800740a:	4293      	cmp	r3, r2
 800740c:	d906      	bls.n	800741c <HAL_SD_ConfigWideBusOperation+0x194>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800740e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007410:	4a24      	ldr	r2, [pc, #144]	; (80074a4 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8007412:	fba2 2303 	umull	r2, r3, r2, r3
 8007416:	0e1b      	lsrs	r3, r3, #24
 8007418:	61fb      	str	r3, [r7, #28]
 800741a:	e002      	b.n	8007422 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	695b      	ldr	r3, [r3, #20]
 8007420:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      Init.Transceiver = hsd->Init.Transceiver;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	699b      	ldr	r3, [r3, #24]
 8007426:	623b      	str	r3, [r7, #32]
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
      }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

      (void)SDMMC_Init(hsd->Instance, Init);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681d      	ldr	r5, [r3, #0]
 800742c:	466c      	mov	r4, sp
 800742e:	f107 0318 	add.w	r3, r7, #24
 8007432:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007436:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800743a:	f107 030c 	add.w	r3, r7, #12
 800743e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007440:	4628      	mov	r0, r5
 8007442:	f001 fa3b 	bl	80088bc <SDMMC_Init>
 8007446:	e008      	b.n	800745a <HAL_SD_ConfigWideBusOperation+0x1d2>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800744c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	639a      	str	r2, [r3, #56]	; 0x38
      status = HAL_ERROR;
 8007454:	2301      	movs	r3, #1
 8007456:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007462:	4618      	mov	r0, r3
 8007464:	f001 fb08 	bl	8008a78 <SDMMC_CmdBlockLength>
 8007468:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800746a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800746c:	2b00      	cmp	r3, #0
 800746e:	d00c      	beq.n	800748a <HAL_SD_ConfigWideBusOperation+0x202>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	4a0a      	ldr	r2, [pc, #40]	; (80074a0 <HAL_SD_ConfigWideBusOperation+0x218>)
 8007476:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800747c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800747e:	431a      	orrs	r2, r3
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8007484:	2301      	movs	r3, #1
 8007486:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2201      	movs	r2, #1
 800748e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8007492:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8007496:	4618      	mov	r0, r3
 8007498:	3730      	adds	r7, #48	; 0x30
 800749a:	46bd      	mov	sp, r7
 800749c:	bdb0      	pop	{r4, r5, r7, pc}
 800749e:	bf00      	nop
 80074a0:	1fe00fff 	.word	0x1fe00fff
 80074a4:	55e63b89 	.word	0x55e63b89
 80074a8:	02faf080 	.word	0x02faf080
 80074ac:	017d7840 	.word	0x017d7840

080074b0 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80074b0:	b580      	push	{r7, lr}
 80074b2:	b086      	sub	sp, #24
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80074b8:	2300      	movs	r3, #0
 80074ba:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80074bc:	f107 030c 	add.w	r3, r7, #12
 80074c0:	4619      	mov	r1, r3
 80074c2:	6878      	ldr	r0, [r7, #4]
 80074c4:	f000 fab0 	bl	8007a28 <SD_SendStatus>
 80074c8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80074ca:	697b      	ldr	r3, [r7, #20]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d005      	beq.n	80074dc <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80074d4:	697b      	ldr	r3, [r7, #20]
 80074d6:	431a      	orrs	r2, r3
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	0a5b      	lsrs	r3, r3, #9
 80074e0:	f003 030f 	and.w	r3, r3, #15
 80074e4:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80074e6:	693b      	ldr	r3, [r7, #16]
}
 80074e8:	4618      	mov	r0, r3
 80074ea:	3718      	adds	r7, #24
 80074ec:	46bd      	mov	sp, r7
 80074ee:	bd80      	pop	{r7, pc}

080074f0 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80074f0:	b5b0      	push	{r4, r5, r7, lr}
 80074f2:	b090      	sub	sp, #64	; 0x40
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80074f8:	2301      	movs	r3, #1
 80074fa:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	4618      	mov	r0, r3
 8007502:	f001 fa35 	bl	8008970 <SDMMC_GetPowerState>
 8007506:	4603      	mov	r3, r0
 8007508:	2b00      	cmp	r3, #0
 800750a:	d102      	bne.n	8007512 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800750c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8007510:	e0a9      	b.n	8007666 <SD_InitCard+0x176>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007516:	2b03      	cmp	r3, #3
 8007518:	d02e      	beq.n	8007578 <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	4618      	mov	r0, r3
 8007520:	f001 fc7a 	bl	8008e18 <SDMMC_CmdSendCID>
 8007524:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007526:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007528:	2b00      	cmp	r3, #0
 800752a:	d001      	beq.n	8007530 <SD_InitCard+0x40>
    {
      return errorstate;
 800752c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800752e:	e09a      	b.n	8007666 <SD_InitCard+0x176>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	2100      	movs	r1, #0
 8007536:	4618      	mov	r0, r3
 8007538:	f001 fa5f 	bl	80089fa <SDMMC_GetResponse>
 800753c:	4602      	mov	r2, r0
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	2104      	movs	r1, #4
 8007548:	4618      	mov	r0, r3
 800754a:	f001 fa56 	bl	80089fa <SDMMC_GetResponse>
 800754e:	4602      	mov	r2, r0
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	2108      	movs	r1, #8
 800755a:	4618      	mov	r0, r3
 800755c:	f001 fa4d 	bl	80089fa <SDMMC_GetResponse>
 8007560:	4602      	mov	r2, r0
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	210c      	movs	r1, #12
 800756c:	4618      	mov	r0, r3
 800756e:	f001 fa44 	bl	80089fa <SDMMC_GetResponse>
 8007572:	4602      	mov	r2, r0
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	67da      	str	r2, [r3, #124]	; 0x7c
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800757c:	2b03      	cmp	r3, #3
 800757e:	d00d      	beq.n	800759c <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	f107 020e 	add.w	r2, r7, #14
 8007588:	4611      	mov	r1, r2
 800758a:	4618      	mov	r0, r3
 800758c:	f001 fc83 	bl	8008e96 <SDMMC_CmdSetRelAdd>
 8007590:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007592:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007594:	2b00      	cmp	r3, #0
 8007596:	d001      	beq.n	800759c <SD_InitCard+0xac>
    {
      return errorstate;
 8007598:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800759a:	e064      	b.n	8007666 <SD_InitCard+0x176>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075a0:	2b03      	cmp	r3, #3
 80075a2:	d036      	beq.n	8007612 <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80075a4:	89fb      	ldrh	r3, [r7, #14]
 80075a6:	461a      	mov	r2, r3
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	649a      	str	r2, [r3, #72]	; 0x48

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681a      	ldr	r2, [r3, #0]
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80075b4:	041b      	lsls	r3, r3, #16
 80075b6:	4619      	mov	r1, r3
 80075b8:	4610      	mov	r0, r2
 80075ba:	f001 fc4c 	bl	8008e56 <SDMMC_CmdSendCSD>
 80075be:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80075c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d001      	beq.n	80075ca <SD_InitCard+0xda>
    {
      return errorstate;
 80075c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075c8:	e04d      	b.n	8007666 <SD_InitCard+0x176>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	2100      	movs	r1, #0
 80075d0:	4618      	mov	r0, r3
 80075d2:	f001 fa12 	bl	80089fa <SDMMC_GetResponse>
 80075d6:	4602      	mov	r2, r0
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	2104      	movs	r1, #4
 80075e2:	4618      	mov	r0, r3
 80075e4:	f001 fa09 	bl	80089fa <SDMMC_GetResponse>
 80075e8:	4602      	mov	r2, r0
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	2108      	movs	r1, #8
 80075f4:	4618      	mov	r0, r3
 80075f6:	f001 fa00 	bl	80089fa <SDMMC_GetResponse>
 80075fa:	4602      	mov	r2, r0
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	210c      	movs	r1, #12
 8007606:	4618      	mov	r0, r3
 8007608:	f001 f9f7 	bl	80089fa <SDMMC_GetResponse>
 800760c:	4602      	mov	r2, r0
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	66da      	str	r2, [r3, #108]	; 0x6c
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	2104      	movs	r1, #4
 8007618:	4618      	mov	r0, r3
 800761a:	f001 f9ee 	bl	80089fa <SDMMC_GetResponse>
 800761e:	4603      	mov	r3, r0
 8007620:	0d1a      	lsrs	r2, r3, #20
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8007626:	f107 0310 	add.w	r3, r7, #16
 800762a:	4619      	mov	r1, r3
 800762c:	6878      	ldr	r0, [r7, #4]
 800762e:	f7ff fba5 	bl	8006d7c <HAL_SD_GetCardCSD>
 8007632:	4603      	mov	r3, r0
 8007634:	2b00      	cmp	r3, #0
 8007636:	d002      	beq.n	800763e <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007638:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800763c:	e013      	b.n	8007666 <SD_InitCard+0x176>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	6819      	ldr	r1, [r3, #0]
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007646:	041b      	lsls	r3, r3, #16
 8007648:	2200      	movs	r2, #0
 800764a:	461c      	mov	r4, r3
 800764c:	4615      	mov	r5, r2
 800764e:	4622      	mov	r2, r4
 8007650:	462b      	mov	r3, r5
 8007652:	4608      	mov	r0, r1
 8007654:	f001 faf6 	bl	8008c44 <SDMMC_CmdSelDesel>
 8007658:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800765a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800765c:	2b00      	cmp	r3, #0
 800765e:	d001      	beq.n	8007664 <SD_InitCard+0x174>
  {
    return errorstate;
 8007660:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007662:	e000      	b.n	8007666 <SD_InitCard+0x176>
  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8007664:	2300      	movs	r3, #0
}
 8007666:	4618      	mov	r0, r3
 8007668:	3740      	adds	r7, #64	; 0x40
 800766a:	46bd      	mov	sp, r7
 800766c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08007670 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8007670:	b580      	push	{r7, lr}
 8007672:	b088      	sub	sp, #32
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007678:	2300      	movs	r3, #0
 800767a:	60fb      	str	r3, [r7, #12]
  uint32_t response = 0U, validvoltage = 0U;
 800767c:	2300      	movs	r3, #0
 800767e:	61fb      	str	r3, [r7, #28]
 8007680:	2300      	movs	r3, #0
 8007682:	61bb      	str	r3, [r7, #24]
  uint32_t errorstate;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t tickstart = HAL_GetTick();
 8007684:	f7f9 ff7e 	bl	8001584 <HAL_GetTick>
 8007688:	6178      	str	r0, [r7, #20]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	4618      	mov	r0, r3
 8007690:	f001 fafc 	bl	8008c8c <SDMMC_CmdGoIdleState>
 8007694:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007696:	693b      	ldr	r3, [r7, #16]
 8007698:	2b00      	cmp	r3, #0
 800769a:	d001      	beq.n	80076a0 <SD_PowerON+0x30>
  {
    return errorstate;
 800769c:	693b      	ldr	r3, [r7, #16]
 800769e:	e0ed      	b.n	800787c <SD_PowerON+0x20c>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	4618      	mov	r0, r3
 80076a6:	f001 fb0f 	bl	8008cc8 <SDMMC_CmdOperCond>
 80076aa:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 80076ac:	693b      	ldr	r3, [r7, #16]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d00d      	beq.n	80076ce <SD_PowerON+0x5e>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	2200      	movs	r2, #0
 80076b6:	641a      	str	r2, [r3, #64]	; 0x40
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	4618      	mov	r0, r3
 80076be:	f001 fae5 	bl	8008c8c <SDMMC_CmdGoIdleState>
 80076c2:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 80076c4:	693b      	ldr	r3, [r7, #16]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d004      	beq.n	80076d4 <SD_PowerON+0x64>
    {
      return errorstate;
 80076ca:	693b      	ldr	r3, [r7, #16]
 80076cc:	e0d6      	b.n	800787c <SD_PowerON+0x20c>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	2201      	movs	r2, #1
 80076d2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076d8:	2b01      	cmp	r3, #1
 80076da:	d137      	bne.n	800774c <SD_PowerON+0xdc>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	2100      	movs	r1, #0
 80076e2:	4618      	mov	r0, r3
 80076e4:	f001 fb10 	bl	8008d08 <SDMMC_CmdAppCommand>
 80076e8:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 80076ea:	693b      	ldr	r3, [r7, #16]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d02d      	beq.n	800774c <SD_PowerON+0xdc>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80076f0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80076f4:	e0c2      	b.n	800787c <SD_PowerON+0x20c>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	2100      	movs	r1, #0
 80076fc:	4618      	mov	r0, r3
 80076fe:	f001 fb03 	bl	8008d08 <SDMMC_CmdAppCommand>
 8007702:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007704:	693b      	ldr	r3, [r7, #16]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d001      	beq.n	800770e <SD_PowerON+0x9e>
    {
      return errorstate;
 800770a:	693b      	ldr	r3, [r7, #16]
 800770c:	e0b6      	b.n	800787c <SD_PowerON+0x20c>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	495c      	ldr	r1, [pc, #368]	; (8007884 <SD_PowerON+0x214>)
 8007714:	4618      	mov	r0, r3
 8007716:	f001 fb1a 	bl	8008d4e <SDMMC_CmdAppOperCommand>
 800771a:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800771c:	693b      	ldr	r3, [r7, #16]
 800771e:	2b00      	cmp	r3, #0
 8007720:	d002      	beq.n	8007728 <SD_PowerON+0xb8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007722:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007726:	e0a9      	b.n	800787c <SD_PowerON+0x20c>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	2100      	movs	r1, #0
 800772e:	4618      	mov	r0, r3
 8007730:	f001 f963 	bl	80089fa <SDMMC_GetResponse>
 8007734:	61f8      	str	r0, [r7, #28]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8007736:	69fb      	ldr	r3, [r7, #28]
 8007738:	0fdb      	lsrs	r3, r3, #31
 800773a:	2b01      	cmp	r3, #1
 800773c:	d101      	bne.n	8007742 <SD_PowerON+0xd2>
 800773e:	2301      	movs	r3, #1
 8007740:	e000      	b.n	8007744 <SD_PowerON+0xd4>
 8007742:	2300      	movs	r3, #0
 8007744:	61bb      	str	r3, [r7, #24]

    count++;
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	3301      	adds	r3, #1
 800774a:	60fb      	str	r3, [r7, #12]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8007752:	4293      	cmp	r3, r2
 8007754:	d802      	bhi.n	800775c <SD_PowerON+0xec>
 8007756:	69bb      	ldr	r3, [r7, #24]
 8007758:	2b00      	cmp	r3, #0
 800775a:	d0cc      	beq.n	80076f6 <SD_PowerON+0x86>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8007762:	4293      	cmp	r3, r2
 8007764:	d902      	bls.n	800776c <SD_PowerON+0xfc>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8007766:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800776a:	e087      	b.n	800787c <SD_PowerON+0x20c>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800776c:	69fb      	ldr	r3, [r7, #28]
 800776e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007772:	2b00      	cmp	r3, #0
 8007774:	d07e      	beq.n	8007874 <SD_PowerON+0x204>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	2201      	movs	r2, #1
 800777a:	63da      	str	r2, [r3, #60]	; 0x3c
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	699b      	ldr	r3, [r3, #24]
 8007780:	2b01      	cmp	r3, #1
 8007782:	d17a      	bne.n	800787a <SD_PowerON+0x20a>
    {
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 8007784:	69fb      	ldr	r3, [r7, #28]
 8007786:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800778a:	2b00      	cmp	r3, #0
 800778c:	d075      	beq.n	800787a <SD_PowerON+0x20a>
      {
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007794:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Start switching procedue */
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	681a      	ldr	r2, [r3, #0]
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	f042 0208 	orr.w	r2, r2, #8
 80077a4:	601a      	str	r2, [r3, #0]

        /* Send CMD11 to switch 1.8V mode */
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	4618      	mov	r0, r3
 80077ac:	f001 fbda 	bl	8008f64 <SDMMC_CmdVoltageSwitch>
 80077b0:	6138      	str	r0, [r7, #16]
        if(errorstate != HAL_SD_ERROR_NONE)
 80077b2:	693b      	ldr	r3, [r7, #16]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d00c      	beq.n	80077d2 <SD_PowerON+0x162>
        {
          return errorstate;
 80077b8:	693b      	ldr	r3, [r7, #16]
 80077ba:	e05f      	b.n	800787c <SD_PowerON+0x20c>
        }

        /* Check to CKSTOP */
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
        {
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80077bc:	f7f9 fee2 	bl	8001584 <HAL_GetTick>
 80077c0:	4602      	mov	r2, r0
 80077c2:	697b      	ldr	r3, [r7, #20]
 80077c4:	1ad3      	subs	r3, r2, r3
 80077c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80077ca:	d102      	bne.n	80077d2 <SD_PowerON+0x162>
          {
            return HAL_SD_ERROR_TIMEOUT;
 80077cc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80077d0:	e054      	b.n	800787c <SD_PowerON+0x20c>
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077d8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80077dc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80077e0:	d1ec      	bne.n	80077bc <SD_PowerON+0x14c>
          }
        }

        /* Clear CKSTOP Flag */
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80077ea:	639a      	str	r2, [r3, #56]	; 0x38

        /* Check to BusyD0 */
        if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80077f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80077fa:	d002      	beq.n	8007802 <SD_PowerON+0x192>
        {
          /* Error when activate Voltage Switch in SDMMC Peripheral */
          return SDMMC_ERROR_UNSUPPORTED_FEATURE;
 80077fc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007800:	e03c      	b.n	800787c <SD_PowerON+0x20c>
        {
          /* Enable Transceiver Switch PIN */
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->DriveTransceiver_1_8V_Callback(SET);
#else
          HAL_SDEx_DriveTransceiver_1_8V_Callback(SET);
 8007802:	2001      	movs	r0, #1
 8007804:	f000 fb44 	bl	8007e90 <HAL_SDEx_DriveTransceiver_1_8V_Callback>
#endif

          /* Switch ready */
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	681a      	ldr	r2, [r3, #0]
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	f042 0204 	orr.w	r2, r2, #4
 8007816:	601a      	str	r2, [r3, #0]

          /* Check VSWEND Flag */
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 8007818:	e00a      	b.n	8007830 <SD_PowerON+0x1c0>
          {
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800781a:	f7f9 feb3 	bl	8001584 <HAL_GetTick>
 800781e:	4602      	mov	r2, r0
 8007820:	697b      	ldr	r3, [r7, #20]
 8007822:	1ad3      	subs	r3, r2, r3
 8007824:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007828:	d102      	bne.n	8007830 <SD_PowerON+0x1c0>
            {
              return HAL_SD_ERROR_TIMEOUT;
 800782a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800782e:	e025      	b.n	800787c <SD_PowerON+0x20c>
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007836:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800783a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800783e:	d1ec      	bne.n	800781a <SD_PowerON+0x1aa>
            }
          }

          /* Clear VSWEND Flag */
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007848:	639a      	str	r2, [r3, #56]	; 0x38

          /* Check BusyD0 status */
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007850:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007854:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007858:	d102      	bne.n	8007860 <SD_PowerON+0x1f0>
          {
            /* Error when enabling 1.8V mode */
            return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800785a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800785e:	e00d      	b.n	800787c <SD_PowerON+0x20c>
          }
          /* Switch to 1.8V OK */

          /* Disable VSWITCH FLAG from SDMMC Peripheral */
          hsd->Instance->POWER = 0x13U;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	2213      	movs	r2, #19
 8007866:	601a      	str	r2, [r3, #0]

          /* Clean Status flags */
          hsd->Instance->ICR = 0xFFFFFFFFU;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007870:	639a      	str	r2, [r3, #56]	; 0x38
 8007872:	e002      	b.n	800787a <SD_PowerON+0x20a>
    }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2200      	movs	r2, #0
 8007878:	63da      	str	r2, [r3, #60]	; 0x3c
  }


  return HAL_SD_ERROR_NONE;
 800787a:	2300      	movs	r3, #0
}
 800787c:	4618      	mov	r0, r3
 800787e:	3720      	adds	r7, #32
 8007880:	46bd      	mov	sp, r7
 8007882:	bd80      	pop	{r7, pc}
 8007884:	c1100000 	.word	0xc1100000

08007888 <SD_SendSDStatus>:
  * @param  pSDstatus Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8007888:	b580      	push	{r7, lr}
 800788a:	b08c      	sub	sp, #48	; 0x30
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
 8007890:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8007892:	f7f9 fe77 	bl	8001584 <HAL_GetTick>
 8007896:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8007898:	683b      	ldr	r3, [r7, #0]
 800789a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	2100      	movs	r1, #0
 80078a2:	4618      	mov	r0, r3
 80078a4:	f001 f8a9 	bl	80089fa <SDMMC_GetResponse>
 80078a8:	4603      	mov	r3, r0
 80078aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80078ae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80078b2:	d102      	bne.n	80078ba <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80078b4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80078b8:	e0b0      	b.n	8007a1c <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	2140      	movs	r1, #64	; 0x40
 80078c0:	4618      	mov	r0, r3
 80078c2:	f001 f8d9 	bl	8008a78 <SDMMC_CmdBlockLength>
 80078c6:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80078c8:	6a3b      	ldr	r3, [r7, #32]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d005      	beq.n	80078da <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 80078d6:	6a3b      	ldr	r3, [r7, #32]
 80078d8:	e0a0      	b.n	8007a1c <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681a      	ldr	r2, [r3, #0]
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80078e2:	041b      	lsls	r3, r3, #16
 80078e4:	4619      	mov	r1, r3
 80078e6:	4610      	mov	r0, r2
 80078e8:	f001 fa0e 	bl	8008d08 <SDMMC_CmdAppCommand>
 80078ec:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80078ee:	6a3b      	ldr	r3, [r7, #32]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d005      	beq.n	8007900 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 80078fc:	6a3b      	ldr	r3, [r7, #32]
 80078fe:	e08d      	b.n	8007a1c <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007900:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007904:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 8007906:	2340      	movs	r3, #64	; 0x40
 8007908:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800790a:	2360      	movs	r3, #96	; 0x60
 800790c:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800790e:	2302      	movs	r3, #2
 8007910:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007912:	2300      	movs	r3, #0
 8007914:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8007916:	2301      	movs	r3, #1
 8007918:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	f107 0208 	add.w	r2, r7, #8
 8007922:	4611      	mov	r1, r2
 8007924:	4618      	mov	r0, r3
 8007926:	f001 f87b 	bl	8008a20 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	4618      	mov	r0, r3
 8007930:	f001 faf6 	bl	8008f20 <SDMMC_CmdStatusRegister>
 8007934:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007936:	6a3b      	ldr	r3, [r7, #32]
 8007938:	2b00      	cmp	r3, #0
 800793a:	d02b      	beq.n	8007994 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8007944:	6a3b      	ldr	r3, [r7, #32]
 8007946:	e069      	b.n	8007a1c <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
#else
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800794e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007952:	2b00      	cmp	r3, #0
 8007954:	d013      	beq.n	800797e <SD_SendSDStatus+0xf6>
    {
      for(count = 0U; count < 8U; count++)
 8007956:	2300      	movs	r3, #0
 8007958:	62fb      	str	r3, [r7, #44]	; 0x2c
 800795a:	e00d      	b.n	8007978 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	4618      	mov	r0, r3
 8007962:	f000 ffd5 	bl	8008910 <SDMMC_ReadFIFO>
 8007966:	4602      	mov	r2, r0
 8007968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800796a:	601a      	str	r2, [r3, #0]
        pData++;
 800796c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800796e:	3304      	adds	r3, #4
 8007970:	62bb      	str	r3, [r7, #40]	; 0x28
      for(count = 0U; count < 8U; count++)
 8007972:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007974:	3301      	adds	r3, #1
 8007976:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800797a:	2b07      	cmp	r3, #7
 800797c:	d9ee      	bls.n	800795c <SD_SendSDStatus+0xd4>
      }
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800797e:	f7f9 fe01 	bl	8001584 <HAL_GetTick>
 8007982:	4602      	mov	r2, r0
 8007984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007986:	1ad3      	subs	r3, r2, r3
 8007988:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800798c:	d102      	bne.n	8007994 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800798e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007992:	e043      	b.n	8007a1c <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800799a:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d0d2      	beq.n	8007948 <SD_SendSDStatus+0xc0>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079a8:	f003 0308 	and.w	r3, r3, #8
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d001      	beq.n	80079b4 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 80079b0:	2308      	movs	r3, #8
 80079b2:	e033      	b.n	8007a1c <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079ba:	f003 0302 	and.w	r3, r3, #2
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d001      	beq.n	80079c6 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80079c2:	2302      	movs	r3, #2
 80079c4:	e02a      	b.n	8007a1c <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079cc:	f003 0320 	and.w	r3, r3, #32
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d017      	beq.n	8007a04 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 80079d4:	2320      	movs	r3, #32
 80079d6:	e021      	b.n	8007a1c <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
#else
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)))
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	4618      	mov	r0, r3
 80079de:	f000 ff97 	bl	8008910 <SDMMC_ReadFIFO>
 80079e2:	4602      	mov	r2, r0
 80079e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079e6:	601a      	str	r2, [r3, #0]
    pData++;
 80079e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079ea:	3304      	adds	r3, #4
 80079ec:	62bb      	str	r3, [r7, #40]	; 0x28

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80079ee:	f7f9 fdc9 	bl	8001584 <HAL_GetTick>
 80079f2:	4602      	mov	r2, r0
 80079f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079f6:	1ad3      	subs	r3, r2, r3
 80079f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80079fc:	d102      	bne.n	8007a04 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80079fe:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007a02:	e00b      	b.n	8007a1c <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a0a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d1e2      	bne.n	80079d8 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	4a03      	ldr	r2, [pc, #12]	; (8007a24 <SD_SendSDStatus+0x19c>)
 8007a18:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 8007a1a:	2300      	movs	r3, #0
}
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	3730      	adds	r7, #48	; 0x30
 8007a20:	46bd      	mov	sp, r7
 8007a22:	bd80      	pop	{r7, pc}
 8007a24:	18000f3a 	.word	0x18000f3a

08007a28 <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8007a28:	b580      	push	{r7, lr}
 8007a2a:	b084      	sub	sp, #16
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	6078      	str	r0, [r7, #4]
 8007a30:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8007a32:	683b      	ldr	r3, [r7, #0]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d102      	bne.n	8007a3e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8007a38:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007a3c:	e018      	b.n	8007a70 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681a      	ldr	r2, [r3, #0]
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a46:	041b      	lsls	r3, r3, #16
 8007a48:	4619      	mov	r1, r3
 8007a4a:	4610      	mov	r0, r2
 8007a4c:	f001 fa45 	bl	8008eda <SDMMC_CmdSendStatus>
 8007a50:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d001      	beq.n	8007a5c <SD_SendStatus+0x34>
  {
    return errorstate;
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	e009      	b.n	8007a70 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	2100      	movs	r1, #0
 8007a62:	4618      	mov	r0, r3
 8007a64:	f000 ffc9 	bl	80089fa <SDMMC_GetResponse>
 8007a68:	4602      	mov	r2, r0
 8007a6a:	683b      	ldr	r3, [r7, #0]
 8007a6c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8007a6e:	2300      	movs	r3, #0
}
 8007a70:	4618      	mov	r0, r3
 8007a72:	3710      	adds	r7, #16
 8007a74:	46bd      	mov	sp, r7
 8007a76:	bd80      	pop	{r7, pc}

08007a78 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	b086      	sub	sp, #24
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8007a80:	2300      	movs	r3, #0
 8007a82:	60fb      	str	r3, [r7, #12]
 8007a84:	2300      	movs	r3, #0
 8007a86:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	2100      	movs	r1, #0
 8007a8e:	4618      	mov	r0, r3
 8007a90:	f000 ffb3 	bl	80089fa <SDMMC_GetResponse>
 8007a94:	4603      	mov	r3, r0
 8007a96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a9a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007a9e:	d102      	bne.n	8007aa6 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007aa0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007aa4:	e02f      	b.n	8007b06 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8007aa6:	f107 030c 	add.w	r3, r7, #12
 8007aaa:	4619      	mov	r1, r3
 8007aac:	6878      	ldr	r0, [r7, #4]
 8007aae:	f000 f879 	bl	8007ba4 <SD_FindSCR>
 8007ab2:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007ab4:	697b      	ldr	r3, [r7, #20]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d001      	beq.n	8007abe <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8007aba:	697b      	ldr	r3, [r7, #20]
 8007abc:	e023      	b.n	8007b06 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8007abe:	693b      	ldr	r3, [r7, #16]
 8007ac0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d01c      	beq.n	8007b02 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681a      	ldr	r2, [r3, #0]
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007ad0:	041b      	lsls	r3, r3, #16
 8007ad2:	4619      	mov	r1, r3
 8007ad4:	4610      	mov	r0, r2
 8007ad6:	f001 f917 	bl	8008d08 <SDMMC_CmdAppCommand>
 8007ada:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007adc:	697b      	ldr	r3, [r7, #20]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d001      	beq.n	8007ae6 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8007ae2:	697b      	ldr	r3, [r7, #20]
 8007ae4:	e00f      	b.n	8007b06 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	2102      	movs	r1, #2
 8007aec:	4618      	mov	r0, r3
 8007aee:	f001 f94e 	bl	8008d8e <SDMMC_CmdBusWidth>
 8007af2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007af4:	697b      	ldr	r3, [r7, #20]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d001      	beq.n	8007afe <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8007afa:	697b      	ldr	r3, [r7, #20]
 8007afc:	e003      	b.n	8007b06 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8007afe:	2300      	movs	r3, #0
 8007b00:	e001      	b.n	8007b06 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007b02:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8007b06:	4618      	mov	r0, r3
 8007b08:	3718      	adds	r7, #24
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	bd80      	pop	{r7, pc}

08007b0e <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8007b0e:	b580      	push	{r7, lr}
 8007b10:	b086      	sub	sp, #24
 8007b12:	af00      	add	r7, sp, #0
 8007b14:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8007b16:	2300      	movs	r3, #0
 8007b18:	60fb      	str	r3, [r7, #12]
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	2100      	movs	r1, #0
 8007b24:	4618      	mov	r0, r3
 8007b26:	f000 ff68 	bl	80089fa <SDMMC_GetResponse>
 8007b2a:	4603      	mov	r3, r0
 8007b2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b30:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007b34:	d102      	bne.n	8007b3c <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007b36:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007b3a:	e02f      	b.n	8007b9c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8007b3c:	f107 030c 	add.w	r3, r7, #12
 8007b40:	4619      	mov	r1, r3
 8007b42:	6878      	ldr	r0, [r7, #4]
 8007b44:	f000 f82e 	bl	8007ba4 <SD_FindSCR>
 8007b48:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007b4a:	697b      	ldr	r3, [r7, #20]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d001      	beq.n	8007b54 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8007b50:	697b      	ldr	r3, [r7, #20]
 8007b52:	e023      	b.n	8007b9c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8007b54:	693b      	ldr	r3, [r7, #16]
 8007b56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d01c      	beq.n	8007b98 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681a      	ldr	r2, [r3, #0]
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b66:	041b      	lsls	r3, r3, #16
 8007b68:	4619      	mov	r1, r3
 8007b6a:	4610      	mov	r0, r2
 8007b6c:	f001 f8cc 	bl	8008d08 <SDMMC_CmdAppCommand>
 8007b70:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007b72:	697b      	ldr	r3, [r7, #20]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d001      	beq.n	8007b7c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8007b78:	697b      	ldr	r3, [r7, #20]
 8007b7a:	e00f      	b.n	8007b9c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	2100      	movs	r1, #0
 8007b82:	4618      	mov	r0, r3
 8007b84:	f001 f903 	bl	8008d8e <SDMMC_CmdBusWidth>
 8007b88:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007b8a:	697b      	ldr	r3, [r7, #20]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d001      	beq.n	8007b94 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8007b90:	697b      	ldr	r3, [r7, #20]
 8007b92:	e003      	b.n	8007b9c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8007b94:	2300      	movs	r3, #0
 8007b96:	e001      	b.n	8007b9c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007b98:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	3718      	adds	r7, #24
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	bd80      	pop	{r7, pc}

08007ba4 <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8007ba4:	b580      	push	{r7, lr}
 8007ba6:	b08e      	sub	sp, #56	; 0x38
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	6078      	str	r0, [r7, #4]
 8007bac:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8007bae:	f7f9 fce9 	bl	8001584 <HAL_GetTick>
 8007bb2:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8007bb4:	2300      	movs	r3, #0
 8007bb6:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8007bb8:	2300      	movs	r3, #0
 8007bba:	60bb      	str	r3, [r7, #8]
 8007bbc:	2300      	movs	r3, #0
 8007bbe:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8007bc0:	683b      	ldr	r3, [r7, #0]
 8007bc2:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	2108      	movs	r1, #8
 8007bca:	4618      	mov	r0, r3
 8007bcc:	f000 ff54 	bl	8008a78 <SDMMC_CmdBlockLength>
 8007bd0:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007bd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d001      	beq.n	8007bdc <SD_FindSCR+0x38>
  {
    return errorstate;
 8007bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bda:	e0ad      	b.n	8007d38 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681a      	ldr	r2, [r3, #0]
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007be4:	041b      	lsls	r3, r3, #16
 8007be6:	4619      	mov	r1, r3
 8007be8:	4610      	mov	r0, r2
 8007bea:	f001 f88d 	bl	8008d08 <SDMMC_CmdAppCommand>
 8007bee:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007bf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d001      	beq.n	8007bfa <SD_FindSCR+0x56>
  {
    return errorstate;
 8007bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bf8:	e09e      	b.n	8007d38 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007bfa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007bfe:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8007c00:	2308      	movs	r3, #8
 8007c02:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8007c04:	2330      	movs	r3, #48	; 0x30
 8007c06:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8007c08:	2302      	movs	r3, #2
 8007c0a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8007c10:	2301      	movs	r3, #1
 8007c12:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	f107 0210 	add.w	r2, r7, #16
 8007c1c:	4611      	mov	r1, r2
 8007c1e:	4618      	mov	r0, r3
 8007c20:	f000 fefe 	bl	8008a20 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	4618      	mov	r0, r3
 8007c2a:	f001 f8d3 	bl	8008dd4 <SDMMC_CmdSendSCR>
 8007c2e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d027      	beq.n	8007c86 <SD_FindSCR+0xe2>
  {
    return errorstate;
 8007c36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c38:	e07e      	b.n	8007d38 <SD_FindSCR+0x194>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
  {
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c40:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d113      	bne.n	8007c70 <SD_FindSCR+0xcc>
 8007c48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d110      	bne.n	8007c70 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	4618      	mov	r0, r3
 8007c54:	f000 fe5c 	bl	8008910 <SDMMC_ReadFIFO>
 8007c58:	4603      	mov	r3, r0
 8007c5a:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	4618      	mov	r0, r3
 8007c62:	f000 fe55 	bl	8008910 <SDMMC_ReadFIFO>
 8007c66:	4603      	mov	r3, r0
 8007c68:	60fb      	str	r3, [r7, #12]
      index++;
 8007c6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c6c:	3301      	adds	r3, #1
 8007c6e:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007c70:	f7f9 fc88 	bl	8001584 <HAL_GetTick>
 8007c74:	4602      	mov	r2, r0
 8007c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c78:	1ad3      	subs	r3, r2, r3
 8007c7a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007c7e:	d102      	bne.n	8007c86 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8007c80:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007c84:	e058      	b.n	8007d38 <SD_FindSCR+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007c8c:	f240 532a 	movw	r3, #1322	; 0x52a
 8007c90:	4013      	ands	r3, r2
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d0d1      	beq.n	8007c3a <SD_FindSCR+0x96>
      return HAL_SD_ERROR_TIMEOUT;
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c9c:	f003 0308 	and.w	r3, r3, #8
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d005      	beq.n	8007cb0 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	2208      	movs	r2, #8
 8007caa:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8007cac:	2308      	movs	r3, #8
 8007cae:	e043      	b.n	8007d38 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cb6:	f003 0302 	and.w	r3, r3, #2
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d005      	beq.n	8007cca <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	2202      	movs	r2, #2
 8007cc4:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8007cc6:	2302      	movs	r3, #2
 8007cc8:	e036      	b.n	8007d38 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cd0:	f003 0320 	and.w	r3, r3, #32
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d005      	beq.n	8007ce4 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	2220      	movs	r2, #32
 8007cde:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8007ce0:	2320      	movs	r3, #32
 8007ce2:	e029      	b.n	8007d38 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	4a15      	ldr	r2, [pc, #84]	; (8007d40 <SD_FindSCR+0x19c>)
 8007cea:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	061a      	lsls	r2, r3, #24
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	021b      	lsls	r3, r3, #8
 8007cf4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007cf8:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	0a1b      	lsrs	r3, r3, #8
 8007cfe:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8007d02:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	0e1b      	lsrs	r3, r3, #24
 8007d08:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8007d0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d0c:	601a      	str	r2, [r3, #0]
    scr++;
 8007d0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d10:	3304      	adds	r3, #4
 8007d12:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8007d14:	68bb      	ldr	r3, [r7, #8]
 8007d16:	061a      	lsls	r2, r3, #24
 8007d18:	68bb      	ldr	r3, [r7, #8]
 8007d1a:	021b      	lsls	r3, r3, #8
 8007d1c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007d20:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8007d22:	68bb      	ldr	r3, [r7, #8]
 8007d24:	0a1b      	lsrs	r3, r3, #8
 8007d26:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8007d2a:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8007d2c:	68bb      	ldr	r3, [r7, #8]
 8007d2e:	0e1b      	lsrs	r3, r3, #24
 8007d30:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8007d32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d34:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8007d36:	2300      	movs	r3, #0
}
 8007d38:	4618      	mov	r0, r3
 8007d3a:	3738      	adds	r7, #56	; 0x38
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	bd80      	pop	{r7, pc}
 8007d40:	18000f3a 	.word	0x18000f3a

08007d44 <SD_Read_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8007d44:	b580      	push	{r7, lr}
 8007d46:	b086      	sub	sp, #24
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d50:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d56:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8007d58:	693b      	ldr	r3, [r7, #16]
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d03f      	beq.n	8007dde <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8007d5e:	2300      	movs	r3, #0
 8007d60:	617b      	str	r3, [r7, #20]
 8007d62:	e033      	b.n	8007dcc <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	4618      	mov	r0, r3
 8007d6a:	f000 fdd1 	bl	8008910 <SDMMC_ReadFIFO>
 8007d6e:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8007d70:	68bb      	ldr	r3, [r7, #8]
 8007d72:	b2da      	uxtb	r2, r3
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	3301      	adds	r3, #1
 8007d7c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007d7e:	693b      	ldr	r3, [r7, #16]
 8007d80:	3b01      	subs	r3, #1
 8007d82:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8007d84:	68bb      	ldr	r3, [r7, #8]
 8007d86:	0a1b      	lsrs	r3, r3, #8
 8007d88:	b2da      	uxtb	r2, r3
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	3301      	adds	r3, #1
 8007d92:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007d94:	693b      	ldr	r3, [r7, #16]
 8007d96:	3b01      	subs	r3, #1
 8007d98:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8007d9a:	68bb      	ldr	r3, [r7, #8]
 8007d9c:	0c1b      	lsrs	r3, r3, #16
 8007d9e:	b2da      	uxtb	r2, r3
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	3301      	adds	r3, #1
 8007da8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007daa:	693b      	ldr	r3, [r7, #16]
 8007dac:	3b01      	subs	r3, #1
 8007dae:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8007db0:	68bb      	ldr	r3, [r7, #8]
 8007db2:	0e1b      	lsrs	r3, r3, #24
 8007db4:	b2da      	uxtb	r2, r3
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	3301      	adds	r3, #1
 8007dbe:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007dc0:	693b      	ldr	r3, [r7, #16]
 8007dc2:	3b01      	subs	r3, #1
 8007dc4:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8007dc6:	697b      	ldr	r3, [r7, #20]
 8007dc8:	3301      	adds	r3, #1
 8007dca:	617b      	str	r3, [r7, #20]
 8007dcc:	697b      	ldr	r3, [r7, #20]
 8007dce:	2b07      	cmp	r3, #7
 8007dd0:	d9c8      	bls.n	8007d64 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	68fa      	ldr	r2, [r7, #12]
 8007dd6:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	693a      	ldr	r2, [r7, #16]
 8007ddc:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8007dde:	bf00      	nop
 8007de0:	3718      	adds	r7, #24
 8007de2:	46bd      	mov	sp, r7
 8007de4:	bd80      	pop	{r7, pc}

08007de6 <SD_Write_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8007de6:	b580      	push	{r7, lr}
 8007de8:	b086      	sub	sp, #24
 8007dea:	af00      	add	r7, sp, #0
 8007dec:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	6a1b      	ldr	r3, [r3, #32]
 8007df2:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007df8:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8007dfa:	693b      	ldr	r3, [r7, #16]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d043      	beq.n	8007e88 <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8007e00:	2300      	movs	r3, #0
 8007e02:	617b      	str	r3, [r7, #20]
 8007e04:	e037      	b.n	8007e76 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	781b      	ldrb	r3, [r3, #0]
 8007e0a:	60bb      	str	r3, [r7, #8]
      tmp++;
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	3301      	adds	r3, #1
 8007e10:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007e12:	693b      	ldr	r3, [r7, #16]
 8007e14:	3b01      	subs	r3, #1
 8007e16:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	781b      	ldrb	r3, [r3, #0]
 8007e1c:	021a      	lsls	r2, r3, #8
 8007e1e:	68bb      	ldr	r3, [r7, #8]
 8007e20:	4313      	orrs	r3, r2
 8007e22:	60bb      	str	r3, [r7, #8]
      tmp++;
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	3301      	adds	r3, #1
 8007e28:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007e2a:	693b      	ldr	r3, [r7, #16]
 8007e2c:	3b01      	subs	r3, #1
 8007e2e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	781b      	ldrb	r3, [r3, #0]
 8007e34:	041a      	lsls	r2, r3, #16
 8007e36:	68bb      	ldr	r3, [r7, #8]
 8007e38:	4313      	orrs	r3, r2
 8007e3a:	60bb      	str	r3, [r7, #8]
      tmp++;
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	3301      	adds	r3, #1
 8007e40:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007e42:	693b      	ldr	r3, [r7, #16]
 8007e44:	3b01      	subs	r3, #1
 8007e46:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	781b      	ldrb	r3, [r3, #0]
 8007e4c:	061a      	lsls	r2, r3, #24
 8007e4e:	68bb      	ldr	r3, [r7, #8]
 8007e50:	4313      	orrs	r3, r2
 8007e52:	60bb      	str	r3, [r7, #8]
      tmp++;
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	3301      	adds	r3, #1
 8007e58:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007e5a:	693b      	ldr	r3, [r7, #16]
 8007e5c:	3b01      	subs	r3, #1
 8007e5e:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	f107 0208 	add.w	r2, r7, #8
 8007e68:	4611      	mov	r1, r2
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	f000 fd5d 	bl	800892a <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8007e70:	697b      	ldr	r3, [r7, #20]
 8007e72:	3301      	adds	r3, #1
 8007e74:	617b      	str	r3, [r7, #20]
 8007e76:	697b      	ldr	r3, [r7, #20]
 8007e78:	2b07      	cmp	r3, #7
 8007e7a:	d9c4      	bls.n	8007e06 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	68fa      	ldr	r2, [r7, #12]
 8007e80:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	693a      	ldr	r2, [r7, #16]
 8007e86:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8007e88:	bf00      	nop
 8007e8a:	3718      	adds	r7, #24
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	bd80      	pop	{r7, pc}

08007e90 <HAL_SDEx_DriveTransceiver_1_8V_Callback>:
  * @brief  Enable/Disable the SD Transceiver 1.8V Mode Callback.
  * @param  status Voltage Switch State
  * @retval None
  */
__weak void HAL_SDEx_DriveTransceiver_1_8V_Callback(FlagStatus status)
{
 8007e90:	b480      	push	{r7}
 8007e92:	b083      	sub	sp, #12
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	4603      	mov	r3, r0
 8007e98:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SD_EnableTransciver could be implemented in the user file
   */
}
 8007e9a:	bf00      	nop
 8007e9c:	370c      	adds	r7, #12
 8007e9e:	46bd      	mov	sp, r7
 8007ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea4:	4770      	bx	lr

08007ea6 <HAL_SDEx_Read_DMADoubleBuffer0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuffer0CpltCallback(SD_HandleTypeDef *hsd)
{
 8007ea6:	b480      	push	{r7}
 8007ea8:	b083      	sub	sp, #12
 8007eaa:	af00      	add	r7, sp, #0
 8007eac:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuffer0CpltCallback can be implemented in the user file
   */
}
 8007eae:	bf00      	nop
 8007eb0:	370c      	adds	r7, #12
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb8:	4770      	bx	lr

08007eba <HAL_SDEx_Read_DMADoubleBuffer1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuffer1CpltCallback(SD_HandleTypeDef *hsd)
{
 8007eba:	b480      	push	{r7}
 8007ebc:	b083      	sub	sp, #12
 8007ebe:	af00      	add	r7, sp, #0
 8007ec0:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuffer1CpltCallback can be implemented in the user file
   */
}
 8007ec2:	bf00      	nop
 8007ec4:	370c      	adds	r7, #12
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ecc:	4770      	bx	lr

08007ece <HAL_SDEx_Write_DMADoubleBuffer0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuffer0CpltCallback(SD_HandleTypeDef *hsd)
{
 8007ece:	b480      	push	{r7}
 8007ed0:	b083      	sub	sp, #12
 8007ed2:	af00      	add	r7, sp, #0
 8007ed4:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuffer0CpltCallback can be implemented in the user file
   */
}
 8007ed6:	bf00      	nop
 8007ed8:	370c      	adds	r7, #12
 8007eda:	46bd      	mov	sp, r7
 8007edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee0:	4770      	bx	lr

08007ee2 <HAL_SDEx_Write_DMADoubleBuffer1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuffer1CpltCallback(SD_HandleTypeDef *hsd)
{
 8007ee2:	b480      	push	{r7}
 8007ee4:	b083      	sub	sp, #12
 8007ee6:	af00      	add	r7, sp, #0
 8007ee8:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuffer0CpltCallback can be implemented in the user file
   */
}
 8007eea:	bf00      	nop
 8007eec:	370c      	adds	r7, #12
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef4:	4770      	bx	lr

08007ef6 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007ef6:	b580      	push	{r7, lr}
 8007ef8:	b084      	sub	sp, #16
 8007efa:	af00      	add	r7, sp, #0
 8007efc:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d101      	bne.n	8007f08 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007f04:	2301      	movs	r3, #1
 8007f06:	e095      	b.n	8008034 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d108      	bne.n	8007f22 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	685b      	ldr	r3, [r3, #4]
 8007f14:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007f18:	d009      	beq.n	8007f2e <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	61da      	str	r2, [r3, #28]
 8007f20:	e005      	b.n	8007f2e <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	2200      	movs	r2, #0
 8007f26:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	2200      	movs	r2, #0
 8007f2c:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	2200      	movs	r2, #0
 8007f32:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007f3a:	b2db      	uxtb	r3, r3
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d106      	bne.n	8007f4e <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	2200      	movs	r2, #0
 8007f44:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007f48:	6878      	ldr	r0, [r7, #4]
 8007f4a:	f7f9 f911 	bl	8001170 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	2202      	movs	r2, #2
 8007f52:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	681a      	ldr	r2, [r3, #0]
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007f64:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	68db      	ldr	r3, [r3, #12]
 8007f6a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007f6e:	d902      	bls.n	8007f76 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007f70:	2300      	movs	r3, #0
 8007f72:	60fb      	str	r3, [r7, #12]
 8007f74:	e002      	b.n	8007f7c <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007f76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007f7a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	68db      	ldr	r3, [r3, #12]
 8007f80:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8007f84:	d007      	beq.n	8007f96 <HAL_SPI_Init+0xa0>
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	68db      	ldr	r3, [r3, #12]
 8007f8a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007f8e:	d002      	beq.n	8007f96 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	2200      	movs	r2, #0
 8007f94:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	685b      	ldr	r3, [r3, #4]
 8007f9a:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	689b      	ldr	r3, [r3, #8]
 8007fa2:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007fa6:	431a      	orrs	r2, r3
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	691b      	ldr	r3, [r3, #16]
 8007fac:	f003 0302 	and.w	r3, r3, #2
 8007fb0:	431a      	orrs	r2, r3
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	695b      	ldr	r3, [r3, #20]
 8007fb6:	f003 0301 	and.w	r3, r3, #1
 8007fba:	431a      	orrs	r2, r3
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	699b      	ldr	r3, [r3, #24]
 8007fc0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007fc4:	431a      	orrs	r2, r3
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	69db      	ldr	r3, [r3, #28]
 8007fca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007fce:	431a      	orrs	r2, r3
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	6a1b      	ldr	r3, [r3, #32]
 8007fd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007fd8:	ea42 0103 	orr.w	r1, r2, r3
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fe0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	430a      	orrs	r2, r1
 8007fea:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	699b      	ldr	r3, [r3, #24]
 8007ff0:	0c1b      	lsrs	r3, r3, #16
 8007ff2:	f003 0204 	and.w	r2, r3, #4
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ffa:	f003 0310 	and.w	r3, r3, #16
 8007ffe:	431a      	orrs	r2, r3
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008004:	f003 0308 	and.w	r3, r3, #8
 8008008:	431a      	orrs	r2, r3
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	68db      	ldr	r3, [r3, #12]
 800800e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8008012:	ea42 0103 	orr.w	r1, r2, r3
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	430a      	orrs	r2, r1
 8008022:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	2200      	movs	r2, #0
 8008028:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	2201      	movs	r2, #1
 800802e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8008032:	2300      	movs	r3, #0
}
 8008034:	4618      	mov	r0, r3
 8008036:	3710      	adds	r7, #16
 8008038:	46bd      	mov	sp, r7
 800803a:	bd80      	pop	{r7, pc}

0800803c <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 800803c:	b580      	push	{r7, lr}
 800803e:	b084      	sub	sp, #16
 8008040:	af00      	add	r7, sp, #0
 8008042:	60f8      	str	r0, [r7, #12]
 8008044:	60b9      	str	r1, [r7, #8]
 8008046:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	2b00      	cmp	r3, #0
 800804c:	d101      	bne.n	8008052 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 800804e:	2301      	movs	r3, #1
 8008050:	e038      	b.n	80080c4 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8008058:	b2db      	uxtb	r3, r3
 800805a:	2b00      	cmp	r3, #0
 800805c:	d106      	bne.n	800806c <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	2200      	movs	r2, #0
 8008062:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8008066:	68f8      	ldr	r0, [r7, #12]
 8008068:	f7f9 f962 	bl	8001330 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	681a      	ldr	r2, [r3, #0]
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	3308      	adds	r3, #8
 8008074:	4619      	mov	r1, r3
 8008076:	4610      	mov	r0, r2
 8008078:	f000 fafa 	bl	8008670 <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	6818      	ldr	r0, [r3, #0]
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	689b      	ldr	r3, [r3, #8]
 8008084:	461a      	mov	r2, r3
 8008086:	68b9      	ldr	r1, [r7, #8]
 8008088:	f000 fb8c 	bl	80087a4 <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	6858      	ldr	r0, [r3, #4]
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	689a      	ldr	r2, [r3, #8]
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008098:	6879      	ldr	r1, [r7, #4]
 800809a:	f000 fbd5 	bl	8008848 <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	68fa      	ldr	r2, [r7, #12]
 80080a4:	6892      	ldr	r2, [r2, #8]
 80080a6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	68fa      	ldr	r2, [r7, #12]
 80080b0:	6892      	ldr	r2, [r2, #8]
 80080b2:	f041 0101 	orr.w	r1, r1, #1
 80080b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	2201      	movs	r2, #1
 80080be:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  return HAL_OK;
 80080c2:	2300      	movs	r3, #0
}
 80080c4:	4618      	mov	r0, r3
 80080c6:	3710      	adds	r7, #16
 80080c8:	46bd      	mov	sp, r7
 80080ca:	bd80      	pop	{r7, pc}

080080cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80080cc:	b580      	push	{r7, lr}
 80080ce:	b082      	sub	sp, #8
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d101      	bne.n	80080de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80080da:	2301      	movs	r3, #1
 80080dc:	e049      	b.n	8008172 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80080e4:	b2db      	uxtb	r3, r3
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d106      	bne.n	80080f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	2200      	movs	r2, #0
 80080ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80080f2:	6878      	ldr	r0, [r7, #4]
 80080f4:	f000 f841 	bl	800817a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	2202      	movs	r2, #2
 80080fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681a      	ldr	r2, [r3, #0]
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	3304      	adds	r3, #4
 8008108:	4619      	mov	r1, r3
 800810a:	4610      	mov	r0, r2
 800810c:	f000 f9f8 	bl	8008500 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	2201      	movs	r2, #1
 8008114:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	2201      	movs	r2, #1
 800811c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	2201      	movs	r2, #1
 8008124:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	2201      	movs	r2, #1
 800812c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	2201      	movs	r2, #1
 8008134:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	2201      	movs	r2, #1
 800813c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	2201      	movs	r2, #1
 8008144:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	2201      	movs	r2, #1
 800814c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	2201      	movs	r2, #1
 8008154:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	2201      	movs	r2, #1
 800815c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	2201      	movs	r2, #1
 8008164:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	2201      	movs	r2, #1
 800816c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008170:	2300      	movs	r3, #0
}
 8008172:	4618      	mov	r0, r3
 8008174:	3708      	adds	r7, #8
 8008176:	46bd      	mov	sp, r7
 8008178:	bd80      	pop	{r7, pc}

0800817a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800817a:	b480      	push	{r7}
 800817c:	b083      	sub	sp, #12
 800817e:	af00      	add	r7, sp, #0
 8008180:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8008182:	bf00      	nop
 8008184:	370c      	adds	r7, #12
 8008186:	46bd      	mov	sp, r7
 8008188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800818c:	4770      	bx	lr
	...

08008190 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008190:	b480      	push	{r7}
 8008192:	b085      	sub	sp, #20
 8008194:	af00      	add	r7, sp, #0
 8008196:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800819e:	b2db      	uxtb	r3, r3
 80081a0:	2b01      	cmp	r3, #1
 80081a2:	d001      	beq.n	80081a8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80081a4:	2301      	movs	r3, #1
 80081a6:	e04f      	b.n	8008248 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	2202      	movs	r2, #2
 80081ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	68da      	ldr	r2, [r3, #12]
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	f042 0201 	orr.w	r2, r2, #1
 80081be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	4a23      	ldr	r2, [pc, #140]	; (8008254 <HAL_TIM_Base_Start_IT+0xc4>)
 80081c6:	4293      	cmp	r3, r2
 80081c8:	d01d      	beq.n	8008206 <HAL_TIM_Base_Start_IT+0x76>
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80081d2:	d018      	beq.n	8008206 <HAL_TIM_Base_Start_IT+0x76>
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	4a1f      	ldr	r2, [pc, #124]	; (8008258 <HAL_TIM_Base_Start_IT+0xc8>)
 80081da:	4293      	cmp	r3, r2
 80081dc:	d013      	beq.n	8008206 <HAL_TIM_Base_Start_IT+0x76>
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	4a1e      	ldr	r2, [pc, #120]	; (800825c <HAL_TIM_Base_Start_IT+0xcc>)
 80081e4:	4293      	cmp	r3, r2
 80081e6:	d00e      	beq.n	8008206 <HAL_TIM_Base_Start_IT+0x76>
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	4a1c      	ldr	r2, [pc, #112]	; (8008260 <HAL_TIM_Base_Start_IT+0xd0>)
 80081ee:	4293      	cmp	r3, r2
 80081f0:	d009      	beq.n	8008206 <HAL_TIM_Base_Start_IT+0x76>
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	4a1b      	ldr	r2, [pc, #108]	; (8008264 <HAL_TIM_Base_Start_IT+0xd4>)
 80081f8:	4293      	cmp	r3, r2
 80081fa:	d004      	beq.n	8008206 <HAL_TIM_Base_Start_IT+0x76>
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	4a19      	ldr	r2, [pc, #100]	; (8008268 <HAL_TIM_Base_Start_IT+0xd8>)
 8008202:	4293      	cmp	r3, r2
 8008204:	d115      	bne.n	8008232 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	689a      	ldr	r2, [r3, #8]
 800820c:	4b17      	ldr	r3, [pc, #92]	; (800826c <HAL_TIM_Base_Start_IT+0xdc>)
 800820e:	4013      	ands	r3, r2
 8008210:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	2b06      	cmp	r3, #6
 8008216:	d015      	beq.n	8008244 <HAL_TIM_Base_Start_IT+0xb4>
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800821e:	d011      	beq.n	8008244 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	681a      	ldr	r2, [r3, #0]
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	f042 0201 	orr.w	r2, r2, #1
 800822e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008230:	e008      	b.n	8008244 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	681a      	ldr	r2, [r3, #0]
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	f042 0201 	orr.w	r2, r2, #1
 8008240:	601a      	str	r2, [r3, #0]
 8008242:	e000      	b.n	8008246 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008244:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008246:	2300      	movs	r3, #0
}
 8008248:	4618      	mov	r0, r3
 800824a:	3714      	adds	r7, #20
 800824c:	46bd      	mov	sp, r7
 800824e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008252:	4770      	bx	lr
 8008254:	40012c00 	.word	0x40012c00
 8008258:	40000400 	.word	0x40000400
 800825c:	40000800 	.word	0x40000800
 8008260:	40000c00 	.word	0x40000c00
 8008264:	40013400 	.word	0x40013400
 8008268:	40014000 	.word	0x40014000
 800826c:	00010007 	.word	0x00010007

08008270 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008270:	b580      	push	{r7, lr}
 8008272:	b082      	sub	sp, #8
 8008274:	af00      	add	r7, sp, #0
 8008276:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	691b      	ldr	r3, [r3, #16]
 800827e:	f003 0302 	and.w	r3, r3, #2
 8008282:	2b02      	cmp	r3, #2
 8008284:	d122      	bne.n	80082cc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	68db      	ldr	r3, [r3, #12]
 800828c:	f003 0302 	and.w	r3, r3, #2
 8008290:	2b02      	cmp	r3, #2
 8008292:	d11b      	bne.n	80082cc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	f06f 0202 	mvn.w	r2, #2
 800829c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	2201      	movs	r2, #1
 80082a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	699b      	ldr	r3, [r3, #24]
 80082aa:	f003 0303 	and.w	r3, r3, #3
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d003      	beq.n	80082ba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80082b2:	6878      	ldr	r0, [r7, #4]
 80082b4:	f000 f905 	bl	80084c2 <HAL_TIM_IC_CaptureCallback>
 80082b8:	e005      	b.n	80082c6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80082ba:	6878      	ldr	r0, [r7, #4]
 80082bc:	f000 f8f7 	bl	80084ae <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80082c0:	6878      	ldr	r0, [r7, #4]
 80082c2:	f000 f908 	bl	80084d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	2200      	movs	r2, #0
 80082ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	691b      	ldr	r3, [r3, #16]
 80082d2:	f003 0304 	and.w	r3, r3, #4
 80082d6:	2b04      	cmp	r3, #4
 80082d8:	d122      	bne.n	8008320 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	68db      	ldr	r3, [r3, #12]
 80082e0:	f003 0304 	and.w	r3, r3, #4
 80082e4:	2b04      	cmp	r3, #4
 80082e6:	d11b      	bne.n	8008320 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	f06f 0204 	mvn.w	r2, #4
 80082f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	2202      	movs	r2, #2
 80082f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	699b      	ldr	r3, [r3, #24]
 80082fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008302:	2b00      	cmp	r3, #0
 8008304:	d003      	beq.n	800830e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008306:	6878      	ldr	r0, [r7, #4]
 8008308:	f000 f8db 	bl	80084c2 <HAL_TIM_IC_CaptureCallback>
 800830c:	e005      	b.n	800831a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800830e:	6878      	ldr	r0, [r7, #4]
 8008310:	f000 f8cd 	bl	80084ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008314:	6878      	ldr	r0, [r7, #4]
 8008316:	f000 f8de 	bl	80084d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	2200      	movs	r2, #0
 800831e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	691b      	ldr	r3, [r3, #16]
 8008326:	f003 0308 	and.w	r3, r3, #8
 800832a:	2b08      	cmp	r3, #8
 800832c:	d122      	bne.n	8008374 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	68db      	ldr	r3, [r3, #12]
 8008334:	f003 0308 	and.w	r3, r3, #8
 8008338:	2b08      	cmp	r3, #8
 800833a:	d11b      	bne.n	8008374 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	f06f 0208 	mvn.w	r2, #8
 8008344:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	2204      	movs	r2, #4
 800834a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	69db      	ldr	r3, [r3, #28]
 8008352:	f003 0303 	and.w	r3, r3, #3
 8008356:	2b00      	cmp	r3, #0
 8008358:	d003      	beq.n	8008362 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800835a:	6878      	ldr	r0, [r7, #4]
 800835c:	f000 f8b1 	bl	80084c2 <HAL_TIM_IC_CaptureCallback>
 8008360:	e005      	b.n	800836e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008362:	6878      	ldr	r0, [r7, #4]
 8008364:	f000 f8a3 	bl	80084ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008368:	6878      	ldr	r0, [r7, #4]
 800836a:	f000 f8b4 	bl	80084d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	2200      	movs	r2, #0
 8008372:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	691b      	ldr	r3, [r3, #16]
 800837a:	f003 0310 	and.w	r3, r3, #16
 800837e:	2b10      	cmp	r3, #16
 8008380:	d122      	bne.n	80083c8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	68db      	ldr	r3, [r3, #12]
 8008388:	f003 0310 	and.w	r3, r3, #16
 800838c:	2b10      	cmp	r3, #16
 800838e:	d11b      	bne.n	80083c8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	f06f 0210 	mvn.w	r2, #16
 8008398:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	2208      	movs	r2, #8
 800839e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	69db      	ldr	r3, [r3, #28]
 80083a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d003      	beq.n	80083b6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80083ae:	6878      	ldr	r0, [r7, #4]
 80083b0:	f000 f887 	bl	80084c2 <HAL_TIM_IC_CaptureCallback>
 80083b4:	e005      	b.n	80083c2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80083b6:	6878      	ldr	r0, [r7, #4]
 80083b8:	f000 f879 	bl	80084ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80083bc:	6878      	ldr	r0, [r7, #4]
 80083be:	f000 f88a 	bl	80084d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	2200      	movs	r2, #0
 80083c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	691b      	ldr	r3, [r3, #16]
 80083ce:	f003 0301 	and.w	r3, r3, #1
 80083d2:	2b01      	cmp	r3, #1
 80083d4:	d10e      	bne.n	80083f4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	68db      	ldr	r3, [r3, #12]
 80083dc:	f003 0301 	and.w	r3, r3, #1
 80083e0:	2b01      	cmp	r3, #1
 80083e2:	d107      	bne.n	80083f4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	f06f 0201 	mvn.w	r2, #1
 80083ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80083ee:	6878      	ldr	r0, [r7, #4]
 80083f0:	f7f8 fc50 	bl	8000c94 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	691b      	ldr	r3, [r3, #16]
 80083fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80083fe:	2b80      	cmp	r3, #128	; 0x80
 8008400:	d10e      	bne.n	8008420 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	68db      	ldr	r3, [r3, #12]
 8008408:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800840c:	2b80      	cmp	r3, #128	; 0x80
 800840e:	d107      	bne.n	8008420 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008418:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800841a:	6878      	ldr	r0, [r7, #4]
 800841c:	f000 f914 	bl	8008648 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	691b      	ldr	r3, [r3, #16]
 8008426:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800842a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800842e:	d10e      	bne.n	800844e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	68db      	ldr	r3, [r3, #12]
 8008436:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800843a:	2b80      	cmp	r3, #128	; 0x80
 800843c:	d107      	bne.n	800844e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008446:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008448:	6878      	ldr	r0, [r7, #4]
 800844a:	f000 f907 	bl	800865c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	691b      	ldr	r3, [r3, #16]
 8008454:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008458:	2b40      	cmp	r3, #64	; 0x40
 800845a:	d10e      	bne.n	800847a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	68db      	ldr	r3, [r3, #12]
 8008462:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008466:	2b40      	cmp	r3, #64	; 0x40
 8008468:	d107      	bne.n	800847a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008472:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008474:	6878      	ldr	r0, [r7, #4]
 8008476:	f000 f838 	bl	80084ea <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	691b      	ldr	r3, [r3, #16]
 8008480:	f003 0320 	and.w	r3, r3, #32
 8008484:	2b20      	cmp	r3, #32
 8008486:	d10e      	bne.n	80084a6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	68db      	ldr	r3, [r3, #12]
 800848e:	f003 0320 	and.w	r3, r3, #32
 8008492:	2b20      	cmp	r3, #32
 8008494:	d107      	bne.n	80084a6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	f06f 0220 	mvn.w	r2, #32
 800849e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80084a0:	6878      	ldr	r0, [r7, #4]
 80084a2:	f000 f8c7 	bl	8008634 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80084a6:	bf00      	nop
 80084a8:	3708      	adds	r7, #8
 80084aa:	46bd      	mov	sp, r7
 80084ac:	bd80      	pop	{r7, pc}

080084ae <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80084ae:	b480      	push	{r7}
 80084b0:	b083      	sub	sp, #12
 80084b2:	af00      	add	r7, sp, #0
 80084b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80084b6:	bf00      	nop
 80084b8:	370c      	adds	r7, #12
 80084ba:	46bd      	mov	sp, r7
 80084bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c0:	4770      	bx	lr

080084c2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80084c2:	b480      	push	{r7}
 80084c4:	b083      	sub	sp, #12
 80084c6:	af00      	add	r7, sp, #0
 80084c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80084ca:	bf00      	nop
 80084cc:	370c      	adds	r7, #12
 80084ce:	46bd      	mov	sp, r7
 80084d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d4:	4770      	bx	lr

080084d6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80084d6:	b480      	push	{r7}
 80084d8:	b083      	sub	sp, #12
 80084da:	af00      	add	r7, sp, #0
 80084dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80084de:	bf00      	nop
 80084e0:	370c      	adds	r7, #12
 80084e2:	46bd      	mov	sp, r7
 80084e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e8:	4770      	bx	lr

080084ea <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80084ea:	b480      	push	{r7}
 80084ec:	b083      	sub	sp, #12
 80084ee:	af00      	add	r7, sp, #0
 80084f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80084f2:	bf00      	nop
 80084f4:	370c      	adds	r7, #12
 80084f6:	46bd      	mov	sp, r7
 80084f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084fc:	4770      	bx	lr
	...

08008500 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008500:	b480      	push	{r7}
 8008502:	b085      	sub	sp, #20
 8008504:	af00      	add	r7, sp, #0
 8008506:	6078      	str	r0, [r7, #4]
 8008508:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	4a40      	ldr	r2, [pc, #256]	; (8008614 <TIM_Base_SetConfig+0x114>)
 8008514:	4293      	cmp	r3, r2
 8008516:	d013      	beq.n	8008540 <TIM_Base_SetConfig+0x40>
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800851e:	d00f      	beq.n	8008540 <TIM_Base_SetConfig+0x40>
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	4a3d      	ldr	r2, [pc, #244]	; (8008618 <TIM_Base_SetConfig+0x118>)
 8008524:	4293      	cmp	r3, r2
 8008526:	d00b      	beq.n	8008540 <TIM_Base_SetConfig+0x40>
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	4a3c      	ldr	r2, [pc, #240]	; (800861c <TIM_Base_SetConfig+0x11c>)
 800852c:	4293      	cmp	r3, r2
 800852e:	d007      	beq.n	8008540 <TIM_Base_SetConfig+0x40>
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	4a3b      	ldr	r2, [pc, #236]	; (8008620 <TIM_Base_SetConfig+0x120>)
 8008534:	4293      	cmp	r3, r2
 8008536:	d003      	beq.n	8008540 <TIM_Base_SetConfig+0x40>
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	4a3a      	ldr	r2, [pc, #232]	; (8008624 <TIM_Base_SetConfig+0x124>)
 800853c:	4293      	cmp	r3, r2
 800853e:	d108      	bne.n	8008552 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008546:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008548:	683b      	ldr	r3, [r7, #0]
 800854a:	685b      	ldr	r3, [r3, #4]
 800854c:	68fa      	ldr	r2, [r7, #12]
 800854e:	4313      	orrs	r3, r2
 8008550:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	4a2f      	ldr	r2, [pc, #188]	; (8008614 <TIM_Base_SetConfig+0x114>)
 8008556:	4293      	cmp	r3, r2
 8008558:	d01f      	beq.n	800859a <TIM_Base_SetConfig+0x9a>
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008560:	d01b      	beq.n	800859a <TIM_Base_SetConfig+0x9a>
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	4a2c      	ldr	r2, [pc, #176]	; (8008618 <TIM_Base_SetConfig+0x118>)
 8008566:	4293      	cmp	r3, r2
 8008568:	d017      	beq.n	800859a <TIM_Base_SetConfig+0x9a>
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	4a2b      	ldr	r2, [pc, #172]	; (800861c <TIM_Base_SetConfig+0x11c>)
 800856e:	4293      	cmp	r3, r2
 8008570:	d013      	beq.n	800859a <TIM_Base_SetConfig+0x9a>
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	4a2a      	ldr	r2, [pc, #168]	; (8008620 <TIM_Base_SetConfig+0x120>)
 8008576:	4293      	cmp	r3, r2
 8008578:	d00f      	beq.n	800859a <TIM_Base_SetConfig+0x9a>
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	4a29      	ldr	r2, [pc, #164]	; (8008624 <TIM_Base_SetConfig+0x124>)
 800857e:	4293      	cmp	r3, r2
 8008580:	d00b      	beq.n	800859a <TIM_Base_SetConfig+0x9a>
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	4a28      	ldr	r2, [pc, #160]	; (8008628 <TIM_Base_SetConfig+0x128>)
 8008586:	4293      	cmp	r3, r2
 8008588:	d007      	beq.n	800859a <TIM_Base_SetConfig+0x9a>
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	4a27      	ldr	r2, [pc, #156]	; (800862c <TIM_Base_SetConfig+0x12c>)
 800858e:	4293      	cmp	r3, r2
 8008590:	d003      	beq.n	800859a <TIM_Base_SetConfig+0x9a>
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	4a26      	ldr	r2, [pc, #152]	; (8008630 <TIM_Base_SetConfig+0x130>)
 8008596:	4293      	cmp	r3, r2
 8008598:	d108      	bne.n	80085ac <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80085a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80085a2:	683b      	ldr	r3, [r7, #0]
 80085a4:	68db      	ldr	r3, [r3, #12]
 80085a6:	68fa      	ldr	r2, [r7, #12]
 80085a8:	4313      	orrs	r3, r2
 80085aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80085b2:	683b      	ldr	r3, [r7, #0]
 80085b4:	695b      	ldr	r3, [r3, #20]
 80085b6:	4313      	orrs	r3, r2
 80085b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	68fa      	ldr	r2, [r7, #12]
 80085be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80085c0:	683b      	ldr	r3, [r7, #0]
 80085c2:	689a      	ldr	r2, [r3, #8]
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80085c8:	683b      	ldr	r3, [r7, #0]
 80085ca:	681a      	ldr	r2, [r3, #0]
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	4a10      	ldr	r2, [pc, #64]	; (8008614 <TIM_Base_SetConfig+0x114>)
 80085d4:	4293      	cmp	r3, r2
 80085d6:	d00f      	beq.n	80085f8 <TIM_Base_SetConfig+0xf8>
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	4a12      	ldr	r2, [pc, #72]	; (8008624 <TIM_Base_SetConfig+0x124>)
 80085dc:	4293      	cmp	r3, r2
 80085de:	d00b      	beq.n	80085f8 <TIM_Base_SetConfig+0xf8>
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	4a11      	ldr	r2, [pc, #68]	; (8008628 <TIM_Base_SetConfig+0x128>)
 80085e4:	4293      	cmp	r3, r2
 80085e6:	d007      	beq.n	80085f8 <TIM_Base_SetConfig+0xf8>
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	4a10      	ldr	r2, [pc, #64]	; (800862c <TIM_Base_SetConfig+0x12c>)
 80085ec:	4293      	cmp	r3, r2
 80085ee:	d003      	beq.n	80085f8 <TIM_Base_SetConfig+0xf8>
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	4a0f      	ldr	r2, [pc, #60]	; (8008630 <TIM_Base_SetConfig+0x130>)
 80085f4:	4293      	cmp	r3, r2
 80085f6:	d103      	bne.n	8008600 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80085f8:	683b      	ldr	r3, [r7, #0]
 80085fa:	691a      	ldr	r2, [r3, #16]
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	2201      	movs	r2, #1
 8008604:	615a      	str	r2, [r3, #20]
}
 8008606:	bf00      	nop
 8008608:	3714      	adds	r7, #20
 800860a:	46bd      	mov	sp, r7
 800860c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008610:	4770      	bx	lr
 8008612:	bf00      	nop
 8008614:	40012c00 	.word	0x40012c00
 8008618:	40000400 	.word	0x40000400
 800861c:	40000800 	.word	0x40000800
 8008620:	40000c00 	.word	0x40000c00
 8008624:	40013400 	.word	0x40013400
 8008628:	40014000 	.word	0x40014000
 800862c:	40014400 	.word	0x40014400
 8008630:	40014800 	.word	0x40014800

08008634 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008634:	b480      	push	{r7}
 8008636:	b083      	sub	sp, #12
 8008638:	af00      	add	r7, sp, #0
 800863a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800863c:	bf00      	nop
 800863e:	370c      	adds	r7, #12
 8008640:	46bd      	mov	sp, r7
 8008642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008646:	4770      	bx	lr

08008648 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008648:	b480      	push	{r7}
 800864a:	b083      	sub	sp, #12
 800864c:	af00      	add	r7, sp, #0
 800864e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008650:	bf00      	nop
 8008652:	370c      	adds	r7, #12
 8008654:	46bd      	mov	sp, r7
 8008656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800865a:	4770      	bx	lr

0800865c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800865c:	b480      	push	{r7}
 800865e:	b083      	sub	sp, #12
 8008660:	af00      	add	r7, sp, #0
 8008662:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008664:	bf00      	nop
 8008666:	370c      	adds	r7, #12
 8008668:	46bd      	mov	sp, r7
 800866a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800866e:	4770      	bx	lr

08008670 <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    FMC_NORSRAM_InitTypeDef *Init)
{
 8008670:	b480      	push	{r7}
 8008672:	b087      	sub	sp, #28
 8008674:	af00      	add	r7, sp, #0
 8008676:	6078      	str	r0, [r7, #4]
 8008678:	6039      	str	r1, [r7, #0]
#if defined(FMC_PCSCNTR_CSCOUNT)
  assert_param(IS_FUNCTIONAL_STATE(Init->MaxChipSelectPulse));
#endif /* FMC_PCSCNTR_CSCOUNT */

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 800867a:	683b      	ldr	r3, [r7, #0]
 800867c:	681a      	ldr	r2, [r3, #0]
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008684:	683a      	ldr	r2, [r7, #0]
 8008686:	6812      	ldr	r2, [r2, #0]
 8008688:	f023 0101 	bic.w	r1, r3, #1
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 8008692:	683b      	ldr	r3, [r7, #0]
 8008694:	689b      	ldr	r3, [r3, #8]
 8008696:	2b08      	cmp	r3, #8
 8008698:	d102      	bne.n	80086a0 <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800869a:	2340      	movs	r3, #64	; 0x40
 800869c:	617b      	str	r3, [r7, #20]
 800869e:	e001      	b.n	80086a4 <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 80086a0:	2300      	movs	r3, #0
 80086a2:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 80086a4:	683b      	ldr	r3, [r7, #0]
 80086a6:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 80086a8:	697b      	ldr	r3, [r7, #20]
 80086aa:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 80086ac:	683b      	ldr	r3, [r7, #0]
 80086ae:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 80086b0:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 80086b2:	683b      	ldr	r3, [r7, #0]
 80086b4:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 80086b6:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 80086b8:	683b      	ldr	r3, [r7, #0]
 80086ba:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 80086bc:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 80086be:	683b      	ldr	r3, [r7, #0]
 80086c0:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 80086c2:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 80086c4:	683b      	ldr	r3, [r7, #0]
 80086c6:	699b      	ldr	r3, [r3, #24]
              Init->WaitSignalPolarity      | \
 80086c8:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 80086ca:	683b      	ldr	r3, [r7, #0]
 80086cc:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalActive        | \
 80086ce:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 80086d0:	683b      	ldr	r3, [r7, #0]
 80086d2:	6a1b      	ldr	r3, [r3, #32]
              Init->WriteOperation          | \
 80086d4:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 80086d6:	683b      	ldr	r3, [r7, #0]
 80086d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WaitSignal              | \
 80086da:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 80086dc:	683b      	ldr	r3, [r7, #0]
 80086de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->ExtendedMode            | \
 80086e0:	431a      	orrs	r2, r3
              Init->WriteBurst);
 80086e2:	683b      	ldr	r3, [r7, #0]
 80086e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  btcr_reg = (flashaccess                   | \
 80086e6:	4313      	orrs	r3, r2
 80086e8:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->ContinuousClock;
 80086ea:	683b      	ldr	r3, [r7, #0]
 80086ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086ee:	693a      	ldr	r2, [r7, #16]
 80086f0:	4313      	orrs	r3, r2
 80086f2:	613b      	str	r3, [r7, #16]
#if defined(FMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
 80086f4:	683b      	ldr	r3, [r7, #0]
 80086f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086f8:	693a      	ldr	r2, [r7, #16]
 80086fa:	4313      	orrs	r3, r2
 80086fc:	613b      	str	r3, [r7, #16]
#endif /* FMC_BCR1_WFDIS */
#if defined(FMC_BCRx_NBLSET)
  btcr_reg |= Init->NBLSetupTime;
 80086fe:	683b      	ldr	r3, [r7, #0]
 8008700:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008702:	693a      	ldr	r2, [r7, #16]
 8008704:	4313      	orrs	r3, r2
 8008706:	613b      	str	r3, [r7, #16]
#endif /* FMC_BCRx_NBLSET */
  btcr_reg |= Init->PageSize;
 8008708:	683b      	ldr	r3, [r7, #0]
 800870a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800870c:	693a      	ldr	r2, [r7, #16]
 800870e:	4313      	orrs	r3, r2
 8008710:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCRx_MBKEN                |
 8008712:	4b23      	ldr	r3, [pc, #140]	; (80087a0 <FMC_NORSRAM_Init+0x130>)
 8008714:	60fb      	str	r3, [r7, #12]
          FMC_BCRx_WAITEN               |
          FMC_BCRx_EXTMOD               |
          FMC_BCRx_ASYNCWAIT            |
          FMC_BCRx_CBURSTRW);

  mask |= FMC_BCR1_CCLKEN;
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800871c:	60fb      	str	r3, [r7, #12]
#if defined(FMC_BCR1_WFDIS)
  mask |= FMC_BCR1_WFDIS;
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008724:	60fb      	str	r3, [r7, #12]
#endif /* FMC_BCR1_WFDIS */
#if defined(FMC_BCRx_NBLSET)
  mask |= FMC_BCRx_NBLSET;
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	f443 0340 	orr.w	r3, r3, #12582912	; 0xc00000
 800872c:	60fb      	str	r3, [r7, #12]
#endif /* FMC_BCRx_NBLSET */
  mask |= FMC_BCRx_CPSIZE;
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8008734:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8008736:	683b      	ldr	r3, [r7, #0]
 8008738:	681a      	ldr	r2, [r3, #0]
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	43db      	mvns	r3, r3
 8008744:	ea02 0103 	and.w	r1, r2, r3
 8008748:	683b      	ldr	r3, [r7, #0]
 800874a:	681a      	ldr	r2, [r3, #0]
 800874c:	693b      	ldr	r3, [r7, #16]
 800874e:	4319      	orrs	r1, r3
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 8008756:	683b      	ldr	r3, [r7, #0]
 8008758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800875a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800875e:	d10c      	bne.n	800877a <FMC_NORSRAM_Init+0x10a>
 8008760:	683b      	ldr	r3, [r7, #0]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	2b00      	cmp	r3, #0
 8008766:	d008      	beq.n	800877a <FMC_NORSRAM_Init+0x10a>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008770:	683b      	ldr	r3, [r7, #0]
 8008772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008774:	431a      	orrs	r2, r3
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	601a      	str	r2, [r3, #0]
  }
#if defined(FMC_BCR1_WFDIS)

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 800877a:	683b      	ldr	r3, [r7, #0]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	2b00      	cmp	r3, #0
 8008780:	d006      	beq.n	8008790 <FMC_NORSRAM_Init+0x120>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681a      	ldr	r2, [r3, #0]
 8008786:	683b      	ldr	r3, [r7, #0]
 8008788:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800878a:	431a      	orrs	r2, r3
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	601a      	str	r2, [r3, #0]
        break;
    }
  }
#endif /* FMC_PCSCNTR_CSCOUNT */

  return HAL_OK;
 8008790:	2300      	movs	r3, #0
}
 8008792:	4618      	mov	r0, r3
 8008794:	371c      	adds	r7, #28
 8008796:	46bd      	mov	sp, r7
 8008798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879c:	4770      	bx	lr
 800879e:	bf00      	nop
 80087a0:	0008fb7f 	.word	0x0008fb7f

080087a4 <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80087a4:	b480      	push	{r7}
 80087a6:	b087      	sub	sp, #28
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	60f8      	str	r0, [r7, #12]
 80087ac:	60b9      	str	r1, [r7, #8]
 80087ae:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Set FMC_NORSRAM device timing parameters */
#if defined(FMC_BTRx_DATAHLD)
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	1c5a      	adds	r2, r3, #1
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087ba:	68bb      	ldr	r3, [r7, #8]
 80087bc:	681a      	ldr	r2, [r3, #0]
 80087be:	68bb      	ldr	r3, [r7, #8]
 80087c0:	685b      	ldr	r3, [r3, #4]
 80087c2:	011b      	lsls	r3, r3, #4
 80087c4:	431a      	orrs	r2, r3
 80087c6:	68bb      	ldr	r3, [r7, #8]
 80087c8:	689b      	ldr	r3, [r3, #8]
 80087ca:	021b      	lsls	r3, r3, #8
 80087cc:	431a      	orrs	r2, r3
 80087ce:	68bb      	ldr	r3, [r7, #8]
 80087d0:	68db      	ldr	r3, [r3, #12]
 80087d2:	079b      	lsls	r3, r3, #30
 80087d4:	431a      	orrs	r2, r3
 80087d6:	68bb      	ldr	r3, [r7, #8]
 80087d8:	691b      	ldr	r3, [r3, #16]
 80087da:	041b      	lsls	r3, r3, #16
 80087dc:	431a      	orrs	r2, r3
 80087de:	68bb      	ldr	r3, [r7, #8]
 80087e0:	695b      	ldr	r3, [r3, #20]
 80087e2:	3b01      	subs	r3, #1
 80087e4:	051b      	lsls	r3, r3, #20
 80087e6:	431a      	orrs	r2, r3
 80087e8:	68bb      	ldr	r3, [r7, #8]
 80087ea:	699b      	ldr	r3, [r3, #24]
 80087ec:	3b02      	subs	r3, #2
 80087ee:	061b      	lsls	r3, r3, #24
 80087f0:	ea42 0103 	orr.w	r1, r2, r3
 80087f4:	68bb      	ldr	r3, [r7, #8]
 80087f6:	69db      	ldr	r3, [r3, #28]
 80087f8:	687a      	ldr	r2, [r7, #4]
 80087fa:	3201      	adds	r2, #1
 80087fc:	4319      	orrs	r1, r3
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));
#endif /* FMC_BTRx_DATAHLD */

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800880c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008810:	d113      	bne.n	800883a <FMC_NORSRAM_Timing_Init+0x96>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTRx_CLKDIV_Pos));
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	685b      	ldr	r3, [r3, #4]
 8008816:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800881a:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTRx_CLKDIV_Pos);
 800881c:	68bb      	ldr	r3, [r7, #8]
 800881e:	695b      	ldr	r3, [r3, #20]
 8008820:	3b01      	subs	r3, #1
 8008822:	051b      	lsls	r3, r3, #20
 8008824:	697a      	ldr	r2, [r7, #20]
 8008826:	4313      	orrs	r3, r2
 8008828:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTRx_CLKDIV, tmpr);
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	685b      	ldr	r3, [r3, #4]
 800882e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8008832:	697b      	ldr	r3, [r7, #20]
 8008834:	431a      	orrs	r2, r3
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800883a:	2300      	movs	r3, #0
}
 800883c:	4618      	mov	r0, r3
 800883e:	371c      	adds	r7, #28
 8008840:	46bd      	mov	sp, r7
 8008842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008846:	4770      	bx	lr

08008848 <FMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 8008848:	b480      	push	{r7}
 800884a:	b085      	sub	sp, #20
 800884c:	af00      	add	r7, sp, #0
 800884e:	60f8      	str	r0, [r7, #12]
 8008850:	60b9      	str	r1, [r7, #8]
 8008852:	607a      	str	r2, [r7, #4]
 8008854:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 8008856:	683b      	ldr	r3, [r7, #0]
 8008858:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800885c:	d121      	bne.n	80088a2 <FMC_NORSRAM_Extended_Timing_Init+0x5a>
    assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
#if defined(FMC_BTRx_DATAHLD)
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	687a      	ldr	r2, [r7, #4]
 8008862:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008866:	f003 627f 	and.w	r2, r3, #267386880	; 0xff00000
 800886a:	68bb      	ldr	r3, [r7, #8]
 800886c:	6819      	ldr	r1, [r3, #0]
 800886e:	68bb      	ldr	r3, [r7, #8]
 8008870:	685b      	ldr	r3, [r3, #4]
 8008872:	011b      	lsls	r3, r3, #4
 8008874:	4319      	orrs	r1, r3
 8008876:	68bb      	ldr	r3, [r7, #8]
 8008878:	689b      	ldr	r3, [r3, #8]
 800887a:	021b      	lsls	r3, r3, #8
 800887c:	4319      	orrs	r1, r3
 800887e:	68bb      	ldr	r3, [r7, #8]
 8008880:	68db      	ldr	r3, [r3, #12]
 8008882:	079b      	lsls	r3, r3, #30
 8008884:	4319      	orrs	r1, r3
 8008886:	68bb      	ldr	r3, [r7, #8]
 8008888:	69db      	ldr	r3, [r3, #28]
 800888a:	4319      	orrs	r1, r3
 800888c:	68bb      	ldr	r3, [r7, #8]
 800888e:	691b      	ldr	r3, [r3, #16]
 8008890:	041b      	lsls	r3, r3, #16
 8008892:	430b      	orrs	r3, r1
 8008894:	ea42 0103 	orr.w	r1, r2, r3
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	687a      	ldr	r2, [r7, #4]
 800889c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80088a0:	e005      	b.n	80088ae <FMC_NORSRAM_Extended_Timing_Init+0x66>
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTRx_BUSTURN_Pos)));
#endif /* FMC_BTRx_DATAHLD */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	687a      	ldr	r2, [r7, #4]
 80088a6:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 80088aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 80088ae:	2300      	movs	r3, #0
}
 80088b0:	4618      	mov	r0, r3
 80088b2:	3714      	adds	r7, #20
 80088b4:	46bd      	mov	sp, r7
 80088b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ba:	4770      	bx	lr

080088bc <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 80088bc:	b084      	sub	sp, #16
 80088be:	b480      	push	{r7}
 80088c0:	b085      	sub	sp, #20
 80088c2:	af00      	add	r7, sp, #0
 80088c4:	6078      	str	r0, [r7, #4]
 80088c6:	f107 001c 	add.w	r0, r7, #28
 80088ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80088ce:	2300      	movs	r3, #0
 80088d0:	60fb      	str	r3, [r7, #12]

  /* Set SDMMC configuration parameters */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  tmpreg |= Init.ClockBypass;
#endif
  tmpreg |= (Init.ClockEdge           |\
 80088d2:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 80088d4:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80088d6:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80088d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      |\
 80088da:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80088dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             |\
 80088de:	431a      	orrs	r2, r3
             Init.ClockDiv
 80088e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl |\
 80088e2:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80088e4:	68fa      	ldr	r2, [r7, #12]
 80088e6:	4313      	orrs	r3, r2
 80088e8:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	685a      	ldr	r2, [r3, #4]
 80088ee:	4b07      	ldr	r3, [pc, #28]	; (800890c <SDMMC_Init+0x50>)
 80088f0:	4013      	ands	r3, r2
 80088f2:	68fa      	ldr	r2, [r7, #12]
 80088f4:	431a      	orrs	r2, r3
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80088fa:	2300      	movs	r3, #0
}
 80088fc:	4618      	mov	r0, r3
 80088fe:	3714      	adds	r7, #20
 8008900:	46bd      	mov	sp, r7
 8008902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008906:	b004      	add	sp, #16
 8008908:	4770      	bx	lr
 800890a:	bf00      	nop
 800890c:	ffc02c00 	.word	0xffc02c00

08008910 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8008910:	b480      	push	{r7}
 8008912:	b083      	sub	sp, #12
 8008914:	af00      	add	r7, sp, #0
 8008916:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800891e:	4618      	mov	r0, r3
 8008920:	370c      	adds	r7, #12
 8008922:	46bd      	mov	sp, r7
 8008924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008928:	4770      	bx	lr

0800892a <SDMMC_WriteFIFO>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pWriteData pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800892a:	b480      	push	{r7}
 800892c:	b083      	sub	sp, #12
 800892e:	af00      	add	r7, sp, #0
 8008930:	6078      	str	r0, [r7, #4]
 8008932:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8008934:	683b      	ldr	r3, [r7, #0]
 8008936:	681a      	ldr	r2, [r3, #0]
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800893e:	2300      	movs	r3, #0
}
 8008940:	4618      	mov	r0, r3
 8008942:	370c      	adds	r7, #12
 8008944:	46bd      	mov	sp, r7
 8008946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800894a:	4770      	bx	lr

0800894c <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800894c:	b580      	push	{r7, lr}
 800894e:	b082      	sub	sp, #8
 8008950:	af00      	add	r7, sp, #0
 8008952:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	f043 0203 	orr.w	r2, r3, #3
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	601a      	str	r2, [r3, #0]
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8008960:	2002      	movs	r0, #2
 8008962:	f7f8 fe1b 	bl	800159c <HAL_Delay>

  return HAL_OK;
 8008966:	2300      	movs	r3, #0
}
 8008968:	4618      	mov	r0, r3
 800896a:	3708      	adds	r7, #8
 800896c:	46bd      	mov	sp, r7
 800896e:	bd80      	pop	{r7, pc}

08008970 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8008970:	b480      	push	{r7}
 8008972:	b083      	sub	sp, #12
 8008974:	af00      	add	r7, sp, #0
 8008976:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	f003 0303 	and.w	r3, r3, #3
}
 8008980:	4618      	mov	r0, r3
 8008982:	370c      	adds	r7, #12
 8008984:	46bd      	mov	sp, r7
 8008986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800898a:	4770      	bx	lr

0800898c <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800898c:	b480      	push	{r7}
 800898e:	b085      	sub	sp, #20
 8008990:	af00      	add	r7, sp, #0
 8008992:	6078      	str	r0, [r7, #4]
 8008994:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8008996:	2300      	movs	r3, #0
 8008998:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800899a:	683b      	ldr	r3, [r7, #0]
 800899c:	681a      	ldr	r2, [r3, #0]
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80089a2:	683b      	ldr	r3, [r7, #0]
 80089a4:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80089a6:	683b      	ldr	r3, [r7, #0]
 80089a8:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80089aa:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80089ac:	683b      	ldr	r3, [r7, #0]
 80089ae:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80089b0:	431a      	orrs	r2, r3
                       Command->CPSM);
 80089b2:	683b      	ldr	r3, [r7, #0]
 80089b4:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80089b6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80089b8:	68fa      	ldr	r2, [r7, #12]
 80089ba:	4313      	orrs	r3, r2
 80089bc:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	68da      	ldr	r2, [r3, #12]
 80089c2:	4b06      	ldr	r3, [pc, #24]	; (80089dc <SDMMC_SendCommand+0x50>)
 80089c4:	4013      	ands	r3, r2
 80089c6:	68fa      	ldr	r2, [r7, #12]
 80089c8:	431a      	orrs	r2, r3
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80089ce:	2300      	movs	r3, #0
}
 80089d0:	4618      	mov	r0, r3
 80089d2:	3714      	adds	r7, #20
 80089d4:	46bd      	mov	sp, r7
 80089d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089da:	4770      	bx	lr
 80089dc:	fffee0c0 	.word	0xfffee0c0

080089e0 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 80089e0:	b480      	push	{r7}
 80089e2:	b083      	sub	sp, #12
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	691b      	ldr	r3, [r3, #16]
 80089ec:	b2db      	uxtb	r3, r3
}
 80089ee:	4618      	mov	r0, r3
 80089f0:	370c      	adds	r7, #12
 80089f2:	46bd      	mov	sp, r7
 80089f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f8:	4770      	bx	lr

080089fa <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 80089fa:	b480      	push	{r7}
 80089fc:	b085      	sub	sp, #20
 80089fe:	af00      	add	r7, sp, #0
 8008a00:	6078      	str	r0, [r7, #4]
 8008a02:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	3314      	adds	r3, #20
 8008a08:	461a      	mov	r2, r3
 8008a0a:	683b      	ldr	r3, [r7, #0]
 8008a0c:	4413      	add	r3, r2
 8008a0e:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	681b      	ldr	r3, [r3, #0]
}
 8008a14:	4618      	mov	r0, r3
 8008a16:	3714      	adds	r7, #20
 8008a18:	46bd      	mov	sp, r7
 8008a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a1e:	4770      	bx	lr

08008a20 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8008a20:	b480      	push	{r7}
 8008a22:	b085      	sub	sp, #20
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	6078      	str	r0, [r7, #4]
 8008a28:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8008a2e:	683b      	ldr	r3, [r7, #0]
 8008a30:	681a      	ldr	r2, [r3, #0]
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8008a36:	683b      	ldr	r3, [r7, #0]
 8008a38:	685a      	ldr	r2, [r3, #4]
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008a3e:	683b      	ldr	r3, [r7, #0]
 8008a40:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8008a42:	683b      	ldr	r3, [r7, #0]
 8008a44:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008a46:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8008a48:	683b      	ldr	r3, [r7, #0]
 8008a4a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8008a4c:	431a      	orrs	r2, r3
                       Data->DPSM);
 8008a4e:	683b      	ldr	r3, [r7, #0]
 8008a50:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8008a52:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008a54:	68fa      	ldr	r2, [r7, #12]
 8008a56:	4313      	orrs	r3, r2
 8008a58:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a5e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	431a      	orrs	r2, r3
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8008a6a:	2300      	movs	r3, #0

}
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	3714      	adds	r7, #20
 8008a70:	46bd      	mov	sp, r7
 8008a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a76:	4770      	bx	lr

08008a78 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8008a78:	b580      	push	{r7, lr}
 8008a7a:	b088      	sub	sp, #32
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	6078      	str	r0, [r7, #4]
 8008a80:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8008a82:	683b      	ldr	r3, [r7, #0]
 8008a84:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8008a86:	2310      	movs	r3, #16
 8008a88:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008a8a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008a8e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008a90:	2300      	movs	r3, #0
 8008a92:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008a94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008a98:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008a9a:	f107 0308 	add.w	r3, r7, #8
 8008a9e:	4619      	mov	r1, r3
 8008aa0:	6878      	ldr	r0, [r7, #4]
 8008aa2:	f7ff ff73 	bl	800898c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8008aa6:	f241 3288 	movw	r2, #5000	; 0x1388
 8008aaa:	2110      	movs	r1, #16
 8008aac:	6878      	ldr	r0, [r7, #4]
 8008aae:	f000 fa7b 	bl	8008fa8 <SDMMC_GetCmdResp1>
 8008ab2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008ab4:	69fb      	ldr	r3, [r7, #28]
}
 8008ab6:	4618      	mov	r0, r3
 8008ab8:	3720      	adds	r7, #32
 8008aba:	46bd      	mov	sp, r7
 8008abc:	bd80      	pop	{r7, pc}

08008abe <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8008abe:	b580      	push	{r7, lr}
 8008ac0:	b088      	sub	sp, #32
 8008ac2:	af00      	add	r7, sp, #0
 8008ac4:	6078      	str	r0, [r7, #4]
 8008ac6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8008ac8:	683b      	ldr	r3, [r7, #0]
 8008aca:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8008acc:	2311      	movs	r3, #17
 8008ace:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008ad0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008ad4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008ad6:	2300      	movs	r3, #0
 8008ad8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008ada:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008ade:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008ae0:	f107 0308 	add.w	r3, r7, #8
 8008ae4:	4619      	mov	r1, r3
 8008ae6:	6878      	ldr	r0, [r7, #4]
 8008ae8:	f7ff ff50 	bl	800898c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8008aec:	f241 3288 	movw	r2, #5000	; 0x1388
 8008af0:	2111      	movs	r1, #17
 8008af2:	6878      	ldr	r0, [r7, #4]
 8008af4:	f000 fa58 	bl	8008fa8 <SDMMC_GetCmdResp1>
 8008af8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008afa:	69fb      	ldr	r3, [r7, #28]
}
 8008afc:	4618      	mov	r0, r3
 8008afe:	3720      	adds	r7, #32
 8008b00:	46bd      	mov	sp, r7
 8008b02:	bd80      	pop	{r7, pc}

08008b04 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8008b04:	b580      	push	{r7, lr}
 8008b06:	b088      	sub	sp, #32
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	6078      	str	r0, [r7, #4]
 8008b0c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8008b0e:	683b      	ldr	r3, [r7, #0]
 8008b10:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8008b12:	2312      	movs	r3, #18
 8008b14:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008b16:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008b1a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008b1c:	2300      	movs	r3, #0
 8008b1e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008b20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008b24:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008b26:	f107 0308 	add.w	r3, r7, #8
 8008b2a:	4619      	mov	r1, r3
 8008b2c:	6878      	ldr	r0, [r7, #4]
 8008b2e:	f7ff ff2d 	bl	800898c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8008b32:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b36:	2112      	movs	r1, #18
 8008b38:	6878      	ldr	r0, [r7, #4]
 8008b3a:	f000 fa35 	bl	8008fa8 <SDMMC_GetCmdResp1>
 8008b3e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008b40:	69fb      	ldr	r3, [r7, #28]
}
 8008b42:	4618      	mov	r0, r3
 8008b44:	3720      	adds	r7, #32
 8008b46:	46bd      	mov	sp, r7
 8008b48:	bd80      	pop	{r7, pc}

08008b4a <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8008b4a:	b580      	push	{r7, lr}
 8008b4c:	b088      	sub	sp, #32
 8008b4e:	af00      	add	r7, sp, #0
 8008b50:	6078      	str	r0, [r7, #4]
 8008b52:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8008b54:	683b      	ldr	r3, [r7, #0]
 8008b56:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8008b58:	2318      	movs	r3, #24
 8008b5a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008b5c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008b60:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008b62:	2300      	movs	r3, #0
 8008b64:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008b66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008b6a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008b6c:	f107 0308 	add.w	r3, r7, #8
 8008b70:	4619      	mov	r1, r3
 8008b72:	6878      	ldr	r0, [r7, #4]
 8008b74:	f7ff ff0a 	bl	800898c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8008b78:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b7c:	2118      	movs	r1, #24
 8008b7e:	6878      	ldr	r0, [r7, #4]
 8008b80:	f000 fa12 	bl	8008fa8 <SDMMC_GetCmdResp1>
 8008b84:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008b86:	69fb      	ldr	r3, [r7, #28]
}
 8008b88:	4618      	mov	r0, r3
 8008b8a:	3720      	adds	r7, #32
 8008b8c:	46bd      	mov	sp, r7
 8008b8e:	bd80      	pop	{r7, pc}

08008b90 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8008b90:	b580      	push	{r7, lr}
 8008b92:	b088      	sub	sp, #32
 8008b94:	af00      	add	r7, sp, #0
 8008b96:	6078      	str	r0, [r7, #4]
 8008b98:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8008b9a:	683b      	ldr	r3, [r7, #0]
 8008b9c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8008b9e:	2319      	movs	r3, #25
 8008ba0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008ba2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008ba6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008ba8:	2300      	movs	r3, #0
 8008baa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008bac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008bb0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008bb2:	f107 0308 	add.w	r3, r7, #8
 8008bb6:	4619      	mov	r1, r3
 8008bb8:	6878      	ldr	r0, [r7, #4]
 8008bba:	f7ff fee7 	bl	800898c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8008bbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8008bc2:	2119      	movs	r1, #25
 8008bc4:	6878      	ldr	r0, [r7, #4]
 8008bc6:	f000 f9ef 	bl	8008fa8 <SDMMC_GetCmdResp1>
 8008bca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008bcc:	69fb      	ldr	r3, [r7, #28]
}
 8008bce:	4618      	mov	r0, r3
 8008bd0:	3720      	adds	r7, #32
 8008bd2:	46bd      	mov	sp, r7
 8008bd4:	bd80      	pop	{r7, pc}
	...

08008bd8 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8008bd8:	b580      	push	{r7, lr}
 8008bda:	b088      	sub	sp, #32
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8008be0:	2300      	movs	r3, #0
 8008be2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8008be4:	230c      	movs	r3, #12
 8008be6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008be8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008bec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008bee:	2300      	movs	r3, #0
 8008bf0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008bf2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008bf6:	61bb      	str	r3, [r7, #24]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	68db      	ldr	r3, [r3, #12]
 8008bfc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	68db      	ldr	r3, [r3, #12]
 8008c08:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008c10:	f107 0308 	add.w	r3, r7, #8
 8008c14:	4619      	mov	r1, r3
 8008c16:	6878      	ldr	r0, [r7, #4]
 8008c18:	f7ff feb8 	bl	800898c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8008c1c:	4a08      	ldr	r2, [pc, #32]	; (8008c40 <SDMMC_CmdStopTransfer+0x68>)
 8008c1e:	210c      	movs	r1, #12
 8008c20:	6878      	ldr	r0, [r7, #4]
 8008c22:	f000 f9c1 	bl	8008fa8 <SDMMC_GetCmdResp1>
 8008c26:	61f8      	str	r0, [r7, #28]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	68db      	ldr	r3, [r3, #12]
 8008c2c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  return errorstate;
 8008c34:	69fb      	ldr	r3, [r7, #28]
}
 8008c36:	4618      	mov	r0, r3
 8008c38:	3720      	adds	r7, #32
 8008c3a:	46bd      	mov	sp, r7
 8008c3c:	bd80      	pop	{r7, pc}
 8008c3e:	bf00      	nop
 8008c40:	05f5e100 	.word	0x05f5e100

08008c44 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  addr Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8008c44:	b580      	push	{r7, lr}
 8008c46:	b08a      	sub	sp, #40	; 0x28
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	60f8      	str	r0, [r7, #12]
 8008c4c:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8008c50:	683b      	ldr	r3, [r7, #0]
 8008c52:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8008c54:	2307      	movs	r3, #7
 8008c56:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008c58:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008c5c:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008c5e:	2300      	movs	r3, #0
 8008c60:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008c62:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008c66:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008c68:	f107 0310 	add.w	r3, r7, #16
 8008c6c:	4619      	mov	r1, r3
 8008c6e:	68f8      	ldr	r0, [r7, #12]
 8008c70:	f7ff fe8c 	bl	800898c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8008c74:	f241 3288 	movw	r2, #5000	; 0x1388
 8008c78:	2107      	movs	r1, #7
 8008c7a:	68f8      	ldr	r0, [r7, #12]
 8008c7c:	f000 f994 	bl	8008fa8 <SDMMC_GetCmdResp1>
 8008c80:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8008c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008c84:	4618      	mov	r0, r3
 8008c86:	3728      	adds	r7, #40	; 0x28
 8008c88:	46bd      	mov	sp, r7
 8008c8a:	bd80      	pop	{r7, pc}

08008c8c <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8008c8c:	b580      	push	{r7, lr}
 8008c8e:	b088      	sub	sp, #32
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8008c94:	2300      	movs	r3, #0
 8008c96:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8008c98:	2300      	movs	r3, #0
 8008c9a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8008c9c:	2300      	movs	r3, #0
 8008c9e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008ca0:	2300      	movs	r3, #0
 8008ca2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008ca4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008ca8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008caa:	f107 0308 	add.w	r3, r7, #8
 8008cae:	4619      	mov	r1, r3
 8008cb0:	6878      	ldr	r0, [r7, #4]
 8008cb2:	f7ff fe6b 	bl	800898c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8008cb6:	6878      	ldr	r0, [r7, #4]
 8008cb8:	f000 fbb8 	bl	800942c <SDMMC_GetCmdError>
 8008cbc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008cbe:	69fb      	ldr	r3, [r7, #28]
}
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	3720      	adds	r7, #32
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	bd80      	pop	{r7, pc}

08008cc8 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8008cc8:	b580      	push	{r7, lr}
 8008cca:	b088      	sub	sp, #32
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8008cd0:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8008cd4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8008cd6:	2308      	movs	r3, #8
 8008cd8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008cda:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008cde:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008ce0:	2300      	movs	r3, #0
 8008ce2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008ce4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008ce8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008cea:	f107 0308 	add.w	r3, r7, #8
 8008cee:	4619      	mov	r1, r3
 8008cf0:	6878      	ldr	r0, [r7, #4]
 8008cf2:	f7ff fe4b 	bl	800898c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8008cf6:	6878      	ldr	r0, [r7, #4]
 8008cf8:	f000 fb4a 	bl	8009390 <SDMMC_GetCmdResp7>
 8008cfc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008cfe:	69fb      	ldr	r3, [r7, #28]
}
 8008d00:	4618      	mov	r0, r3
 8008d02:	3720      	adds	r7, #32
 8008d04:	46bd      	mov	sp, r7
 8008d06:	bd80      	pop	{r7, pc}

08008d08 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008d08:	b580      	push	{r7, lr}
 8008d0a:	b088      	sub	sp, #32
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	6078      	str	r0, [r7, #4]
 8008d10:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8008d12:	683b      	ldr	r3, [r7, #0]
 8008d14:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8008d16:	2337      	movs	r3, #55	; 0x37
 8008d18:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008d1a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008d1e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008d20:	2300      	movs	r3, #0
 8008d22:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008d24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008d28:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008d2a:	f107 0308 	add.w	r3, r7, #8
 8008d2e:	4619      	mov	r1, r3
 8008d30:	6878      	ldr	r0, [r7, #4]
 8008d32:	f7ff fe2b 	bl	800898c <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8008d36:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d3a:	2137      	movs	r1, #55	; 0x37
 8008d3c:	6878      	ldr	r0, [r7, #4]
 8008d3e:	f000 f933 	bl	8008fa8 <SDMMC_GetCmdResp1>
 8008d42:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008d44:	69fb      	ldr	r3, [r7, #28]
}
 8008d46:	4618      	mov	r0, r3
 8008d48:	3720      	adds	r7, #32
 8008d4a:	46bd      	mov	sp, r7
 8008d4c:	bd80      	pop	{r7, pc}

08008d4e <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008d4e:	b580      	push	{r7, lr}
 8008d50:	b088      	sub	sp, #32
 8008d52:	af00      	add	r7, sp, #0
 8008d54:	6078      	str	r0, [r7, #4]
 8008d56:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  sdmmc_cmdinit.Argument         = Argument;
 8008d58:	683b      	ldr	r3, [r7, #0]
 8008d5a:	60bb      	str	r3, [r7, #8]
#else
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8008d5c:	2329      	movs	r3, #41	; 0x29
 8008d5e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008d60:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008d64:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008d66:	2300      	movs	r3, #0
 8008d68:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008d6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008d6e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008d70:	f107 0308 	add.w	r3, r7, #8
 8008d74:	4619      	mov	r1, r3
 8008d76:	6878      	ldr	r0, [r7, #4]
 8008d78:	f7ff fe08 	bl	800898c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8008d7c:	6878      	ldr	r0, [r7, #4]
 8008d7e:	f000 fa4f 	bl	8009220 <SDMMC_GetCmdResp3>
 8008d82:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008d84:	69fb      	ldr	r3, [r7, #28]
}
 8008d86:	4618      	mov	r0, r3
 8008d88:	3720      	adds	r7, #32
 8008d8a:	46bd      	mov	sp, r7
 8008d8c:	bd80      	pop	{r7, pc}

08008d8e <SDMMC_CmdBusWidth>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  BusWidth BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8008d8e:	b580      	push	{r7, lr}
 8008d90:	b088      	sub	sp, #32
 8008d92:	af00      	add	r7, sp, #0
 8008d94:	6078      	str	r0, [r7, #4]
 8008d96:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8008d98:	683b      	ldr	r3, [r7, #0]
 8008d9a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8008d9c:	2306      	movs	r3, #6
 8008d9e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008da0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008da4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008da6:	2300      	movs	r3, #0
 8008da8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008daa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008dae:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008db0:	f107 0308 	add.w	r3, r7, #8
 8008db4:	4619      	mov	r1, r3
 8008db6:	6878      	ldr	r0, [r7, #4]
 8008db8:	f7ff fde8 	bl	800898c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8008dbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8008dc0:	2106      	movs	r1, #6
 8008dc2:	6878      	ldr	r0, [r7, #4]
 8008dc4:	f000 f8f0 	bl	8008fa8 <SDMMC_GetCmdResp1>
 8008dc8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008dca:	69fb      	ldr	r3, [r7, #28]
}
 8008dcc:	4618      	mov	r0, r3
 8008dce:	3720      	adds	r7, #32
 8008dd0:	46bd      	mov	sp, r7
 8008dd2:	bd80      	pop	{r7, pc}

08008dd4 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8008dd4:	b580      	push	{r7, lr}
 8008dd6:	b088      	sub	sp, #32
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8008ddc:	2300      	movs	r3, #0
 8008dde:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8008de0:	2333      	movs	r3, #51	; 0x33
 8008de2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008de4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008de8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008dea:	2300      	movs	r3, #0
 8008dec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008dee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008df2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008df4:	f107 0308 	add.w	r3, r7, #8
 8008df8:	4619      	mov	r1, r3
 8008dfa:	6878      	ldr	r0, [r7, #4]
 8008dfc:	f7ff fdc6 	bl	800898c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8008e00:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e04:	2133      	movs	r1, #51	; 0x33
 8008e06:	6878      	ldr	r0, [r7, #4]
 8008e08:	f000 f8ce 	bl	8008fa8 <SDMMC_GetCmdResp1>
 8008e0c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008e0e:	69fb      	ldr	r3, [r7, #28]
}
 8008e10:	4618      	mov	r0, r3
 8008e12:	3720      	adds	r7, #32
 8008e14:	46bd      	mov	sp, r7
 8008e16:	bd80      	pop	{r7, pc}

08008e18 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8008e18:	b580      	push	{r7, lr}
 8008e1a:	b088      	sub	sp, #32
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8008e20:	2300      	movs	r3, #0
 8008e22:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8008e24:	2302      	movs	r3, #2
 8008e26:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8008e28:	f44f 7340 	mov.w	r3, #768	; 0x300
 8008e2c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008e2e:	2300      	movs	r3, #0
 8008e30:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008e32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008e36:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008e38:	f107 0308 	add.w	r3, r7, #8
 8008e3c:	4619      	mov	r1, r3
 8008e3e:	6878      	ldr	r0, [r7, #4]
 8008e40:	f7ff fda4 	bl	800898c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8008e44:	6878      	ldr	r0, [r7, #4]
 8008e46:	f000 f9a1 	bl	800918c <SDMMC_GetCmdResp2>
 8008e4a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008e4c:	69fb      	ldr	r3, [r7, #28]
}
 8008e4e:	4618      	mov	r0, r3
 8008e50:	3720      	adds	r7, #32
 8008e52:	46bd      	mov	sp, r7
 8008e54:	bd80      	pop	{r7, pc}

08008e56 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008e56:	b580      	push	{r7, lr}
 8008e58:	b088      	sub	sp, #32
 8008e5a:	af00      	add	r7, sp, #0
 8008e5c:	6078      	str	r0, [r7, #4]
 8008e5e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8008e60:	683b      	ldr	r3, [r7, #0]
 8008e62:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8008e64:	2309      	movs	r3, #9
 8008e66:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8008e68:	f44f 7340 	mov.w	r3, #768	; 0x300
 8008e6c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008e6e:	2300      	movs	r3, #0
 8008e70:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008e72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008e76:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008e78:	f107 0308 	add.w	r3, r7, #8
 8008e7c:	4619      	mov	r1, r3
 8008e7e:	6878      	ldr	r0, [r7, #4]
 8008e80:	f7ff fd84 	bl	800898c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8008e84:	6878      	ldr	r0, [r7, #4]
 8008e86:	f000 f981 	bl	800918c <SDMMC_GetCmdResp2>
 8008e8a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008e8c:	69fb      	ldr	r3, [r7, #28]
}
 8008e8e:	4618      	mov	r0, r3
 8008e90:	3720      	adds	r7, #32
 8008e92:	46bd      	mov	sp, r7
 8008e94:	bd80      	pop	{r7, pc}

08008e96 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pRCA Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8008e96:	b580      	push	{r7, lr}
 8008e98:	b088      	sub	sp, #32
 8008e9a:	af00      	add	r7, sp, #0
 8008e9c:	6078      	str	r0, [r7, #4]
 8008e9e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8008ea0:	2300      	movs	r3, #0
 8008ea2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8008ea4:	2303      	movs	r3, #3
 8008ea6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008ea8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008eac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008eae:	2300      	movs	r3, #0
 8008eb0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008eb2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008eb6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008eb8:	f107 0308 	add.w	r3, r7, #8
 8008ebc:	4619      	mov	r1, r3
 8008ebe:	6878      	ldr	r0, [r7, #4]
 8008ec0:	f7ff fd64 	bl	800898c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8008ec4:	683a      	ldr	r2, [r7, #0]
 8008ec6:	2103      	movs	r1, #3
 8008ec8:	6878      	ldr	r0, [r7, #4]
 8008eca:	f000 f9e9 	bl	80092a0 <SDMMC_GetCmdResp6>
 8008ece:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008ed0:	69fb      	ldr	r3, [r7, #28]
}
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	3720      	adds	r7, #32
 8008ed6:	46bd      	mov	sp, r7
 8008ed8:	bd80      	pop	{r7, pc}

08008eda <SDMMC_CmdSendStatus>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008eda:	b580      	push	{r7, lr}
 8008edc:	b088      	sub	sp, #32
 8008ede:	af00      	add	r7, sp, #0
 8008ee0:	6078      	str	r0, [r7, #4]
 8008ee2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8008ee4:	683b      	ldr	r3, [r7, #0]
 8008ee6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8008ee8:	230d      	movs	r3, #13
 8008eea:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008eec:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008ef0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008ef2:	2300      	movs	r3, #0
 8008ef4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008ef6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008efa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008efc:	f107 0308 	add.w	r3, r7, #8
 8008f00:	4619      	mov	r1, r3
 8008f02:	6878      	ldr	r0, [r7, #4]
 8008f04:	f7ff fd42 	bl	800898c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8008f08:	f241 3288 	movw	r2, #5000	; 0x1388
 8008f0c:	210d      	movs	r1, #13
 8008f0e:	6878      	ldr	r0, [r7, #4]
 8008f10:	f000 f84a 	bl	8008fa8 <SDMMC_GetCmdResp1>
 8008f14:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008f16:	69fb      	ldr	r3, [r7, #28]
}
 8008f18:	4618      	mov	r0, r3
 8008f1a:	3720      	adds	r7, #32
 8008f1c:	46bd      	mov	sp, r7
 8008f1e:	bd80      	pop	{r7, pc}

08008f20 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 8008f20:	b580      	push	{r7, lr}
 8008f22:	b088      	sub	sp, #32
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8008f28:	2300      	movs	r3, #0
 8008f2a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 8008f2c:	230d      	movs	r3, #13
 8008f2e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008f30:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008f34:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008f36:	2300      	movs	r3, #0
 8008f38:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008f3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008f3e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008f40:	f107 0308 	add.w	r3, r7, #8
 8008f44:	4619      	mov	r1, r3
 8008f46:	6878      	ldr	r0, [r7, #4]
 8008f48:	f7ff fd20 	bl	800898c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 8008f4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008f50:	210d      	movs	r1, #13
 8008f52:	6878      	ldr	r0, [r7, #4]
 8008f54:	f000 f828 	bl	8008fa8 <SDMMC_GetCmdResp1>
 8008f58:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008f5a:	69fb      	ldr	r3, [r7, #28]
}
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	3720      	adds	r7, #32
 8008f60:	46bd      	mov	sp, r7
 8008f62:	bd80      	pop	{r7, pc}

08008f64 <SDMMC_CmdVoltageSwitch>:
  *         condition register (OCR)
  * @param  None
  * @retval HAL status
  */
uint32_t SDMMC_CmdVoltageSwitch(SDMMC_TypeDef *SDMMCx)
{
 8008f64:	b580      	push	{r7, lr}
 8008f66:	b088      	sub	sp, #32
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0x00000000;
 8008f6c:	2300      	movs	r3, #0
 8008f6e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 8008f70:	230b      	movs	r3, #11
 8008f72:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008f74:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008f78:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008f7a:	2300      	movs	r3, #0
 8008f7c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008f7e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008f82:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008f84:	f107 0308 	add.w	r3, r7, #8
 8008f88:	4619      	mov	r1, r3
 8008f8a:	6878      	ldr	r0, [r7, #4]
 8008f8c:	f7ff fcfe 	bl	800898c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 8008f90:	f241 3288 	movw	r2, #5000	; 0x1388
 8008f94:	210b      	movs	r1, #11
 8008f96:	6878      	ldr	r0, [r7, #4]
 8008f98:	f000 f806 	bl	8008fa8 <SDMMC_GetCmdResp1>
 8008f9c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008f9e:	69fb      	ldr	r3, [r7, #28]
}
 8008fa0:	4618      	mov	r0, r3
 8008fa2:	3720      	adds	r7, #32
 8008fa4:	46bd      	mov	sp, r7
 8008fa6:	bd80      	pop	{r7, pc}

08008fa8 <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8008fa8:	b580      	push	{r7, lr}
 8008faa:	b088      	sub	sp, #32
 8008fac:	af00      	add	r7, sp, #0
 8008fae:	60f8      	str	r0, [r7, #12]
 8008fb0:	460b      	mov	r3, r1
 8008fb2:	607a      	str	r2, [r7, #4]
 8008fb4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8008fb6:	4b70      	ldr	r3, [pc, #448]	; (8009178 <SDMMC_GetCmdResp1+0x1d0>)
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	4a70      	ldr	r2, [pc, #448]	; (800917c <SDMMC_GetCmdResp1+0x1d4>)
 8008fbc:	fba2 2303 	umull	r2, r3, r2, r3
 8008fc0:	0a5a      	lsrs	r2, r3, #9
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	fb02 f303 	mul.w	r3, r2, r3
 8008fc8:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8008fca:	69fb      	ldr	r3, [r7, #28]
 8008fcc:	1e5a      	subs	r2, r3, #1
 8008fce:	61fa      	str	r2, [r7, #28]
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d102      	bne.n	8008fda <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008fd4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008fd8:	e0c9      	b.n	800916e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fde:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8008fe0:	69ba      	ldr	r2, [r7, #24]
 8008fe2:	4b67      	ldr	r3, [pc, #412]	; (8009180 <SDMMC_GetCmdResp1+0x1d8>)
 8008fe4:	4013      	ands	r3, r2
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d0ef      	beq.n	8008fca <SDMMC_GetCmdResp1+0x22>
 8008fea:	69bb      	ldr	r3, [r7, #24]
 8008fec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d1ea      	bne.n	8008fca <SDMMC_GetCmdResp1+0x22>
#else
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ff8:	f003 0304 	and.w	r3, r3, #4
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d004      	beq.n	800900a <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	2204      	movs	r2, #4
 8009004:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009006:	2304      	movs	r3, #4
 8009008:	e0b1      	b.n	800916e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800900e:	f003 0301 	and.w	r3, r3, #1
 8009012:	2b00      	cmp	r3, #0
 8009014:	d004      	beq.n	8009020 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	2201      	movs	r2, #1
 800901a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800901c:	2301      	movs	r3, #1
 800901e:	e0a6      	b.n	800916e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	4a58      	ldr	r2, [pc, #352]	; (8009184 <SDMMC_GetCmdResp1+0x1dc>)
 8009024:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8009026:	68f8      	ldr	r0, [r7, #12]
 8009028:	f7ff fcda 	bl	80089e0 <SDMMC_GetCommandResponse>
 800902c:	4603      	mov	r3, r0
 800902e:	461a      	mov	r2, r3
 8009030:	7afb      	ldrb	r3, [r7, #11]
 8009032:	4293      	cmp	r3, r2
 8009034:	d001      	beq.n	800903a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009036:	2301      	movs	r3, #1
 8009038:	e099      	b.n	800916e <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800903a:	2100      	movs	r1, #0
 800903c:	68f8      	ldr	r0, [r7, #12]
 800903e:	f7ff fcdc 	bl	80089fa <SDMMC_GetResponse>
 8009042:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8009044:	697a      	ldr	r2, [r7, #20]
 8009046:	4b50      	ldr	r3, [pc, #320]	; (8009188 <SDMMC_GetCmdResp1+0x1e0>)
 8009048:	4013      	ands	r3, r2
 800904a:	2b00      	cmp	r3, #0
 800904c:	d101      	bne.n	8009052 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800904e:	2300      	movs	r3, #0
 8009050:	e08d      	b.n	800916e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8009052:	697b      	ldr	r3, [r7, #20]
 8009054:	2b00      	cmp	r3, #0
 8009056:	da02      	bge.n	800905e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8009058:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800905c:	e087      	b.n	800916e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800905e:	697b      	ldr	r3, [r7, #20]
 8009060:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009064:	2b00      	cmp	r3, #0
 8009066:	d001      	beq.n	800906c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8009068:	2340      	movs	r3, #64	; 0x40
 800906a:	e080      	b.n	800916e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800906c:	697b      	ldr	r3, [r7, #20]
 800906e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009072:	2b00      	cmp	r3, #0
 8009074:	d001      	beq.n	800907a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8009076:	2380      	movs	r3, #128	; 0x80
 8009078:	e079      	b.n	800916e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800907a:	697b      	ldr	r3, [r7, #20]
 800907c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009080:	2b00      	cmp	r3, #0
 8009082:	d002      	beq.n	800908a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8009084:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009088:	e071      	b.n	800916e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800908a:	697b      	ldr	r3, [r7, #20]
 800908c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009090:	2b00      	cmp	r3, #0
 8009092:	d002      	beq.n	800909a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8009094:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009098:	e069      	b.n	800916e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800909a:	697b      	ldr	r3, [r7, #20]
 800909c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d002      	beq.n	80090aa <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80090a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80090a8:	e061      	b.n	800916e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80090aa:	697b      	ldr	r3, [r7, #20]
 80090ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d002      	beq.n	80090ba <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80090b4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80090b8:	e059      	b.n	800916e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80090ba:	697b      	ldr	r3, [r7, #20]
 80090bc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d002      	beq.n	80090ca <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80090c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80090c8:	e051      	b.n	800916e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80090ca:	697b      	ldr	r3, [r7, #20]
 80090cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d002      	beq.n	80090da <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80090d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80090d8:	e049      	b.n	800916e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80090da:	697b      	ldr	r3, [r7, #20]
 80090dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d002      	beq.n	80090ea <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80090e4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80090e8:	e041      	b.n	800916e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80090ea:	697b      	ldr	r3, [r7, #20]
 80090ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d002      	beq.n	80090fa <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 80090f4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80090f8:	e039      	b.n	800916e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80090fa:	697b      	ldr	r3, [r7, #20]
 80090fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009100:	2b00      	cmp	r3, #0
 8009102:	d002      	beq.n	800910a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8009104:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009108:	e031      	b.n	800916e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800910a:	697b      	ldr	r3, [r7, #20]
 800910c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009110:	2b00      	cmp	r3, #0
 8009112:	d002      	beq.n	800911a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8009114:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009118:	e029      	b.n	800916e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800911a:	697b      	ldr	r3, [r7, #20]
 800911c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009120:	2b00      	cmp	r3, #0
 8009122:	d002      	beq.n	800912a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8009124:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009128:	e021      	b.n	800916e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800912a:	697b      	ldr	r3, [r7, #20]
 800912c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009130:	2b00      	cmp	r3, #0
 8009132:	d002      	beq.n	800913a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8009134:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8009138:	e019      	b.n	800916e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800913a:	697b      	ldr	r3, [r7, #20]
 800913c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009140:	2b00      	cmp	r3, #0
 8009142:	d002      	beq.n	800914a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8009144:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8009148:	e011      	b.n	800916e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800914a:	697b      	ldr	r3, [r7, #20]
 800914c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009150:	2b00      	cmp	r3, #0
 8009152:	d002      	beq.n	800915a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8009154:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009158:	e009      	b.n	800916e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800915a:	697b      	ldr	r3, [r7, #20]
 800915c:	f003 0308 	and.w	r3, r3, #8
 8009160:	2b00      	cmp	r3, #0
 8009162:	d002      	beq.n	800916a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8009164:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8009168:	e001      	b.n	800916e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800916a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800916e:	4618      	mov	r0, r3
 8009170:	3720      	adds	r7, #32
 8009172:	46bd      	mov	sp, r7
 8009174:	bd80      	pop	{r7, pc}
 8009176:	bf00      	nop
 8009178:	20000004 	.word	0x20000004
 800917c:	10624dd3 	.word	0x10624dd3
 8009180:	00200045 	.word	0x00200045
 8009184:	002000c5 	.word	0x002000c5
 8009188:	fdffe008 	.word	0xfdffe008

0800918c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800918c:	b480      	push	{r7}
 800918e:	b085      	sub	sp, #20
 8009190:	af00      	add	r7, sp, #0
 8009192:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009194:	4b1f      	ldr	r3, [pc, #124]	; (8009214 <SDMMC_GetCmdResp2+0x88>)
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	4a1f      	ldr	r2, [pc, #124]	; (8009218 <SDMMC_GetCmdResp2+0x8c>)
 800919a:	fba2 2303 	umull	r2, r3, r2, r3
 800919e:	0a5b      	lsrs	r3, r3, #9
 80091a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80091a4:	fb02 f303 	mul.w	r3, r2, r3
 80091a8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	1e5a      	subs	r2, r3, #1
 80091ae:	60fa      	str	r2, [r7, #12]
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d102      	bne.n	80091ba <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80091b4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80091b8:	e026      	b.n	8009208 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091be:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80091c0:	68bb      	ldr	r3, [r7, #8]
 80091c2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d0ef      	beq.n	80091aa <SDMMC_GetCmdResp2+0x1e>
 80091ca:	68bb      	ldr	r3, [r7, #8]
 80091cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d1ea      	bne.n	80091aa <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091d8:	f003 0304 	and.w	r3, r3, #4
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d004      	beq.n	80091ea <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	2204      	movs	r2, #4
 80091e4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80091e6:	2304      	movs	r3, #4
 80091e8:	e00e      	b.n	8009208 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091ee:	f003 0301 	and.w	r3, r3, #1
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d004      	beq.n	8009200 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	2201      	movs	r2, #1
 80091fa:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80091fc:	2301      	movs	r3, #1
 80091fe:	e003      	b.n	8009208 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	4a06      	ldr	r2, [pc, #24]	; (800921c <SDMMC_GetCmdResp2+0x90>)
 8009204:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8009206:	2300      	movs	r3, #0
}
 8009208:	4618      	mov	r0, r3
 800920a:	3714      	adds	r7, #20
 800920c:	46bd      	mov	sp, r7
 800920e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009212:	4770      	bx	lr
 8009214:	20000004 	.word	0x20000004
 8009218:	10624dd3 	.word	0x10624dd3
 800921c:	002000c5 	.word	0x002000c5

08009220 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8009220:	b480      	push	{r7}
 8009222:	b085      	sub	sp, #20
 8009224:	af00      	add	r7, sp, #0
 8009226:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009228:	4b1a      	ldr	r3, [pc, #104]	; (8009294 <SDMMC_GetCmdResp3+0x74>)
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	4a1a      	ldr	r2, [pc, #104]	; (8009298 <SDMMC_GetCmdResp3+0x78>)
 800922e:	fba2 2303 	umull	r2, r3, r2, r3
 8009232:	0a5b      	lsrs	r3, r3, #9
 8009234:	f241 3288 	movw	r2, #5000	; 0x1388
 8009238:	fb02 f303 	mul.w	r3, r2, r3
 800923c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	1e5a      	subs	r2, r3, #1
 8009242:	60fa      	str	r2, [r7, #12]
 8009244:	2b00      	cmp	r3, #0
 8009246:	d102      	bne.n	800924e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009248:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800924c:	e01b      	b.n	8009286 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009252:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009254:	68bb      	ldr	r3, [r7, #8]
 8009256:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800925a:	2b00      	cmp	r3, #0
 800925c:	d0ef      	beq.n	800923e <SDMMC_GetCmdResp3+0x1e>
 800925e:	68bb      	ldr	r3, [r7, #8]
 8009260:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009264:	2b00      	cmp	r3, #0
 8009266:	d1ea      	bne.n	800923e <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800926c:	f003 0304 	and.w	r3, r3, #4
 8009270:	2b00      	cmp	r3, #0
 8009272:	d004      	beq.n	800927e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	2204      	movs	r2, #4
 8009278:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800927a:	2304      	movs	r3, #4
 800927c:	e003      	b.n	8009286 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	4a06      	ldr	r2, [pc, #24]	; (800929c <SDMMC_GetCmdResp3+0x7c>)
 8009282:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8009284:	2300      	movs	r3, #0
}
 8009286:	4618      	mov	r0, r3
 8009288:	3714      	adds	r7, #20
 800928a:	46bd      	mov	sp, r7
 800928c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009290:	4770      	bx	lr
 8009292:	bf00      	nop
 8009294:	20000004 	.word	0x20000004
 8009298:	10624dd3 	.word	0x10624dd3
 800929c:	002000c5 	.word	0x002000c5

080092a0 <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80092a0:	b580      	push	{r7, lr}
 80092a2:	b088      	sub	sp, #32
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	60f8      	str	r0, [r7, #12]
 80092a8:	460b      	mov	r3, r1
 80092aa:	607a      	str	r2, [r7, #4]
 80092ac:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80092ae:	4b35      	ldr	r3, [pc, #212]	; (8009384 <SDMMC_GetCmdResp6+0xe4>)
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	4a35      	ldr	r2, [pc, #212]	; (8009388 <SDMMC_GetCmdResp6+0xe8>)
 80092b4:	fba2 2303 	umull	r2, r3, r2, r3
 80092b8:	0a5b      	lsrs	r3, r3, #9
 80092ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80092be:	fb02 f303 	mul.w	r3, r2, r3
 80092c2:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 80092c4:	69fb      	ldr	r3, [r7, #28]
 80092c6:	1e5a      	subs	r2, r3, #1
 80092c8:	61fa      	str	r2, [r7, #28]
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d102      	bne.n	80092d4 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 80092ce:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80092d2:	e052      	b.n	800937a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092d8:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80092da:	69bb      	ldr	r3, [r7, #24]
 80092dc:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d0ef      	beq.n	80092c4 <SDMMC_GetCmdResp6+0x24>
 80092e4:	69bb      	ldr	r3, [r7, #24]
 80092e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d1ea      	bne.n	80092c4 <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092f2:	f003 0304 	and.w	r3, r3, #4
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d004      	beq.n	8009304 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	2204      	movs	r2, #4
 80092fe:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009300:	2304      	movs	r3, #4
 8009302:	e03a      	b.n	800937a <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009308:	f003 0301 	and.w	r3, r3, #1
 800930c:	2b00      	cmp	r3, #0
 800930e:	d004      	beq.n	800931a <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	2201      	movs	r2, #1
 8009314:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009316:	2301      	movs	r3, #1
 8009318:	e02f      	b.n	800937a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800931a:	68f8      	ldr	r0, [r7, #12]
 800931c:	f7ff fb60 	bl	80089e0 <SDMMC_GetCommandResponse>
 8009320:	4603      	mov	r3, r0
 8009322:	461a      	mov	r2, r3
 8009324:	7afb      	ldrb	r3, [r7, #11]
 8009326:	4293      	cmp	r3, r2
 8009328:	d001      	beq.n	800932e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800932a:	2301      	movs	r3, #1
 800932c:	e025      	b.n	800937a <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	4a16      	ldr	r2, [pc, #88]	; (800938c <SDMMC_GetCmdResp6+0xec>)
 8009332:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8009334:	2100      	movs	r1, #0
 8009336:	68f8      	ldr	r0, [r7, #12]
 8009338:	f7ff fb5f 	bl	80089fa <SDMMC_GetResponse>
 800933c:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800933e:	697b      	ldr	r3, [r7, #20]
 8009340:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8009344:	2b00      	cmp	r3, #0
 8009346:	d106      	bne.n	8009356 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8009348:	697b      	ldr	r3, [r7, #20]
 800934a:	0c1b      	lsrs	r3, r3, #16
 800934c:	b29a      	uxth	r2, r3
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 8009352:	2300      	movs	r3, #0
 8009354:	e011      	b.n	800937a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8009356:	697b      	ldr	r3, [r7, #20]
 8009358:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800935c:	2b00      	cmp	r3, #0
 800935e:	d002      	beq.n	8009366 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009360:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009364:	e009      	b.n	800937a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8009366:	697b      	ldr	r3, [r7, #20]
 8009368:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800936c:	2b00      	cmp	r3, #0
 800936e:	d002      	beq.n	8009376 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009370:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009374:	e001      	b.n	800937a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8009376:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800937a:	4618      	mov	r0, r3
 800937c:	3720      	adds	r7, #32
 800937e:	46bd      	mov	sp, r7
 8009380:	bd80      	pop	{r7, pc}
 8009382:	bf00      	nop
 8009384:	20000004 	.word	0x20000004
 8009388:	10624dd3 	.word	0x10624dd3
 800938c:	002000c5 	.word	0x002000c5

08009390 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8009390:	b480      	push	{r7}
 8009392:	b085      	sub	sp, #20
 8009394:	af00      	add	r7, sp, #0
 8009396:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009398:	4b22      	ldr	r3, [pc, #136]	; (8009424 <SDMMC_GetCmdResp7+0x94>)
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	4a22      	ldr	r2, [pc, #136]	; (8009428 <SDMMC_GetCmdResp7+0x98>)
 800939e:	fba2 2303 	umull	r2, r3, r2, r3
 80093a2:	0a5b      	lsrs	r3, r3, #9
 80093a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80093a8:	fb02 f303 	mul.w	r3, r2, r3
 80093ac:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	1e5a      	subs	r2, r3, #1
 80093b2:	60fa      	str	r2, [r7, #12]
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d102      	bne.n	80093be <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80093b8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80093bc:	e02c      	b.n	8009418 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093c2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80093c4:	68bb      	ldr	r3, [r7, #8]
 80093c6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d0ef      	beq.n	80093ae <SDMMC_GetCmdResp7+0x1e>
 80093ce:	68bb      	ldr	r3, [r7, #8]
 80093d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d1ea      	bne.n	80093ae <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093dc:	f003 0304 	and.w	r3, r3, #4
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d004      	beq.n	80093ee <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	2204      	movs	r2, #4
 80093e8:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80093ea:	2304      	movs	r3, #4
 80093ec:	e014      	b.n	8009418 <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093f2:	f003 0301 	and.w	r3, r3, #1
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d004      	beq.n	8009404 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	2201      	movs	r2, #1
 80093fe:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009400:	2301      	movs	r3, #1
 8009402:	e009      	b.n	8009418 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009408:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800940c:	2b00      	cmp	r3, #0
 800940e:	d002      	beq.n	8009416 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	2240      	movs	r2, #64	; 0x40
 8009414:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8009416:	2300      	movs	r3, #0

}
 8009418:	4618      	mov	r0, r3
 800941a:	3714      	adds	r7, #20
 800941c:	46bd      	mov	sp, r7
 800941e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009422:	4770      	bx	lr
 8009424:	20000004 	.word	0x20000004
 8009428:	10624dd3 	.word	0x10624dd3

0800942c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800942c:	b480      	push	{r7}
 800942e:	b085      	sub	sp, #20
 8009430:	af00      	add	r7, sp, #0
 8009432:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009434:	4b11      	ldr	r3, [pc, #68]	; (800947c <SDMMC_GetCmdError+0x50>)
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	4a11      	ldr	r2, [pc, #68]	; (8009480 <SDMMC_GetCmdError+0x54>)
 800943a:	fba2 2303 	umull	r2, r3, r2, r3
 800943e:	0a5b      	lsrs	r3, r3, #9
 8009440:	f241 3288 	movw	r2, #5000	; 0x1388
 8009444:	fb02 f303 	mul.w	r3, r2, r3
 8009448:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	1e5a      	subs	r2, r3, #1
 800944e:	60fa      	str	r2, [r7, #12]
 8009450:	2b00      	cmp	r3, #0
 8009452:	d102      	bne.n	800945a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009454:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009458:	e009      	b.n	800946e <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800945e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009462:	2b00      	cmp	r3, #0
 8009464:	d0f1      	beq.n	800944a <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	4a06      	ldr	r2, [pc, #24]	; (8009484 <SDMMC_GetCmdError+0x58>)
 800946a:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800946c:	2300      	movs	r3, #0
}
 800946e:	4618      	mov	r0, r3
 8009470:	3714      	adds	r7, #20
 8009472:	46bd      	mov	sp, r7
 8009474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009478:	4770      	bx	lr
 800947a:	bf00      	nop
 800947c:	20000004 	.word	0x20000004
 8009480:	10624dd3 	.word	0x10624dd3
 8009484:	002000c5 	.word	0x002000c5

08009488 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8009488:	b580      	push	{r7, lr}
 800948a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800948c:	4904      	ldr	r1, [pc, #16]	; (80094a0 <MX_FATFS_Init+0x18>)
 800948e:	4805      	ldr	r0, [pc, #20]	; (80094a4 <MX_FATFS_Init+0x1c>)
 8009490:	f000 faa4 	bl	80099dc <FATFS_LinkDriver>
 8009494:	4603      	mov	r3, r0
 8009496:	461a      	mov	r2, r3
 8009498:	4b03      	ldr	r3, [pc, #12]	; (80094a8 <MX_FATFS_Init+0x20>)
 800949a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800949c:	bf00      	nop
 800949e:	bd80      	pop	{r7, pc}
 80094a0:	20000430 	.word	0x20000430
 80094a4:	0800d794 	.word	0x0800d794
 80094a8:	2000042c 	.word	0x2000042c

080094ac <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 80094ac:	b580      	push	{r7, lr}
 80094ae:	b082      	sub	sp, #8
 80094b0:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80094b2:	2300      	movs	r3, #0
 80094b4:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80094b6:	f000 f885 	bl	80095c4 <BSP_SD_IsDetected>
 80094ba:	4603      	mov	r3, r0
 80094bc:	2b01      	cmp	r3, #1
 80094be:	d001      	beq.n	80094c4 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 80094c0:	2302      	movs	r3, #2
 80094c2:	e012      	b.n	80094ea <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 80094c4:	480b      	ldr	r0, [pc, #44]	; (80094f4 <BSP_SD_Init+0x48>)
 80094c6:	f7fd f821 	bl	800650c <HAL_SD_Init>
 80094ca:	4603      	mov	r3, r0
 80094cc:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 80094ce:	79fb      	ldrb	r3, [r7, #7]
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d109      	bne.n	80094e8 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 80094d4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80094d8:	4806      	ldr	r0, [pc, #24]	; (80094f4 <BSP_SD_Init+0x48>)
 80094da:	f7fd fed5 	bl	8007288 <HAL_SD_ConfigWideBusOperation>
 80094de:	4603      	mov	r3, r0
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d001      	beq.n	80094e8 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 80094e4:	2301      	movs	r3, #1
 80094e6:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 80094e8:	79fb      	ldrb	r3, [r7, #7]
}
 80094ea:	4618      	mov	r0, r3
 80094ec:	3708      	adds	r7, #8
 80094ee:	46bd      	mov	sp, r7
 80094f0:	bd80      	pop	{r7, pc}
 80094f2:	bf00      	nop
 80094f4:	200002a0 	.word	0x200002a0

080094f8 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 80094f8:	b580      	push	{r7, lr}
 80094fa:	b086      	sub	sp, #24
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	60f8      	str	r0, [r7, #12]
 8009500:	60b9      	str	r1, [r7, #8]
 8009502:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8009504:	2300      	movs	r3, #0
 8009506:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	68ba      	ldr	r2, [r7, #8]
 800950c:	68f9      	ldr	r1, [r7, #12]
 800950e:	4806      	ldr	r0, [pc, #24]	; (8009528 <BSP_SD_ReadBlocks_DMA+0x30>)
 8009510:	f7fd f924 	bl	800675c <HAL_SD_ReadBlocks_DMA>
 8009514:	4603      	mov	r3, r0
 8009516:	2b00      	cmp	r3, #0
 8009518:	d001      	beq.n	800951e <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800951a:	2301      	movs	r3, #1
 800951c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800951e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009520:	4618      	mov	r0, r3
 8009522:	3718      	adds	r7, #24
 8009524:	46bd      	mov	sp, r7
 8009526:	bd80      	pop	{r7, pc}
 8009528:	200002a0 	.word	0x200002a0

0800952c <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800952c:	b580      	push	{r7, lr}
 800952e:	b086      	sub	sp, #24
 8009530:	af00      	add	r7, sp, #0
 8009532:	60f8      	str	r0, [r7, #12]
 8009534:	60b9      	str	r1, [r7, #8]
 8009536:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8009538:	2300      	movs	r3, #0
 800953a:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	68ba      	ldr	r2, [r7, #8]
 8009540:	68f9      	ldr	r1, [r7, #12]
 8009542:	4806      	ldr	r0, [pc, #24]	; (800955c <BSP_SD_WriteBlocks_DMA+0x30>)
 8009544:	f7fd f9b2 	bl	80068ac <HAL_SD_WriteBlocks_DMA>
 8009548:	4603      	mov	r3, r0
 800954a:	2b00      	cmp	r3, #0
 800954c:	d001      	beq.n	8009552 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800954e:	2301      	movs	r3, #1
 8009550:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8009552:	7dfb      	ldrb	r3, [r7, #23]
}
 8009554:	4618      	mov	r0, r3
 8009556:	3718      	adds	r7, #24
 8009558:	46bd      	mov	sp, r7
 800955a:	bd80      	pop	{r7, pc}
 800955c:	200002a0 	.word	0x200002a0

08009560 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8009560:	b580      	push	{r7, lr}
 8009562:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8009564:	4805      	ldr	r0, [pc, #20]	; (800957c <BSP_SD_GetCardState+0x1c>)
 8009566:	f7fd ffa3 	bl	80074b0 <HAL_SD_GetCardState>
 800956a:	4603      	mov	r3, r0
 800956c:	2b04      	cmp	r3, #4
 800956e:	bf14      	ite	ne
 8009570:	2301      	movne	r3, #1
 8009572:	2300      	moveq	r3, #0
 8009574:	b2db      	uxtb	r3, r3
}
 8009576:	4618      	mov	r0, r3
 8009578:	bd80      	pop	{r7, pc}
 800957a:	bf00      	nop
 800957c:	200002a0 	.word	0x200002a0

08009580 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(BSP_SD_CardInfo *CardInfo)
{
 8009580:	b580      	push	{r7, lr}
 8009582:	b082      	sub	sp, #8
 8009584:	af00      	add	r7, sp, #0
 8009586:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8009588:	6879      	ldr	r1, [r7, #4]
 800958a:	4803      	ldr	r0, [pc, #12]	; (8009598 <BSP_SD_GetCardInfo+0x18>)
 800958c:	f7fd fe50 	bl	8007230 <HAL_SD_GetCardInfo>
}
 8009590:	bf00      	nop
 8009592:	3708      	adds	r7, #8
 8009594:	46bd      	mov	sp, r7
 8009596:	bd80      	pop	{r7, pc}
 8009598:	200002a0 	.word	0x200002a0

0800959c <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800959c:	b580      	push	{r7, lr}
 800959e:	b082      	sub	sp, #8
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 80095a4:	f000 f9aa 	bl	80098fc <BSP_SD_WriteCpltCallback>
}
 80095a8:	bf00      	nop
 80095aa:	3708      	adds	r7, #8
 80095ac:	46bd      	mov	sp, r7
 80095ae:	bd80      	pop	{r7, pc}

080095b0 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 80095b0:	b580      	push	{r7, lr}
 80095b2:	b082      	sub	sp, #8
 80095b4:	af00      	add	r7, sp, #0
 80095b6:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 80095b8:	f000 f9b2 	bl	8009920 <BSP_SD_ReadCpltCallback>
}
 80095bc:	bf00      	nop
 80095be:	3708      	adds	r7, #8
 80095c0:	46bd      	mov	sp, r7
 80095c2:	bd80      	pop	{r7, pc}

080095c4 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80095c4:	b580      	push	{r7, lr}
 80095c6:	b082      	sub	sp, #8
 80095c8:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80095ca:	2301      	movs	r3, #1
 80095cc:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 80095ce:	f000 f80b 	bl	80095e8 <BSP_PlatformIsDetected>
 80095d2:	4603      	mov	r3, r0
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d101      	bne.n	80095dc <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 80095d8:	2300      	movs	r3, #0
 80095da:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 80095dc:	79fb      	ldrb	r3, [r7, #7]
 80095de:	b2db      	uxtb	r3, r3
}
 80095e0:	4618      	mov	r0, r3
 80095e2:	3708      	adds	r7, #8
 80095e4:	46bd      	mov	sp, r7
 80095e6:	bd80      	pop	{r7, pc}

080095e8 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 80095e8:	b580      	push	{r7, lr}
 80095ea:	b082      	sub	sp, #8
 80095ec:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 80095ee:	2301      	movs	r3, #1
 80095f0:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 80095f2:	2120      	movs	r1, #32
 80095f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80095f8:	f7fa f8ae 	bl	8003758 <HAL_GPIO_ReadPin>
 80095fc:	4603      	mov	r3, r0
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d001      	beq.n	8009606 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8009602:	2300      	movs	r3, #0
 8009604:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8009606:	79fb      	ldrb	r3, [r7, #7]
}
 8009608:	4618      	mov	r0, r3
 800960a:	3708      	adds	r7, #8
 800960c:	46bd      	mov	sp, r7
 800960e:	bd80      	pop	{r7, pc}

08009610 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8009610:	b580      	push	{r7, lr}
 8009612:	b084      	sub	sp, #16
 8009614:	af00      	add	r7, sp, #0
 8009616:	6078      	str	r0, [r7, #4]
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
  while( osKernelSysTick() - timer < timeout)
#else
  timer = osKernelGetTickCount();
 8009618:	f000 faa0 	bl	8009b5c <osKernelGetTickCount>
 800961c:	60f8      	str	r0, [r7, #12]
  while( osKernelGetTickCount() - timer < timeout)
 800961e:	e006      	b.n	800962e <SD_CheckStatusWithTimeout+0x1e>
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8009620:	f7ff ff9e 	bl	8009560 <BSP_SD_GetCardState>
 8009624:	4603      	mov	r3, r0
 8009626:	2b00      	cmp	r3, #0
 8009628:	d101      	bne.n	800962e <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800962a:	2300      	movs	r3, #0
 800962c:	e009      	b.n	8009642 <SD_CheckStatusWithTimeout+0x32>
  while( osKernelGetTickCount() - timer < timeout)
 800962e:	f000 fa95 	bl	8009b5c <osKernelGetTickCount>
 8009632:	4602      	mov	r2, r0
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	1ad3      	subs	r3, r2, r3
 8009638:	687a      	ldr	r2, [r7, #4]
 800963a:	429a      	cmp	r2, r3
 800963c:	d8f0      	bhi.n	8009620 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800963e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8009642:	4618      	mov	r0, r3
 8009644:	3710      	adds	r7, #16
 8009646:	46bd      	mov	sp, r7
 8009648:	bd80      	pop	{r7, pc}
	...

0800964c <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800964c:	b580      	push	{r7, lr}
 800964e:	b082      	sub	sp, #8
 8009650:	af00      	add	r7, sp, #0
 8009652:	4603      	mov	r3, r0
 8009654:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8009656:	4b0b      	ldr	r3, [pc, #44]	; (8009684 <SD_CheckStatus+0x38>)
 8009658:	2201      	movs	r2, #1
 800965a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800965c:	f7ff ff80 	bl	8009560 <BSP_SD_GetCardState>
 8009660:	4603      	mov	r3, r0
 8009662:	2b00      	cmp	r3, #0
 8009664:	d107      	bne.n	8009676 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8009666:	4b07      	ldr	r3, [pc, #28]	; (8009684 <SD_CheckStatus+0x38>)
 8009668:	781b      	ldrb	r3, [r3, #0]
 800966a:	b2db      	uxtb	r3, r3
 800966c:	f023 0301 	bic.w	r3, r3, #1
 8009670:	b2da      	uxtb	r2, r3
 8009672:	4b04      	ldr	r3, [pc, #16]	; (8009684 <SD_CheckStatus+0x38>)
 8009674:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8009676:	4b03      	ldr	r3, [pc, #12]	; (8009684 <SD_CheckStatus+0x38>)
 8009678:	781b      	ldrb	r3, [r3, #0]
 800967a:	b2db      	uxtb	r3, r3
}
 800967c:	4618      	mov	r0, r3
 800967e:	3708      	adds	r7, #8
 8009680:	46bd      	mov	sp, r7
 8009682:	bd80      	pop	{r7, pc}
 8009684:	2000000d 	.word	0x2000000d

08009688 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8009688:	b580      	push	{r7, lr}
 800968a:	b082      	sub	sp, #8
 800968c:	af00      	add	r7, sp, #0
 800968e:	4603      	mov	r3, r0
 8009690:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8009692:	4b1c      	ldr	r3, [pc, #112]	; (8009704 <SD_initialize+0x7c>)
 8009694:	2201      	movs	r2, #1
 8009696:	701a      	strb	r2, [r3, #0]
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
#else
  if(osKernelGetState() == osKernelRunning)
 8009698:	f000 fa18 	bl	8009acc <osKernelGetState>
 800969c:	4603      	mov	r3, r0
 800969e:	2b02      	cmp	r3, #2
 80096a0:	d129      	bne.n	80096f6 <SD_initialize+0x6e>
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 80096a2:	f7ff ff03 	bl	80094ac <BSP_SD_Init>
 80096a6:	4603      	mov	r3, r0
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d107      	bne.n	80096bc <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 80096ac:	79fb      	ldrb	r3, [r7, #7]
 80096ae:	4618      	mov	r0, r3
 80096b0:	f7ff ffcc 	bl	800964c <SD_CheckStatus>
 80096b4:	4603      	mov	r3, r0
 80096b6:	461a      	mov	r2, r3
 80096b8:	4b12      	ldr	r3, [pc, #72]	; (8009704 <SD_initialize+0x7c>)
 80096ba:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 80096bc:	4b11      	ldr	r3, [pc, #68]	; (8009704 <SD_initialize+0x7c>)
 80096be:	781b      	ldrb	r3, [r3, #0]
 80096c0:	b2db      	uxtb	r3, r3
 80096c2:	2b01      	cmp	r3, #1
 80096c4:	d017      	beq.n	80096f6 <SD_initialize+0x6e>
    {
      if (SDQueueID == NULL)
 80096c6:	4b10      	ldr	r3, [pc, #64]	; (8009708 <SD_initialize+0x80>)
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d107      	bne.n	80096de <SD_initialize+0x56>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
 80096ce:	2200      	movs	r2, #0
 80096d0:	2102      	movs	r1, #2
 80096d2:	200a      	movs	r0, #10
 80096d4:	f000 fcaa 	bl	800a02c <osMessageQueueNew>
 80096d8:	4603      	mov	r3, r0
 80096da:	4a0b      	ldr	r2, [pc, #44]	; (8009708 <SD_initialize+0x80>)
 80096dc:	6013      	str	r3, [r2, #0]
#endif
      }

      if (SDQueueID == NULL)
 80096de:	4b0a      	ldr	r3, [pc, #40]	; (8009708 <SD_initialize+0x80>)
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d107      	bne.n	80096f6 <SD_initialize+0x6e>
      {
        Stat |= STA_NOINIT;
 80096e6:	4b07      	ldr	r3, [pc, #28]	; (8009704 <SD_initialize+0x7c>)
 80096e8:	781b      	ldrb	r3, [r3, #0]
 80096ea:	b2db      	uxtb	r3, r3
 80096ec:	f043 0301 	orr.w	r3, r3, #1
 80096f0:	b2da      	uxtb	r2, r3
 80096f2:	4b04      	ldr	r3, [pc, #16]	; (8009704 <SD_initialize+0x7c>)
 80096f4:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 80096f6:	4b03      	ldr	r3, [pc, #12]	; (8009704 <SD_initialize+0x7c>)
 80096f8:	781b      	ldrb	r3, [r3, #0]
 80096fa:	b2db      	uxtb	r3, r3
}
 80096fc:	4618      	mov	r0, r3
 80096fe:	3708      	adds	r7, #8
 8009700:	46bd      	mov	sp, r7
 8009702:	bd80      	pop	{r7, pc}
 8009704:	2000000d 	.word	0x2000000d
 8009708:	20000434 	.word	0x20000434

0800970c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800970c:	b580      	push	{r7, lr}
 800970e:	b082      	sub	sp, #8
 8009710:	af00      	add	r7, sp, #0
 8009712:	4603      	mov	r3, r0
 8009714:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8009716:	79fb      	ldrb	r3, [r7, #7]
 8009718:	4618      	mov	r0, r3
 800971a:	f7ff ff97 	bl	800964c <SD_CheckStatus>
 800971e:	4603      	mov	r3, r0
}
 8009720:	4618      	mov	r0, r3
 8009722:	3708      	adds	r7, #8
 8009724:	46bd      	mov	sp, r7
 8009726:	bd80      	pop	{r7, pc}

08009728 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8009728:	b580      	push	{r7, lr}
 800972a:	b088      	sub	sp, #32
 800972c:	af00      	add	r7, sp, #0
 800972e:	60b9      	str	r1, [r7, #8]
 8009730:	607a      	str	r2, [r7, #4]
 8009732:	603b      	str	r3, [r7, #0]
 8009734:	4603      	mov	r3, r0
 8009736:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 8009738:	2301      	movs	r3, #1
 800973a:	77fb      	strb	r3, [r7, #31]
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800973c:	f247 5030 	movw	r0, #30000	; 0x7530
 8009740:	f7ff ff66 	bl	8009610 <SD_CheckStatusWithTimeout>
 8009744:	4603      	mov	r3, r0
 8009746:	2b00      	cmp	r3, #0
 8009748:	da01      	bge.n	800974e <SD_read+0x26>
  {
    return res;
 800974a:	7ffb      	ldrb	r3, [r7, #31]
 800974c:	e02f      	b.n	80097ae <SD_read+0x86>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800974e:	683a      	ldr	r2, [r7, #0]
 8009750:	6879      	ldr	r1, [r7, #4]
 8009752:	68b8      	ldr	r0, [r7, #8]
 8009754:	f7ff fed0 	bl	80094f8 <BSP_SD_ReadBlocks_DMA>
 8009758:	4603      	mov	r3, r0
 800975a:	77bb      	strb	r3, [r7, #30]

    if (ret == MSD_OK) {
 800975c:	7fbb      	ldrb	r3, [r7, #30]
 800975e:	2b00      	cmp	r3, #0
 8009760:	d124      	bne.n	80097ac <SD_read+0x84>
      {
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
#else
          status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 8009762:	4b15      	ldr	r3, [pc, #84]	; (80097b8 <SD_read+0x90>)
 8009764:	6818      	ldr	r0, [r3, #0]
 8009766:	f107 0112 	add.w	r1, r7, #18
 800976a:	f247 5330 	movw	r3, #30000	; 0x7530
 800976e:	2200      	movs	r2, #0
 8009770:	f000 fd30 	bl	800a1d4 <osMessageQueueGet>
 8009774:	61b8      	str	r0, [r7, #24]
          if ((status == osOK) && (event == READ_CPLT_MSG))
 8009776:	69bb      	ldr	r3, [r7, #24]
 8009778:	2b00      	cmp	r3, #0
 800977a:	d117      	bne.n	80097ac <SD_read+0x84>
 800977c:	8a7b      	ldrh	r3, [r7, #18]
 800977e:	2b01      	cmp	r3, #1
 8009780:	d114      	bne.n	80097ac <SD_read+0x84>
          {
            timer = osKernelGetTickCount();
 8009782:	f000 f9eb 	bl	8009b5c <osKernelGetTickCount>
 8009786:	6178      	str	r0, [r7, #20]
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 8009788:	e007      	b.n	800979a <SD_read+0x72>
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800978a:	f7ff fee9 	bl	8009560 <BSP_SD_GetCardState>
 800978e:	4603      	mov	r3, r0
 8009790:	2b00      	cmp	r3, #0
 8009792:	d102      	bne.n	800979a <SD_read+0x72>
              {
                res = RES_OK;
 8009794:	2300      	movs	r3, #0
 8009796:	77fb      	strb	r3, [r7, #31]
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 8009798:	e008      	b.n	80097ac <SD_read+0x84>
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 800979a:	f000 f9df 	bl	8009b5c <osKernelGetTickCount>
 800979e:	4602      	mov	r2, r0
 80097a0:	697b      	ldr	r3, [r7, #20]
 80097a2:	1ad3      	subs	r3, r2, r3
 80097a4:	f247 522f 	movw	r2, #29999	; 0x752f
 80097a8:	4293      	cmp	r3, r2
 80097aa:	d9ee      	bls.n	800978a <SD_read+0x62>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 80097ac:	7ffb      	ldrb	r3, [r7, #31]
}
 80097ae:	4618      	mov	r0, r3
 80097b0:	3720      	adds	r7, #32
 80097b2:	46bd      	mov	sp, r7
 80097b4:	bd80      	pop	{r7, pc}
 80097b6:	bf00      	nop
 80097b8:	20000434 	.word	0x20000434

080097bc <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80097bc:	b580      	push	{r7, lr}
 80097be:	b088      	sub	sp, #32
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	60b9      	str	r1, [r7, #8]
 80097c4:	607a      	str	r2, [r7, #4]
 80097c6:	603b      	str	r3, [r7, #0]
 80097c8:	4603      	mov	r3, r0
 80097ca:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80097cc:	2301      	movs	r3, #1
 80097ce:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80097d0:	f247 5030 	movw	r0, #30000	; 0x7530
 80097d4:	f7ff ff1c 	bl	8009610 <SD_CheckStatusWithTimeout>
 80097d8:	4603      	mov	r3, r0
 80097da:	2b00      	cmp	r3, #0
 80097dc:	da01      	bge.n	80097e2 <SD_write+0x26>
  {
    return res;
 80097de:	7ffb      	ldrb	r3, [r7, #31]
 80097e0:	e02d      	b.n	800983e <SD_write+0x82>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 80097e2:	683a      	ldr	r2, [r7, #0]
 80097e4:	6879      	ldr	r1, [r7, #4]
 80097e6:	68b8      	ldr	r0, [r7, #8]
 80097e8:	f7ff fea0 	bl	800952c <BSP_SD_WriteBlocks_DMA>
 80097ec:	4603      	mov	r3, r0
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d124      	bne.n	800983c <SD_write+0x80>
    if (event.status == osEventMessage)
    {
      if (event.value.v == WRITE_CPLT_MSG)
      {
#else
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 80097f2:	4b15      	ldr	r3, [pc, #84]	; (8009848 <SD_write+0x8c>)
 80097f4:	6818      	ldr	r0, [r3, #0]
 80097f6:	f107 0112 	add.w	r1, r7, #18
 80097fa:	f247 5330 	movw	r3, #30000	; 0x7530
 80097fe:	2200      	movs	r2, #0
 8009800:	f000 fce8 	bl	800a1d4 <osMessageQueueGet>
 8009804:	61b8      	str	r0, [r7, #24]
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
 8009806:	69bb      	ldr	r3, [r7, #24]
 8009808:	2b00      	cmp	r3, #0
 800980a:	d117      	bne.n	800983c <SD_write+0x80>
 800980c:	8a7b      	ldrh	r3, [r7, #18]
 800980e:	2b02      	cmp	r3, #2
 8009810:	d114      	bne.n	800983c <SD_write+0x80>
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
#else
        timer = osKernelGetTickCount();
 8009812:	f000 f9a3 	bl	8009b5c <osKernelGetTickCount>
 8009816:	6178      	str	r0, [r7, #20]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 8009818:	e007      	b.n	800982a <SD_write+0x6e>
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800981a:	f7ff fea1 	bl	8009560 <BSP_SD_GetCardState>
 800981e:	4603      	mov	r3, r0
 8009820:	2b00      	cmp	r3, #0
 8009822:	d102      	bne.n	800982a <SD_write+0x6e>
          {
            res = RES_OK;
 8009824:	2300      	movs	r3, #0
 8009826:	77fb      	strb	r3, [r7, #31]
            break;
 8009828:	e008      	b.n	800983c <SD_write+0x80>
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 800982a:	f000 f997 	bl	8009b5c <osKernelGetTickCount>
 800982e:	4602      	mov	r2, r0
 8009830:	697b      	ldr	r3, [r7, #20]
 8009832:	1ad3      	subs	r3, r2, r3
 8009834:	f247 522f 	movw	r2, #29999	; 0x752f
 8009838:	4293      	cmp	r3, r2
 800983a:	d9ee      	bls.n	800981a <SD_write+0x5e>
    }

  }
#endif

  return res;
 800983c:	7ffb      	ldrb	r3, [r7, #31]
}
 800983e:	4618      	mov	r0, r3
 8009840:	3720      	adds	r7, #32
 8009842:	46bd      	mov	sp, r7
 8009844:	bd80      	pop	{r7, pc}
 8009846:	bf00      	nop
 8009848:	20000434 	.word	0x20000434

0800984c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800984c:	b580      	push	{r7, lr}
 800984e:	b08c      	sub	sp, #48	; 0x30
 8009850:	af00      	add	r7, sp, #0
 8009852:	4603      	mov	r3, r0
 8009854:	603a      	str	r2, [r7, #0]
 8009856:	71fb      	strb	r3, [r7, #7]
 8009858:	460b      	mov	r3, r1
 800985a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800985c:	2301      	movs	r3, #1
 800985e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8009862:	4b25      	ldr	r3, [pc, #148]	; (80098f8 <SD_ioctl+0xac>)
 8009864:	781b      	ldrb	r3, [r3, #0]
 8009866:	b2db      	uxtb	r3, r3
 8009868:	f003 0301 	and.w	r3, r3, #1
 800986c:	2b00      	cmp	r3, #0
 800986e:	d001      	beq.n	8009874 <SD_ioctl+0x28>
 8009870:	2303      	movs	r3, #3
 8009872:	e03c      	b.n	80098ee <SD_ioctl+0xa2>

  switch (cmd)
 8009874:	79bb      	ldrb	r3, [r7, #6]
 8009876:	2b03      	cmp	r3, #3
 8009878:	d834      	bhi.n	80098e4 <SD_ioctl+0x98>
 800987a:	a201      	add	r2, pc, #4	; (adr r2, 8009880 <SD_ioctl+0x34>)
 800987c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009880:	08009891 	.word	0x08009891
 8009884:	08009899 	.word	0x08009899
 8009888:	080098b1 	.word	0x080098b1
 800988c:	080098cb 	.word	0x080098cb
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8009890:	2300      	movs	r3, #0
 8009892:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009896:	e028      	b.n	80098ea <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8009898:	f107 0308 	add.w	r3, r7, #8
 800989c:	4618      	mov	r0, r3
 800989e:	f7ff fe6f 	bl	8009580 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80098a2:	6a3a      	ldr	r2, [r7, #32]
 80098a4:	683b      	ldr	r3, [r7, #0]
 80098a6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80098a8:	2300      	movs	r3, #0
 80098aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80098ae:	e01c      	b.n	80098ea <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80098b0:	f107 0308 	add.w	r3, r7, #8
 80098b4:	4618      	mov	r0, r3
 80098b6:	f7ff fe63 	bl	8009580 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80098ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098bc:	b29a      	uxth	r2, r3
 80098be:	683b      	ldr	r3, [r7, #0]
 80098c0:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80098c2:	2300      	movs	r3, #0
 80098c4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80098c8:	e00f      	b.n	80098ea <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80098ca:	f107 0308 	add.w	r3, r7, #8
 80098ce:	4618      	mov	r0, r3
 80098d0:	f7ff fe56 	bl	8009580 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80098d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098d6:	0a5a      	lsrs	r2, r3, #9
 80098d8:	683b      	ldr	r3, [r7, #0]
 80098da:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80098dc:	2300      	movs	r3, #0
 80098de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80098e2:	e002      	b.n	80098ea <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80098e4:	2304      	movs	r3, #4
 80098e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 80098ea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80098ee:	4618      	mov	r0, r3
 80098f0:	3730      	adds	r7, #48	; 0x30
 80098f2:	46bd      	mov	sp, r7
 80098f4:	bd80      	pop	{r7, pc}
 80098f6:	bf00      	nop
 80098f8:	2000000d 	.word	0x2000000d

080098fc <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 80098fc:	b580      	push	{r7, lr}
 80098fe:	b082      	sub	sp, #8
 8009900:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
#else
   const uint16_t msg = WRITE_CPLT_MSG;
 8009902:	2302      	movs	r3, #2
 8009904:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 8009906:	4b05      	ldr	r3, [pc, #20]	; (800991c <BSP_SD_WriteCpltCallback+0x20>)
 8009908:	6818      	ldr	r0, [r3, #0]
 800990a:	1db9      	adds	r1, r7, #6
 800990c:	2300      	movs	r3, #0
 800990e:	2200      	movs	r2, #0
 8009910:	f000 fc00 	bl	800a114 <osMessageQueuePut>
#endif
}
 8009914:	bf00      	nop
 8009916:	3708      	adds	r7, #8
 8009918:	46bd      	mov	sp, r7
 800991a:	bd80      	pop	{r7, pc}
 800991c:	20000434 	.word	0x20000434

08009920 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8009920:	b580      	push	{r7, lr}
 8009922:	b082      	sub	sp, #8
 8009924:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
#else
   const uint16_t msg = READ_CPLT_MSG;
 8009926:	2301      	movs	r3, #1
 8009928:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 800992a:	4b05      	ldr	r3, [pc, #20]	; (8009940 <BSP_SD_ReadCpltCallback+0x20>)
 800992c:	6818      	ldr	r0, [r3, #0]
 800992e:	1db9      	adds	r1, r7, #6
 8009930:	2300      	movs	r3, #0
 8009932:	2200      	movs	r2, #0
 8009934:	f000 fbee 	bl	800a114 <osMessageQueuePut>
#endif
}
 8009938:	bf00      	nop
 800993a:	3708      	adds	r7, #8
 800993c:	46bd      	mov	sp, r7
 800993e:	bd80      	pop	{r7, pc}
 8009940:	20000434 	.word	0x20000434

08009944 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8009944:	b480      	push	{r7}
 8009946:	b087      	sub	sp, #28
 8009948:	af00      	add	r7, sp, #0
 800994a:	60f8      	str	r0, [r7, #12]
 800994c:	60b9      	str	r1, [r7, #8]
 800994e:	4613      	mov	r3, r2
 8009950:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8009952:	2301      	movs	r3, #1
 8009954:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8009956:	2300      	movs	r3, #0
 8009958:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800995a:	4b1f      	ldr	r3, [pc, #124]	; (80099d8 <FATFS_LinkDriverEx+0x94>)
 800995c:	7a5b      	ldrb	r3, [r3, #9]
 800995e:	b2db      	uxtb	r3, r3
 8009960:	2b00      	cmp	r3, #0
 8009962:	d131      	bne.n	80099c8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8009964:	4b1c      	ldr	r3, [pc, #112]	; (80099d8 <FATFS_LinkDriverEx+0x94>)
 8009966:	7a5b      	ldrb	r3, [r3, #9]
 8009968:	b2db      	uxtb	r3, r3
 800996a:	461a      	mov	r2, r3
 800996c:	4b1a      	ldr	r3, [pc, #104]	; (80099d8 <FATFS_LinkDriverEx+0x94>)
 800996e:	2100      	movs	r1, #0
 8009970:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8009972:	4b19      	ldr	r3, [pc, #100]	; (80099d8 <FATFS_LinkDriverEx+0x94>)
 8009974:	7a5b      	ldrb	r3, [r3, #9]
 8009976:	b2db      	uxtb	r3, r3
 8009978:	4a17      	ldr	r2, [pc, #92]	; (80099d8 <FATFS_LinkDriverEx+0x94>)
 800997a:	009b      	lsls	r3, r3, #2
 800997c:	4413      	add	r3, r2
 800997e:	68fa      	ldr	r2, [r7, #12]
 8009980:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8009982:	4b15      	ldr	r3, [pc, #84]	; (80099d8 <FATFS_LinkDriverEx+0x94>)
 8009984:	7a5b      	ldrb	r3, [r3, #9]
 8009986:	b2db      	uxtb	r3, r3
 8009988:	461a      	mov	r2, r3
 800998a:	4b13      	ldr	r3, [pc, #76]	; (80099d8 <FATFS_LinkDriverEx+0x94>)
 800998c:	4413      	add	r3, r2
 800998e:	79fa      	ldrb	r2, [r7, #7]
 8009990:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8009992:	4b11      	ldr	r3, [pc, #68]	; (80099d8 <FATFS_LinkDriverEx+0x94>)
 8009994:	7a5b      	ldrb	r3, [r3, #9]
 8009996:	b2db      	uxtb	r3, r3
 8009998:	1c5a      	adds	r2, r3, #1
 800999a:	b2d1      	uxtb	r1, r2
 800999c:	4a0e      	ldr	r2, [pc, #56]	; (80099d8 <FATFS_LinkDriverEx+0x94>)
 800999e:	7251      	strb	r1, [r2, #9]
 80099a0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80099a2:	7dbb      	ldrb	r3, [r7, #22]
 80099a4:	3330      	adds	r3, #48	; 0x30
 80099a6:	b2da      	uxtb	r2, r3
 80099a8:	68bb      	ldr	r3, [r7, #8]
 80099aa:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80099ac:	68bb      	ldr	r3, [r7, #8]
 80099ae:	3301      	adds	r3, #1
 80099b0:	223a      	movs	r2, #58	; 0x3a
 80099b2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80099b4:	68bb      	ldr	r3, [r7, #8]
 80099b6:	3302      	adds	r3, #2
 80099b8:	222f      	movs	r2, #47	; 0x2f
 80099ba:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80099bc:	68bb      	ldr	r3, [r7, #8]
 80099be:	3303      	adds	r3, #3
 80099c0:	2200      	movs	r2, #0
 80099c2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80099c4:	2300      	movs	r3, #0
 80099c6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80099c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80099ca:	4618      	mov	r0, r3
 80099cc:	371c      	adds	r7, #28
 80099ce:	46bd      	mov	sp, r7
 80099d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d4:	4770      	bx	lr
 80099d6:	bf00      	nop
 80099d8:	20000438 	.word	0x20000438

080099dc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80099dc:	b580      	push	{r7, lr}
 80099de:	b082      	sub	sp, #8
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	6078      	str	r0, [r7, #4]
 80099e4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80099e6:	2200      	movs	r2, #0
 80099e8:	6839      	ldr	r1, [r7, #0]
 80099ea:	6878      	ldr	r0, [r7, #4]
 80099ec:	f7ff ffaa 	bl	8009944 <FATFS_LinkDriverEx>
 80099f0:	4603      	mov	r3, r0
}
 80099f2:	4618      	mov	r0, r3
 80099f4:	3708      	adds	r7, #8
 80099f6:	46bd      	mov	sp, r7
 80099f8:	bd80      	pop	{r7, pc}
	...

080099fc <__NVIC_SetPriority>:
{
 80099fc:	b480      	push	{r7}
 80099fe:	b083      	sub	sp, #12
 8009a00:	af00      	add	r7, sp, #0
 8009a02:	4603      	mov	r3, r0
 8009a04:	6039      	str	r1, [r7, #0]
 8009a06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009a08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	db0a      	blt.n	8009a26 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009a10:	683b      	ldr	r3, [r7, #0]
 8009a12:	b2da      	uxtb	r2, r3
 8009a14:	490c      	ldr	r1, [pc, #48]	; (8009a48 <__NVIC_SetPriority+0x4c>)
 8009a16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009a1a:	0112      	lsls	r2, r2, #4
 8009a1c:	b2d2      	uxtb	r2, r2
 8009a1e:	440b      	add	r3, r1
 8009a20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8009a24:	e00a      	b.n	8009a3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009a26:	683b      	ldr	r3, [r7, #0]
 8009a28:	b2da      	uxtb	r2, r3
 8009a2a:	4908      	ldr	r1, [pc, #32]	; (8009a4c <__NVIC_SetPriority+0x50>)
 8009a2c:	79fb      	ldrb	r3, [r7, #7]
 8009a2e:	f003 030f 	and.w	r3, r3, #15
 8009a32:	3b04      	subs	r3, #4
 8009a34:	0112      	lsls	r2, r2, #4
 8009a36:	b2d2      	uxtb	r2, r2
 8009a38:	440b      	add	r3, r1
 8009a3a:	761a      	strb	r2, [r3, #24]
}
 8009a3c:	bf00      	nop
 8009a3e:	370c      	adds	r7, #12
 8009a40:	46bd      	mov	sp, r7
 8009a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a46:	4770      	bx	lr
 8009a48:	e000e100 	.word	0xe000e100
 8009a4c:	e000ed00 	.word	0xe000ed00

08009a50 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8009a50:	b580      	push	{r7, lr}
 8009a52:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8009a54:	4b05      	ldr	r3, [pc, #20]	; (8009a6c <SysTick_Handler+0x1c>)
 8009a56:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8009a58:	f002 fbb6 	bl	800c1c8 <xTaskGetSchedulerState>
 8009a5c:	4603      	mov	r3, r0
 8009a5e:	2b01      	cmp	r3, #1
 8009a60:	d001      	beq.n	8009a66 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8009a62:	f003 fa99 	bl	800cf98 <xPortSysTickHandler>
  }
}
 8009a66:	bf00      	nop
 8009a68:	bd80      	pop	{r7, pc}
 8009a6a:	bf00      	nop
 8009a6c:	e000e010 	.word	0xe000e010

08009a70 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009a70:	b580      	push	{r7, lr}
 8009a72:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8009a74:	2100      	movs	r1, #0
 8009a76:	f06f 0004 	mvn.w	r0, #4
 8009a7a:	f7ff ffbf 	bl	80099fc <__NVIC_SetPriority>
#endif
}
 8009a7e:	bf00      	nop
 8009a80:	bd80      	pop	{r7, pc}
	...

08009a84 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009a84:	b480      	push	{r7}
 8009a86:	b083      	sub	sp, #12
 8009a88:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009a8a:	f3ef 8305 	mrs	r3, IPSR
 8009a8e:	603b      	str	r3, [r7, #0]
  return(result);
 8009a90:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d003      	beq.n	8009a9e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8009a96:	f06f 0305 	mvn.w	r3, #5
 8009a9a:	607b      	str	r3, [r7, #4]
 8009a9c:	e00c      	b.n	8009ab8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8009a9e:	4b0a      	ldr	r3, [pc, #40]	; (8009ac8 <osKernelInitialize+0x44>)
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d105      	bne.n	8009ab2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8009aa6:	4b08      	ldr	r3, [pc, #32]	; (8009ac8 <osKernelInitialize+0x44>)
 8009aa8:	2201      	movs	r2, #1
 8009aaa:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009aac:	2300      	movs	r3, #0
 8009aae:	607b      	str	r3, [r7, #4]
 8009ab0:	e002      	b.n	8009ab8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8009ab2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009ab6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009ab8:	687b      	ldr	r3, [r7, #4]
}
 8009aba:	4618      	mov	r0, r3
 8009abc:	370c      	adds	r7, #12
 8009abe:	46bd      	mov	sp, r7
 8009ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac4:	4770      	bx	lr
 8009ac6:	bf00      	nop
 8009ac8:	20000444 	.word	0x20000444

08009acc <osKernelGetState>:
  }

  return (osOK);
}

osKernelState_t osKernelGetState (void) {
 8009acc:	b580      	push	{r7, lr}
 8009ace:	b082      	sub	sp, #8
 8009ad0:	af00      	add	r7, sp, #0
  osKernelState_t state;

  switch (xTaskGetSchedulerState()) {
 8009ad2:	f002 fb79 	bl	800c1c8 <xTaskGetSchedulerState>
 8009ad6:	4603      	mov	r3, r0
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d004      	beq.n	8009ae6 <osKernelGetState+0x1a>
 8009adc:	2b02      	cmp	r3, #2
 8009ade:	d105      	bne.n	8009aec <osKernelGetState+0x20>
    case taskSCHEDULER_RUNNING:
      state = osKernelRunning;
 8009ae0:	2302      	movs	r3, #2
 8009ae2:	607b      	str	r3, [r7, #4]
      break;
 8009ae4:	e00c      	b.n	8009b00 <osKernelGetState+0x34>

    case taskSCHEDULER_SUSPENDED:
      state = osKernelLocked;
 8009ae6:	2303      	movs	r3, #3
 8009ae8:	607b      	str	r3, [r7, #4]
      break;
 8009aea:	e009      	b.n	8009b00 <osKernelGetState+0x34>

    case taskSCHEDULER_NOT_STARTED:
    default:
      if (KernelState == osKernelReady) {
 8009aec:	4b07      	ldr	r3, [pc, #28]	; (8009b0c <osKernelGetState+0x40>)
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	2b01      	cmp	r3, #1
 8009af2:	d102      	bne.n	8009afa <osKernelGetState+0x2e>
        state = osKernelReady;
 8009af4:	2301      	movs	r3, #1
 8009af6:	607b      	str	r3, [r7, #4]
      } else {
        state = osKernelInactive;
      }
      break;
 8009af8:	e001      	b.n	8009afe <osKernelGetState+0x32>
        state = osKernelInactive;
 8009afa:	2300      	movs	r3, #0
 8009afc:	607b      	str	r3, [r7, #4]
      break;
 8009afe:	bf00      	nop
  }

  return (state);
 8009b00:	687b      	ldr	r3, [r7, #4]
}
 8009b02:	4618      	mov	r0, r3
 8009b04:	3708      	adds	r7, #8
 8009b06:	46bd      	mov	sp, r7
 8009b08:	bd80      	pop	{r7, pc}
 8009b0a:	bf00      	nop
 8009b0c:	20000444 	.word	0x20000444

08009b10 <osKernelStart>:

osStatus_t osKernelStart (void) {
 8009b10:	b580      	push	{r7, lr}
 8009b12:	b082      	sub	sp, #8
 8009b14:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009b16:	f3ef 8305 	mrs	r3, IPSR
 8009b1a:	603b      	str	r3, [r7, #0]
  return(result);
 8009b1c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d003      	beq.n	8009b2a <osKernelStart+0x1a>
    stat = osErrorISR;
 8009b22:	f06f 0305 	mvn.w	r3, #5
 8009b26:	607b      	str	r3, [r7, #4]
 8009b28:	e010      	b.n	8009b4c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8009b2a:	4b0b      	ldr	r3, [pc, #44]	; (8009b58 <osKernelStart+0x48>)
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	2b01      	cmp	r3, #1
 8009b30:	d109      	bne.n	8009b46 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8009b32:	f7ff ff9d 	bl	8009a70 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8009b36:	4b08      	ldr	r3, [pc, #32]	; (8009b58 <osKernelStart+0x48>)
 8009b38:	2202      	movs	r2, #2
 8009b3a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009b3c:	f001 fed6 	bl	800b8ec <vTaskStartScheduler>
      stat = osOK;
 8009b40:	2300      	movs	r3, #0
 8009b42:	607b      	str	r3, [r7, #4]
 8009b44:	e002      	b.n	8009b4c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8009b46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009b4a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009b4c:	687b      	ldr	r3, [r7, #4]
}
 8009b4e:	4618      	mov	r0, r3
 8009b50:	3708      	adds	r7, #8
 8009b52:	46bd      	mov	sp, r7
 8009b54:	bd80      	pop	{r7, pc}
 8009b56:	bf00      	nop
 8009b58:	20000444 	.word	0x20000444

08009b5c <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8009b5c:	b580      	push	{r7, lr}
 8009b5e:	b082      	sub	sp, #8
 8009b60:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009b62:	f3ef 8305 	mrs	r3, IPSR
 8009b66:	603b      	str	r3, [r7, #0]
  return(result);
 8009b68:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d003      	beq.n	8009b76 <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 8009b6e:	f001 ffe9 	bl	800bb44 <xTaskGetTickCountFromISR>
 8009b72:	6078      	str	r0, [r7, #4]
 8009b74:	e002      	b.n	8009b7c <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 8009b76:	f001 ffd5 	bl	800bb24 <xTaskGetTickCount>
 8009b7a:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 8009b7c:	687b      	ldr	r3, [r7, #4]
}
 8009b7e:	4618      	mov	r0, r3
 8009b80:	3708      	adds	r7, #8
 8009b82:	46bd      	mov	sp, r7
 8009b84:	bd80      	pop	{r7, pc}

08009b86 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009b86:	b580      	push	{r7, lr}
 8009b88:	b08e      	sub	sp, #56	; 0x38
 8009b8a:	af04      	add	r7, sp, #16
 8009b8c:	60f8      	str	r0, [r7, #12]
 8009b8e:	60b9      	str	r1, [r7, #8]
 8009b90:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009b92:	2300      	movs	r3, #0
 8009b94:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009b96:	f3ef 8305 	mrs	r3, IPSR
 8009b9a:	617b      	str	r3, [r7, #20]
  return(result);
 8009b9c:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d17e      	bne.n	8009ca0 <osThreadNew+0x11a>
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d07b      	beq.n	8009ca0 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8009ba8:	2380      	movs	r3, #128	; 0x80
 8009baa:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8009bac:	2318      	movs	r3, #24
 8009bae:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8009bb0:	2300      	movs	r3, #0
 8009bb2:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8009bb4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009bb8:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d045      	beq.n	8009c4c <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d002      	beq.n	8009bce <osThreadNew+0x48>
        name = attr->name;
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	699b      	ldr	r3, [r3, #24]
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d002      	beq.n	8009bdc <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	699b      	ldr	r3, [r3, #24]
 8009bda:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009bdc:	69fb      	ldr	r3, [r7, #28]
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d008      	beq.n	8009bf4 <osThreadNew+0x6e>
 8009be2:	69fb      	ldr	r3, [r7, #28]
 8009be4:	2b38      	cmp	r3, #56	; 0x38
 8009be6:	d805      	bhi.n	8009bf4 <osThreadNew+0x6e>
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	685b      	ldr	r3, [r3, #4]
 8009bec:	f003 0301 	and.w	r3, r3, #1
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d001      	beq.n	8009bf8 <osThreadNew+0x72>
        return (NULL);
 8009bf4:	2300      	movs	r3, #0
 8009bf6:	e054      	b.n	8009ca2 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	695b      	ldr	r3, [r3, #20]
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d003      	beq.n	8009c08 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	695b      	ldr	r3, [r3, #20]
 8009c04:	089b      	lsrs	r3, r3, #2
 8009c06:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	689b      	ldr	r3, [r3, #8]
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d00e      	beq.n	8009c2e <osThreadNew+0xa8>
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	68db      	ldr	r3, [r3, #12]
 8009c14:	2bbb      	cmp	r3, #187	; 0xbb
 8009c16:	d90a      	bls.n	8009c2e <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d006      	beq.n	8009c2e <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	695b      	ldr	r3, [r3, #20]
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d002      	beq.n	8009c2e <osThreadNew+0xa8>
        mem = 1;
 8009c28:	2301      	movs	r3, #1
 8009c2a:	61bb      	str	r3, [r7, #24]
 8009c2c:	e010      	b.n	8009c50 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	689b      	ldr	r3, [r3, #8]
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d10c      	bne.n	8009c50 <osThreadNew+0xca>
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	68db      	ldr	r3, [r3, #12]
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d108      	bne.n	8009c50 <osThreadNew+0xca>
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	691b      	ldr	r3, [r3, #16]
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d104      	bne.n	8009c50 <osThreadNew+0xca>
          mem = 0;
 8009c46:	2300      	movs	r3, #0
 8009c48:	61bb      	str	r3, [r7, #24]
 8009c4a:	e001      	b.n	8009c50 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8009c4c:	2300      	movs	r3, #0
 8009c4e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009c50:	69bb      	ldr	r3, [r7, #24]
 8009c52:	2b01      	cmp	r3, #1
 8009c54:	d110      	bne.n	8009c78 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8009c5a:	687a      	ldr	r2, [r7, #4]
 8009c5c:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009c5e:	9202      	str	r2, [sp, #8]
 8009c60:	9301      	str	r3, [sp, #4]
 8009c62:	69fb      	ldr	r3, [r7, #28]
 8009c64:	9300      	str	r3, [sp, #0]
 8009c66:	68bb      	ldr	r3, [r7, #8]
 8009c68:	6a3a      	ldr	r2, [r7, #32]
 8009c6a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009c6c:	68f8      	ldr	r0, [r7, #12]
 8009c6e:	f001 fc51 	bl	800b514 <xTaskCreateStatic>
 8009c72:	4603      	mov	r3, r0
 8009c74:	613b      	str	r3, [r7, #16]
 8009c76:	e013      	b.n	8009ca0 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8009c78:	69bb      	ldr	r3, [r7, #24]
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d110      	bne.n	8009ca0 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009c7e:	6a3b      	ldr	r3, [r7, #32]
 8009c80:	b29a      	uxth	r2, r3
 8009c82:	f107 0310 	add.w	r3, r7, #16
 8009c86:	9301      	str	r3, [sp, #4]
 8009c88:	69fb      	ldr	r3, [r7, #28]
 8009c8a:	9300      	str	r3, [sp, #0]
 8009c8c:	68bb      	ldr	r3, [r7, #8]
 8009c8e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009c90:	68f8      	ldr	r0, [r7, #12]
 8009c92:	f001 fc9c 	bl	800b5ce <xTaskCreate>
 8009c96:	4603      	mov	r3, r0
 8009c98:	2b01      	cmp	r3, #1
 8009c9a:	d001      	beq.n	8009ca0 <osThreadNew+0x11a>
            hTask = NULL;
 8009c9c:	2300      	movs	r3, #0
 8009c9e:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009ca0:	693b      	ldr	r3, [r7, #16]
}
 8009ca2:	4618      	mov	r0, r3
 8009ca4:	3728      	adds	r7, #40	; 0x28
 8009ca6:	46bd      	mov	sp, r7
 8009ca8:	bd80      	pop	{r7, pc}

08009caa <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8009caa:	b580      	push	{r7, lr}
 8009cac:	b084      	sub	sp, #16
 8009cae:	af00      	add	r7, sp, #0
 8009cb0:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009cb2:	f3ef 8305 	mrs	r3, IPSR
 8009cb6:	60bb      	str	r3, [r7, #8]
  return(result);
 8009cb8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d003      	beq.n	8009cc6 <osDelay+0x1c>
    stat = osErrorISR;
 8009cbe:	f06f 0305 	mvn.w	r3, #5
 8009cc2:	60fb      	str	r3, [r7, #12]
 8009cc4:	e007      	b.n	8009cd6 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8009cc6:	2300      	movs	r3, #0
 8009cc8:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d002      	beq.n	8009cd6 <osDelay+0x2c>
      vTaskDelay(ticks);
 8009cd0:	6878      	ldr	r0, [r7, #4]
 8009cd2:	f001 fdd7 	bl	800b884 <vTaskDelay>
    }
  }

  return (stat);
 8009cd6:	68fb      	ldr	r3, [r7, #12]
}
 8009cd8:	4618      	mov	r0, r3
 8009cda:	3710      	adds	r7, #16
 8009cdc:	46bd      	mov	sp, r7
 8009cde:	bd80      	pop	{r7, pc}

08009ce0 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8009ce0:	b580      	push	{r7, lr}
 8009ce2:	b088      	sub	sp, #32
 8009ce4:	af00      	add	r7, sp, #0
 8009ce6:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8009ce8:	2300      	movs	r3, #0
 8009cea:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009cec:	f3ef 8305 	mrs	r3, IPSR
 8009cf0:	60bb      	str	r3, [r7, #8]
  return(result);
 8009cf2:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d174      	bne.n	8009de2 <osMutexNew+0x102>
    if (attr != NULL) {
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d003      	beq.n	8009d06 <osMutexNew+0x26>
      type = attr->attr_bits;
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	685b      	ldr	r3, [r3, #4]
 8009d02:	61bb      	str	r3, [r7, #24]
 8009d04:	e001      	b.n	8009d0a <osMutexNew+0x2a>
    } else {
      type = 0U;
 8009d06:	2300      	movs	r3, #0
 8009d08:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8009d0a:	69bb      	ldr	r3, [r7, #24]
 8009d0c:	f003 0301 	and.w	r3, r3, #1
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d002      	beq.n	8009d1a <osMutexNew+0x3a>
      rmtx = 1U;
 8009d14:	2301      	movs	r3, #1
 8009d16:	617b      	str	r3, [r7, #20]
 8009d18:	e001      	b.n	8009d1e <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8009d1a:	2300      	movs	r3, #0
 8009d1c:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8009d1e:	69bb      	ldr	r3, [r7, #24]
 8009d20:	f003 0308 	and.w	r3, r3, #8
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d15c      	bne.n	8009de2 <osMutexNew+0x102>
      mem = -1;
 8009d28:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009d2c:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d015      	beq.n	8009d60 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	689b      	ldr	r3, [r3, #8]
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d006      	beq.n	8009d4a <osMutexNew+0x6a>
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	68db      	ldr	r3, [r3, #12]
 8009d40:	2b4f      	cmp	r3, #79	; 0x4f
 8009d42:	d902      	bls.n	8009d4a <osMutexNew+0x6a>
          mem = 1;
 8009d44:	2301      	movs	r3, #1
 8009d46:	613b      	str	r3, [r7, #16]
 8009d48:	e00c      	b.n	8009d64 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	689b      	ldr	r3, [r3, #8]
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d108      	bne.n	8009d64 <osMutexNew+0x84>
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	68db      	ldr	r3, [r3, #12]
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d104      	bne.n	8009d64 <osMutexNew+0x84>
            mem = 0;
 8009d5a:	2300      	movs	r3, #0
 8009d5c:	613b      	str	r3, [r7, #16]
 8009d5e:	e001      	b.n	8009d64 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8009d60:	2300      	movs	r3, #0
 8009d62:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8009d64:	693b      	ldr	r3, [r7, #16]
 8009d66:	2b01      	cmp	r3, #1
 8009d68:	d112      	bne.n	8009d90 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8009d6a:	697b      	ldr	r3, [r7, #20]
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d007      	beq.n	8009d80 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	689b      	ldr	r3, [r3, #8]
 8009d74:	4619      	mov	r1, r3
 8009d76:	2004      	movs	r0, #4
 8009d78:	f000 fce1 	bl	800a73e <xQueueCreateMutexStatic>
 8009d7c:	61f8      	str	r0, [r7, #28]
 8009d7e:	e016      	b.n	8009dae <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	689b      	ldr	r3, [r3, #8]
 8009d84:	4619      	mov	r1, r3
 8009d86:	2001      	movs	r0, #1
 8009d88:	f000 fcd9 	bl	800a73e <xQueueCreateMutexStatic>
 8009d8c:	61f8      	str	r0, [r7, #28]
 8009d8e:	e00e      	b.n	8009dae <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8009d90:	693b      	ldr	r3, [r7, #16]
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d10b      	bne.n	8009dae <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8009d96:	697b      	ldr	r3, [r7, #20]
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d004      	beq.n	8009da6 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8009d9c:	2004      	movs	r0, #4
 8009d9e:	f000 fcb6 	bl	800a70e <xQueueCreateMutex>
 8009da2:	61f8      	str	r0, [r7, #28]
 8009da4:	e003      	b.n	8009dae <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8009da6:	2001      	movs	r0, #1
 8009da8:	f000 fcb1 	bl	800a70e <xQueueCreateMutex>
 8009dac:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8009dae:	69fb      	ldr	r3, [r7, #28]
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d00c      	beq.n	8009dce <osMutexNew+0xee>
        if (attr != NULL) {
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d003      	beq.n	8009dc2 <osMutexNew+0xe2>
          name = attr->name;
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	60fb      	str	r3, [r7, #12]
 8009dc0:	e001      	b.n	8009dc6 <osMutexNew+0xe6>
        } else {
          name = NULL;
 8009dc2:	2300      	movs	r3, #0
 8009dc4:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8009dc6:	68f9      	ldr	r1, [r7, #12]
 8009dc8:	69f8      	ldr	r0, [r7, #28]
 8009dca:	f001 fb1b 	bl	800b404 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8009dce:	69fb      	ldr	r3, [r7, #28]
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d006      	beq.n	8009de2 <osMutexNew+0x102>
 8009dd4:	697b      	ldr	r3, [r7, #20]
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d003      	beq.n	8009de2 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8009dda:	69fb      	ldr	r3, [r7, #28]
 8009ddc:	f043 0301 	orr.w	r3, r3, #1
 8009de0:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8009de2:	69fb      	ldr	r3, [r7, #28]
}
 8009de4:	4618      	mov	r0, r3
 8009de6:	3720      	adds	r7, #32
 8009de8:	46bd      	mov	sp, r7
 8009dea:	bd80      	pop	{r7, pc}

08009dec <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8009dec:	b580      	push	{r7, lr}
 8009dee:	b08a      	sub	sp, #40	; 0x28
 8009df0:	af02      	add	r7, sp, #8
 8009df2:	60f8      	str	r0, [r7, #12]
 8009df4:	60b9      	str	r1, [r7, #8]
 8009df6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8009df8:	2300      	movs	r3, #0
 8009dfa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009dfc:	f3ef 8305 	mrs	r3, IPSR
 8009e00:	613b      	str	r3, [r7, #16]
  return(result);
 8009e02:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d175      	bne.n	8009ef4 <osSemaphoreNew+0x108>
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d072      	beq.n	8009ef4 <osSemaphoreNew+0x108>
 8009e0e:	68ba      	ldr	r2, [r7, #8]
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	429a      	cmp	r2, r3
 8009e14:	d86e      	bhi.n	8009ef4 <osSemaphoreNew+0x108>
    mem = -1;
 8009e16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009e1a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d015      	beq.n	8009e4e <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	689b      	ldr	r3, [r3, #8]
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d006      	beq.n	8009e38 <osSemaphoreNew+0x4c>
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	68db      	ldr	r3, [r3, #12]
 8009e2e:	2b4f      	cmp	r3, #79	; 0x4f
 8009e30:	d902      	bls.n	8009e38 <osSemaphoreNew+0x4c>
        mem = 1;
 8009e32:	2301      	movs	r3, #1
 8009e34:	61bb      	str	r3, [r7, #24]
 8009e36:	e00c      	b.n	8009e52 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	689b      	ldr	r3, [r3, #8]
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d108      	bne.n	8009e52 <osSemaphoreNew+0x66>
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	68db      	ldr	r3, [r3, #12]
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d104      	bne.n	8009e52 <osSemaphoreNew+0x66>
          mem = 0;
 8009e48:	2300      	movs	r3, #0
 8009e4a:	61bb      	str	r3, [r7, #24]
 8009e4c:	e001      	b.n	8009e52 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8009e4e:	2300      	movs	r3, #0
 8009e50:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8009e52:	69bb      	ldr	r3, [r7, #24]
 8009e54:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009e58:	d04c      	beq.n	8009ef4 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	2b01      	cmp	r3, #1
 8009e5e:	d128      	bne.n	8009eb2 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8009e60:	69bb      	ldr	r3, [r7, #24]
 8009e62:	2b01      	cmp	r3, #1
 8009e64:	d10a      	bne.n	8009e7c <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	689b      	ldr	r3, [r3, #8]
 8009e6a:	2203      	movs	r2, #3
 8009e6c:	9200      	str	r2, [sp, #0]
 8009e6e:	2200      	movs	r2, #0
 8009e70:	2100      	movs	r1, #0
 8009e72:	2001      	movs	r0, #1
 8009e74:	f000 fb5c 	bl	800a530 <xQueueGenericCreateStatic>
 8009e78:	61f8      	str	r0, [r7, #28]
 8009e7a:	e005      	b.n	8009e88 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8009e7c:	2203      	movs	r2, #3
 8009e7e:	2100      	movs	r1, #0
 8009e80:	2001      	movs	r0, #1
 8009e82:	f000 fbcd 	bl	800a620 <xQueueGenericCreate>
 8009e86:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8009e88:	69fb      	ldr	r3, [r7, #28]
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d022      	beq.n	8009ed4 <osSemaphoreNew+0xe8>
 8009e8e:	68bb      	ldr	r3, [r7, #8]
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d01f      	beq.n	8009ed4 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8009e94:	2300      	movs	r3, #0
 8009e96:	2200      	movs	r2, #0
 8009e98:	2100      	movs	r1, #0
 8009e9a:	69f8      	ldr	r0, [r7, #28]
 8009e9c:	f000 fcd4 	bl	800a848 <xQueueGenericSend>
 8009ea0:	4603      	mov	r3, r0
 8009ea2:	2b01      	cmp	r3, #1
 8009ea4:	d016      	beq.n	8009ed4 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8009ea6:	69f8      	ldr	r0, [r7, #28]
 8009ea8:	f001 f960 	bl	800b16c <vQueueDelete>
            hSemaphore = NULL;
 8009eac:	2300      	movs	r3, #0
 8009eae:	61fb      	str	r3, [r7, #28]
 8009eb0:	e010      	b.n	8009ed4 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8009eb2:	69bb      	ldr	r3, [r7, #24]
 8009eb4:	2b01      	cmp	r3, #1
 8009eb6:	d108      	bne.n	8009eca <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	689b      	ldr	r3, [r3, #8]
 8009ebc:	461a      	mov	r2, r3
 8009ebe:	68b9      	ldr	r1, [r7, #8]
 8009ec0:	68f8      	ldr	r0, [r7, #12]
 8009ec2:	f000 fc57 	bl	800a774 <xQueueCreateCountingSemaphoreStatic>
 8009ec6:	61f8      	str	r0, [r7, #28]
 8009ec8:	e004      	b.n	8009ed4 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8009eca:	68b9      	ldr	r1, [r7, #8]
 8009ecc:	68f8      	ldr	r0, [r7, #12]
 8009ece:	f000 fc88 	bl	800a7e2 <xQueueCreateCountingSemaphore>
 8009ed2:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8009ed4:	69fb      	ldr	r3, [r7, #28]
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d00c      	beq.n	8009ef4 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d003      	beq.n	8009ee8 <osSemaphoreNew+0xfc>
          name = attr->name;
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	617b      	str	r3, [r7, #20]
 8009ee6:	e001      	b.n	8009eec <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8009ee8:	2300      	movs	r3, #0
 8009eea:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8009eec:	6979      	ldr	r1, [r7, #20]
 8009eee:	69f8      	ldr	r0, [r7, #28]
 8009ef0:	f001 fa88 	bl	800b404 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8009ef4:	69fb      	ldr	r3, [r7, #28]
}
 8009ef6:	4618      	mov	r0, r3
 8009ef8:	3720      	adds	r7, #32
 8009efa:	46bd      	mov	sp, r7
 8009efc:	bd80      	pop	{r7, pc}
	...

08009f00 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8009f00:	b580      	push	{r7, lr}
 8009f02:	b086      	sub	sp, #24
 8009f04:	af00      	add	r7, sp, #0
 8009f06:	6078      	str	r0, [r7, #4]
 8009f08:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8009f0e:	2300      	movs	r3, #0
 8009f10:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8009f12:	693b      	ldr	r3, [r7, #16]
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d103      	bne.n	8009f20 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8009f18:	f06f 0303 	mvn.w	r3, #3
 8009f1c:	617b      	str	r3, [r7, #20]
 8009f1e:	e039      	b.n	8009f94 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009f20:	f3ef 8305 	mrs	r3, IPSR
 8009f24:	60fb      	str	r3, [r7, #12]
  return(result);
 8009f26:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d022      	beq.n	8009f72 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8009f2c:	683b      	ldr	r3, [r7, #0]
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d003      	beq.n	8009f3a <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8009f32:	f06f 0303 	mvn.w	r3, #3
 8009f36:	617b      	str	r3, [r7, #20]
 8009f38:	e02c      	b.n	8009f94 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8009f3a:	2300      	movs	r3, #0
 8009f3c:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8009f3e:	f107 0308 	add.w	r3, r7, #8
 8009f42:	461a      	mov	r2, r3
 8009f44:	2100      	movs	r1, #0
 8009f46:	6938      	ldr	r0, [r7, #16]
 8009f48:	f001 f890 	bl	800b06c <xQueueReceiveFromISR>
 8009f4c:	4603      	mov	r3, r0
 8009f4e:	2b01      	cmp	r3, #1
 8009f50:	d003      	beq.n	8009f5a <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8009f52:	f06f 0302 	mvn.w	r3, #2
 8009f56:	617b      	str	r3, [r7, #20]
 8009f58:	e01c      	b.n	8009f94 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8009f5a:	68bb      	ldr	r3, [r7, #8]
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d019      	beq.n	8009f94 <osSemaphoreAcquire+0x94>
 8009f60:	4b0f      	ldr	r3, [pc, #60]	; (8009fa0 <osSemaphoreAcquire+0xa0>)
 8009f62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f66:	601a      	str	r2, [r3, #0]
 8009f68:	f3bf 8f4f 	dsb	sy
 8009f6c:	f3bf 8f6f 	isb	sy
 8009f70:	e010      	b.n	8009f94 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8009f72:	6839      	ldr	r1, [r7, #0]
 8009f74:	6938      	ldr	r0, [r7, #16]
 8009f76:	f000 ff6d 	bl	800ae54 <xQueueSemaphoreTake>
 8009f7a:	4603      	mov	r3, r0
 8009f7c:	2b01      	cmp	r3, #1
 8009f7e:	d009      	beq.n	8009f94 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8009f80:	683b      	ldr	r3, [r7, #0]
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d003      	beq.n	8009f8e <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8009f86:	f06f 0301 	mvn.w	r3, #1
 8009f8a:	617b      	str	r3, [r7, #20]
 8009f8c:	e002      	b.n	8009f94 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8009f8e:	f06f 0302 	mvn.w	r3, #2
 8009f92:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8009f94:	697b      	ldr	r3, [r7, #20]
}
 8009f96:	4618      	mov	r0, r3
 8009f98:	3718      	adds	r7, #24
 8009f9a:	46bd      	mov	sp, r7
 8009f9c:	bd80      	pop	{r7, pc}
 8009f9e:	bf00      	nop
 8009fa0:	e000ed04 	.word	0xe000ed04

08009fa4 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8009fa4:	b580      	push	{r7, lr}
 8009fa6:	b086      	sub	sp, #24
 8009fa8:	af00      	add	r7, sp, #0
 8009faa:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8009fb0:	2300      	movs	r3, #0
 8009fb2:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8009fb4:	693b      	ldr	r3, [r7, #16]
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d103      	bne.n	8009fc2 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8009fba:	f06f 0303 	mvn.w	r3, #3
 8009fbe:	617b      	str	r3, [r7, #20]
 8009fc0:	e02c      	b.n	800a01c <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009fc2:	f3ef 8305 	mrs	r3, IPSR
 8009fc6:	60fb      	str	r3, [r7, #12]
  return(result);
 8009fc8:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d01a      	beq.n	800a004 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8009fce:	2300      	movs	r3, #0
 8009fd0:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8009fd2:	f107 0308 	add.w	r3, r7, #8
 8009fd6:	4619      	mov	r1, r3
 8009fd8:	6938      	ldr	r0, [r7, #16]
 8009fda:	f000 fdce 	bl	800ab7a <xQueueGiveFromISR>
 8009fde:	4603      	mov	r3, r0
 8009fe0:	2b01      	cmp	r3, #1
 8009fe2:	d003      	beq.n	8009fec <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8009fe4:	f06f 0302 	mvn.w	r3, #2
 8009fe8:	617b      	str	r3, [r7, #20]
 8009fea:	e017      	b.n	800a01c <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8009fec:	68bb      	ldr	r3, [r7, #8]
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d014      	beq.n	800a01c <osSemaphoreRelease+0x78>
 8009ff2:	4b0d      	ldr	r3, [pc, #52]	; (800a028 <osSemaphoreRelease+0x84>)
 8009ff4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ff8:	601a      	str	r2, [r3, #0]
 8009ffa:	f3bf 8f4f 	dsb	sy
 8009ffe:	f3bf 8f6f 	isb	sy
 800a002:	e00b      	b.n	800a01c <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800a004:	2300      	movs	r3, #0
 800a006:	2200      	movs	r2, #0
 800a008:	2100      	movs	r1, #0
 800a00a:	6938      	ldr	r0, [r7, #16]
 800a00c:	f000 fc1c 	bl	800a848 <xQueueGenericSend>
 800a010:	4603      	mov	r3, r0
 800a012:	2b01      	cmp	r3, #1
 800a014:	d002      	beq.n	800a01c <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800a016:	f06f 0302 	mvn.w	r3, #2
 800a01a:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800a01c:	697b      	ldr	r3, [r7, #20]
}
 800a01e:	4618      	mov	r0, r3
 800a020:	3718      	adds	r7, #24
 800a022:	46bd      	mov	sp, r7
 800a024:	bd80      	pop	{r7, pc}
 800a026:	bf00      	nop
 800a028:	e000ed04 	.word	0xe000ed04

0800a02c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800a02c:	b580      	push	{r7, lr}
 800a02e:	b08a      	sub	sp, #40	; 0x28
 800a030:	af02      	add	r7, sp, #8
 800a032:	60f8      	str	r0, [r7, #12]
 800a034:	60b9      	str	r1, [r7, #8]
 800a036:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800a038:	2300      	movs	r3, #0
 800a03a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a03c:	f3ef 8305 	mrs	r3, IPSR
 800a040:	613b      	str	r3, [r7, #16]
  return(result);
 800a042:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800a044:	2b00      	cmp	r3, #0
 800a046:	d15f      	bne.n	800a108 <osMessageQueueNew+0xdc>
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d05c      	beq.n	800a108 <osMessageQueueNew+0xdc>
 800a04e:	68bb      	ldr	r3, [r7, #8]
 800a050:	2b00      	cmp	r3, #0
 800a052:	d059      	beq.n	800a108 <osMessageQueueNew+0xdc>
    mem = -1;
 800a054:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a058:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d029      	beq.n	800a0b4 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	689b      	ldr	r3, [r3, #8]
 800a064:	2b00      	cmp	r3, #0
 800a066:	d012      	beq.n	800a08e <osMessageQueueNew+0x62>
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	68db      	ldr	r3, [r3, #12]
 800a06c:	2b4f      	cmp	r3, #79	; 0x4f
 800a06e:	d90e      	bls.n	800a08e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800a074:	2b00      	cmp	r3, #0
 800a076:	d00a      	beq.n	800a08e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	695a      	ldr	r2, [r3, #20]
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	68b9      	ldr	r1, [r7, #8]
 800a080:	fb01 f303 	mul.w	r3, r1, r3
 800a084:	429a      	cmp	r2, r3
 800a086:	d302      	bcc.n	800a08e <osMessageQueueNew+0x62>
        mem = 1;
 800a088:	2301      	movs	r3, #1
 800a08a:	61bb      	str	r3, [r7, #24]
 800a08c:	e014      	b.n	800a0b8 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	689b      	ldr	r3, [r3, #8]
 800a092:	2b00      	cmp	r3, #0
 800a094:	d110      	bne.n	800a0b8 <osMessageQueueNew+0x8c>
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	68db      	ldr	r3, [r3, #12]
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d10c      	bne.n	800a0b8 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d108      	bne.n	800a0b8 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	695b      	ldr	r3, [r3, #20]
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d104      	bne.n	800a0b8 <osMessageQueueNew+0x8c>
          mem = 0;
 800a0ae:	2300      	movs	r3, #0
 800a0b0:	61bb      	str	r3, [r7, #24]
 800a0b2:	e001      	b.n	800a0b8 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800a0b4:	2300      	movs	r3, #0
 800a0b6:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800a0b8:	69bb      	ldr	r3, [r7, #24]
 800a0ba:	2b01      	cmp	r3, #1
 800a0bc:	d10b      	bne.n	800a0d6 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	691a      	ldr	r2, [r3, #16]
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	689b      	ldr	r3, [r3, #8]
 800a0c6:	2100      	movs	r1, #0
 800a0c8:	9100      	str	r1, [sp, #0]
 800a0ca:	68b9      	ldr	r1, [r7, #8]
 800a0cc:	68f8      	ldr	r0, [r7, #12]
 800a0ce:	f000 fa2f 	bl	800a530 <xQueueGenericCreateStatic>
 800a0d2:	61f8      	str	r0, [r7, #28]
 800a0d4:	e008      	b.n	800a0e8 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800a0d6:	69bb      	ldr	r3, [r7, #24]
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d105      	bne.n	800a0e8 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800a0dc:	2200      	movs	r2, #0
 800a0de:	68b9      	ldr	r1, [r7, #8]
 800a0e0:	68f8      	ldr	r0, [r7, #12]
 800a0e2:	f000 fa9d 	bl	800a620 <xQueueGenericCreate>
 800a0e6:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800a0e8:	69fb      	ldr	r3, [r7, #28]
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d00c      	beq.n	800a108 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d003      	beq.n	800a0fc <osMessageQueueNew+0xd0>
        name = attr->name;
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	617b      	str	r3, [r7, #20]
 800a0fa:	e001      	b.n	800a100 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800a0fc:	2300      	movs	r3, #0
 800a0fe:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800a100:	6979      	ldr	r1, [r7, #20]
 800a102:	69f8      	ldr	r0, [r7, #28]
 800a104:	f001 f97e 	bl	800b404 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800a108:	69fb      	ldr	r3, [r7, #28]
}
 800a10a:	4618      	mov	r0, r3
 800a10c:	3720      	adds	r7, #32
 800a10e:	46bd      	mov	sp, r7
 800a110:	bd80      	pop	{r7, pc}
	...

0800a114 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800a114:	b580      	push	{r7, lr}
 800a116:	b088      	sub	sp, #32
 800a118:	af00      	add	r7, sp, #0
 800a11a:	60f8      	str	r0, [r7, #12]
 800a11c:	60b9      	str	r1, [r7, #8]
 800a11e:	603b      	str	r3, [r7, #0]
 800a120:	4613      	mov	r3, r2
 800a122:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800a128:	2300      	movs	r3, #0
 800a12a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a12c:	f3ef 8305 	mrs	r3, IPSR
 800a130:	617b      	str	r3, [r7, #20]
  return(result);
 800a132:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800a134:	2b00      	cmp	r3, #0
 800a136:	d028      	beq.n	800a18a <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800a138:	69bb      	ldr	r3, [r7, #24]
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d005      	beq.n	800a14a <osMessageQueuePut+0x36>
 800a13e:	68bb      	ldr	r3, [r7, #8]
 800a140:	2b00      	cmp	r3, #0
 800a142:	d002      	beq.n	800a14a <osMessageQueuePut+0x36>
 800a144:	683b      	ldr	r3, [r7, #0]
 800a146:	2b00      	cmp	r3, #0
 800a148:	d003      	beq.n	800a152 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800a14a:	f06f 0303 	mvn.w	r3, #3
 800a14e:	61fb      	str	r3, [r7, #28]
 800a150:	e038      	b.n	800a1c4 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800a152:	2300      	movs	r3, #0
 800a154:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800a156:	f107 0210 	add.w	r2, r7, #16
 800a15a:	2300      	movs	r3, #0
 800a15c:	68b9      	ldr	r1, [r7, #8]
 800a15e:	69b8      	ldr	r0, [r7, #24]
 800a160:	f000 fc70 	bl	800aa44 <xQueueGenericSendFromISR>
 800a164:	4603      	mov	r3, r0
 800a166:	2b01      	cmp	r3, #1
 800a168:	d003      	beq.n	800a172 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800a16a:	f06f 0302 	mvn.w	r3, #2
 800a16e:	61fb      	str	r3, [r7, #28]
 800a170:	e028      	b.n	800a1c4 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800a172:	693b      	ldr	r3, [r7, #16]
 800a174:	2b00      	cmp	r3, #0
 800a176:	d025      	beq.n	800a1c4 <osMessageQueuePut+0xb0>
 800a178:	4b15      	ldr	r3, [pc, #84]	; (800a1d0 <osMessageQueuePut+0xbc>)
 800a17a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a17e:	601a      	str	r2, [r3, #0]
 800a180:	f3bf 8f4f 	dsb	sy
 800a184:	f3bf 8f6f 	isb	sy
 800a188:	e01c      	b.n	800a1c4 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800a18a:	69bb      	ldr	r3, [r7, #24]
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d002      	beq.n	800a196 <osMessageQueuePut+0x82>
 800a190:	68bb      	ldr	r3, [r7, #8]
 800a192:	2b00      	cmp	r3, #0
 800a194:	d103      	bne.n	800a19e <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800a196:	f06f 0303 	mvn.w	r3, #3
 800a19a:	61fb      	str	r3, [r7, #28]
 800a19c:	e012      	b.n	800a1c4 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800a19e:	2300      	movs	r3, #0
 800a1a0:	683a      	ldr	r2, [r7, #0]
 800a1a2:	68b9      	ldr	r1, [r7, #8]
 800a1a4:	69b8      	ldr	r0, [r7, #24]
 800a1a6:	f000 fb4f 	bl	800a848 <xQueueGenericSend>
 800a1aa:	4603      	mov	r3, r0
 800a1ac:	2b01      	cmp	r3, #1
 800a1ae:	d009      	beq.n	800a1c4 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800a1b0:	683b      	ldr	r3, [r7, #0]
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d003      	beq.n	800a1be <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800a1b6:	f06f 0301 	mvn.w	r3, #1
 800a1ba:	61fb      	str	r3, [r7, #28]
 800a1bc:	e002      	b.n	800a1c4 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800a1be:	f06f 0302 	mvn.w	r3, #2
 800a1c2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800a1c4:	69fb      	ldr	r3, [r7, #28]
}
 800a1c6:	4618      	mov	r0, r3
 800a1c8:	3720      	adds	r7, #32
 800a1ca:	46bd      	mov	sp, r7
 800a1cc:	bd80      	pop	{r7, pc}
 800a1ce:	bf00      	nop
 800a1d0:	e000ed04 	.word	0xe000ed04

0800a1d4 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800a1d4:	b580      	push	{r7, lr}
 800a1d6:	b088      	sub	sp, #32
 800a1d8:	af00      	add	r7, sp, #0
 800a1da:	60f8      	str	r0, [r7, #12]
 800a1dc:	60b9      	str	r1, [r7, #8]
 800a1de:	607a      	str	r2, [r7, #4]
 800a1e0:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800a1e6:	2300      	movs	r3, #0
 800a1e8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a1ea:	f3ef 8305 	mrs	r3, IPSR
 800a1ee:	617b      	str	r3, [r7, #20]
  return(result);
 800a1f0:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d028      	beq.n	800a248 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800a1f6:	69bb      	ldr	r3, [r7, #24]
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d005      	beq.n	800a208 <osMessageQueueGet+0x34>
 800a1fc:	68bb      	ldr	r3, [r7, #8]
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d002      	beq.n	800a208 <osMessageQueueGet+0x34>
 800a202:	683b      	ldr	r3, [r7, #0]
 800a204:	2b00      	cmp	r3, #0
 800a206:	d003      	beq.n	800a210 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800a208:	f06f 0303 	mvn.w	r3, #3
 800a20c:	61fb      	str	r3, [r7, #28]
 800a20e:	e037      	b.n	800a280 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800a210:	2300      	movs	r3, #0
 800a212:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800a214:	f107 0310 	add.w	r3, r7, #16
 800a218:	461a      	mov	r2, r3
 800a21a:	68b9      	ldr	r1, [r7, #8]
 800a21c:	69b8      	ldr	r0, [r7, #24]
 800a21e:	f000 ff25 	bl	800b06c <xQueueReceiveFromISR>
 800a222:	4603      	mov	r3, r0
 800a224:	2b01      	cmp	r3, #1
 800a226:	d003      	beq.n	800a230 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800a228:	f06f 0302 	mvn.w	r3, #2
 800a22c:	61fb      	str	r3, [r7, #28]
 800a22e:	e027      	b.n	800a280 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800a230:	693b      	ldr	r3, [r7, #16]
 800a232:	2b00      	cmp	r3, #0
 800a234:	d024      	beq.n	800a280 <osMessageQueueGet+0xac>
 800a236:	4b15      	ldr	r3, [pc, #84]	; (800a28c <osMessageQueueGet+0xb8>)
 800a238:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a23c:	601a      	str	r2, [r3, #0]
 800a23e:	f3bf 8f4f 	dsb	sy
 800a242:	f3bf 8f6f 	isb	sy
 800a246:	e01b      	b.n	800a280 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800a248:	69bb      	ldr	r3, [r7, #24]
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d002      	beq.n	800a254 <osMessageQueueGet+0x80>
 800a24e:	68bb      	ldr	r3, [r7, #8]
 800a250:	2b00      	cmp	r3, #0
 800a252:	d103      	bne.n	800a25c <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800a254:	f06f 0303 	mvn.w	r3, #3
 800a258:	61fb      	str	r3, [r7, #28]
 800a25a:	e011      	b.n	800a280 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800a25c:	683a      	ldr	r2, [r7, #0]
 800a25e:	68b9      	ldr	r1, [r7, #8]
 800a260:	69b8      	ldr	r0, [r7, #24]
 800a262:	f000 fd17 	bl	800ac94 <xQueueReceive>
 800a266:	4603      	mov	r3, r0
 800a268:	2b01      	cmp	r3, #1
 800a26a:	d009      	beq.n	800a280 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800a26c:	683b      	ldr	r3, [r7, #0]
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d003      	beq.n	800a27a <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800a272:	f06f 0301 	mvn.w	r3, #1
 800a276:	61fb      	str	r3, [r7, #28]
 800a278:	e002      	b.n	800a280 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800a27a:	f06f 0302 	mvn.w	r3, #2
 800a27e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800a280:	69fb      	ldr	r3, [r7, #28]
}
 800a282:	4618      	mov	r0, r3
 800a284:	3720      	adds	r7, #32
 800a286:	46bd      	mov	sp, r7
 800a288:	bd80      	pop	{r7, pc}
 800a28a:	bf00      	nop
 800a28c:	e000ed04 	.word	0xe000ed04

0800a290 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a290:	b480      	push	{r7}
 800a292:	b085      	sub	sp, #20
 800a294:	af00      	add	r7, sp, #0
 800a296:	60f8      	str	r0, [r7, #12]
 800a298:	60b9      	str	r1, [r7, #8]
 800a29a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	4a07      	ldr	r2, [pc, #28]	; (800a2bc <vApplicationGetIdleTaskMemory+0x2c>)
 800a2a0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a2a2:	68bb      	ldr	r3, [r7, #8]
 800a2a4:	4a06      	ldr	r2, [pc, #24]	; (800a2c0 <vApplicationGetIdleTaskMemory+0x30>)
 800a2a6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	2280      	movs	r2, #128	; 0x80
 800a2ac:	601a      	str	r2, [r3, #0]
}
 800a2ae:	bf00      	nop
 800a2b0:	3714      	adds	r7, #20
 800a2b2:	46bd      	mov	sp, r7
 800a2b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b8:	4770      	bx	lr
 800a2ba:	bf00      	nop
 800a2bc:	20000448 	.word	0x20000448
 800a2c0:	20000504 	.word	0x20000504

0800a2c4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a2c4:	b480      	push	{r7}
 800a2c6:	b085      	sub	sp, #20
 800a2c8:	af00      	add	r7, sp, #0
 800a2ca:	60f8      	str	r0, [r7, #12]
 800a2cc:	60b9      	str	r1, [r7, #8]
 800a2ce:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	4a07      	ldr	r2, [pc, #28]	; (800a2f0 <vApplicationGetTimerTaskMemory+0x2c>)
 800a2d4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a2d6:	68bb      	ldr	r3, [r7, #8]
 800a2d8:	4a06      	ldr	r2, [pc, #24]	; (800a2f4 <vApplicationGetTimerTaskMemory+0x30>)
 800a2da:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a2e2:	601a      	str	r2, [r3, #0]
}
 800a2e4:	bf00      	nop
 800a2e6:	3714      	adds	r7, #20
 800a2e8:	46bd      	mov	sp, r7
 800a2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ee:	4770      	bx	lr
 800a2f0:	20000704 	.word	0x20000704
 800a2f4:	200007c0 	.word	0x200007c0

0800a2f8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a2f8:	b480      	push	{r7}
 800a2fa:	b083      	sub	sp, #12
 800a2fc:	af00      	add	r7, sp, #0
 800a2fe:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	f103 0208 	add.w	r2, r3, #8
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a310:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	f103 0208 	add.w	r2, r3, #8
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	f103 0208 	add.w	r2, r3, #8
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	2200      	movs	r2, #0
 800a32a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a32c:	bf00      	nop
 800a32e:	370c      	adds	r7, #12
 800a330:	46bd      	mov	sp, r7
 800a332:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a336:	4770      	bx	lr

0800a338 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a338:	b480      	push	{r7}
 800a33a:	b083      	sub	sp, #12
 800a33c:	af00      	add	r7, sp, #0
 800a33e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	2200      	movs	r2, #0
 800a344:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a346:	bf00      	nop
 800a348:	370c      	adds	r7, #12
 800a34a:	46bd      	mov	sp, r7
 800a34c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a350:	4770      	bx	lr

0800a352 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a352:	b480      	push	{r7}
 800a354:	b085      	sub	sp, #20
 800a356:	af00      	add	r7, sp, #0
 800a358:	6078      	str	r0, [r7, #4]
 800a35a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	685b      	ldr	r3, [r3, #4]
 800a360:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a362:	683b      	ldr	r3, [r7, #0]
 800a364:	68fa      	ldr	r2, [r7, #12]
 800a366:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	689a      	ldr	r2, [r3, #8]
 800a36c:	683b      	ldr	r3, [r7, #0]
 800a36e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	689b      	ldr	r3, [r3, #8]
 800a374:	683a      	ldr	r2, [r7, #0]
 800a376:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	683a      	ldr	r2, [r7, #0]
 800a37c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a37e:	683b      	ldr	r3, [r7, #0]
 800a380:	687a      	ldr	r2, [r7, #4]
 800a382:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	1c5a      	adds	r2, r3, #1
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	601a      	str	r2, [r3, #0]
}
 800a38e:	bf00      	nop
 800a390:	3714      	adds	r7, #20
 800a392:	46bd      	mov	sp, r7
 800a394:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a398:	4770      	bx	lr

0800a39a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a39a:	b480      	push	{r7}
 800a39c:	b085      	sub	sp, #20
 800a39e:	af00      	add	r7, sp, #0
 800a3a0:	6078      	str	r0, [r7, #4]
 800a3a2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a3a4:	683b      	ldr	r3, [r7, #0]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a3aa:	68bb      	ldr	r3, [r7, #8]
 800a3ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a3b0:	d103      	bne.n	800a3ba <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	691b      	ldr	r3, [r3, #16]
 800a3b6:	60fb      	str	r3, [r7, #12]
 800a3b8:	e00c      	b.n	800a3d4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	3308      	adds	r3, #8
 800a3be:	60fb      	str	r3, [r7, #12]
 800a3c0:	e002      	b.n	800a3c8 <vListInsert+0x2e>
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	685b      	ldr	r3, [r3, #4]
 800a3c6:	60fb      	str	r3, [r7, #12]
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	685b      	ldr	r3, [r3, #4]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	68ba      	ldr	r2, [r7, #8]
 800a3d0:	429a      	cmp	r2, r3
 800a3d2:	d2f6      	bcs.n	800a3c2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	685a      	ldr	r2, [r3, #4]
 800a3d8:	683b      	ldr	r3, [r7, #0]
 800a3da:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a3dc:	683b      	ldr	r3, [r7, #0]
 800a3de:	685b      	ldr	r3, [r3, #4]
 800a3e0:	683a      	ldr	r2, [r7, #0]
 800a3e2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a3e4:	683b      	ldr	r3, [r7, #0]
 800a3e6:	68fa      	ldr	r2, [r7, #12]
 800a3e8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	683a      	ldr	r2, [r7, #0]
 800a3ee:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a3f0:	683b      	ldr	r3, [r7, #0]
 800a3f2:	687a      	ldr	r2, [r7, #4]
 800a3f4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	1c5a      	adds	r2, r3, #1
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	601a      	str	r2, [r3, #0]
}
 800a400:	bf00      	nop
 800a402:	3714      	adds	r7, #20
 800a404:	46bd      	mov	sp, r7
 800a406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a40a:	4770      	bx	lr

0800a40c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a40c:	b480      	push	{r7}
 800a40e:	b085      	sub	sp, #20
 800a410:	af00      	add	r7, sp, #0
 800a412:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	691b      	ldr	r3, [r3, #16]
 800a418:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	685b      	ldr	r3, [r3, #4]
 800a41e:	687a      	ldr	r2, [r7, #4]
 800a420:	6892      	ldr	r2, [r2, #8]
 800a422:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	689b      	ldr	r3, [r3, #8]
 800a428:	687a      	ldr	r2, [r7, #4]
 800a42a:	6852      	ldr	r2, [r2, #4]
 800a42c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	685b      	ldr	r3, [r3, #4]
 800a432:	687a      	ldr	r2, [r7, #4]
 800a434:	429a      	cmp	r2, r3
 800a436:	d103      	bne.n	800a440 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	689a      	ldr	r2, [r3, #8]
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	2200      	movs	r2, #0
 800a444:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	1e5a      	subs	r2, r3, #1
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	681b      	ldr	r3, [r3, #0]
}
 800a454:	4618      	mov	r0, r3
 800a456:	3714      	adds	r7, #20
 800a458:	46bd      	mov	sp, r7
 800a45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a45e:	4770      	bx	lr

0800a460 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a460:	b580      	push	{r7, lr}
 800a462:	b084      	sub	sp, #16
 800a464:	af00      	add	r7, sp, #0
 800a466:	6078      	str	r0, [r7, #4]
 800a468:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	2b00      	cmp	r3, #0
 800a472:	d10a      	bne.n	800a48a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a474:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a478:	f383 8811 	msr	BASEPRI, r3
 800a47c:	f3bf 8f6f 	isb	sy
 800a480:	f3bf 8f4f 	dsb	sy
 800a484:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a486:	bf00      	nop
 800a488:	e7fe      	b.n	800a488 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a48a:	f002 fcf3 	bl	800ce74 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	681a      	ldr	r2, [r3, #0]
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a496:	68f9      	ldr	r1, [r7, #12]
 800a498:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a49a:	fb01 f303 	mul.w	r3, r1, r3
 800a49e:	441a      	add	r2, r3
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	2200      	movs	r2, #0
 800a4a8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	681a      	ldr	r2, [r3, #0]
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	681a      	ldr	r2, [r3, #0]
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4ba:	3b01      	subs	r3, #1
 800a4bc:	68f9      	ldr	r1, [r7, #12]
 800a4be:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a4c0:	fb01 f303 	mul.w	r3, r1, r3
 800a4c4:	441a      	add	r2, r3
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	22ff      	movs	r2, #255	; 0xff
 800a4ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	22ff      	movs	r2, #255	; 0xff
 800a4d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800a4da:	683b      	ldr	r3, [r7, #0]
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d114      	bne.n	800a50a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	691b      	ldr	r3, [r3, #16]
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d01a      	beq.n	800a51e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	3310      	adds	r3, #16
 800a4ec:	4618      	mov	r0, r3
 800a4ee:	f001 fca9 	bl	800be44 <xTaskRemoveFromEventList>
 800a4f2:	4603      	mov	r3, r0
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d012      	beq.n	800a51e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a4f8:	4b0c      	ldr	r3, [pc, #48]	; (800a52c <xQueueGenericReset+0xcc>)
 800a4fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a4fe:	601a      	str	r2, [r3, #0]
 800a500:	f3bf 8f4f 	dsb	sy
 800a504:	f3bf 8f6f 	isb	sy
 800a508:	e009      	b.n	800a51e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	3310      	adds	r3, #16
 800a50e:	4618      	mov	r0, r3
 800a510:	f7ff fef2 	bl	800a2f8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	3324      	adds	r3, #36	; 0x24
 800a518:	4618      	mov	r0, r3
 800a51a:	f7ff feed 	bl	800a2f8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a51e:	f002 fcd9 	bl	800ced4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a522:	2301      	movs	r3, #1
}
 800a524:	4618      	mov	r0, r3
 800a526:	3710      	adds	r7, #16
 800a528:	46bd      	mov	sp, r7
 800a52a:	bd80      	pop	{r7, pc}
 800a52c:	e000ed04 	.word	0xe000ed04

0800a530 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a530:	b580      	push	{r7, lr}
 800a532:	b08e      	sub	sp, #56	; 0x38
 800a534:	af02      	add	r7, sp, #8
 800a536:	60f8      	str	r0, [r7, #12]
 800a538:	60b9      	str	r1, [r7, #8]
 800a53a:	607a      	str	r2, [r7, #4]
 800a53c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	2b00      	cmp	r3, #0
 800a542:	d10a      	bne.n	800a55a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800a544:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a548:	f383 8811 	msr	BASEPRI, r3
 800a54c:	f3bf 8f6f 	isb	sy
 800a550:	f3bf 8f4f 	dsb	sy
 800a554:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a556:	bf00      	nop
 800a558:	e7fe      	b.n	800a558 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a55a:	683b      	ldr	r3, [r7, #0]
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d10a      	bne.n	800a576 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800a560:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a564:	f383 8811 	msr	BASEPRI, r3
 800a568:	f3bf 8f6f 	isb	sy
 800a56c:	f3bf 8f4f 	dsb	sy
 800a570:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a572:	bf00      	nop
 800a574:	e7fe      	b.n	800a574 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d002      	beq.n	800a582 <xQueueGenericCreateStatic+0x52>
 800a57c:	68bb      	ldr	r3, [r7, #8]
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d001      	beq.n	800a586 <xQueueGenericCreateStatic+0x56>
 800a582:	2301      	movs	r3, #1
 800a584:	e000      	b.n	800a588 <xQueueGenericCreateStatic+0x58>
 800a586:	2300      	movs	r3, #0
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d10a      	bne.n	800a5a2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800a58c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a590:	f383 8811 	msr	BASEPRI, r3
 800a594:	f3bf 8f6f 	isb	sy
 800a598:	f3bf 8f4f 	dsb	sy
 800a59c:	623b      	str	r3, [r7, #32]
}
 800a59e:	bf00      	nop
 800a5a0:	e7fe      	b.n	800a5a0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d102      	bne.n	800a5ae <xQueueGenericCreateStatic+0x7e>
 800a5a8:	68bb      	ldr	r3, [r7, #8]
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d101      	bne.n	800a5b2 <xQueueGenericCreateStatic+0x82>
 800a5ae:	2301      	movs	r3, #1
 800a5b0:	e000      	b.n	800a5b4 <xQueueGenericCreateStatic+0x84>
 800a5b2:	2300      	movs	r3, #0
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d10a      	bne.n	800a5ce <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800a5b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5bc:	f383 8811 	msr	BASEPRI, r3
 800a5c0:	f3bf 8f6f 	isb	sy
 800a5c4:	f3bf 8f4f 	dsb	sy
 800a5c8:	61fb      	str	r3, [r7, #28]
}
 800a5ca:	bf00      	nop
 800a5cc:	e7fe      	b.n	800a5cc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a5ce:	2350      	movs	r3, #80	; 0x50
 800a5d0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a5d2:	697b      	ldr	r3, [r7, #20]
 800a5d4:	2b50      	cmp	r3, #80	; 0x50
 800a5d6:	d00a      	beq.n	800a5ee <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800a5d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5dc:	f383 8811 	msr	BASEPRI, r3
 800a5e0:	f3bf 8f6f 	isb	sy
 800a5e4:	f3bf 8f4f 	dsb	sy
 800a5e8:	61bb      	str	r3, [r7, #24]
}
 800a5ea:	bf00      	nop
 800a5ec:	e7fe      	b.n	800a5ec <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a5ee:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a5f0:	683b      	ldr	r3, [r7, #0]
 800a5f2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800a5f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d00d      	beq.n	800a616 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a5fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5fc:	2201      	movs	r2, #1
 800a5fe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a602:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a608:	9300      	str	r3, [sp, #0]
 800a60a:	4613      	mov	r3, r2
 800a60c:	687a      	ldr	r2, [r7, #4]
 800a60e:	68b9      	ldr	r1, [r7, #8]
 800a610:	68f8      	ldr	r0, [r7, #12]
 800a612:	f000 f83f 	bl	800a694 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a616:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a618:	4618      	mov	r0, r3
 800a61a:	3730      	adds	r7, #48	; 0x30
 800a61c:	46bd      	mov	sp, r7
 800a61e:	bd80      	pop	{r7, pc}

0800a620 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a620:	b580      	push	{r7, lr}
 800a622:	b08a      	sub	sp, #40	; 0x28
 800a624:	af02      	add	r7, sp, #8
 800a626:	60f8      	str	r0, [r7, #12]
 800a628:	60b9      	str	r1, [r7, #8]
 800a62a:	4613      	mov	r3, r2
 800a62c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	2b00      	cmp	r3, #0
 800a632:	d10a      	bne.n	800a64a <xQueueGenericCreate+0x2a>
	__asm volatile
 800a634:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a638:	f383 8811 	msr	BASEPRI, r3
 800a63c:	f3bf 8f6f 	isb	sy
 800a640:	f3bf 8f4f 	dsb	sy
 800a644:	613b      	str	r3, [r7, #16]
}
 800a646:	bf00      	nop
 800a648:	e7fe      	b.n	800a648 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	68ba      	ldr	r2, [r7, #8]
 800a64e:	fb02 f303 	mul.w	r3, r2, r3
 800a652:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800a654:	69fb      	ldr	r3, [r7, #28]
 800a656:	3350      	adds	r3, #80	; 0x50
 800a658:	4618      	mov	r0, r3
 800a65a:	f002 fd2d 	bl	800d0b8 <pvPortMalloc>
 800a65e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a660:	69bb      	ldr	r3, [r7, #24]
 800a662:	2b00      	cmp	r3, #0
 800a664:	d011      	beq.n	800a68a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800a666:	69bb      	ldr	r3, [r7, #24]
 800a668:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a66a:	697b      	ldr	r3, [r7, #20]
 800a66c:	3350      	adds	r3, #80	; 0x50
 800a66e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a670:	69bb      	ldr	r3, [r7, #24]
 800a672:	2200      	movs	r2, #0
 800a674:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a678:	79fa      	ldrb	r2, [r7, #7]
 800a67a:	69bb      	ldr	r3, [r7, #24]
 800a67c:	9300      	str	r3, [sp, #0]
 800a67e:	4613      	mov	r3, r2
 800a680:	697a      	ldr	r2, [r7, #20]
 800a682:	68b9      	ldr	r1, [r7, #8]
 800a684:	68f8      	ldr	r0, [r7, #12]
 800a686:	f000 f805 	bl	800a694 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a68a:	69bb      	ldr	r3, [r7, #24]
	}
 800a68c:	4618      	mov	r0, r3
 800a68e:	3720      	adds	r7, #32
 800a690:	46bd      	mov	sp, r7
 800a692:	bd80      	pop	{r7, pc}

0800a694 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a694:	b580      	push	{r7, lr}
 800a696:	b084      	sub	sp, #16
 800a698:	af00      	add	r7, sp, #0
 800a69a:	60f8      	str	r0, [r7, #12]
 800a69c:	60b9      	str	r1, [r7, #8]
 800a69e:	607a      	str	r2, [r7, #4]
 800a6a0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a6a2:	68bb      	ldr	r3, [r7, #8]
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d103      	bne.n	800a6b0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a6a8:	69bb      	ldr	r3, [r7, #24]
 800a6aa:	69ba      	ldr	r2, [r7, #24]
 800a6ac:	601a      	str	r2, [r3, #0]
 800a6ae:	e002      	b.n	800a6b6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a6b0:	69bb      	ldr	r3, [r7, #24]
 800a6b2:	687a      	ldr	r2, [r7, #4]
 800a6b4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a6b6:	69bb      	ldr	r3, [r7, #24]
 800a6b8:	68fa      	ldr	r2, [r7, #12]
 800a6ba:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a6bc:	69bb      	ldr	r3, [r7, #24]
 800a6be:	68ba      	ldr	r2, [r7, #8]
 800a6c0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a6c2:	2101      	movs	r1, #1
 800a6c4:	69b8      	ldr	r0, [r7, #24]
 800a6c6:	f7ff fecb 	bl	800a460 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a6ca:	69bb      	ldr	r3, [r7, #24]
 800a6cc:	78fa      	ldrb	r2, [r7, #3]
 800a6ce:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a6d2:	bf00      	nop
 800a6d4:	3710      	adds	r7, #16
 800a6d6:	46bd      	mov	sp, r7
 800a6d8:	bd80      	pop	{r7, pc}

0800a6da <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800a6da:	b580      	push	{r7, lr}
 800a6dc:	b082      	sub	sp, #8
 800a6de:	af00      	add	r7, sp, #0
 800a6e0:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d00e      	beq.n	800a706 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	2200      	movs	r2, #0
 800a6ec:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	2200      	movs	r2, #0
 800a6f2:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	2200      	movs	r2, #0
 800a6f8:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800a6fa:	2300      	movs	r3, #0
 800a6fc:	2200      	movs	r2, #0
 800a6fe:	2100      	movs	r1, #0
 800a700:	6878      	ldr	r0, [r7, #4]
 800a702:	f000 f8a1 	bl	800a848 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800a706:	bf00      	nop
 800a708:	3708      	adds	r7, #8
 800a70a:	46bd      	mov	sp, r7
 800a70c:	bd80      	pop	{r7, pc}

0800a70e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800a70e:	b580      	push	{r7, lr}
 800a710:	b086      	sub	sp, #24
 800a712:	af00      	add	r7, sp, #0
 800a714:	4603      	mov	r3, r0
 800a716:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800a718:	2301      	movs	r3, #1
 800a71a:	617b      	str	r3, [r7, #20]
 800a71c:	2300      	movs	r3, #0
 800a71e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800a720:	79fb      	ldrb	r3, [r7, #7]
 800a722:	461a      	mov	r2, r3
 800a724:	6939      	ldr	r1, [r7, #16]
 800a726:	6978      	ldr	r0, [r7, #20]
 800a728:	f7ff ff7a 	bl	800a620 <xQueueGenericCreate>
 800a72c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800a72e:	68f8      	ldr	r0, [r7, #12]
 800a730:	f7ff ffd3 	bl	800a6da <prvInitialiseMutex>

		return xNewQueue;
 800a734:	68fb      	ldr	r3, [r7, #12]
	}
 800a736:	4618      	mov	r0, r3
 800a738:	3718      	adds	r7, #24
 800a73a:	46bd      	mov	sp, r7
 800a73c:	bd80      	pop	{r7, pc}

0800a73e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800a73e:	b580      	push	{r7, lr}
 800a740:	b088      	sub	sp, #32
 800a742:	af02      	add	r7, sp, #8
 800a744:	4603      	mov	r3, r0
 800a746:	6039      	str	r1, [r7, #0]
 800a748:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800a74a:	2301      	movs	r3, #1
 800a74c:	617b      	str	r3, [r7, #20]
 800a74e:	2300      	movs	r3, #0
 800a750:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800a752:	79fb      	ldrb	r3, [r7, #7]
 800a754:	9300      	str	r3, [sp, #0]
 800a756:	683b      	ldr	r3, [r7, #0]
 800a758:	2200      	movs	r2, #0
 800a75a:	6939      	ldr	r1, [r7, #16]
 800a75c:	6978      	ldr	r0, [r7, #20]
 800a75e:	f7ff fee7 	bl	800a530 <xQueueGenericCreateStatic>
 800a762:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800a764:	68f8      	ldr	r0, [r7, #12]
 800a766:	f7ff ffb8 	bl	800a6da <prvInitialiseMutex>

		return xNewQueue;
 800a76a:	68fb      	ldr	r3, [r7, #12]
	}
 800a76c:	4618      	mov	r0, r3
 800a76e:	3718      	adds	r7, #24
 800a770:	46bd      	mov	sp, r7
 800a772:	bd80      	pop	{r7, pc}

0800a774 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800a774:	b580      	push	{r7, lr}
 800a776:	b08a      	sub	sp, #40	; 0x28
 800a778:	af02      	add	r7, sp, #8
 800a77a:	60f8      	str	r0, [r7, #12]
 800a77c:	60b9      	str	r1, [r7, #8]
 800a77e:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	2b00      	cmp	r3, #0
 800a784:	d10a      	bne.n	800a79c <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800a786:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a78a:	f383 8811 	msr	BASEPRI, r3
 800a78e:	f3bf 8f6f 	isb	sy
 800a792:	f3bf 8f4f 	dsb	sy
 800a796:	61bb      	str	r3, [r7, #24]
}
 800a798:	bf00      	nop
 800a79a:	e7fe      	b.n	800a79a <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800a79c:	68ba      	ldr	r2, [r7, #8]
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	429a      	cmp	r2, r3
 800a7a2:	d90a      	bls.n	800a7ba <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800a7a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7a8:	f383 8811 	msr	BASEPRI, r3
 800a7ac:	f3bf 8f6f 	isb	sy
 800a7b0:	f3bf 8f4f 	dsb	sy
 800a7b4:	617b      	str	r3, [r7, #20]
}
 800a7b6:	bf00      	nop
 800a7b8:	e7fe      	b.n	800a7b8 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800a7ba:	2302      	movs	r3, #2
 800a7bc:	9300      	str	r3, [sp, #0]
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	2200      	movs	r2, #0
 800a7c2:	2100      	movs	r1, #0
 800a7c4:	68f8      	ldr	r0, [r7, #12]
 800a7c6:	f7ff feb3 	bl	800a530 <xQueueGenericCreateStatic>
 800a7ca:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800a7cc:	69fb      	ldr	r3, [r7, #28]
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d002      	beq.n	800a7d8 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800a7d2:	69fb      	ldr	r3, [r7, #28]
 800a7d4:	68ba      	ldr	r2, [r7, #8]
 800a7d6:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800a7d8:	69fb      	ldr	r3, [r7, #28]
	}
 800a7da:	4618      	mov	r0, r3
 800a7dc:	3720      	adds	r7, #32
 800a7de:	46bd      	mov	sp, r7
 800a7e0:	bd80      	pop	{r7, pc}

0800a7e2 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800a7e2:	b580      	push	{r7, lr}
 800a7e4:	b086      	sub	sp, #24
 800a7e6:	af00      	add	r7, sp, #0
 800a7e8:	6078      	str	r0, [r7, #4]
 800a7ea:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d10a      	bne.n	800a808 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800a7f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7f6:	f383 8811 	msr	BASEPRI, r3
 800a7fa:	f3bf 8f6f 	isb	sy
 800a7fe:	f3bf 8f4f 	dsb	sy
 800a802:	613b      	str	r3, [r7, #16]
}
 800a804:	bf00      	nop
 800a806:	e7fe      	b.n	800a806 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800a808:	683a      	ldr	r2, [r7, #0]
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	429a      	cmp	r2, r3
 800a80e:	d90a      	bls.n	800a826 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800a810:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a814:	f383 8811 	msr	BASEPRI, r3
 800a818:	f3bf 8f6f 	isb	sy
 800a81c:	f3bf 8f4f 	dsb	sy
 800a820:	60fb      	str	r3, [r7, #12]
}
 800a822:	bf00      	nop
 800a824:	e7fe      	b.n	800a824 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800a826:	2202      	movs	r2, #2
 800a828:	2100      	movs	r1, #0
 800a82a:	6878      	ldr	r0, [r7, #4]
 800a82c:	f7ff fef8 	bl	800a620 <xQueueGenericCreate>
 800a830:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800a832:	697b      	ldr	r3, [r7, #20]
 800a834:	2b00      	cmp	r3, #0
 800a836:	d002      	beq.n	800a83e <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800a838:	697b      	ldr	r3, [r7, #20]
 800a83a:	683a      	ldr	r2, [r7, #0]
 800a83c:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800a83e:	697b      	ldr	r3, [r7, #20]
	}
 800a840:	4618      	mov	r0, r3
 800a842:	3718      	adds	r7, #24
 800a844:	46bd      	mov	sp, r7
 800a846:	bd80      	pop	{r7, pc}

0800a848 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a848:	b580      	push	{r7, lr}
 800a84a:	b08e      	sub	sp, #56	; 0x38
 800a84c:	af00      	add	r7, sp, #0
 800a84e:	60f8      	str	r0, [r7, #12]
 800a850:	60b9      	str	r1, [r7, #8]
 800a852:	607a      	str	r2, [r7, #4]
 800a854:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a856:	2300      	movs	r3, #0
 800a858:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a85e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a860:	2b00      	cmp	r3, #0
 800a862:	d10a      	bne.n	800a87a <xQueueGenericSend+0x32>
	__asm volatile
 800a864:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a868:	f383 8811 	msr	BASEPRI, r3
 800a86c:	f3bf 8f6f 	isb	sy
 800a870:	f3bf 8f4f 	dsb	sy
 800a874:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a876:	bf00      	nop
 800a878:	e7fe      	b.n	800a878 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a87a:	68bb      	ldr	r3, [r7, #8]
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d103      	bne.n	800a888 <xQueueGenericSend+0x40>
 800a880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a884:	2b00      	cmp	r3, #0
 800a886:	d101      	bne.n	800a88c <xQueueGenericSend+0x44>
 800a888:	2301      	movs	r3, #1
 800a88a:	e000      	b.n	800a88e <xQueueGenericSend+0x46>
 800a88c:	2300      	movs	r3, #0
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d10a      	bne.n	800a8a8 <xQueueGenericSend+0x60>
	__asm volatile
 800a892:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a896:	f383 8811 	msr	BASEPRI, r3
 800a89a:	f3bf 8f6f 	isb	sy
 800a89e:	f3bf 8f4f 	dsb	sy
 800a8a2:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a8a4:	bf00      	nop
 800a8a6:	e7fe      	b.n	800a8a6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a8a8:	683b      	ldr	r3, [r7, #0]
 800a8aa:	2b02      	cmp	r3, #2
 800a8ac:	d103      	bne.n	800a8b6 <xQueueGenericSend+0x6e>
 800a8ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a8b2:	2b01      	cmp	r3, #1
 800a8b4:	d101      	bne.n	800a8ba <xQueueGenericSend+0x72>
 800a8b6:	2301      	movs	r3, #1
 800a8b8:	e000      	b.n	800a8bc <xQueueGenericSend+0x74>
 800a8ba:	2300      	movs	r3, #0
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d10a      	bne.n	800a8d6 <xQueueGenericSend+0x8e>
	__asm volatile
 800a8c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8c4:	f383 8811 	msr	BASEPRI, r3
 800a8c8:	f3bf 8f6f 	isb	sy
 800a8cc:	f3bf 8f4f 	dsb	sy
 800a8d0:	623b      	str	r3, [r7, #32]
}
 800a8d2:	bf00      	nop
 800a8d4:	e7fe      	b.n	800a8d4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a8d6:	f001 fc77 	bl	800c1c8 <xTaskGetSchedulerState>
 800a8da:	4603      	mov	r3, r0
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d102      	bne.n	800a8e6 <xQueueGenericSend+0x9e>
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d101      	bne.n	800a8ea <xQueueGenericSend+0xa2>
 800a8e6:	2301      	movs	r3, #1
 800a8e8:	e000      	b.n	800a8ec <xQueueGenericSend+0xa4>
 800a8ea:	2300      	movs	r3, #0
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d10a      	bne.n	800a906 <xQueueGenericSend+0xbe>
	__asm volatile
 800a8f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8f4:	f383 8811 	msr	BASEPRI, r3
 800a8f8:	f3bf 8f6f 	isb	sy
 800a8fc:	f3bf 8f4f 	dsb	sy
 800a900:	61fb      	str	r3, [r7, #28]
}
 800a902:	bf00      	nop
 800a904:	e7fe      	b.n	800a904 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a906:	f002 fab5 	bl	800ce74 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a90a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a90c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a90e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a910:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a912:	429a      	cmp	r2, r3
 800a914:	d302      	bcc.n	800a91c <xQueueGenericSend+0xd4>
 800a916:	683b      	ldr	r3, [r7, #0]
 800a918:	2b02      	cmp	r3, #2
 800a91a:	d129      	bne.n	800a970 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a91c:	683a      	ldr	r2, [r7, #0]
 800a91e:	68b9      	ldr	r1, [r7, #8]
 800a920:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a922:	f000 fc5e 	bl	800b1e2 <prvCopyDataToQueue>
 800a926:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a92a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d010      	beq.n	800a952 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a932:	3324      	adds	r3, #36	; 0x24
 800a934:	4618      	mov	r0, r3
 800a936:	f001 fa85 	bl	800be44 <xTaskRemoveFromEventList>
 800a93a:	4603      	mov	r3, r0
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d013      	beq.n	800a968 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a940:	4b3f      	ldr	r3, [pc, #252]	; (800aa40 <xQueueGenericSend+0x1f8>)
 800a942:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a946:	601a      	str	r2, [r3, #0]
 800a948:	f3bf 8f4f 	dsb	sy
 800a94c:	f3bf 8f6f 	isb	sy
 800a950:	e00a      	b.n	800a968 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a954:	2b00      	cmp	r3, #0
 800a956:	d007      	beq.n	800a968 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a958:	4b39      	ldr	r3, [pc, #228]	; (800aa40 <xQueueGenericSend+0x1f8>)
 800a95a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a95e:	601a      	str	r2, [r3, #0]
 800a960:	f3bf 8f4f 	dsb	sy
 800a964:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a968:	f002 fab4 	bl	800ced4 <vPortExitCritical>
				return pdPASS;
 800a96c:	2301      	movs	r3, #1
 800a96e:	e063      	b.n	800aa38 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	2b00      	cmp	r3, #0
 800a974:	d103      	bne.n	800a97e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a976:	f002 faad 	bl	800ced4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a97a:	2300      	movs	r3, #0
 800a97c:	e05c      	b.n	800aa38 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a97e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a980:	2b00      	cmp	r3, #0
 800a982:	d106      	bne.n	800a992 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a984:	f107 0314 	add.w	r3, r7, #20
 800a988:	4618      	mov	r0, r3
 800a98a:	f001 fabf 	bl	800bf0c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a98e:	2301      	movs	r3, #1
 800a990:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a992:	f002 fa9f 	bl	800ced4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a996:	f001 f819 	bl	800b9cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a99a:	f002 fa6b 	bl	800ce74 <vPortEnterCritical>
 800a99e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9a0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a9a4:	b25b      	sxtb	r3, r3
 800a9a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a9aa:	d103      	bne.n	800a9b4 <xQueueGenericSend+0x16c>
 800a9ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9ae:	2200      	movs	r2, #0
 800a9b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a9b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9b6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a9ba:	b25b      	sxtb	r3, r3
 800a9bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a9c0:	d103      	bne.n	800a9ca <xQueueGenericSend+0x182>
 800a9c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9c4:	2200      	movs	r2, #0
 800a9c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a9ca:	f002 fa83 	bl	800ced4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a9ce:	1d3a      	adds	r2, r7, #4
 800a9d0:	f107 0314 	add.w	r3, r7, #20
 800a9d4:	4611      	mov	r1, r2
 800a9d6:	4618      	mov	r0, r3
 800a9d8:	f001 faae 	bl	800bf38 <xTaskCheckForTimeOut>
 800a9dc:	4603      	mov	r3, r0
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d124      	bne.n	800aa2c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a9e2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a9e4:	f000 fcf5 	bl	800b3d2 <prvIsQueueFull>
 800a9e8:	4603      	mov	r3, r0
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d018      	beq.n	800aa20 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a9ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9f0:	3310      	adds	r3, #16
 800a9f2:	687a      	ldr	r2, [r7, #4]
 800a9f4:	4611      	mov	r1, r2
 800a9f6:	4618      	mov	r0, r3
 800a9f8:	f001 f9d4 	bl	800bda4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a9fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a9fe:	f000 fc80 	bl	800b302 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800aa02:	f000 fff1 	bl	800b9e8 <xTaskResumeAll>
 800aa06:	4603      	mov	r3, r0
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	f47f af7c 	bne.w	800a906 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800aa0e:	4b0c      	ldr	r3, [pc, #48]	; (800aa40 <xQueueGenericSend+0x1f8>)
 800aa10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa14:	601a      	str	r2, [r3, #0]
 800aa16:	f3bf 8f4f 	dsb	sy
 800aa1a:	f3bf 8f6f 	isb	sy
 800aa1e:	e772      	b.n	800a906 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800aa20:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aa22:	f000 fc6e 	bl	800b302 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800aa26:	f000 ffdf 	bl	800b9e8 <xTaskResumeAll>
 800aa2a:	e76c      	b.n	800a906 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800aa2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aa2e:	f000 fc68 	bl	800b302 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800aa32:	f000 ffd9 	bl	800b9e8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800aa36:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800aa38:	4618      	mov	r0, r3
 800aa3a:	3738      	adds	r7, #56	; 0x38
 800aa3c:	46bd      	mov	sp, r7
 800aa3e:	bd80      	pop	{r7, pc}
 800aa40:	e000ed04 	.word	0xe000ed04

0800aa44 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800aa44:	b580      	push	{r7, lr}
 800aa46:	b090      	sub	sp, #64	; 0x40
 800aa48:	af00      	add	r7, sp, #0
 800aa4a:	60f8      	str	r0, [r7, #12]
 800aa4c:	60b9      	str	r1, [r7, #8]
 800aa4e:	607a      	str	r2, [r7, #4]
 800aa50:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800aa56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d10a      	bne.n	800aa72 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800aa5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa60:	f383 8811 	msr	BASEPRI, r3
 800aa64:	f3bf 8f6f 	isb	sy
 800aa68:	f3bf 8f4f 	dsb	sy
 800aa6c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800aa6e:	bf00      	nop
 800aa70:	e7fe      	b.n	800aa70 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800aa72:	68bb      	ldr	r3, [r7, #8]
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d103      	bne.n	800aa80 <xQueueGenericSendFromISR+0x3c>
 800aa78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d101      	bne.n	800aa84 <xQueueGenericSendFromISR+0x40>
 800aa80:	2301      	movs	r3, #1
 800aa82:	e000      	b.n	800aa86 <xQueueGenericSendFromISR+0x42>
 800aa84:	2300      	movs	r3, #0
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d10a      	bne.n	800aaa0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800aa8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa8e:	f383 8811 	msr	BASEPRI, r3
 800aa92:	f3bf 8f6f 	isb	sy
 800aa96:	f3bf 8f4f 	dsb	sy
 800aa9a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800aa9c:	bf00      	nop
 800aa9e:	e7fe      	b.n	800aa9e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800aaa0:	683b      	ldr	r3, [r7, #0]
 800aaa2:	2b02      	cmp	r3, #2
 800aaa4:	d103      	bne.n	800aaae <xQueueGenericSendFromISR+0x6a>
 800aaa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aaa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aaaa:	2b01      	cmp	r3, #1
 800aaac:	d101      	bne.n	800aab2 <xQueueGenericSendFromISR+0x6e>
 800aaae:	2301      	movs	r3, #1
 800aab0:	e000      	b.n	800aab4 <xQueueGenericSendFromISR+0x70>
 800aab2:	2300      	movs	r3, #0
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d10a      	bne.n	800aace <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800aab8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aabc:	f383 8811 	msr	BASEPRI, r3
 800aac0:	f3bf 8f6f 	isb	sy
 800aac4:	f3bf 8f4f 	dsb	sy
 800aac8:	623b      	str	r3, [r7, #32]
}
 800aaca:	bf00      	nop
 800aacc:	e7fe      	b.n	800aacc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800aace:	f002 fab3 	bl	800d038 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800aad2:	f3ef 8211 	mrs	r2, BASEPRI
 800aad6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aada:	f383 8811 	msr	BASEPRI, r3
 800aade:	f3bf 8f6f 	isb	sy
 800aae2:	f3bf 8f4f 	dsb	sy
 800aae6:	61fa      	str	r2, [r7, #28]
 800aae8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800aaea:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800aaec:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800aaee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aaf0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aaf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aaf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aaf6:	429a      	cmp	r2, r3
 800aaf8:	d302      	bcc.n	800ab00 <xQueueGenericSendFromISR+0xbc>
 800aafa:	683b      	ldr	r3, [r7, #0]
 800aafc:	2b02      	cmp	r3, #2
 800aafe:	d12f      	bne.n	800ab60 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ab00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab02:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ab06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ab0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab0e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ab10:	683a      	ldr	r2, [r7, #0]
 800ab12:	68b9      	ldr	r1, [r7, #8]
 800ab14:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ab16:	f000 fb64 	bl	800b1e2 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ab1a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800ab1e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ab22:	d112      	bne.n	800ab4a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ab24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d016      	beq.n	800ab5a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ab2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab2e:	3324      	adds	r3, #36	; 0x24
 800ab30:	4618      	mov	r0, r3
 800ab32:	f001 f987 	bl	800be44 <xTaskRemoveFromEventList>
 800ab36:	4603      	mov	r3, r0
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d00e      	beq.n	800ab5a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d00b      	beq.n	800ab5a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	2201      	movs	r2, #1
 800ab46:	601a      	str	r2, [r3, #0]
 800ab48:	e007      	b.n	800ab5a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ab4a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ab4e:	3301      	adds	r3, #1
 800ab50:	b2db      	uxtb	r3, r3
 800ab52:	b25a      	sxtb	r2, r3
 800ab54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800ab5a:	2301      	movs	r3, #1
 800ab5c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800ab5e:	e001      	b.n	800ab64 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ab60:	2300      	movs	r3, #0
 800ab62:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ab64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab66:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ab68:	697b      	ldr	r3, [r7, #20]
 800ab6a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800ab6e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ab70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800ab72:	4618      	mov	r0, r3
 800ab74:	3740      	adds	r7, #64	; 0x40
 800ab76:	46bd      	mov	sp, r7
 800ab78:	bd80      	pop	{r7, pc}

0800ab7a <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800ab7a:	b580      	push	{r7, lr}
 800ab7c:	b08e      	sub	sp, #56	; 0x38
 800ab7e:	af00      	add	r7, sp, #0
 800ab80:	6078      	str	r0, [r7, #4]
 800ab82:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800ab88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d10a      	bne.n	800aba4 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800ab8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab92:	f383 8811 	msr	BASEPRI, r3
 800ab96:	f3bf 8f6f 	isb	sy
 800ab9a:	f3bf 8f4f 	dsb	sy
 800ab9e:	623b      	str	r3, [r7, #32]
}
 800aba0:	bf00      	nop
 800aba2:	e7fe      	b.n	800aba2 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800aba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d00a      	beq.n	800abc2 <xQueueGiveFromISR+0x48>
	__asm volatile
 800abac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abb0:	f383 8811 	msr	BASEPRI, r3
 800abb4:	f3bf 8f6f 	isb	sy
 800abb8:	f3bf 8f4f 	dsb	sy
 800abbc:	61fb      	str	r3, [r7, #28]
}
 800abbe:	bf00      	nop
 800abc0:	e7fe      	b.n	800abc0 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800abc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d103      	bne.n	800abd2 <xQueueGiveFromISR+0x58>
 800abca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abcc:	689b      	ldr	r3, [r3, #8]
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d101      	bne.n	800abd6 <xQueueGiveFromISR+0x5c>
 800abd2:	2301      	movs	r3, #1
 800abd4:	e000      	b.n	800abd8 <xQueueGiveFromISR+0x5e>
 800abd6:	2300      	movs	r3, #0
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d10a      	bne.n	800abf2 <xQueueGiveFromISR+0x78>
	__asm volatile
 800abdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abe0:	f383 8811 	msr	BASEPRI, r3
 800abe4:	f3bf 8f6f 	isb	sy
 800abe8:	f3bf 8f4f 	dsb	sy
 800abec:	61bb      	str	r3, [r7, #24]
}
 800abee:	bf00      	nop
 800abf0:	e7fe      	b.n	800abf0 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800abf2:	f002 fa21 	bl	800d038 <vPortValidateInterruptPriority>
	__asm volatile
 800abf6:	f3ef 8211 	mrs	r2, BASEPRI
 800abfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abfe:	f383 8811 	msr	BASEPRI, r3
 800ac02:	f3bf 8f6f 	isb	sy
 800ac06:	f3bf 8f4f 	dsb	sy
 800ac0a:	617a      	str	r2, [r7, #20]
 800ac0c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800ac0e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ac10:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ac12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac16:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800ac18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ac1e:	429a      	cmp	r2, r3
 800ac20:	d22b      	bcs.n	800ac7a <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ac22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac24:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ac28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ac2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac2e:	1c5a      	adds	r2, r3, #1
 800ac30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac32:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ac34:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ac38:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ac3c:	d112      	bne.n	800ac64 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ac3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d016      	beq.n	800ac74 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ac46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac48:	3324      	adds	r3, #36	; 0x24
 800ac4a:	4618      	mov	r0, r3
 800ac4c:	f001 f8fa 	bl	800be44 <xTaskRemoveFromEventList>
 800ac50:	4603      	mov	r3, r0
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d00e      	beq.n	800ac74 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ac56:	683b      	ldr	r3, [r7, #0]
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d00b      	beq.n	800ac74 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ac5c:	683b      	ldr	r3, [r7, #0]
 800ac5e:	2201      	movs	r2, #1
 800ac60:	601a      	str	r2, [r3, #0]
 800ac62:	e007      	b.n	800ac74 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ac64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ac68:	3301      	adds	r3, #1
 800ac6a:	b2db      	uxtb	r3, r3
 800ac6c:	b25a      	sxtb	r2, r3
 800ac6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800ac74:	2301      	movs	r3, #1
 800ac76:	637b      	str	r3, [r7, #52]	; 0x34
 800ac78:	e001      	b.n	800ac7e <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ac7a:	2300      	movs	r3, #0
 800ac7c:	637b      	str	r3, [r7, #52]	; 0x34
 800ac7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac80:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	f383 8811 	msr	BASEPRI, r3
}
 800ac88:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ac8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800ac8c:	4618      	mov	r0, r3
 800ac8e:	3738      	adds	r7, #56	; 0x38
 800ac90:	46bd      	mov	sp, r7
 800ac92:	bd80      	pop	{r7, pc}

0800ac94 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800ac94:	b580      	push	{r7, lr}
 800ac96:	b08c      	sub	sp, #48	; 0x30
 800ac98:	af00      	add	r7, sp, #0
 800ac9a:	60f8      	str	r0, [r7, #12]
 800ac9c:	60b9      	str	r1, [r7, #8]
 800ac9e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800aca0:	2300      	movs	r3, #0
 800aca2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800aca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d10a      	bne.n	800acc4 <xQueueReceive+0x30>
	__asm volatile
 800acae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acb2:	f383 8811 	msr	BASEPRI, r3
 800acb6:	f3bf 8f6f 	isb	sy
 800acba:	f3bf 8f4f 	dsb	sy
 800acbe:	623b      	str	r3, [r7, #32]
}
 800acc0:	bf00      	nop
 800acc2:	e7fe      	b.n	800acc2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800acc4:	68bb      	ldr	r3, [r7, #8]
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d103      	bne.n	800acd2 <xQueueReceive+0x3e>
 800acca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800accc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d101      	bne.n	800acd6 <xQueueReceive+0x42>
 800acd2:	2301      	movs	r3, #1
 800acd4:	e000      	b.n	800acd8 <xQueueReceive+0x44>
 800acd6:	2300      	movs	r3, #0
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d10a      	bne.n	800acf2 <xQueueReceive+0x5e>
	__asm volatile
 800acdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ace0:	f383 8811 	msr	BASEPRI, r3
 800ace4:	f3bf 8f6f 	isb	sy
 800ace8:	f3bf 8f4f 	dsb	sy
 800acec:	61fb      	str	r3, [r7, #28]
}
 800acee:	bf00      	nop
 800acf0:	e7fe      	b.n	800acf0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800acf2:	f001 fa69 	bl	800c1c8 <xTaskGetSchedulerState>
 800acf6:	4603      	mov	r3, r0
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d102      	bne.n	800ad02 <xQueueReceive+0x6e>
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d101      	bne.n	800ad06 <xQueueReceive+0x72>
 800ad02:	2301      	movs	r3, #1
 800ad04:	e000      	b.n	800ad08 <xQueueReceive+0x74>
 800ad06:	2300      	movs	r3, #0
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d10a      	bne.n	800ad22 <xQueueReceive+0x8e>
	__asm volatile
 800ad0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad10:	f383 8811 	msr	BASEPRI, r3
 800ad14:	f3bf 8f6f 	isb	sy
 800ad18:	f3bf 8f4f 	dsb	sy
 800ad1c:	61bb      	str	r3, [r7, #24]
}
 800ad1e:	bf00      	nop
 800ad20:	e7fe      	b.n	800ad20 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ad22:	f002 f8a7 	bl	800ce74 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ad26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad2a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ad2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d01f      	beq.n	800ad72 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ad32:	68b9      	ldr	r1, [r7, #8]
 800ad34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ad36:	f000 fabe 	bl	800b2b6 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ad3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad3c:	1e5a      	subs	r2, r3, #1
 800ad3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad40:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ad42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad44:	691b      	ldr	r3, [r3, #16]
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d00f      	beq.n	800ad6a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ad4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad4c:	3310      	adds	r3, #16
 800ad4e:	4618      	mov	r0, r3
 800ad50:	f001 f878 	bl	800be44 <xTaskRemoveFromEventList>
 800ad54:	4603      	mov	r3, r0
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d007      	beq.n	800ad6a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ad5a:	4b3d      	ldr	r3, [pc, #244]	; (800ae50 <xQueueReceive+0x1bc>)
 800ad5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ad60:	601a      	str	r2, [r3, #0]
 800ad62:	f3bf 8f4f 	dsb	sy
 800ad66:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ad6a:	f002 f8b3 	bl	800ced4 <vPortExitCritical>
				return pdPASS;
 800ad6e:	2301      	movs	r3, #1
 800ad70:	e069      	b.n	800ae46 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d103      	bne.n	800ad80 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ad78:	f002 f8ac 	bl	800ced4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ad7c:	2300      	movs	r3, #0
 800ad7e:	e062      	b.n	800ae46 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ad80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d106      	bne.n	800ad94 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ad86:	f107 0310 	add.w	r3, r7, #16
 800ad8a:	4618      	mov	r0, r3
 800ad8c:	f001 f8be 	bl	800bf0c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ad90:	2301      	movs	r3, #1
 800ad92:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ad94:	f002 f89e 	bl	800ced4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ad98:	f000 fe18 	bl	800b9cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ad9c:	f002 f86a 	bl	800ce74 <vPortEnterCritical>
 800ada0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ada2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ada6:	b25b      	sxtb	r3, r3
 800ada8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800adac:	d103      	bne.n	800adb6 <xQueueReceive+0x122>
 800adae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adb0:	2200      	movs	r2, #0
 800adb2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800adb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adb8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800adbc:	b25b      	sxtb	r3, r3
 800adbe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800adc2:	d103      	bne.n	800adcc <xQueueReceive+0x138>
 800adc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adc6:	2200      	movs	r2, #0
 800adc8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800adcc:	f002 f882 	bl	800ced4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800add0:	1d3a      	adds	r2, r7, #4
 800add2:	f107 0310 	add.w	r3, r7, #16
 800add6:	4611      	mov	r1, r2
 800add8:	4618      	mov	r0, r3
 800adda:	f001 f8ad 	bl	800bf38 <xTaskCheckForTimeOut>
 800adde:	4603      	mov	r3, r0
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d123      	bne.n	800ae2c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ade4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ade6:	f000 fade 	bl	800b3a6 <prvIsQueueEmpty>
 800adea:	4603      	mov	r3, r0
 800adec:	2b00      	cmp	r3, #0
 800adee:	d017      	beq.n	800ae20 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800adf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adf2:	3324      	adds	r3, #36	; 0x24
 800adf4:	687a      	ldr	r2, [r7, #4]
 800adf6:	4611      	mov	r1, r2
 800adf8:	4618      	mov	r0, r3
 800adfa:	f000 ffd3 	bl	800bda4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800adfe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ae00:	f000 fa7f 	bl	800b302 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ae04:	f000 fdf0 	bl	800b9e8 <xTaskResumeAll>
 800ae08:	4603      	mov	r3, r0
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d189      	bne.n	800ad22 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800ae0e:	4b10      	ldr	r3, [pc, #64]	; (800ae50 <xQueueReceive+0x1bc>)
 800ae10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae14:	601a      	str	r2, [r3, #0]
 800ae16:	f3bf 8f4f 	dsb	sy
 800ae1a:	f3bf 8f6f 	isb	sy
 800ae1e:	e780      	b.n	800ad22 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800ae20:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ae22:	f000 fa6e 	bl	800b302 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ae26:	f000 fddf 	bl	800b9e8 <xTaskResumeAll>
 800ae2a:	e77a      	b.n	800ad22 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800ae2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ae2e:	f000 fa68 	bl	800b302 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ae32:	f000 fdd9 	bl	800b9e8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ae36:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ae38:	f000 fab5 	bl	800b3a6 <prvIsQueueEmpty>
 800ae3c:	4603      	mov	r3, r0
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	f43f af6f 	beq.w	800ad22 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ae44:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ae46:	4618      	mov	r0, r3
 800ae48:	3730      	adds	r7, #48	; 0x30
 800ae4a:	46bd      	mov	sp, r7
 800ae4c:	bd80      	pop	{r7, pc}
 800ae4e:	bf00      	nop
 800ae50:	e000ed04 	.word	0xe000ed04

0800ae54 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800ae54:	b580      	push	{r7, lr}
 800ae56:	b08e      	sub	sp, #56	; 0x38
 800ae58:	af00      	add	r7, sp, #0
 800ae5a:	6078      	str	r0, [r7, #4]
 800ae5c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800ae5e:	2300      	movs	r3, #0
 800ae60:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800ae66:	2300      	movs	r3, #0
 800ae68:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ae6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d10a      	bne.n	800ae86 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800ae70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae74:	f383 8811 	msr	BASEPRI, r3
 800ae78:	f3bf 8f6f 	isb	sy
 800ae7c:	f3bf 8f4f 	dsb	sy
 800ae80:	623b      	str	r3, [r7, #32]
}
 800ae82:	bf00      	nop
 800ae84:	e7fe      	b.n	800ae84 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800ae86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d00a      	beq.n	800aea4 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800ae8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae92:	f383 8811 	msr	BASEPRI, r3
 800ae96:	f3bf 8f6f 	isb	sy
 800ae9a:	f3bf 8f4f 	dsb	sy
 800ae9e:	61fb      	str	r3, [r7, #28]
}
 800aea0:	bf00      	nop
 800aea2:	e7fe      	b.n	800aea2 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800aea4:	f001 f990 	bl	800c1c8 <xTaskGetSchedulerState>
 800aea8:	4603      	mov	r3, r0
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d102      	bne.n	800aeb4 <xQueueSemaphoreTake+0x60>
 800aeae:	683b      	ldr	r3, [r7, #0]
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d101      	bne.n	800aeb8 <xQueueSemaphoreTake+0x64>
 800aeb4:	2301      	movs	r3, #1
 800aeb6:	e000      	b.n	800aeba <xQueueSemaphoreTake+0x66>
 800aeb8:	2300      	movs	r3, #0
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d10a      	bne.n	800aed4 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800aebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aec2:	f383 8811 	msr	BASEPRI, r3
 800aec6:	f3bf 8f6f 	isb	sy
 800aeca:	f3bf 8f4f 	dsb	sy
 800aece:	61bb      	str	r3, [r7, #24]
}
 800aed0:	bf00      	nop
 800aed2:	e7fe      	b.n	800aed2 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800aed4:	f001 ffce 	bl	800ce74 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800aed8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aeda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aedc:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800aede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d024      	beq.n	800af2e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800aee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aee6:	1e5a      	subs	r2, r3, #1
 800aee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aeea:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800aeec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d104      	bne.n	800aefe <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800aef4:	f001 fade 	bl	800c4b4 <pvTaskIncrementMutexHeldCount>
 800aef8:	4602      	mov	r2, r0
 800aefa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aefc:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800aefe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af00:	691b      	ldr	r3, [r3, #16]
 800af02:	2b00      	cmp	r3, #0
 800af04:	d00f      	beq.n	800af26 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800af06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af08:	3310      	adds	r3, #16
 800af0a:	4618      	mov	r0, r3
 800af0c:	f000 ff9a 	bl	800be44 <xTaskRemoveFromEventList>
 800af10:	4603      	mov	r3, r0
 800af12:	2b00      	cmp	r3, #0
 800af14:	d007      	beq.n	800af26 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800af16:	4b54      	ldr	r3, [pc, #336]	; (800b068 <xQueueSemaphoreTake+0x214>)
 800af18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af1c:	601a      	str	r2, [r3, #0]
 800af1e:	f3bf 8f4f 	dsb	sy
 800af22:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800af26:	f001 ffd5 	bl	800ced4 <vPortExitCritical>
				return pdPASS;
 800af2a:	2301      	movs	r3, #1
 800af2c:	e097      	b.n	800b05e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800af2e:	683b      	ldr	r3, [r7, #0]
 800af30:	2b00      	cmp	r3, #0
 800af32:	d111      	bne.n	800af58 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800af34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af36:	2b00      	cmp	r3, #0
 800af38:	d00a      	beq.n	800af50 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800af3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af3e:	f383 8811 	msr	BASEPRI, r3
 800af42:	f3bf 8f6f 	isb	sy
 800af46:	f3bf 8f4f 	dsb	sy
 800af4a:	617b      	str	r3, [r7, #20]
}
 800af4c:	bf00      	nop
 800af4e:	e7fe      	b.n	800af4e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800af50:	f001 ffc0 	bl	800ced4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800af54:	2300      	movs	r3, #0
 800af56:	e082      	b.n	800b05e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800af58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d106      	bne.n	800af6c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800af5e:	f107 030c 	add.w	r3, r7, #12
 800af62:	4618      	mov	r0, r3
 800af64:	f000 ffd2 	bl	800bf0c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800af68:	2301      	movs	r3, #1
 800af6a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800af6c:	f001 ffb2 	bl	800ced4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800af70:	f000 fd2c 	bl	800b9cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800af74:	f001 ff7e 	bl	800ce74 <vPortEnterCritical>
 800af78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af7a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800af7e:	b25b      	sxtb	r3, r3
 800af80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800af84:	d103      	bne.n	800af8e <xQueueSemaphoreTake+0x13a>
 800af86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af88:	2200      	movs	r2, #0
 800af8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800af8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af90:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800af94:	b25b      	sxtb	r3, r3
 800af96:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800af9a:	d103      	bne.n	800afa4 <xQueueSemaphoreTake+0x150>
 800af9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af9e:	2200      	movs	r2, #0
 800afa0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800afa4:	f001 ff96 	bl	800ced4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800afa8:	463a      	mov	r2, r7
 800afaa:	f107 030c 	add.w	r3, r7, #12
 800afae:	4611      	mov	r1, r2
 800afb0:	4618      	mov	r0, r3
 800afb2:	f000 ffc1 	bl	800bf38 <xTaskCheckForTimeOut>
 800afb6:	4603      	mov	r3, r0
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d132      	bne.n	800b022 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800afbc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800afbe:	f000 f9f2 	bl	800b3a6 <prvIsQueueEmpty>
 800afc2:	4603      	mov	r3, r0
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d026      	beq.n	800b016 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800afc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d109      	bne.n	800afe4 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800afd0:	f001 ff50 	bl	800ce74 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800afd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afd6:	689b      	ldr	r3, [r3, #8]
 800afd8:	4618      	mov	r0, r3
 800afda:	f001 f913 	bl	800c204 <xTaskPriorityInherit>
 800afde:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800afe0:	f001 ff78 	bl	800ced4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800afe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afe6:	3324      	adds	r3, #36	; 0x24
 800afe8:	683a      	ldr	r2, [r7, #0]
 800afea:	4611      	mov	r1, r2
 800afec:	4618      	mov	r0, r3
 800afee:	f000 fed9 	bl	800bda4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800aff2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800aff4:	f000 f985 	bl	800b302 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800aff8:	f000 fcf6 	bl	800b9e8 <xTaskResumeAll>
 800affc:	4603      	mov	r3, r0
 800affe:	2b00      	cmp	r3, #0
 800b000:	f47f af68 	bne.w	800aed4 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800b004:	4b18      	ldr	r3, [pc, #96]	; (800b068 <xQueueSemaphoreTake+0x214>)
 800b006:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b00a:	601a      	str	r2, [r3, #0]
 800b00c:	f3bf 8f4f 	dsb	sy
 800b010:	f3bf 8f6f 	isb	sy
 800b014:	e75e      	b.n	800aed4 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800b016:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b018:	f000 f973 	bl	800b302 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b01c:	f000 fce4 	bl	800b9e8 <xTaskResumeAll>
 800b020:	e758      	b.n	800aed4 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800b022:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b024:	f000 f96d 	bl	800b302 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b028:	f000 fcde 	bl	800b9e8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b02c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b02e:	f000 f9ba 	bl	800b3a6 <prvIsQueueEmpty>
 800b032:	4603      	mov	r3, r0
 800b034:	2b00      	cmp	r3, #0
 800b036:	f43f af4d 	beq.w	800aed4 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800b03a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d00d      	beq.n	800b05c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800b040:	f001 ff18 	bl	800ce74 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800b044:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b046:	f000 f8b4 	bl	800b1b2 <prvGetDisinheritPriorityAfterTimeout>
 800b04a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800b04c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b04e:	689b      	ldr	r3, [r3, #8]
 800b050:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b052:	4618      	mov	r0, r3
 800b054:	f001 f9ac 	bl	800c3b0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800b058:	f001 ff3c 	bl	800ced4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b05c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b05e:	4618      	mov	r0, r3
 800b060:	3738      	adds	r7, #56	; 0x38
 800b062:	46bd      	mov	sp, r7
 800b064:	bd80      	pop	{r7, pc}
 800b066:	bf00      	nop
 800b068:	e000ed04 	.word	0xe000ed04

0800b06c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800b06c:	b580      	push	{r7, lr}
 800b06e:	b08e      	sub	sp, #56	; 0x38
 800b070:	af00      	add	r7, sp, #0
 800b072:	60f8      	str	r0, [r7, #12]
 800b074:	60b9      	str	r1, [r7, #8]
 800b076:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b07c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d10a      	bne.n	800b098 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800b082:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b086:	f383 8811 	msr	BASEPRI, r3
 800b08a:	f3bf 8f6f 	isb	sy
 800b08e:	f3bf 8f4f 	dsb	sy
 800b092:	623b      	str	r3, [r7, #32]
}
 800b094:	bf00      	nop
 800b096:	e7fe      	b.n	800b096 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b098:	68bb      	ldr	r3, [r7, #8]
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d103      	bne.n	800b0a6 <xQueueReceiveFromISR+0x3a>
 800b09e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d101      	bne.n	800b0aa <xQueueReceiveFromISR+0x3e>
 800b0a6:	2301      	movs	r3, #1
 800b0a8:	e000      	b.n	800b0ac <xQueueReceiveFromISR+0x40>
 800b0aa:	2300      	movs	r3, #0
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d10a      	bne.n	800b0c6 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800b0b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0b4:	f383 8811 	msr	BASEPRI, r3
 800b0b8:	f3bf 8f6f 	isb	sy
 800b0bc:	f3bf 8f4f 	dsb	sy
 800b0c0:	61fb      	str	r3, [r7, #28]
}
 800b0c2:	bf00      	nop
 800b0c4:	e7fe      	b.n	800b0c4 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b0c6:	f001 ffb7 	bl	800d038 <vPortValidateInterruptPriority>
	__asm volatile
 800b0ca:	f3ef 8211 	mrs	r2, BASEPRI
 800b0ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0d2:	f383 8811 	msr	BASEPRI, r3
 800b0d6:	f3bf 8f6f 	isb	sy
 800b0da:	f3bf 8f4f 	dsb	sy
 800b0de:	61ba      	str	r2, [r7, #24]
 800b0e0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800b0e2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b0e4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b0e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0ea:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b0ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d02f      	beq.n	800b152 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800b0f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0f4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b0f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b0fc:	68b9      	ldr	r1, [r7, #8]
 800b0fe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b100:	f000 f8d9 	bl	800b2b6 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b106:	1e5a      	subs	r2, r3, #1
 800b108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b10a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800b10c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b110:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b114:	d112      	bne.n	800b13c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b118:	691b      	ldr	r3, [r3, #16]
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d016      	beq.n	800b14c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b11e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b120:	3310      	adds	r3, #16
 800b122:	4618      	mov	r0, r3
 800b124:	f000 fe8e 	bl	800be44 <xTaskRemoveFromEventList>
 800b128:	4603      	mov	r3, r0
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d00e      	beq.n	800b14c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	2b00      	cmp	r3, #0
 800b132:	d00b      	beq.n	800b14c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	2201      	movs	r2, #1
 800b138:	601a      	str	r2, [r3, #0]
 800b13a:	e007      	b.n	800b14c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800b13c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b140:	3301      	adds	r3, #1
 800b142:	b2db      	uxtb	r3, r3
 800b144:	b25a      	sxtb	r2, r3
 800b146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b148:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800b14c:	2301      	movs	r3, #1
 800b14e:	637b      	str	r3, [r7, #52]	; 0x34
 800b150:	e001      	b.n	800b156 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800b152:	2300      	movs	r3, #0
 800b154:	637b      	str	r3, [r7, #52]	; 0x34
 800b156:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b158:	613b      	str	r3, [r7, #16]
	__asm volatile
 800b15a:	693b      	ldr	r3, [r7, #16]
 800b15c:	f383 8811 	msr	BASEPRI, r3
}
 800b160:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b162:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b164:	4618      	mov	r0, r3
 800b166:	3738      	adds	r7, #56	; 0x38
 800b168:	46bd      	mov	sp, r7
 800b16a:	bd80      	pop	{r7, pc}

0800b16c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800b16c:	b580      	push	{r7, lr}
 800b16e:	b084      	sub	sp, #16
 800b170:	af00      	add	r7, sp, #0
 800b172:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d10a      	bne.n	800b194 <vQueueDelete+0x28>
	__asm volatile
 800b17e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b182:	f383 8811 	msr	BASEPRI, r3
 800b186:	f3bf 8f6f 	isb	sy
 800b18a:	f3bf 8f4f 	dsb	sy
 800b18e:	60bb      	str	r3, [r7, #8]
}
 800b190:	bf00      	nop
 800b192:	e7fe      	b.n	800b192 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800b194:	68f8      	ldr	r0, [r7, #12]
 800b196:	f000 f95f 	bl	800b458 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d102      	bne.n	800b1aa <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800b1a4:	68f8      	ldr	r0, [r7, #12]
 800b1a6:	f002 f853 	bl	800d250 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800b1aa:	bf00      	nop
 800b1ac:	3710      	adds	r7, #16
 800b1ae:	46bd      	mov	sp, r7
 800b1b0:	bd80      	pop	{r7, pc}

0800b1b2 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800b1b2:	b480      	push	{r7}
 800b1b4:	b085      	sub	sp, #20
 800b1b6:	af00      	add	r7, sp, #0
 800b1b8:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d006      	beq.n	800b1d0 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800b1cc:	60fb      	str	r3, [r7, #12]
 800b1ce:	e001      	b.n	800b1d4 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800b1d0:	2300      	movs	r3, #0
 800b1d2:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800b1d4:	68fb      	ldr	r3, [r7, #12]
	}
 800b1d6:	4618      	mov	r0, r3
 800b1d8:	3714      	adds	r7, #20
 800b1da:	46bd      	mov	sp, r7
 800b1dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1e0:	4770      	bx	lr

0800b1e2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b1e2:	b580      	push	{r7, lr}
 800b1e4:	b086      	sub	sp, #24
 800b1e6:	af00      	add	r7, sp, #0
 800b1e8:	60f8      	str	r0, [r7, #12]
 800b1ea:	60b9      	str	r1, [r7, #8]
 800b1ec:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b1ee:	2300      	movs	r3, #0
 800b1f0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1f6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d10d      	bne.n	800b21c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	2b00      	cmp	r3, #0
 800b206:	d14d      	bne.n	800b2a4 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	689b      	ldr	r3, [r3, #8]
 800b20c:	4618      	mov	r0, r3
 800b20e:	f001 f861 	bl	800c2d4 <xTaskPriorityDisinherit>
 800b212:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	2200      	movs	r2, #0
 800b218:	609a      	str	r2, [r3, #8]
 800b21a:	e043      	b.n	800b2a4 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d119      	bne.n	800b256 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	6858      	ldr	r0, [r3, #4]
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b22a:	461a      	mov	r2, r3
 800b22c:	68b9      	ldr	r1, [r7, #8]
 800b22e:	f002 f953 	bl	800d4d8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	685a      	ldr	r2, [r3, #4]
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b23a:	441a      	add	r2, r3
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	685a      	ldr	r2, [r3, #4]
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	689b      	ldr	r3, [r3, #8]
 800b248:	429a      	cmp	r2, r3
 800b24a:	d32b      	bcc.n	800b2a4 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	681a      	ldr	r2, [r3, #0]
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	605a      	str	r2, [r3, #4]
 800b254:	e026      	b.n	800b2a4 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	68d8      	ldr	r0, [r3, #12]
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b25e:	461a      	mov	r2, r3
 800b260:	68b9      	ldr	r1, [r7, #8]
 800b262:	f002 f939 	bl	800d4d8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	68da      	ldr	r2, [r3, #12]
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b26e:	425b      	negs	r3, r3
 800b270:	441a      	add	r2, r3
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	68da      	ldr	r2, [r3, #12]
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	429a      	cmp	r2, r3
 800b280:	d207      	bcs.n	800b292 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	689a      	ldr	r2, [r3, #8]
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b28a:	425b      	negs	r3, r3
 800b28c:	441a      	add	r2, r3
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	2b02      	cmp	r3, #2
 800b296:	d105      	bne.n	800b2a4 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b298:	693b      	ldr	r3, [r7, #16]
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d002      	beq.n	800b2a4 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b29e:	693b      	ldr	r3, [r7, #16]
 800b2a0:	3b01      	subs	r3, #1
 800b2a2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b2a4:	693b      	ldr	r3, [r7, #16]
 800b2a6:	1c5a      	adds	r2, r3, #1
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800b2ac:	697b      	ldr	r3, [r7, #20]
}
 800b2ae:	4618      	mov	r0, r3
 800b2b0:	3718      	adds	r7, #24
 800b2b2:	46bd      	mov	sp, r7
 800b2b4:	bd80      	pop	{r7, pc}

0800b2b6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b2b6:	b580      	push	{r7, lr}
 800b2b8:	b082      	sub	sp, #8
 800b2ba:	af00      	add	r7, sp, #0
 800b2bc:	6078      	str	r0, [r7, #4]
 800b2be:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d018      	beq.n	800b2fa <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	68da      	ldr	r2, [r3, #12]
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2d0:	441a      	add	r2, r3
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	68da      	ldr	r2, [r3, #12]
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	689b      	ldr	r3, [r3, #8]
 800b2de:	429a      	cmp	r2, r3
 800b2e0:	d303      	bcc.n	800b2ea <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	681a      	ldr	r2, [r3, #0]
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	68d9      	ldr	r1, [r3, #12]
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2f2:	461a      	mov	r2, r3
 800b2f4:	6838      	ldr	r0, [r7, #0]
 800b2f6:	f002 f8ef 	bl	800d4d8 <memcpy>
	}
}
 800b2fa:	bf00      	nop
 800b2fc:	3708      	adds	r7, #8
 800b2fe:	46bd      	mov	sp, r7
 800b300:	bd80      	pop	{r7, pc}

0800b302 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b302:	b580      	push	{r7, lr}
 800b304:	b084      	sub	sp, #16
 800b306:	af00      	add	r7, sp, #0
 800b308:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b30a:	f001 fdb3 	bl	800ce74 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b314:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b316:	e011      	b.n	800b33c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d012      	beq.n	800b346 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	3324      	adds	r3, #36	; 0x24
 800b324:	4618      	mov	r0, r3
 800b326:	f000 fd8d 	bl	800be44 <xTaskRemoveFromEventList>
 800b32a:	4603      	mov	r3, r0
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d001      	beq.n	800b334 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b330:	f000 fe64 	bl	800bffc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b334:	7bfb      	ldrb	r3, [r7, #15]
 800b336:	3b01      	subs	r3, #1
 800b338:	b2db      	uxtb	r3, r3
 800b33a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b33c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b340:	2b00      	cmp	r3, #0
 800b342:	dce9      	bgt.n	800b318 <prvUnlockQueue+0x16>
 800b344:	e000      	b.n	800b348 <prvUnlockQueue+0x46>
					break;
 800b346:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	22ff      	movs	r2, #255	; 0xff
 800b34c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800b350:	f001 fdc0 	bl	800ced4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b354:	f001 fd8e 	bl	800ce74 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b35e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b360:	e011      	b.n	800b386 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	691b      	ldr	r3, [r3, #16]
 800b366:	2b00      	cmp	r3, #0
 800b368:	d012      	beq.n	800b390 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	3310      	adds	r3, #16
 800b36e:	4618      	mov	r0, r3
 800b370:	f000 fd68 	bl	800be44 <xTaskRemoveFromEventList>
 800b374:	4603      	mov	r3, r0
 800b376:	2b00      	cmp	r3, #0
 800b378:	d001      	beq.n	800b37e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b37a:	f000 fe3f 	bl	800bffc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b37e:	7bbb      	ldrb	r3, [r7, #14]
 800b380:	3b01      	subs	r3, #1
 800b382:	b2db      	uxtb	r3, r3
 800b384:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b386:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	dce9      	bgt.n	800b362 <prvUnlockQueue+0x60>
 800b38e:	e000      	b.n	800b392 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b390:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	22ff      	movs	r2, #255	; 0xff
 800b396:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800b39a:	f001 fd9b 	bl	800ced4 <vPortExitCritical>
}
 800b39e:	bf00      	nop
 800b3a0:	3710      	adds	r7, #16
 800b3a2:	46bd      	mov	sp, r7
 800b3a4:	bd80      	pop	{r7, pc}

0800b3a6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b3a6:	b580      	push	{r7, lr}
 800b3a8:	b084      	sub	sp, #16
 800b3aa:	af00      	add	r7, sp, #0
 800b3ac:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b3ae:	f001 fd61 	bl	800ce74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d102      	bne.n	800b3c0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b3ba:	2301      	movs	r3, #1
 800b3bc:	60fb      	str	r3, [r7, #12]
 800b3be:	e001      	b.n	800b3c4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b3c0:	2300      	movs	r3, #0
 800b3c2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b3c4:	f001 fd86 	bl	800ced4 <vPortExitCritical>

	return xReturn;
 800b3c8:	68fb      	ldr	r3, [r7, #12]
}
 800b3ca:	4618      	mov	r0, r3
 800b3cc:	3710      	adds	r7, #16
 800b3ce:	46bd      	mov	sp, r7
 800b3d0:	bd80      	pop	{r7, pc}

0800b3d2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b3d2:	b580      	push	{r7, lr}
 800b3d4:	b084      	sub	sp, #16
 800b3d6:	af00      	add	r7, sp, #0
 800b3d8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b3da:	f001 fd4b 	bl	800ce74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b3e6:	429a      	cmp	r2, r3
 800b3e8:	d102      	bne.n	800b3f0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b3ea:	2301      	movs	r3, #1
 800b3ec:	60fb      	str	r3, [r7, #12]
 800b3ee:	e001      	b.n	800b3f4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b3f0:	2300      	movs	r3, #0
 800b3f2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b3f4:	f001 fd6e 	bl	800ced4 <vPortExitCritical>

	return xReturn;
 800b3f8:	68fb      	ldr	r3, [r7, #12]
}
 800b3fa:	4618      	mov	r0, r3
 800b3fc:	3710      	adds	r7, #16
 800b3fe:	46bd      	mov	sp, r7
 800b400:	bd80      	pop	{r7, pc}
	...

0800b404 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b404:	b480      	push	{r7}
 800b406:	b085      	sub	sp, #20
 800b408:	af00      	add	r7, sp, #0
 800b40a:	6078      	str	r0, [r7, #4]
 800b40c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b40e:	2300      	movs	r3, #0
 800b410:	60fb      	str	r3, [r7, #12]
 800b412:	e014      	b.n	800b43e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b414:	4a0f      	ldr	r2, [pc, #60]	; (800b454 <vQueueAddToRegistry+0x50>)
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d10b      	bne.n	800b438 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b420:	490c      	ldr	r1, [pc, #48]	; (800b454 <vQueueAddToRegistry+0x50>)
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	683a      	ldr	r2, [r7, #0]
 800b426:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b42a:	4a0a      	ldr	r2, [pc, #40]	; (800b454 <vQueueAddToRegistry+0x50>)
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	00db      	lsls	r3, r3, #3
 800b430:	4413      	add	r3, r2
 800b432:	687a      	ldr	r2, [r7, #4]
 800b434:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b436:	e006      	b.n	800b446 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	3301      	adds	r3, #1
 800b43c:	60fb      	str	r3, [r7, #12]
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	2b07      	cmp	r3, #7
 800b442:	d9e7      	bls.n	800b414 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b444:	bf00      	nop
 800b446:	bf00      	nop
 800b448:	3714      	adds	r7, #20
 800b44a:	46bd      	mov	sp, r7
 800b44c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b450:	4770      	bx	lr
 800b452:	bf00      	nop
 800b454:	20000bc0 	.word	0x20000bc0

0800b458 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800b458:	b480      	push	{r7}
 800b45a:	b085      	sub	sp, #20
 800b45c:	af00      	add	r7, sp, #0
 800b45e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b460:	2300      	movs	r3, #0
 800b462:	60fb      	str	r3, [r7, #12]
 800b464:	e016      	b.n	800b494 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800b466:	4a10      	ldr	r2, [pc, #64]	; (800b4a8 <vQueueUnregisterQueue+0x50>)
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	00db      	lsls	r3, r3, #3
 800b46c:	4413      	add	r3, r2
 800b46e:	685b      	ldr	r3, [r3, #4]
 800b470:	687a      	ldr	r2, [r7, #4]
 800b472:	429a      	cmp	r2, r3
 800b474:	d10b      	bne.n	800b48e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800b476:	4a0c      	ldr	r2, [pc, #48]	; (800b4a8 <vQueueUnregisterQueue+0x50>)
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	2100      	movs	r1, #0
 800b47c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800b480:	4a09      	ldr	r2, [pc, #36]	; (800b4a8 <vQueueUnregisterQueue+0x50>)
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	00db      	lsls	r3, r3, #3
 800b486:	4413      	add	r3, r2
 800b488:	2200      	movs	r2, #0
 800b48a:	605a      	str	r2, [r3, #4]
				break;
 800b48c:	e006      	b.n	800b49c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	3301      	adds	r3, #1
 800b492:	60fb      	str	r3, [r7, #12]
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	2b07      	cmp	r3, #7
 800b498:	d9e5      	bls.n	800b466 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800b49a:	bf00      	nop
 800b49c:	bf00      	nop
 800b49e:	3714      	adds	r7, #20
 800b4a0:	46bd      	mov	sp, r7
 800b4a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4a6:	4770      	bx	lr
 800b4a8:	20000bc0 	.word	0x20000bc0

0800b4ac <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b4ac:	b580      	push	{r7, lr}
 800b4ae:	b086      	sub	sp, #24
 800b4b0:	af00      	add	r7, sp, #0
 800b4b2:	60f8      	str	r0, [r7, #12]
 800b4b4:	60b9      	str	r1, [r7, #8]
 800b4b6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b4bc:	f001 fcda 	bl	800ce74 <vPortEnterCritical>
 800b4c0:	697b      	ldr	r3, [r7, #20]
 800b4c2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b4c6:	b25b      	sxtb	r3, r3
 800b4c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b4cc:	d103      	bne.n	800b4d6 <vQueueWaitForMessageRestricted+0x2a>
 800b4ce:	697b      	ldr	r3, [r7, #20]
 800b4d0:	2200      	movs	r2, #0
 800b4d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b4d6:	697b      	ldr	r3, [r7, #20]
 800b4d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b4dc:	b25b      	sxtb	r3, r3
 800b4de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b4e2:	d103      	bne.n	800b4ec <vQueueWaitForMessageRestricted+0x40>
 800b4e4:	697b      	ldr	r3, [r7, #20]
 800b4e6:	2200      	movs	r2, #0
 800b4e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b4ec:	f001 fcf2 	bl	800ced4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b4f0:	697b      	ldr	r3, [r7, #20]
 800b4f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d106      	bne.n	800b506 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b4f8:	697b      	ldr	r3, [r7, #20]
 800b4fa:	3324      	adds	r3, #36	; 0x24
 800b4fc:	687a      	ldr	r2, [r7, #4]
 800b4fe:	68b9      	ldr	r1, [r7, #8]
 800b500:	4618      	mov	r0, r3
 800b502:	f000 fc73 	bl	800bdec <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b506:	6978      	ldr	r0, [r7, #20]
 800b508:	f7ff fefb 	bl	800b302 <prvUnlockQueue>
	}
 800b50c:	bf00      	nop
 800b50e:	3718      	adds	r7, #24
 800b510:	46bd      	mov	sp, r7
 800b512:	bd80      	pop	{r7, pc}

0800b514 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b514:	b580      	push	{r7, lr}
 800b516:	b08e      	sub	sp, #56	; 0x38
 800b518:	af04      	add	r7, sp, #16
 800b51a:	60f8      	str	r0, [r7, #12]
 800b51c:	60b9      	str	r1, [r7, #8]
 800b51e:	607a      	str	r2, [r7, #4]
 800b520:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b522:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b524:	2b00      	cmp	r3, #0
 800b526:	d10a      	bne.n	800b53e <xTaskCreateStatic+0x2a>
	__asm volatile
 800b528:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b52c:	f383 8811 	msr	BASEPRI, r3
 800b530:	f3bf 8f6f 	isb	sy
 800b534:	f3bf 8f4f 	dsb	sy
 800b538:	623b      	str	r3, [r7, #32]
}
 800b53a:	bf00      	nop
 800b53c:	e7fe      	b.n	800b53c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b53e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b540:	2b00      	cmp	r3, #0
 800b542:	d10a      	bne.n	800b55a <xTaskCreateStatic+0x46>
	__asm volatile
 800b544:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b548:	f383 8811 	msr	BASEPRI, r3
 800b54c:	f3bf 8f6f 	isb	sy
 800b550:	f3bf 8f4f 	dsb	sy
 800b554:	61fb      	str	r3, [r7, #28]
}
 800b556:	bf00      	nop
 800b558:	e7fe      	b.n	800b558 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b55a:	23bc      	movs	r3, #188	; 0xbc
 800b55c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b55e:	693b      	ldr	r3, [r7, #16]
 800b560:	2bbc      	cmp	r3, #188	; 0xbc
 800b562:	d00a      	beq.n	800b57a <xTaskCreateStatic+0x66>
	__asm volatile
 800b564:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b568:	f383 8811 	msr	BASEPRI, r3
 800b56c:	f3bf 8f6f 	isb	sy
 800b570:	f3bf 8f4f 	dsb	sy
 800b574:	61bb      	str	r3, [r7, #24]
}
 800b576:	bf00      	nop
 800b578:	e7fe      	b.n	800b578 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b57a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b57c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d01e      	beq.n	800b5c0 <xTaskCreateStatic+0xac>
 800b582:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b584:	2b00      	cmp	r3, #0
 800b586:	d01b      	beq.n	800b5c0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b588:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b58a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b58c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b58e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b590:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b594:	2202      	movs	r2, #2
 800b596:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b59a:	2300      	movs	r3, #0
 800b59c:	9303      	str	r3, [sp, #12]
 800b59e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5a0:	9302      	str	r3, [sp, #8]
 800b5a2:	f107 0314 	add.w	r3, r7, #20
 800b5a6:	9301      	str	r3, [sp, #4]
 800b5a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5aa:	9300      	str	r3, [sp, #0]
 800b5ac:	683b      	ldr	r3, [r7, #0]
 800b5ae:	687a      	ldr	r2, [r7, #4]
 800b5b0:	68b9      	ldr	r1, [r7, #8]
 800b5b2:	68f8      	ldr	r0, [r7, #12]
 800b5b4:	f000 f850 	bl	800b658 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b5b8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b5ba:	f000 f8f3 	bl	800b7a4 <prvAddNewTaskToReadyList>
 800b5be:	e001      	b.n	800b5c4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800b5c0:	2300      	movs	r3, #0
 800b5c2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b5c4:	697b      	ldr	r3, [r7, #20]
	}
 800b5c6:	4618      	mov	r0, r3
 800b5c8:	3728      	adds	r7, #40	; 0x28
 800b5ca:	46bd      	mov	sp, r7
 800b5cc:	bd80      	pop	{r7, pc}

0800b5ce <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b5ce:	b580      	push	{r7, lr}
 800b5d0:	b08c      	sub	sp, #48	; 0x30
 800b5d2:	af04      	add	r7, sp, #16
 800b5d4:	60f8      	str	r0, [r7, #12]
 800b5d6:	60b9      	str	r1, [r7, #8]
 800b5d8:	603b      	str	r3, [r7, #0]
 800b5da:	4613      	mov	r3, r2
 800b5dc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b5de:	88fb      	ldrh	r3, [r7, #6]
 800b5e0:	009b      	lsls	r3, r3, #2
 800b5e2:	4618      	mov	r0, r3
 800b5e4:	f001 fd68 	bl	800d0b8 <pvPortMalloc>
 800b5e8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b5ea:	697b      	ldr	r3, [r7, #20]
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d00e      	beq.n	800b60e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b5f0:	20bc      	movs	r0, #188	; 0xbc
 800b5f2:	f001 fd61 	bl	800d0b8 <pvPortMalloc>
 800b5f6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b5f8:	69fb      	ldr	r3, [r7, #28]
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d003      	beq.n	800b606 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b5fe:	69fb      	ldr	r3, [r7, #28]
 800b600:	697a      	ldr	r2, [r7, #20]
 800b602:	631a      	str	r2, [r3, #48]	; 0x30
 800b604:	e005      	b.n	800b612 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b606:	6978      	ldr	r0, [r7, #20]
 800b608:	f001 fe22 	bl	800d250 <vPortFree>
 800b60c:	e001      	b.n	800b612 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b60e:	2300      	movs	r3, #0
 800b610:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b612:	69fb      	ldr	r3, [r7, #28]
 800b614:	2b00      	cmp	r3, #0
 800b616:	d017      	beq.n	800b648 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b618:	69fb      	ldr	r3, [r7, #28]
 800b61a:	2200      	movs	r2, #0
 800b61c:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b620:	88fa      	ldrh	r2, [r7, #6]
 800b622:	2300      	movs	r3, #0
 800b624:	9303      	str	r3, [sp, #12]
 800b626:	69fb      	ldr	r3, [r7, #28]
 800b628:	9302      	str	r3, [sp, #8]
 800b62a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b62c:	9301      	str	r3, [sp, #4]
 800b62e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b630:	9300      	str	r3, [sp, #0]
 800b632:	683b      	ldr	r3, [r7, #0]
 800b634:	68b9      	ldr	r1, [r7, #8]
 800b636:	68f8      	ldr	r0, [r7, #12]
 800b638:	f000 f80e 	bl	800b658 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b63c:	69f8      	ldr	r0, [r7, #28]
 800b63e:	f000 f8b1 	bl	800b7a4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b642:	2301      	movs	r3, #1
 800b644:	61bb      	str	r3, [r7, #24]
 800b646:	e002      	b.n	800b64e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b648:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b64c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b64e:	69bb      	ldr	r3, [r7, #24]
	}
 800b650:	4618      	mov	r0, r3
 800b652:	3720      	adds	r7, #32
 800b654:	46bd      	mov	sp, r7
 800b656:	bd80      	pop	{r7, pc}

0800b658 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b658:	b580      	push	{r7, lr}
 800b65a:	b088      	sub	sp, #32
 800b65c:	af00      	add	r7, sp, #0
 800b65e:	60f8      	str	r0, [r7, #12]
 800b660:	60b9      	str	r1, [r7, #8]
 800b662:	607a      	str	r2, [r7, #4]
 800b664:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b668:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	009b      	lsls	r3, r3, #2
 800b66e:	461a      	mov	r2, r3
 800b670:	21a5      	movs	r1, #165	; 0xa5
 800b672:	f001 ff3f 	bl	800d4f4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b678:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b680:	3b01      	subs	r3, #1
 800b682:	009b      	lsls	r3, r3, #2
 800b684:	4413      	add	r3, r2
 800b686:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b688:	69bb      	ldr	r3, [r7, #24]
 800b68a:	f023 0307 	bic.w	r3, r3, #7
 800b68e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b690:	69bb      	ldr	r3, [r7, #24]
 800b692:	f003 0307 	and.w	r3, r3, #7
 800b696:	2b00      	cmp	r3, #0
 800b698:	d00a      	beq.n	800b6b0 <prvInitialiseNewTask+0x58>
	__asm volatile
 800b69a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b69e:	f383 8811 	msr	BASEPRI, r3
 800b6a2:	f3bf 8f6f 	isb	sy
 800b6a6:	f3bf 8f4f 	dsb	sy
 800b6aa:	617b      	str	r3, [r7, #20]
}
 800b6ac:	bf00      	nop
 800b6ae:	e7fe      	b.n	800b6ae <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b6b0:	68bb      	ldr	r3, [r7, #8]
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d01f      	beq.n	800b6f6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b6b6:	2300      	movs	r3, #0
 800b6b8:	61fb      	str	r3, [r7, #28]
 800b6ba:	e012      	b.n	800b6e2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b6bc:	68ba      	ldr	r2, [r7, #8]
 800b6be:	69fb      	ldr	r3, [r7, #28]
 800b6c0:	4413      	add	r3, r2
 800b6c2:	7819      	ldrb	r1, [r3, #0]
 800b6c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b6c6:	69fb      	ldr	r3, [r7, #28]
 800b6c8:	4413      	add	r3, r2
 800b6ca:	3334      	adds	r3, #52	; 0x34
 800b6cc:	460a      	mov	r2, r1
 800b6ce:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b6d0:	68ba      	ldr	r2, [r7, #8]
 800b6d2:	69fb      	ldr	r3, [r7, #28]
 800b6d4:	4413      	add	r3, r2
 800b6d6:	781b      	ldrb	r3, [r3, #0]
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d006      	beq.n	800b6ea <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b6dc:	69fb      	ldr	r3, [r7, #28]
 800b6de:	3301      	adds	r3, #1
 800b6e0:	61fb      	str	r3, [r7, #28]
 800b6e2:	69fb      	ldr	r3, [r7, #28]
 800b6e4:	2b0f      	cmp	r3, #15
 800b6e6:	d9e9      	bls.n	800b6bc <prvInitialiseNewTask+0x64>
 800b6e8:	e000      	b.n	800b6ec <prvInitialiseNewTask+0x94>
			{
				break;
 800b6ea:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b6ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6ee:	2200      	movs	r2, #0
 800b6f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b6f4:	e003      	b.n	800b6fe <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b6f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6f8:	2200      	movs	r2, #0
 800b6fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b6fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b700:	2b37      	cmp	r3, #55	; 0x37
 800b702:	d901      	bls.n	800b708 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b704:	2337      	movs	r3, #55	; 0x37
 800b706:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b70a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b70c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b70e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b710:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b712:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800b714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b716:	2200      	movs	r2, #0
 800b718:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b71a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b71c:	3304      	adds	r3, #4
 800b71e:	4618      	mov	r0, r3
 800b720:	f7fe fe0a 	bl	800a338 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b726:	3318      	adds	r3, #24
 800b728:	4618      	mov	r0, r3
 800b72a:	f7fe fe05 	bl	800a338 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b72e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b730:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b732:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b736:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b73a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b73c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b73e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b740:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b742:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b746:	2200      	movs	r2, #0
 800b748:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b74c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b74e:	2200      	movs	r2, #0
 800b750:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800b754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b756:	3354      	adds	r3, #84	; 0x54
 800b758:	2260      	movs	r2, #96	; 0x60
 800b75a:	2100      	movs	r1, #0
 800b75c:	4618      	mov	r0, r3
 800b75e:	f001 fec9 	bl	800d4f4 <memset>
 800b762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b764:	4a0c      	ldr	r2, [pc, #48]	; (800b798 <prvInitialiseNewTask+0x140>)
 800b766:	659a      	str	r2, [r3, #88]	; 0x58
 800b768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b76a:	4a0c      	ldr	r2, [pc, #48]	; (800b79c <prvInitialiseNewTask+0x144>)
 800b76c:	65da      	str	r2, [r3, #92]	; 0x5c
 800b76e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b770:	4a0b      	ldr	r2, [pc, #44]	; (800b7a0 <prvInitialiseNewTask+0x148>)
 800b772:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b774:	683a      	ldr	r2, [r7, #0]
 800b776:	68f9      	ldr	r1, [r7, #12]
 800b778:	69b8      	ldr	r0, [r7, #24]
 800b77a:	f001 fa51 	bl	800cc20 <pxPortInitialiseStack>
 800b77e:	4602      	mov	r2, r0
 800b780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b782:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b786:	2b00      	cmp	r3, #0
 800b788:	d002      	beq.n	800b790 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b78a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b78c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b78e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b790:	bf00      	nop
 800b792:	3720      	adds	r7, #32
 800b794:	46bd      	mov	sp, r7
 800b796:	bd80      	pop	{r7, pc}
 800b798:	0800d7c8 	.word	0x0800d7c8
 800b79c:	0800d7e8 	.word	0x0800d7e8
 800b7a0:	0800d7a8 	.word	0x0800d7a8

0800b7a4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b7a4:	b580      	push	{r7, lr}
 800b7a6:	b082      	sub	sp, #8
 800b7a8:	af00      	add	r7, sp, #0
 800b7aa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b7ac:	f001 fb62 	bl	800ce74 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b7b0:	4b2d      	ldr	r3, [pc, #180]	; (800b868 <prvAddNewTaskToReadyList+0xc4>)
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	3301      	adds	r3, #1
 800b7b6:	4a2c      	ldr	r2, [pc, #176]	; (800b868 <prvAddNewTaskToReadyList+0xc4>)
 800b7b8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b7ba:	4b2c      	ldr	r3, [pc, #176]	; (800b86c <prvAddNewTaskToReadyList+0xc8>)
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d109      	bne.n	800b7d6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b7c2:	4a2a      	ldr	r2, [pc, #168]	; (800b86c <prvAddNewTaskToReadyList+0xc8>)
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b7c8:	4b27      	ldr	r3, [pc, #156]	; (800b868 <prvAddNewTaskToReadyList+0xc4>)
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	2b01      	cmp	r3, #1
 800b7ce:	d110      	bne.n	800b7f2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b7d0:	f000 fc38 	bl	800c044 <prvInitialiseTaskLists>
 800b7d4:	e00d      	b.n	800b7f2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b7d6:	4b26      	ldr	r3, [pc, #152]	; (800b870 <prvAddNewTaskToReadyList+0xcc>)
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d109      	bne.n	800b7f2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b7de:	4b23      	ldr	r3, [pc, #140]	; (800b86c <prvAddNewTaskToReadyList+0xc8>)
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7e8:	429a      	cmp	r2, r3
 800b7ea:	d802      	bhi.n	800b7f2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b7ec:	4a1f      	ldr	r2, [pc, #124]	; (800b86c <prvAddNewTaskToReadyList+0xc8>)
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b7f2:	4b20      	ldr	r3, [pc, #128]	; (800b874 <prvAddNewTaskToReadyList+0xd0>)
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	3301      	adds	r3, #1
 800b7f8:	4a1e      	ldr	r2, [pc, #120]	; (800b874 <prvAddNewTaskToReadyList+0xd0>)
 800b7fa:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b7fc:	4b1d      	ldr	r3, [pc, #116]	; (800b874 <prvAddNewTaskToReadyList+0xd0>)
 800b7fe:	681a      	ldr	r2, [r3, #0]
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b808:	4b1b      	ldr	r3, [pc, #108]	; (800b878 <prvAddNewTaskToReadyList+0xd4>)
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	429a      	cmp	r2, r3
 800b80e:	d903      	bls.n	800b818 <prvAddNewTaskToReadyList+0x74>
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b814:	4a18      	ldr	r2, [pc, #96]	; (800b878 <prvAddNewTaskToReadyList+0xd4>)
 800b816:	6013      	str	r3, [r2, #0]
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b81c:	4613      	mov	r3, r2
 800b81e:	009b      	lsls	r3, r3, #2
 800b820:	4413      	add	r3, r2
 800b822:	009b      	lsls	r3, r3, #2
 800b824:	4a15      	ldr	r2, [pc, #84]	; (800b87c <prvAddNewTaskToReadyList+0xd8>)
 800b826:	441a      	add	r2, r3
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	3304      	adds	r3, #4
 800b82c:	4619      	mov	r1, r3
 800b82e:	4610      	mov	r0, r2
 800b830:	f7fe fd8f 	bl	800a352 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b834:	f001 fb4e 	bl	800ced4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b838:	4b0d      	ldr	r3, [pc, #52]	; (800b870 <prvAddNewTaskToReadyList+0xcc>)
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d00e      	beq.n	800b85e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b840:	4b0a      	ldr	r3, [pc, #40]	; (800b86c <prvAddNewTaskToReadyList+0xc8>)
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b84a:	429a      	cmp	r2, r3
 800b84c:	d207      	bcs.n	800b85e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b84e:	4b0c      	ldr	r3, [pc, #48]	; (800b880 <prvAddNewTaskToReadyList+0xdc>)
 800b850:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b854:	601a      	str	r2, [r3, #0]
 800b856:	f3bf 8f4f 	dsb	sy
 800b85a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b85e:	bf00      	nop
 800b860:	3708      	adds	r7, #8
 800b862:	46bd      	mov	sp, r7
 800b864:	bd80      	pop	{r7, pc}
 800b866:	bf00      	nop
 800b868:	200010d4 	.word	0x200010d4
 800b86c:	20000c00 	.word	0x20000c00
 800b870:	200010e0 	.word	0x200010e0
 800b874:	200010f0 	.word	0x200010f0
 800b878:	200010dc 	.word	0x200010dc
 800b87c:	20000c04 	.word	0x20000c04
 800b880:	e000ed04 	.word	0xe000ed04

0800b884 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b884:	b580      	push	{r7, lr}
 800b886:	b084      	sub	sp, #16
 800b888:	af00      	add	r7, sp, #0
 800b88a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b88c:	2300      	movs	r3, #0
 800b88e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	2b00      	cmp	r3, #0
 800b894:	d017      	beq.n	800b8c6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b896:	4b13      	ldr	r3, [pc, #76]	; (800b8e4 <vTaskDelay+0x60>)
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d00a      	beq.n	800b8b4 <vTaskDelay+0x30>
	__asm volatile
 800b89e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8a2:	f383 8811 	msr	BASEPRI, r3
 800b8a6:	f3bf 8f6f 	isb	sy
 800b8aa:	f3bf 8f4f 	dsb	sy
 800b8ae:	60bb      	str	r3, [r7, #8]
}
 800b8b0:	bf00      	nop
 800b8b2:	e7fe      	b.n	800b8b2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b8b4:	f000 f88a 	bl	800b9cc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b8b8:	2100      	movs	r1, #0
 800b8ba:	6878      	ldr	r0, [r7, #4]
 800b8bc:	f000 fe0e 	bl	800c4dc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b8c0:	f000 f892 	bl	800b9e8 <xTaskResumeAll>
 800b8c4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d107      	bne.n	800b8dc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800b8cc:	4b06      	ldr	r3, [pc, #24]	; (800b8e8 <vTaskDelay+0x64>)
 800b8ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b8d2:	601a      	str	r2, [r3, #0]
 800b8d4:	f3bf 8f4f 	dsb	sy
 800b8d8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b8dc:	bf00      	nop
 800b8de:	3710      	adds	r7, #16
 800b8e0:	46bd      	mov	sp, r7
 800b8e2:	bd80      	pop	{r7, pc}
 800b8e4:	200010fc 	.word	0x200010fc
 800b8e8:	e000ed04 	.word	0xe000ed04

0800b8ec <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b8ec:	b580      	push	{r7, lr}
 800b8ee:	b08a      	sub	sp, #40	; 0x28
 800b8f0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b8f2:	2300      	movs	r3, #0
 800b8f4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b8f6:	2300      	movs	r3, #0
 800b8f8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b8fa:	463a      	mov	r2, r7
 800b8fc:	1d39      	adds	r1, r7, #4
 800b8fe:	f107 0308 	add.w	r3, r7, #8
 800b902:	4618      	mov	r0, r3
 800b904:	f7fe fcc4 	bl	800a290 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b908:	6839      	ldr	r1, [r7, #0]
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	68ba      	ldr	r2, [r7, #8]
 800b90e:	9202      	str	r2, [sp, #8]
 800b910:	9301      	str	r3, [sp, #4]
 800b912:	2300      	movs	r3, #0
 800b914:	9300      	str	r3, [sp, #0]
 800b916:	2300      	movs	r3, #0
 800b918:	460a      	mov	r2, r1
 800b91a:	4924      	ldr	r1, [pc, #144]	; (800b9ac <vTaskStartScheduler+0xc0>)
 800b91c:	4824      	ldr	r0, [pc, #144]	; (800b9b0 <vTaskStartScheduler+0xc4>)
 800b91e:	f7ff fdf9 	bl	800b514 <xTaskCreateStatic>
 800b922:	4603      	mov	r3, r0
 800b924:	4a23      	ldr	r2, [pc, #140]	; (800b9b4 <vTaskStartScheduler+0xc8>)
 800b926:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b928:	4b22      	ldr	r3, [pc, #136]	; (800b9b4 <vTaskStartScheduler+0xc8>)
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d002      	beq.n	800b936 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b930:	2301      	movs	r3, #1
 800b932:	617b      	str	r3, [r7, #20]
 800b934:	e001      	b.n	800b93a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b936:	2300      	movs	r3, #0
 800b938:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b93a:	697b      	ldr	r3, [r7, #20]
 800b93c:	2b01      	cmp	r3, #1
 800b93e:	d102      	bne.n	800b946 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b940:	f000 fe20 	bl	800c584 <xTimerCreateTimerTask>
 800b944:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b946:	697b      	ldr	r3, [r7, #20]
 800b948:	2b01      	cmp	r3, #1
 800b94a:	d11b      	bne.n	800b984 <vTaskStartScheduler+0x98>
	__asm volatile
 800b94c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b950:	f383 8811 	msr	BASEPRI, r3
 800b954:	f3bf 8f6f 	isb	sy
 800b958:	f3bf 8f4f 	dsb	sy
 800b95c:	613b      	str	r3, [r7, #16]
}
 800b95e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b960:	4b15      	ldr	r3, [pc, #84]	; (800b9b8 <vTaskStartScheduler+0xcc>)
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	3354      	adds	r3, #84	; 0x54
 800b966:	4a15      	ldr	r2, [pc, #84]	; (800b9bc <vTaskStartScheduler+0xd0>)
 800b968:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b96a:	4b15      	ldr	r3, [pc, #84]	; (800b9c0 <vTaskStartScheduler+0xd4>)
 800b96c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b970:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b972:	4b14      	ldr	r3, [pc, #80]	; (800b9c4 <vTaskStartScheduler+0xd8>)
 800b974:	2201      	movs	r2, #1
 800b976:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b978:	4b13      	ldr	r3, [pc, #76]	; (800b9c8 <vTaskStartScheduler+0xdc>)
 800b97a:	2200      	movs	r2, #0
 800b97c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b97e:	f001 f9d7 	bl	800cd30 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b982:	e00e      	b.n	800b9a2 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b984:	697b      	ldr	r3, [r7, #20]
 800b986:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b98a:	d10a      	bne.n	800b9a2 <vTaskStartScheduler+0xb6>
	__asm volatile
 800b98c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b990:	f383 8811 	msr	BASEPRI, r3
 800b994:	f3bf 8f6f 	isb	sy
 800b998:	f3bf 8f4f 	dsb	sy
 800b99c:	60fb      	str	r3, [r7, #12]
}
 800b99e:	bf00      	nop
 800b9a0:	e7fe      	b.n	800b9a0 <vTaskStartScheduler+0xb4>
}
 800b9a2:	bf00      	nop
 800b9a4:	3718      	adds	r7, #24
 800b9a6:	46bd      	mov	sp, r7
 800b9a8:	bd80      	pop	{r7, pc}
 800b9aa:	bf00      	nop
 800b9ac:	0800d6cc 	.word	0x0800d6cc
 800b9b0:	0800c015 	.word	0x0800c015
 800b9b4:	200010f8 	.word	0x200010f8
 800b9b8:	20000c00 	.word	0x20000c00
 800b9bc:	20000014 	.word	0x20000014
 800b9c0:	200010f4 	.word	0x200010f4
 800b9c4:	200010e0 	.word	0x200010e0
 800b9c8:	200010d8 	.word	0x200010d8

0800b9cc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b9cc:	b480      	push	{r7}
 800b9ce:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b9d0:	4b04      	ldr	r3, [pc, #16]	; (800b9e4 <vTaskSuspendAll+0x18>)
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	3301      	adds	r3, #1
 800b9d6:	4a03      	ldr	r2, [pc, #12]	; (800b9e4 <vTaskSuspendAll+0x18>)
 800b9d8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b9da:	bf00      	nop
 800b9dc:	46bd      	mov	sp, r7
 800b9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9e2:	4770      	bx	lr
 800b9e4:	200010fc 	.word	0x200010fc

0800b9e8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b9e8:	b580      	push	{r7, lr}
 800b9ea:	b084      	sub	sp, #16
 800b9ec:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b9ee:	2300      	movs	r3, #0
 800b9f0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b9f2:	2300      	movs	r3, #0
 800b9f4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b9f6:	4b42      	ldr	r3, [pc, #264]	; (800bb00 <xTaskResumeAll+0x118>)
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d10a      	bne.n	800ba14 <xTaskResumeAll+0x2c>
	__asm volatile
 800b9fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba02:	f383 8811 	msr	BASEPRI, r3
 800ba06:	f3bf 8f6f 	isb	sy
 800ba0a:	f3bf 8f4f 	dsb	sy
 800ba0e:	603b      	str	r3, [r7, #0]
}
 800ba10:	bf00      	nop
 800ba12:	e7fe      	b.n	800ba12 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ba14:	f001 fa2e 	bl	800ce74 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ba18:	4b39      	ldr	r3, [pc, #228]	; (800bb00 <xTaskResumeAll+0x118>)
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	3b01      	subs	r3, #1
 800ba1e:	4a38      	ldr	r2, [pc, #224]	; (800bb00 <xTaskResumeAll+0x118>)
 800ba20:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ba22:	4b37      	ldr	r3, [pc, #220]	; (800bb00 <xTaskResumeAll+0x118>)
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d162      	bne.n	800baf0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ba2a:	4b36      	ldr	r3, [pc, #216]	; (800bb04 <xTaskResumeAll+0x11c>)
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d05e      	beq.n	800baf0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ba32:	e02f      	b.n	800ba94 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ba34:	4b34      	ldr	r3, [pc, #208]	; (800bb08 <xTaskResumeAll+0x120>)
 800ba36:	68db      	ldr	r3, [r3, #12]
 800ba38:	68db      	ldr	r3, [r3, #12]
 800ba3a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	3318      	adds	r3, #24
 800ba40:	4618      	mov	r0, r3
 800ba42:	f7fe fce3 	bl	800a40c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	3304      	adds	r3, #4
 800ba4a:	4618      	mov	r0, r3
 800ba4c:	f7fe fcde 	bl	800a40c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba54:	4b2d      	ldr	r3, [pc, #180]	; (800bb0c <xTaskResumeAll+0x124>)
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	429a      	cmp	r2, r3
 800ba5a:	d903      	bls.n	800ba64 <xTaskResumeAll+0x7c>
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba60:	4a2a      	ldr	r2, [pc, #168]	; (800bb0c <xTaskResumeAll+0x124>)
 800ba62:	6013      	str	r3, [r2, #0]
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba68:	4613      	mov	r3, r2
 800ba6a:	009b      	lsls	r3, r3, #2
 800ba6c:	4413      	add	r3, r2
 800ba6e:	009b      	lsls	r3, r3, #2
 800ba70:	4a27      	ldr	r2, [pc, #156]	; (800bb10 <xTaskResumeAll+0x128>)
 800ba72:	441a      	add	r2, r3
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	3304      	adds	r3, #4
 800ba78:	4619      	mov	r1, r3
 800ba7a:	4610      	mov	r0, r2
 800ba7c:	f7fe fc69 	bl	800a352 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba84:	4b23      	ldr	r3, [pc, #140]	; (800bb14 <xTaskResumeAll+0x12c>)
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba8a:	429a      	cmp	r2, r3
 800ba8c:	d302      	bcc.n	800ba94 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800ba8e:	4b22      	ldr	r3, [pc, #136]	; (800bb18 <xTaskResumeAll+0x130>)
 800ba90:	2201      	movs	r2, #1
 800ba92:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ba94:	4b1c      	ldr	r3, [pc, #112]	; (800bb08 <xTaskResumeAll+0x120>)
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d1cb      	bne.n	800ba34 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d001      	beq.n	800baa6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800baa2:	f000 fb71 	bl	800c188 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800baa6:	4b1d      	ldr	r3, [pc, #116]	; (800bb1c <xTaskResumeAll+0x134>)
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d010      	beq.n	800bad4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800bab2:	f000 f859 	bl	800bb68 <xTaskIncrementTick>
 800bab6:	4603      	mov	r3, r0
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d002      	beq.n	800bac2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800babc:	4b16      	ldr	r3, [pc, #88]	; (800bb18 <xTaskResumeAll+0x130>)
 800babe:	2201      	movs	r2, #1
 800bac0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	3b01      	subs	r3, #1
 800bac6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d1f1      	bne.n	800bab2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800bace:	4b13      	ldr	r3, [pc, #76]	; (800bb1c <xTaskResumeAll+0x134>)
 800bad0:	2200      	movs	r2, #0
 800bad2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800bad4:	4b10      	ldr	r3, [pc, #64]	; (800bb18 <xTaskResumeAll+0x130>)
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d009      	beq.n	800baf0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800badc:	2301      	movs	r3, #1
 800bade:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800bae0:	4b0f      	ldr	r3, [pc, #60]	; (800bb20 <xTaskResumeAll+0x138>)
 800bae2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bae6:	601a      	str	r2, [r3, #0]
 800bae8:	f3bf 8f4f 	dsb	sy
 800baec:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800baf0:	f001 f9f0 	bl	800ced4 <vPortExitCritical>

	return xAlreadyYielded;
 800baf4:	68bb      	ldr	r3, [r7, #8]
}
 800baf6:	4618      	mov	r0, r3
 800baf8:	3710      	adds	r7, #16
 800bafa:	46bd      	mov	sp, r7
 800bafc:	bd80      	pop	{r7, pc}
 800bafe:	bf00      	nop
 800bb00:	200010fc 	.word	0x200010fc
 800bb04:	200010d4 	.word	0x200010d4
 800bb08:	20001094 	.word	0x20001094
 800bb0c:	200010dc 	.word	0x200010dc
 800bb10:	20000c04 	.word	0x20000c04
 800bb14:	20000c00 	.word	0x20000c00
 800bb18:	200010e8 	.word	0x200010e8
 800bb1c:	200010e4 	.word	0x200010e4
 800bb20:	e000ed04 	.word	0xe000ed04

0800bb24 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800bb24:	b480      	push	{r7}
 800bb26:	b083      	sub	sp, #12
 800bb28:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800bb2a:	4b05      	ldr	r3, [pc, #20]	; (800bb40 <xTaskGetTickCount+0x1c>)
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800bb30:	687b      	ldr	r3, [r7, #4]
}
 800bb32:	4618      	mov	r0, r3
 800bb34:	370c      	adds	r7, #12
 800bb36:	46bd      	mov	sp, r7
 800bb38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb3c:	4770      	bx	lr
 800bb3e:	bf00      	nop
 800bb40:	200010d8 	.word	0x200010d8

0800bb44 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800bb44:	b580      	push	{r7, lr}
 800bb46:	b082      	sub	sp, #8
 800bb48:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bb4a:	f001 fa75 	bl	800d038 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800bb4e:	2300      	movs	r3, #0
 800bb50:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800bb52:	4b04      	ldr	r3, [pc, #16]	; (800bb64 <xTaskGetTickCountFromISR+0x20>)
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800bb58:	683b      	ldr	r3, [r7, #0]
}
 800bb5a:	4618      	mov	r0, r3
 800bb5c:	3708      	adds	r7, #8
 800bb5e:	46bd      	mov	sp, r7
 800bb60:	bd80      	pop	{r7, pc}
 800bb62:	bf00      	nop
 800bb64:	200010d8 	.word	0x200010d8

0800bb68 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800bb68:	b580      	push	{r7, lr}
 800bb6a:	b086      	sub	sp, #24
 800bb6c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800bb6e:	2300      	movs	r3, #0
 800bb70:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bb72:	4b4f      	ldr	r3, [pc, #316]	; (800bcb0 <xTaskIncrementTick+0x148>)
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	f040 808f 	bne.w	800bc9a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800bb7c:	4b4d      	ldr	r3, [pc, #308]	; (800bcb4 <xTaskIncrementTick+0x14c>)
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	3301      	adds	r3, #1
 800bb82:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800bb84:	4a4b      	ldr	r2, [pc, #300]	; (800bcb4 <xTaskIncrementTick+0x14c>)
 800bb86:	693b      	ldr	r3, [r7, #16]
 800bb88:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800bb8a:	693b      	ldr	r3, [r7, #16]
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d120      	bne.n	800bbd2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800bb90:	4b49      	ldr	r3, [pc, #292]	; (800bcb8 <xTaskIncrementTick+0x150>)
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d00a      	beq.n	800bbb0 <xTaskIncrementTick+0x48>
	__asm volatile
 800bb9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb9e:	f383 8811 	msr	BASEPRI, r3
 800bba2:	f3bf 8f6f 	isb	sy
 800bba6:	f3bf 8f4f 	dsb	sy
 800bbaa:	603b      	str	r3, [r7, #0]
}
 800bbac:	bf00      	nop
 800bbae:	e7fe      	b.n	800bbae <xTaskIncrementTick+0x46>
 800bbb0:	4b41      	ldr	r3, [pc, #260]	; (800bcb8 <xTaskIncrementTick+0x150>)
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	60fb      	str	r3, [r7, #12]
 800bbb6:	4b41      	ldr	r3, [pc, #260]	; (800bcbc <xTaskIncrementTick+0x154>)
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	4a3f      	ldr	r2, [pc, #252]	; (800bcb8 <xTaskIncrementTick+0x150>)
 800bbbc:	6013      	str	r3, [r2, #0]
 800bbbe:	4a3f      	ldr	r2, [pc, #252]	; (800bcbc <xTaskIncrementTick+0x154>)
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	6013      	str	r3, [r2, #0]
 800bbc4:	4b3e      	ldr	r3, [pc, #248]	; (800bcc0 <xTaskIncrementTick+0x158>)
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	3301      	adds	r3, #1
 800bbca:	4a3d      	ldr	r2, [pc, #244]	; (800bcc0 <xTaskIncrementTick+0x158>)
 800bbcc:	6013      	str	r3, [r2, #0]
 800bbce:	f000 fadb 	bl	800c188 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800bbd2:	4b3c      	ldr	r3, [pc, #240]	; (800bcc4 <xTaskIncrementTick+0x15c>)
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	693a      	ldr	r2, [r7, #16]
 800bbd8:	429a      	cmp	r2, r3
 800bbda:	d349      	bcc.n	800bc70 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bbdc:	4b36      	ldr	r3, [pc, #216]	; (800bcb8 <xTaskIncrementTick+0x150>)
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d104      	bne.n	800bbf0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bbe6:	4b37      	ldr	r3, [pc, #220]	; (800bcc4 <xTaskIncrementTick+0x15c>)
 800bbe8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bbec:	601a      	str	r2, [r3, #0]
					break;
 800bbee:	e03f      	b.n	800bc70 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bbf0:	4b31      	ldr	r3, [pc, #196]	; (800bcb8 <xTaskIncrementTick+0x150>)
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	68db      	ldr	r3, [r3, #12]
 800bbf6:	68db      	ldr	r3, [r3, #12]
 800bbf8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800bbfa:	68bb      	ldr	r3, [r7, #8]
 800bbfc:	685b      	ldr	r3, [r3, #4]
 800bbfe:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800bc00:	693a      	ldr	r2, [r7, #16]
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	429a      	cmp	r2, r3
 800bc06:	d203      	bcs.n	800bc10 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800bc08:	4a2e      	ldr	r2, [pc, #184]	; (800bcc4 <xTaskIncrementTick+0x15c>)
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800bc0e:	e02f      	b.n	800bc70 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bc10:	68bb      	ldr	r3, [r7, #8]
 800bc12:	3304      	adds	r3, #4
 800bc14:	4618      	mov	r0, r3
 800bc16:	f7fe fbf9 	bl	800a40c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800bc1a:	68bb      	ldr	r3, [r7, #8]
 800bc1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d004      	beq.n	800bc2c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bc22:	68bb      	ldr	r3, [r7, #8]
 800bc24:	3318      	adds	r3, #24
 800bc26:	4618      	mov	r0, r3
 800bc28:	f7fe fbf0 	bl	800a40c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800bc2c:	68bb      	ldr	r3, [r7, #8]
 800bc2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc30:	4b25      	ldr	r3, [pc, #148]	; (800bcc8 <xTaskIncrementTick+0x160>)
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	429a      	cmp	r2, r3
 800bc36:	d903      	bls.n	800bc40 <xTaskIncrementTick+0xd8>
 800bc38:	68bb      	ldr	r3, [r7, #8]
 800bc3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc3c:	4a22      	ldr	r2, [pc, #136]	; (800bcc8 <xTaskIncrementTick+0x160>)
 800bc3e:	6013      	str	r3, [r2, #0]
 800bc40:	68bb      	ldr	r3, [r7, #8]
 800bc42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc44:	4613      	mov	r3, r2
 800bc46:	009b      	lsls	r3, r3, #2
 800bc48:	4413      	add	r3, r2
 800bc4a:	009b      	lsls	r3, r3, #2
 800bc4c:	4a1f      	ldr	r2, [pc, #124]	; (800bccc <xTaskIncrementTick+0x164>)
 800bc4e:	441a      	add	r2, r3
 800bc50:	68bb      	ldr	r3, [r7, #8]
 800bc52:	3304      	adds	r3, #4
 800bc54:	4619      	mov	r1, r3
 800bc56:	4610      	mov	r0, r2
 800bc58:	f7fe fb7b 	bl	800a352 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bc5c:	68bb      	ldr	r3, [r7, #8]
 800bc5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc60:	4b1b      	ldr	r3, [pc, #108]	; (800bcd0 <xTaskIncrementTick+0x168>)
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc66:	429a      	cmp	r2, r3
 800bc68:	d3b8      	bcc.n	800bbdc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800bc6a:	2301      	movs	r3, #1
 800bc6c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bc6e:	e7b5      	b.n	800bbdc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800bc70:	4b17      	ldr	r3, [pc, #92]	; (800bcd0 <xTaskIncrementTick+0x168>)
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc76:	4915      	ldr	r1, [pc, #84]	; (800bccc <xTaskIncrementTick+0x164>)
 800bc78:	4613      	mov	r3, r2
 800bc7a:	009b      	lsls	r3, r3, #2
 800bc7c:	4413      	add	r3, r2
 800bc7e:	009b      	lsls	r3, r3, #2
 800bc80:	440b      	add	r3, r1
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	2b01      	cmp	r3, #1
 800bc86:	d901      	bls.n	800bc8c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800bc88:	2301      	movs	r3, #1
 800bc8a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800bc8c:	4b11      	ldr	r3, [pc, #68]	; (800bcd4 <xTaskIncrementTick+0x16c>)
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d007      	beq.n	800bca4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800bc94:	2301      	movs	r3, #1
 800bc96:	617b      	str	r3, [r7, #20]
 800bc98:	e004      	b.n	800bca4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800bc9a:	4b0f      	ldr	r3, [pc, #60]	; (800bcd8 <xTaskIncrementTick+0x170>)
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	3301      	adds	r3, #1
 800bca0:	4a0d      	ldr	r2, [pc, #52]	; (800bcd8 <xTaskIncrementTick+0x170>)
 800bca2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800bca4:	697b      	ldr	r3, [r7, #20]
}
 800bca6:	4618      	mov	r0, r3
 800bca8:	3718      	adds	r7, #24
 800bcaa:	46bd      	mov	sp, r7
 800bcac:	bd80      	pop	{r7, pc}
 800bcae:	bf00      	nop
 800bcb0:	200010fc 	.word	0x200010fc
 800bcb4:	200010d8 	.word	0x200010d8
 800bcb8:	2000108c 	.word	0x2000108c
 800bcbc:	20001090 	.word	0x20001090
 800bcc0:	200010ec 	.word	0x200010ec
 800bcc4:	200010f4 	.word	0x200010f4
 800bcc8:	200010dc 	.word	0x200010dc
 800bccc:	20000c04 	.word	0x20000c04
 800bcd0:	20000c00 	.word	0x20000c00
 800bcd4:	200010e8 	.word	0x200010e8
 800bcd8:	200010e4 	.word	0x200010e4

0800bcdc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800bcdc:	b480      	push	{r7}
 800bcde:	b085      	sub	sp, #20
 800bce0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800bce2:	4b2a      	ldr	r3, [pc, #168]	; (800bd8c <vTaskSwitchContext+0xb0>)
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d003      	beq.n	800bcf2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800bcea:	4b29      	ldr	r3, [pc, #164]	; (800bd90 <vTaskSwitchContext+0xb4>)
 800bcec:	2201      	movs	r2, #1
 800bcee:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800bcf0:	e046      	b.n	800bd80 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800bcf2:	4b27      	ldr	r3, [pc, #156]	; (800bd90 <vTaskSwitchContext+0xb4>)
 800bcf4:	2200      	movs	r2, #0
 800bcf6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bcf8:	4b26      	ldr	r3, [pc, #152]	; (800bd94 <vTaskSwitchContext+0xb8>)
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	60fb      	str	r3, [r7, #12]
 800bcfe:	e010      	b.n	800bd22 <vTaskSwitchContext+0x46>
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d10a      	bne.n	800bd1c <vTaskSwitchContext+0x40>
	__asm volatile
 800bd06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd0a:	f383 8811 	msr	BASEPRI, r3
 800bd0e:	f3bf 8f6f 	isb	sy
 800bd12:	f3bf 8f4f 	dsb	sy
 800bd16:	607b      	str	r3, [r7, #4]
}
 800bd18:	bf00      	nop
 800bd1a:	e7fe      	b.n	800bd1a <vTaskSwitchContext+0x3e>
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	3b01      	subs	r3, #1
 800bd20:	60fb      	str	r3, [r7, #12]
 800bd22:	491d      	ldr	r1, [pc, #116]	; (800bd98 <vTaskSwitchContext+0xbc>)
 800bd24:	68fa      	ldr	r2, [r7, #12]
 800bd26:	4613      	mov	r3, r2
 800bd28:	009b      	lsls	r3, r3, #2
 800bd2a:	4413      	add	r3, r2
 800bd2c:	009b      	lsls	r3, r3, #2
 800bd2e:	440b      	add	r3, r1
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d0e4      	beq.n	800bd00 <vTaskSwitchContext+0x24>
 800bd36:	68fa      	ldr	r2, [r7, #12]
 800bd38:	4613      	mov	r3, r2
 800bd3a:	009b      	lsls	r3, r3, #2
 800bd3c:	4413      	add	r3, r2
 800bd3e:	009b      	lsls	r3, r3, #2
 800bd40:	4a15      	ldr	r2, [pc, #84]	; (800bd98 <vTaskSwitchContext+0xbc>)
 800bd42:	4413      	add	r3, r2
 800bd44:	60bb      	str	r3, [r7, #8]
 800bd46:	68bb      	ldr	r3, [r7, #8]
 800bd48:	685b      	ldr	r3, [r3, #4]
 800bd4a:	685a      	ldr	r2, [r3, #4]
 800bd4c:	68bb      	ldr	r3, [r7, #8]
 800bd4e:	605a      	str	r2, [r3, #4]
 800bd50:	68bb      	ldr	r3, [r7, #8]
 800bd52:	685a      	ldr	r2, [r3, #4]
 800bd54:	68bb      	ldr	r3, [r7, #8]
 800bd56:	3308      	adds	r3, #8
 800bd58:	429a      	cmp	r2, r3
 800bd5a:	d104      	bne.n	800bd66 <vTaskSwitchContext+0x8a>
 800bd5c:	68bb      	ldr	r3, [r7, #8]
 800bd5e:	685b      	ldr	r3, [r3, #4]
 800bd60:	685a      	ldr	r2, [r3, #4]
 800bd62:	68bb      	ldr	r3, [r7, #8]
 800bd64:	605a      	str	r2, [r3, #4]
 800bd66:	68bb      	ldr	r3, [r7, #8]
 800bd68:	685b      	ldr	r3, [r3, #4]
 800bd6a:	68db      	ldr	r3, [r3, #12]
 800bd6c:	4a0b      	ldr	r2, [pc, #44]	; (800bd9c <vTaskSwitchContext+0xc0>)
 800bd6e:	6013      	str	r3, [r2, #0]
 800bd70:	4a08      	ldr	r2, [pc, #32]	; (800bd94 <vTaskSwitchContext+0xb8>)
 800bd72:	68fb      	ldr	r3, [r7, #12]
 800bd74:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800bd76:	4b09      	ldr	r3, [pc, #36]	; (800bd9c <vTaskSwitchContext+0xc0>)
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	3354      	adds	r3, #84	; 0x54
 800bd7c:	4a08      	ldr	r2, [pc, #32]	; (800bda0 <vTaskSwitchContext+0xc4>)
 800bd7e:	6013      	str	r3, [r2, #0]
}
 800bd80:	bf00      	nop
 800bd82:	3714      	adds	r7, #20
 800bd84:	46bd      	mov	sp, r7
 800bd86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd8a:	4770      	bx	lr
 800bd8c:	200010fc 	.word	0x200010fc
 800bd90:	200010e8 	.word	0x200010e8
 800bd94:	200010dc 	.word	0x200010dc
 800bd98:	20000c04 	.word	0x20000c04
 800bd9c:	20000c00 	.word	0x20000c00
 800bda0:	20000014 	.word	0x20000014

0800bda4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800bda4:	b580      	push	{r7, lr}
 800bda6:	b084      	sub	sp, #16
 800bda8:	af00      	add	r7, sp, #0
 800bdaa:	6078      	str	r0, [r7, #4]
 800bdac:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d10a      	bne.n	800bdca <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800bdb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdb8:	f383 8811 	msr	BASEPRI, r3
 800bdbc:	f3bf 8f6f 	isb	sy
 800bdc0:	f3bf 8f4f 	dsb	sy
 800bdc4:	60fb      	str	r3, [r7, #12]
}
 800bdc6:	bf00      	nop
 800bdc8:	e7fe      	b.n	800bdc8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bdca:	4b07      	ldr	r3, [pc, #28]	; (800bde8 <vTaskPlaceOnEventList+0x44>)
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	3318      	adds	r3, #24
 800bdd0:	4619      	mov	r1, r3
 800bdd2:	6878      	ldr	r0, [r7, #4]
 800bdd4:	f7fe fae1 	bl	800a39a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800bdd8:	2101      	movs	r1, #1
 800bdda:	6838      	ldr	r0, [r7, #0]
 800bddc:	f000 fb7e 	bl	800c4dc <prvAddCurrentTaskToDelayedList>
}
 800bde0:	bf00      	nop
 800bde2:	3710      	adds	r7, #16
 800bde4:	46bd      	mov	sp, r7
 800bde6:	bd80      	pop	{r7, pc}
 800bde8:	20000c00 	.word	0x20000c00

0800bdec <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800bdec:	b580      	push	{r7, lr}
 800bdee:	b086      	sub	sp, #24
 800bdf0:	af00      	add	r7, sp, #0
 800bdf2:	60f8      	str	r0, [r7, #12]
 800bdf4:	60b9      	str	r1, [r7, #8]
 800bdf6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d10a      	bne.n	800be14 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800bdfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be02:	f383 8811 	msr	BASEPRI, r3
 800be06:	f3bf 8f6f 	isb	sy
 800be0a:	f3bf 8f4f 	dsb	sy
 800be0e:	617b      	str	r3, [r7, #20]
}
 800be10:	bf00      	nop
 800be12:	e7fe      	b.n	800be12 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800be14:	4b0a      	ldr	r3, [pc, #40]	; (800be40 <vTaskPlaceOnEventListRestricted+0x54>)
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	3318      	adds	r3, #24
 800be1a:	4619      	mov	r1, r3
 800be1c:	68f8      	ldr	r0, [r7, #12]
 800be1e:	f7fe fa98 	bl	800a352 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	2b00      	cmp	r3, #0
 800be26:	d002      	beq.n	800be2e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800be28:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800be2c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800be2e:	6879      	ldr	r1, [r7, #4]
 800be30:	68b8      	ldr	r0, [r7, #8]
 800be32:	f000 fb53 	bl	800c4dc <prvAddCurrentTaskToDelayedList>
	}
 800be36:	bf00      	nop
 800be38:	3718      	adds	r7, #24
 800be3a:	46bd      	mov	sp, r7
 800be3c:	bd80      	pop	{r7, pc}
 800be3e:	bf00      	nop
 800be40:	20000c00 	.word	0x20000c00

0800be44 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800be44:	b580      	push	{r7, lr}
 800be46:	b086      	sub	sp, #24
 800be48:	af00      	add	r7, sp, #0
 800be4a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	68db      	ldr	r3, [r3, #12]
 800be50:	68db      	ldr	r3, [r3, #12]
 800be52:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800be54:	693b      	ldr	r3, [r7, #16]
 800be56:	2b00      	cmp	r3, #0
 800be58:	d10a      	bne.n	800be70 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800be5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be5e:	f383 8811 	msr	BASEPRI, r3
 800be62:	f3bf 8f6f 	isb	sy
 800be66:	f3bf 8f4f 	dsb	sy
 800be6a:	60fb      	str	r3, [r7, #12]
}
 800be6c:	bf00      	nop
 800be6e:	e7fe      	b.n	800be6e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800be70:	693b      	ldr	r3, [r7, #16]
 800be72:	3318      	adds	r3, #24
 800be74:	4618      	mov	r0, r3
 800be76:	f7fe fac9 	bl	800a40c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800be7a:	4b1e      	ldr	r3, [pc, #120]	; (800bef4 <xTaskRemoveFromEventList+0xb0>)
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d11d      	bne.n	800bebe <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800be82:	693b      	ldr	r3, [r7, #16]
 800be84:	3304      	adds	r3, #4
 800be86:	4618      	mov	r0, r3
 800be88:	f7fe fac0 	bl	800a40c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800be8c:	693b      	ldr	r3, [r7, #16]
 800be8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be90:	4b19      	ldr	r3, [pc, #100]	; (800bef8 <xTaskRemoveFromEventList+0xb4>)
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	429a      	cmp	r2, r3
 800be96:	d903      	bls.n	800bea0 <xTaskRemoveFromEventList+0x5c>
 800be98:	693b      	ldr	r3, [r7, #16]
 800be9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be9c:	4a16      	ldr	r2, [pc, #88]	; (800bef8 <xTaskRemoveFromEventList+0xb4>)
 800be9e:	6013      	str	r3, [r2, #0]
 800bea0:	693b      	ldr	r3, [r7, #16]
 800bea2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bea4:	4613      	mov	r3, r2
 800bea6:	009b      	lsls	r3, r3, #2
 800bea8:	4413      	add	r3, r2
 800beaa:	009b      	lsls	r3, r3, #2
 800beac:	4a13      	ldr	r2, [pc, #76]	; (800befc <xTaskRemoveFromEventList+0xb8>)
 800beae:	441a      	add	r2, r3
 800beb0:	693b      	ldr	r3, [r7, #16]
 800beb2:	3304      	adds	r3, #4
 800beb4:	4619      	mov	r1, r3
 800beb6:	4610      	mov	r0, r2
 800beb8:	f7fe fa4b 	bl	800a352 <vListInsertEnd>
 800bebc:	e005      	b.n	800beca <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800bebe:	693b      	ldr	r3, [r7, #16]
 800bec0:	3318      	adds	r3, #24
 800bec2:	4619      	mov	r1, r3
 800bec4:	480e      	ldr	r0, [pc, #56]	; (800bf00 <xTaskRemoveFromEventList+0xbc>)
 800bec6:	f7fe fa44 	bl	800a352 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800beca:	693b      	ldr	r3, [r7, #16]
 800becc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bece:	4b0d      	ldr	r3, [pc, #52]	; (800bf04 <xTaskRemoveFromEventList+0xc0>)
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bed4:	429a      	cmp	r2, r3
 800bed6:	d905      	bls.n	800bee4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800bed8:	2301      	movs	r3, #1
 800beda:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800bedc:	4b0a      	ldr	r3, [pc, #40]	; (800bf08 <xTaskRemoveFromEventList+0xc4>)
 800bede:	2201      	movs	r2, #1
 800bee0:	601a      	str	r2, [r3, #0]
 800bee2:	e001      	b.n	800bee8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800bee4:	2300      	movs	r3, #0
 800bee6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800bee8:	697b      	ldr	r3, [r7, #20]
}
 800beea:	4618      	mov	r0, r3
 800beec:	3718      	adds	r7, #24
 800beee:	46bd      	mov	sp, r7
 800bef0:	bd80      	pop	{r7, pc}
 800bef2:	bf00      	nop
 800bef4:	200010fc 	.word	0x200010fc
 800bef8:	200010dc 	.word	0x200010dc
 800befc:	20000c04 	.word	0x20000c04
 800bf00:	20001094 	.word	0x20001094
 800bf04:	20000c00 	.word	0x20000c00
 800bf08:	200010e8 	.word	0x200010e8

0800bf0c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800bf0c:	b480      	push	{r7}
 800bf0e:	b083      	sub	sp, #12
 800bf10:	af00      	add	r7, sp, #0
 800bf12:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800bf14:	4b06      	ldr	r3, [pc, #24]	; (800bf30 <vTaskInternalSetTimeOutState+0x24>)
 800bf16:	681a      	ldr	r2, [r3, #0]
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800bf1c:	4b05      	ldr	r3, [pc, #20]	; (800bf34 <vTaskInternalSetTimeOutState+0x28>)
 800bf1e:	681a      	ldr	r2, [r3, #0]
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	605a      	str	r2, [r3, #4]
}
 800bf24:	bf00      	nop
 800bf26:	370c      	adds	r7, #12
 800bf28:	46bd      	mov	sp, r7
 800bf2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf2e:	4770      	bx	lr
 800bf30:	200010ec 	.word	0x200010ec
 800bf34:	200010d8 	.word	0x200010d8

0800bf38 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800bf38:	b580      	push	{r7, lr}
 800bf3a:	b088      	sub	sp, #32
 800bf3c:	af00      	add	r7, sp, #0
 800bf3e:	6078      	str	r0, [r7, #4]
 800bf40:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d10a      	bne.n	800bf5e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800bf48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf4c:	f383 8811 	msr	BASEPRI, r3
 800bf50:	f3bf 8f6f 	isb	sy
 800bf54:	f3bf 8f4f 	dsb	sy
 800bf58:	613b      	str	r3, [r7, #16]
}
 800bf5a:	bf00      	nop
 800bf5c:	e7fe      	b.n	800bf5c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800bf5e:	683b      	ldr	r3, [r7, #0]
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d10a      	bne.n	800bf7a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800bf64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf68:	f383 8811 	msr	BASEPRI, r3
 800bf6c:	f3bf 8f6f 	isb	sy
 800bf70:	f3bf 8f4f 	dsb	sy
 800bf74:	60fb      	str	r3, [r7, #12]
}
 800bf76:	bf00      	nop
 800bf78:	e7fe      	b.n	800bf78 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800bf7a:	f000 ff7b 	bl	800ce74 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800bf7e:	4b1d      	ldr	r3, [pc, #116]	; (800bff4 <xTaskCheckForTimeOut+0xbc>)
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	685b      	ldr	r3, [r3, #4]
 800bf88:	69ba      	ldr	r2, [r7, #24]
 800bf8a:	1ad3      	subs	r3, r2, r3
 800bf8c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800bf8e:	683b      	ldr	r3, [r7, #0]
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bf96:	d102      	bne.n	800bf9e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800bf98:	2300      	movs	r3, #0
 800bf9a:	61fb      	str	r3, [r7, #28]
 800bf9c:	e023      	b.n	800bfe6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	681a      	ldr	r2, [r3, #0]
 800bfa2:	4b15      	ldr	r3, [pc, #84]	; (800bff8 <xTaskCheckForTimeOut+0xc0>)
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	429a      	cmp	r2, r3
 800bfa8:	d007      	beq.n	800bfba <xTaskCheckForTimeOut+0x82>
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	685b      	ldr	r3, [r3, #4]
 800bfae:	69ba      	ldr	r2, [r7, #24]
 800bfb0:	429a      	cmp	r2, r3
 800bfb2:	d302      	bcc.n	800bfba <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800bfb4:	2301      	movs	r3, #1
 800bfb6:	61fb      	str	r3, [r7, #28]
 800bfb8:	e015      	b.n	800bfe6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800bfba:	683b      	ldr	r3, [r7, #0]
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	697a      	ldr	r2, [r7, #20]
 800bfc0:	429a      	cmp	r2, r3
 800bfc2:	d20b      	bcs.n	800bfdc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800bfc4:	683b      	ldr	r3, [r7, #0]
 800bfc6:	681a      	ldr	r2, [r3, #0]
 800bfc8:	697b      	ldr	r3, [r7, #20]
 800bfca:	1ad2      	subs	r2, r2, r3
 800bfcc:	683b      	ldr	r3, [r7, #0]
 800bfce:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800bfd0:	6878      	ldr	r0, [r7, #4]
 800bfd2:	f7ff ff9b 	bl	800bf0c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800bfd6:	2300      	movs	r3, #0
 800bfd8:	61fb      	str	r3, [r7, #28]
 800bfda:	e004      	b.n	800bfe6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800bfdc:	683b      	ldr	r3, [r7, #0]
 800bfde:	2200      	movs	r2, #0
 800bfe0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800bfe2:	2301      	movs	r3, #1
 800bfe4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800bfe6:	f000 ff75 	bl	800ced4 <vPortExitCritical>

	return xReturn;
 800bfea:	69fb      	ldr	r3, [r7, #28]
}
 800bfec:	4618      	mov	r0, r3
 800bfee:	3720      	adds	r7, #32
 800bff0:	46bd      	mov	sp, r7
 800bff2:	bd80      	pop	{r7, pc}
 800bff4:	200010d8 	.word	0x200010d8
 800bff8:	200010ec 	.word	0x200010ec

0800bffc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800bffc:	b480      	push	{r7}
 800bffe:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c000:	4b03      	ldr	r3, [pc, #12]	; (800c010 <vTaskMissedYield+0x14>)
 800c002:	2201      	movs	r2, #1
 800c004:	601a      	str	r2, [r3, #0]
}
 800c006:	bf00      	nop
 800c008:	46bd      	mov	sp, r7
 800c00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c00e:	4770      	bx	lr
 800c010:	200010e8 	.word	0x200010e8

0800c014 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c014:	b580      	push	{r7, lr}
 800c016:	b082      	sub	sp, #8
 800c018:	af00      	add	r7, sp, #0
 800c01a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c01c:	f000 f852 	bl	800c0c4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c020:	4b06      	ldr	r3, [pc, #24]	; (800c03c <prvIdleTask+0x28>)
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	2b01      	cmp	r3, #1
 800c026:	d9f9      	bls.n	800c01c <prvIdleTask+0x8>
			{
				taskYIELD();
 800c028:	4b05      	ldr	r3, [pc, #20]	; (800c040 <prvIdleTask+0x2c>)
 800c02a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c02e:	601a      	str	r2, [r3, #0]
 800c030:	f3bf 8f4f 	dsb	sy
 800c034:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c038:	e7f0      	b.n	800c01c <prvIdleTask+0x8>
 800c03a:	bf00      	nop
 800c03c:	20000c04 	.word	0x20000c04
 800c040:	e000ed04 	.word	0xe000ed04

0800c044 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c044:	b580      	push	{r7, lr}
 800c046:	b082      	sub	sp, #8
 800c048:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c04a:	2300      	movs	r3, #0
 800c04c:	607b      	str	r3, [r7, #4]
 800c04e:	e00c      	b.n	800c06a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c050:	687a      	ldr	r2, [r7, #4]
 800c052:	4613      	mov	r3, r2
 800c054:	009b      	lsls	r3, r3, #2
 800c056:	4413      	add	r3, r2
 800c058:	009b      	lsls	r3, r3, #2
 800c05a:	4a12      	ldr	r2, [pc, #72]	; (800c0a4 <prvInitialiseTaskLists+0x60>)
 800c05c:	4413      	add	r3, r2
 800c05e:	4618      	mov	r0, r3
 800c060:	f7fe f94a 	bl	800a2f8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	3301      	adds	r3, #1
 800c068:	607b      	str	r3, [r7, #4]
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	2b37      	cmp	r3, #55	; 0x37
 800c06e:	d9ef      	bls.n	800c050 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c070:	480d      	ldr	r0, [pc, #52]	; (800c0a8 <prvInitialiseTaskLists+0x64>)
 800c072:	f7fe f941 	bl	800a2f8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c076:	480d      	ldr	r0, [pc, #52]	; (800c0ac <prvInitialiseTaskLists+0x68>)
 800c078:	f7fe f93e 	bl	800a2f8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c07c:	480c      	ldr	r0, [pc, #48]	; (800c0b0 <prvInitialiseTaskLists+0x6c>)
 800c07e:	f7fe f93b 	bl	800a2f8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c082:	480c      	ldr	r0, [pc, #48]	; (800c0b4 <prvInitialiseTaskLists+0x70>)
 800c084:	f7fe f938 	bl	800a2f8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c088:	480b      	ldr	r0, [pc, #44]	; (800c0b8 <prvInitialiseTaskLists+0x74>)
 800c08a:	f7fe f935 	bl	800a2f8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c08e:	4b0b      	ldr	r3, [pc, #44]	; (800c0bc <prvInitialiseTaskLists+0x78>)
 800c090:	4a05      	ldr	r2, [pc, #20]	; (800c0a8 <prvInitialiseTaskLists+0x64>)
 800c092:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c094:	4b0a      	ldr	r3, [pc, #40]	; (800c0c0 <prvInitialiseTaskLists+0x7c>)
 800c096:	4a05      	ldr	r2, [pc, #20]	; (800c0ac <prvInitialiseTaskLists+0x68>)
 800c098:	601a      	str	r2, [r3, #0]
}
 800c09a:	bf00      	nop
 800c09c:	3708      	adds	r7, #8
 800c09e:	46bd      	mov	sp, r7
 800c0a0:	bd80      	pop	{r7, pc}
 800c0a2:	bf00      	nop
 800c0a4:	20000c04 	.word	0x20000c04
 800c0a8:	20001064 	.word	0x20001064
 800c0ac:	20001078 	.word	0x20001078
 800c0b0:	20001094 	.word	0x20001094
 800c0b4:	200010a8 	.word	0x200010a8
 800c0b8:	200010c0 	.word	0x200010c0
 800c0bc:	2000108c 	.word	0x2000108c
 800c0c0:	20001090 	.word	0x20001090

0800c0c4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c0c4:	b580      	push	{r7, lr}
 800c0c6:	b082      	sub	sp, #8
 800c0c8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c0ca:	e019      	b.n	800c100 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c0cc:	f000 fed2 	bl	800ce74 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c0d0:	4b10      	ldr	r3, [pc, #64]	; (800c114 <prvCheckTasksWaitingTermination+0x50>)
 800c0d2:	68db      	ldr	r3, [r3, #12]
 800c0d4:	68db      	ldr	r3, [r3, #12]
 800c0d6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	3304      	adds	r3, #4
 800c0dc:	4618      	mov	r0, r3
 800c0de:	f7fe f995 	bl	800a40c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c0e2:	4b0d      	ldr	r3, [pc, #52]	; (800c118 <prvCheckTasksWaitingTermination+0x54>)
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	3b01      	subs	r3, #1
 800c0e8:	4a0b      	ldr	r2, [pc, #44]	; (800c118 <prvCheckTasksWaitingTermination+0x54>)
 800c0ea:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c0ec:	4b0b      	ldr	r3, [pc, #44]	; (800c11c <prvCheckTasksWaitingTermination+0x58>)
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	3b01      	subs	r3, #1
 800c0f2:	4a0a      	ldr	r2, [pc, #40]	; (800c11c <prvCheckTasksWaitingTermination+0x58>)
 800c0f4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c0f6:	f000 feed 	bl	800ced4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c0fa:	6878      	ldr	r0, [r7, #4]
 800c0fc:	f000 f810 	bl	800c120 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c100:	4b06      	ldr	r3, [pc, #24]	; (800c11c <prvCheckTasksWaitingTermination+0x58>)
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	2b00      	cmp	r3, #0
 800c106:	d1e1      	bne.n	800c0cc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c108:	bf00      	nop
 800c10a:	bf00      	nop
 800c10c:	3708      	adds	r7, #8
 800c10e:	46bd      	mov	sp, r7
 800c110:	bd80      	pop	{r7, pc}
 800c112:	bf00      	nop
 800c114:	200010a8 	.word	0x200010a8
 800c118:	200010d4 	.word	0x200010d4
 800c11c:	200010bc 	.word	0x200010bc

0800c120 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c120:	b580      	push	{r7, lr}
 800c122:	b084      	sub	sp, #16
 800c124:	af00      	add	r7, sp, #0
 800c126:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	3354      	adds	r3, #84	; 0x54
 800c12c:	4618      	mov	r0, r3
 800c12e:	f001 f9f7 	bl	800d520 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800c138:	2b00      	cmp	r3, #0
 800c13a:	d108      	bne.n	800c14e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c140:	4618      	mov	r0, r3
 800c142:	f001 f885 	bl	800d250 <vPortFree>
				vPortFree( pxTCB );
 800c146:	6878      	ldr	r0, [r7, #4]
 800c148:	f001 f882 	bl	800d250 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c14c:	e018      	b.n	800c180 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800c154:	2b01      	cmp	r3, #1
 800c156:	d103      	bne.n	800c160 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800c158:	6878      	ldr	r0, [r7, #4]
 800c15a:	f001 f879 	bl	800d250 <vPortFree>
	}
 800c15e:	e00f      	b.n	800c180 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800c166:	2b02      	cmp	r3, #2
 800c168:	d00a      	beq.n	800c180 <prvDeleteTCB+0x60>
	__asm volatile
 800c16a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c16e:	f383 8811 	msr	BASEPRI, r3
 800c172:	f3bf 8f6f 	isb	sy
 800c176:	f3bf 8f4f 	dsb	sy
 800c17a:	60fb      	str	r3, [r7, #12]
}
 800c17c:	bf00      	nop
 800c17e:	e7fe      	b.n	800c17e <prvDeleteTCB+0x5e>
	}
 800c180:	bf00      	nop
 800c182:	3710      	adds	r7, #16
 800c184:	46bd      	mov	sp, r7
 800c186:	bd80      	pop	{r7, pc}

0800c188 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c188:	b480      	push	{r7}
 800c18a:	b083      	sub	sp, #12
 800c18c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c18e:	4b0c      	ldr	r3, [pc, #48]	; (800c1c0 <prvResetNextTaskUnblockTime+0x38>)
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	2b00      	cmp	r3, #0
 800c196:	d104      	bne.n	800c1a2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c198:	4b0a      	ldr	r3, [pc, #40]	; (800c1c4 <prvResetNextTaskUnblockTime+0x3c>)
 800c19a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c19e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c1a0:	e008      	b.n	800c1b4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c1a2:	4b07      	ldr	r3, [pc, #28]	; (800c1c0 <prvResetNextTaskUnblockTime+0x38>)
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	68db      	ldr	r3, [r3, #12]
 800c1a8:	68db      	ldr	r3, [r3, #12]
 800c1aa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	685b      	ldr	r3, [r3, #4]
 800c1b0:	4a04      	ldr	r2, [pc, #16]	; (800c1c4 <prvResetNextTaskUnblockTime+0x3c>)
 800c1b2:	6013      	str	r3, [r2, #0]
}
 800c1b4:	bf00      	nop
 800c1b6:	370c      	adds	r7, #12
 800c1b8:	46bd      	mov	sp, r7
 800c1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1be:	4770      	bx	lr
 800c1c0:	2000108c 	.word	0x2000108c
 800c1c4:	200010f4 	.word	0x200010f4

0800c1c8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c1c8:	b480      	push	{r7}
 800c1ca:	b083      	sub	sp, #12
 800c1cc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c1ce:	4b0b      	ldr	r3, [pc, #44]	; (800c1fc <xTaskGetSchedulerState+0x34>)
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	d102      	bne.n	800c1dc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c1d6:	2301      	movs	r3, #1
 800c1d8:	607b      	str	r3, [r7, #4]
 800c1da:	e008      	b.n	800c1ee <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c1dc:	4b08      	ldr	r3, [pc, #32]	; (800c200 <xTaskGetSchedulerState+0x38>)
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d102      	bne.n	800c1ea <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c1e4:	2302      	movs	r3, #2
 800c1e6:	607b      	str	r3, [r7, #4]
 800c1e8:	e001      	b.n	800c1ee <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c1ea:	2300      	movs	r3, #0
 800c1ec:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c1ee:	687b      	ldr	r3, [r7, #4]
	}
 800c1f0:	4618      	mov	r0, r3
 800c1f2:	370c      	adds	r7, #12
 800c1f4:	46bd      	mov	sp, r7
 800c1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1fa:	4770      	bx	lr
 800c1fc:	200010e0 	.word	0x200010e0
 800c200:	200010fc 	.word	0x200010fc

0800c204 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800c204:	b580      	push	{r7, lr}
 800c206:	b084      	sub	sp, #16
 800c208:	af00      	add	r7, sp, #0
 800c20a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800c210:	2300      	movs	r3, #0
 800c212:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	2b00      	cmp	r3, #0
 800c218:	d051      	beq.n	800c2be <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800c21a:	68bb      	ldr	r3, [r7, #8]
 800c21c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c21e:	4b2a      	ldr	r3, [pc, #168]	; (800c2c8 <xTaskPriorityInherit+0xc4>)
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c224:	429a      	cmp	r2, r3
 800c226:	d241      	bcs.n	800c2ac <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c228:	68bb      	ldr	r3, [r7, #8]
 800c22a:	699b      	ldr	r3, [r3, #24]
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	db06      	blt.n	800c23e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c230:	4b25      	ldr	r3, [pc, #148]	; (800c2c8 <xTaskPriorityInherit+0xc4>)
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c236:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c23a:	68bb      	ldr	r3, [r7, #8]
 800c23c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800c23e:	68bb      	ldr	r3, [r7, #8]
 800c240:	6959      	ldr	r1, [r3, #20]
 800c242:	68bb      	ldr	r3, [r7, #8]
 800c244:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c246:	4613      	mov	r3, r2
 800c248:	009b      	lsls	r3, r3, #2
 800c24a:	4413      	add	r3, r2
 800c24c:	009b      	lsls	r3, r3, #2
 800c24e:	4a1f      	ldr	r2, [pc, #124]	; (800c2cc <xTaskPriorityInherit+0xc8>)
 800c250:	4413      	add	r3, r2
 800c252:	4299      	cmp	r1, r3
 800c254:	d122      	bne.n	800c29c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c256:	68bb      	ldr	r3, [r7, #8]
 800c258:	3304      	adds	r3, #4
 800c25a:	4618      	mov	r0, r3
 800c25c:	f7fe f8d6 	bl	800a40c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c260:	4b19      	ldr	r3, [pc, #100]	; (800c2c8 <xTaskPriorityInherit+0xc4>)
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c266:	68bb      	ldr	r3, [r7, #8]
 800c268:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800c26a:	68bb      	ldr	r3, [r7, #8]
 800c26c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c26e:	4b18      	ldr	r3, [pc, #96]	; (800c2d0 <xTaskPriorityInherit+0xcc>)
 800c270:	681b      	ldr	r3, [r3, #0]
 800c272:	429a      	cmp	r2, r3
 800c274:	d903      	bls.n	800c27e <xTaskPriorityInherit+0x7a>
 800c276:	68bb      	ldr	r3, [r7, #8]
 800c278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c27a:	4a15      	ldr	r2, [pc, #84]	; (800c2d0 <xTaskPriorityInherit+0xcc>)
 800c27c:	6013      	str	r3, [r2, #0]
 800c27e:	68bb      	ldr	r3, [r7, #8]
 800c280:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c282:	4613      	mov	r3, r2
 800c284:	009b      	lsls	r3, r3, #2
 800c286:	4413      	add	r3, r2
 800c288:	009b      	lsls	r3, r3, #2
 800c28a:	4a10      	ldr	r2, [pc, #64]	; (800c2cc <xTaskPriorityInherit+0xc8>)
 800c28c:	441a      	add	r2, r3
 800c28e:	68bb      	ldr	r3, [r7, #8]
 800c290:	3304      	adds	r3, #4
 800c292:	4619      	mov	r1, r3
 800c294:	4610      	mov	r0, r2
 800c296:	f7fe f85c 	bl	800a352 <vListInsertEnd>
 800c29a:	e004      	b.n	800c2a6 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c29c:	4b0a      	ldr	r3, [pc, #40]	; (800c2c8 <xTaskPriorityInherit+0xc4>)
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c2a2:	68bb      	ldr	r3, [r7, #8]
 800c2a4:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800c2a6:	2301      	movs	r3, #1
 800c2a8:	60fb      	str	r3, [r7, #12]
 800c2aa:	e008      	b.n	800c2be <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800c2ac:	68bb      	ldr	r3, [r7, #8]
 800c2ae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c2b0:	4b05      	ldr	r3, [pc, #20]	; (800c2c8 <xTaskPriorityInherit+0xc4>)
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2b6:	429a      	cmp	r2, r3
 800c2b8:	d201      	bcs.n	800c2be <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800c2ba:	2301      	movs	r3, #1
 800c2bc:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c2be:	68fb      	ldr	r3, [r7, #12]
	}
 800c2c0:	4618      	mov	r0, r3
 800c2c2:	3710      	adds	r7, #16
 800c2c4:	46bd      	mov	sp, r7
 800c2c6:	bd80      	pop	{r7, pc}
 800c2c8:	20000c00 	.word	0x20000c00
 800c2cc:	20000c04 	.word	0x20000c04
 800c2d0:	200010dc 	.word	0x200010dc

0800c2d4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c2d4:	b580      	push	{r7, lr}
 800c2d6:	b086      	sub	sp, #24
 800c2d8:	af00      	add	r7, sp, #0
 800c2da:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c2e0:	2300      	movs	r3, #0
 800c2e2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	d056      	beq.n	800c398 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c2ea:	4b2e      	ldr	r3, [pc, #184]	; (800c3a4 <xTaskPriorityDisinherit+0xd0>)
 800c2ec:	681b      	ldr	r3, [r3, #0]
 800c2ee:	693a      	ldr	r2, [r7, #16]
 800c2f0:	429a      	cmp	r2, r3
 800c2f2:	d00a      	beq.n	800c30a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800c2f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2f8:	f383 8811 	msr	BASEPRI, r3
 800c2fc:	f3bf 8f6f 	isb	sy
 800c300:	f3bf 8f4f 	dsb	sy
 800c304:	60fb      	str	r3, [r7, #12]
}
 800c306:	bf00      	nop
 800c308:	e7fe      	b.n	800c308 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800c30a:	693b      	ldr	r3, [r7, #16]
 800c30c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d10a      	bne.n	800c328 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800c312:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c316:	f383 8811 	msr	BASEPRI, r3
 800c31a:	f3bf 8f6f 	isb	sy
 800c31e:	f3bf 8f4f 	dsb	sy
 800c322:	60bb      	str	r3, [r7, #8]
}
 800c324:	bf00      	nop
 800c326:	e7fe      	b.n	800c326 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800c328:	693b      	ldr	r3, [r7, #16]
 800c32a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c32c:	1e5a      	subs	r2, r3, #1
 800c32e:	693b      	ldr	r3, [r7, #16]
 800c330:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c332:	693b      	ldr	r3, [r7, #16]
 800c334:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c336:	693b      	ldr	r3, [r7, #16]
 800c338:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c33a:	429a      	cmp	r2, r3
 800c33c:	d02c      	beq.n	800c398 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c33e:	693b      	ldr	r3, [r7, #16]
 800c340:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c342:	2b00      	cmp	r3, #0
 800c344:	d128      	bne.n	800c398 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c346:	693b      	ldr	r3, [r7, #16]
 800c348:	3304      	adds	r3, #4
 800c34a:	4618      	mov	r0, r3
 800c34c:	f7fe f85e 	bl	800a40c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c350:	693b      	ldr	r3, [r7, #16]
 800c352:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c354:	693b      	ldr	r3, [r7, #16]
 800c356:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c358:	693b      	ldr	r3, [r7, #16]
 800c35a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c35c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c360:	693b      	ldr	r3, [r7, #16]
 800c362:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c364:	693b      	ldr	r3, [r7, #16]
 800c366:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c368:	4b0f      	ldr	r3, [pc, #60]	; (800c3a8 <xTaskPriorityDisinherit+0xd4>)
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	429a      	cmp	r2, r3
 800c36e:	d903      	bls.n	800c378 <xTaskPriorityDisinherit+0xa4>
 800c370:	693b      	ldr	r3, [r7, #16]
 800c372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c374:	4a0c      	ldr	r2, [pc, #48]	; (800c3a8 <xTaskPriorityDisinherit+0xd4>)
 800c376:	6013      	str	r3, [r2, #0]
 800c378:	693b      	ldr	r3, [r7, #16]
 800c37a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c37c:	4613      	mov	r3, r2
 800c37e:	009b      	lsls	r3, r3, #2
 800c380:	4413      	add	r3, r2
 800c382:	009b      	lsls	r3, r3, #2
 800c384:	4a09      	ldr	r2, [pc, #36]	; (800c3ac <xTaskPriorityDisinherit+0xd8>)
 800c386:	441a      	add	r2, r3
 800c388:	693b      	ldr	r3, [r7, #16]
 800c38a:	3304      	adds	r3, #4
 800c38c:	4619      	mov	r1, r3
 800c38e:	4610      	mov	r0, r2
 800c390:	f7fd ffdf 	bl	800a352 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c394:	2301      	movs	r3, #1
 800c396:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c398:	697b      	ldr	r3, [r7, #20]
	}
 800c39a:	4618      	mov	r0, r3
 800c39c:	3718      	adds	r7, #24
 800c39e:	46bd      	mov	sp, r7
 800c3a0:	bd80      	pop	{r7, pc}
 800c3a2:	bf00      	nop
 800c3a4:	20000c00 	.word	0x20000c00
 800c3a8:	200010dc 	.word	0x200010dc
 800c3ac:	20000c04 	.word	0x20000c04

0800c3b0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800c3b0:	b580      	push	{r7, lr}
 800c3b2:	b088      	sub	sp, #32
 800c3b4:	af00      	add	r7, sp, #0
 800c3b6:	6078      	str	r0, [r7, #4]
 800c3b8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800c3be:	2301      	movs	r3, #1
 800c3c0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	d06a      	beq.n	800c49e <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800c3c8:	69bb      	ldr	r3, [r7, #24]
 800c3ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d10a      	bne.n	800c3e6 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800c3d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3d4:	f383 8811 	msr	BASEPRI, r3
 800c3d8:	f3bf 8f6f 	isb	sy
 800c3dc:	f3bf 8f4f 	dsb	sy
 800c3e0:	60fb      	str	r3, [r7, #12]
}
 800c3e2:	bf00      	nop
 800c3e4:	e7fe      	b.n	800c3e4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800c3e6:	69bb      	ldr	r3, [r7, #24]
 800c3e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c3ea:	683a      	ldr	r2, [r7, #0]
 800c3ec:	429a      	cmp	r2, r3
 800c3ee:	d902      	bls.n	800c3f6 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800c3f0:	683b      	ldr	r3, [r7, #0]
 800c3f2:	61fb      	str	r3, [r7, #28]
 800c3f4:	e002      	b.n	800c3fc <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800c3f6:	69bb      	ldr	r3, [r7, #24]
 800c3f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c3fa:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800c3fc:	69bb      	ldr	r3, [r7, #24]
 800c3fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c400:	69fa      	ldr	r2, [r7, #28]
 800c402:	429a      	cmp	r2, r3
 800c404:	d04b      	beq.n	800c49e <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800c406:	69bb      	ldr	r3, [r7, #24]
 800c408:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c40a:	697a      	ldr	r2, [r7, #20]
 800c40c:	429a      	cmp	r2, r3
 800c40e:	d146      	bne.n	800c49e <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800c410:	4b25      	ldr	r3, [pc, #148]	; (800c4a8 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	69ba      	ldr	r2, [r7, #24]
 800c416:	429a      	cmp	r2, r3
 800c418:	d10a      	bne.n	800c430 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800c41a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c41e:	f383 8811 	msr	BASEPRI, r3
 800c422:	f3bf 8f6f 	isb	sy
 800c426:	f3bf 8f4f 	dsb	sy
 800c42a:	60bb      	str	r3, [r7, #8]
}
 800c42c:	bf00      	nop
 800c42e:	e7fe      	b.n	800c42e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800c430:	69bb      	ldr	r3, [r7, #24]
 800c432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c434:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800c436:	69bb      	ldr	r3, [r7, #24]
 800c438:	69fa      	ldr	r2, [r7, #28]
 800c43a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c43c:	69bb      	ldr	r3, [r7, #24]
 800c43e:	699b      	ldr	r3, [r3, #24]
 800c440:	2b00      	cmp	r3, #0
 800c442:	db04      	blt.n	800c44e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c444:	69fb      	ldr	r3, [r7, #28]
 800c446:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c44a:	69bb      	ldr	r3, [r7, #24]
 800c44c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800c44e:	69bb      	ldr	r3, [r7, #24]
 800c450:	6959      	ldr	r1, [r3, #20]
 800c452:	693a      	ldr	r2, [r7, #16]
 800c454:	4613      	mov	r3, r2
 800c456:	009b      	lsls	r3, r3, #2
 800c458:	4413      	add	r3, r2
 800c45a:	009b      	lsls	r3, r3, #2
 800c45c:	4a13      	ldr	r2, [pc, #76]	; (800c4ac <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800c45e:	4413      	add	r3, r2
 800c460:	4299      	cmp	r1, r3
 800c462:	d11c      	bne.n	800c49e <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c464:	69bb      	ldr	r3, [r7, #24]
 800c466:	3304      	adds	r3, #4
 800c468:	4618      	mov	r0, r3
 800c46a:	f7fd ffcf 	bl	800a40c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800c46e:	69bb      	ldr	r3, [r7, #24]
 800c470:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c472:	4b0f      	ldr	r3, [pc, #60]	; (800c4b0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	429a      	cmp	r2, r3
 800c478:	d903      	bls.n	800c482 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800c47a:	69bb      	ldr	r3, [r7, #24]
 800c47c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c47e:	4a0c      	ldr	r2, [pc, #48]	; (800c4b0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800c480:	6013      	str	r3, [r2, #0]
 800c482:	69bb      	ldr	r3, [r7, #24]
 800c484:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c486:	4613      	mov	r3, r2
 800c488:	009b      	lsls	r3, r3, #2
 800c48a:	4413      	add	r3, r2
 800c48c:	009b      	lsls	r3, r3, #2
 800c48e:	4a07      	ldr	r2, [pc, #28]	; (800c4ac <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800c490:	441a      	add	r2, r3
 800c492:	69bb      	ldr	r3, [r7, #24]
 800c494:	3304      	adds	r3, #4
 800c496:	4619      	mov	r1, r3
 800c498:	4610      	mov	r0, r2
 800c49a:	f7fd ff5a 	bl	800a352 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c49e:	bf00      	nop
 800c4a0:	3720      	adds	r7, #32
 800c4a2:	46bd      	mov	sp, r7
 800c4a4:	bd80      	pop	{r7, pc}
 800c4a6:	bf00      	nop
 800c4a8:	20000c00 	.word	0x20000c00
 800c4ac:	20000c04 	.word	0x20000c04
 800c4b0:	200010dc 	.word	0x200010dc

0800c4b4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800c4b4:	b480      	push	{r7}
 800c4b6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800c4b8:	4b07      	ldr	r3, [pc, #28]	; (800c4d8 <pvTaskIncrementMutexHeldCount+0x24>)
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d004      	beq.n	800c4ca <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800c4c0:	4b05      	ldr	r3, [pc, #20]	; (800c4d8 <pvTaskIncrementMutexHeldCount+0x24>)
 800c4c2:	681b      	ldr	r3, [r3, #0]
 800c4c4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c4c6:	3201      	adds	r2, #1
 800c4c8:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800c4ca:	4b03      	ldr	r3, [pc, #12]	; (800c4d8 <pvTaskIncrementMutexHeldCount+0x24>)
 800c4cc:	681b      	ldr	r3, [r3, #0]
	}
 800c4ce:	4618      	mov	r0, r3
 800c4d0:	46bd      	mov	sp, r7
 800c4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4d6:	4770      	bx	lr
 800c4d8:	20000c00 	.word	0x20000c00

0800c4dc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c4dc:	b580      	push	{r7, lr}
 800c4de:	b084      	sub	sp, #16
 800c4e0:	af00      	add	r7, sp, #0
 800c4e2:	6078      	str	r0, [r7, #4]
 800c4e4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c4e6:	4b21      	ldr	r3, [pc, #132]	; (800c56c <prvAddCurrentTaskToDelayedList+0x90>)
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c4ec:	4b20      	ldr	r3, [pc, #128]	; (800c570 <prvAddCurrentTaskToDelayedList+0x94>)
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	3304      	adds	r3, #4
 800c4f2:	4618      	mov	r0, r3
 800c4f4:	f7fd ff8a 	bl	800a40c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c4fe:	d10a      	bne.n	800c516 <prvAddCurrentTaskToDelayedList+0x3a>
 800c500:	683b      	ldr	r3, [r7, #0]
 800c502:	2b00      	cmp	r3, #0
 800c504:	d007      	beq.n	800c516 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c506:	4b1a      	ldr	r3, [pc, #104]	; (800c570 <prvAddCurrentTaskToDelayedList+0x94>)
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	3304      	adds	r3, #4
 800c50c:	4619      	mov	r1, r3
 800c50e:	4819      	ldr	r0, [pc, #100]	; (800c574 <prvAddCurrentTaskToDelayedList+0x98>)
 800c510:	f7fd ff1f 	bl	800a352 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c514:	e026      	b.n	800c564 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c516:	68fa      	ldr	r2, [r7, #12]
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	4413      	add	r3, r2
 800c51c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c51e:	4b14      	ldr	r3, [pc, #80]	; (800c570 <prvAddCurrentTaskToDelayedList+0x94>)
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	68ba      	ldr	r2, [r7, #8]
 800c524:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c526:	68ba      	ldr	r2, [r7, #8]
 800c528:	68fb      	ldr	r3, [r7, #12]
 800c52a:	429a      	cmp	r2, r3
 800c52c:	d209      	bcs.n	800c542 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c52e:	4b12      	ldr	r3, [pc, #72]	; (800c578 <prvAddCurrentTaskToDelayedList+0x9c>)
 800c530:	681a      	ldr	r2, [r3, #0]
 800c532:	4b0f      	ldr	r3, [pc, #60]	; (800c570 <prvAddCurrentTaskToDelayedList+0x94>)
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	3304      	adds	r3, #4
 800c538:	4619      	mov	r1, r3
 800c53a:	4610      	mov	r0, r2
 800c53c:	f7fd ff2d 	bl	800a39a <vListInsert>
}
 800c540:	e010      	b.n	800c564 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c542:	4b0e      	ldr	r3, [pc, #56]	; (800c57c <prvAddCurrentTaskToDelayedList+0xa0>)
 800c544:	681a      	ldr	r2, [r3, #0]
 800c546:	4b0a      	ldr	r3, [pc, #40]	; (800c570 <prvAddCurrentTaskToDelayedList+0x94>)
 800c548:	681b      	ldr	r3, [r3, #0]
 800c54a:	3304      	adds	r3, #4
 800c54c:	4619      	mov	r1, r3
 800c54e:	4610      	mov	r0, r2
 800c550:	f7fd ff23 	bl	800a39a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c554:	4b0a      	ldr	r3, [pc, #40]	; (800c580 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	68ba      	ldr	r2, [r7, #8]
 800c55a:	429a      	cmp	r2, r3
 800c55c:	d202      	bcs.n	800c564 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800c55e:	4a08      	ldr	r2, [pc, #32]	; (800c580 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c560:	68bb      	ldr	r3, [r7, #8]
 800c562:	6013      	str	r3, [r2, #0]
}
 800c564:	bf00      	nop
 800c566:	3710      	adds	r7, #16
 800c568:	46bd      	mov	sp, r7
 800c56a:	bd80      	pop	{r7, pc}
 800c56c:	200010d8 	.word	0x200010d8
 800c570:	20000c00 	.word	0x20000c00
 800c574:	200010c0 	.word	0x200010c0
 800c578:	20001090 	.word	0x20001090
 800c57c:	2000108c 	.word	0x2000108c
 800c580:	200010f4 	.word	0x200010f4

0800c584 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c584:	b580      	push	{r7, lr}
 800c586:	b08a      	sub	sp, #40	; 0x28
 800c588:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800c58a:	2300      	movs	r3, #0
 800c58c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c58e:	f000 fb07 	bl	800cba0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c592:	4b1c      	ldr	r3, [pc, #112]	; (800c604 <xTimerCreateTimerTask+0x80>)
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	2b00      	cmp	r3, #0
 800c598:	d021      	beq.n	800c5de <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c59a:	2300      	movs	r3, #0
 800c59c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c59e:	2300      	movs	r3, #0
 800c5a0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c5a2:	1d3a      	adds	r2, r7, #4
 800c5a4:	f107 0108 	add.w	r1, r7, #8
 800c5a8:	f107 030c 	add.w	r3, r7, #12
 800c5ac:	4618      	mov	r0, r3
 800c5ae:	f7fd fe89 	bl	800a2c4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c5b2:	6879      	ldr	r1, [r7, #4]
 800c5b4:	68bb      	ldr	r3, [r7, #8]
 800c5b6:	68fa      	ldr	r2, [r7, #12]
 800c5b8:	9202      	str	r2, [sp, #8]
 800c5ba:	9301      	str	r3, [sp, #4]
 800c5bc:	2302      	movs	r3, #2
 800c5be:	9300      	str	r3, [sp, #0]
 800c5c0:	2300      	movs	r3, #0
 800c5c2:	460a      	mov	r2, r1
 800c5c4:	4910      	ldr	r1, [pc, #64]	; (800c608 <xTimerCreateTimerTask+0x84>)
 800c5c6:	4811      	ldr	r0, [pc, #68]	; (800c60c <xTimerCreateTimerTask+0x88>)
 800c5c8:	f7fe ffa4 	bl	800b514 <xTaskCreateStatic>
 800c5cc:	4603      	mov	r3, r0
 800c5ce:	4a10      	ldr	r2, [pc, #64]	; (800c610 <xTimerCreateTimerTask+0x8c>)
 800c5d0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800c5d2:	4b0f      	ldr	r3, [pc, #60]	; (800c610 <xTimerCreateTimerTask+0x8c>)
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d001      	beq.n	800c5de <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800c5da:	2301      	movs	r3, #1
 800c5dc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c5de:	697b      	ldr	r3, [r7, #20]
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	d10a      	bne.n	800c5fa <xTimerCreateTimerTask+0x76>
	__asm volatile
 800c5e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5e8:	f383 8811 	msr	BASEPRI, r3
 800c5ec:	f3bf 8f6f 	isb	sy
 800c5f0:	f3bf 8f4f 	dsb	sy
 800c5f4:	613b      	str	r3, [r7, #16]
}
 800c5f6:	bf00      	nop
 800c5f8:	e7fe      	b.n	800c5f8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800c5fa:	697b      	ldr	r3, [r7, #20]
}
 800c5fc:	4618      	mov	r0, r3
 800c5fe:	3718      	adds	r7, #24
 800c600:	46bd      	mov	sp, r7
 800c602:	bd80      	pop	{r7, pc}
 800c604:	20001130 	.word	0x20001130
 800c608:	0800d6d4 	.word	0x0800d6d4
 800c60c:	0800c749 	.word	0x0800c749
 800c610:	20001134 	.word	0x20001134

0800c614 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c614:	b580      	push	{r7, lr}
 800c616:	b08a      	sub	sp, #40	; 0x28
 800c618:	af00      	add	r7, sp, #0
 800c61a:	60f8      	str	r0, [r7, #12]
 800c61c:	60b9      	str	r1, [r7, #8]
 800c61e:	607a      	str	r2, [r7, #4]
 800c620:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c622:	2300      	movs	r3, #0
 800c624:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c626:	68fb      	ldr	r3, [r7, #12]
 800c628:	2b00      	cmp	r3, #0
 800c62a:	d10a      	bne.n	800c642 <xTimerGenericCommand+0x2e>
	__asm volatile
 800c62c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c630:	f383 8811 	msr	BASEPRI, r3
 800c634:	f3bf 8f6f 	isb	sy
 800c638:	f3bf 8f4f 	dsb	sy
 800c63c:	623b      	str	r3, [r7, #32]
}
 800c63e:	bf00      	nop
 800c640:	e7fe      	b.n	800c640 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c642:	4b1a      	ldr	r3, [pc, #104]	; (800c6ac <xTimerGenericCommand+0x98>)
 800c644:	681b      	ldr	r3, [r3, #0]
 800c646:	2b00      	cmp	r3, #0
 800c648:	d02a      	beq.n	800c6a0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c64a:	68bb      	ldr	r3, [r7, #8]
 800c64c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800c652:	68fb      	ldr	r3, [r7, #12]
 800c654:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c656:	68bb      	ldr	r3, [r7, #8]
 800c658:	2b05      	cmp	r3, #5
 800c65a:	dc18      	bgt.n	800c68e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c65c:	f7ff fdb4 	bl	800c1c8 <xTaskGetSchedulerState>
 800c660:	4603      	mov	r3, r0
 800c662:	2b02      	cmp	r3, #2
 800c664:	d109      	bne.n	800c67a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c666:	4b11      	ldr	r3, [pc, #68]	; (800c6ac <xTimerGenericCommand+0x98>)
 800c668:	6818      	ldr	r0, [r3, #0]
 800c66a:	f107 0110 	add.w	r1, r7, #16
 800c66e:	2300      	movs	r3, #0
 800c670:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c672:	f7fe f8e9 	bl	800a848 <xQueueGenericSend>
 800c676:	6278      	str	r0, [r7, #36]	; 0x24
 800c678:	e012      	b.n	800c6a0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c67a:	4b0c      	ldr	r3, [pc, #48]	; (800c6ac <xTimerGenericCommand+0x98>)
 800c67c:	6818      	ldr	r0, [r3, #0]
 800c67e:	f107 0110 	add.w	r1, r7, #16
 800c682:	2300      	movs	r3, #0
 800c684:	2200      	movs	r2, #0
 800c686:	f7fe f8df 	bl	800a848 <xQueueGenericSend>
 800c68a:	6278      	str	r0, [r7, #36]	; 0x24
 800c68c:	e008      	b.n	800c6a0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c68e:	4b07      	ldr	r3, [pc, #28]	; (800c6ac <xTimerGenericCommand+0x98>)
 800c690:	6818      	ldr	r0, [r3, #0]
 800c692:	f107 0110 	add.w	r1, r7, #16
 800c696:	2300      	movs	r3, #0
 800c698:	683a      	ldr	r2, [r7, #0]
 800c69a:	f7fe f9d3 	bl	800aa44 <xQueueGenericSendFromISR>
 800c69e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c6a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c6a2:	4618      	mov	r0, r3
 800c6a4:	3728      	adds	r7, #40	; 0x28
 800c6a6:	46bd      	mov	sp, r7
 800c6a8:	bd80      	pop	{r7, pc}
 800c6aa:	bf00      	nop
 800c6ac:	20001130 	.word	0x20001130

0800c6b0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c6b0:	b580      	push	{r7, lr}
 800c6b2:	b088      	sub	sp, #32
 800c6b4:	af02      	add	r7, sp, #8
 800c6b6:	6078      	str	r0, [r7, #4]
 800c6b8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c6ba:	4b22      	ldr	r3, [pc, #136]	; (800c744 <prvProcessExpiredTimer+0x94>)
 800c6bc:	681b      	ldr	r3, [r3, #0]
 800c6be:	68db      	ldr	r3, [r3, #12]
 800c6c0:	68db      	ldr	r3, [r3, #12]
 800c6c2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c6c4:	697b      	ldr	r3, [r7, #20]
 800c6c6:	3304      	adds	r3, #4
 800c6c8:	4618      	mov	r0, r3
 800c6ca:	f7fd fe9f 	bl	800a40c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c6ce:	697b      	ldr	r3, [r7, #20]
 800c6d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c6d4:	f003 0304 	and.w	r3, r3, #4
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	d022      	beq.n	800c722 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c6dc:	697b      	ldr	r3, [r7, #20]
 800c6de:	699a      	ldr	r2, [r3, #24]
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	18d1      	adds	r1, r2, r3
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	683a      	ldr	r2, [r7, #0]
 800c6e8:	6978      	ldr	r0, [r7, #20]
 800c6ea:	f000 f8d1 	bl	800c890 <prvInsertTimerInActiveList>
 800c6ee:	4603      	mov	r3, r0
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	d01f      	beq.n	800c734 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c6f4:	2300      	movs	r3, #0
 800c6f6:	9300      	str	r3, [sp, #0]
 800c6f8:	2300      	movs	r3, #0
 800c6fa:	687a      	ldr	r2, [r7, #4]
 800c6fc:	2100      	movs	r1, #0
 800c6fe:	6978      	ldr	r0, [r7, #20]
 800c700:	f7ff ff88 	bl	800c614 <xTimerGenericCommand>
 800c704:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c706:	693b      	ldr	r3, [r7, #16]
 800c708:	2b00      	cmp	r3, #0
 800c70a:	d113      	bne.n	800c734 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800c70c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c710:	f383 8811 	msr	BASEPRI, r3
 800c714:	f3bf 8f6f 	isb	sy
 800c718:	f3bf 8f4f 	dsb	sy
 800c71c:	60fb      	str	r3, [r7, #12]
}
 800c71e:	bf00      	nop
 800c720:	e7fe      	b.n	800c720 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c722:	697b      	ldr	r3, [r7, #20]
 800c724:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c728:	f023 0301 	bic.w	r3, r3, #1
 800c72c:	b2da      	uxtb	r2, r3
 800c72e:	697b      	ldr	r3, [r7, #20]
 800c730:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c734:	697b      	ldr	r3, [r7, #20]
 800c736:	6a1b      	ldr	r3, [r3, #32]
 800c738:	6978      	ldr	r0, [r7, #20]
 800c73a:	4798      	blx	r3
}
 800c73c:	bf00      	nop
 800c73e:	3718      	adds	r7, #24
 800c740:	46bd      	mov	sp, r7
 800c742:	bd80      	pop	{r7, pc}
 800c744:	20001128 	.word	0x20001128

0800c748 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800c748:	b580      	push	{r7, lr}
 800c74a:	b084      	sub	sp, #16
 800c74c:	af00      	add	r7, sp, #0
 800c74e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c750:	f107 0308 	add.w	r3, r7, #8
 800c754:	4618      	mov	r0, r3
 800c756:	f000 f857 	bl	800c808 <prvGetNextExpireTime>
 800c75a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c75c:	68bb      	ldr	r3, [r7, #8]
 800c75e:	4619      	mov	r1, r3
 800c760:	68f8      	ldr	r0, [r7, #12]
 800c762:	f000 f803 	bl	800c76c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c766:	f000 f8d5 	bl	800c914 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c76a:	e7f1      	b.n	800c750 <prvTimerTask+0x8>

0800c76c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c76c:	b580      	push	{r7, lr}
 800c76e:	b084      	sub	sp, #16
 800c770:	af00      	add	r7, sp, #0
 800c772:	6078      	str	r0, [r7, #4]
 800c774:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c776:	f7ff f929 	bl	800b9cc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c77a:	f107 0308 	add.w	r3, r7, #8
 800c77e:	4618      	mov	r0, r3
 800c780:	f000 f866 	bl	800c850 <prvSampleTimeNow>
 800c784:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c786:	68bb      	ldr	r3, [r7, #8]
 800c788:	2b00      	cmp	r3, #0
 800c78a:	d130      	bne.n	800c7ee <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c78c:	683b      	ldr	r3, [r7, #0]
 800c78e:	2b00      	cmp	r3, #0
 800c790:	d10a      	bne.n	800c7a8 <prvProcessTimerOrBlockTask+0x3c>
 800c792:	687a      	ldr	r2, [r7, #4]
 800c794:	68fb      	ldr	r3, [r7, #12]
 800c796:	429a      	cmp	r2, r3
 800c798:	d806      	bhi.n	800c7a8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c79a:	f7ff f925 	bl	800b9e8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c79e:	68f9      	ldr	r1, [r7, #12]
 800c7a0:	6878      	ldr	r0, [r7, #4]
 800c7a2:	f7ff ff85 	bl	800c6b0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c7a6:	e024      	b.n	800c7f2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c7a8:	683b      	ldr	r3, [r7, #0]
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	d008      	beq.n	800c7c0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c7ae:	4b13      	ldr	r3, [pc, #76]	; (800c7fc <prvProcessTimerOrBlockTask+0x90>)
 800c7b0:	681b      	ldr	r3, [r3, #0]
 800c7b2:	681b      	ldr	r3, [r3, #0]
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	d101      	bne.n	800c7bc <prvProcessTimerOrBlockTask+0x50>
 800c7b8:	2301      	movs	r3, #1
 800c7ba:	e000      	b.n	800c7be <prvProcessTimerOrBlockTask+0x52>
 800c7bc:	2300      	movs	r3, #0
 800c7be:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c7c0:	4b0f      	ldr	r3, [pc, #60]	; (800c800 <prvProcessTimerOrBlockTask+0x94>)
 800c7c2:	6818      	ldr	r0, [r3, #0]
 800c7c4:	687a      	ldr	r2, [r7, #4]
 800c7c6:	68fb      	ldr	r3, [r7, #12]
 800c7c8:	1ad3      	subs	r3, r2, r3
 800c7ca:	683a      	ldr	r2, [r7, #0]
 800c7cc:	4619      	mov	r1, r3
 800c7ce:	f7fe fe6d 	bl	800b4ac <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c7d2:	f7ff f909 	bl	800b9e8 <xTaskResumeAll>
 800c7d6:	4603      	mov	r3, r0
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	d10a      	bne.n	800c7f2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c7dc:	4b09      	ldr	r3, [pc, #36]	; (800c804 <prvProcessTimerOrBlockTask+0x98>)
 800c7de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c7e2:	601a      	str	r2, [r3, #0]
 800c7e4:	f3bf 8f4f 	dsb	sy
 800c7e8:	f3bf 8f6f 	isb	sy
}
 800c7ec:	e001      	b.n	800c7f2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c7ee:	f7ff f8fb 	bl	800b9e8 <xTaskResumeAll>
}
 800c7f2:	bf00      	nop
 800c7f4:	3710      	adds	r7, #16
 800c7f6:	46bd      	mov	sp, r7
 800c7f8:	bd80      	pop	{r7, pc}
 800c7fa:	bf00      	nop
 800c7fc:	2000112c 	.word	0x2000112c
 800c800:	20001130 	.word	0x20001130
 800c804:	e000ed04 	.word	0xe000ed04

0800c808 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c808:	b480      	push	{r7}
 800c80a:	b085      	sub	sp, #20
 800c80c:	af00      	add	r7, sp, #0
 800c80e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c810:	4b0e      	ldr	r3, [pc, #56]	; (800c84c <prvGetNextExpireTime+0x44>)
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	2b00      	cmp	r3, #0
 800c818:	d101      	bne.n	800c81e <prvGetNextExpireTime+0x16>
 800c81a:	2201      	movs	r2, #1
 800c81c:	e000      	b.n	800c820 <prvGetNextExpireTime+0x18>
 800c81e:	2200      	movs	r2, #0
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	681b      	ldr	r3, [r3, #0]
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d105      	bne.n	800c838 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c82c:	4b07      	ldr	r3, [pc, #28]	; (800c84c <prvGetNextExpireTime+0x44>)
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	68db      	ldr	r3, [r3, #12]
 800c832:	681b      	ldr	r3, [r3, #0]
 800c834:	60fb      	str	r3, [r7, #12]
 800c836:	e001      	b.n	800c83c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c838:	2300      	movs	r3, #0
 800c83a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c83c:	68fb      	ldr	r3, [r7, #12]
}
 800c83e:	4618      	mov	r0, r3
 800c840:	3714      	adds	r7, #20
 800c842:	46bd      	mov	sp, r7
 800c844:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c848:	4770      	bx	lr
 800c84a:	bf00      	nop
 800c84c:	20001128 	.word	0x20001128

0800c850 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c850:	b580      	push	{r7, lr}
 800c852:	b084      	sub	sp, #16
 800c854:	af00      	add	r7, sp, #0
 800c856:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c858:	f7ff f964 	bl	800bb24 <xTaskGetTickCount>
 800c85c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c85e:	4b0b      	ldr	r3, [pc, #44]	; (800c88c <prvSampleTimeNow+0x3c>)
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	68fa      	ldr	r2, [r7, #12]
 800c864:	429a      	cmp	r2, r3
 800c866:	d205      	bcs.n	800c874 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c868:	f000 f936 	bl	800cad8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	2201      	movs	r2, #1
 800c870:	601a      	str	r2, [r3, #0]
 800c872:	e002      	b.n	800c87a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	2200      	movs	r2, #0
 800c878:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c87a:	4a04      	ldr	r2, [pc, #16]	; (800c88c <prvSampleTimeNow+0x3c>)
 800c87c:	68fb      	ldr	r3, [r7, #12]
 800c87e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c880:	68fb      	ldr	r3, [r7, #12]
}
 800c882:	4618      	mov	r0, r3
 800c884:	3710      	adds	r7, #16
 800c886:	46bd      	mov	sp, r7
 800c888:	bd80      	pop	{r7, pc}
 800c88a:	bf00      	nop
 800c88c:	20001138 	.word	0x20001138

0800c890 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c890:	b580      	push	{r7, lr}
 800c892:	b086      	sub	sp, #24
 800c894:	af00      	add	r7, sp, #0
 800c896:	60f8      	str	r0, [r7, #12]
 800c898:	60b9      	str	r1, [r7, #8]
 800c89a:	607a      	str	r2, [r7, #4]
 800c89c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c89e:	2300      	movs	r3, #0
 800c8a0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c8a2:	68fb      	ldr	r3, [r7, #12]
 800c8a4:	68ba      	ldr	r2, [r7, #8]
 800c8a6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	68fa      	ldr	r2, [r7, #12]
 800c8ac:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c8ae:	68ba      	ldr	r2, [r7, #8]
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	429a      	cmp	r2, r3
 800c8b4:	d812      	bhi.n	800c8dc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c8b6:	687a      	ldr	r2, [r7, #4]
 800c8b8:	683b      	ldr	r3, [r7, #0]
 800c8ba:	1ad2      	subs	r2, r2, r3
 800c8bc:	68fb      	ldr	r3, [r7, #12]
 800c8be:	699b      	ldr	r3, [r3, #24]
 800c8c0:	429a      	cmp	r2, r3
 800c8c2:	d302      	bcc.n	800c8ca <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c8c4:	2301      	movs	r3, #1
 800c8c6:	617b      	str	r3, [r7, #20]
 800c8c8:	e01b      	b.n	800c902 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c8ca:	4b10      	ldr	r3, [pc, #64]	; (800c90c <prvInsertTimerInActiveList+0x7c>)
 800c8cc:	681a      	ldr	r2, [r3, #0]
 800c8ce:	68fb      	ldr	r3, [r7, #12]
 800c8d0:	3304      	adds	r3, #4
 800c8d2:	4619      	mov	r1, r3
 800c8d4:	4610      	mov	r0, r2
 800c8d6:	f7fd fd60 	bl	800a39a <vListInsert>
 800c8da:	e012      	b.n	800c902 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c8dc:	687a      	ldr	r2, [r7, #4]
 800c8de:	683b      	ldr	r3, [r7, #0]
 800c8e0:	429a      	cmp	r2, r3
 800c8e2:	d206      	bcs.n	800c8f2 <prvInsertTimerInActiveList+0x62>
 800c8e4:	68ba      	ldr	r2, [r7, #8]
 800c8e6:	683b      	ldr	r3, [r7, #0]
 800c8e8:	429a      	cmp	r2, r3
 800c8ea:	d302      	bcc.n	800c8f2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c8ec:	2301      	movs	r3, #1
 800c8ee:	617b      	str	r3, [r7, #20]
 800c8f0:	e007      	b.n	800c902 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c8f2:	4b07      	ldr	r3, [pc, #28]	; (800c910 <prvInsertTimerInActiveList+0x80>)
 800c8f4:	681a      	ldr	r2, [r3, #0]
 800c8f6:	68fb      	ldr	r3, [r7, #12]
 800c8f8:	3304      	adds	r3, #4
 800c8fa:	4619      	mov	r1, r3
 800c8fc:	4610      	mov	r0, r2
 800c8fe:	f7fd fd4c 	bl	800a39a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c902:	697b      	ldr	r3, [r7, #20]
}
 800c904:	4618      	mov	r0, r3
 800c906:	3718      	adds	r7, #24
 800c908:	46bd      	mov	sp, r7
 800c90a:	bd80      	pop	{r7, pc}
 800c90c:	2000112c 	.word	0x2000112c
 800c910:	20001128 	.word	0x20001128

0800c914 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c914:	b580      	push	{r7, lr}
 800c916:	b08e      	sub	sp, #56	; 0x38
 800c918:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c91a:	e0ca      	b.n	800cab2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	2b00      	cmp	r3, #0
 800c920:	da18      	bge.n	800c954 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c922:	1d3b      	adds	r3, r7, #4
 800c924:	3304      	adds	r3, #4
 800c926:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d10a      	bne.n	800c944 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800c92e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c932:	f383 8811 	msr	BASEPRI, r3
 800c936:	f3bf 8f6f 	isb	sy
 800c93a:	f3bf 8f4f 	dsb	sy
 800c93e:	61fb      	str	r3, [r7, #28]
}
 800c940:	bf00      	nop
 800c942:	e7fe      	b.n	800c942 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c94a:	6850      	ldr	r0, [r2, #4]
 800c94c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c94e:	6892      	ldr	r2, [r2, #8]
 800c950:	4611      	mov	r1, r2
 800c952:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	2b00      	cmp	r3, #0
 800c958:	f2c0 80aa 	blt.w	800cab0 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c95c:	68fb      	ldr	r3, [r7, #12]
 800c95e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c962:	695b      	ldr	r3, [r3, #20]
 800c964:	2b00      	cmp	r3, #0
 800c966:	d004      	beq.n	800c972 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c96a:	3304      	adds	r3, #4
 800c96c:	4618      	mov	r0, r3
 800c96e:	f7fd fd4d 	bl	800a40c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c972:	463b      	mov	r3, r7
 800c974:	4618      	mov	r0, r3
 800c976:	f7ff ff6b 	bl	800c850 <prvSampleTimeNow>
 800c97a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	2b09      	cmp	r3, #9
 800c980:	f200 8097 	bhi.w	800cab2 <prvProcessReceivedCommands+0x19e>
 800c984:	a201      	add	r2, pc, #4	; (adr r2, 800c98c <prvProcessReceivedCommands+0x78>)
 800c986:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c98a:	bf00      	nop
 800c98c:	0800c9b5 	.word	0x0800c9b5
 800c990:	0800c9b5 	.word	0x0800c9b5
 800c994:	0800c9b5 	.word	0x0800c9b5
 800c998:	0800ca29 	.word	0x0800ca29
 800c99c:	0800ca3d 	.word	0x0800ca3d
 800c9a0:	0800ca87 	.word	0x0800ca87
 800c9a4:	0800c9b5 	.word	0x0800c9b5
 800c9a8:	0800c9b5 	.word	0x0800c9b5
 800c9ac:	0800ca29 	.word	0x0800ca29
 800c9b0:	0800ca3d 	.word	0x0800ca3d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c9b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9b6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c9ba:	f043 0301 	orr.w	r3, r3, #1
 800c9be:	b2da      	uxtb	r2, r3
 800c9c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9c2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c9c6:	68ba      	ldr	r2, [r7, #8]
 800c9c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9ca:	699b      	ldr	r3, [r3, #24]
 800c9cc:	18d1      	adds	r1, r2, r3
 800c9ce:	68bb      	ldr	r3, [r7, #8]
 800c9d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c9d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c9d4:	f7ff ff5c 	bl	800c890 <prvInsertTimerInActiveList>
 800c9d8:	4603      	mov	r3, r0
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d069      	beq.n	800cab2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c9de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9e0:	6a1b      	ldr	r3, [r3, #32]
 800c9e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c9e4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c9e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c9ec:	f003 0304 	and.w	r3, r3, #4
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	d05e      	beq.n	800cab2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c9f4:	68ba      	ldr	r2, [r7, #8]
 800c9f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9f8:	699b      	ldr	r3, [r3, #24]
 800c9fa:	441a      	add	r2, r3
 800c9fc:	2300      	movs	r3, #0
 800c9fe:	9300      	str	r3, [sp, #0]
 800ca00:	2300      	movs	r3, #0
 800ca02:	2100      	movs	r1, #0
 800ca04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ca06:	f7ff fe05 	bl	800c614 <xTimerGenericCommand>
 800ca0a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800ca0c:	6a3b      	ldr	r3, [r7, #32]
 800ca0e:	2b00      	cmp	r3, #0
 800ca10:	d14f      	bne.n	800cab2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800ca12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca16:	f383 8811 	msr	BASEPRI, r3
 800ca1a:	f3bf 8f6f 	isb	sy
 800ca1e:	f3bf 8f4f 	dsb	sy
 800ca22:	61bb      	str	r3, [r7, #24]
}
 800ca24:	bf00      	nop
 800ca26:	e7fe      	b.n	800ca26 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ca28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca2a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ca2e:	f023 0301 	bic.w	r3, r3, #1
 800ca32:	b2da      	uxtb	r2, r3
 800ca34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca36:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800ca3a:	e03a      	b.n	800cab2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ca3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca3e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ca42:	f043 0301 	orr.w	r3, r3, #1
 800ca46:	b2da      	uxtb	r2, r3
 800ca48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca4a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800ca4e:	68ba      	ldr	r2, [r7, #8]
 800ca50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca52:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800ca54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca56:	699b      	ldr	r3, [r3, #24]
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	d10a      	bne.n	800ca72 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800ca5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca60:	f383 8811 	msr	BASEPRI, r3
 800ca64:	f3bf 8f6f 	isb	sy
 800ca68:	f3bf 8f4f 	dsb	sy
 800ca6c:	617b      	str	r3, [r7, #20]
}
 800ca6e:	bf00      	nop
 800ca70:	e7fe      	b.n	800ca70 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800ca72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca74:	699a      	ldr	r2, [r3, #24]
 800ca76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca78:	18d1      	adds	r1, r2, r3
 800ca7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ca7e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ca80:	f7ff ff06 	bl	800c890 <prvInsertTimerInActiveList>
					break;
 800ca84:	e015      	b.n	800cab2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800ca86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca88:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ca8c:	f003 0302 	and.w	r3, r3, #2
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	d103      	bne.n	800ca9c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800ca94:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ca96:	f000 fbdb 	bl	800d250 <vPortFree>
 800ca9a:	e00a      	b.n	800cab2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ca9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca9e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800caa2:	f023 0301 	bic.w	r3, r3, #1
 800caa6:	b2da      	uxtb	r2, r3
 800caa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800caaa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800caae:	e000      	b.n	800cab2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800cab0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800cab2:	4b08      	ldr	r3, [pc, #32]	; (800cad4 <prvProcessReceivedCommands+0x1c0>)
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	1d39      	adds	r1, r7, #4
 800cab8:	2200      	movs	r2, #0
 800caba:	4618      	mov	r0, r3
 800cabc:	f7fe f8ea 	bl	800ac94 <xQueueReceive>
 800cac0:	4603      	mov	r3, r0
 800cac2:	2b00      	cmp	r3, #0
 800cac4:	f47f af2a 	bne.w	800c91c <prvProcessReceivedCommands+0x8>
	}
}
 800cac8:	bf00      	nop
 800caca:	bf00      	nop
 800cacc:	3730      	adds	r7, #48	; 0x30
 800cace:	46bd      	mov	sp, r7
 800cad0:	bd80      	pop	{r7, pc}
 800cad2:	bf00      	nop
 800cad4:	20001130 	.word	0x20001130

0800cad8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800cad8:	b580      	push	{r7, lr}
 800cada:	b088      	sub	sp, #32
 800cadc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800cade:	e048      	b.n	800cb72 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800cae0:	4b2d      	ldr	r3, [pc, #180]	; (800cb98 <prvSwitchTimerLists+0xc0>)
 800cae2:	681b      	ldr	r3, [r3, #0]
 800cae4:	68db      	ldr	r3, [r3, #12]
 800cae6:	681b      	ldr	r3, [r3, #0]
 800cae8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800caea:	4b2b      	ldr	r3, [pc, #172]	; (800cb98 <prvSwitchTimerLists+0xc0>)
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	68db      	ldr	r3, [r3, #12]
 800caf0:	68db      	ldr	r3, [r3, #12]
 800caf2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800caf4:	68fb      	ldr	r3, [r7, #12]
 800caf6:	3304      	adds	r3, #4
 800caf8:	4618      	mov	r0, r3
 800cafa:	f7fd fc87 	bl	800a40c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cafe:	68fb      	ldr	r3, [r7, #12]
 800cb00:	6a1b      	ldr	r3, [r3, #32]
 800cb02:	68f8      	ldr	r0, [r7, #12]
 800cb04:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cb06:	68fb      	ldr	r3, [r7, #12]
 800cb08:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cb0c:	f003 0304 	and.w	r3, r3, #4
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	d02e      	beq.n	800cb72 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800cb14:	68fb      	ldr	r3, [r7, #12]
 800cb16:	699b      	ldr	r3, [r3, #24]
 800cb18:	693a      	ldr	r2, [r7, #16]
 800cb1a:	4413      	add	r3, r2
 800cb1c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800cb1e:	68ba      	ldr	r2, [r7, #8]
 800cb20:	693b      	ldr	r3, [r7, #16]
 800cb22:	429a      	cmp	r2, r3
 800cb24:	d90e      	bls.n	800cb44 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800cb26:	68fb      	ldr	r3, [r7, #12]
 800cb28:	68ba      	ldr	r2, [r7, #8]
 800cb2a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800cb2c:	68fb      	ldr	r3, [r7, #12]
 800cb2e:	68fa      	ldr	r2, [r7, #12]
 800cb30:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800cb32:	4b19      	ldr	r3, [pc, #100]	; (800cb98 <prvSwitchTimerLists+0xc0>)
 800cb34:	681a      	ldr	r2, [r3, #0]
 800cb36:	68fb      	ldr	r3, [r7, #12]
 800cb38:	3304      	adds	r3, #4
 800cb3a:	4619      	mov	r1, r3
 800cb3c:	4610      	mov	r0, r2
 800cb3e:	f7fd fc2c 	bl	800a39a <vListInsert>
 800cb42:	e016      	b.n	800cb72 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800cb44:	2300      	movs	r3, #0
 800cb46:	9300      	str	r3, [sp, #0]
 800cb48:	2300      	movs	r3, #0
 800cb4a:	693a      	ldr	r2, [r7, #16]
 800cb4c:	2100      	movs	r1, #0
 800cb4e:	68f8      	ldr	r0, [r7, #12]
 800cb50:	f7ff fd60 	bl	800c614 <xTimerGenericCommand>
 800cb54:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	d10a      	bne.n	800cb72 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800cb5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb60:	f383 8811 	msr	BASEPRI, r3
 800cb64:	f3bf 8f6f 	isb	sy
 800cb68:	f3bf 8f4f 	dsb	sy
 800cb6c:	603b      	str	r3, [r7, #0]
}
 800cb6e:	bf00      	nop
 800cb70:	e7fe      	b.n	800cb70 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800cb72:	4b09      	ldr	r3, [pc, #36]	; (800cb98 <prvSwitchTimerLists+0xc0>)
 800cb74:	681b      	ldr	r3, [r3, #0]
 800cb76:	681b      	ldr	r3, [r3, #0]
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d1b1      	bne.n	800cae0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800cb7c:	4b06      	ldr	r3, [pc, #24]	; (800cb98 <prvSwitchTimerLists+0xc0>)
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800cb82:	4b06      	ldr	r3, [pc, #24]	; (800cb9c <prvSwitchTimerLists+0xc4>)
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	4a04      	ldr	r2, [pc, #16]	; (800cb98 <prvSwitchTimerLists+0xc0>)
 800cb88:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800cb8a:	4a04      	ldr	r2, [pc, #16]	; (800cb9c <prvSwitchTimerLists+0xc4>)
 800cb8c:	697b      	ldr	r3, [r7, #20]
 800cb8e:	6013      	str	r3, [r2, #0]
}
 800cb90:	bf00      	nop
 800cb92:	3718      	adds	r7, #24
 800cb94:	46bd      	mov	sp, r7
 800cb96:	bd80      	pop	{r7, pc}
 800cb98:	20001128 	.word	0x20001128
 800cb9c:	2000112c 	.word	0x2000112c

0800cba0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800cba0:	b580      	push	{r7, lr}
 800cba2:	b082      	sub	sp, #8
 800cba4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800cba6:	f000 f965 	bl	800ce74 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800cbaa:	4b15      	ldr	r3, [pc, #84]	; (800cc00 <prvCheckForValidListAndQueue+0x60>)
 800cbac:	681b      	ldr	r3, [r3, #0]
 800cbae:	2b00      	cmp	r3, #0
 800cbb0:	d120      	bne.n	800cbf4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800cbb2:	4814      	ldr	r0, [pc, #80]	; (800cc04 <prvCheckForValidListAndQueue+0x64>)
 800cbb4:	f7fd fba0 	bl	800a2f8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800cbb8:	4813      	ldr	r0, [pc, #76]	; (800cc08 <prvCheckForValidListAndQueue+0x68>)
 800cbba:	f7fd fb9d 	bl	800a2f8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800cbbe:	4b13      	ldr	r3, [pc, #76]	; (800cc0c <prvCheckForValidListAndQueue+0x6c>)
 800cbc0:	4a10      	ldr	r2, [pc, #64]	; (800cc04 <prvCheckForValidListAndQueue+0x64>)
 800cbc2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800cbc4:	4b12      	ldr	r3, [pc, #72]	; (800cc10 <prvCheckForValidListAndQueue+0x70>)
 800cbc6:	4a10      	ldr	r2, [pc, #64]	; (800cc08 <prvCheckForValidListAndQueue+0x68>)
 800cbc8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800cbca:	2300      	movs	r3, #0
 800cbcc:	9300      	str	r3, [sp, #0]
 800cbce:	4b11      	ldr	r3, [pc, #68]	; (800cc14 <prvCheckForValidListAndQueue+0x74>)
 800cbd0:	4a11      	ldr	r2, [pc, #68]	; (800cc18 <prvCheckForValidListAndQueue+0x78>)
 800cbd2:	2110      	movs	r1, #16
 800cbd4:	200a      	movs	r0, #10
 800cbd6:	f7fd fcab 	bl	800a530 <xQueueGenericCreateStatic>
 800cbda:	4603      	mov	r3, r0
 800cbdc:	4a08      	ldr	r2, [pc, #32]	; (800cc00 <prvCheckForValidListAndQueue+0x60>)
 800cbde:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800cbe0:	4b07      	ldr	r3, [pc, #28]	; (800cc00 <prvCheckForValidListAndQueue+0x60>)
 800cbe2:	681b      	ldr	r3, [r3, #0]
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	d005      	beq.n	800cbf4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800cbe8:	4b05      	ldr	r3, [pc, #20]	; (800cc00 <prvCheckForValidListAndQueue+0x60>)
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	490b      	ldr	r1, [pc, #44]	; (800cc1c <prvCheckForValidListAndQueue+0x7c>)
 800cbee:	4618      	mov	r0, r3
 800cbf0:	f7fe fc08 	bl	800b404 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800cbf4:	f000 f96e 	bl	800ced4 <vPortExitCritical>
}
 800cbf8:	bf00      	nop
 800cbfa:	46bd      	mov	sp, r7
 800cbfc:	bd80      	pop	{r7, pc}
 800cbfe:	bf00      	nop
 800cc00:	20001130 	.word	0x20001130
 800cc04:	20001100 	.word	0x20001100
 800cc08:	20001114 	.word	0x20001114
 800cc0c:	20001128 	.word	0x20001128
 800cc10:	2000112c 	.word	0x2000112c
 800cc14:	200011dc 	.word	0x200011dc
 800cc18:	2000113c 	.word	0x2000113c
 800cc1c:	0800d6dc 	.word	0x0800d6dc

0800cc20 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800cc20:	b480      	push	{r7}
 800cc22:	b085      	sub	sp, #20
 800cc24:	af00      	add	r7, sp, #0
 800cc26:	60f8      	str	r0, [r7, #12]
 800cc28:	60b9      	str	r1, [r7, #8]
 800cc2a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800cc2c:	68fb      	ldr	r3, [r7, #12]
 800cc2e:	3b04      	subs	r3, #4
 800cc30:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800cc32:	68fb      	ldr	r3, [r7, #12]
 800cc34:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800cc38:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cc3a:	68fb      	ldr	r3, [r7, #12]
 800cc3c:	3b04      	subs	r3, #4
 800cc3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800cc40:	68bb      	ldr	r3, [r7, #8]
 800cc42:	f023 0201 	bic.w	r2, r3, #1
 800cc46:	68fb      	ldr	r3, [r7, #12]
 800cc48:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cc4a:	68fb      	ldr	r3, [r7, #12]
 800cc4c:	3b04      	subs	r3, #4
 800cc4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800cc50:	4a0c      	ldr	r2, [pc, #48]	; (800cc84 <pxPortInitialiseStack+0x64>)
 800cc52:	68fb      	ldr	r3, [r7, #12]
 800cc54:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800cc56:	68fb      	ldr	r3, [r7, #12]
 800cc58:	3b14      	subs	r3, #20
 800cc5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800cc5c:	687a      	ldr	r2, [r7, #4]
 800cc5e:	68fb      	ldr	r3, [r7, #12]
 800cc60:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800cc62:	68fb      	ldr	r3, [r7, #12]
 800cc64:	3b04      	subs	r3, #4
 800cc66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800cc68:	68fb      	ldr	r3, [r7, #12]
 800cc6a:	f06f 0202 	mvn.w	r2, #2
 800cc6e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800cc70:	68fb      	ldr	r3, [r7, #12]
 800cc72:	3b20      	subs	r3, #32
 800cc74:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800cc76:	68fb      	ldr	r3, [r7, #12]
}
 800cc78:	4618      	mov	r0, r3
 800cc7a:	3714      	adds	r7, #20
 800cc7c:	46bd      	mov	sp, r7
 800cc7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc82:	4770      	bx	lr
 800cc84:	0800cc89 	.word	0x0800cc89

0800cc88 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800cc88:	b480      	push	{r7}
 800cc8a:	b085      	sub	sp, #20
 800cc8c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800cc8e:	2300      	movs	r3, #0
 800cc90:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800cc92:	4b12      	ldr	r3, [pc, #72]	; (800ccdc <prvTaskExitError+0x54>)
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cc9a:	d00a      	beq.n	800ccb2 <prvTaskExitError+0x2a>
	__asm volatile
 800cc9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cca0:	f383 8811 	msr	BASEPRI, r3
 800cca4:	f3bf 8f6f 	isb	sy
 800cca8:	f3bf 8f4f 	dsb	sy
 800ccac:	60fb      	str	r3, [r7, #12]
}
 800ccae:	bf00      	nop
 800ccb0:	e7fe      	b.n	800ccb0 <prvTaskExitError+0x28>
	__asm volatile
 800ccb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccb6:	f383 8811 	msr	BASEPRI, r3
 800ccba:	f3bf 8f6f 	isb	sy
 800ccbe:	f3bf 8f4f 	dsb	sy
 800ccc2:	60bb      	str	r3, [r7, #8]
}
 800ccc4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ccc6:	bf00      	nop
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	d0fc      	beq.n	800ccc8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ccce:	bf00      	nop
 800ccd0:	bf00      	nop
 800ccd2:	3714      	adds	r7, #20
 800ccd4:	46bd      	mov	sp, r7
 800ccd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccda:	4770      	bx	lr
 800ccdc:	20000010 	.word	0x20000010

0800cce0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800cce0:	4b07      	ldr	r3, [pc, #28]	; (800cd00 <pxCurrentTCBConst2>)
 800cce2:	6819      	ldr	r1, [r3, #0]
 800cce4:	6808      	ldr	r0, [r1, #0]
 800cce6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ccea:	f380 8809 	msr	PSP, r0
 800ccee:	f3bf 8f6f 	isb	sy
 800ccf2:	f04f 0000 	mov.w	r0, #0
 800ccf6:	f380 8811 	msr	BASEPRI, r0
 800ccfa:	4770      	bx	lr
 800ccfc:	f3af 8000 	nop.w

0800cd00 <pxCurrentTCBConst2>:
 800cd00:	20000c00 	.word	0x20000c00
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800cd04:	bf00      	nop
 800cd06:	bf00      	nop

0800cd08 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800cd08:	4808      	ldr	r0, [pc, #32]	; (800cd2c <prvPortStartFirstTask+0x24>)
 800cd0a:	6800      	ldr	r0, [r0, #0]
 800cd0c:	6800      	ldr	r0, [r0, #0]
 800cd0e:	f380 8808 	msr	MSP, r0
 800cd12:	f04f 0000 	mov.w	r0, #0
 800cd16:	f380 8814 	msr	CONTROL, r0
 800cd1a:	b662      	cpsie	i
 800cd1c:	b661      	cpsie	f
 800cd1e:	f3bf 8f4f 	dsb	sy
 800cd22:	f3bf 8f6f 	isb	sy
 800cd26:	df00      	svc	0
 800cd28:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800cd2a:	bf00      	nop
 800cd2c:	e000ed08 	.word	0xe000ed08

0800cd30 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800cd30:	b580      	push	{r7, lr}
 800cd32:	b086      	sub	sp, #24
 800cd34:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800cd36:	4b46      	ldr	r3, [pc, #280]	; (800ce50 <xPortStartScheduler+0x120>)
 800cd38:	681b      	ldr	r3, [r3, #0]
 800cd3a:	4a46      	ldr	r2, [pc, #280]	; (800ce54 <xPortStartScheduler+0x124>)
 800cd3c:	4293      	cmp	r3, r2
 800cd3e:	d10a      	bne.n	800cd56 <xPortStartScheduler+0x26>
	__asm volatile
 800cd40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd44:	f383 8811 	msr	BASEPRI, r3
 800cd48:	f3bf 8f6f 	isb	sy
 800cd4c:	f3bf 8f4f 	dsb	sy
 800cd50:	613b      	str	r3, [r7, #16]
}
 800cd52:	bf00      	nop
 800cd54:	e7fe      	b.n	800cd54 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800cd56:	4b3e      	ldr	r3, [pc, #248]	; (800ce50 <xPortStartScheduler+0x120>)
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	4a3f      	ldr	r2, [pc, #252]	; (800ce58 <xPortStartScheduler+0x128>)
 800cd5c:	4293      	cmp	r3, r2
 800cd5e:	d10a      	bne.n	800cd76 <xPortStartScheduler+0x46>
	__asm volatile
 800cd60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd64:	f383 8811 	msr	BASEPRI, r3
 800cd68:	f3bf 8f6f 	isb	sy
 800cd6c:	f3bf 8f4f 	dsb	sy
 800cd70:	60fb      	str	r3, [r7, #12]
}
 800cd72:	bf00      	nop
 800cd74:	e7fe      	b.n	800cd74 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800cd76:	4b39      	ldr	r3, [pc, #228]	; (800ce5c <xPortStartScheduler+0x12c>)
 800cd78:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800cd7a:	697b      	ldr	r3, [r7, #20]
 800cd7c:	781b      	ldrb	r3, [r3, #0]
 800cd7e:	b2db      	uxtb	r3, r3
 800cd80:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800cd82:	697b      	ldr	r3, [r7, #20]
 800cd84:	22ff      	movs	r2, #255	; 0xff
 800cd86:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800cd88:	697b      	ldr	r3, [r7, #20]
 800cd8a:	781b      	ldrb	r3, [r3, #0]
 800cd8c:	b2db      	uxtb	r3, r3
 800cd8e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800cd90:	78fb      	ldrb	r3, [r7, #3]
 800cd92:	b2db      	uxtb	r3, r3
 800cd94:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800cd98:	b2da      	uxtb	r2, r3
 800cd9a:	4b31      	ldr	r3, [pc, #196]	; (800ce60 <xPortStartScheduler+0x130>)
 800cd9c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800cd9e:	4b31      	ldr	r3, [pc, #196]	; (800ce64 <xPortStartScheduler+0x134>)
 800cda0:	2207      	movs	r2, #7
 800cda2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cda4:	e009      	b.n	800cdba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800cda6:	4b2f      	ldr	r3, [pc, #188]	; (800ce64 <xPortStartScheduler+0x134>)
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	3b01      	subs	r3, #1
 800cdac:	4a2d      	ldr	r2, [pc, #180]	; (800ce64 <xPortStartScheduler+0x134>)
 800cdae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800cdb0:	78fb      	ldrb	r3, [r7, #3]
 800cdb2:	b2db      	uxtb	r3, r3
 800cdb4:	005b      	lsls	r3, r3, #1
 800cdb6:	b2db      	uxtb	r3, r3
 800cdb8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cdba:	78fb      	ldrb	r3, [r7, #3]
 800cdbc:	b2db      	uxtb	r3, r3
 800cdbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cdc2:	2b80      	cmp	r3, #128	; 0x80
 800cdc4:	d0ef      	beq.n	800cda6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800cdc6:	4b27      	ldr	r3, [pc, #156]	; (800ce64 <xPortStartScheduler+0x134>)
 800cdc8:	681b      	ldr	r3, [r3, #0]
 800cdca:	f1c3 0307 	rsb	r3, r3, #7
 800cdce:	2b04      	cmp	r3, #4
 800cdd0:	d00a      	beq.n	800cde8 <xPortStartScheduler+0xb8>
	__asm volatile
 800cdd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdd6:	f383 8811 	msr	BASEPRI, r3
 800cdda:	f3bf 8f6f 	isb	sy
 800cdde:	f3bf 8f4f 	dsb	sy
 800cde2:	60bb      	str	r3, [r7, #8]
}
 800cde4:	bf00      	nop
 800cde6:	e7fe      	b.n	800cde6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800cde8:	4b1e      	ldr	r3, [pc, #120]	; (800ce64 <xPortStartScheduler+0x134>)
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	021b      	lsls	r3, r3, #8
 800cdee:	4a1d      	ldr	r2, [pc, #116]	; (800ce64 <xPortStartScheduler+0x134>)
 800cdf0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800cdf2:	4b1c      	ldr	r3, [pc, #112]	; (800ce64 <xPortStartScheduler+0x134>)
 800cdf4:	681b      	ldr	r3, [r3, #0]
 800cdf6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800cdfa:	4a1a      	ldr	r2, [pc, #104]	; (800ce64 <xPortStartScheduler+0x134>)
 800cdfc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	b2da      	uxtb	r2, r3
 800ce02:	697b      	ldr	r3, [r7, #20]
 800ce04:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ce06:	4b18      	ldr	r3, [pc, #96]	; (800ce68 <xPortStartScheduler+0x138>)
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	4a17      	ldr	r2, [pc, #92]	; (800ce68 <xPortStartScheduler+0x138>)
 800ce0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ce10:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ce12:	4b15      	ldr	r3, [pc, #84]	; (800ce68 <xPortStartScheduler+0x138>)
 800ce14:	681b      	ldr	r3, [r3, #0]
 800ce16:	4a14      	ldr	r2, [pc, #80]	; (800ce68 <xPortStartScheduler+0x138>)
 800ce18:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800ce1c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ce1e:	f000 f8dd 	bl	800cfdc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ce22:	4b12      	ldr	r3, [pc, #72]	; (800ce6c <xPortStartScheduler+0x13c>)
 800ce24:	2200      	movs	r2, #0
 800ce26:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ce28:	f000 f8fc 	bl	800d024 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ce2c:	4b10      	ldr	r3, [pc, #64]	; (800ce70 <xPortStartScheduler+0x140>)
 800ce2e:	681b      	ldr	r3, [r3, #0]
 800ce30:	4a0f      	ldr	r2, [pc, #60]	; (800ce70 <xPortStartScheduler+0x140>)
 800ce32:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800ce36:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ce38:	f7ff ff66 	bl	800cd08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ce3c:	f7fe ff4e 	bl	800bcdc <vTaskSwitchContext>
	prvTaskExitError();
 800ce40:	f7ff ff22 	bl	800cc88 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ce44:	2300      	movs	r3, #0
}
 800ce46:	4618      	mov	r0, r3
 800ce48:	3718      	adds	r7, #24
 800ce4a:	46bd      	mov	sp, r7
 800ce4c:	bd80      	pop	{r7, pc}
 800ce4e:	bf00      	nop
 800ce50:	e000ed00 	.word	0xe000ed00
 800ce54:	410fc271 	.word	0x410fc271
 800ce58:	410fc270 	.word	0x410fc270
 800ce5c:	e000e400 	.word	0xe000e400
 800ce60:	2000122c 	.word	0x2000122c
 800ce64:	20001230 	.word	0x20001230
 800ce68:	e000ed20 	.word	0xe000ed20
 800ce6c:	20000010 	.word	0x20000010
 800ce70:	e000ef34 	.word	0xe000ef34

0800ce74 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ce74:	b480      	push	{r7}
 800ce76:	b083      	sub	sp, #12
 800ce78:	af00      	add	r7, sp, #0
	__asm volatile
 800ce7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce7e:	f383 8811 	msr	BASEPRI, r3
 800ce82:	f3bf 8f6f 	isb	sy
 800ce86:	f3bf 8f4f 	dsb	sy
 800ce8a:	607b      	str	r3, [r7, #4]
}
 800ce8c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ce8e:	4b0f      	ldr	r3, [pc, #60]	; (800cecc <vPortEnterCritical+0x58>)
 800ce90:	681b      	ldr	r3, [r3, #0]
 800ce92:	3301      	adds	r3, #1
 800ce94:	4a0d      	ldr	r2, [pc, #52]	; (800cecc <vPortEnterCritical+0x58>)
 800ce96:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ce98:	4b0c      	ldr	r3, [pc, #48]	; (800cecc <vPortEnterCritical+0x58>)
 800ce9a:	681b      	ldr	r3, [r3, #0]
 800ce9c:	2b01      	cmp	r3, #1
 800ce9e:	d10f      	bne.n	800cec0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800cea0:	4b0b      	ldr	r3, [pc, #44]	; (800ced0 <vPortEnterCritical+0x5c>)
 800cea2:	681b      	ldr	r3, [r3, #0]
 800cea4:	b2db      	uxtb	r3, r3
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	d00a      	beq.n	800cec0 <vPortEnterCritical+0x4c>
	__asm volatile
 800ceaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ceae:	f383 8811 	msr	BASEPRI, r3
 800ceb2:	f3bf 8f6f 	isb	sy
 800ceb6:	f3bf 8f4f 	dsb	sy
 800ceba:	603b      	str	r3, [r7, #0]
}
 800cebc:	bf00      	nop
 800cebe:	e7fe      	b.n	800cebe <vPortEnterCritical+0x4a>
	}
}
 800cec0:	bf00      	nop
 800cec2:	370c      	adds	r7, #12
 800cec4:	46bd      	mov	sp, r7
 800cec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceca:	4770      	bx	lr
 800cecc:	20000010 	.word	0x20000010
 800ced0:	e000ed04 	.word	0xe000ed04

0800ced4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ced4:	b480      	push	{r7}
 800ced6:	b083      	sub	sp, #12
 800ced8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ceda:	4b12      	ldr	r3, [pc, #72]	; (800cf24 <vPortExitCritical+0x50>)
 800cedc:	681b      	ldr	r3, [r3, #0]
 800cede:	2b00      	cmp	r3, #0
 800cee0:	d10a      	bne.n	800cef8 <vPortExitCritical+0x24>
	__asm volatile
 800cee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cee6:	f383 8811 	msr	BASEPRI, r3
 800ceea:	f3bf 8f6f 	isb	sy
 800ceee:	f3bf 8f4f 	dsb	sy
 800cef2:	607b      	str	r3, [r7, #4]
}
 800cef4:	bf00      	nop
 800cef6:	e7fe      	b.n	800cef6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800cef8:	4b0a      	ldr	r3, [pc, #40]	; (800cf24 <vPortExitCritical+0x50>)
 800cefa:	681b      	ldr	r3, [r3, #0]
 800cefc:	3b01      	subs	r3, #1
 800cefe:	4a09      	ldr	r2, [pc, #36]	; (800cf24 <vPortExitCritical+0x50>)
 800cf00:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800cf02:	4b08      	ldr	r3, [pc, #32]	; (800cf24 <vPortExitCritical+0x50>)
 800cf04:	681b      	ldr	r3, [r3, #0]
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	d105      	bne.n	800cf16 <vPortExitCritical+0x42>
 800cf0a:	2300      	movs	r3, #0
 800cf0c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cf0e:	683b      	ldr	r3, [r7, #0]
 800cf10:	f383 8811 	msr	BASEPRI, r3
}
 800cf14:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800cf16:	bf00      	nop
 800cf18:	370c      	adds	r7, #12
 800cf1a:	46bd      	mov	sp, r7
 800cf1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf20:	4770      	bx	lr
 800cf22:	bf00      	nop
 800cf24:	20000010 	.word	0x20000010
	...

0800cf30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800cf30:	f3ef 8009 	mrs	r0, PSP
 800cf34:	f3bf 8f6f 	isb	sy
 800cf38:	4b15      	ldr	r3, [pc, #84]	; (800cf90 <pxCurrentTCBConst>)
 800cf3a:	681a      	ldr	r2, [r3, #0]
 800cf3c:	f01e 0f10 	tst.w	lr, #16
 800cf40:	bf08      	it	eq
 800cf42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800cf46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf4a:	6010      	str	r0, [r2, #0]
 800cf4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800cf50:	f04f 0050 	mov.w	r0, #80	; 0x50
 800cf54:	f380 8811 	msr	BASEPRI, r0
 800cf58:	f3bf 8f4f 	dsb	sy
 800cf5c:	f3bf 8f6f 	isb	sy
 800cf60:	f7fe febc 	bl	800bcdc <vTaskSwitchContext>
 800cf64:	f04f 0000 	mov.w	r0, #0
 800cf68:	f380 8811 	msr	BASEPRI, r0
 800cf6c:	bc09      	pop	{r0, r3}
 800cf6e:	6819      	ldr	r1, [r3, #0]
 800cf70:	6808      	ldr	r0, [r1, #0]
 800cf72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf76:	f01e 0f10 	tst.w	lr, #16
 800cf7a:	bf08      	it	eq
 800cf7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800cf80:	f380 8809 	msr	PSP, r0
 800cf84:	f3bf 8f6f 	isb	sy
 800cf88:	4770      	bx	lr
 800cf8a:	bf00      	nop
 800cf8c:	f3af 8000 	nop.w

0800cf90 <pxCurrentTCBConst>:
 800cf90:	20000c00 	.word	0x20000c00
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800cf94:	bf00      	nop
 800cf96:	bf00      	nop

0800cf98 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800cf98:	b580      	push	{r7, lr}
 800cf9a:	b082      	sub	sp, #8
 800cf9c:	af00      	add	r7, sp, #0
	__asm volatile
 800cf9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfa2:	f383 8811 	msr	BASEPRI, r3
 800cfa6:	f3bf 8f6f 	isb	sy
 800cfaa:	f3bf 8f4f 	dsb	sy
 800cfae:	607b      	str	r3, [r7, #4]
}
 800cfb0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800cfb2:	f7fe fdd9 	bl	800bb68 <xTaskIncrementTick>
 800cfb6:	4603      	mov	r3, r0
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d003      	beq.n	800cfc4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800cfbc:	4b06      	ldr	r3, [pc, #24]	; (800cfd8 <xPortSysTickHandler+0x40>)
 800cfbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cfc2:	601a      	str	r2, [r3, #0]
 800cfc4:	2300      	movs	r3, #0
 800cfc6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cfc8:	683b      	ldr	r3, [r7, #0]
 800cfca:	f383 8811 	msr	BASEPRI, r3
}
 800cfce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800cfd0:	bf00      	nop
 800cfd2:	3708      	adds	r7, #8
 800cfd4:	46bd      	mov	sp, r7
 800cfd6:	bd80      	pop	{r7, pc}
 800cfd8:	e000ed04 	.word	0xe000ed04

0800cfdc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800cfdc:	b480      	push	{r7}
 800cfde:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800cfe0:	4b0b      	ldr	r3, [pc, #44]	; (800d010 <vPortSetupTimerInterrupt+0x34>)
 800cfe2:	2200      	movs	r2, #0
 800cfe4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800cfe6:	4b0b      	ldr	r3, [pc, #44]	; (800d014 <vPortSetupTimerInterrupt+0x38>)
 800cfe8:	2200      	movs	r2, #0
 800cfea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800cfec:	4b0a      	ldr	r3, [pc, #40]	; (800d018 <vPortSetupTimerInterrupt+0x3c>)
 800cfee:	681b      	ldr	r3, [r3, #0]
 800cff0:	4a0a      	ldr	r2, [pc, #40]	; (800d01c <vPortSetupTimerInterrupt+0x40>)
 800cff2:	fba2 2303 	umull	r2, r3, r2, r3
 800cff6:	099b      	lsrs	r3, r3, #6
 800cff8:	4a09      	ldr	r2, [pc, #36]	; (800d020 <vPortSetupTimerInterrupt+0x44>)
 800cffa:	3b01      	subs	r3, #1
 800cffc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800cffe:	4b04      	ldr	r3, [pc, #16]	; (800d010 <vPortSetupTimerInterrupt+0x34>)
 800d000:	2207      	movs	r2, #7
 800d002:	601a      	str	r2, [r3, #0]
}
 800d004:	bf00      	nop
 800d006:	46bd      	mov	sp, r7
 800d008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d00c:	4770      	bx	lr
 800d00e:	bf00      	nop
 800d010:	e000e010 	.word	0xe000e010
 800d014:	e000e018 	.word	0xe000e018
 800d018:	20000004 	.word	0x20000004
 800d01c:	10624dd3 	.word	0x10624dd3
 800d020:	e000e014 	.word	0xe000e014

0800d024 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d024:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800d034 <vPortEnableVFP+0x10>
 800d028:	6801      	ldr	r1, [r0, #0]
 800d02a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800d02e:	6001      	str	r1, [r0, #0]
 800d030:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d032:	bf00      	nop
 800d034:	e000ed88 	.word	0xe000ed88

0800d038 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d038:	b480      	push	{r7}
 800d03a:	b085      	sub	sp, #20
 800d03c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d03e:	f3ef 8305 	mrs	r3, IPSR
 800d042:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d044:	68fb      	ldr	r3, [r7, #12]
 800d046:	2b0f      	cmp	r3, #15
 800d048:	d914      	bls.n	800d074 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d04a:	4a17      	ldr	r2, [pc, #92]	; (800d0a8 <vPortValidateInterruptPriority+0x70>)
 800d04c:	68fb      	ldr	r3, [r7, #12]
 800d04e:	4413      	add	r3, r2
 800d050:	781b      	ldrb	r3, [r3, #0]
 800d052:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d054:	4b15      	ldr	r3, [pc, #84]	; (800d0ac <vPortValidateInterruptPriority+0x74>)
 800d056:	781b      	ldrb	r3, [r3, #0]
 800d058:	7afa      	ldrb	r2, [r7, #11]
 800d05a:	429a      	cmp	r2, r3
 800d05c:	d20a      	bcs.n	800d074 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800d05e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d062:	f383 8811 	msr	BASEPRI, r3
 800d066:	f3bf 8f6f 	isb	sy
 800d06a:	f3bf 8f4f 	dsb	sy
 800d06e:	607b      	str	r3, [r7, #4]
}
 800d070:	bf00      	nop
 800d072:	e7fe      	b.n	800d072 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d074:	4b0e      	ldr	r3, [pc, #56]	; (800d0b0 <vPortValidateInterruptPriority+0x78>)
 800d076:	681b      	ldr	r3, [r3, #0]
 800d078:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800d07c:	4b0d      	ldr	r3, [pc, #52]	; (800d0b4 <vPortValidateInterruptPriority+0x7c>)
 800d07e:	681b      	ldr	r3, [r3, #0]
 800d080:	429a      	cmp	r2, r3
 800d082:	d90a      	bls.n	800d09a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800d084:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d088:	f383 8811 	msr	BASEPRI, r3
 800d08c:	f3bf 8f6f 	isb	sy
 800d090:	f3bf 8f4f 	dsb	sy
 800d094:	603b      	str	r3, [r7, #0]
}
 800d096:	bf00      	nop
 800d098:	e7fe      	b.n	800d098 <vPortValidateInterruptPriority+0x60>
	}
 800d09a:	bf00      	nop
 800d09c:	3714      	adds	r7, #20
 800d09e:	46bd      	mov	sp, r7
 800d0a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0a4:	4770      	bx	lr
 800d0a6:	bf00      	nop
 800d0a8:	e000e3f0 	.word	0xe000e3f0
 800d0ac:	2000122c 	.word	0x2000122c
 800d0b0:	e000ed0c 	.word	0xe000ed0c
 800d0b4:	20001230 	.word	0x20001230

0800d0b8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d0b8:	b580      	push	{r7, lr}
 800d0ba:	b08a      	sub	sp, #40	; 0x28
 800d0bc:	af00      	add	r7, sp, #0
 800d0be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d0c0:	2300      	movs	r3, #0
 800d0c2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d0c4:	f7fe fc82 	bl	800b9cc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d0c8:	4b5b      	ldr	r3, [pc, #364]	; (800d238 <pvPortMalloc+0x180>)
 800d0ca:	681b      	ldr	r3, [r3, #0]
 800d0cc:	2b00      	cmp	r3, #0
 800d0ce:	d101      	bne.n	800d0d4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d0d0:	f000 f920 	bl	800d314 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d0d4:	4b59      	ldr	r3, [pc, #356]	; (800d23c <pvPortMalloc+0x184>)
 800d0d6:	681a      	ldr	r2, [r3, #0]
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	4013      	ands	r3, r2
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	f040 8093 	bne.w	800d208 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	2b00      	cmp	r3, #0
 800d0e6:	d01d      	beq.n	800d124 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800d0e8:	2208      	movs	r2, #8
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	4413      	add	r3, r2
 800d0ee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	f003 0307 	and.w	r3, r3, #7
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	d014      	beq.n	800d124 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	f023 0307 	bic.w	r3, r3, #7
 800d100:	3308      	adds	r3, #8
 800d102:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	f003 0307 	and.w	r3, r3, #7
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	d00a      	beq.n	800d124 <pvPortMalloc+0x6c>
	__asm volatile
 800d10e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d112:	f383 8811 	msr	BASEPRI, r3
 800d116:	f3bf 8f6f 	isb	sy
 800d11a:	f3bf 8f4f 	dsb	sy
 800d11e:	617b      	str	r3, [r7, #20]
}
 800d120:	bf00      	nop
 800d122:	e7fe      	b.n	800d122 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	2b00      	cmp	r3, #0
 800d128:	d06e      	beq.n	800d208 <pvPortMalloc+0x150>
 800d12a:	4b45      	ldr	r3, [pc, #276]	; (800d240 <pvPortMalloc+0x188>)
 800d12c:	681b      	ldr	r3, [r3, #0]
 800d12e:	687a      	ldr	r2, [r7, #4]
 800d130:	429a      	cmp	r2, r3
 800d132:	d869      	bhi.n	800d208 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d134:	4b43      	ldr	r3, [pc, #268]	; (800d244 <pvPortMalloc+0x18c>)
 800d136:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d138:	4b42      	ldr	r3, [pc, #264]	; (800d244 <pvPortMalloc+0x18c>)
 800d13a:	681b      	ldr	r3, [r3, #0]
 800d13c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d13e:	e004      	b.n	800d14a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800d140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d142:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d146:	681b      	ldr	r3, [r3, #0]
 800d148:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d14a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d14c:	685b      	ldr	r3, [r3, #4]
 800d14e:	687a      	ldr	r2, [r7, #4]
 800d150:	429a      	cmp	r2, r3
 800d152:	d903      	bls.n	800d15c <pvPortMalloc+0xa4>
 800d154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d156:	681b      	ldr	r3, [r3, #0]
 800d158:	2b00      	cmp	r3, #0
 800d15a:	d1f1      	bne.n	800d140 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d15c:	4b36      	ldr	r3, [pc, #216]	; (800d238 <pvPortMalloc+0x180>)
 800d15e:	681b      	ldr	r3, [r3, #0]
 800d160:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d162:	429a      	cmp	r2, r3
 800d164:	d050      	beq.n	800d208 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d166:	6a3b      	ldr	r3, [r7, #32]
 800d168:	681b      	ldr	r3, [r3, #0]
 800d16a:	2208      	movs	r2, #8
 800d16c:	4413      	add	r3, r2
 800d16e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d172:	681a      	ldr	r2, [r3, #0]
 800d174:	6a3b      	ldr	r3, [r7, #32]
 800d176:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d17a:	685a      	ldr	r2, [r3, #4]
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	1ad2      	subs	r2, r2, r3
 800d180:	2308      	movs	r3, #8
 800d182:	005b      	lsls	r3, r3, #1
 800d184:	429a      	cmp	r2, r3
 800d186:	d91f      	bls.n	800d1c8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d188:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	4413      	add	r3, r2
 800d18e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d190:	69bb      	ldr	r3, [r7, #24]
 800d192:	f003 0307 	and.w	r3, r3, #7
 800d196:	2b00      	cmp	r3, #0
 800d198:	d00a      	beq.n	800d1b0 <pvPortMalloc+0xf8>
	__asm volatile
 800d19a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d19e:	f383 8811 	msr	BASEPRI, r3
 800d1a2:	f3bf 8f6f 	isb	sy
 800d1a6:	f3bf 8f4f 	dsb	sy
 800d1aa:	613b      	str	r3, [r7, #16]
}
 800d1ac:	bf00      	nop
 800d1ae:	e7fe      	b.n	800d1ae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d1b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1b2:	685a      	ldr	r2, [r3, #4]
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	1ad2      	subs	r2, r2, r3
 800d1b8:	69bb      	ldr	r3, [r7, #24]
 800d1ba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d1bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1be:	687a      	ldr	r2, [r7, #4]
 800d1c0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d1c2:	69b8      	ldr	r0, [r7, #24]
 800d1c4:	f000 f908 	bl	800d3d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d1c8:	4b1d      	ldr	r3, [pc, #116]	; (800d240 <pvPortMalloc+0x188>)
 800d1ca:	681a      	ldr	r2, [r3, #0]
 800d1cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1ce:	685b      	ldr	r3, [r3, #4]
 800d1d0:	1ad3      	subs	r3, r2, r3
 800d1d2:	4a1b      	ldr	r2, [pc, #108]	; (800d240 <pvPortMalloc+0x188>)
 800d1d4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d1d6:	4b1a      	ldr	r3, [pc, #104]	; (800d240 <pvPortMalloc+0x188>)
 800d1d8:	681a      	ldr	r2, [r3, #0]
 800d1da:	4b1b      	ldr	r3, [pc, #108]	; (800d248 <pvPortMalloc+0x190>)
 800d1dc:	681b      	ldr	r3, [r3, #0]
 800d1de:	429a      	cmp	r2, r3
 800d1e0:	d203      	bcs.n	800d1ea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d1e2:	4b17      	ldr	r3, [pc, #92]	; (800d240 <pvPortMalloc+0x188>)
 800d1e4:	681b      	ldr	r3, [r3, #0]
 800d1e6:	4a18      	ldr	r2, [pc, #96]	; (800d248 <pvPortMalloc+0x190>)
 800d1e8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d1ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1ec:	685a      	ldr	r2, [r3, #4]
 800d1ee:	4b13      	ldr	r3, [pc, #76]	; (800d23c <pvPortMalloc+0x184>)
 800d1f0:	681b      	ldr	r3, [r3, #0]
 800d1f2:	431a      	orrs	r2, r3
 800d1f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1f6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d1f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1fa:	2200      	movs	r2, #0
 800d1fc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800d1fe:	4b13      	ldr	r3, [pc, #76]	; (800d24c <pvPortMalloc+0x194>)
 800d200:	681b      	ldr	r3, [r3, #0]
 800d202:	3301      	adds	r3, #1
 800d204:	4a11      	ldr	r2, [pc, #68]	; (800d24c <pvPortMalloc+0x194>)
 800d206:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d208:	f7fe fbee 	bl	800b9e8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d20c:	69fb      	ldr	r3, [r7, #28]
 800d20e:	f003 0307 	and.w	r3, r3, #7
 800d212:	2b00      	cmp	r3, #0
 800d214:	d00a      	beq.n	800d22c <pvPortMalloc+0x174>
	__asm volatile
 800d216:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d21a:	f383 8811 	msr	BASEPRI, r3
 800d21e:	f3bf 8f6f 	isb	sy
 800d222:	f3bf 8f4f 	dsb	sy
 800d226:	60fb      	str	r3, [r7, #12]
}
 800d228:	bf00      	nop
 800d22a:	e7fe      	b.n	800d22a <pvPortMalloc+0x172>
	return pvReturn;
 800d22c:	69fb      	ldr	r3, [r7, #28]
}
 800d22e:	4618      	mov	r0, r3
 800d230:	3728      	adds	r7, #40	; 0x28
 800d232:	46bd      	mov	sp, r7
 800d234:	bd80      	pop	{r7, pc}
 800d236:	bf00      	nop
 800d238:	20001df4 	.word	0x20001df4
 800d23c:	20001e08 	.word	0x20001e08
 800d240:	20001df8 	.word	0x20001df8
 800d244:	20001dec 	.word	0x20001dec
 800d248:	20001dfc 	.word	0x20001dfc
 800d24c:	20001e00 	.word	0x20001e00

0800d250 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d250:	b580      	push	{r7, lr}
 800d252:	b086      	sub	sp, #24
 800d254:	af00      	add	r7, sp, #0
 800d256:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	2b00      	cmp	r3, #0
 800d260:	d04d      	beq.n	800d2fe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d262:	2308      	movs	r3, #8
 800d264:	425b      	negs	r3, r3
 800d266:	697a      	ldr	r2, [r7, #20]
 800d268:	4413      	add	r3, r2
 800d26a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d26c:	697b      	ldr	r3, [r7, #20]
 800d26e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d270:	693b      	ldr	r3, [r7, #16]
 800d272:	685a      	ldr	r2, [r3, #4]
 800d274:	4b24      	ldr	r3, [pc, #144]	; (800d308 <vPortFree+0xb8>)
 800d276:	681b      	ldr	r3, [r3, #0]
 800d278:	4013      	ands	r3, r2
 800d27a:	2b00      	cmp	r3, #0
 800d27c:	d10a      	bne.n	800d294 <vPortFree+0x44>
	__asm volatile
 800d27e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d282:	f383 8811 	msr	BASEPRI, r3
 800d286:	f3bf 8f6f 	isb	sy
 800d28a:	f3bf 8f4f 	dsb	sy
 800d28e:	60fb      	str	r3, [r7, #12]
}
 800d290:	bf00      	nop
 800d292:	e7fe      	b.n	800d292 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d294:	693b      	ldr	r3, [r7, #16]
 800d296:	681b      	ldr	r3, [r3, #0]
 800d298:	2b00      	cmp	r3, #0
 800d29a:	d00a      	beq.n	800d2b2 <vPortFree+0x62>
	__asm volatile
 800d29c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2a0:	f383 8811 	msr	BASEPRI, r3
 800d2a4:	f3bf 8f6f 	isb	sy
 800d2a8:	f3bf 8f4f 	dsb	sy
 800d2ac:	60bb      	str	r3, [r7, #8]
}
 800d2ae:	bf00      	nop
 800d2b0:	e7fe      	b.n	800d2b0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d2b2:	693b      	ldr	r3, [r7, #16]
 800d2b4:	685a      	ldr	r2, [r3, #4]
 800d2b6:	4b14      	ldr	r3, [pc, #80]	; (800d308 <vPortFree+0xb8>)
 800d2b8:	681b      	ldr	r3, [r3, #0]
 800d2ba:	4013      	ands	r3, r2
 800d2bc:	2b00      	cmp	r3, #0
 800d2be:	d01e      	beq.n	800d2fe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d2c0:	693b      	ldr	r3, [r7, #16]
 800d2c2:	681b      	ldr	r3, [r3, #0]
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	d11a      	bne.n	800d2fe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d2c8:	693b      	ldr	r3, [r7, #16]
 800d2ca:	685a      	ldr	r2, [r3, #4]
 800d2cc:	4b0e      	ldr	r3, [pc, #56]	; (800d308 <vPortFree+0xb8>)
 800d2ce:	681b      	ldr	r3, [r3, #0]
 800d2d0:	43db      	mvns	r3, r3
 800d2d2:	401a      	ands	r2, r3
 800d2d4:	693b      	ldr	r3, [r7, #16]
 800d2d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d2d8:	f7fe fb78 	bl	800b9cc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d2dc:	693b      	ldr	r3, [r7, #16]
 800d2de:	685a      	ldr	r2, [r3, #4]
 800d2e0:	4b0a      	ldr	r3, [pc, #40]	; (800d30c <vPortFree+0xbc>)
 800d2e2:	681b      	ldr	r3, [r3, #0]
 800d2e4:	4413      	add	r3, r2
 800d2e6:	4a09      	ldr	r2, [pc, #36]	; (800d30c <vPortFree+0xbc>)
 800d2e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d2ea:	6938      	ldr	r0, [r7, #16]
 800d2ec:	f000 f874 	bl	800d3d8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800d2f0:	4b07      	ldr	r3, [pc, #28]	; (800d310 <vPortFree+0xc0>)
 800d2f2:	681b      	ldr	r3, [r3, #0]
 800d2f4:	3301      	adds	r3, #1
 800d2f6:	4a06      	ldr	r2, [pc, #24]	; (800d310 <vPortFree+0xc0>)
 800d2f8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800d2fa:	f7fe fb75 	bl	800b9e8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d2fe:	bf00      	nop
 800d300:	3718      	adds	r7, #24
 800d302:	46bd      	mov	sp, r7
 800d304:	bd80      	pop	{r7, pc}
 800d306:	bf00      	nop
 800d308:	20001e08 	.word	0x20001e08
 800d30c:	20001df8 	.word	0x20001df8
 800d310:	20001e04 	.word	0x20001e04

0800d314 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d314:	b480      	push	{r7}
 800d316:	b085      	sub	sp, #20
 800d318:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d31a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800d31e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d320:	4b27      	ldr	r3, [pc, #156]	; (800d3c0 <prvHeapInit+0xac>)
 800d322:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d324:	68fb      	ldr	r3, [r7, #12]
 800d326:	f003 0307 	and.w	r3, r3, #7
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	d00c      	beq.n	800d348 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d32e:	68fb      	ldr	r3, [r7, #12]
 800d330:	3307      	adds	r3, #7
 800d332:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d334:	68fb      	ldr	r3, [r7, #12]
 800d336:	f023 0307 	bic.w	r3, r3, #7
 800d33a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d33c:	68ba      	ldr	r2, [r7, #8]
 800d33e:	68fb      	ldr	r3, [r7, #12]
 800d340:	1ad3      	subs	r3, r2, r3
 800d342:	4a1f      	ldr	r2, [pc, #124]	; (800d3c0 <prvHeapInit+0xac>)
 800d344:	4413      	add	r3, r2
 800d346:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d348:	68fb      	ldr	r3, [r7, #12]
 800d34a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d34c:	4a1d      	ldr	r2, [pc, #116]	; (800d3c4 <prvHeapInit+0xb0>)
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d352:	4b1c      	ldr	r3, [pc, #112]	; (800d3c4 <prvHeapInit+0xb0>)
 800d354:	2200      	movs	r2, #0
 800d356:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	68ba      	ldr	r2, [r7, #8]
 800d35c:	4413      	add	r3, r2
 800d35e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d360:	2208      	movs	r2, #8
 800d362:	68fb      	ldr	r3, [r7, #12]
 800d364:	1a9b      	subs	r3, r3, r2
 800d366:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d368:	68fb      	ldr	r3, [r7, #12]
 800d36a:	f023 0307 	bic.w	r3, r3, #7
 800d36e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d370:	68fb      	ldr	r3, [r7, #12]
 800d372:	4a15      	ldr	r2, [pc, #84]	; (800d3c8 <prvHeapInit+0xb4>)
 800d374:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d376:	4b14      	ldr	r3, [pc, #80]	; (800d3c8 <prvHeapInit+0xb4>)
 800d378:	681b      	ldr	r3, [r3, #0]
 800d37a:	2200      	movs	r2, #0
 800d37c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d37e:	4b12      	ldr	r3, [pc, #72]	; (800d3c8 <prvHeapInit+0xb4>)
 800d380:	681b      	ldr	r3, [r3, #0]
 800d382:	2200      	movs	r2, #0
 800d384:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d38a:	683b      	ldr	r3, [r7, #0]
 800d38c:	68fa      	ldr	r2, [r7, #12]
 800d38e:	1ad2      	subs	r2, r2, r3
 800d390:	683b      	ldr	r3, [r7, #0]
 800d392:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d394:	4b0c      	ldr	r3, [pc, #48]	; (800d3c8 <prvHeapInit+0xb4>)
 800d396:	681a      	ldr	r2, [r3, #0]
 800d398:	683b      	ldr	r3, [r7, #0]
 800d39a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d39c:	683b      	ldr	r3, [r7, #0]
 800d39e:	685b      	ldr	r3, [r3, #4]
 800d3a0:	4a0a      	ldr	r2, [pc, #40]	; (800d3cc <prvHeapInit+0xb8>)
 800d3a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d3a4:	683b      	ldr	r3, [r7, #0]
 800d3a6:	685b      	ldr	r3, [r3, #4]
 800d3a8:	4a09      	ldr	r2, [pc, #36]	; (800d3d0 <prvHeapInit+0xbc>)
 800d3aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d3ac:	4b09      	ldr	r3, [pc, #36]	; (800d3d4 <prvHeapInit+0xc0>)
 800d3ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d3b2:	601a      	str	r2, [r3, #0]
}
 800d3b4:	bf00      	nop
 800d3b6:	3714      	adds	r7, #20
 800d3b8:	46bd      	mov	sp, r7
 800d3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3be:	4770      	bx	lr
 800d3c0:	20001234 	.word	0x20001234
 800d3c4:	20001dec 	.word	0x20001dec
 800d3c8:	20001df4 	.word	0x20001df4
 800d3cc:	20001dfc 	.word	0x20001dfc
 800d3d0:	20001df8 	.word	0x20001df8
 800d3d4:	20001e08 	.word	0x20001e08

0800d3d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d3d8:	b480      	push	{r7}
 800d3da:	b085      	sub	sp, #20
 800d3dc:	af00      	add	r7, sp, #0
 800d3de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d3e0:	4b28      	ldr	r3, [pc, #160]	; (800d484 <prvInsertBlockIntoFreeList+0xac>)
 800d3e2:	60fb      	str	r3, [r7, #12]
 800d3e4:	e002      	b.n	800d3ec <prvInsertBlockIntoFreeList+0x14>
 800d3e6:	68fb      	ldr	r3, [r7, #12]
 800d3e8:	681b      	ldr	r3, [r3, #0]
 800d3ea:	60fb      	str	r3, [r7, #12]
 800d3ec:	68fb      	ldr	r3, [r7, #12]
 800d3ee:	681b      	ldr	r3, [r3, #0]
 800d3f0:	687a      	ldr	r2, [r7, #4]
 800d3f2:	429a      	cmp	r2, r3
 800d3f4:	d8f7      	bhi.n	800d3e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d3f6:	68fb      	ldr	r3, [r7, #12]
 800d3f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d3fa:	68fb      	ldr	r3, [r7, #12]
 800d3fc:	685b      	ldr	r3, [r3, #4]
 800d3fe:	68ba      	ldr	r2, [r7, #8]
 800d400:	4413      	add	r3, r2
 800d402:	687a      	ldr	r2, [r7, #4]
 800d404:	429a      	cmp	r2, r3
 800d406:	d108      	bne.n	800d41a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d408:	68fb      	ldr	r3, [r7, #12]
 800d40a:	685a      	ldr	r2, [r3, #4]
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	685b      	ldr	r3, [r3, #4]
 800d410:	441a      	add	r2, r3
 800d412:	68fb      	ldr	r3, [r7, #12]
 800d414:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d416:	68fb      	ldr	r3, [r7, #12]
 800d418:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	685b      	ldr	r3, [r3, #4]
 800d422:	68ba      	ldr	r2, [r7, #8]
 800d424:	441a      	add	r2, r3
 800d426:	68fb      	ldr	r3, [r7, #12]
 800d428:	681b      	ldr	r3, [r3, #0]
 800d42a:	429a      	cmp	r2, r3
 800d42c:	d118      	bne.n	800d460 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d42e:	68fb      	ldr	r3, [r7, #12]
 800d430:	681a      	ldr	r2, [r3, #0]
 800d432:	4b15      	ldr	r3, [pc, #84]	; (800d488 <prvInsertBlockIntoFreeList+0xb0>)
 800d434:	681b      	ldr	r3, [r3, #0]
 800d436:	429a      	cmp	r2, r3
 800d438:	d00d      	beq.n	800d456 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	685a      	ldr	r2, [r3, #4]
 800d43e:	68fb      	ldr	r3, [r7, #12]
 800d440:	681b      	ldr	r3, [r3, #0]
 800d442:	685b      	ldr	r3, [r3, #4]
 800d444:	441a      	add	r2, r3
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d44a:	68fb      	ldr	r3, [r7, #12]
 800d44c:	681b      	ldr	r3, [r3, #0]
 800d44e:	681a      	ldr	r2, [r3, #0]
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	601a      	str	r2, [r3, #0]
 800d454:	e008      	b.n	800d468 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d456:	4b0c      	ldr	r3, [pc, #48]	; (800d488 <prvInsertBlockIntoFreeList+0xb0>)
 800d458:	681a      	ldr	r2, [r3, #0]
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	601a      	str	r2, [r3, #0]
 800d45e:	e003      	b.n	800d468 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d460:	68fb      	ldr	r3, [r7, #12]
 800d462:	681a      	ldr	r2, [r3, #0]
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d468:	68fa      	ldr	r2, [r7, #12]
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	429a      	cmp	r2, r3
 800d46e:	d002      	beq.n	800d476 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d470:	68fb      	ldr	r3, [r7, #12]
 800d472:	687a      	ldr	r2, [r7, #4]
 800d474:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d476:	bf00      	nop
 800d478:	3714      	adds	r7, #20
 800d47a:	46bd      	mov	sp, r7
 800d47c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d480:	4770      	bx	lr
 800d482:	bf00      	nop
 800d484:	20001dec 	.word	0x20001dec
 800d488:	20001df4 	.word	0x20001df4

0800d48c <__libc_init_array>:
 800d48c:	b570      	push	{r4, r5, r6, lr}
 800d48e:	4d0d      	ldr	r5, [pc, #52]	; (800d4c4 <__libc_init_array+0x38>)
 800d490:	4c0d      	ldr	r4, [pc, #52]	; (800d4c8 <__libc_init_array+0x3c>)
 800d492:	1b64      	subs	r4, r4, r5
 800d494:	10a4      	asrs	r4, r4, #2
 800d496:	2600      	movs	r6, #0
 800d498:	42a6      	cmp	r6, r4
 800d49a:	d109      	bne.n	800d4b0 <__libc_init_array+0x24>
 800d49c:	4d0b      	ldr	r5, [pc, #44]	; (800d4cc <__libc_init_array+0x40>)
 800d49e:	4c0c      	ldr	r4, [pc, #48]	; (800d4d0 <__libc_init_array+0x44>)
 800d4a0:	f000 f8f2 	bl	800d688 <_init>
 800d4a4:	1b64      	subs	r4, r4, r5
 800d4a6:	10a4      	asrs	r4, r4, #2
 800d4a8:	2600      	movs	r6, #0
 800d4aa:	42a6      	cmp	r6, r4
 800d4ac:	d105      	bne.n	800d4ba <__libc_init_array+0x2e>
 800d4ae:	bd70      	pop	{r4, r5, r6, pc}
 800d4b0:	f855 3b04 	ldr.w	r3, [r5], #4
 800d4b4:	4798      	blx	r3
 800d4b6:	3601      	adds	r6, #1
 800d4b8:	e7ee      	b.n	800d498 <__libc_init_array+0xc>
 800d4ba:	f855 3b04 	ldr.w	r3, [r5], #4
 800d4be:	4798      	blx	r3
 800d4c0:	3601      	adds	r6, #1
 800d4c2:	e7f2      	b.n	800d4aa <__libc_init_array+0x1e>
 800d4c4:	0800d808 	.word	0x0800d808
 800d4c8:	0800d808 	.word	0x0800d808
 800d4cc:	0800d808 	.word	0x0800d808
 800d4d0:	0800d80c 	.word	0x0800d80c

0800d4d4 <__retarget_lock_acquire_recursive>:
 800d4d4:	4770      	bx	lr

0800d4d6 <__retarget_lock_release_recursive>:
 800d4d6:	4770      	bx	lr

0800d4d8 <memcpy>:
 800d4d8:	440a      	add	r2, r1
 800d4da:	4291      	cmp	r1, r2
 800d4dc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800d4e0:	d100      	bne.n	800d4e4 <memcpy+0xc>
 800d4e2:	4770      	bx	lr
 800d4e4:	b510      	push	{r4, lr}
 800d4e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d4ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d4ee:	4291      	cmp	r1, r2
 800d4f0:	d1f9      	bne.n	800d4e6 <memcpy+0xe>
 800d4f2:	bd10      	pop	{r4, pc}

0800d4f4 <memset>:
 800d4f4:	4402      	add	r2, r0
 800d4f6:	4603      	mov	r3, r0
 800d4f8:	4293      	cmp	r3, r2
 800d4fa:	d100      	bne.n	800d4fe <memset+0xa>
 800d4fc:	4770      	bx	lr
 800d4fe:	f803 1b01 	strb.w	r1, [r3], #1
 800d502:	e7f9      	b.n	800d4f8 <memset+0x4>

0800d504 <cleanup_glue>:
 800d504:	b538      	push	{r3, r4, r5, lr}
 800d506:	460c      	mov	r4, r1
 800d508:	6809      	ldr	r1, [r1, #0]
 800d50a:	4605      	mov	r5, r0
 800d50c:	b109      	cbz	r1, 800d512 <cleanup_glue+0xe>
 800d50e:	f7ff fff9 	bl	800d504 <cleanup_glue>
 800d512:	4621      	mov	r1, r4
 800d514:	4628      	mov	r0, r5
 800d516:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d51a:	f000 b869 	b.w	800d5f0 <_free_r>
	...

0800d520 <_reclaim_reent>:
 800d520:	4b2c      	ldr	r3, [pc, #176]	; (800d5d4 <_reclaim_reent+0xb4>)
 800d522:	681b      	ldr	r3, [r3, #0]
 800d524:	4283      	cmp	r3, r0
 800d526:	b570      	push	{r4, r5, r6, lr}
 800d528:	4604      	mov	r4, r0
 800d52a:	d051      	beq.n	800d5d0 <_reclaim_reent+0xb0>
 800d52c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800d52e:	b143      	cbz	r3, 800d542 <_reclaim_reent+0x22>
 800d530:	68db      	ldr	r3, [r3, #12]
 800d532:	2b00      	cmp	r3, #0
 800d534:	d14a      	bne.n	800d5cc <_reclaim_reent+0xac>
 800d536:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d538:	6819      	ldr	r1, [r3, #0]
 800d53a:	b111      	cbz	r1, 800d542 <_reclaim_reent+0x22>
 800d53c:	4620      	mov	r0, r4
 800d53e:	f000 f857 	bl	800d5f0 <_free_r>
 800d542:	6961      	ldr	r1, [r4, #20]
 800d544:	b111      	cbz	r1, 800d54c <_reclaim_reent+0x2c>
 800d546:	4620      	mov	r0, r4
 800d548:	f000 f852 	bl	800d5f0 <_free_r>
 800d54c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800d54e:	b111      	cbz	r1, 800d556 <_reclaim_reent+0x36>
 800d550:	4620      	mov	r0, r4
 800d552:	f000 f84d 	bl	800d5f0 <_free_r>
 800d556:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800d558:	b111      	cbz	r1, 800d560 <_reclaim_reent+0x40>
 800d55a:	4620      	mov	r0, r4
 800d55c:	f000 f848 	bl	800d5f0 <_free_r>
 800d560:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800d562:	b111      	cbz	r1, 800d56a <_reclaim_reent+0x4a>
 800d564:	4620      	mov	r0, r4
 800d566:	f000 f843 	bl	800d5f0 <_free_r>
 800d56a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800d56c:	b111      	cbz	r1, 800d574 <_reclaim_reent+0x54>
 800d56e:	4620      	mov	r0, r4
 800d570:	f000 f83e 	bl	800d5f0 <_free_r>
 800d574:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800d576:	b111      	cbz	r1, 800d57e <_reclaim_reent+0x5e>
 800d578:	4620      	mov	r0, r4
 800d57a:	f000 f839 	bl	800d5f0 <_free_r>
 800d57e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800d580:	b111      	cbz	r1, 800d588 <_reclaim_reent+0x68>
 800d582:	4620      	mov	r0, r4
 800d584:	f000 f834 	bl	800d5f0 <_free_r>
 800d588:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d58a:	b111      	cbz	r1, 800d592 <_reclaim_reent+0x72>
 800d58c:	4620      	mov	r0, r4
 800d58e:	f000 f82f 	bl	800d5f0 <_free_r>
 800d592:	69a3      	ldr	r3, [r4, #24]
 800d594:	b1e3      	cbz	r3, 800d5d0 <_reclaim_reent+0xb0>
 800d596:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800d598:	4620      	mov	r0, r4
 800d59a:	4798      	blx	r3
 800d59c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800d59e:	b1b9      	cbz	r1, 800d5d0 <_reclaim_reent+0xb0>
 800d5a0:	4620      	mov	r0, r4
 800d5a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d5a6:	f7ff bfad 	b.w	800d504 <cleanup_glue>
 800d5aa:	5949      	ldr	r1, [r1, r5]
 800d5ac:	b941      	cbnz	r1, 800d5c0 <_reclaim_reent+0xa0>
 800d5ae:	3504      	adds	r5, #4
 800d5b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d5b2:	2d80      	cmp	r5, #128	; 0x80
 800d5b4:	68d9      	ldr	r1, [r3, #12]
 800d5b6:	d1f8      	bne.n	800d5aa <_reclaim_reent+0x8a>
 800d5b8:	4620      	mov	r0, r4
 800d5ba:	f000 f819 	bl	800d5f0 <_free_r>
 800d5be:	e7ba      	b.n	800d536 <_reclaim_reent+0x16>
 800d5c0:	680e      	ldr	r6, [r1, #0]
 800d5c2:	4620      	mov	r0, r4
 800d5c4:	f000 f814 	bl	800d5f0 <_free_r>
 800d5c8:	4631      	mov	r1, r6
 800d5ca:	e7ef      	b.n	800d5ac <_reclaim_reent+0x8c>
 800d5cc:	2500      	movs	r5, #0
 800d5ce:	e7ef      	b.n	800d5b0 <_reclaim_reent+0x90>
 800d5d0:	bd70      	pop	{r4, r5, r6, pc}
 800d5d2:	bf00      	nop
 800d5d4:	20000014 	.word	0x20000014

0800d5d8 <__malloc_lock>:
 800d5d8:	4801      	ldr	r0, [pc, #4]	; (800d5e0 <__malloc_lock+0x8>)
 800d5da:	f7ff bf7b 	b.w	800d4d4 <__retarget_lock_acquire_recursive>
 800d5de:	bf00      	nop
 800d5e0:	20001e0c 	.word	0x20001e0c

0800d5e4 <__malloc_unlock>:
 800d5e4:	4801      	ldr	r0, [pc, #4]	; (800d5ec <__malloc_unlock+0x8>)
 800d5e6:	f7ff bf76 	b.w	800d4d6 <__retarget_lock_release_recursive>
 800d5ea:	bf00      	nop
 800d5ec:	20001e0c 	.word	0x20001e0c

0800d5f0 <_free_r>:
 800d5f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d5f2:	2900      	cmp	r1, #0
 800d5f4:	d044      	beq.n	800d680 <_free_r+0x90>
 800d5f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d5fa:	9001      	str	r0, [sp, #4]
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	f1a1 0404 	sub.w	r4, r1, #4
 800d602:	bfb8      	it	lt
 800d604:	18e4      	addlt	r4, r4, r3
 800d606:	f7ff ffe7 	bl	800d5d8 <__malloc_lock>
 800d60a:	4a1e      	ldr	r2, [pc, #120]	; (800d684 <_free_r+0x94>)
 800d60c:	9801      	ldr	r0, [sp, #4]
 800d60e:	6813      	ldr	r3, [r2, #0]
 800d610:	b933      	cbnz	r3, 800d620 <_free_r+0x30>
 800d612:	6063      	str	r3, [r4, #4]
 800d614:	6014      	str	r4, [r2, #0]
 800d616:	b003      	add	sp, #12
 800d618:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d61c:	f7ff bfe2 	b.w	800d5e4 <__malloc_unlock>
 800d620:	42a3      	cmp	r3, r4
 800d622:	d908      	bls.n	800d636 <_free_r+0x46>
 800d624:	6825      	ldr	r5, [r4, #0]
 800d626:	1961      	adds	r1, r4, r5
 800d628:	428b      	cmp	r3, r1
 800d62a:	bf01      	itttt	eq
 800d62c:	6819      	ldreq	r1, [r3, #0]
 800d62e:	685b      	ldreq	r3, [r3, #4]
 800d630:	1949      	addeq	r1, r1, r5
 800d632:	6021      	streq	r1, [r4, #0]
 800d634:	e7ed      	b.n	800d612 <_free_r+0x22>
 800d636:	461a      	mov	r2, r3
 800d638:	685b      	ldr	r3, [r3, #4]
 800d63a:	b10b      	cbz	r3, 800d640 <_free_r+0x50>
 800d63c:	42a3      	cmp	r3, r4
 800d63e:	d9fa      	bls.n	800d636 <_free_r+0x46>
 800d640:	6811      	ldr	r1, [r2, #0]
 800d642:	1855      	adds	r5, r2, r1
 800d644:	42a5      	cmp	r5, r4
 800d646:	d10b      	bne.n	800d660 <_free_r+0x70>
 800d648:	6824      	ldr	r4, [r4, #0]
 800d64a:	4421      	add	r1, r4
 800d64c:	1854      	adds	r4, r2, r1
 800d64e:	42a3      	cmp	r3, r4
 800d650:	6011      	str	r1, [r2, #0]
 800d652:	d1e0      	bne.n	800d616 <_free_r+0x26>
 800d654:	681c      	ldr	r4, [r3, #0]
 800d656:	685b      	ldr	r3, [r3, #4]
 800d658:	6053      	str	r3, [r2, #4]
 800d65a:	4421      	add	r1, r4
 800d65c:	6011      	str	r1, [r2, #0]
 800d65e:	e7da      	b.n	800d616 <_free_r+0x26>
 800d660:	d902      	bls.n	800d668 <_free_r+0x78>
 800d662:	230c      	movs	r3, #12
 800d664:	6003      	str	r3, [r0, #0]
 800d666:	e7d6      	b.n	800d616 <_free_r+0x26>
 800d668:	6825      	ldr	r5, [r4, #0]
 800d66a:	1961      	adds	r1, r4, r5
 800d66c:	428b      	cmp	r3, r1
 800d66e:	bf04      	itt	eq
 800d670:	6819      	ldreq	r1, [r3, #0]
 800d672:	685b      	ldreq	r3, [r3, #4]
 800d674:	6063      	str	r3, [r4, #4]
 800d676:	bf04      	itt	eq
 800d678:	1949      	addeq	r1, r1, r5
 800d67a:	6021      	streq	r1, [r4, #0]
 800d67c:	6054      	str	r4, [r2, #4]
 800d67e:	e7ca      	b.n	800d616 <_free_r+0x26>
 800d680:	b003      	add	sp, #12
 800d682:	bd30      	pop	{r4, r5, pc}
 800d684:	20001e10 	.word	0x20001e10

0800d688 <_init>:
 800d688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d68a:	bf00      	nop
 800d68c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d68e:	bc08      	pop	{r3}
 800d690:	469e      	mov	lr, r3
 800d692:	4770      	bx	lr

0800d694 <_fini>:
 800d694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d696:	bf00      	nop
 800d698:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d69a:	bc08      	pop	{r3}
 800d69c:	469e      	mov	lr, r3
 800d69e:	4770      	bx	lr
