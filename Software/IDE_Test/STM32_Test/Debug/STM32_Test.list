
STM32_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d530  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000018c  0800d6f0  0800d6f0  0001d6f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d87c  0800d87c  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  0800d87c  0800d87c  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d87c  0800d87c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d87c  0800d87c  0001d87c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d880  0800d880  0001d880  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800d884  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001d44  20000074  0800d8f8  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000c00  20001db8  0800d8f8  00021db8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00027091  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000050f1  00000000  00000000  00047135  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001f88  00000000  00000000  0004c228  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001d60  00000000  00000000  0004e1b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003733f  00000000  00000000  0004ff10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000241c5  00000000  00000000  0008724f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0014a2b0  00000000  00000000  000ab414  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001f56c4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008794  00000000  00000000  001f5714  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000074 	.word	0x20000074
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800d6d8 	.word	0x0800d6d8

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000078 	.word	0x20000078
 80001fc:	0800d6d8 	.word	0x0800d6d8

08000200 <ADC_Init>:
  .stack_size = 128 * 4,
  .priority = (osPriority_t) osPriorityNormal,
};

//initialize ADC thread
void ADC_Init(void) {
 8000200:	b580      	push	{r7, lr}
 8000202:	af00      	add	r7, sp, #0
	ADC_semHandle = osSemaphoreNew(1, 1, &ADC_sem_attributes);
 8000204:	4a08      	ldr	r2, [pc, #32]	; (8000228 <ADC_Init+0x28>)
 8000206:	2101      	movs	r1, #1
 8000208:	2001      	movs	r0, #1
 800020a:	f009 fe13 	bl	8009e34 <osSemaphoreNew>
 800020e:	4603      	mov	r3, r0
 8000210:	4a06      	ldr	r2, [pc, #24]	; (800022c <ADC_Init+0x2c>)
 8000212:	6013      	str	r3, [r2, #0]
	thr_1 = osThreadNew(ADC_collect, &hadc1, &thr_1_attributes);
 8000214:	4a06      	ldr	r2, [pc, #24]	; (8000230 <ADC_Init+0x30>)
 8000216:	4907      	ldr	r1, [pc, #28]	; (8000234 <ADC_Init+0x34>)
 8000218:	4807      	ldr	r0, [pc, #28]	; (8000238 <ADC_Init+0x38>)
 800021a:	f009 fcd8 	bl	8009bce <osThreadNew>
 800021e:	4603      	mov	r3, r0
 8000220:	4a06      	ldr	r2, [pc, #24]	; (800023c <ADC_Init+0x3c>)
 8000222:	6013      	str	r3, [r2, #0]

}
 8000224:	bf00      	nop
 8000226:	bd80      	pop	{r7, pc}
 8000228:	0800d740 	.word	0x0800d740
 800022c:	200000ac 	.word	0x200000ac
 8000230:	0800d750 	.word	0x0800d750
 8000234:	20000144 	.word	0x20000144
 8000238:	080002b5 	.word	0x080002b5
 800023c:	20000100 	.word	0x20000100

08000240 <HAL_ADC_ConvCpltCallback>:

//since ADC 1 has 3 pins we are getting data from, our adc buffer raw has space for 9 values
//aka 3x of adc pins.
//We average out the 3 ADC values for each pin
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){
 8000240:	b580      	push	{r7, lr}
 8000242:	b084      	sub	sp, #16
 8000244:	af00      	add	r7, sp, #0
 8000246:	6078      	str	r0, [r7, #4]
	// ADC averaging
	for(int i = 0 ; i < 3; i++) {
 8000248:	2300      	movs	r3, #0
 800024a:	60fb      	str	r3, [r7, #12]
 800024c:	e01d      	b.n	800028a <HAL_ADC_ConvCpltCallback+0x4a>
		ADC_buffer_processed[i] = (ADC_buffer_raw[0 + i] + ADC_buffer_raw[3 + i] + ADC_buffer_raw[6 + i])/3;
 800024e:	4a15      	ldr	r2, [pc, #84]	; (80002a4 <HAL_ADC_ConvCpltCallback+0x64>)
 8000250:	68fb      	ldr	r3, [r7, #12]
 8000252:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000256:	4619      	mov	r1, r3
 8000258:	68fb      	ldr	r3, [r7, #12]
 800025a:	3303      	adds	r3, #3
 800025c:	4a11      	ldr	r2, [pc, #68]	; (80002a4 <HAL_ADC_ConvCpltCallback+0x64>)
 800025e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000262:	440b      	add	r3, r1
 8000264:	68fa      	ldr	r2, [r7, #12]
 8000266:	3206      	adds	r2, #6
 8000268:	490e      	ldr	r1, [pc, #56]	; (80002a4 <HAL_ADC_ConvCpltCallback+0x64>)
 800026a:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 800026e:	4413      	add	r3, r2
 8000270:	4a0d      	ldr	r2, [pc, #52]	; (80002a8 <HAL_ADC_ConvCpltCallback+0x68>)
 8000272:	fb82 1203 	smull	r1, r2, r2, r3
 8000276:	17db      	asrs	r3, r3, #31
 8000278:	1ad3      	subs	r3, r2, r3
 800027a:	b299      	uxth	r1, r3
 800027c:	4a0b      	ldr	r2, [pc, #44]	; (80002ac <HAL_ADC_ConvCpltCallback+0x6c>)
 800027e:	68fb      	ldr	r3, [r7, #12]
 8000280:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int i = 0 ; i < 3; i++) {
 8000284:	68fb      	ldr	r3, [r7, #12]
 8000286:	3301      	adds	r3, #1
 8000288:	60fb      	str	r3, [r7, #12]
 800028a:	68fb      	ldr	r3, [r7, #12]
 800028c:	2b02      	cmp	r3, #2
 800028e:	ddde      	ble.n	800024e <HAL_ADC_ConvCpltCallback+0xe>
	}
	osSemaphoreRelease(ADC_semHandle);
 8000290:	4b07      	ldr	r3, [pc, #28]	; (80002b0 <HAL_ADC_ConvCpltCallback+0x70>)
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	4618      	mov	r0, r3
 8000296:	f009 fea9 	bl	8009fec <osSemaphoreRelease>
}
 800029a:	bf00      	nop
 800029c:	3710      	adds	r7, #16
 800029e:	46bd      	mov	sp, r7
 80002a0:	bd80      	pop	{r7, pc}
 80002a2:	bf00      	nop
 80002a4:	20000090 	.word	0x20000090
 80002a8:	55555556 	.word	0x55555556
 80002ac:	200000a4 	.word	0x200000a4
 80002b0:	200000ac 	.word	0x200000ac

080002b4 <ADC_collect>:

//collect raw adc data through the DMA
void ADC_collect(void *argument)
{
 80002b4:	b580      	push	{r7, lr}
 80002b6:	b084      	sub	sp, #16
 80002b8:	af00      	add	r7, sp, #0
 80002ba:	6078      	str	r0, [r7, #4]
	ADC_HandleTypeDef *hadc = argument;
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
	HAL_ADC_Start_DMA(hadc, (uint32_t*)ADC_buffer_raw, 9);
 80002c0:	2209      	movs	r2, #9
 80002c2:	4907      	ldr	r1, [pc, #28]	; (80002e0 <ADC_collect+0x2c>)
 80002c4:	68f8      	ldr	r0, [r7, #12]
 80002c6:	f001 fbad 	bl	8001a24 <HAL_ADC_Start_DMA>
  for(;;)
  {
	  osSemaphoreAcquire(ADC_semHandle, osWaitForever);
 80002ca:	4b06      	ldr	r3, [pc, #24]	; (80002e4 <ADC_collect+0x30>)
 80002cc:	681b      	ldr	r3, [r3, #0]
 80002ce:	f04f 31ff 	mov.w	r1, #4294967295
 80002d2:	4618      	mov	r0, r3
 80002d4:	f009 fe38 	bl	8009f48 <osSemaphoreAcquire>
	  // process adc buffer good

    osDelay(1);
 80002d8:	2001      	movs	r0, #1
 80002da:	f009 fd0a 	bl	8009cf2 <osDelay>
	  osSemaphoreAcquire(ADC_semHandle, osWaitForever);
 80002de:	e7f4      	b.n	80002ca <ADC_collect+0x16>
 80002e0:	20000090 	.word	0x20000090
 80002e4:	200000ac 	.word	0x200000ac

080002e8 <temperatureDecode>:
//int temp;
int motorTorqueHighFault = 0x00;
int motorTorqueLowFault = 0x00;
int decodedTemperature;

int temperatureDecode (int high, int low) {
 80002e8:	b480      	push	{r7}
 80002ea:	b085      	sub	sp, #20
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	6078      	str	r0, [r7, #4]
 80002f0:	6039      	str	r1, [r7, #0]
	 int temperatureCelsius = (high*256 + low)/10;
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	021a      	lsls	r2, r3, #8
 80002f6:	683b      	ldr	r3, [r7, #0]
 80002f8:	4413      	add	r3, r2
 80002fa:	4a07      	ldr	r2, [pc, #28]	; (8000318 <temperatureDecode+0x30>)
 80002fc:	fb82 1203 	smull	r1, r2, r2, r3
 8000300:	1092      	asrs	r2, r2, #2
 8000302:	17db      	asrs	r3, r3, #31
 8000304:	1ad3      	subs	r3, r2, r3
 8000306:	60fb      	str	r3, [r7, #12]
	return temperatureCelsius;
 8000308:	68fb      	ldr	r3, [r7, #12]
}
 800030a:	4618      	mov	r0, r3
 800030c:	3714      	adds	r7, #20
 800030e:	46bd      	mov	sp, r7
 8000310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000314:	4770      	bx	lr
 8000316:	bf00      	nop
 8000318:	66666667 	.word	0x66666667

0800031c <can_Init>:
        reversed_num = (reversed_num << 4) + (hex_num & 0xF);
        hex_num >>= 4;
    }
    return reversed_num;
}
void can_Init(void) {
 800031c:	b580      	push	{r7, lr}
 800031e:	b08a      	sub	sp, #40	; 0x28
 8000320:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef  sFilterConfig;
	//canmsg_rx = osMessageQueueNew(10, sizeof(canMsg), &msgAttr);
	txCAN.IDE = CAN_ID_EXT;
 8000322:	4b1b      	ldr	r3, [pc, #108]	; (8000390 <can_Init+0x74>)
 8000324:	2204      	movs	r2, #4
 8000326:	609a      	str	r2, [r3, #8]
	txCAN.RTR = CAN_RTR_DATA;
 8000328:	4b19      	ldr	r3, [pc, #100]	; (8000390 <can_Init+0x74>)
 800032a:	2200      	movs	r2, #0
 800032c:	60da      	str	r2, [r3, #12]
	txCAN.TransmitGlobalTime = DISABLE;
 800032e:	4b18      	ldr	r3, [pc, #96]	; (8000390 <can_Init+0x74>)
 8000330:	2200      	movs	r2, #0
 8000332:	751a      	strb	r2, [r3, #20]
	sFilterConfig.FilterBank = 0;
 8000334:	2300      	movs	r3, #0
 8000336:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000338:	2300      	movs	r3, #0
 800033a:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800033c:	2301      	movs	r3, #1
 800033e:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterIdHigh = 0x0000;
 8000340:	2300      	movs	r3, #0
 8000342:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIdLow = 0x0000;
 8000344:	2300      	movs	r3, #0
 8000346:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterMaskIdHigh = 0x0000;
 8000348:	2300      	movs	r3, #0
 800034a:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterMaskIdLow = 0x0000;
 800034c:	2300      	movs	r3, #0
 800034e:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000350:	2300      	movs	r3, #0
 8000352:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterActivation = ENABLE;
 8000354:	2301      	movs	r3, #1
 8000356:	623b      	str	r3, [r7, #32]
	sFilterConfig.SlaveStartFilterBank = 14;
 8000358:	230e      	movs	r3, #14
 800035a:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 800035c:	463b      	mov	r3, r7
 800035e:	4619      	mov	r1, r3
 8000360:	480c      	ldr	r0, [pc, #48]	; (8000394 <can_Init+0x78>)
 8000362:	f002 fbf8 	bl	8002b56 <HAL_CAN_ConfigFilter>
 8000366:	4603      	mov	r3, r0
 8000368:	2b00      	cmp	r3, #0
 800036a:	d001      	beq.n	8000370 <can_Init+0x54>
	{
	    /* Filter configuration Error */
	  Error_Handler();
 800036c:	f000 fce4 	bl	8000d38 <Error_Handler>
	}
	HAL_CAN_Start(&hcan1);
 8000370:	4808      	ldr	r0, [pc, #32]	; (8000394 <can_Init+0x78>)
 8000372:	f002 fcba 	bl	8002cea <HAL_CAN_Start>
  if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 8000376:	2102      	movs	r1, #2
 8000378:	4806      	ldr	r0, [pc, #24]	; (8000394 <can_Init+0x78>)
 800037a:	f002 fe0c 	bl	8002f96 <HAL_CAN_ActivateNotification>
 800037e:	4603      	mov	r3, r0
 8000380:	2b00      	cmp	r3, #0
 8000382:	d001      	beq.n	8000388 <can_Init+0x6c>
  {
	/* Notification Error */
	Error_Handler();
 8000384:	f000 fcd8 	bl	8000d38 <Error_Handler>
  }
}
 8000388:	bf00      	nop
 800038a:	3728      	adds	r7, #40	; 0x28
 800038c:	46bd      	mov	sp, r7
 800038e:	bd80      	pop	{r7, pc}
 8000390:	20000104 	.word	0x20000104
 8000394:	2000020c 	.word	0x2000020c

08000398 <HAL_CAN_RxFifo0MsgPendingCallback>:
	HAL_CAN_AddTxMessage(&hcan1, &txCAN, txData, &txMail);
}

//decode the message from the interrupt with queueget
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000398:	b580      	push	{r7, lr}
 800039a:	b082      	sub	sp, #8
 800039c:	af00      	add	r7, sp, #0
 800039e:	6078      	str	r0, [r7, #4]
	//canMsg temp;
  /* Get RX message */
  if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 80003a0:	4b0f      	ldr	r3, [pc, #60]	; (80003e0 <HAL_CAN_RxFifo0MsgPendingCallback+0x48>)
 80003a2:	4a10      	ldr	r2, [pc, #64]	; (80003e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>)
 80003a4:	2100      	movs	r1, #0
 80003a6:	6878      	ldr	r0, [r7, #4]
 80003a8:	f002 fce3 	bl	8002d72 <HAL_CAN_GetRxMessage>
 80003ac:	4603      	mov	r3, r0
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d001      	beq.n	80003b6 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
  {
	/* Reception Error */
	Error_Handler();
 80003b2:	f000 fcc1 	bl	8000d38 <Error_Handler>
  }
//  if (temp.RxHeader.ExtId == temperatureAddress) {
//	  decodedTemperature = temperatureDecode(temp.RxData[1], temp.RxData[0]);
////	  osMessageQueuePut(canmsg_rx, &decodedTemperature, 0, 0);
//  }
  if (RxHeader.ExtId == temperatureAddress) {
 80003b6:	4b0b      	ldr	r3, [pc, #44]	; (80003e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>)
 80003b8:	685b      	ldr	r3, [r3, #4]
 80003ba:	2ba2      	cmp	r3, #162	; 0xa2
 80003bc:	d10b      	bne.n	80003d6 <HAL_CAN_RxFifo0MsgPendingCallback+0x3e>
	  decodedTemperature = temperatureDecode(RxData[5], RxData[4]);
 80003be:	4b08      	ldr	r3, [pc, #32]	; (80003e0 <HAL_CAN_RxFifo0MsgPendingCallback+0x48>)
 80003c0:	795b      	ldrb	r3, [r3, #5]
 80003c2:	461a      	mov	r2, r3
 80003c4:	4b06      	ldr	r3, [pc, #24]	; (80003e0 <HAL_CAN_RxFifo0MsgPendingCallback+0x48>)
 80003c6:	791b      	ldrb	r3, [r3, #4]
 80003c8:	4619      	mov	r1, r3
 80003ca:	4610      	mov	r0, r2
 80003cc:	f7ff ff8c 	bl	80002e8 <temperatureDecode>
 80003d0:	4603      	mov	r3, r0
 80003d2:	4a05      	ldr	r2, [pc, #20]	; (80003e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x50>)
 80003d4:	6013      	str	r3, [r2, #0]

  //
//  if (RxHeader.ExtId == temperatureAddress) {
//	  decodedTemperature = temperatureDecode(RxData[5], RxData[4]);
//  }
}
 80003d6:	bf00      	nop
 80003d8:	3708      	adds	r7, #8
 80003da:	46bd      	mov	sp, r7
 80003dc:	bd80      	pop	{r7, pc}
 80003de:	bf00      	nop
 80003e0:	20000138 	.word	0x20000138
 80003e4:	2000011c 	.word	0x2000011c
 80003e8:	20000140 	.word	0x20000140

080003ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003f0:	f000 ff81 	bl	80012f6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003f4:	f000 f83a 	bl	800046c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003f8:	f000 f98e 	bl	8000718 <MX_GPIO_Init>
  MX_DMA_Init();
 80003fc:	f000 f962 	bl	80006c4 <MX_DMA_Init>
  MX_SDMMC1_SD_Init();
 8000400:	f000 f93e 	bl	8000680 <MX_SDMMC1_SD_Init>
  MX_CAN1_Init();
 8000404:	f000 f906 	bl	8000614 <MX_CAN1_Init>
  MX_ADC1_Init();
 8000408:	f000 f87e 	bl	8000508 <MX_ADC1_Init>
  MX_FATFS_Init();
 800040c:	f009 f85e 	bl	80094cc <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000410:	f009 fb5c 	bl	8009acc <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of myMutex01 */
  myMutex01Handle = osMutexNew(&myMutex01_attributes);
 8000414:	480e      	ldr	r0, [pc, #56]	; (8000450 <main+0x64>)
 8000416:	f009 fc87 	bl	8009d28 <osMutexNew>
 800041a:	4603      	mov	r3, r0
 800041c:	4a0d      	ldr	r2, [pc, #52]	; (8000454 <main+0x68>)
 800041e:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of myQueue01 */
  myQueue01Handle = osMessageQueueNew (16, sizeof(uint16_t), &myQueue01_attributes);
 8000420:	4a0d      	ldr	r2, [pc, #52]	; (8000458 <main+0x6c>)
 8000422:	2102      	movs	r1, #2
 8000424:	2010      	movs	r0, #16
 8000426:	f009 fe25 	bl	800a074 <osMessageQueueNew>
 800042a:	4603      	mov	r3, r0
 800042c:	4a0b      	ldr	r2, [pc, #44]	; (800045c <main+0x70>)
 800042e:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000430:	4a0b      	ldr	r2, [pc, #44]	; (8000460 <main+0x74>)
 8000432:	2100      	movs	r1, #0
 8000434:	480b      	ldr	r0, [pc, #44]	; (8000464 <main+0x78>)
 8000436:	f009 fbca 	bl	8009bce <osThreadNew>
 800043a:	4603      	mov	r3, r0
 800043c:	4a0a      	ldr	r2, [pc, #40]	; (8000468 <main+0x7c>)
 800043e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  ADC_Init();
 8000440:	f7ff fede 	bl	8000200 <ADC_Init>
  can_Init();
 8000444:	f7ff ff6a 	bl	800031c <can_Init>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000448:	f009 fb86 	bl	8009b58 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800044c:	e7fe      	b.n	800044c <main+0x60>
 800044e:	bf00      	nop
 8000450:	0800d7b0 	.word	0x0800d7b0
 8000454:	2000032c 	.word	0x2000032c
 8000458:	0800d798 	.word	0x0800d798
 800045c:	200002b8 	.word	0x200002b8
 8000460:	0800d774 	.word	0x0800d774
 8000464:	08000d05 	.word	0x08000d05
 8000468:	200002b4 	.word	0x200002b4

0800046c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	b096      	sub	sp, #88	; 0x58
 8000470:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000472:	f107 0314 	add.w	r3, r7, #20
 8000476:	2244      	movs	r2, #68	; 0x44
 8000478:	2100      	movs	r1, #0
 800047a:	4618      	mov	r0, r3
 800047c:	f00d f862 	bl	800d544 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000480:	463b      	mov	r3, r7
 8000482:	2200      	movs	r2, #0
 8000484:	601a      	str	r2, [r3, #0]
 8000486:	605a      	str	r2, [r3, #4]
 8000488:	609a      	str	r2, [r3, #8]
 800048a:	60da      	str	r2, [r3, #12]
 800048c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 800048e:	2000      	movs	r0, #0
 8000490:	f003 fd0c 	bl	8003eac <HAL_PWREx_ControlVoltageScaling>
 8000494:	4603      	mov	r3, r0
 8000496:	2b00      	cmp	r3, #0
 8000498:	d001      	beq.n	800049e <SystemClock_Config+0x32>
  {
    Error_Handler();
 800049a:	f000 fc4d 	bl	8000d38 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800049e:	2301      	movs	r3, #1
 80004a0:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80004a2:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80004a6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004a8:	2302      	movs	r3, #2
 80004aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80004ac:	2303      	movs	r3, #3
 80004ae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 2;
 80004b0:	2302      	movs	r3, #2
 80004b2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 30;
 80004b4:	231e      	movs	r3, #30
 80004b6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80004b8:	2302      	movs	r3, #2
 80004ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80004bc:	2302      	movs	r3, #2
 80004be:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80004c0:	2302      	movs	r3, #2
 80004c2:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004c4:	f107 0314 	add.w	r3, r7, #20
 80004c8:	4618      	mov	r0, r3
 80004ca:	f003 fda3 	bl	8004014 <HAL_RCC_OscConfig>
 80004ce:	4603      	mov	r3, r0
 80004d0:	2b00      	cmp	r3, #0
 80004d2:	d001      	beq.n	80004d8 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 80004d4:	f000 fc30 	bl	8000d38 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004d8:	230f      	movs	r3, #15
 80004da:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004dc:	2303      	movs	r3, #3
 80004de:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004e0:	2300      	movs	r3, #0
 80004e2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004e4:	2300      	movs	r3, #0
 80004e6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004e8:	2300      	movs	r3, #0
 80004ea:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80004ec:	463b      	mov	r3, r7
 80004ee:	2105      	movs	r1, #5
 80004f0:	4618      	mov	r0, r3
 80004f2:	f004 f9a9 	bl	8004848 <HAL_RCC_ClockConfig>
 80004f6:	4603      	mov	r3, r0
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d001      	beq.n	8000500 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80004fc:	f000 fc1c 	bl	8000d38 <Error_Handler>
  }
}
 8000500:	bf00      	nop
 8000502:	3758      	adds	r7, #88	; 0x58
 8000504:	46bd      	mov	sp, r7
 8000506:	bd80      	pop	{r7, pc}

08000508 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b086      	sub	sp, #24
 800050c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800050e:	463b      	mov	r3, r7
 8000510:	2200      	movs	r2, #0
 8000512:	601a      	str	r2, [r3, #0]
 8000514:	605a      	str	r2, [r3, #4]
 8000516:	609a      	str	r2, [r3, #8]
 8000518:	60da      	str	r2, [r3, #12]
 800051a:	611a      	str	r2, [r3, #16]
 800051c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800051e:	4b38      	ldr	r3, [pc, #224]	; (8000600 <MX_ADC1_Init+0xf8>)
 8000520:	4a38      	ldr	r2, [pc, #224]	; (8000604 <MX_ADC1_Init+0xfc>)
 8000522:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000524:	4b36      	ldr	r3, [pc, #216]	; (8000600 <MX_ADC1_Init+0xf8>)
 8000526:	2200      	movs	r2, #0
 8000528:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800052a:	4b35      	ldr	r3, [pc, #212]	; (8000600 <MX_ADC1_Init+0xf8>)
 800052c:	2200      	movs	r2, #0
 800052e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000530:	4b33      	ldr	r3, [pc, #204]	; (8000600 <MX_ADC1_Init+0xf8>)
 8000532:	2200      	movs	r2, #0
 8000534:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000536:	4b32      	ldr	r3, [pc, #200]	; (8000600 <MX_ADC1_Init+0xf8>)
 8000538:	2201      	movs	r2, #1
 800053a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800053c:	4b30      	ldr	r3, [pc, #192]	; (8000600 <MX_ADC1_Init+0xf8>)
 800053e:	2204      	movs	r2, #4
 8000540:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000542:	4b2f      	ldr	r3, [pc, #188]	; (8000600 <MX_ADC1_Init+0xf8>)
 8000544:	2200      	movs	r2, #0
 8000546:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000548:	4b2d      	ldr	r3, [pc, #180]	; (8000600 <MX_ADC1_Init+0xf8>)
 800054a:	2200      	movs	r2, #0
 800054c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 3;
 800054e:	4b2c      	ldr	r3, [pc, #176]	; (8000600 <MX_ADC1_Init+0xf8>)
 8000550:	2203      	movs	r2, #3
 8000552:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000554:	4b2a      	ldr	r3, [pc, #168]	; (8000600 <MX_ADC1_Init+0xf8>)
 8000556:	2200      	movs	r2, #0
 8000558:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800055c:	4b28      	ldr	r3, [pc, #160]	; (8000600 <MX_ADC1_Init+0xf8>)
 800055e:	2200      	movs	r2, #0
 8000560:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000562:	4b27      	ldr	r3, [pc, #156]	; (8000600 <MX_ADC1_Init+0xf8>)
 8000564:	2200      	movs	r2, #0
 8000566:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000568:	4b25      	ldr	r3, [pc, #148]	; (8000600 <MX_ADC1_Init+0xf8>)
 800056a:	2201      	movs	r2, #1
 800056c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000570:	4b23      	ldr	r3, [pc, #140]	; (8000600 <MX_ADC1_Init+0xf8>)
 8000572:	2200      	movs	r2, #0
 8000574:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000576:	4b22      	ldr	r3, [pc, #136]	; (8000600 <MX_ADC1_Init+0xf8>)
 8000578:	2200      	movs	r2, #0
 800057a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.DFSDMConfig = ADC_DFSDM_MODE_ENABLE;
 800057e:	4b20      	ldr	r3, [pc, #128]	; (8000600 <MX_ADC1_Init+0xf8>)
 8000580:	2204      	movs	r2, #4
 8000582:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000584:	481e      	ldr	r0, [pc, #120]	; (8000600 <MX_ADC1_Init+0xf8>)
 8000586:	f001 f901 	bl	800178c <HAL_ADC_Init>
 800058a:	4603      	mov	r3, r0
 800058c:	2b00      	cmp	r3, #0
 800058e:	d001      	beq.n	8000594 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000590:	f000 fbd2 	bl	8000d38 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000594:	4b1c      	ldr	r3, [pc, #112]	; (8000608 <MX_ADC1_Init+0x100>)
 8000596:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000598:	2306      	movs	r3, #6
 800059a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800059c:	2300      	movs	r3, #0
 800059e:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80005a0:	237f      	movs	r3, #127	; 0x7f
 80005a2:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80005a4:	2304      	movs	r3, #4
 80005a6:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80005a8:	2300      	movs	r3, #0
 80005aa:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005ac:	463b      	mov	r3, r7
 80005ae:	4619      	mov	r1, r3
 80005b0:	4813      	ldr	r0, [pc, #76]	; (8000600 <MX_ADC1_Init+0xf8>)
 80005b2:	f001 fc8d 	bl	8001ed0 <HAL_ADC_ConfigChannel>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d001      	beq.n	80005c0 <MX_ADC1_Init+0xb8>
  {
    Error_Handler();
 80005bc:	f000 fbbc 	bl	8000d38 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80005c0:	4b12      	ldr	r3, [pc, #72]	; (800060c <MX_ADC1_Init+0x104>)
 80005c2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80005c4:	230c      	movs	r3, #12
 80005c6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005c8:	463b      	mov	r3, r7
 80005ca:	4619      	mov	r1, r3
 80005cc:	480c      	ldr	r0, [pc, #48]	; (8000600 <MX_ADC1_Init+0xf8>)
 80005ce:	f001 fc7f 	bl	8001ed0 <HAL_ADC_ConfigChannel>
 80005d2:	4603      	mov	r3, r0
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d001      	beq.n	80005dc <MX_ADC1_Init+0xd4>
  {
    Error_Handler();
 80005d8:	f000 fbae 	bl	8000d38 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80005dc:	4b0c      	ldr	r3, [pc, #48]	; (8000610 <MX_ADC1_Init+0x108>)
 80005de:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80005e0:	2312      	movs	r3, #18
 80005e2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005e4:	463b      	mov	r3, r7
 80005e6:	4619      	mov	r1, r3
 80005e8:	4805      	ldr	r0, [pc, #20]	; (8000600 <MX_ADC1_Init+0xf8>)
 80005ea:	f001 fc71 	bl	8001ed0 <HAL_ADC_ConfigChannel>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d001      	beq.n	80005f8 <MX_ADC1_Init+0xf0>
  {
    Error_Handler();
 80005f4:	f000 fba0 	bl	8000d38 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80005f8:	bf00      	nop
 80005fa:	3718      	adds	r7, #24
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	20000144 	.word	0x20000144
 8000604:	50040000 	.word	0x50040000
 8000608:	14f00020 	.word	0x14f00020
 800060c:	19200040 	.word	0x19200040
 8000610:	1d500080 	.word	0x1d500080

08000614 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000618:	4b17      	ldr	r3, [pc, #92]	; (8000678 <MX_CAN1_Init+0x64>)
 800061a:	4a18      	ldr	r2, [pc, #96]	; (800067c <MX_CAN1_Init+0x68>)
 800061c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 24;
 800061e:	4b16      	ldr	r3, [pc, #88]	; (8000678 <MX_CAN1_Init+0x64>)
 8000620:	2218      	movs	r2, #24
 8000622:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000624:	4b14      	ldr	r3, [pc, #80]	; (8000678 <MX_CAN1_Init+0x64>)
 8000626:	2200      	movs	r2, #0
 8000628:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800062a:	4b13      	ldr	r3, [pc, #76]	; (8000678 <MX_CAN1_Init+0x64>)
 800062c:	2200      	movs	r2, #0
 800062e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_8TQ;
 8000630:	4b11      	ldr	r3, [pc, #68]	; (8000678 <MX_CAN1_Init+0x64>)
 8000632:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8000636:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000638:	4b0f      	ldr	r3, [pc, #60]	; (8000678 <MX_CAN1_Init+0x64>)
 800063a:	2200      	movs	r2, #0
 800063c:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800063e:	4b0e      	ldr	r3, [pc, #56]	; (8000678 <MX_CAN1_Init+0x64>)
 8000640:	2200      	movs	r2, #0
 8000642:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000644:	4b0c      	ldr	r3, [pc, #48]	; (8000678 <MX_CAN1_Init+0x64>)
 8000646:	2200      	movs	r2, #0
 8000648:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800064a:	4b0b      	ldr	r3, [pc, #44]	; (8000678 <MX_CAN1_Init+0x64>)
 800064c:	2200      	movs	r2, #0
 800064e:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000650:	4b09      	ldr	r3, [pc, #36]	; (8000678 <MX_CAN1_Init+0x64>)
 8000652:	2200      	movs	r2, #0
 8000654:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000656:	4b08      	ldr	r3, [pc, #32]	; (8000678 <MX_CAN1_Init+0x64>)
 8000658:	2200      	movs	r2, #0
 800065a:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800065c:	4b06      	ldr	r3, [pc, #24]	; (8000678 <MX_CAN1_Init+0x64>)
 800065e:	2200      	movs	r2, #0
 8000660:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000662:	4805      	ldr	r0, [pc, #20]	; (8000678 <MX_CAN1_Init+0x64>)
 8000664:	f002 f97c 	bl	8002960 <HAL_CAN_Init>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d001      	beq.n	8000672 <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 800066e:	f000 fb63 	bl	8000d38 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000672:	bf00      	nop
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	2000020c 	.word	0x2000020c
 800067c:	40006400 	.word	0x40006400

08000680 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000684:	4b0d      	ldr	r3, [pc, #52]	; (80006bc <MX_SDMMC1_SD_Init+0x3c>)
 8000686:	4a0e      	ldr	r2, [pc, #56]	; (80006c0 <MX_SDMMC1_SD_Init+0x40>)
 8000688:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800068a:	4b0c      	ldr	r3, [pc, #48]	; (80006bc <MX_SDMMC1_SD_Init+0x3c>)
 800068c:	2200      	movs	r2, #0
 800068e:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000690:	4b0a      	ldr	r3, [pc, #40]	; (80006bc <MX_SDMMC1_SD_Init+0x3c>)
 8000692:	2200      	movs	r2, #0
 8000694:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8000696:	4b09      	ldr	r3, [pc, #36]	; (80006bc <MX_SDMMC1_SD_Init+0x3c>)
 8000698:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800069c:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800069e:	4b07      	ldr	r3, [pc, #28]	; (80006bc <MX_SDMMC1_SD_Init+0x3c>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 80006a4:	4b05      	ldr	r3, [pc, #20]	; (80006bc <MX_SDMMC1_SD_Init+0x3c>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	615a      	str	r2, [r3, #20]
  hsd1.Init.Transceiver = SDMMC_TRANSCEIVER_DISABLE;
 80006aa:	4b04      	ldr	r3, [pc, #16]	; (80006bc <MX_SDMMC1_SD_Init+0x3c>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 80006b0:	bf00      	nop
 80006b2:	46bd      	mov	sp, r7
 80006b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop
 80006bc:	20000234 	.word	0x20000234
 80006c0:	50062400 	.word	0x50062400

080006c4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b082      	sub	sp, #8
 80006c8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80006ca:	4b12      	ldr	r3, [pc, #72]	; (8000714 <MX_DMA_Init+0x50>)
 80006cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80006ce:	4a11      	ldr	r2, [pc, #68]	; (8000714 <MX_DMA_Init+0x50>)
 80006d0:	f043 0304 	orr.w	r3, r3, #4
 80006d4:	6493      	str	r3, [r2, #72]	; 0x48
 80006d6:	4b0f      	ldr	r3, [pc, #60]	; (8000714 <MX_DMA_Init+0x50>)
 80006d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80006da:	f003 0304 	and.w	r3, r3, #4
 80006de:	607b      	str	r3, [r7, #4]
 80006e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006e2:	4b0c      	ldr	r3, [pc, #48]	; (8000714 <MX_DMA_Init+0x50>)
 80006e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80006e6:	4a0b      	ldr	r2, [pc, #44]	; (8000714 <MX_DMA_Init+0x50>)
 80006e8:	f043 0301 	orr.w	r3, r3, #1
 80006ec:	6493      	str	r3, [r2, #72]	; 0x48
 80006ee:	4b09      	ldr	r3, [pc, #36]	; (8000714 <MX_DMA_Init+0x50>)
 80006f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80006f2:	f003 0301 	and.w	r3, r3, #1
 80006f6:	603b      	str	r3, [r7, #0]
 80006f8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 80006fa:	2200      	movs	r2, #0
 80006fc:	2105      	movs	r1, #5
 80006fe:	200b      	movs	r0, #11
 8000700:	f002 ff56 	bl	80035b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000704:	200b      	movs	r0, #11
 8000706:	f002 ff6f 	bl	80035e8 <HAL_NVIC_EnableIRQ>

}
 800070a:	bf00      	nop
 800070c:	3708      	adds	r7, #8
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	40021000 	.word	0x40021000

08000718 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b08e      	sub	sp, #56	; 0x38
 800071c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800071e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000722:	2200      	movs	r2, #0
 8000724:	601a      	str	r2, [r3, #0]
 8000726:	605a      	str	r2, [r3, #4]
 8000728:	609a      	str	r2, [r3, #8]
 800072a:	60da      	str	r2, [r3, #12]
 800072c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800072e:	4bb2      	ldr	r3, [pc, #712]	; (80009f8 <MX_GPIO_Init+0x2e0>)
 8000730:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000732:	4ab1      	ldr	r2, [pc, #708]	; (80009f8 <MX_GPIO_Init+0x2e0>)
 8000734:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000738:	64d3      	str	r3, [r2, #76]	; 0x4c
 800073a:	4baf      	ldr	r3, [pc, #700]	; (80009f8 <MX_GPIO_Init+0x2e0>)
 800073c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800073e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000742:	623b      	str	r3, [r7, #32]
 8000744:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000746:	4bac      	ldr	r3, [pc, #688]	; (80009f8 <MX_GPIO_Init+0x2e0>)
 8000748:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800074a:	4aab      	ldr	r2, [pc, #684]	; (80009f8 <MX_GPIO_Init+0x2e0>)
 800074c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000750:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000752:	4ba9      	ldr	r3, [pc, #676]	; (80009f8 <MX_GPIO_Init+0x2e0>)
 8000754:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000756:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800075a:	61fb      	str	r3, [r7, #28]
 800075c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800075e:	4ba6      	ldr	r3, [pc, #664]	; (80009f8 <MX_GPIO_Init+0x2e0>)
 8000760:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000762:	4aa5      	ldr	r2, [pc, #660]	; (80009f8 <MX_GPIO_Init+0x2e0>)
 8000764:	f043 0310 	orr.w	r3, r3, #16
 8000768:	64d3      	str	r3, [r2, #76]	; 0x4c
 800076a:	4ba3      	ldr	r3, [pc, #652]	; (80009f8 <MX_GPIO_Init+0x2e0>)
 800076c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800076e:	f003 0310 	and.w	r3, r3, #16
 8000772:	61bb      	str	r3, [r7, #24]
 8000774:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000776:	4ba0      	ldr	r3, [pc, #640]	; (80009f8 <MX_GPIO_Init+0x2e0>)
 8000778:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800077a:	4a9f      	ldr	r2, [pc, #636]	; (80009f8 <MX_GPIO_Init+0x2e0>)
 800077c:	f043 0302 	orr.w	r3, r3, #2
 8000780:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000782:	4b9d      	ldr	r3, [pc, #628]	; (80009f8 <MX_GPIO_Init+0x2e0>)
 8000784:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000786:	f003 0302 	and.w	r3, r3, #2
 800078a:	617b      	str	r3, [r7, #20]
 800078c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800078e:	4b9a      	ldr	r3, [pc, #616]	; (80009f8 <MX_GPIO_Init+0x2e0>)
 8000790:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000792:	4a99      	ldr	r2, [pc, #612]	; (80009f8 <MX_GPIO_Init+0x2e0>)
 8000794:	f043 0301 	orr.w	r3, r3, #1
 8000798:	64d3      	str	r3, [r2, #76]	; 0x4c
 800079a:	4b97      	ldr	r3, [pc, #604]	; (80009f8 <MX_GPIO_Init+0x2e0>)
 800079c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800079e:	f003 0301 	and.w	r3, r3, #1
 80007a2:	613b      	str	r3, [r7, #16]
 80007a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007a6:	4b94      	ldr	r3, [pc, #592]	; (80009f8 <MX_GPIO_Init+0x2e0>)
 80007a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007aa:	4a93      	ldr	r2, [pc, #588]	; (80009f8 <MX_GPIO_Init+0x2e0>)
 80007ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007b2:	4b91      	ldr	r3, [pc, #580]	; (80009f8 <MX_GPIO_Init+0x2e0>)
 80007b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007ba:	60fb      	str	r3, [r7, #12]
 80007bc:	68fb      	ldr	r3, [r7, #12]
  HAL_PWREx_EnableVddIO2();
 80007be:	f003 fc19 	bl	8003ff4 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007c2:	4b8d      	ldr	r3, [pc, #564]	; (80009f8 <MX_GPIO_Init+0x2e0>)
 80007c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007c6:	4a8c      	ldr	r2, [pc, #560]	; (80009f8 <MX_GPIO_Init+0x2e0>)
 80007c8:	f043 0308 	orr.w	r3, r3, #8
 80007cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007ce:	4b8a      	ldr	r3, [pc, #552]	; (80009f8 <MX_GPIO_Init+0x2e0>)
 80007d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007d2:	f003 0308 	and.w	r3, r3, #8
 80007d6:	60bb      	str	r3, [r7, #8]
 80007d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007da:	4b87      	ldr	r3, [pc, #540]	; (80009f8 <MX_GPIO_Init+0x2e0>)
 80007dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007de:	4a86      	ldr	r2, [pc, #536]	; (80009f8 <MX_GPIO_Init+0x2e0>)
 80007e0:	f043 0304 	orr.w	r3, r3, #4
 80007e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007e6:	4b84      	ldr	r3, [pc, #528]	; (80009f8 <MX_GPIO_Init+0x2e0>)
 80007e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ea:	f003 0304 	and.w	r3, r3, #4
 80007ee:	607b      	str	r3, [r7, #4]
 80007f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007f2:	4b81      	ldr	r3, [pc, #516]	; (80009f8 <MX_GPIO_Init+0x2e0>)
 80007f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007f6:	4a80      	ldr	r2, [pc, #512]	; (80009f8 <MX_GPIO_Init+0x2e0>)
 80007f8:	f043 0320 	orr.w	r3, r3, #32
 80007fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007fe:	4b7e      	ldr	r3, [pc, #504]	; (80009f8 <MX_GPIO_Init+0x2e0>)
 8000800:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000802:	f003 0320 	and.w	r3, r3, #32
 8000806:	603b      	str	r3, [r7, #0]
 8000808:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, MIC_VDD_Pin|DSI_SPI_USART_CS_Pin|LED_GREEN_Pin, GPIO_PIN_RESET);
 800080a:	2200      	movs	r2, #0
 800080c:	f244 0114 	movw	r1, #16404	; 0x4014
 8000810:	487a      	ldr	r0, [pc, #488]	; (80009fc <MX_GPIO_Init+0x2e4>)
 8000812:	f003 fb13 	bl	8003e3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(JOY_SEL_GPIO_Port, JOY_SEL_Pin, GPIO_PIN_RESET);
 8000816:	2200      	movs	r2, #0
 8000818:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800081c:	4878      	ldr	r0, [pc, #480]	; (8000a00 <MX_GPIO_Init+0x2e8>)
 800081e:	f003 fb0d 	bl	8003e3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_RESET);
 8000822:	2200      	movs	r2, #0
 8000824:	2140      	movs	r1, #64	; 0x40
 8000826:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800082a:	f003 fb07 	bl	8003e3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MFX_WAKEUP_GPIO_Port, MFX_WAKEUP_Pin, GPIO_PIN_RESET);
 800082e:	2200      	movs	r2, #0
 8000830:	2104      	movs	r1, #4
 8000832:	4874      	ldr	r0, [pc, #464]	; (8000a04 <MX_GPIO_Init+0x2ec>)
 8000834:	f003 fb02 	bl	8003e3c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OCTOSPIM_P2_IO1_Pin OCTOSPIM_P2_CLK_Pin OCTOSPIM_P2_IO0_Pin */
  GPIO_InitStruct.Pin = OCTOSPIM_P2_IO1_Pin|OCTOSPIM_P2_CLK_Pin|OCTOSPIM_P2_IO0_Pin;
 8000838:	f44f 6344 	mov.w	r3, #3136	; 0xc40
 800083c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800083e:	2302      	movs	r3, #2
 8000840:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000842:	2300      	movs	r3, #0
 8000844:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000846:	2303      	movs	r3, #3
 8000848:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPIM_P2;
 800084a:	2305      	movs	r3, #5
 800084c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800084e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000852:	4619      	mov	r1, r3
 8000854:	486c      	ldr	r0, [pc, #432]	; (8000a08 <MX_GPIO_Init+0x2f0>)
 8000856:	f003 f947 	bl	8003ae8 <HAL_GPIO_Init>

  /*Configure GPIO pins : MIC_VDD_Pin DSI_SPI_USART_CS_Pin LED_GREEN_Pin */
  GPIO_InitStruct.Pin = MIC_VDD_Pin|DSI_SPI_USART_CS_Pin|LED_GREEN_Pin;
 800085a:	f244 0314 	movw	r3, #16404	; 0x4014
 800085e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000860:	2301      	movs	r3, #1
 8000862:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000864:	2300      	movs	r3, #0
 8000866:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000868:	2300      	movs	r3, #0
 800086a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800086c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000870:	4619      	mov	r1, r3
 8000872:	4862      	ldr	r0, [pc, #392]	; (80009fc <MX_GPIO_Init+0x2e4>)
 8000874:	f003 f938 	bl	8003ae8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PSRAM_NBL0_Pin PSRAM_NBL1_Pin PSRAM_A20_Pin PSRAM_A19_Pin
                           D7_Pin D6_Pin D12_Pin D5_Pin
                           D11_Pin D4_Pin D10_Pin D9_Pin
                           D8_Pin */
  GPIO_InitStruct.Pin = PSRAM_NBL0_Pin|PSRAM_NBL1_Pin|PSRAM_A20_Pin|PSRAM_A19_Pin
 8000878:	f64f 739b 	movw	r3, #65435	; 0xff9b
 800087c:	627b      	str	r3, [r7, #36]	; 0x24
                          |D7_Pin|D6_Pin|D12_Pin|D5_Pin
                          |D11_Pin|D4_Pin|D10_Pin|D9_Pin
                          |D8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800087e:	2302      	movs	r3, #2
 8000880:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000882:	2300      	movs	r3, #0
 8000884:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000886:	2303      	movs	r3, #3
 8000888:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800088a:	230c      	movs	r3, #12
 800088c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800088e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000892:	4619      	mov	r1, r3
 8000894:	485d      	ldr	r0, [pc, #372]	; (8000a0c <MX_GPIO_Init+0x2f4>)
 8000896:	f003 f927 	bl	8003ae8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 800089a:	2310      	movs	r3, #16
 800089c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800089e:	2302      	movs	r3, #2
 80008a0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a2:	2300      	movs	r3, #0
 80008a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a6:	2300      	movs	r3, #0
 80008a8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80008aa:	2302      	movs	r3, #2
 80008ac:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 80008ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008b2:	4619      	mov	r1, r3
 80008b4:	4853      	ldr	r0, [pc, #332]	; (8000a04 <MX_GPIO_Init+0x2ec>)
 80008b6:	f003 f917 	bl	8003ae8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USART3_RTS_Pin */
  GPIO_InitStruct.Pin = USART3_RTS_Pin;
 80008ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80008be:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c0:	2302      	movs	r3, #2
 80008c2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c4:	2300      	movs	r3, #0
 80008c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008c8:	2303      	movs	r3, #3
 80008ca:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80008cc:	2307      	movs	r3, #7
 80008ce:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USART3_RTS_GPIO_Port, &GPIO_InitStruct);
 80008d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008d4:	4619      	mov	r1, r3
 80008d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008da:	f003 f905 	bl	8003ae8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_10_Pin */
  GPIO_InitStruct.Pin = ARD_10_Pin;
 80008de:	2301      	movs	r3, #1
 80008e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e2:	2302      	movs	r3, #2
 80008e4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e6:	2300      	movs	r3, #0
 80008e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008ea:	2303      	movs	r3, #3
 80008ec:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008ee:	2305      	movs	r3, #5
 80008f0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_10_GPIO_Port, &GPIO_InitStruct);
 80008f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008f6:	4619      	mov	r1, r3
 80008f8:	4843      	ldr	r0, [pc, #268]	; (8000a08 <MX_GPIO_Init+0x2f0>)
 80008fa:	f003 f8f5 	bl	8003ae8 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D7_Pin DCMI_D5_Pin DCMI_VSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_D7_Pin|DCMI_D5_Pin|DCMI_VSYNC_Pin;
 80008fe:	23b0      	movs	r3, #176	; 0xb0
 8000900:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000902:	2302      	movs	r3, #2
 8000904:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000906:	2300      	movs	r3, #0
 8000908:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090a:	2300      	movs	r3, #0
 800090c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 800090e:	230a      	movs	r3, #10
 8000910:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000912:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000916:	4619      	mov	r1, r3
 8000918:	483b      	ldr	r0, [pc, #236]	; (8000a08 <MX_GPIO_Init+0x2f0>)
 800091a:	f003 f8e5 	bl	8003ae8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI1_SDB_Pin SAI1_FSA_Pin */
  GPIO_InitStruct.Pin = SAI1_SDB_Pin|SAI1_FSA_Pin;
 800091e:	f44f 7308 	mov.w	r3, #544	; 0x220
 8000922:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000924:	2302      	movs	r3, #2
 8000926:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000928:	2300      	movs	r3, #0
 800092a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092c:	2300      	movs	r3, #0
 800092e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8000930:	230d      	movs	r3, #13
 8000932:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000934:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000938:	4619      	mov	r1, r3
 800093a:	4832      	ldr	r0, [pc, #200]	; (8000a04 <MX_GPIO_Init+0x2ec>)
 800093c:	f003 f8d4 	bl	8003ae8 <HAL_GPIO_Init>

  /*Configure GPIO pins : OCTOSPIM_P2_IO6_Pin OCTOSPIM_P2_DQS_Pin OCTOSPIM_P2_IO7_Pin OCTOSPIM_P2_CS_Pin */
  GPIO_InitStruct.Pin = OCTOSPIM_P2_IO6_Pin|OCTOSPIM_P2_DQS_Pin|OCTOSPIM_P2_IO7_Pin|OCTOSPIM_P2_CS_Pin;
 8000940:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 8000944:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000946:	2302      	movs	r3, #2
 8000948:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094a:	2300      	movs	r3, #0
 800094c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800094e:	2303      	movs	r3, #3
 8000950:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPIM_P2;
 8000952:	2305      	movs	r3, #5
 8000954:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000956:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800095a:	4619      	mov	r1, r3
 800095c:	482c      	ldr	r0, [pc, #176]	; (8000a10 <MX_GPIO_Init+0x2f8>)
 800095e:	f003 f8c3 	bl	8003ae8 <HAL_GPIO_Init>

  /*Configure GPIO pins : D2_Pin PSRAM_OE_Pin D3_Pin PSRAM_WE_Pin
                           PSRAM_WAIT_Pin PSRAM_CLK_Pin PSRAM_NE1_Pin PSRAM_A18_Pin
                           D1_Pin D0_Pin PSRAM_A17_Pin PSRAM_A16_Pin
                           D15_Pin D14_Pin D13_Pin */
  GPIO_InitStruct.Pin = D2_Pin|PSRAM_OE_Pin|D3_Pin|PSRAM_WE_Pin
 8000962:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 8000966:	627b      	str	r3, [r7, #36]	; 0x24
                          |PSRAM_WAIT_Pin|PSRAM_CLK_Pin|PSRAM_NE1_Pin|PSRAM_A18_Pin
                          |D1_Pin|D0_Pin|PSRAM_A17_Pin|PSRAM_A16_Pin
                          |D15_Pin|D14_Pin|D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000968:	2302      	movs	r3, #2
 800096a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096c:	2300      	movs	r3, #0
 800096e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000970:	2303      	movs	r3, #3
 8000972:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000974:	230c      	movs	r3, #12
 8000976:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000978:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800097c:	4619      	mov	r1, r3
 800097e:	4825      	ldr	r0, [pc, #148]	; (8000a14 <MX_GPIO_Init+0x2fc>)
 8000980:	f003 f8b2 	bl	8003ae8 <HAL_GPIO_Init>

  /*Configure GPIO pin : MFX_IRQ_OUT_Pin */
  GPIO_InitStruct.Pin = MFX_IRQ_OUT_Pin;
 8000984:	2302      	movs	r3, #2
 8000986:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000988:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800098c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098e:	2300      	movs	r3, #0
 8000990:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(MFX_IRQ_OUT_GPIO_Port, &GPIO_InitStruct);
 8000992:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000996:	4619      	mov	r1, r3
 8000998:	481b      	ldr	r0, [pc, #108]	; (8000a08 <MX_GPIO_Init+0x2f0>)
 800099a:	f003 f8a5 	bl	8003ae8 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D3_Pin DCMI_PIXCLK_Pin DCMI_D2_Pin */
  GPIO_InitStruct.Pin = DCMI_D3_Pin|DCMI_PIXCLK_Pin|DCMI_D2_Pin;
 800099e:	f44f 53c1 	mov.w	r3, #6176	; 0x1820
 80009a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a4:	2302      	movs	r3, #2
 80009a6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a8:	2300      	movs	r3, #0
 80009aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ac:	2300      	movs	r3, #0
 80009ae:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 80009b0:	230a      	movs	r3, #10
 80009b2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80009b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009b8:	4619      	mov	r1, r3
 80009ba:	4810      	ldr	r0, [pc, #64]	; (80009fc <MX_GPIO_Init+0x2e4>)
 80009bc:	f003 f894 	bl	8003ae8 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C1_SCL_Pin */
  GPIO_InitStruct.Pin = I2C1_SCL_Pin;
 80009c0:	2340      	movs	r3, #64	; 0x40
 80009c2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009c4:	2312      	movs	r3, #18
 80009c6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009c8:	2301      	movs	r3, #1
 80009ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009cc:	2303      	movs	r3, #3
 80009ce:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009d0:	2304      	movs	r3, #4
 80009d2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(I2C1_SCL_GPIO_Port, &GPIO_InitStruct);
 80009d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009d8:	4619      	mov	r1, r3
 80009da:	480a      	ldr	r0, [pc, #40]	; (8000a04 <MX_GPIO_Init+0x2ec>)
 80009dc:	f003 f884 	bl	8003ae8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D9_Pin;
 80009e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009e6:	2302      	movs	r3, #2
 80009e8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ea:	2300      	movs	r3, #0
 80009ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ee:	2300      	movs	r3, #0
 80009f0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80009f2:	2303      	movs	r3, #3
 80009f4:	e010      	b.n	8000a18 <MX_GPIO_Init+0x300>
 80009f6:	bf00      	nop
 80009f8:	40021000 	.word	0x40021000
 80009fc:	48001c00 	.word	0x48001c00
 8000a00:	48000800 	.word	0x48000800
 8000a04:	48000400 	.word	0x48000400
 8000a08:	48002000 	.word	0x48002000
 8000a0c:	48001000 	.word	0x48001000
 8000a10:	48001800 	.word	0x48001800
 8000a14:	48000c00 	.word	0x48000c00
 8000a18:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D9_GPIO_Port, &GPIO_InitStruct);
 8000a1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a1e:	4619      	mov	r1, r3
 8000a20:	48b2      	ldr	r0, [pc, #712]	; (8000cec <MX_GPIO_Init+0x5d4>)
 8000a22:	f003 f861 	bl	8003ae8 <HAL_GPIO_Init>

  /*Configure GPIO pins : OCTOPSIM_P2_IO4_Pin OCTOSPIM_P2_IO5_Pin OCTOSPI_P2_IO3_Pin */
  GPIO_InitStruct.Pin = OCTOPSIM_P2_IO4_Pin|OCTOSPIM_P2_IO5_Pin|OCTOSPI_P2_IO3_Pin;
 8000a26:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000a2a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a2c:	2302      	movs	r3, #2
 8000a2e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a30:	2300      	movs	r3, #0
 8000a32:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a34:	2303      	movs	r3, #3
 8000a36:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPIM_P2;
 8000a38:	2305      	movs	r3, #5
 8000a3a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000a3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a40:	4619      	mov	r1, r3
 8000a42:	48aa      	ldr	r0, [pc, #680]	; (8000cec <MX_GPIO_Init+0x5d4>)
 8000a44:	f003 f850 	bl	8003ae8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI1_MCKA_Pin SAI1_SDA_Pin SAI1_SCKA_Pin */
  GPIO_InitStruct.Pin = SAI1_MCKA_Pin|SAI1_SDA_Pin|SAI1_SCKA_Pin;
 8000a48:	2364      	movs	r3, #100	; 0x64
 8000a4a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a4c:	2302      	movs	r3, #2
 8000a4e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a50:	2300      	movs	r3, #0
 8000a52:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a54:	2300      	movs	r3, #0
 8000a56:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8000a58:	230d      	movs	r3, #13
 8000a5a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a60:	4619      	mov	r1, r3
 8000a62:	48a3      	ldr	r0, [pc, #652]	; (8000cf0 <MX_GPIO_Init+0x5d8>)
 8000a64:	f003 f840 	bl	8003ae8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PSRAM_ADV_Pin */
  GPIO_InitStruct.Pin = PSRAM_ADV_Pin;
 8000a68:	2380      	movs	r3, #128	; 0x80
 8000a6a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a6c:	2302      	movs	r3, #2
 8000a6e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a70:	2300      	movs	r3, #0
 8000a72:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a74:	2303      	movs	r3, #3
 8000a76:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000a78:	230c      	movs	r3, #12
 8000a7a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(PSRAM_ADV_GPIO_Port, &GPIO_InitStruct);
 8000a7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a80:	4619      	mov	r1, r3
 8000a82:	489c      	ldr	r0, [pc, #624]	; (8000cf4 <MX_GPIO_Init+0x5dc>)
 8000a84:	f003 f830 	bl	8003ae8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTGFS_ID_Pin */
  GPIO_InitStruct.Pin = USB_OTGFS_ID_Pin;
 8000a88:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a8c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a8e:	2302      	movs	r3, #2
 8000a90:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a92:	2300      	movs	r3, #0
 8000a94:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a96:	2303      	movs	r3, #3
 8000a98:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000a9a:	230a      	movs	r3, #10
 8000a9c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_OTGFS_ID_GPIO_Port, &GPIO_InitStruct);
 8000a9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aa8:	f003 f81e 	bl	8003ae8 <HAL_GPIO_Init>

  /*Configure GPIO pin : JOY_SEL_Pin */
  GPIO_InitStruct.Pin = JOY_SEL_Pin;
 8000aac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ab0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ab2:	2301      	movs	r3, #1
 8000ab4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aba:	2300      	movs	r3, #0
 8000abc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(JOY_SEL_GPIO_Port, &GPIO_InitStruct);
 8000abe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	488c      	ldr	r0, [pc, #560]	; (8000cf8 <MX_GPIO_Init+0x5e0>)
 8000ac6:	f003 f80f 	bl	8003ae8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PSRAM_A2_Pin PSRAM_A1_Pin PSRAM_A0_Pin PSRAM_A3_Pin
                           PSRAM_A4_Pin PSRAM_A5_Pin PSRAM_A9_Pin PSRAM_A8_Pin
                           PSRAM_A7_Pin PSRAM_A6_Pin */
  GPIO_InitStruct.Pin = PSRAM_A2_Pin|PSRAM_A1_Pin|PSRAM_A0_Pin|PSRAM_A3_Pin
 8000aca:	f24f 033f 	movw	r3, #61503	; 0xf03f
 8000ace:	627b      	str	r3, [r7, #36]	; 0x24
                          |PSRAM_A4_Pin|PSRAM_A5_Pin|PSRAM_A9_Pin|PSRAM_A8_Pin
                          |PSRAM_A7_Pin|PSRAM_A6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad0:	2302      	movs	r3, #2
 8000ad2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ad8:	2303      	movs	r3, #3
 8000ada:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000adc:	230c      	movs	r3, #12
 8000ade:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000ae0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	4885      	ldr	r0, [pc, #532]	; (8000cfc <MX_GPIO_Init+0x5e4>)
 8000ae8:	f002 fffe 	bl	8003ae8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_14_Pin ARD_15_Pin */
  GPIO_InitStruct.Pin = ARD_14_Pin|ARD_15_Pin;
 8000aec:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000af0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000af2:	2312      	movs	r3, #18
 8000af4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af6:	2300      	movs	r3, #0
 8000af8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000afa:	2303      	movs	r3, #3
 8000afc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000afe:	2304      	movs	r3, #4
 8000b00:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b06:	4619      	mov	r1, r3
 8000b08:	487d      	ldr	r0, [pc, #500]	; (8000d00 <MX_GPIO_Init+0x5e8>)
 8000b0a:	f002 ffed 	bl	8003ae8 <HAL_GPIO_Init>

  /*Configure GPIO pin : STMOD_INT_Pin */
  GPIO_InitStruct.Pin = STMOD_INT_Pin;
 8000b0e:	2340      	movs	r3, #64	; 0x40
 8000b10:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b12:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b16:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(STMOD_INT_GPIO_Port, &GPIO_InitStruct);
 8000b1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b20:	4619      	mov	r1, r3
 8000b22:	4875      	ldr	r0, [pc, #468]	; (8000cf8 <MX_GPIO_Init+0x5e0>)
 8000b24:	f002 ffe0 	bl	8003ae8 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C1_SDA_Pin */
  GPIO_InitStruct.Pin = I2C1_SDA_Pin;
 8000b28:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b2c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b2e:	2312      	movs	r3, #18
 8000b30:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b32:	2301      	movs	r3, #1
 8000b34:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b36:	2303      	movs	r3, #3
 8000b38:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b3a:	2304      	movs	r3, #4
 8000b3c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(I2C1_SDA_GPIO_Port, &GPIO_InitStruct);
 8000b3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b42:	4619      	mov	r1, r3
 8000b44:	486e      	ldr	r0, [pc, #440]	; (8000d00 <MX_GPIO_Init+0x5e8>)
 8000b46:	f002 ffcf 	bl	8003ae8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PSRAM_A14_Pin PSRAM_A13_Pin PSRAM_A15_Pin PSRAM_A11_Pin
                           PSRAM_A12_Pin PSRAM_A10_Pin */
  GPIO_InitStruct.Pin = PSRAM_A14_Pin|PSRAM_A13_Pin|PSRAM_A15_Pin|PSRAM_A11_Pin
 8000b4a:	233f      	movs	r3, #63	; 0x3f
 8000b4c:	627b      	str	r3, [r7, #36]	; 0x24
                          |PSRAM_A12_Pin|PSRAM_A10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b4e:	2302      	movs	r3, #2
 8000b50:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b52:	2300      	movs	r3, #0
 8000b54:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b56:	2303      	movs	r3, #3
 8000b58:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000b5a:	230c      	movs	r3, #12
 8000b5c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b62:	4619      	mov	r1, r3
 8000b64:	4866      	ldr	r0, [pc, #408]	; (8000d00 <MX_GPIO_Init+0x5e8>)
 8000b66:	f002 ffbf 	bl	8003ae8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000b6a:	2380      	movs	r3, #128	; 0x80
 8000b6c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000b72:	2302      	movs	r3, #2
 8000b74:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	485e      	ldr	r0, [pc, #376]	; (8000cf8 <MX_GPIO_Init+0x5e0>)
 8000b7e:	f002 ffb3 	bl	8003ae8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART3_RX_Pin USART3_TX_Pin */
  GPIO_InitStruct.Pin = USART3_RX_Pin|USART3_TX_Pin;
 8000b82:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000b86:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b88:	2302      	movs	r3, #2
 8000b8a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b90:	2303      	movs	r3, #3
 8000b92:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000b94:	2307      	movs	r3, #7
 8000b96:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	4855      	ldr	r0, [pc, #340]	; (8000cf4 <MX_GPIO_Init+0x5dc>)
 8000ba0:	f002 ffa2 	bl	8003ae8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D0_Pin ARD_D1_Pin */
  GPIO_InitStruct.Pin = ARD_D0_Pin|ARD_D1_Pin;
 8000ba4:	2303      	movs	r3, #3
 8000ba6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba8:	2302      	movs	r3, #2
 8000baa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bac:	2300      	movs	r3, #0
 8000bae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bb0:	2303      	movs	r3, #3
 8000bb2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000bb4:	2308      	movs	r3, #8
 8000bb6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bb8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	484e      	ldr	r0, [pc, #312]	; (8000cf8 <MX_GPIO_Init+0x5e0>)
 8000bc0:	f002 ff92 	bl	8003ae8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DF_CKOUT_Pin */
  GPIO_InitStruct.Pin = DF_CKOUT_Pin;
 8000bc4:	2304      	movs	r3, #4
 8000bc6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc8:	2302      	movs	r3, #2
 8000bca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000bd4:	2306      	movs	r3, #6
 8000bd6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(DF_CKOUT_GPIO_Port, &GPIO_InitStruct);
 8000bd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bdc:	4619      	mov	r1, r3
 8000bde:	4846      	ldr	r0, [pc, #280]	; (8000cf8 <MX_GPIO_Init+0x5e0>)
 8000be0:	f002 ff82 	bl	8003ae8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000be4:	2320      	movs	r3, #32
 8000be6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000be8:	2300      	movs	r3, #0
 8000bea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bec:	2300      	movs	r3, #0
 8000bee:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bf0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bfa:	f002 ff75 	bl	8003ae8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_CS_Pin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin;
 8000bfe:	2340      	movs	r3, #64	; 0x40
 8000c00:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c02:	2301      	movs	r3, #1
 8000c04:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c06:	2300      	movs	r3, #0
 8000c08:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 8000c0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c12:	4619      	mov	r1, r3
 8000c14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c18:	f002 ff66 	bl	8003ae8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI_MOSI_Pin SPI2_MISO_Pin SPI2_CLK_Pin */
  GPIO_InitStruct.Pin = SPI_MOSI_Pin|SPI2_MISO_Pin|SPI2_CLK_Pin;
 8000c1c:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000c20:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c22:	2302      	movs	r3, #2
 8000c24:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c26:	2300      	movs	r3, #0
 8000c28:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c2a:	2303      	movs	r3, #3
 8000c2c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000c2e:	2305      	movs	r3, #5
 8000c30:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c36:	4619      	mov	r1, r3
 8000c38:	482e      	ldr	r0, [pc, #184]	; (8000cf4 <MX_GPIO_Init+0x5dc>)
 8000c3a:	f002 ff55 	bl	8003ae8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USART2_RX_Pin */
  GPIO_InitStruct.Pin = USART2_RX_Pin;
 8000c3e:	2308      	movs	r3, #8
 8000c40:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c42:	2302      	movs	r3, #2
 8000c44:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c46:	2300      	movs	r3, #0
 8000c48:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c4a:	2303      	movs	r3, #3
 8000c4c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c4e:	2307      	movs	r3, #7
 8000c50:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USART2_RX_GPIO_Port, &GPIO_InitStruct);
 8000c52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c56:	4619      	mov	r1, r3
 8000c58:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c5c:	f002 ff44 	bl	8003ae8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DSI_TE_Pin */
  GPIO_InitStruct.Pin = DSI_TE_Pin;
 8000c60:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000c64:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c66:	2302      	movs	r3, #2
 8000c68:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_DSI;
 8000c72:	230b      	movs	r3, #11
 8000c74:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(DSI_TE_GPIO_Port, &GPIO_InitStruct);
 8000c76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	481f      	ldr	r0, [pc, #124]	; (8000cfc <MX_GPIO_Init+0x5e4>)
 8000c7e:	f002 ff33 	bl	8003ae8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_HSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin;
 8000c82:	2310      	movs	r3, #16
 8000c84:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c86:	2302      	movs	r3, #2
 8000c88:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 8000c92:	230a      	movs	r3, #10
 8000c94:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(DCMI_HSYNC_GPIO_Port, &GPIO_InitStruct);
 8000c96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ca0:	f002 ff22 	bl	8003ae8 <HAL_GPIO_Init>

  /*Configure GPIO pin : MFX_WAKEUP_Pin */
  GPIO_InitStruct.Pin = MFX_WAKEUP_Pin;
 8000ca4:	2304      	movs	r3, #4
 8000ca6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ca8:	2301      	movs	r3, #1
 8000caa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cac:	2300      	movs	r3, #0
 8000cae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(MFX_WAKEUP_GPIO_Port, &GPIO_InitStruct);
 8000cb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cb8:	4619      	mov	r1, r3
 8000cba:	480e      	ldr	r0, [pc, #56]	; (8000cf4 <MX_GPIO_Init+0x5dc>)
 8000cbc:	f002 ff14 	bl	8003ae8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DFDATIN1_Pin */
  GPIO_InitStruct.Pin = DFDATIN1_Pin;
 8000cc0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cc4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc6:	2302      	movs	r3, #2
 8000cc8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000cd2:	2306      	movs	r3, #6
 8000cd4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(DFDATIN1_GPIO_Port, &GPIO_InitStruct);
 8000cd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cda:	4619      	mov	r1, r3
 8000cdc:	4805      	ldr	r0, [pc, #20]	; (8000cf4 <MX_GPIO_Init+0x5dc>)
 8000cde:	f002 ff03 	bl	8003ae8 <HAL_GPIO_Init>

}
 8000ce2:	bf00      	nop
 8000ce4:	3738      	adds	r7, #56	; 0x38
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	48001c00 	.word	0x48001c00
 8000cf0:	48001000 	.word	0x48001000
 8000cf4:	48000400 	.word	0x48000400
 8000cf8:	48000800 	.word	0x48000800
 8000cfc:	48001400 	.word	0x48001400
 8000d00:	48001800 	.word	0x48001800

08000d04 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b082      	sub	sp, #8
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  for(;;)
  {
    osDelay(1);
 8000d0c:	2001      	movs	r0, #1
 8000d0e:	f008 fff0 	bl	8009cf2 <osDelay>
 8000d12:	e7fb      	b.n	8000d0c <StartDefaultTask+0x8>

08000d14 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b082      	sub	sp, #8
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	4a04      	ldr	r2, [pc, #16]	; (8000d34 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d22:	4293      	cmp	r3, r2
 8000d24:	d101      	bne.n	8000d2a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000d26:	f000 faff 	bl	8001328 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d2a:	bf00      	nop
 8000d2c:	3708      	adds	r7, #8
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	40001000 	.word	0x40001000

08000d38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d3c:	b672      	cpsid	i
}
 8000d3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d40:	e7fe      	b.n	8000d40 <Error_Handler+0x8>
	...

08000d44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d4a:	4b11      	ldr	r3, [pc, #68]	; (8000d90 <HAL_MspInit+0x4c>)
 8000d4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d4e:	4a10      	ldr	r2, [pc, #64]	; (8000d90 <HAL_MspInit+0x4c>)
 8000d50:	f043 0301 	orr.w	r3, r3, #1
 8000d54:	6613      	str	r3, [r2, #96]	; 0x60
 8000d56:	4b0e      	ldr	r3, [pc, #56]	; (8000d90 <HAL_MspInit+0x4c>)
 8000d58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d5a:	f003 0301 	and.w	r3, r3, #1
 8000d5e:	607b      	str	r3, [r7, #4]
 8000d60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d62:	4b0b      	ldr	r3, [pc, #44]	; (8000d90 <HAL_MspInit+0x4c>)
 8000d64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d66:	4a0a      	ldr	r2, [pc, #40]	; (8000d90 <HAL_MspInit+0x4c>)
 8000d68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d6c:	6593      	str	r3, [r2, #88]	; 0x58
 8000d6e:	4b08      	ldr	r3, [pc, #32]	; (8000d90 <HAL_MspInit+0x4c>)
 8000d70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d76:	603b      	str	r3, [r7, #0]
 8000d78:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	210f      	movs	r1, #15
 8000d7e:	f06f 0001 	mvn.w	r0, #1
 8000d82:	f002 fc15 	bl	80035b0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d86:	bf00      	nop
 8000d88:	3708      	adds	r7, #8
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	40021000 	.word	0x40021000

08000d94 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b0b2      	sub	sp, #200	; 0xc8
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d9c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000da0:	2200      	movs	r2, #0
 8000da2:	601a      	str	r2, [r3, #0]
 8000da4:	605a      	str	r2, [r3, #4]
 8000da6:	609a      	str	r2, [r3, #8]
 8000da8:	60da      	str	r2, [r3, #12]
 8000daa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000dac:	f107 0318 	add.w	r3, r7, #24
 8000db0:	229c      	movs	r2, #156	; 0x9c
 8000db2:	2100      	movs	r1, #0
 8000db4:	4618      	mov	r0, r3
 8000db6:	f00c fbc5 	bl	800d544 <memset>
  if(hadc->Instance==ADC1)
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	4a5c      	ldr	r2, [pc, #368]	; (8000f30 <HAL_ADC_MspInit+0x19c>)
 8000dc0:	4293      	cmp	r3, r2
 8000dc2:	f040 80b1 	bne.w	8000f28 <HAL_ADC_MspInit+0x194>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000dc6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000dca:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000dcc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000dd0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 8000dd4:	2303      	movs	r3, #3
 8000dd6:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 2;
 8000dd8:	2302      	movs	r3, #2
 8000dda:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8000ddc:	2308      	movs	r3, #8
 8000dde:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8000de0:	2302      	movs	r3, #2
 8000de2:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000de4:	2302      	movs	r3, #2
 8000de6:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000de8:	2302      	movs	r3, #2
 8000dea:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000dec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000df0:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000df2:	f107 0318 	add.w	r3, r7, #24
 8000df6:	4618      	mov	r0, r3
 8000df8:	f004 f812 	bl	8004e20 <HAL_RCCEx_PeriphCLKConfig>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d001      	beq.n	8000e06 <HAL_ADC_MspInit+0x72>
    {
      Error_Handler();
 8000e02:	f7ff ff99 	bl	8000d38 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000e06:	4b4b      	ldr	r3, [pc, #300]	; (8000f34 <HAL_ADC_MspInit+0x1a0>)
 8000e08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e0a:	4a4a      	ldr	r2, [pc, #296]	; (8000f34 <HAL_ADC_MspInit+0x1a0>)
 8000e0c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000e10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e12:	4b48      	ldr	r3, [pc, #288]	; (8000f34 <HAL_ADC_MspInit+0x1a0>)
 8000e14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e16:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000e1a:	617b      	str	r3, [r7, #20]
 8000e1c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e1e:	4b45      	ldr	r3, [pc, #276]	; (8000f34 <HAL_ADC_MspInit+0x1a0>)
 8000e20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e22:	4a44      	ldr	r2, [pc, #272]	; (8000f34 <HAL_ADC_MspInit+0x1a0>)
 8000e24:	f043 0304 	orr.w	r3, r3, #4
 8000e28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e2a:	4b42      	ldr	r3, [pc, #264]	; (8000f34 <HAL_ADC_MspInit+0x1a0>)
 8000e2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e2e:	f003 0304 	and.w	r3, r3, #4
 8000e32:	613b      	str	r3, [r7, #16]
 8000e34:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e36:	4b3f      	ldr	r3, [pc, #252]	; (8000f34 <HAL_ADC_MspInit+0x1a0>)
 8000e38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e3a:	4a3e      	ldr	r2, [pc, #248]	; (8000f34 <HAL_ADC_MspInit+0x1a0>)
 8000e3c:	f043 0301 	orr.w	r3, r3, #1
 8000e40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e42:	4b3c      	ldr	r3, [pc, #240]	; (8000f34 <HAL_ADC_MspInit+0x1a0>)
 8000e44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e46:	f003 0301 	and.w	r3, r3, #1
 8000e4a:	60fb      	str	r3, [r7, #12]
 8000e4c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e4e:	4b39      	ldr	r3, [pc, #228]	; (8000f34 <HAL_ADC_MspInit+0x1a0>)
 8000e50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e52:	4a38      	ldr	r2, [pc, #224]	; (8000f34 <HAL_ADC_MspInit+0x1a0>)
 8000e54:	f043 0302 	orr.w	r3, r3, #2
 8000e58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e5a:	4b36      	ldr	r3, [pc, #216]	; (8000f34 <HAL_ADC_MspInit+0x1a0>)
 8000e5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e5e:	f003 0302 	and.w	r3, r3, #2
 8000e62:	60bb      	str	r3, [r7, #8]
 8000e64:	68bb      	ldr	r3, [r7, #8]
    PA1     ------> ADC1_IN6
    PA7     ------> ADC1_IN12
    PA2     ------> ADC1_IN7
    PB0     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = ARD_A2_Pin|ARD_A1_Pin;
 8000e66:	2318      	movs	r3, #24
 8000e68:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000e6c:	230b      	movs	r3, #11
 8000e6e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e72:	2300      	movs	r3, #0
 8000e74:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e78:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	482e      	ldr	r0, [pc, #184]	; (8000f38 <HAL_ADC_MspInit+0x1a4>)
 8000e80:	f002 fe32 	bl	8003ae8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|ARD_A0_Pin|GPIO_PIN_2;
 8000e84:	2387      	movs	r3, #135	; 0x87
 8000e86:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000e8a:	230b      	movs	r3, #11
 8000e8c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e90:	2300      	movs	r3, #0
 8000e92:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e96:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ea0:	f002 fe22 	bl	8003ae8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_A3_Pin;
 8000ea4:	2301      	movs	r3, #1
 8000ea6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000eaa:	230b      	movs	r3, #11
 8000eac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(ARD_A3_GPIO_Port, &GPIO_InitStruct);
 8000eb6:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000eba:	4619      	mov	r1, r3
 8000ebc:	481f      	ldr	r0, [pc, #124]	; (8000f3c <HAL_ADC_MspInit+0x1a8>)
 8000ebe:	f002 fe13 	bl	8003ae8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000ec2:	4b1f      	ldr	r3, [pc, #124]	; (8000f40 <HAL_ADC_MspInit+0x1ac>)
 8000ec4:	4a1f      	ldr	r2, [pc, #124]	; (8000f44 <HAL_ADC_MspInit+0x1b0>)
 8000ec6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000ec8:	4b1d      	ldr	r3, [pc, #116]	; (8000f40 <HAL_ADC_MspInit+0x1ac>)
 8000eca:	2205      	movs	r2, #5
 8000ecc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ece:	4b1c      	ldr	r3, [pc, #112]	; (8000f40 <HAL_ADC_MspInit+0x1ac>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ed4:	4b1a      	ldr	r3, [pc, #104]	; (8000f40 <HAL_ADC_MspInit+0x1ac>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000eda:	4b19      	ldr	r3, [pc, #100]	; (8000f40 <HAL_ADC_MspInit+0x1ac>)
 8000edc:	2280      	movs	r2, #128	; 0x80
 8000ede:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000ee0:	4b17      	ldr	r3, [pc, #92]	; (8000f40 <HAL_ADC_MspInit+0x1ac>)
 8000ee2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ee6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000ee8:	4b15      	ldr	r3, [pc, #84]	; (8000f40 <HAL_ADC_MspInit+0x1ac>)
 8000eea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000eee:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000ef0:	4b13      	ldr	r3, [pc, #76]	; (8000f40 <HAL_ADC_MspInit+0x1ac>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000ef6:	4b12      	ldr	r3, [pc, #72]	; (8000f40 <HAL_ADC_MspInit+0x1ac>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000efc:	4810      	ldr	r0, [pc, #64]	; (8000f40 <HAL_ADC_MspInit+0x1ac>)
 8000efe:	f002 fb81 	bl	8003604 <HAL_DMA_Init>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d001      	beq.n	8000f0c <HAL_ADC_MspInit+0x178>
    {
      Error_Handler();
 8000f08:	f7ff ff16 	bl	8000d38 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	4a0c      	ldr	r2, [pc, #48]	; (8000f40 <HAL_ADC_MspInit+0x1ac>)
 8000f10:	651a      	str	r2, [r3, #80]	; 0x50
 8000f12:	4a0b      	ldr	r2, [pc, #44]	; (8000f40 <HAL_ADC_MspInit+0x1ac>)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 5, 0);
 8000f18:	2200      	movs	r2, #0
 8000f1a:	2105      	movs	r1, #5
 8000f1c:	2012      	movs	r0, #18
 8000f1e:	f002 fb47 	bl	80035b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8000f22:	2012      	movs	r0, #18
 8000f24:	f002 fb60 	bl	80035e8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000f28:	bf00      	nop
 8000f2a:	37c8      	adds	r7, #200	; 0xc8
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	50040000 	.word	0x50040000
 8000f34:	40021000 	.word	0x40021000
 8000f38:	48000800 	.word	0x48000800
 8000f3c:	48000400 	.word	0x48000400
 8000f40:	200001ac 	.word	0x200001ac
 8000f44:	40020008 	.word	0x40020008

08000f48 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b08a      	sub	sp, #40	; 0x28
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f50:	f107 0314 	add.w	r3, r7, #20
 8000f54:	2200      	movs	r2, #0
 8000f56:	601a      	str	r2, [r3, #0]
 8000f58:	605a      	str	r2, [r3, #4]
 8000f5a:	609a      	str	r2, [r3, #8]
 8000f5c:	60da      	str	r2, [r3, #12]
 8000f5e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4a1c      	ldr	r2, [pc, #112]	; (8000fd8 <HAL_CAN_MspInit+0x90>)
 8000f66:	4293      	cmp	r3, r2
 8000f68:	d131      	bne.n	8000fce <HAL_CAN_MspInit+0x86>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000f6a:	4b1c      	ldr	r3, [pc, #112]	; (8000fdc <HAL_CAN_MspInit+0x94>)
 8000f6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f6e:	4a1b      	ldr	r2, [pc, #108]	; (8000fdc <HAL_CAN_MspInit+0x94>)
 8000f70:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f74:	6593      	str	r3, [r2, #88]	; 0x58
 8000f76:	4b19      	ldr	r3, [pc, #100]	; (8000fdc <HAL_CAN_MspInit+0x94>)
 8000f78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f7e:	613b      	str	r3, [r7, #16]
 8000f80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f82:	4b16      	ldr	r3, [pc, #88]	; (8000fdc <HAL_CAN_MspInit+0x94>)
 8000f84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f86:	4a15      	ldr	r2, [pc, #84]	; (8000fdc <HAL_CAN_MspInit+0x94>)
 8000f88:	f043 0301 	orr.w	r3, r3, #1
 8000f8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f8e:	4b13      	ldr	r3, [pc, #76]	; (8000fdc <HAL_CAN_MspInit+0x94>)
 8000f90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f92:	f003 0301 	and.w	r3, r3, #1
 8000f96:	60fb      	str	r3, [r7, #12]
 8000f98:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA12     ------> CAN1_TX
    PA11     ------> CAN1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11;
 8000f9a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000f9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa0:	2302      	movs	r3, #2
 8000fa2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fa8:	2303      	movs	r3, #3
 8000faa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000fac:	2309      	movs	r3, #9
 8000fae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fb0:	f107 0314 	add.w	r3, r7, #20
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fba:	f002 fd95 	bl	8003ae8 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	2105      	movs	r1, #5
 8000fc2:	2014      	movs	r0, #20
 8000fc4:	f002 faf4 	bl	80035b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000fc8:	2014      	movs	r0, #20
 8000fca:	f002 fb0d 	bl	80035e8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000fce:	bf00      	nop
 8000fd0:	3728      	adds	r7, #40	; 0x28
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	40006400 	.word	0x40006400
 8000fdc:	40021000 	.word	0x40021000

08000fe0 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b0b2      	sub	sp, #200	; 0xc8
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000fec:	2200      	movs	r2, #0
 8000fee:	601a      	str	r2, [r3, #0]
 8000ff0:	605a      	str	r2, [r3, #4]
 8000ff2:	609a      	str	r2, [r3, #8]
 8000ff4:	60da      	str	r2, [r3, #12]
 8000ff6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ff8:	f107 0318 	add.w	r3, r7, #24
 8000ffc:	229c      	movs	r2, #156	; 0x9c
 8000ffe:	2100      	movs	r1, #0
 8001000:	4618      	mov	r0, r3
 8001002:	f00c fa9f 	bl	800d544 <memset>
  if(hsd->Instance==SDMMC1)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	4a38      	ldr	r2, [pc, #224]	; (80010ec <HAL_SD_MspInit+0x10c>)
 800100c:	4293      	cmp	r3, r2
 800100e:	d169      	bne.n	80010e4 <HAL_SD_MspInit+0x104>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1;
 8001010:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001014:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_PLLP;
 8001016:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800101a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 800101e:	2303      	movs	r3, #3
 8001020:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001022:	f107 0318 	add.w	r3, r7, #24
 8001026:	4618      	mov	r0, r3
 8001028:	f003 fefa 	bl	8004e20 <HAL_RCCEx_PeriphCLKConfig>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <HAL_SD_MspInit+0x56>
    {
      Error_Handler();
 8001032:	f7ff fe81 	bl	8000d38 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001036:	4b2e      	ldr	r3, [pc, #184]	; (80010f0 <HAL_SD_MspInit+0x110>)
 8001038:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800103a:	4a2d      	ldr	r2, [pc, #180]	; (80010f0 <HAL_SD_MspInit+0x110>)
 800103c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001040:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001042:	4b2b      	ldr	r3, [pc, #172]	; (80010f0 <HAL_SD_MspInit+0x110>)
 8001044:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001046:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800104a:	617b      	str	r3, [r7, #20]
 800104c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800104e:	4b28      	ldr	r3, [pc, #160]	; (80010f0 <HAL_SD_MspInit+0x110>)
 8001050:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001052:	4a27      	ldr	r2, [pc, #156]	; (80010f0 <HAL_SD_MspInit+0x110>)
 8001054:	f043 0308 	orr.w	r3, r3, #8
 8001058:	64d3      	str	r3, [r2, #76]	; 0x4c
 800105a:	4b25      	ldr	r3, [pc, #148]	; (80010f0 <HAL_SD_MspInit+0x110>)
 800105c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800105e:	f003 0308 	and.w	r3, r3, #8
 8001062:	613b      	str	r3, [r7, #16]
 8001064:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001066:	4b22      	ldr	r3, [pc, #136]	; (80010f0 <HAL_SD_MspInit+0x110>)
 8001068:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800106a:	4a21      	ldr	r2, [pc, #132]	; (80010f0 <HAL_SD_MspInit+0x110>)
 800106c:	f043 0304 	orr.w	r3, r3, #4
 8001070:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001072:	4b1f      	ldr	r3, [pc, #124]	; (80010f0 <HAL_SD_MspInit+0x110>)
 8001074:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001076:	f003 0304 	and.w	r3, r3, #4
 800107a:	60fb      	str	r3, [r7, #12]
 800107c:	68fb      	ldr	r3, [r7, #12]
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PC8     ------> SDMMC1_D0
    PC9     ------> SDMMC1_D1
    */
    GPIO_InitStruct.Pin = uSD_CMD_Pin;
 800107e:	2304      	movs	r3, #4
 8001080:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001084:	2302      	movs	r3, #2
 8001086:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108a:	2300      	movs	r3, #0
 800108c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001090:	2303      	movs	r3, #3
 8001092:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001096:	230c      	movs	r3, #12
 8001098:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(uSD_CMD_GPIO_Port, &GPIO_InitStruct);
 800109c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80010a0:	4619      	mov	r1, r3
 80010a2:	4814      	ldr	r0, [pc, #80]	; (80010f4 <HAL_SD_MspInit+0x114>)
 80010a4:	f002 fd20 	bl	8003ae8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = uSD_D2_Pin|uSD_D3_Pin|uSD_CLK_Pin|uSD_D0_Pin
 80010a8:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80010ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
                          |uSD_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b0:	2302      	movs	r3, #2
 80010b2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b6:	2300      	movs	r3, #0
 80010b8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010bc:	2303      	movs	r3, #3
 80010be:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80010c2:	230c      	movs	r3, #12
 80010c4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010c8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80010cc:	4619      	mov	r1, r3
 80010ce:	480a      	ldr	r0, [pc, #40]	; (80010f8 <HAL_SD_MspInit+0x118>)
 80010d0:	f002 fd0a 	bl	8003ae8 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 5, 0);
 80010d4:	2200      	movs	r2, #0
 80010d6:	2105      	movs	r1, #5
 80010d8:	2031      	movs	r0, #49	; 0x31
 80010da:	f002 fa69 	bl	80035b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 80010de:	2031      	movs	r0, #49	; 0x31
 80010e0:	f002 fa82 	bl	80035e8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 80010e4:	bf00      	nop
 80010e6:	37c8      	adds	r7, #200	; 0xc8
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	50062400 	.word	0x50062400
 80010f0:	40021000 	.word	0x40021000
 80010f4:	48000c00 	.word	0x48000c00
 80010f8:	48000800 	.word	0x48000800

080010fc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b08e      	sub	sp, #56	; 0x38
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001104:	2300      	movs	r3, #0
 8001106:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800110a:	4b34      	ldr	r3, [pc, #208]	; (80011dc <HAL_InitTick+0xe0>)
 800110c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800110e:	4a33      	ldr	r2, [pc, #204]	; (80011dc <HAL_InitTick+0xe0>)
 8001110:	f043 0310 	orr.w	r3, r3, #16
 8001114:	6593      	str	r3, [r2, #88]	; 0x58
 8001116:	4b31      	ldr	r3, [pc, #196]	; (80011dc <HAL_InitTick+0xe0>)
 8001118:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800111a:	f003 0310 	and.w	r3, r3, #16
 800111e:	60fb      	str	r3, [r7, #12]
 8001120:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001122:	f107 0210 	add.w	r2, r7, #16
 8001126:	f107 0314 	add.w	r3, r7, #20
 800112a:	4611      	mov	r1, r2
 800112c:	4618      	mov	r0, r3
 800112e:	f003 fd87 	bl	8004c40 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001132:	6a3b      	ldr	r3, [r7, #32]
 8001134:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001136:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001138:	2b00      	cmp	r3, #0
 800113a:	d103      	bne.n	8001144 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800113c:	f003 fd54 	bl	8004be8 <HAL_RCC_GetPCLK1Freq>
 8001140:	6378      	str	r0, [r7, #52]	; 0x34
 8001142:	e004      	b.n	800114e <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001144:	f003 fd50 	bl	8004be8 <HAL_RCC_GetPCLK1Freq>
 8001148:	4603      	mov	r3, r0
 800114a:	005b      	lsls	r3, r3, #1
 800114c:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800114e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001150:	4a23      	ldr	r2, [pc, #140]	; (80011e0 <HAL_InitTick+0xe4>)
 8001152:	fba2 2303 	umull	r2, r3, r2, r3
 8001156:	0c9b      	lsrs	r3, r3, #18
 8001158:	3b01      	subs	r3, #1
 800115a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800115c:	4b21      	ldr	r3, [pc, #132]	; (80011e4 <HAL_InitTick+0xe8>)
 800115e:	4a22      	ldr	r2, [pc, #136]	; (80011e8 <HAL_InitTick+0xec>)
 8001160:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001162:	4b20      	ldr	r3, [pc, #128]	; (80011e4 <HAL_InitTick+0xe8>)
 8001164:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001168:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800116a:	4a1e      	ldr	r2, [pc, #120]	; (80011e4 <HAL_InitTick+0xe8>)
 800116c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800116e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001170:	4b1c      	ldr	r3, [pc, #112]	; (80011e4 <HAL_InitTick+0xe8>)
 8001172:	2200      	movs	r2, #0
 8001174:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001176:	4b1b      	ldr	r3, [pc, #108]	; (80011e4 <HAL_InitTick+0xe8>)
 8001178:	2200      	movs	r2, #0
 800117a:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800117c:	4b19      	ldr	r3, [pc, #100]	; (80011e4 <HAL_InitTick+0xe8>)
 800117e:	2200      	movs	r2, #0
 8001180:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001182:	4818      	ldr	r0, [pc, #96]	; (80011e4 <HAL_InitTick+0xe8>)
 8001184:	f007 f8eb 	bl	800835e <HAL_TIM_Base_Init>
 8001188:	4603      	mov	r3, r0
 800118a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800118e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001192:	2b00      	cmp	r3, #0
 8001194:	d11b      	bne.n	80011ce <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001196:	4813      	ldr	r0, [pc, #76]	; (80011e4 <HAL_InitTick+0xe8>)
 8001198:	f007 f942 	bl	8008420 <HAL_TIM_Base_Start_IT>
 800119c:	4603      	mov	r3, r0
 800119e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80011a2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d111      	bne.n	80011ce <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80011aa:	2036      	movs	r0, #54	; 0x36
 80011ac:	f002 fa1c 	bl	80035e8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	2b0f      	cmp	r3, #15
 80011b4:	d808      	bhi.n	80011c8 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80011b6:	2200      	movs	r2, #0
 80011b8:	6879      	ldr	r1, [r7, #4]
 80011ba:	2036      	movs	r0, #54	; 0x36
 80011bc:	f002 f9f8 	bl	80035b0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80011c0:	4a0a      	ldr	r2, [pc, #40]	; (80011ec <HAL_InitTick+0xf0>)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	6013      	str	r3, [r2, #0]
 80011c6:	e002      	b.n	80011ce <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 80011c8:	2301      	movs	r3, #1
 80011ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80011ce:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	3738      	adds	r7, #56	; 0x38
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	40021000 	.word	0x40021000
 80011e0:	431bde83 	.word	0x431bde83
 80011e4:	20000380 	.word	0x20000380
 80011e8:	40001000 	.word	0x40001000
 80011ec:	20000004 	.word	0x20000004

080011f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011f4:	e7fe      	b.n	80011f4 <NMI_Handler+0x4>

080011f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011f6:	b480      	push	{r7}
 80011f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011fa:	e7fe      	b.n	80011fa <HardFault_Handler+0x4>

080011fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001200:	e7fe      	b.n	8001200 <MemManage_Handler+0x4>

08001202 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001202:	b480      	push	{r7}
 8001204:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001206:	e7fe      	b.n	8001206 <BusFault_Handler+0x4>

08001208 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800120c:	e7fe      	b.n	800120c <UsageFault_Handler+0x4>

0800120e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800120e:	b480      	push	{r7}
 8001210:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001212:	bf00      	nop
 8001214:	46bd      	mov	sp, r7
 8001216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121a:	4770      	bx	lr

0800121c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001220:	4802      	ldr	r0, [pc, #8]	; (800122c <DMA1_Channel1_IRQHandler+0x10>)
 8001222:	f002 fb12 	bl	800384a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001226:	bf00      	nop
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	200001ac 	.word	0x200001ac

08001230 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001234:	4802      	ldr	r0, [pc, #8]	; (8001240 <ADC1_IRQHandler+0x10>)
 8001236:	f000 fc79 	bl	8001b2c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 800123a:	bf00      	nop
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	20000144 	.word	0x20000144

08001244 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001248:	4802      	ldr	r0, [pc, #8]	; (8001254 <CAN1_RX0_IRQHandler+0x10>)
 800124a:	f001 feca 	bl	8002fe2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800124e:	bf00      	nop
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	2000020c 	.word	0x2000020c

08001258 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 800125c:	4802      	ldr	r0, [pc, #8]	; (8001268 <SDMMC1_IRQHandler+0x10>)
 800125e:	f005 fe01 	bl	8006e64 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8001262:	bf00      	nop
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	20000234 	.word	0x20000234

0800126c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001270:	4802      	ldr	r0, [pc, #8]	; (800127c <TIM6_DAC_IRQHandler+0x10>)
 8001272:	f007 f945 	bl	8008500 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001276:	bf00      	nop
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	20000380 	.word	0x20000380

08001280 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001284:	4b06      	ldr	r3, [pc, #24]	; (80012a0 <SystemInit+0x20>)
 8001286:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800128a:	4a05      	ldr	r2, [pc, #20]	; (80012a0 <SystemInit+0x20>)
 800128c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001290:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001294:	bf00      	nop
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr
 800129e:	bf00      	nop
 80012a0:	e000ed00 	.word	0xe000ed00

080012a4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80012a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012dc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80012a8:	f7ff ffea 	bl	8001280 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012ac:	480c      	ldr	r0, [pc, #48]	; (80012e0 <LoopForever+0x6>)
  ldr r1, =_edata
 80012ae:	490d      	ldr	r1, [pc, #52]	; (80012e4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80012b0:	4a0d      	ldr	r2, [pc, #52]	; (80012e8 <LoopForever+0xe>)
  movs r3, #0
 80012b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012b4:	e002      	b.n	80012bc <LoopCopyDataInit>

080012b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012ba:	3304      	adds	r3, #4

080012bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012c0:	d3f9      	bcc.n	80012b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012c2:	4a0a      	ldr	r2, [pc, #40]	; (80012ec <LoopForever+0x12>)
  ldr r4, =_ebss
 80012c4:	4c0a      	ldr	r4, [pc, #40]	; (80012f0 <LoopForever+0x16>)
  movs r3, #0
 80012c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012c8:	e001      	b.n	80012ce <LoopFillZerobss>

080012ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012cc:	3204      	adds	r2, #4

080012ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012d0:	d3fb      	bcc.n	80012ca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012d2:	f00c f903 	bl	800d4dc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80012d6:	f7ff f889 	bl	80003ec <main>

080012da <LoopForever>:

LoopForever:
    b LoopForever
 80012da:	e7fe      	b.n	80012da <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80012dc:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 80012e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012e4:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80012e8:	0800d884 	.word	0x0800d884
  ldr r2, =_sbss
 80012ec:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80012f0:	20001db8 	.word	0x20001db8

080012f4 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80012f4:	e7fe      	b.n	80012f4 <CAN1_RX1_IRQHandler>

080012f6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012f6:	b580      	push	{r7, lr}
 80012f8:	b082      	sub	sp, #8
 80012fa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80012fc:	2300      	movs	r3, #0
 80012fe:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001300:	2003      	movs	r0, #3
 8001302:	f002 f94a 	bl	800359a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001306:	200f      	movs	r0, #15
 8001308:	f7ff fef8 	bl	80010fc <HAL_InitTick>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d002      	beq.n	8001318 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001312:	2301      	movs	r3, #1
 8001314:	71fb      	strb	r3, [r7, #7]
 8001316:	e001      	b.n	800131c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001318:	f7ff fd14 	bl	8000d44 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800131c:	79fb      	ldrb	r3, [r7, #7]
}
 800131e:	4618      	mov	r0, r3
 8001320:	3708      	adds	r7, #8
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
	...

08001328 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800132c:	4b06      	ldr	r3, [pc, #24]	; (8001348 <HAL_IncTick+0x20>)
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	461a      	mov	r2, r3
 8001332:	4b06      	ldr	r3, [pc, #24]	; (800134c <HAL_IncTick+0x24>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4413      	add	r3, r2
 8001338:	4a04      	ldr	r2, [pc, #16]	; (800134c <HAL_IncTick+0x24>)
 800133a:	6013      	str	r3, [r2, #0]
}
 800133c:	bf00      	nop
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr
 8001346:	bf00      	nop
 8001348:	20000008 	.word	0x20000008
 800134c:	200003cc 	.word	0x200003cc

08001350 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
  return uwTick;
 8001354:	4b03      	ldr	r3, [pc, #12]	; (8001364 <HAL_GetTick+0x14>)
 8001356:	681b      	ldr	r3, [r3, #0]
}
 8001358:	4618      	mov	r0, r3
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr
 8001362:	bf00      	nop
 8001364:	200003cc 	.word	0x200003cc

08001368 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b084      	sub	sp, #16
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001370:	f7ff ffee 	bl	8001350 <HAL_GetTick>
 8001374:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001380:	d005      	beq.n	800138e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001382:	4b0a      	ldr	r3, [pc, #40]	; (80013ac <HAL_Delay+0x44>)
 8001384:	781b      	ldrb	r3, [r3, #0]
 8001386:	461a      	mov	r2, r3
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	4413      	add	r3, r2
 800138c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800138e:	bf00      	nop
 8001390:	f7ff ffde 	bl	8001350 <HAL_GetTick>
 8001394:	4602      	mov	r2, r0
 8001396:	68bb      	ldr	r3, [r7, #8]
 8001398:	1ad3      	subs	r3, r2, r3
 800139a:	68fa      	ldr	r2, [r7, #12]
 800139c:	429a      	cmp	r2, r3
 800139e:	d8f7      	bhi.n	8001390 <HAL_Delay+0x28>
  {
  }
}
 80013a0:	bf00      	nop
 80013a2:	bf00      	nop
 80013a4:	3710      	adds	r7, #16
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	20000008 	.word	0x20000008

080013b0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b083      	sub	sp, #12
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
 80013b8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	689b      	ldr	r3, [r3, #8]
 80013be:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	431a      	orrs	r2, r3
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	609a      	str	r2, [r3, #8]
}
 80013ca:	bf00      	nop
 80013cc:	370c      	adds	r7, #12
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr

080013d6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80013d6:	b480      	push	{r7}
 80013d8:	b083      	sub	sp, #12
 80013da:	af00      	add	r7, sp, #0
 80013dc:	6078      	str	r0, [r7, #4]
 80013de:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	689b      	ldr	r3, [r3, #8]
 80013e4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	431a      	orrs	r2, r3
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	609a      	str	r2, [r3, #8]
}
 80013f0:	bf00      	nop
 80013f2:	370c      	adds	r7, #12
 80013f4:	46bd      	mov	sp, r7
 80013f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fa:	4770      	bx	lr

080013fc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b083      	sub	sp, #12
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	689b      	ldr	r3, [r3, #8]
 8001408:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800140c:	4618      	mov	r0, r3
 800140e:	370c      	adds	r7, #12
 8001410:	46bd      	mov	sp, r7
 8001412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001416:	4770      	bx	lr

08001418 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001418:	b480      	push	{r7}
 800141a:	b087      	sub	sp, #28
 800141c:	af00      	add	r7, sp, #0
 800141e:	60f8      	str	r0, [r7, #12]
 8001420:	60b9      	str	r1, [r7, #8]
 8001422:	607a      	str	r2, [r7, #4]
 8001424:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	3360      	adds	r3, #96	; 0x60
 800142a:	461a      	mov	r2, r3
 800142c:	68bb      	ldr	r3, [r7, #8]
 800142e:	009b      	lsls	r3, r3, #2
 8001430:	4413      	add	r3, r2
 8001432:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	681a      	ldr	r2, [r3, #0]
 8001438:	4b08      	ldr	r3, [pc, #32]	; (800145c <LL_ADC_SetOffset+0x44>)
 800143a:	4013      	ands	r3, r2
 800143c:	687a      	ldr	r2, [r7, #4]
 800143e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001442:	683a      	ldr	r2, [r7, #0]
 8001444:	430a      	orrs	r2, r1
 8001446:	4313      	orrs	r3, r2
 8001448:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001450:	bf00      	nop
 8001452:	371c      	adds	r7, #28
 8001454:	46bd      	mov	sp, r7
 8001456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145a:	4770      	bx	lr
 800145c:	03fff000 	.word	0x03fff000

08001460 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001460:	b480      	push	{r7}
 8001462:	b085      	sub	sp, #20
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
 8001468:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	3360      	adds	r3, #96	; 0x60
 800146e:	461a      	mov	r2, r3
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	009b      	lsls	r3, r3, #2
 8001474:	4413      	add	r3, r2
 8001476:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001480:	4618      	mov	r0, r3
 8001482:	3714      	adds	r7, #20
 8001484:	46bd      	mov	sp, r7
 8001486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148a:	4770      	bx	lr

0800148c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800148c:	b480      	push	{r7}
 800148e:	b087      	sub	sp, #28
 8001490:	af00      	add	r7, sp, #0
 8001492:	60f8      	str	r0, [r7, #12]
 8001494:	60b9      	str	r1, [r7, #8]
 8001496:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	3360      	adds	r3, #96	; 0x60
 800149c:	461a      	mov	r2, r3
 800149e:	68bb      	ldr	r3, [r7, #8]
 80014a0:	009b      	lsls	r3, r3, #2
 80014a2:	4413      	add	r3, r2
 80014a4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80014a6:	697b      	ldr	r3, [r7, #20]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	431a      	orrs	r2, r3
 80014b2:	697b      	ldr	r3, [r7, #20]
 80014b4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80014b6:	bf00      	nop
 80014b8:	371c      	adds	r7, #28
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr

080014c2 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80014c2:	b480      	push	{r7}
 80014c4:	b083      	sub	sp, #12
 80014c6:	af00      	add	r7, sp, #0
 80014c8:	6078      	str	r0, [r7, #4]
 80014ca:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	695b      	ldr	r3, [r3, #20]
 80014d0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	431a      	orrs	r2, r3
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	615a      	str	r2, [r3, #20]
}
 80014dc:	bf00      	nop
 80014de:	370c      	adds	r7, #12
 80014e0:	46bd      	mov	sp, r7
 80014e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e6:	4770      	bx	lr

080014e8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b083      	sub	sp, #12
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	68db      	ldr	r3, [r3, #12]
 80014f4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d101      	bne.n	8001500 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80014fc:	2301      	movs	r3, #1
 80014fe:	e000      	b.n	8001502 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001500:	2300      	movs	r3, #0
}
 8001502:	4618      	mov	r0, r3
 8001504:	370c      	adds	r7, #12
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr

0800150e <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800150e:	b480      	push	{r7}
 8001510:	b087      	sub	sp, #28
 8001512:	af00      	add	r7, sp, #0
 8001514:	60f8      	str	r0, [r7, #12]
 8001516:	60b9      	str	r1, [r7, #8]
 8001518:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	3330      	adds	r3, #48	; 0x30
 800151e:	461a      	mov	r2, r3
 8001520:	68bb      	ldr	r3, [r7, #8]
 8001522:	0a1b      	lsrs	r3, r3, #8
 8001524:	009b      	lsls	r3, r3, #2
 8001526:	f003 030c 	and.w	r3, r3, #12
 800152a:	4413      	add	r3, r2
 800152c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800152e:	697b      	ldr	r3, [r7, #20]
 8001530:	681a      	ldr	r2, [r3, #0]
 8001532:	68bb      	ldr	r3, [r7, #8]
 8001534:	f003 031f 	and.w	r3, r3, #31
 8001538:	211f      	movs	r1, #31
 800153a:	fa01 f303 	lsl.w	r3, r1, r3
 800153e:	43db      	mvns	r3, r3
 8001540:	401a      	ands	r2, r3
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	0e9b      	lsrs	r3, r3, #26
 8001546:	f003 011f 	and.w	r1, r3, #31
 800154a:	68bb      	ldr	r3, [r7, #8]
 800154c:	f003 031f 	and.w	r3, r3, #31
 8001550:	fa01 f303 	lsl.w	r3, r1, r3
 8001554:	431a      	orrs	r2, r3
 8001556:	697b      	ldr	r3, [r7, #20]
 8001558:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800155a:	bf00      	nop
 800155c:	371c      	adds	r7, #28
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr

08001566 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001566:	b480      	push	{r7}
 8001568:	b083      	sub	sp, #12
 800156a:	af00      	add	r7, sp, #0
 800156c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001572:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d101      	bne.n	800157e <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 800157a:	2301      	movs	r3, #1
 800157c:	e000      	b.n	8001580 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800157e:	2300      	movs	r3, #0
}
 8001580:	4618      	mov	r0, r3
 8001582:	370c      	adds	r7, #12
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr

0800158c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800158c:	b480      	push	{r7}
 800158e:	b087      	sub	sp, #28
 8001590:	af00      	add	r7, sp, #0
 8001592:	60f8      	str	r0, [r7, #12]
 8001594:	60b9      	str	r1, [r7, #8]
 8001596:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	3314      	adds	r3, #20
 800159c:	461a      	mov	r2, r3
 800159e:	68bb      	ldr	r3, [r7, #8]
 80015a0:	0e5b      	lsrs	r3, r3, #25
 80015a2:	009b      	lsls	r3, r3, #2
 80015a4:	f003 0304 	and.w	r3, r3, #4
 80015a8:	4413      	add	r3, r2
 80015aa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	681a      	ldr	r2, [r3, #0]
 80015b0:	68bb      	ldr	r3, [r7, #8]
 80015b2:	0d1b      	lsrs	r3, r3, #20
 80015b4:	f003 031f 	and.w	r3, r3, #31
 80015b8:	2107      	movs	r1, #7
 80015ba:	fa01 f303 	lsl.w	r3, r1, r3
 80015be:	43db      	mvns	r3, r3
 80015c0:	401a      	ands	r2, r3
 80015c2:	68bb      	ldr	r3, [r7, #8]
 80015c4:	0d1b      	lsrs	r3, r3, #20
 80015c6:	f003 031f 	and.w	r3, r3, #31
 80015ca:	6879      	ldr	r1, [r7, #4]
 80015cc:	fa01 f303 	lsl.w	r3, r1, r3
 80015d0:	431a      	orrs	r2, r3
 80015d2:	697b      	ldr	r3, [r7, #20]
 80015d4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80015d6:	bf00      	nop
 80015d8:	371c      	adds	r7, #28
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr
	...

080015e4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b085      	sub	sp, #20
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	60f8      	str	r0, [r7, #12]
 80015ec:	60b9      	str	r1, [r7, #8]
 80015ee:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80015f6:	68bb      	ldr	r3, [r7, #8]
 80015f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80015fc:	43db      	mvns	r3, r3
 80015fe:	401a      	ands	r2, r3
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	f003 0318 	and.w	r3, r3, #24
 8001606:	4908      	ldr	r1, [pc, #32]	; (8001628 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001608:	40d9      	lsrs	r1, r3
 800160a:	68bb      	ldr	r3, [r7, #8]
 800160c:	400b      	ands	r3, r1
 800160e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001612:	431a      	orrs	r2, r3
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800161a:	bf00      	nop
 800161c:	3714      	adds	r7, #20
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr
 8001626:	bf00      	nop
 8001628:	0007ffff 	.word	0x0007ffff

0800162c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800162c:	b480      	push	{r7}
 800162e:	b083      	sub	sp, #12
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	689b      	ldr	r3, [r3, #8]
 8001638:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800163c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001640:	687a      	ldr	r2, [r7, #4]
 8001642:	6093      	str	r3, [r2, #8]
}
 8001644:	bf00      	nop
 8001646:	370c      	adds	r7, #12
 8001648:	46bd      	mov	sp, r7
 800164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164e:	4770      	bx	lr

08001650 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001650:	b480      	push	{r7}
 8001652:	b083      	sub	sp, #12
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	689b      	ldr	r3, [r3, #8]
 800165c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001660:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001664:	d101      	bne.n	800166a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001666:	2301      	movs	r3, #1
 8001668:	e000      	b.n	800166c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800166a:	2300      	movs	r3, #0
}
 800166c:	4618      	mov	r0, r3
 800166e:	370c      	adds	r7, #12
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr

08001678 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001678:	b480      	push	{r7}
 800167a:	b083      	sub	sp, #12
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	689b      	ldr	r3, [r3, #8]
 8001684:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001688:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800168c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001694:	bf00      	nop
 8001696:	370c      	adds	r7, #12
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr

080016a0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b083      	sub	sp, #12
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	689b      	ldr	r3, [r3, #8]
 80016ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016b0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80016b4:	d101      	bne.n	80016ba <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80016b6:	2301      	movs	r3, #1
 80016b8:	e000      	b.n	80016bc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80016ba:	2300      	movs	r3, #0
}
 80016bc:	4618      	mov	r0, r3
 80016be:	370c      	adds	r7, #12
 80016c0:	46bd      	mov	sp, r7
 80016c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c6:	4770      	bx	lr

080016c8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b083      	sub	sp, #12
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	689b      	ldr	r3, [r3, #8]
 80016d4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80016d8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80016dc:	f043 0201 	orr.w	r2, r3, #1
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80016e4:	bf00      	nop
 80016e6:	370c      	adds	r7, #12
 80016e8:	46bd      	mov	sp, r7
 80016ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ee:	4770      	bx	lr

080016f0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b083      	sub	sp, #12
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	689b      	ldr	r3, [r3, #8]
 80016fc:	f003 0301 	and.w	r3, r3, #1
 8001700:	2b01      	cmp	r3, #1
 8001702:	d101      	bne.n	8001708 <LL_ADC_IsEnabled+0x18>
 8001704:	2301      	movs	r3, #1
 8001706:	e000      	b.n	800170a <LL_ADC_IsEnabled+0x1a>
 8001708:	2300      	movs	r3, #0
}
 800170a:	4618      	mov	r0, r3
 800170c:	370c      	adds	r7, #12
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr

08001716 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001716:	b480      	push	{r7}
 8001718:	b083      	sub	sp, #12
 800171a:	af00      	add	r7, sp, #0
 800171c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	689b      	ldr	r3, [r3, #8]
 8001722:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001726:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800172a:	f043 0204 	orr.w	r2, r3, #4
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001732:	bf00      	nop
 8001734:	370c      	adds	r7, #12
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr

0800173e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800173e:	b480      	push	{r7}
 8001740:	b083      	sub	sp, #12
 8001742:	af00      	add	r7, sp, #0
 8001744:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	689b      	ldr	r3, [r3, #8]
 800174a:	f003 0304 	and.w	r3, r3, #4
 800174e:	2b04      	cmp	r3, #4
 8001750:	d101      	bne.n	8001756 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001752:	2301      	movs	r3, #1
 8001754:	e000      	b.n	8001758 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001756:	2300      	movs	r3, #0
}
 8001758:	4618      	mov	r0, r3
 800175a:	370c      	adds	r7, #12
 800175c:	46bd      	mov	sp, r7
 800175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001762:	4770      	bx	lr

08001764 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001764:	b480      	push	{r7}
 8001766:	b083      	sub	sp, #12
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	689b      	ldr	r3, [r3, #8]
 8001770:	f003 0308 	and.w	r3, r3, #8
 8001774:	2b08      	cmp	r3, #8
 8001776:	d101      	bne.n	800177c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001778:	2301      	movs	r3, #1
 800177a:	e000      	b.n	800177e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800177c:	2300      	movs	r3, #0
}
 800177e:	4618      	mov	r0, r3
 8001780:	370c      	adds	r7, #12
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr
	...

0800178c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b088      	sub	sp, #32
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001794:	2300      	movs	r3, #0
 8001796:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001798:	2300      	movs	r3, #0
 800179a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d101      	bne.n	80017a6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80017a2:	2301      	movs	r3, #1
 80017a4:	e12f      	b.n	8001a06 <HAL_ADC_Init+0x27a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	691b      	ldr	r3, [r3, #16]
 80017aa:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d109      	bne.n	80017c8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80017b4:	6878      	ldr	r0, [r7, #4]
 80017b6:	f7ff faed 	bl	8000d94 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2200      	movs	r2, #0
 80017be:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2200      	movs	r2, #0
 80017c4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4618      	mov	r0, r3
 80017ce:	f7ff ff3f 	bl	8001650 <LL_ADC_IsDeepPowerDownEnabled>
 80017d2:	4603      	mov	r3, r0
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d004      	beq.n	80017e2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4618      	mov	r0, r3
 80017de:	f7ff ff25 	bl	800162c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4618      	mov	r0, r3
 80017e8:	f7ff ff5a 	bl	80016a0 <LL_ADC_IsInternalRegulatorEnabled>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d115      	bne.n	800181e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4618      	mov	r0, r3
 80017f8:	f7ff ff3e 	bl	8001678 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80017fc:	4b84      	ldr	r3, [pc, #528]	; (8001a10 <HAL_ADC_Init+0x284>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	099b      	lsrs	r3, r3, #6
 8001802:	4a84      	ldr	r2, [pc, #528]	; (8001a14 <HAL_ADC_Init+0x288>)
 8001804:	fba2 2303 	umull	r2, r3, r2, r3
 8001808:	099b      	lsrs	r3, r3, #6
 800180a:	3301      	adds	r3, #1
 800180c:	005b      	lsls	r3, r3, #1
 800180e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001810:	e002      	b.n	8001818 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001812:	68bb      	ldr	r3, [r7, #8]
 8001814:	3b01      	subs	r3, #1
 8001816:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001818:	68bb      	ldr	r3, [r7, #8]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d1f9      	bne.n	8001812 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4618      	mov	r0, r3
 8001824:	f7ff ff3c 	bl	80016a0 <LL_ADC_IsInternalRegulatorEnabled>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	d10d      	bne.n	800184a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001832:	f043 0210 	orr.w	r2, r3, #16
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800183e:	f043 0201 	orr.w	r2, r3, #1
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001846:	2301      	movs	r3, #1
 8001848:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4618      	mov	r0, r3
 8001850:	f7ff ff75 	bl	800173e <LL_ADC_REG_IsConversionOngoing>
 8001854:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800185a:	f003 0310 	and.w	r3, r3, #16
 800185e:	2b00      	cmp	r3, #0
 8001860:	f040 80c8 	bne.w	80019f4 <HAL_ADC_Init+0x268>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	2b00      	cmp	r3, #0
 8001868:	f040 80c4 	bne.w	80019f4 <HAL_ADC_Init+0x268>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001870:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001874:	f043 0202 	orr.w	r2, r3, #2
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4618      	mov	r0, r3
 8001882:	f7ff ff35 	bl	80016f0 <LL_ADC_IsEnabled>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d10b      	bne.n	80018a4 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800188c:	4862      	ldr	r0, [pc, #392]	; (8001a18 <HAL_ADC_Init+0x28c>)
 800188e:	f7ff ff2f 	bl	80016f0 <LL_ADC_IsEnabled>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	d105      	bne.n	80018a4 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	4619      	mov	r1, r3
 800189e:	485f      	ldr	r0, [pc, #380]	; (8001a1c <HAL_ADC_Init+0x290>)
 80018a0:	f7ff fd86 	bl	80013b0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	7e5b      	ldrb	r3, [r3, #25]
 80018a8:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80018ae:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80018b4:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80018ba:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018c2:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80018c4:	4313      	orrs	r3, r2
 80018c6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018ce:	2b01      	cmp	r3, #1
 80018d0:	d106      	bne.n	80018e0 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018d6:	3b01      	subs	r3, #1
 80018d8:	045b      	lsls	r3, r3, #17
 80018da:	69ba      	ldr	r2, [r7, #24]
 80018dc:	4313      	orrs	r3, r2
 80018de:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d009      	beq.n	80018fc <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018ec:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018f4:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80018f6:	69ba      	ldr	r2, [r7, #24]
 80018f8:	4313      	orrs	r3, r2
 80018fa:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	68da      	ldr	r2, [r3, #12]
 8001902:	4b47      	ldr	r3, [pc, #284]	; (8001a20 <HAL_ADC_Init+0x294>)
 8001904:	4013      	ands	r3, r2
 8001906:	687a      	ldr	r2, [r7, #4]
 8001908:	6812      	ldr	r2, [r2, #0]
 800190a:	69b9      	ldr	r1, [r7, #24]
 800190c:	430b      	orrs	r3, r1
 800190e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4618      	mov	r0, r3
 8001916:	f7ff ff12 	bl	800173e <LL_ADC_REG_IsConversionOngoing>
 800191a:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4618      	mov	r0, r3
 8001922:	f7ff ff1f 	bl	8001764 <LL_ADC_INJ_IsConversionOngoing>
 8001926:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001928:	693b      	ldr	r3, [r7, #16]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d140      	bne.n	80019b0 <HAL_ADC_Init+0x224>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d13d      	bne.n	80019b0 <HAL_ADC_Init+0x224>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	7e1b      	ldrb	r3, [r3, #24]
 800193c:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800193e:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001946:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001948:	4313      	orrs	r3, r2
 800194a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	68db      	ldr	r3, [r3, #12]
 8001952:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001956:	f023 0306 	bic.w	r3, r3, #6
 800195a:	687a      	ldr	r2, [r7, #4]
 800195c:	6812      	ldr	r2, [r2, #0]
 800195e:	69b9      	ldr	r1, [r7, #24]
 8001960:	430b      	orrs	r3, r1
 8001962:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800196a:	2b01      	cmp	r3, #1
 800196c:	d118      	bne.n	80019a0 <HAL_ADC_Init+0x214>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	691b      	ldr	r3, [r3, #16]
 8001974:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001978:	f023 0304 	bic.w	r3, r3, #4
 800197c:	687a      	ldr	r2, [r7, #4]
 800197e:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001980:	687a      	ldr	r2, [r7, #4]
 8001982:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001984:	4311      	orrs	r1, r2
 8001986:	687a      	ldr	r2, [r7, #4]
 8001988:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800198a:	4311      	orrs	r1, r2
 800198c:	687a      	ldr	r2, [r7, #4]
 800198e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001990:	430a      	orrs	r2, r1
 8001992:	431a      	orrs	r2, r3
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f042 0201 	orr.w	r2, r2, #1
 800199c:	611a      	str	r2, [r3, #16]
 800199e:	e007      	b.n	80019b0 <HAL_ADC_Init+0x224>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	691a      	ldr	r2, [r3, #16]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f022 0201 	bic.w	r2, r2, #1
 80019ae:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	691b      	ldr	r3, [r3, #16]
 80019b4:	2b01      	cmp	r3, #1
 80019b6:	d10c      	bne.n	80019d2 <HAL_ADC_Init+0x246>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019be:	f023 010f 	bic.w	r1, r3, #15
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	69db      	ldr	r3, [r3, #28]
 80019c6:	1e5a      	subs	r2, r3, #1
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	430a      	orrs	r2, r1
 80019ce:	631a      	str	r2, [r3, #48]	; 0x30
 80019d0:	e007      	b.n	80019e2 <HAL_ADC_Init+0x256>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f022 020f 	bic.w	r2, r2, #15
 80019e0:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019e6:	f023 0303 	bic.w	r3, r3, #3
 80019ea:	f043 0201 	orr.w	r2, r3, #1
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	659a      	str	r2, [r3, #88]	; 0x58
 80019f2:	e007      	b.n	8001a04 <HAL_ADC_Init+0x278>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019f8:	f043 0210 	orr.w	r2, r3, #16
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001a00:	2301      	movs	r3, #1
 8001a02:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001a04:	7ffb      	ldrb	r3, [r7, #31]
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	3720      	adds	r7, #32
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	20000000 	.word	0x20000000
 8001a14:	053e2d63 	.word	0x053e2d63
 8001a18:	50040000 	.word	0x50040000
 8001a1c:	50040300 	.word	0x50040300
 8001a20:	fff0c007 	.word	0xfff0c007

08001a24 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b086      	sub	sp, #24
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	60f8      	str	r0, [r7, #12]
 8001a2c:	60b9      	str	r1, [r7, #8]
 8001a2e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4618      	mov	r0, r3
 8001a36:	f7ff fe82 	bl	800173e <LL_ADC_REG_IsConversionOngoing>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d167      	bne.n	8001b10 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001a46:	2b01      	cmp	r3, #1
 8001a48:	d101      	bne.n	8001a4e <HAL_ADC_Start_DMA+0x2a>
 8001a4a:	2302      	movs	r3, #2
 8001a4c:	e063      	b.n	8001b16 <HAL_ADC_Start_DMA+0xf2>
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	2201      	movs	r2, #1
 8001a52:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001a56:	68f8      	ldr	r0, [r7, #12]
 8001a58:	f000 fe36 	bl	80026c8 <ADC_Enable>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001a60:	7dfb      	ldrb	r3, [r7, #23]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d14f      	bne.n	8001b06 <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a6a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001a6e:	f023 0301 	bic.w	r3, r3, #1
 8001a72:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	659a      	str	r2, [r3, #88]	; 0x58
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a7e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d006      	beq.n	8001a94 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a8a:	f023 0206 	bic.w	r2, r3, #6
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	65da      	str	r2, [r3, #92]	; 0x5c
 8001a92:	e002      	b.n	8001a9a <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	2200      	movs	r2, #0
 8001a98:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a9e:	4a20      	ldr	r2, [pc, #128]	; (8001b20 <HAL_ADC_Start_DMA+0xfc>)
 8001aa0:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001aa6:	4a1f      	ldr	r2, [pc, #124]	; (8001b24 <HAL_ADC_Start_DMA+0x100>)
 8001aa8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001aae:	4a1e      	ldr	r2, [pc, #120]	; (8001b28 <HAL_ADC_Start_DMA+0x104>)
 8001ab0:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	221c      	movs	r2, #28
 8001ab8:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	2200      	movs	r2, #0
 8001abe:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	685a      	ldr	r2, [r3, #4]
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f042 0210 	orr.w	r2, r2, #16
 8001ad0:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	68da      	ldr	r2, [r3, #12]
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f042 0201 	orr.w	r2, r2, #1
 8001ae0:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	3340      	adds	r3, #64	; 0x40
 8001aec:	4619      	mov	r1, r3
 8001aee:	68ba      	ldr	r2, [r7, #8]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	f001 fe2f 	bl	8003754 <HAL_DMA_Start_IT>
 8001af6:	4603      	mov	r3, r0
 8001af8:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4618      	mov	r0, r3
 8001b00:	f7ff fe09 	bl	8001716 <LL_ADC_REG_StartConversion>
 8001b04:	e006      	b.n	8001b14 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	2200      	movs	r2, #0
 8001b0a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8001b0e:	e001      	b.n	8001b14 <HAL_ADC_Start_DMA+0xf0>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001b10:	2302      	movs	r3, #2
 8001b12:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001b14:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3718      	adds	r7, #24
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	080027d5 	.word	0x080027d5
 8001b24:	080028ad 	.word	0x080028ad
 8001b28:	080028c9 	.word	0x080028c9

08001b2c <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b088      	sub	sp, #32
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8001b34:	2300      	movs	r3, #0
 8001b36:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001b48:	69bb      	ldr	r3, [r7, #24]
 8001b4a:	f003 0302 	and.w	r3, r3, #2
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d017      	beq.n	8001b82 <HAL_ADC_IRQHandler+0x56>
 8001b52:	697b      	ldr	r3, [r7, #20]
 8001b54:	f003 0302 	and.w	r3, r3, #2
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d012      	beq.n	8001b82 <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b60:	f003 0310 	and.w	r3, r3, #16
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d105      	bne.n	8001b74 <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b6c:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	659a      	str	r2, [r3, #88]	; 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001b74:	6878      	ldr	r0, [r7, #4]
 8001b76:	f000 fee9 	bl	800294c <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	2202      	movs	r2, #2
 8001b80:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001b82:	69bb      	ldr	r3, [r7, #24]
 8001b84:	f003 0304 	and.w	r3, r3, #4
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d004      	beq.n	8001b96 <HAL_ADC_IRQHandler+0x6a>
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	f003 0304 	and.w	r3, r3, #4
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d109      	bne.n	8001baa <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001b96:	69bb      	ldr	r3, [r7, #24]
 8001b98:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d05e      	beq.n	8001c5e <HAL_ADC_IRQHandler+0x132>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	f003 0308 	and.w	r3, r3, #8
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d059      	beq.n	8001c5e <HAL_ADC_IRQHandler+0x132>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bae:	f003 0310 	and.w	r3, r3, #16
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d105      	bne.n	8001bc2 <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bba:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f7ff fc8e 	bl	80014e8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d03e      	beq.n	8001c50 <HAL_ADC_IRQHandler+0x124>
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
      }
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	68db      	ldr	r3, [r3, #12]
 8001bd8:	613b      	str	r3, [r7, #16]
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d135      	bne.n	8001c50 <HAL_ADC_IRQHandler+0x124>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f003 0308 	and.w	r3, r3, #8
 8001bee:	2b08      	cmp	r3, #8
 8001bf0:	d12e      	bne.n	8001c50 <HAL_ADC_IRQHandler+0x124>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f7ff fda1 	bl	800173e <LL_ADC_REG_IsConversionOngoing>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d11a      	bne.n	8001c38 <HAL_ADC_IRQHandler+0x10c>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	685a      	ldr	r2, [r3, #4]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f022 020c 	bic.w	r2, r2, #12
 8001c10:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c16:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	659a      	str	r2, [r3, #88]	; 0x58

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c22:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d112      	bne.n	8001c50 <HAL_ADC_IRQHandler+0x124>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c2e:	f043 0201 	orr.w	r2, r3, #1
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	659a      	str	r2, [r3, #88]	; 0x58
 8001c36:	e00b      	b.n	8001c50 <HAL_ADC_IRQHandler+0x124>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c3c:	f043 0210 	orr.w	r2, r3, #16
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c48:	f043 0201 	orr.w	r2, r3, #1
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	65da      	str	r2, [r3, #92]	; 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001c50:	6878      	ldr	r0, [r7, #4]
 8001c52:	f7fe faf5 	bl	8000240 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	220c      	movs	r2, #12
 8001c5c:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001c5e:	69bb      	ldr	r3, [r7, #24]
 8001c60:	f003 0320 	and.w	r3, r3, #32
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d004      	beq.n	8001c72 <HAL_ADC_IRQHandler+0x146>
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	f003 0320 	and.w	r3, r3, #32
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d109      	bne.n	8001c86 <HAL_ADC_IRQHandler+0x15a>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001c72:	69bb      	ldr	r3, [r7, #24]
 8001c74:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d072      	beq.n	8001d62 <HAL_ADC_IRQHandler+0x236>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001c7c:	697b      	ldr	r3, [r7, #20]
 8001c7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d06d      	beq.n	8001d62 <HAL_ADC_IRQHandler+0x236>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c8a:	f003 0310 	and.w	r3, r3, #16
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d105      	bne.n	8001c9e <HAL_ADC_IRQHandler+0x172>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c96:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f7ff fc5f 	bl	8001566 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8001ca8:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f7ff fc1a 	bl	80014e8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001cb4:	60b8      	str	r0, [r7, #8]
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
    }
#else
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	68db      	ldr	r3, [r3, #12]
 8001cbc:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d047      	beq.n	8001d54 <HAL_ADC_IRQHandler+0x228>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d007      	beq.n	8001cde <HAL_ADC_IRQHandler+0x1b2>
 8001cce:	68bb      	ldr	r3, [r7, #8]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d03f      	beq.n	8001d54 <HAL_ADC_IRQHandler+0x228>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8001cd4:	693b      	ldr	r3, [r7, #16]
 8001cd6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d13a      	bne.n	8001d54 <HAL_ADC_IRQHandler+0x228>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ce8:	2b40      	cmp	r3, #64	; 0x40
 8001cea:	d133      	bne.n	8001d54 <HAL_ADC_IRQHandler+0x228>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d12e      	bne.n	8001d54 <HAL_ADC_IRQHandler+0x228>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f7ff fd32 	bl	8001764 <LL_ADC_INJ_IsConversionOngoing>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d11a      	bne.n	8001d3c <HAL_ADC_IRQHandler+0x210>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	685a      	ldr	r2, [r3, #4]
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001d14:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d1a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	659a      	str	r2, [r3, #88]	; 0x58

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d112      	bne.n	8001d54 <HAL_ADC_IRQHandler+0x228>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d32:	f043 0201 	orr.w	r2, r3, #1
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	659a      	str	r2, [r3, #88]	; 0x58
 8001d3a:	e00b      	b.n	8001d54 <HAL_ADC_IRQHandler+0x228>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d40:	f043 0210 	orr.w	r2, r3, #16
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	659a      	str	r2, [r3, #88]	; 0x58

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d4c:	f043 0201 	orr.w	r2, r3, #1
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	65da      	str	r2, [r3, #92]	; 0x5c
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001d54:	6878      	ldr	r0, [r7, #4]
 8001d56:	f000 fdd1 	bl	80028fc <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	2260      	movs	r2, #96	; 0x60
 8001d60:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8001d62:	69bb      	ldr	r3, [r7, #24]
 8001d64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d011      	beq.n	8001d90 <HAL_ADC_IRQHandler+0x264>
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d00c      	beq.n	8001d90 <HAL_ADC_IRQHandler+0x264>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d7a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001d82:	6878      	ldr	r0, [r7, #4]
 8001d84:	f000 f890 	bl	8001ea8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	2280      	movs	r2, #128	; 0x80
 8001d8e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8001d90:	69bb      	ldr	r3, [r7, #24]
 8001d92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d012      	beq.n	8001dc0 <HAL_ADC_IRQHandler+0x294>
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d00d      	beq.n	8001dc0 <HAL_ADC_IRQHandler+0x294>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001da8:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001db0:	6878      	ldr	r0, [r7, #4]
 8001db2:	f000 fdb7 	bl	8002924 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001dbe:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8001dc0:	69bb      	ldr	r3, [r7, #24]
 8001dc2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d012      	beq.n	8001df0 <HAL_ADC_IRQHandler+0x2c4>
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d00d      	beq.n	8001df0 <HAL_ADC_IRQHandler+0x2c4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dd8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001de0:	6878      	ldr	r0, [r7, #4]
 8001de2:	f000 fda9 	bl	8002938 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001dee:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8001df0:	69bb      	ldr	r3, [r7, #24]
 8001df2:	f003 0310 	and.w	r3, r3, #16
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d02a      	beq.n	8001e50 <HAL_ADC_IRQHandler+0x324>
 8001dfa:	697b      	ldr	r3, [r7, #20]
 8001dfc:	f003 0310 	and.w	r3, r3, #16
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d025      	beq.n	8001e50 <HAL_ADC_IRQHandler+0x324>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d102      	bne.n	8001e12 <HAL_ADC_IRQHandler+0x2e6>
    {
      overrun_error = 1UL;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	61fb      	str	r3, [r7, #28]
 8001e10:	e008      	b.n	8001e24 <HAL_ADC_IRQHandler+0x2f8>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	68db      	ldr	r3, [r3, #12]
 8001e18:	f003 0301 	and.w	r3, r3, #1
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d001      	beq.n	8001e24 <HAL_ADC_IRQHandler+0x2f8>
        {
          overrun_error = 1UL;
 8001e20:	2301      	movs	r3, #1
 8001e22:	61fb      	str	r3, [r7, #28]
        }
      }
    }

    if (overrun_error == 1UL)
 8001e24:	69fb      	ldr	r3, [r7, #28]
 8001e26:	2b01      	cmp	r3, #1
 8001e28:	d10e      	bne.n	8001e48 <HAL_ADC_IRQHandler+0x31c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e2e:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e3a:	f043 0202 	orr.w	r2, r3, #2
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	65da      	str	r2, [r3, #92]	; 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001e42:	6878      	ldr	r0, [r7, #4]
 8001e44:	f000 f83a 	bl	8001ebc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	2210      	movs	r2, #16
 8001e4e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8001e50:	69bb      	ldr	r3, [r7, #24]
 8001e52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d018      	beq.n	8001e8c <HAL_ADC_IRQHandler+0x360>
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d013      	beq.n	8001e8c <HAL_ADC_IRQHandler+0x360>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e68:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e74:	f043 0208 	orr.w	r2, r3, #8
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e84:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8001e86:	6878      	ldr	r0, [r7, #4]
 8001e88:	f000 fd42 	bl	8002910 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8001e8c:	bf00      	nop
 8001e8e:	3720      	adds	r7, #32
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}

08001e94 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b083      	sub	sp, #12
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001e9c:	bf00      	nop
 8001e9e:	370c      	adds	r7, #12
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr

08001ea8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b083      	sub	sp, #12
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001eb0:	bf00      	nop
 8001eb2:	370c      	adds	r7, #12
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eba:	4770      	bx	lr

08001ebc <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b083      	sub	sp, #12
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001ec4:	bf00      	nop
 8001ec6:	370c      	adds	r7, #12
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ece:	4770      	bx	lr

08001ed0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b0b6      	sub	sp, #216	; 0xd8
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
 8001ed8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001eda:	2300      	movs	r3, #0
 8001edc:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001eea:	2b01      	cmp	r3, #1
 8001eec:	d101      	bne.n	8001ef2 <HAL_ADC_ConfigChannel+0x22>
 8001eee:	2302      	movs	r3, #2
 8001ef0:	e3d5      	b.n	800269e <HAL_ADC_ConfigChannel+0x7ce>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4618      	mov	r0, r3
 8001f00:	f7ff fc1d 	bl	800173e <LL_ADC_REG_IsConversionOngoing>
 8001f04:	4603      	mov	r3, r0
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	f040 83ba 	bne.w	8002680 <HAL_ADC_ConfigChannel+0x7b0>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	2b05      	cmp	r3, #5
 8001f12:	d824      	bhi.n	8001f5e <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	3b02      	subs	r3, #2
 8001f1a:	2b03      	cmp	r3, #3
 8001f1c:	d81b      	bhi.n	8001f56 <HAL_ADC_ConfigChannel+0x86>
 8001f1e:	a201      	add	r2, pc, #4	; (adr r2, 8001f24 <HAL_ADC_ConfigChannel+0x54>)
 8001f20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f24:	08001f35 	.word	0x08001f35
 8001f28:	08001f3d 	.word	0x08001f3d
 8001f2c:	08001f45 	.word	0x08001f45
 8001f30:	08001f4d 	.word	0x08001f4d
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	220c      	movs	r2, #12
 8001f38:	605a      	str	r2, [r3, #4]
          break;
 8001f3a:	e011      	b.n	8001f60 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	2212      	movs	r2, #18
 8001f40:	605a      	str	r2, [r3, #4]
          break;
 8001f42:	e00d      	b.n	8001f60 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	2218      	movs	r2, #24
 8001f48:	605a      	str	r2, [r3, #4]
          break;
 8001f4a:	e009      	b.n	8001f60 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f52:	605a      	str	r2, [r3, #4]
          break;
 8001f54:	e004      	b.n	8001f60 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	2206      	movs	r2, #6
 8001f5a:	605a      	str	r2, [r3, #4]
          break;
 8001f5c:	e000      	b.n	8001f60 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8001f5e:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6818      	ldr	r0, [r3, #0]
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	6859      	ldr	r1, [r3, #4]
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	461a      	mov	r2, r3
 8001f6e:	f7ff face 	bl	800150e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4618      	mov	r0, r3
 8001f78:	f7ff fbe1 	bl	800173e <LL_ADC_REG_IsConversionOngoing>
 8001f7c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4618      	mov	r0, r3
 8001f86:	f7ff fbed 	bl	8001764 <LL_ADC_INJ_IsConversionOngoing>
 8001f8a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001f8e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	f040 81c1 	bne.w	800231a <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001f98:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	f040 81bc 	bne.w	800231a <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	689b      	ldr	r3, [r3, #8]
 8001fa6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001faa:	d10f      	bne.n	8001fcc <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6818      	ldr	r0, [r3, #0]
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	4619      	mov	r1, r3
 8001fb8:	f7ff fae8 	bl	800158c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f7ff fa7c 	bl	80014c2 <LL_ADC_SetSamplingTimeCommonConfig>
 8001fca:	e00e      	b.n	8001fea <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6818      	ldr	r0, [r3, #0]
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	6819      	ldr	r1, [r3, #0]
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	689b      	ldr	r3, [r3, #8]
 8001fd8:	461a      	mov	r2, r3
 8001fda:	f7ff fad7 	bl	800158c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	2100      	movs	r1, #0
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f7ff fa6c 	bl	80014c2 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	695a      	ldr	r2, [r3, #20]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	68db      	ldr	r3, [r3, #12]
 8001ff4:	08db      	lsrs	r3, r3, #3
 8001ff6:	f003 0303 	and.w	r3, r3, #3
 8001ffa:	005b      	lsls	r3, r3, #1
 8001ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8002000:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	691b      	ldr	r3, [r3, #16]
 8002008:	2b04      	cmp	r3, #4
 800200a:	d00a      	beq.n	8002022 <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6818      	ldr	r0, [r3, #0]
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	6919      	ldr	r1, [r3, #16]
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	681a      	ldr	r2, [r3, #0]
 8002018:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800201c:	f7ff f9fc 	bl	8001418 <LL_ADC_SetOffset>
 8002020:	e17b      	b.n	800231a <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	2100      	movs	r1, #0
 8002028:	4618      	mov	r0, r3
 800202a:	f7ff fa19 	bl	8001460 <LL_ADC_GetOffsetChannel>
 800202e:	4603      	mov	r3, r0
 8002030:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002034:	2b00      	cmp	r3, #0
 8002036:	d10a      	bne.n	800204e <HAL_ADC_ConfigChannel+0x17e>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	2100      	movs	r1, #0
 800203e:	4618      	mov	r0, r3
 8002040:	f7ff fa0e 	bl	8001460 <LL_ADC_GetOffsetChannel>
 8002044:	4603      	mov	r3, r0
 8002046:	0e9b      	lsrs	r3, r3, #26
 8002048:	f003 021f 	and.w	r2, r3, #31
 800204c:	e01e      	b.n	800208c <HAL_ADC_ConfigChannel+0x1bc>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	2100      	movs	r1, #0
 8002054:	4618      	mov	r0, r3
 8002056:	f7ff fa03 	bl	8001460 <LL_ADC_GetOffsetChannel>
 800205a:	4603      	mov	r3, r0
 800205c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002060:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002064:	fa93 f3a3 	rbit	r3, r3
 8002068:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800206c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002070:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002074:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002078:	2b00      	cmp	r3, #0
 800207a:	d101      	bne.n	8002080 <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 800207c:	2320      	movs	r3, #32
 800207e:	e004      	b.n	800208a <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 8002080:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002084:	fab3 f383 	clz	r3, r3
 8002088:	b2db      	uxtb	r3, r3
 800208a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002094:	2b00      	cmp	r3, #0
 8002096:	d105      	bne.n	80020a4 <HAL_ADC_ConfigChannel+0x1d4>
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	0e9b      	lsrs	r3, r3, #26
 800209e:	f003 031f 	and.w	r3, r3, #31
 80020a2:	e018      	b.n	80020d6 <HAL_ADC_ConfigChannel+0x206>
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ac:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80020b0:	fa93 f3a3 	rbit	r3, r3
 80020b4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80020b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80020bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80020c0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d101      	bne.n	80020cc <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 80020c8:	2320      	movs	r3, #32
 80020ca:	e004      	b.n	80020d6 <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 80020cc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80020d0:	fab3 f383 	clz	r3, r3
 80020d4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80020d6:	429a      	cmp	r2, r3
 80020d8:	d106      	bne.n	80020e8 <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	2200      	movs	r2, #0
 80020e0:	2100      	movs	r1, #0
 80020e2:	4618      	mov	r0, r3
 80020e4:	f7ff f9d2 	bl	800148c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	2101      	movs	r1, #1
 80020ee:	4618      	mov	r0, r3
 80020f0:	f7ff f9b6 	bl	8001460 <LL_ADC_GetOffsetChannel>
 80020f4:	4603      	mov	r3, r0
 80020f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d10a      	bne.n	8002114 <HAL_ADC_ConfigChannel+0x244>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	2101      	movs	r1, #1
 8002104:	4618      	mov	r0, r3
 8002106:	f7ff f9ab 	bl	8001460 <LL_ADC_GetOffsetChannel>
 800210a:	4603      	mov	r3, r0
 800210c:	0e9b      	lsrs	r3, r3, #26
 800210e:	f003 021f 	and.w	r2, r3, #31
 8002112:	e01e      	b.n	8002152 <HAL_ADC_ConfigChannel+0x282>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	2101      	movs	r1, #1
 800211a:	4618      	mov	r0, r3
 800211c:	f7ff f9a0 	bl	8001460 <LL_ADC_GetOffsetChannel>
 8002120:	4603      	mov	r3, r0
 8002122:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002126:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800212a:	fa93 f3a3 	rbit	r3, r3
 800212e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002132:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002136:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800213a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800213e:	2b00      	cmp	r3, #0
 8002140:	d101      	bne.n	8002146 <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 8002142:	2320      	movs	r3, #32
 8002144:	e004      	b.n	8002150 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 8002146:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800214a:	fab3 f383 	clz	r3, r3
 800214e:	b2db      	uxtb	r3, r3
 8002150:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800215a:	2b00      	cmp	r3, #0
 800215c:	d105      	bne.n	800216a <HAL_ADC_ConfigChannel+0x29a>
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	0e9b      	lsrs	r3, r3, #26
 8002164:	f003 031f 	and.w	r3, r3, #31
 8002168:	e018      	b.n	800219c <HAL_ADC_ConfigChannel+0x2cc>
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002172:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002176:	fa93 f3a3 	rbit	r3, r3
 800217a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800217e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002182:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002186:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800218a:	2b00      	cmp	r3, #0
 800218c:	d101      	bne.n	8002192 <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 800218e:	2320      	movs	r3, #32
 8002190:	e004      	b.n	800219c <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 8002192:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002196:	fab3 f383 	clz	r3, r3
 800219a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800219c:	429a      	cmp	r2, r3
 800219e:	d106      	bne.n	80021ae <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	2200      	movs	r2, #0
 80021a6:	2101      	movs	r1, #1
 80021a8:	4618      	mov	r0, r3
 80021aa:	f7ff f96f 	bl	800148c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	2102      	movs	r1, #2
 80021b4:	4618      	mov	r0, r3
 80021b6:	f7ff f953 	bl	8001460 <LL_ADC_GetOffsetChannel>
 80021ba:	4603      	mov	r3, r0
 80021bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d10a      	bne.n	80021da <HAL_ADC_ConfigChannel+0x30a>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	2102      	movs	r1, #2
 80021ca:	4618      	mov	r0, r3
 80021cc:	f7ff f948 	bl	8001460 <LL_ADC_GetOffsetChannel>
 80021d0:	4603      	mov	r3, r0
 80021d2:	0e9b      	lsrs	r3, r3, #26
 80021d4:	f003 021f 	and.w	r2, r3, #31
 80021d8:	e01e      	b.n	8002218 <HAL_ADC_ConfigChannel+0x348>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	2102      	movs	r1, #2
 80021e0:	4618      	mov	r0, r3
 80021e2:	f7ff f93d 	bl	8001460 <LL_ADC_GetOffsetChannel>
 80021e6:	4603      	mov	r3, r0
 80021e8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80021f0:	fa93 f3a3 	rbit	r3, r3
 80021f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80021f8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80021fc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002200:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002204:	2b00      	cmp	r3, #0
 8002206:	d101      	bne.n	800220c <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 8002208:	2320      	movs	r3, #32
 800220a:	e004      	b.n	8002216 <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 800220c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002210:	fab3 f383 	clz	r3, r3
 8002214:	b2db      	uxtb	r3, r3
 8002216:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002220:	2b00      	cmp	r3, #0
 8002222:	d105      	bne.n	8002230 <HAL_ADC_ConfigChannel+0x360>
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	0e9b      	lsrs	r3, r3, #26
 800222a:	f003 031f 	and.w	r3, r3, #31
 800222e:	e016      	b.n	800225e <HAL_ADC_ConfigChannel+0x38e>
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002238:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800223c:	fa93 f3a3 	rbit	r3, r3
 8002240:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002242:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002244:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002248:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800224c:	2b00      	cmp	r3, #0
 800224e:	d101      	bne.n	8002254 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 8002250:	2320      	movs	r3, #32
 8002252:	e004      	b.n	800225e <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8002254:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002258:	fab3 f383 	clz	r3, r3
 800225c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800225e:	429a      	cmp	r2, r3
 8002260:	d106      	bne.n	8002270 <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	2200      	movs	r2, #0
 8002268:	2102      	movs	r1, #2
 800226a:	4618      	mov	r0, r3
 800226c:	f7ff f90e 	bl	800148c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	2103      	movs	r1, #3
 8002276:	4618      	mov	r0, r3
 8002278:	f7ff f8f2 	bl	8001460 <LL_ADC_GetOffsetChannel>
 800227c:	4603      	mov	r3, r0
 800227e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002282:	2b00      	cmp	r3, #0
 8002284:	d10a      	bne.n	800229c <HAL_ADC_ConfigChannel+0x3cc>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	2103      	movs	r1, #3
 800228c:	4618      	mov	r0, r3
 800228e:	f7ff f8e7 	bl	8001460 <LL_ADC_GetOffsetChannel>
 8002292:	4603      	mov	r3, r0
 8002294:	0e9b      	lsrs	r3, r3, #26
 8002296:	f003 021f 	and.w	r2, r3, #31
 800229a:	e017      	b.n	80022cc <HAL_ADC_ConfigChannel+0x3fc>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	2103      	movs	r1, #3
 80022a2:	4618      	mov	r0, r3
 80022a4:	f7ff f8dc 	bl	8001460 <LL_ADC_GetOffsetChannel>
 80022a8:	4603      	mov	r3, r0
 80022aa:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80022ae:	fa93 f3a3 	rbit	r3, r3
 80022b2:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80022b4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80022b6:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80022b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d101      	bne.n	80022c2 <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 80022be:	2320      	movs	r3, #32
 80022c0:	e003      	b.n	80022ca <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 80022c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80022c4:	fab3 f383 	clz	r3, r3
 80022c8:	b2db      	uxtb	r3, r3
 80022ca:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d105      	bne.n	80022e4 <HAL_ADC_ConfigChannel+0x414>
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	0e9b      	lsrs	r3, r3, #26
 80022de:	f003 031f 	and.w	r3, r3, #31
 80022e2:	e011      	b.n	8002308 <HAL_ADC_ConfigChannel+0x438>
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80022ec:	fa93 f3a3 	rbit	r3, r3
 80022f0:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80022f2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80022f4:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80022f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d101      	bne.n	8002300 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 80022fc:	2320      	movs	r3, #32
 80022fe:	e003      	b.n	8002308 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8002300:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002302:	fab3 f383 	clz	r3, r3
 8002306:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002308:	429a      	cmp	r2, r3
 800230a:	d106      	bne.n	800231a <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	2200      	movs	r2, #0
 8002312:	2103      	movs	r1, #3
 8002314:	4618      	mov	r0, r3
 8002316:	f7ff f8b9 	bl	800148c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4618      	mov	r0, r3
 8002320:	f7ff f9e6 	bl	80016f0 <LL_ADC_IsEnabled>
 8002324:	4603      	mov	r3, r0
 8002326:	2b00      	cmp	r3, #0
 8002328:	f040 8140 	bne.w	80025ac <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6818      	ldr	r0, [r3, #0]
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	6819      	ldr	r1, [r3, #0]
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	68db      	ldr	r3, [r3, #12]
 8002338:	461a      	mov	r2, r3
 800233a:	f7ff f953 	bl	80015e4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	68db      	ldr	r3, [r3, #12]
 8002342:	4a8f      	ldr	r2, [pc, #572]	; (8002580 <HAL_ADC_ConfigChannel+0x6b0>)
 8002344:	4293      	cmp	r3, r2
 8002346:	f040 8131 	bne.w	80025ac <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002356:	2b00      	cmp	r3, #0
 8002358:	d10b      	bne.n	8002372 <HAL_ADC_ConfigChannel+0x4a2>
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	0e9b      	lsrs	r3, r3, #26
 8002360:	3301      	adds	r3, #1
 8002362:	f003 031f 	and.w	r3, r3, #31
 8002366:	2b09      	cmp	r3, #9
 8002368:	bf94      	ite	ls
 800236a:	2301      	movls	r3, #1
 800236c:	2300      	movhi	r3, #0
 800236e:	b2db      	uxtb	r3, r3
 8002370:	e019      	b.n	80023a6 <HAL_ADC_ConfigChannel+0x4d6>
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002378:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800237a:	fa93 f3a3 	rbit	r3, r3
 800237e:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002380:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002382:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002384:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002386:	2b00      	cmp	r3, #0
 8002388:	d101      	bne.n	800238e <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 800238a:	2320      	movs	r3, #32
 800238c:	e003      	b.n	8002396 <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 800238e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002390:	fab3 f383 	clz	r3, r3
 8002394:	b2db      	uxtb	r3, r3
 8002396:	3301      	adds	r3, #1
 8002398:	f003 031f 	and.w	r3, r3, #31
 800239c:	2b09      	cmp	r3, #9
 800239e:	bf94      	ite	ls
 80023a0:	2301      	movls	r3, #1
 80023a2:	2300      	movhi	r3, #0
 80023a4:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d079      	beq.n	800249e <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d107      	bne.n	80023c6 <HAL_ADC_ConfigChannel+0x4f6>
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	0e9b      	lsrs	r3, r3, #26
 80023bc:	3301      	adds	r3, #1
 80023be:	069b      	lsls	r3, r3, #26
 80023c0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80023c4:	e015      	b.n	80023f2 <HAL_ADC_ConfigChannel+0x522>
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80023ce:	fa93 f3a3 	rbit	r3, r3
 80023d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80023d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023d6:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80023d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d101      	bne.n	80023e2 <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 80023de:	2320      	movs	r3, #32
 80023e0:	e003      	b.n	80023ea <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 80023e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023e4:	fab3 f383 	clz	r3, r3
 80023e8:	b2db      	uxtb	r3, r3
 80023ea:	3301      	adds	r3, #1
 80023ec:	069b      	lsls	r3, r3, #26
 80023ee:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d109      	bne.n	8002412 <HAL_ADC_ConfigChannel+0x542>
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	0e9b      	lsrs	r3, r3, #26
 8002404:	3301      	adds	r3, #1
 8002406:	f003 031f 	and.w	r3, r3, #31
 800240a:	2101      	movs	r1, #1
 800240c:	fa01 f303 	lsl.w	r3, r1, r3
 8002410:	e017      	b.n	8002442 <HAL_ADC_ConfigChannel+0x572>
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002418:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800241a:	fa93 f3a3 	rbit	r3, r3
 800241e:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002420:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002422:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002424:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002426:	2b00      	cmp	r3, #0
 8002428:	d101      	bne.n	800242e <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 800242a:	2320      	movs	r3, #32
 800242c:	e003      	b.n	8002436 <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 800242e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002430:	fab3 f383 	clz	r3, r3
 8002434:	b2db      	uxtb	r3, r3
 8002436:	3301      	adds	r3, #1
 8002438:	f003 031f 	and.w	r3, r3, #31
 800243c:	2101      	movs	r1, #1
 800243e:	fa01 f303 	lsl.w	r3, r1, r3
 8002442:	ea42 0103 	orr.w	r1, r2, r3
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800244e:	2b00      	cmp	r3, #0
 8002450:	d10a      	bne.n	8002468 <HAL_ADC_ConfigChannel+0x598>
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	0e9b      	lsrs	r3, r3, #26
 8002458:	3301      	adds	r3, #1
 800245a:	f003 021f 	and.w	r2, r3, #31
 800245e:	4613      	mov	r3, r2
 8002460:	005b      	lsls	r3, r3, #1
 8002462:	4413      	add	r3, r2
 8002464:	051b      	lsls	r3, r3, #20
 8002466:	e018      	b.n	800249a <HAL_ADC_ConfigChannel+0x5ca>
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800246e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002470:	fa93 f3a3 	rbit	r3, r3
 8002474:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002476:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002478:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800247a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800247c:	2b00      	cmp	r3, #0
 800247e:	d101      	bne.n	8002484 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 8002480:	2320      	movs	r3, #32
 8002482:	e003      	b.n	800248c <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 8002484:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002486:	fab3 f383 	clz	r3, r3
 800248a:	b2db      	uxtb	r3, r3
 800248c:	3301      	adds	r3, #1
 800248e:	f003 021f 	and.w	r2, r3, #31
 8002492:	4613      	mov	r3, r2
 8002494:	005b      	lsls	r3, r3, #1
 8002496:	4413      	add	r3, r2
 8002498:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800249a:	430b      	orrs	r3, r1
 800249c:	e081      	b.n	80025a2 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d107      	bne.n	80024ba <HAL_ADC_ConfigChannel+0x5ea>
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	0e9b      	lsrs	r3, r3, #26
 80024b0:	3301      	adds	r3, #1
 80024b2:	069b      	lsls	r3, r3, #26
 80024b4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80024b8:	e015      	b.n	80024e6 <HAL_ADC_ConfigChannel+0x616>
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024c2:	fa93 f3a3 	rbit	r3, r3
 80024c6:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80024c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024ca:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80024cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d101      	bne.n	80024d6 <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 80024d2:	2320      	movs	r3, #32
 80024d4:	e003      	b.n	80024de <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 80024d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024d8:	fab3 f383 	clz	r3, r3
 80024dc:	b2db      	uxtb	r3, r3
 80024de:	3301      	adds	r3, #1
 80024e0:	069b      	lsls	r3, r3, #26
 80024e2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d109      	bne.n	8002506 <HAL_ADC_ConfigChannel+0x636>
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	0e9b      	lsrs	r3, r3, #26
 80024f8:	3301      	adds	r3, #1
 80024fa:	f003 031f 	and.w	r3, r3, #31
 80024fe:	2101      	movs	r1, #1
 8002500:	fa01 f303 	lsl.w	r3, r1, r3
 8002504:	e017      	b.n	8002536 <HAL_ADC_ConfigChannel+0x666>
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800250c:	6a3b      	ldr	r3, [r7, #32]
 800250e:	fa93 f3a3 	rbit	r3, r3
 8002512:	61fb      	str	r3, [r7, #28]
  return result;
 8002514:	69fb      	ldr	r3, [r7, #28]
 8002516:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800251a:	2b00      	cmp	r3, #0
 800251c:	d101      	bne.n	8002522 <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 800251e:	2320      	movs	r3, #32
 8002520:	e003      	b.n	800252a <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 8002522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002524:	fab3 f383 	clz	r3, r3
 8002528:	b2db      	uxtb	r3, r3
 800252a:	3301      	adds	r3, #1
 800252c:	f003 031f 	and.w	r3, r3, #31
 8002530:	2101      	movs	r1, #1
 8002532:	fa01 f303 	lsl.w	r3, r1, r3
 8002536:	ea42 0103 	orr.w	r1, r2, r3
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002542:	2b00      	cmp	r3, #0
 8002544:	d10d      	bne.n	8002562 <HAL_ADC_ConfigChannel+0x692>
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	0e9b      	lsrs	r3, r3, #26
 800254c:	3301      	adds	r3, #1
 800254e:	f003 021f 	and.w	r2, r3, #31
 8002552:	4613      	mov	r3, r2
 8002554:	005b      	lsls	r3, r3, #1
 8002556:	4413      	add	r3, r2
 8002558:	3b1e      	subs	r3, #30
 800255a:	051b      	lsls	r3, r3, #20
 800255c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002560:	e01e      	b.n	80025a0 <HAL_ADC_ConfigChannel+0x6d0>
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	fa93 f3a3 	rbit	r3, r3
 800256e:	613b      	str	r3, [r7, #16]
  return result;
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002574:	69bb      	ldr	r3, [r7, #24]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d104      	bne.n	8002584 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 800257a:	2320      	movs	r3, #32
 800257c:	e006      	b.n	800258c <HAL_ADC_ConfigChannel+0x6bc>
 800257e:	bf00      	nop
 8002580:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002584:	69bb      	ldr	r3, [r7, #24]
 8002586:	fab3 f383 	clz	r3, r3
 800258a:	b2db      	uxtb	r3, r3
 800258c:	3301      	adds	r3, #1
 800258e:	f003 021f 	and.w	r2, r3, #31
 8002592:	4613      	mov	r3, r2
 8002594:	005b      	lsls	r3, r3, #1
 8002596:	4413      	add	r3, r2
 8002598:	3b1e      	subs	r3, #30
 800259a:	051b      	lsls	r3, r3, #20
 800259c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80025a0:	430b      	orrs	r3, r1
 80025a2:	683a      	ldr	r2, [r7, #0]
 80025a4:	6892      	ldr	r2, [r2, #8]
 80025a6:	4619      	mov	r1, r3
 80025a8:	f7fe fff0 	bl	800158c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	681a      	ldr	r2, [r3, #0]
 80025b0:	4b3d      	ldr	r3, [pc, #244]	; (80026a8 <HAL_ADC_ConfigChannel+0x7d8>)
 80025b2:	4013      	ands	r3, r2
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d06c      	beq.n	8002692 <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80025b8:	483c      	ldr	r0, [pc, #240]	; (80026ac <HAL_ADC_ConfigChannel+0x7dc>)
 80025ba:	f7fe ff1f 	bl	80013fc <LL_ADC_GetCommonPathInternalCh>
 80025be:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a3a      	ldr	r2, [pc, #232]	; (80026b0 <HAL_ADC_ConfigChannel+0x7e0>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d127      	bne.n	800261c <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80025cc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80025d0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d121      	bne.n	800261c <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a35      	ldr	r2, [pc, #212]	; (80026b4 <HAL_ADC_ConfigChannel+0x7e4>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d157      	bne.n	8002692 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80025e2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80025e6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80025ea:	4619      	mov	r1, r3
 80025ec:	482f      	ldr	r0, [pc, #188]	; (80026ac <HAL_ADC_ConfigChannel+0x7dc>)
 80025ee:	f7fe fef2 	bl	80013d6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80025f2:	4b31      	ldr	r3, [pc, #196]	; (80026b8 <HAL_ADC_ConfigChannel+0x7e8>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	099b      	lsrs	r3, r3, #6
 80025f8:	4a30      	ldr	r2, [pc, #192]	; (80026bc <HAL_ADC_ConfigChannel+0x7ec>)
 80025fa:	fba2 2303 	umull	r2, r3, r2, r3
 80025fe:	099b      	lsrs	r3, r3, #6
 8002600:	1c5a      	adds	r2, r3, #1
 8002602:	4613      	mov	r3, r2
 8002604:	005b      	lsls	r3, r3, #1
 8002606:	4413      	add	r3, r2
 8002608:	009b      	lsls	r3, r3, #2
 800260a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800260c:	e002      	b.n	8002614 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	3b01      	subs	r3, #1
 8002612:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d1f9      	bne.n	800260e <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800261a:	e03a      	b.n	8002692 <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a27      	ldr	r2, [pc, #156]	; (80026c0 <HAL_ADC_ConfigChannel+0x7f0>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d113      	bne.n	800264e <HAL_ADC_ConfigChannel+0x77e>
 8002626:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800262a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800262e:	2b00      	cmp	r3, #0
 8002630:	d10d      	bne.n	800264e <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a1f      	ldr	r2, [pc, #124]	; (80026b4 <HAL_ADC_ConfigChannel+0x7e4>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d12a      	bne.n	8002692 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800263c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002640:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002644:	4619      	mov	r1, r3
 8002646:	4819      	ldr	r0, [pc, #100]	; (80026ac <HAL_ADC_ConfigChannel+0x7dc>)
 8002648:	f7fe fec5 	bl	80013d6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800264c:	e021      	b.n	8002692 <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a1c      	ldr	r2, [pc, #112]	; (80026c4 <HAL_ADC_ConfigChannel+0x7f4>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d11c      	bne.n	8002692 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002658:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800265c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002660:	2b00      	cmp	r3, #0
 8002662:	d116      	bne.n	8002692 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a12      	ldr	r2, [pc, #72]	; (80026b4 <HAL_ADC_ConfigChannel+0x7e4>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d111      	bne.n	8002692 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800266e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002672:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002676:	4619      	mov	r1, r3
 8002678:	480c      	ldr	r0, [pc, #48]	; (80026ac <HAL_ADC_ConfigChannel+0x7dc>)
 800267a:	f7fe feac 	bl	80013d6 <LL_ADC_SetCommonPathInternalCh>
 800267e:	e008      	b.n	8002692 <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002684:	f043 0220 	orr.w	r2, r3, #32
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800268c:	2301      	movs	r3, #1
 800268e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2200      	movs	r2, #0
 8002696:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 800269a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800269e:	4618      	mov	r0, r3
 80026a0:	37d8      	adds	r7, #216	; 0xd8
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}
 80026a6:	bf00      	nop
 80026a8:	80080000 	.word	0x80080000
 80026ac:	50040300 	.word	0x50040300
 80026b0:	c7520000 	.word	0xc7520000
 80026b4:	50040000 	.word	0x50040000
 80026b8:	20000000 	.word	0x20000000
 80026bc:	053e2d63 	.word	0x053e2d63
 80026c0:	cb840000 	.word	0xcb840000
 80026c4:	80000001 	.word	0x80000001

080026c8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b084      	sub	sp, #16
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80026d0:	2300      	movs	r3, #0
 80026d2:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4618      	mov	r0, r3
 80026da:	f7ff f809 	bl	80016f0 <LL_ADC_IsEnabled>
 80026de:	4603      	mov	r3, r0
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d169      	bne.n	80027b8 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	689a      	ldr	r2, [r3, #8]
 80026ea:	4b36      	ldr	r3, [pc, #216]	; (80027c4 <ADC_Enable+0xfc>)
 80026ec:	4013      	ands	r3, r2
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d00d      	beq.n	800270e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026f6:	f043 0210 	orr.w	r2, r3, #16
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002702:	f043 0201 	orr.w	r2, r3, #1
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800270a:	2301      	movs	r3, #1
 800270c:	e055      	b.n	80027ba <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4618      	mov	r0, r3
 8002714:	f7fe ffd8 	bl	80016c8 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002718:	482b      	ldr	r0, [pc, #172]	; (80027c8 <ADC_Enable+0x100>)
 800271a:	f7fe fe6f 	bl	80013fc <LL_ADC_GetCommonPathInternalCh>
 800271e:	4603      	mov	r3, r0
 8002720:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002724:	2b00      	cmp	r3, #0
 8002726:	d013      	beq.n	8002750 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002728:	4b28      	ldr	r3, [pc, #160]	; (80027cc <ADC_Enable+0x104>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	099b      	lsrs	r3, r3, #6
 800272e:	4a28      	ldr	r2, [pc, #160]	; (80027d0 <ADC_Enable+0x108>)
 8002730:	fba2 2303 	umull	r2, r3, r2, r3
 8002734:	099b      	lsrs	r3, r3, #6
 8002736:	1c5a      	adds	r2, r3, #1
 8002738:	4613      	mov	r3, r2
 800273a:	005b      	lsls	r3, r3, #1
 800273c:	4413      	add	r3, r2
 800273e:	009b      	lsls	r3, r3, #2
 8002740:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8002742:	e002      	b.n	800274a <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	3b01      	subs	r3, #1
 8002748:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d1f9      	bne.n	8002744 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002750:	f7fe fdfe 	bl	8001350 <HAL_GetTick>
 8002754:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002756:	e028      	b.n	80027aa <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4618      	mov	r0, r3
 800275e:	f7fe ffc7 	bl	80016f0 <LL_ADC_IsEnabled>
 8002762:	4603      	mov	r3, r0
 8002764:	2b00      	cmp	r3, #0
 8002766:	d104      	bne.n	8002772 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4618      	mov	r0, r3
 800276e:	f7fe ffab 	bl	80016c8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002772:	f7fe fded 	bl	8001350 <HAL_GetTick>
 8002776:	4602      	mov	r2, r0
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	1ad3      	subs	r3, r2, r3
 800277c:	2b02      	cmp	r3, #2
 800277e:	d914      	bls.n	80027aa <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f003 0301 	and.w	r3, r3, #1
 800278a:	2b01      	cmp	r3, #1
 800278c:	d00d      	beq.n	80027aa <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002792:	f043 0210 	orr.w	r2, r3, #16
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800279e:	f043 0201 	orr.w	r2, r3, #1
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
 80027a8:	e007      	b.n	80027ba <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f003 0301 	and.w	r3, r3, #1
 80027b4:	2b01      	cmp	r3, #1
 80027b6:	d1cf      	bne.n	8002758 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80027b8:	2300      	movs	r3, #0
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	3710      	adds	r7, #16
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}
 80027c2:	bf00      	nop
 80027c4:	8000003f 	.word	0x8000003f
 80027c8:	50040300 	.word	0x50040300
 80027cc:	20000000 	.word	0x20000000
 80027d0:	053e2d63 	.word	0x053e2d63

080027d4 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b084      	sub	sp, #16
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027e0:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027e6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d14b      	bne.n	8002886 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027f2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	659a      	str	r2, [r3, #88]	; 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f003 0308 	and.w	r3, r3, #8
 8002804:	2b00      	cmp	r3, #0
 8002806:	d021      	beq.n	800284c <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4618      	mov	r0, r3
 800280e:	f7fe fe6b 	bl	80014e8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002812:	4603      	mov	r3, r0
 8002814:	2b00      	cmp	r3, #0
 8002816:	d032      	beq.n	800287e <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	68db      	ldr	r3, [r3, #12]
 800281e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002822:	2b00      	cmp	r3, #0
 8002824:	d12b      	bne.n	800287e <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800282a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	659a      	str	r2, [r3, #88]	; 0x58
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002836:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800283a:	2b00      	cmp	r3, #0
 800283c:	d11f      	bne.n	800287e <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002842:	f043 0201 	orr.w	r2, r3, #1
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	659a      	str	r2, [r3, #88]	; 0x58
 800284a:	e018      	b.n	800287e <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	68db      	ldr	r3, [r3, #12]
 8002852:	f003 0302 	and.w	r3, r3, #2
 8002856:	2b00      	cmp	r3, #0
 8002858:	d111      	bne.n	800287e <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800285e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	659a      	str	r2, [r3, #88]	; 0x58
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800286a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800286e:	2b00      	cmp	r3, #0
 8002870:	d105      	bne.n	800287e <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002876:	f043 0201 	orr.w	r2, r3, #1
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800287e:	68f8      	ldr	r0, [r7, #12]
 8002880:	f7fd fcde 	bl	8000240 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002884:	e00e      	b.n	80028a4 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800288a:	f003 0310 	and.w	r3, r3, #16
 800288e:	2b00      	cmp	r3, #0
 8002890:	d003      	beq.n	800289a <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002892:	68f8      	ldr	r0, [r7, #12]
 8002894:	f7ff fb12 	bl	8001ebc <HAL_ADC_ErrorCallback>
}
 8002898:	e004      	b.n	80028a4 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800289e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028a0:	6878      	ldr	r0, [r7, #4]
 80028a2:	4798      	blx	r3
}
 80028a4:	bf00      	nop
 80028a6:	3710      	adds	r7, #16
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}

080028ac <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b084      	sub	sp, #16
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028b8:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80028ba:	68f8      	ldr	r0, [r7, #12]
 80028bc:	f7ff faea 	bl	8001e94 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80028c0:	bf00      	nop
 80028c2:	3710      	adds	r7, #16
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}

080028c8 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b084      	sub	sp, #16
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028d4:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028da:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028e6:	f043 0204 	orr.w	r2, r3, #4
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80028ee:	68f8      	ldr	r0, [r7, #12]
 80028f0:	f7ff fae4 	bl	8001ebc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80028f4:	bf00      	nop
 80028f6:	3710      	adds	r7, #16
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bd80      	pop	{r7, pc}

080028fc <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b083      	sub	sp, #12
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8002904:	bf00      	nop
 8002906:	370c      	adds	r7, #12
 8002908:	46bd      	mov	sp, r7
 800290a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290e:	4770      	bx	lr

08002910 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8002910:	b480      	push	{r7}
 8002912:	b083      	sub	sp, #12
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8002918:	bf00      	nop
 800291a:	370c      	adds	r7, #12
 800291c:	46bd      	mov	sp, r7
 800291e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002922:	4770      	bx	lr

08002924 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8002924:	b480      	push	{r7}
 8002926:	b083      	sub	sp, #12
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 800292c:	bf00      	nop
 800292e:	370c      	adds	r7, #12
 8002930:	46bd      	mov	sp, r7
 8002932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002936:	4770      	bx	lr

08002938 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8002938:	b480      	push	{r7}
 800293a:	b083      	sub	sp, #12
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8002940:	bf00      	nop
 8002942:	370c      	adds	r7, #12
 8002944:	46bd      	mov	sp, r7
 8002946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294a:	4770      	bx	lr

0800294c <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 800294c:	b480      	push	{r7}
 800294e:	b083      	sub	sp, #12
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8002954:	bf00      	nop
 8002956:	370c      	adds	r7, #12
 8002958:	46bd      	mov	sp, r7
 800295a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295e:	4770      	bx	lr

08002960 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b084      	sub	sp, #16
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d101      	bne.n	8002972 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	e0ed      	b.n	8002b4e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002978:	b2db      	uxtb	r3, r3
 800297a:	2b00      	cmp	r3, #0
 800297c:	d102      	bne.n	8002984 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800297e:	6878      	ldr	r0, [r7, #4]
 8002980:	f7fe fae2 	bl	8000f48 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	681a      	ldr	r2, [r3, #0]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f042 0201 	orr.w	r2, r2, #1
 8002992:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002994:	f7fe fcdc 	bl	8001350 <HAL_GetTick>
 8002998:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800299a:	e012      	b.n	80029c2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800299c:	f7fe fcd8 	bl	8001350 <HAL_GetTick>
 80029a0:	4602      	mov	r2, r0
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	1ad3      	subs	r3, r2, r3
 80029a6:	2b0a      	cmp	r3, #10
 80029a8:	d90b      	bls.n	80029c2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ae:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2205      	movs	r2, #5
 80029ba:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80029be:	2301      	movs	r3, #1
 80029c0:	e0c5      	b.n	8002b4e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	f003 0301 	and.w	r3, r3, #1
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d0e5      	beq.n	800299c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	681a      	ldr	r2, [r3, #0]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f022 0202 	bic.w	r2, r2, #2
 80029de:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80029e0:	f7fe fcb6 	bl	8001350 <HAL_GetTick>
 80029e4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80029e6:	e012      	b.n	8002a0e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80029e8:	f7fe fcb2 	bl	8001350 <HAL_GetTick>
 80029ec:	4602      	mov	r2, r0
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	1ad3      	subs	r3, r2, r3
 80029f2:	2b0a      	cmp	r3, #10
 80029f4:	d90b      	bls.n	8002a0e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029fa:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2205      	movs	r2, #5
 8002a06:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e09f      	b.n	8002b4e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	f003 0302 	and.w	r3, r3, #2
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d1e5      	bne.n	80029e8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	7e1b      	ldrb	r3, [r3, #24]
 8002a20:	2b01      	cmp	r3, #1
 8002a22:	d108      	bne.n	8002a36 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	681a      	ldr	r2, [r3, #0]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002a32:	601a      	str	r2, [r3, #0]
 8002a34:	e007      	b.n	8002a46 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	681a      	ldr	r2, [r3, #0]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002a44:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	7e5b      	ldrb	r3, [r3, #25]
 8002a4a:	2b01      	cmp	r3, #1
 8002a4c:	d108      	bne.n	8002a60 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	681a      	ldr	r2, [r3, #0]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a5c:	601a      	str	r2, [r3, #0]
 8002a5e:	e007      	b.n	8002a70 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	681a      	ldr	r2, [r3, #0]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a6e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	7e9b      	ldrb	r3, [r3, #26]
 8002a74:	2b01      	cmp	r3, #1
 8002a76:	d108      	bne.n	8002a8a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	681a      	ldr	r2, [r3, #0]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f042 0220 	orr.w	r2, r2, #32
 8002a86:	601a      	str	r2, [r3, #0]
 8002a88:	e007      	b.n	8002a9a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	681a      	ldr	r2, [r3, #0]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f022 0220 	bic.w	r2, r2, #32
 8002a98:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	7edb      	ldrb	r3, [r3, #27]
 8002a9e:	2b01      	cmp	r3, #1
 8002aa0:	d108      	bne.n	8002ab4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	681a      	ldr	r2, [r3, #0]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f022 0210 	bic.w	r2, r2, #16
 8002ab0:	601a      	str	r2, [r3, #0]
 8002ab2:	e007      	b.n	8002ac4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f042 0210 	orr.w	r2, r2, #16
 8002ac2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	7f1b      	ldrb	r3, [r3, #28]
 8002ac8:	2b01      	cmp	r3, #1
 8002aca:	d108      	bne.n	8002ade <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f042 0208 	orr.w	r2, r2, #8
 8002ada:	601a      	str	r2, [r3, #0]
 8002adc:	e007      	b.n	8002aee <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	681a      	ldr	r2, [r3, #0]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f022 0208 	bic.w	r2, r2, #8
 8002aec:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	7f5b      	ldrb	r3, [r3, #29]
 8002af2:	2b01      	cmp	r3, #1
 8002af4:	d108      	bne.n	8002b08 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	681a      	ldr	r2, [r3, #0]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f042 0204 	orr.w	r2, r2, #4
 8002b04:	601a      	str	r2, [r3, #0]
 8002b06:	e007      	b.n	8002b18 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	681a      	ldr	r2, [r3, #0]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f022 0204 	bic.w	r2, r2, #4
 8002b16:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	689a      	ldr	r2, [r3, #8]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	68db      	ldr	r3, [r3, #12]
 8002b20:	431a      	orrs	r2, r3
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	691b      	ldr	r3, [r3, #16]
 8002b26:	431a      	orrs	r2, r3
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	695b      	ldr	r3, [r3, #20]
 8002b2c:	ea42 0103 	orr.w	r1, r2, r3
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	1e5a      	subs	r2, r3, #1
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	430a      	orrs	r2, r1
 8002b3c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2200      	movs	r2, #0
 8002b42:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2201      	movs	r2, #1
 8002b48:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002b4c:	2300      	movs	r3, #0
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	3710      	adds	r7, #16
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}

08002b56 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8002b56:	b480      	push	{r7}
 8002b58:	b087      	sub	sp, #28
 8002b5a:	af00      	add	r7, sp, #0
 8002b5c:	6078      	str	r0, [r7, #4]
 8002b5e:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b6c:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002b6e:	7cfb      	ldrb	r3, [r7, #19]
 8002b70:	2b01      	cmp	r3, #1
 8002b72:	d003      	beq.n	8002b7c <HAL_CAN_ConfigFilter+0x26>
 8002b74:	7cfb      	ldrb	r3, [r7, #19]
 8002b76:	2b02      	cmp	r3, #2
 8002b78:	f040 80aa 	bne.w	8002cd0 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002b82:	f043 0201 	orr.w	r2, r3, #1
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	695b      	ldr	r3, [r3, #20]
 8002b90:	f003 031f 	and.w	r3, r3, #31
 8002b94:	2201      	movs	r2, #1
 8002b96:	fa02 f303 	lsl.w	r3, r2, r3
 8002b9a:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	43db      	mvns	r3, r3
 8002ba6:	401a      	ands	r2, r3
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	69db      	ldr	r3, [r3, #28]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d123      	bne.n	8002bfe <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002bb6:	697b      	ldr	r3, [r7, #20]
 8002bb8:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	43db      	mvns	r3, r3
 8002bc0:	401a      	ands	r2, r3
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	68db      	ldr	r3, [r3, #12]
 8002bcc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002bd4:	683a      	ldr	r2, [r7, #0]
 8002bd6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002bd8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	3248      	adds	r2, #72	; 0x48
 8002bde:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	689b      	ldr	r3, [r3, #8]
 8002be6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002bf2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002bf4:	6979      	ldr	r1, [r7, #20]
 8002bf6:	3348      	adds	r3, #72	; 0x48
 8002bf8:	00db      	lsls	r3, r3, #3
 8002bfa:	440b      	add	r3, r1
 8002bfc:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	69db      	ldr	r3, [r3, #28]
 8002c02:	2b01      	cmp	r3, #1
 8002c04:	d122      	bne.n	8002c4c <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	431a      	orrs	r2, r3
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002c22:	683a      	ldr	r2, [r7, #0]
 8002c24:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002c26:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	3248      	adds	r2, #72	; 0x48
 8002c2c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	689b      	ldr	r3, [r3, #8]
 8002c34:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	68db      	ldr	r3, [r3, #12]
 8002c3a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002c40:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002c42:	6979      	ldr	r1, [r7, #20]
 8002c44:	3348      	adds	r3, #72	; 0x48
 8002c46:	00db      	lsls	r3, r3, #3
 8002c48:	440b      	add	r3, r1
 8002c4a:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	699b      	ldr	r3, [r3, #24]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d109      	bne.n	8002c68 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	43db      	mvns	r3, r3
 8002c5e:	401a      	ands	r2, r3
 8002c60:	697b      	ldr	r3, [r7, #20]
 8002c62:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002c66:	e007      	b.n	8002c78 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	431a      	orrs	r2, r3
 8002c72:	697b      	ldr	r3, [r7, #20]
 8002c74:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	691b      	ldr	r3, [r3, #16]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d109      	bne.n	8002c94 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002c80:	697b      	ldr	r3, [r7, #20]
 8002c82:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	43db      	mvns	r3, r3
 8002c8a:	401a      	ands	r2, r3
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8002c92:	e007      	b.n	8002ca4 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002c94:	697b      	ldr	r3, [r7, #20]
 8002c96:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	431a      	orrs	r2, r3
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	6a1b      	ldr	r3, [r3, #32]
 8002ca8:	2b01      	cmp	r3, #1
 8002caa:	d107      	bne.n	8002cbc <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	431a      	orrs	r2, r3
 8002cb6:	697b      	ldr	r3, [r7, #20]
 8002cb8:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002cbc:	697b      	ldr	r3, [r7, #20]
 8002cbe:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002cc2:	f023 0201 	bic.w	r2, r3, #1
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	e006      	b.n	8002cde <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002cdc:	2301      	movs	r3, #1
  }
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	371c      	adds	r7, #28
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce8:	4770      	bx	lr

08002cea <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002cea:	b580      	push	{r7, lr}
 8002cec:	b084      	sub	sp, #16
 8002cee:	af00      	add	r7, sp, #0
 8002cf0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002cf8:	b2db      	uxtb	r3, r3
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	d12e      	bne.n	8002d5c <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2202      	movs	r2, #2
 8002d02:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	681a      	ldr	r2, [r3, #0]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f022 0201 	bic.w	r2, r2, #1
 8002d14:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002d16:	f7fe fb1b 	bl	8001350 <HAL_GetTick>
 8002d1a:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002d1c:	e012      	b.n	8002d44 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002d1e:	f7fe fb17 	bl	8001350 <HAL_GetTick>
 8002d22:	4602      	mov	r2, r0
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	1ad3      	subs	r3, r2, r3
 8002d28:	2b0a      	cmp	r3, #10
 8002d2a:	d90b      	bls.n	8002d44 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d30:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2205      	movs	r2, #5
 8002d3c:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002d40:	2301      	movs	r3, #1
 8002d42:	e012      	b.n	8002d6a <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	f003 0301 	and.w	r3, r3, #1
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d1e5      	bne.n	8002d1e <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2200      	movs	r2, #0
 8002d56:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	e006      	b.n	8002d6a <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d60:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002d68:	2301      	movs	r3, #1
  }
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	3710      	adds	r7, #16
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}

08002d72 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002d72:	b480      	push	{r7}
 8002d74:	b087      	sub	sp, #28
 8002d76:	af00      	add	r7, sp, #0
 8002d78:	60f8      	str	r0, [r7, #12]
 8002d7a:	60b9      	str	r1, [r7, #8]
 8002d7c:	607a      	str	r2, [r7, #4]
 8002d7e:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d86:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002d88:	7dfb      	ldrb	r3, [r7, #23]
 8002d8a:	2b01      	cmp	r3, #1
 8002d8c:	d003      	beq.n	8002d96 <HAL_CAN_GetRxMessage+0x24>
 8002d8e:	7dfb      	ldrb	r3, [r7, #23]
 8002d90:	2b02      	cmp	r3, #2
 8002d92:	f040 80f3 	bne.w	8002f7c <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d10e      	bne.n	8002dba <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	68db      	ldr	r3, [r3, #12]
 8002da2:	f003 0303 	and.w	r3, r3, #3
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d116      	bne.n	8002dd8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dae:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	e0e7      	b.n	8002f8a <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	691b      	ldr	r3, [r3, #16]
 8002dc0:	f003 0303 	and.w	r3, r3, #3
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d107      	bne.n	8002dd8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dcc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	e0d8      	b.n	8002f8a <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681a      	ldr	r2, [r3, #0]
 8002ddc:	68bb      	ldr	r3, [r7, #8]
 8002dde:	331b      	adds	r3, #27
 8002de0:	011b      	lsls	r3, r3, #4
 8002de2:	4413      	add	r3, r2
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 0204 	and.w	r2, r3, #4
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	689b      	ldr	r3, [r3, #8]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d10c      	bne.n	8002e10 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681a      	ldr	r2, [r3, #0]
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	331b      	adds	r3, #27
 8002dfe:	011b      	lsls	r3, r3, #4
 8002e00:	4413      	add	r3, r2
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	0d5b      	lsrs	r3, r3, #21
 8002e06:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	601a      	str	r2, [r3, #0]
 8002e0e:	e00b      	b.n	8002e28 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	331b      	adds	r3, #27
 8002e18:	011b      	lsls	r3, r3, #4
 8002e1a:	4413      	add	r3, r2
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	08db      	lsrs	r3, r3, #3
 8002e20:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681a      	ldr	r2, [r3, #0]
 8002e2c:	68bb      	ldr	r3, [r7, #8]
 8002e2e:	331b      	adds	r3, #27
 8002e30:	011b      	lsls	r3, r3, #4
 8002e32:	4413      	add	r3, r2
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f003 0202 	and.w	r2, r3, #2
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681a      	ldr	r2, [r3, #0]
 8002e42:	68bb      	ldr	r3, [r7, #8]
 8002e44:	331b      	adds	r3, #27
 8002e46:	011b      	lsls	r3, r3, #4
 8002e48:	4413      	add	r3, r2
 8002e4a:	3304      	adds	r3, #4
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f003 020f 	and.w	r2, r3, #15
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681a      	ldr	r2, [r3, #0]
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	331b      	adds	r3, #27
 8002e5e:	011b      	lsls	r3, r3, #4
 8002e60:	4413      	add	r3, r2
 8002e62:	3304      	adds	r3, #4
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	0a1b      	lsrs	r3, r3, #8
 8002e68:	b2da      	uxtb	r2, r3
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681a      	ldr	r2, [r3, #0]
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	331b      	adds	r3, #27
 8002e76:	011b      	lsls	r3, r3, #4
 8002e78:	4413      	add	r3, r2
 8002e7a:	3304      	adds	r3, #4
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	0c1b      	lsrs	r3, r3, #16
 8002e80:	b29a      	uxth	r2, r3
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681a      	ldr	r2, [r3, #0]
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	011b      	lsls	r3, r3, #4
 8002e8e:	4413      	add	r3, r2
 8002e90:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	b2da      	uxtb	r2, r3
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681a      	ldr	r2, [r3, #0]
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	011b      	lsls	r3, r3, #4
 8002ea4:	4413      	add	r3, r2
 8002ea6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	0a1a      	lsrs	r2, r3, #8
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	3301      	adds	r3, #1
 8002eb2:	b2d2      	uxtb	r2, r2
 8002eb4:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681a      	ldr	r2, [r3, #0]
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	011b      	lsls	r3, r3, #4
 8002ebe:	4413      	add	r3, r2
 8002ec0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	0c1a      	lsrs	r2, r3, #16
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	3302      	adds	r3, #2
 8002ecc:	b2d2      	uxtb	r2, r2
 8002ece:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681a      	ldr	r2, [r3, #0]
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	011b      	lsls	r3, r3, #4
 8002ed8:	4413      	add	r3, r2
 8002eda:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	0e1a      	lsrs	r2, r3, #24
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	3303      	adds	r3, #3
 8002ee6:	b2d2      	uxtb	r2, r2
 8002ee8:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681a      	ldr	r2, [r3, #0]
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	011b      	lsls	r3, r3, #4
 8002ef2:	4413      	add	r3, r2
 8002ef4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002ef8:	681a      	ldr	r2, [r3, #0]
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	3304      	adds	r3, #4
 8002efe:	b2d2      	uxtb	r2, r2
 8002f00:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681a      	ldr	r2, [r3, #0]
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	011b      	lsls	r3, r3, #4
 8002f0a:	4413      	add	r3, r2
 8002f0c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	0a1a      	lsrs	r2, r3, #8
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	3305      	adds	r3, #5
 8002f18:	b2d2      	uxtb	r2, r2
 8002f1a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681a      	ldr	r2, [r3, #0]
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	011b      	lsls	r3, r3, #4
 8002f24:	4413      	add	r3, r2
 8002f26:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	0c1a      	lsrs	r2, r3, #16
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	3306      	adds	r3, #6
 8002f32:	b2d2      	uxtb	r2, r2
 8002f34:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681a      	ldr	r2, [r3, #0]
 8002f3a:	68bb      	ldr	r3, [r7, #8]
 8002f3c:	011b      	lsls	r3, r3, #4
 8002f3e:	4413      	add	r3, r2
 8002f40:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	0e1a      	lsrs	r2, r3, #24
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	3307      	adds	r3, #7
 8002f4c:	b2d2      	uxtb	r2, r2
 8002f4e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d108      	bne.n	8002f68 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	68da      	ldr	r2, [r3, #12]
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f042 0220 	orr.w	r2, r2, #32
 8002f64:	60da      	str	r2, [r3, #12]
 8002f66:	e007      	b.n	8002f78 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	691a      	ldr	r2, [r3, #16]
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f042 0220 	orr.w	r2, r2, #32
 8002f76:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002f78:	2300      	movs	r3, #0
 8002f7a:	e006      	b.n	8002f8a <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f80:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002f88:	2301      	movs	r3, #1
  }
}
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	371c      	adds	r7, #28
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f94:	4770      	bx	lr

08002f96 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002f96:	b480      	push	{r7}
 8002f98:	b085      	sub	sp, #20
 8002f9a:	af00      	add	r7, sp, #0
 8002f9c:	6078      	str	r0, [r7, #4]
 8002f9e:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002fa6:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002fa8:	7bfb      	ldrb	r3, [r7, #15]
 8002faa:	2b01      	cmp	r3, #1
 8002fac:	d002      	beq.n	8002fb4 <HAL_CAN_ActivateNotification+0x1e>
 8002fae:	7bfb      	ldrb	r3, [r7, #15]
 8002fb0:	2b02      	cmp	r3, #2
 8002fb2:	d109      	bne.n	8002fc8 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	6959      	ldr	r1, [r3, #20]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	683a      	ldr	r2, [r7, #0]
 8002fc0:	430a      	orrs	r2, r1
 8002fc2:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	e006      	b.n	8002fd6 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fcc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002fd4:	2301      	movs	r3, #1
  }
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	3714      	adds	r7, #20
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe0:	4770      	bx	lr

08002fe2 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002fe2:	b580      	push	{r7, lr}
 8002fe4:	b08a      	sub	sp, #40	; 0x28
 8002fe6:	af00      	add	r7, sp, #0
 8002fe8:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002fea:	2300      	movs	r3, #0
 8002fec:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	695b      	ldr	r3, [r3, #20]
 8002ff4:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	689b      	ldr	r3, [r3, #8]
 8003004:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	68db      	ldr	r3, [r3, #12]
 800300c:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	691b      	ldr	r3, [r3, #16]
 8003014:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	699b      	ldr	r3, [r3, #24]
 800301c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800301e:	6a3b      	ldr	r3, [r7, #32]
 8003020:	f003 0301 	and.w	r3, r3, #1
 8003024:	2b00      	cmp	r3, #0
 8003026:	d07c      	beq.n	8003122 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003028:	69bb      	ldr	r3, [r7, #24]
 800302a:	f003 0301 	and.w	r3, r3, #1
 800302e:	2b00      	cmp	r3, #0
 8003030:	d023      	beq.n	800307a <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	2201      	movs	r2, #1
 8003038:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800303a:	69bb      	ldr	r3, [r7, #24]
 800303c:	f003 0302 	and.w	r3, r3, #2
 8003040:	2b00      	cmp	r3, #0
 8003042:	d003      	beq.n	800304c <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003044:	6878      	ldr	r0, [r7, #4]
 8003046:	f000 f983 	bl	8003350 <HAL_CAN_TxMailbox0CompleteCallback>
 800304a:	e016      	b.n	800307a <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800304c:	69bb      	ldr	r3, [r7, #24]
 800304e:	f003 0304 	and.w	r3, r3, #4
 8003052:	2b00      	cmp	r3, #0
 8003054:	d004      	beq.n	8003060 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003058:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800305c:	627b      	str	r3, [r7, #36]	; 0x24
 800305e:	e00c      	b.n	800307a <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003060:	69bb      	ldr	r3, [r7, #24]
 8003062:	f003 0308 	and.w	r3, r3, #8
 8003066:	2b00      	cmp	r3, #0
 8003068:	d004      	beq.n	8003074 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800306a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800306c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003070:	627b      	str	r3, [r7, #36]	; 0x24
 8003072:	e002      	b.n	800307a <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003074:	6878      	ldr	r0, [r7, #4]
 8003076:	f000 f989 	bl	800338c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800307a:	69bb      	ldr	r3, [r7, #24]
 800307c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003080:	2b00      	cmp	r3, #0
 8003082:	d024      	beq.n	80030ce <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f44f 7280 	mov.w	r2, #256	; 0x100
 800308c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800308e:	69bb      	ldr	r3, [r7, #24]
 8003090:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003094:	2b00      	cmp	r3, #0
 8003096:	d003      	beq.n	80030a0 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003098:	6878      	ldr	r0, [r7, #4]
 800309a:	f000 f963 	bl	8003364 <HAL_CAN_TxMailbox1CompleteCallback>
 800309e:	e016      	b.n	80030ce <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80030a0:	69bb      	ldr	r3, [r7, #24]
 80030a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d004      	beq.n	80030b4 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80030aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ac:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80030b0:	627b      	str	r3, [r7, #36]	; 0x24
 80030b2:	e00c      	b.n	80030ce <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80030b4:	69bb      	ldr	r3, [r7, #24]
 80030b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d004      	beq.n	80030c8 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80030be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80030c4:	627b      	str	r3, [r7, #36]	; 0x24
 80030c6:	e002      	b.n	80030ce <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80030c8:	6878      	ldr	r0, [r7, #4]
 80030ca:	f000 f969 	bl	80033a0 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80030ce:	69bb      	ldr	r3, [r7, #24]
 80030d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d024      	beq.n	8003122 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80030e0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80030e2:	69bb      	ldr	r3, [r7, #24]
 80030e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d003      	beq.n	80030f4 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80030ec:	6878      	ldr	r0, [r7, #4]
 80030ee:	f000 f943 	bl	8003378 <HAL_CAN_TxMailbox2CompleteCallback>
 80030f2:	e016      	b.n	8003122 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80030f4:	69bb      	ldr	r3, [r7, #24]
 80030f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d004      	beq.n	8003108 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80030fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003100:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003104:	627b      	str	r3, [r7, #36]	; 0x24
 8003106:	e00c      	b.n	8003122 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003108:	69bb      	ldr	r3, [r7, #24]
 800310a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800310e:	2b00      	cmp	r3, #0
 8003110:	d004      	beq.n	800311c <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003114:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003118:	627b      	str	r3, [r7, #36]	; 0x24
 800311a:	e002      	b.n	8003122 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800311c:	6878      	ldr	r0, [r7, #4]
 800311e:	f000 f949 	bl	80033b4 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003122:	6a3b      	ldr	r3, [r7, #32]
 8003124:	f003 0308 	and.w	r3, r3, #8
 8003128:	2b00      	cmp	r3, #0
 800312a:	d00c      	beq.n	8003146 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	f003 0310 	and.w	r3, r3, #16
 8003132:	2b00      	cmp	r3, #0
 8003134:	d007      	beq.n	8003146 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003138:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800313c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	2210      	movs	r2, #16
 8003144:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003146:	6a3b      	ldr	r3, [r7, #32]
 8003148:	f003 0304 	and.w	r3, r3, #4
 800314c:	2b00      	cmp	r3, #0
 800314e:	d00b      	beq.n	8003168 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	f003 0308 	and.w	r3, r3, #8
 8003156:	2b00      	cmp	r3, #0
 8003158:	d006      	beq.n	8003168 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	2208      	movs	r2, #8
 8003160:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003162:	6878      	ldr	r0, [r7, #4]
 8003164:	f000 f930 	bl	80033c8 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003168:	6a3b      	ldr	r3, [r7, #32]
 800316a:	f003 0302 	and.w	r3, r3, #2
 800316e:	2b00      	cmp	r3, #0
 8003170:	d009      	beq.n	8003186 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	68db      	ldr	r3, [r3, #12]
 8003178:	f003 0303 	and.w	r3, r3, #3
 800317c:	2b00      	cmp	r3, #0
 800317e:	d002      	beq.n	8003186 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003180:	6878      	ldr	r0, [r7, #4]
 8003182:	f7fd f909 	bl	8000398 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003186:	6a3b      	ldr	r3, [r7, #32]
 8003188:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800318c:	2b00      	cmp	r3, #0
 800318e:	d00c      	beq.n	80031aa <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	f003 0310 	and.w	r3, r3, #16
 8003196:	2b00      	cmp	r3, #0
 8003198:	d007      	beq.n	80031aa <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800319a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800319c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80031a0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	2210      	movs	r2, #16
 80031a8:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80031aa:	6a3b      	ldr	r3, [r7, #32]
 80031ac:	f003 0320 	and.w	r3, r3, #32
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d00b      	beq.n	80031cc <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	f003 0308 	and.w	r3, r3, #8
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d006      	beq.n	80031cc <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	2208      	movs	r2, #8
 80031c4:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80031c6:	6878      	ldr	r0, [r7, #4]
 80031c8:	f000 f912 	bl	80033f0 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80031cc:	6a3b      	ldr	r3, [r7, #32]
 80031ce:	f003 0310 	and.w	r3, r3, #16
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d009      	beq.n	80031ea <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	691b      	ldr	r3, [r3, #16]
 80031dc:	f003 0303 	and.w	r3, r3, #3
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d002      	beq.n	80031ea <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80031e4:	6878      	ldr	r0, [r7, #4]
 80031e6:	f000 f8f9 	bl	80033dc <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80031ea:	6a3b      	ldr	r3, [r7, #32]
 80031ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d00b      	beq.n	800320c <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80031f4:	69fb      	ldr	r3, [r7, #28]
 80031f6:	f003 0310 	and.w	r3, r3, #16
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d006      	beq.n	800320c <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	2210      	movs	r2, #16
 8003204:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003206:	6878      	ldr	r0, [r7, #4]
 8003208:	f000 f8fc 	bl	8003404 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800320c:	6a3b      	ldr	r3, [r7, #32]
 800320e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003212:	2b00      	cmp	r3, #0
 8003214:	d00b      	beq.n	800322e <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003216:	69fb      	ldr	r3, [r7, #28]
 8003218:	f003 0308 	and.w	r3, r3, #8
 800321c:	2b00      	cmp	r3, #0
 800321e:	d006      	beq.n	800322e <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	2208      	movs	r2, #8
 8003226:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003228:	6878      	ldr	r0, [r7, #4]
 800322a:	f000 f8f5 	bl	8003418 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800322e:	6a3b      	ldr	r3, [r7, #32]
 8003230:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003234:	2b00      	cmp	r3, #0
 8003236:	d07b      	beq.n	8003330 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003238:	69fb      	ldr	r3, [r7, #28]
 800323a:	f003 0304 	and.w	r3, r3, #4
 800323e:	2b00      	cmp	r3, #0
 8003240:	d072      	beq.n	8003328 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003242:	6a3b      	ldr	r3, [r7, #32]
 8003244:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003248:	2b00      	cmp	r3, #0
 800324a:	d008      	beq.n	800325e <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003252:	2b00      	cmp	r3, #0
 8003254:	d003      	beq.n	800325e <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003258:	f043 0301 	orr.w	r3, r3, #1
 800325c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800325e:	6a3b      	ldr	r3, [r7, #32]
 8003260:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003264:	2b00      	cmp	r3, #0
 8003266:	d008      	beq.n	800327a <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800326e:	2b00      	cmp	r3, #0
 8003270:	d003      	beq.n	800327a <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003274:	f043 0302 	orr.w	r3, r3, #2
 8003278:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800327a:	6a3b      	ldr	r3, [r7, #32]
 800327c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003280:	2b00      	cmp	r3, #0
 8003282:	d008      	beq.n	8003296 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800328a:	2b00      	cmp	r3, #0
 800328c:	d003      	beq.n	8003296 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800328e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003290:	f043 0304 	orr.w	r3, r3, #4
 8003294:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003296:	6a3b      	ldr	r3, [r7, #32]
 8003298:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800329c:	2b00      	cmp	r3, #0
 800329e:	d043      	beq.n	8003328 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d03e      	beq.n	8003328 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80032b0:	2b60      	cmp	r3, #96	; 0x60
 80032b2:	d02b      	beq.n	800330c <HAL_CAN_IRQHandler+0x32a>
 80032b4:	2b60      	cmp	r3, #96	; 0x60
 80032b6:	d82e      	bhi.n	8003316 <HAL_CAN_IRQHandler+0x334>
 80032b8:	2b50      	cmp	r3, #80	; 0x50
 80032ba:	d022      	beq.n	8003302 <HAL_CAN_IRQHandler+0x320>
 80032bc:	2b50      	cmp	r3, #80	; 0x50
 80032be:	d82a      	bhi.n	8003316 <HAL_CAN_IRQHandler+0x334>
 80032c0:	2b40      	cmp	r3, #64	; 0x40
 80032c2:	d019      	beq.n	80032f8 <HAL_CAN_IRQHandler+0x316>
 80032c4:	2b40      	cmp	r3, #64	; 0x40
 80032c6:	d826      	bhi.n	8003316 <HAL_CAN_IRQHandler+0x334>
 80032c8:	2b30      	cmp	r3, #48	; 0x30
 80032ca:	d010      	beq.n	80032ee <HAL_CAN_IRQHandler+0x30c>
 80032cc:	2b30      	cmp	r3, #48	; 0x30
 80032ce:	d822      	bhi.n	8003316 <HAL_CAN_IRQHandler+0x334>
 80032d0:	2b10      	cmp	r3, #16
 80032d2:	d002      	beq.n	80032da <HAL_CAN_IRQHandler+0x2f8>
 80032d4:	2b20      	cmp	r3, #32
 80032d6:	d005      	beq.n	80032e4 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80032d8:	e01d      	b.n	8003316 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80032da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032dc:	f043 0308 	orr.w	r3, r3, #8
 80032e0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80032e2:	e019      	b.n	8003318 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80032e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e6:	f043 0310 	orr.w	r3, r3, #16
 80032ea:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80032ec:	e014      	b.n	8003318 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80032ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f0:	f043 0320 	orr.w	r3, r3, #32
 80032f4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80032f6:	e00f      	b.n	8003318 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80032f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80032fe:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003300:	e00a      	b.n	8003318 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003304:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003308:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800330a:	e005      	b.n	8003318 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800330c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800330e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003312:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003314:	e000      	b.n	8003318 <HAL_CAN_IRQHandler+0x336>
            break;
 8003316:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	699a      	ldr	r2, [r3, #24]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003326:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	2204      	movs	r2, #4
 800332e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003332:	2b00      	cmp	r3, #0
 8003334:	d008      	beq.n	8003348 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800333a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800333c:	431a      	orrs	r2, r3
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003342:	6878      	ldr	r0, [r7, #4]
 8003344:	f000 f872 	bl	800342c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003348:	bf00      	nop
 800334a:	3728      	adds	r7, #40	; 0x28
 800334c:	46bd      	mov	sp, r7
 800334e:	bd80      	pop	{r7, pc}

08003350 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003350:	b480      	push	{r7}
 8003352:	b083      	sub	sp, #12
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003358:	bf00      	nop
 800335a:	370c      	adds	r7, #12
 800335c:	46bd      	mov	sp, r7
 800335e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003362:	4770      	bx	lr

08003364 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003364:	b480      	push	{r7}
 8003366:	b083      	sub	sp, #12
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800336c:	bf00      	nop
 800336e:	370c      	adds	r7, #12
 8003370:	46bd      	mov	sp, r7
 8003372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003376:	4770      	bx	lr

08003378 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003378:	b480      	push	{r7}
 800337a:	b083      	sub	sp, #12
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003380:	bf00      	nop
 8003382:	370c      	adds	r7, #12
 8003384:	46bd      	mov	sp, r7
 8003386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338a:	4770      	bx	lr

0800338c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800338c:	b480      	push	{r7}
 800338e:	b083      	sub	sp, #12
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003394:	bf00      	nop
 8003396:	370c      	adds	r7, #12
 8003398:	46bd      	mov	sp, r7
 800339a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339e:	4770      	bx	lr

080033a0 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b083      	sub	sp, #12
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80033a8:	bf00      	nop
 80033aa:	370c      	adds	r7, #12
 80033ac:	46bd      	mov	sp, r7
 80033ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b2:	4770      	bx	lr

080033b4 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b083      	sub	sp, #12
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80033bc:	bf00      	nop
 80033be:	370c      	adds	r7, #12
 80033c0:	46bd      	mov	sp, r7
 80033c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c6:	4770      	bx	lr

080033c8 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b083      	sub	sp, #12
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80033d0:	bf00      	nop
 80033d2:	370c      	adds	r7, #12
 80033d4:	46bd      	mov	sp, r7
 80033d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033da:	4770      	bx	lr

080033dc <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80033dc:	b480      	push	{r7}
 80033de:	b083      	sub	sp, #12
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80033e4:	bf00      	nop
 80033e6:	370c      	adds	r7, #12
 80033e8:	46bd      	mov	sp, r7
 80033ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ee:	4770      	bx	lr

080033f0 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80033f0:	b480      	push	{r7}
 80033f2:	b083      	sub	sp, #12
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80033f8:	bf00      	nop
 80033fa:	370c      	adds	r7, #12
 80033fc:	46bd      	mov	sp, r7
 80033fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003402:	4770      	bx	lr

08003404 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003404:	b480      	push	{r7}
 8003406:	b083      	sub	sp, #12
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800340c:	bf00      	nop
 800340e:	370c      	adds	r7, #12
 8003410:	46bd      	mov	sp, r7
 8003412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003416:	4770      	bx	lr

08003418 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003418:	b480      	push	{r7}
 800341a:	b083      	sub	sp, #12
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003420:	bf00      	nop
 8003422:	370c      	adds	r7, #12
 8003424:	46bd      	mov	sp, r7
 8003426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342a:	4770      	bx	lr

0800342c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800342c:	b480      	push	{r7}
 800342e:	b083      	sub	sp, #12
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003434:	bf00      	nop
 8003436:	370c      	adds	r7, #12
 8003438:	46bd      	mov	sp, r7
 800343a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343e:	4770      	bx	lr

08003440 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003440:	b480      	push	{r7}
 8003442:	b085      	sub	sp, #20
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	f003 0307 	and.w	r3, r3, #7
 800344e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003450:	4b0c      	ldr	r3, [pc, #48]	; (8003484 <__NVIC_SetPriorityGrouping+0x44>)
 8003452:	68db      	ldr	r3, [r3, #12]
 8003454:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003456:	68ba      	ldr	r2, [r7, #8]
 8003458:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800345c:	4013      	ands	r3, r2
 800345e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003468:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800346c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003470:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003472:	4a04      	ldr	r2, [pc, #16]	; (8003484 <__NVIC_SetPriorityGrouping+0x44>)
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	60d3      	str	r3, [r2, #12]
}
 8003478:	bf00      	nop
 800347a:	3714      	adds	r7, #20
 800347c:	46bd      	mov	sp, r7
 800347e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003482:	4770      	bx	lr
 8003484:	e000ed00 	.word	0xe000ed00

08003488 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003488:	b480      	push	{r7}
 800348a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800348c:	4b04      	ldr	r3, [pc, #16]	; (80034a0 <__NVIC_GetPriorityGrouping+0x18>)
 800348e:	68db      	ldr	r3, [r3, #12]
 8003490:	0a1b      	lsrs	r3, r3, #8
 8003492:	f003 0307 	and.w	r3, r3, #7
}
 8003496:	4618      	mov	r0, r3
 8003498:	46bd      	mov	sp, r7
 800349a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349e:	4770      	bx	lr
 80034a0:	e000ed00 	.word	0xe000ed00

080034a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034a4:	b480      	push	{r7}
 80034a6:	b083      	sub	sp, #12
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	4603      	mov	r3, r0
 80034ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	db0b      	blt.n	80034ce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80034b6:	79fb      	ldrb	r3, [r7, #7]
 80034b8:	f003 021f 	and.w	r2, r3, #31
 80034bc:	4907      	ldr	r1, [pc, #28]	; (80034dc <__NVIC_EnableIRQ+0x38>)
 80034be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034c2:	095b      	lsrs	r3, r3, #5
 80034c4:	2001      	movs	r0, #1
 80034c6:	fa00 f202 	lsl.w	r2, r0, r2
 80034ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80034ce:	bf00      	nop
 80034d0:	370c      	adds	r7, #12
 80034d2:	46bd      	mov	sp, r7
 80034d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d8:	4770      	bx	lr
 80034da:	bf00      	nop
 80034dc:	e000e100 	.word	0xe000e100

080034e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80034e0:	b480      	push	{r7}
 80034e2:	b083      	sub	sp, #12
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	4603      	mov	r3, r0
 80034e8:	6039      	str	r1, [r7, #0]
 80034ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	db0a      	blt.n	800350a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	b2da      	uxtb	r2, r3
 80034f8:	490c      	ldr	r1, [pc, #48]	; (800352c <__NVIC_SetPriority+0x4c>)
 80034fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034fe:	0112      	lsls	r2, r2, #4
 8003500:	b2d2      	uxtb	r2, r2
 8003502:	440b      	add	r3, r1
 8003504:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003508:	e00a      	b.n	8003520 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	b2da      	uxtb	r2, r3
 800350e:	4908      	ldr	r1, [pc, #32]	; (8003530 <__NVIC_SetPriority+0x50>)
 8003510:	79fb      	ldrb	r3, [r7, #7]
 8003512:	f003 030f 	and.w	r3, r3, #15
 8003516:	3b04      	subs	r3, #4
 8003518:	0112      	lsls	r2, r2, #4
 800351a:	b2d2      	uxtb	r2, r2
 800351c:	440b      	add	r3, r1
 800351e:	761a      	strb	r2, [r3, #24]
}
 8003520:	bf00      	nop
 8003522:	370c      	adds	r7, #12
 8003524:	46bd      	mov	sp, r7
 8003526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352a:	4770      	bx	lr
 800352c:	e000e100 	.word	0xe000e100
 8003530:	e000ed00 	.word	0xe000ed00

08003534 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003534:	b480      	push	{r7}
 8003536:	b089      	sub	sp, #36	; 0x24
 8003538:	af00      	add	r7, sp, #0
 800353a:	60f8      	str	r0, [r7, #12]
 800353c:	60b9      	str	r1, [r7, #8]
 800353e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	f003 0307 	and.w	r3, r3, #7
 8003546:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003548:	69fb      	ldr	r3, [r7, #28]
 800354a:	f1c3 0307 	rsb	r3, r3, #7
 800354e:	2b04      	cmp	r3, #4
 8003550:	bf28      	it	cs
 8003552:	2304      	movcs	r3, #4
 8003554:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003556:	69fb      	ldr	r3, [r7, #28]
 8003558:	3304      	adds	r3, #4
 800355a:	2b06      	cmp	r3, #6
 800355c:	d902      	bls.n	8003564 <NVIC_EncodePriority+0x30>
 800355e:	69fb      	ldr	r3, [r7, #28]
 8003560:	3b03      	subs	r3, #3
 8003562:	e000      	b.n	8003566 <NVIC_EncodePriority+0x32>
 8003564:	2300      	movs	r3, #0
 8003566:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003568:	f04f 32ff 	mov.w	r2, #4294967295
 800356c:	69bb      	ldr	r3, [r7, #24]
 800356e:	fa02 f303 	lsl.w	r3, r2, r3
 8003572:	43da      	mvns	r2, r3
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	401a      	ands	r2, r3
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800357c:	f04f 31ff 	mov.w	r1, #4294967295
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	fa01 f303 	lsl.w	r3, r1, r3
 8003586:	43d9      	mvns	r1, r3
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800358c:	4313      	orrs	r3, r2
         );
}
 800358e:	4618      	mov	r0, r3
 8003590:	3724      	adds	r7, #36	; 0x24
 8003592:	46bd      	mov	sp, r7
 8003594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003598:	4770      	bx	lr

0800359a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800359a:	b580      	push	{r7, lr}
 800359c:	b082      	sub	sp, #8
 800359e:	af00      	add	r7, sp, #0
 80035a0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80035a2:	6878      	ldr	r0, [r7, #4]
 80035a4:	f7ff ff4c 	bl	8003440 <__NVIC_SetPriorityGrouping>
}
 80035a8:	bf00      	nop
 80035aa:	3708      	adds	r7, #8
 80035ac:	46bd      	mov	sp, r7
 80035ae:	bd80      	pop	{r7, pc}

080035b0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b086      	sub	sp, #24
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	4603      	mov	r3, r0
 80035b8:	60b9      	str	r1, [r7, #8]
 80035ba:	607a      	str	r2, [r7, #4]
 80035bc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80035be:	2300      	movs	r3, #0
 80035c0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80035c2:	f7ff ff61 	bl	8003488 <__NVIC_GetPriorityGrouping>
 80035c6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80035c8:	687a      	ldr	r2, [r7, #4]
 80035ca:	68b9      	ldr	r1, [r7, #8]
 80035cc:	6978      	ldr	r0, [r7, #20]
 80035ce:	f7ff ffb1 	bl	8003534 <NVIC_EncodePriority>
 80035d2:	4602      	mov	r2, r0
 80035d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035d8:	4611      	mov	r1, r2
 80035da:	4618      	mov	r0, r3
 80035dc:	f7ff ff80 	bl	80034e0 <__NVIC_SetPriority>
}
 80035e0:	bf00      	nop
 80035e2:	3718      	adds	r7, #24
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bd80      	pop	{r7, pc}

080035e8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b082      	sub	sp, #8
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	4603      	mov	r3, r0
 80035f0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80035f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035f6:	4618      	mov	r0, r3
 80035f8:	f7ff ff54 	bl	80034a4 <__NVIC_EnableIRQ>
}
 80035fc:	bf00      	nop
 80035fe:	3708      	adds	r7, #8
 8003600:	46bd      	mov	sp, r7
 8003602:	bd80      	pop	{r7, pc}

08003604 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b084      	sub	sp, #16
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d101      	bne.n	8003616 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003612:	2301      	movs	r3, #1
 8003614:	e08d      	b.n	8003732 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	461a      	mov	r2, r3
 800361c:	4b47      	ldr	r3, [pc, #284]	; (800373c <HAL_DMA_Init+0x138>)
 800361e:	429a      	cmp	r2, r3
 8003620:	d80f      	bhi.n	8003642 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	461a      	mov	r2, r3
 8003628:	4b45      	ldr	r3, [pc, #276]	; (8003740 <HAL_DMA_Init+0x13c>)
 800362a:	4413      	add	r3, r2
 800362c:	4a45      	ldr	r2, [pc, #276]	; (8003744 <HAL_DMA_Init+0x140>)
 800362e:	fba2 2303 	umull	r2, r3, r2, r3
 8003632:	091b      	lsrs	r3, r3, #4
 8003634:	009a      	lsls	r2, r3, #2
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	4a42      	ldr	r2, [pc, #264]	; (8003748 <HAL_DMA_Init+0x144>)
 800363e:	641a      	str	r2, [r3, #64]	; 0x40
 8003640:	e00e      	b.n	8003660 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	461a      	mov	r2, r3
 8003648:	4b40      	ldr	r3, [pc, #256]	; (800374c <HAL_DMA_Init+0x148>)
 800364a:	4413      	add	r3, r2
 800364c:	4a3d      	ldr	r2, [pc, #244]	; (8003744 <HAL_DMA_Init+0x140>)
 800364e:	fba2 2303 	umull	r2, r3, r2, r3
 8003652:	091b      	lsrs	r3, r3, #4
 8003654:	009a      	lsls	r2, r3, #2
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	4a3c      	ldr	r2, [pc, #240]	; (8003750 <HAL_DMA_Init+0x14c>)
 800365e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2202      	movs	r2, #2
 8003664:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003676:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800367a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003684:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	691b      	ldr	r3, [r3, #16]
 800368a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003690:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	699b      	ldr	r3, [r3, #24]
 8003696:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800369c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6a1b      	ldr	r3, [r3, #32]
 80036a2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80036a4:	68fa      	ldr	r2, [r7, #12]
 80036a6:	4313      	orrs	r3, r2
 80036a8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	68fa      	ldr	r2, [r7, #12]
 80036b0:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80036b2:	6878      	ldr	r0, [r7, #4]
 80036b4:	f000 f9b6 	bl	8003a24 <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80036c0:	d102      	bne.n	80036c8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2200      	movs	r2, #0
 80036c6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	685a      	ldr	r2, [r3, #4]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036d0:	b2d2      	uxtb	r2, r2
 80036d2:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036d8:	687a      	ldr	r2, [r7, #4]
 80036da:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80036dc:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d010      	beq.n	8003708 <HAL_DMA_Init+0x104>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	2b04      	cmp	r3, #4
 80036ec:	d80c      	bhi.n	8003708 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80036ee:	6878      	ldr	r0, [r7, #4]
 80036f0:	f000 f9d6 	bl	8003aa0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036f8:	2200      	movs	r2, #0
 80036fa:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003700:	687a      	ldr	r2, [r7, #4]
 8003702:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003704:	605a      	str	r2, [r3, #4]
 8003706:	e008      	b.n	800371a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2200      	movs	r2, #0
 800370c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2200      	movs	r2, #0
 8003712:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2200      	movs	r2, #0
 8003718:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2200      	movs	r2, #0
 800371e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2201      	movs	r2, #1
 8003724:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2200      	movs	r2, #0
 800372c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003730:	2300      	movs	r3, #0
}
 8003732:	4618      	mov	r0, r3
 8003734:	3710      	adds	r7, #16
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}
 800373a:	bf00      	nop
 800373c:	40020407 	.word	0x40020407
 8003740:	bffdfff8 	.word	0xbffdfff8
 8003744:	cccccccd 	.word	0xcccccccd
 8003748:	40020000 	.word	0x40020000
 800374c:	bffdfbf8 	.word	0xbffdfbf8
 8003750:	40020400 	.word	0x40020400

08003754 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b086      	sub	sp, #24
 8003758:	af00      	add	r7, sp, #0
 800375a:	60f8      	str	r0, [r7, #12]
 800375c:	60b9      	str	r1, [r7, #8]
 800375e:	607a      	str	r2, [r7, #4]
 8003760:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003762:	2300      	movs	r3, #0
 8003764:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800376c:	2b01      	cmp	r3, #1
 800376e:	d101      	bne.n	8003774 <HAL_DMA_Start_IT+0x20>
 8003770:	2302      	movs	r3, #2
 8003772:	e066      	b.n	8003842 <HAL_DMA_Start_IT+0xee>
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	2201      	movs	r2, #1
 8003778:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003782:	b2db      	uxtb	r3, r3
 8003784:	2b01      	cmp	r3, #1
 8003786:	d155      	bne.n	8003834 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	2202      	movs	r2, #2
 800378c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	2200      	movs	r2, #0
 8003794:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	681a      	ldr	r2, [r3, #0]
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f022 0201 	bic.w	r2, r2, #1
 80037a4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	687a      	ldr	r2, [r7, #4]
 80037aa:	68b9      	ldr	r1, [r7, #8]
 80037ac:	68f8      	ldr	r0, [r7, #12]
 80037ae:	f000 f8fb 	bl	80039a8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d008      	beq.n	80037cc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f042 020e 	orr.w	r2, r2, #14
 80037c8:	601a      	str	r2, [r3, #0]
 80037ca:	e00f      	b.n	80037ec <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	681a      	ldr	r2, [r3, #0]
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f022 0204 	bic.w	r2, r2, #4
 80037da:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	681a      	ldr	r2, [r3, #0]
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f042 020a 	orr.w	r2, r2, #10
 80037ea:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d007      	beq.n	800380a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037fe:	681a      	ldr	r2, [r3, #0]
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003804:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003808:	601a      	str	r2, [r3, #0]
    }

    if(hdma->DMAmuxRequestGen != 0U)
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800380e:	2b00      	cmp	r3, #0
 8003810:	d007      	beq.n	8003822 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003816:	681a      	ldr	r2, [r3, #0]
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800381c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003820:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	681a      	ldr	r2, [r3, #0]
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f042 0201 	orr.w	r2, r2, #1
 8003830:	601a      	str	r2, [r3, #0]
 8003832:	e005      	b.n	8003840 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	2200      	movs	r2, #0
 8003838:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800383c:	2302      	movs	r3, #2
 800383e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003840:	7dfb      	ldrb	r3, [r7, #23]
}
 8003842:	4618      	mov	r0, r3
 8003844:	3718      	adds	r7, #24
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}

0800384a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800384a:	b580      	push	{r7, lr}
 800384c:	b084      	sub	sp, #16
 800384e:	af00      	add	r7, sp, #0
 8003850:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003866:	f003 031c 	and.w	r3, r3, #28
 800386a:	2204      	movs	r2, #4
 800386c:	409a      	lsls	r2, r3
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	4013      	ands	r3, r2
 8003872:	2b00      	cmp	r3, #0
 8003874:	d026      	beq.n	80038c4 <HAL_DMA_IRQHandler+0x7a>
 8003876:	68bb      	ldr	r3, [r7, #8]
 8003878:	f003 0304 	and.w	r3, r3, #4
 800387c:	2b00      	cmp	r3, #0
 800387e:	d021      	beq.n	80038c4 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f003 0320 	and.w	r3, r3, #32
 800388a:	2b00      	cmp	r3, #0
 800388c:	d107      	bne.n	800389e <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	681a      	ldr	r2, [r3, #0]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f022 0204 	bic.w	r2, r2, #4
 800389c:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038a2:	f003 021c 	and.w	r2, r3, #28
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038aa:	2104      	movs	r1, #4
 80038ac:	fa01 f202 	lsl.w	r2, r1, r2
 80038b0:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d071      	beq.n	800399e <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038be:	6878      	ldr	r0, [r7, #4]
 80038c0:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80038c2:	e06c      	b.n	800399e <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038c8:	f003 031c 	and.w	r3, r3, #28
 80038cc:	2202      	movs	r2, #2
 80038ce:	409a      	lsls	r2, r3
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	4013      	ands	r3, r2
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d02e      	beq.n	8003936 <HAL_DMA_IRQHandler+0xec>
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	f003 0302 	and.w	r3, r3, #2
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d029      	beq.n	8003936 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f003 0320 	and.w	r3, r3, #32
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d10b      	bne.n	8003908 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	681a      	ldr	r2, [r3, #0]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f022 020a 	bic.w	r2, r2, #10
 80038fe:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2201      	movs	r2, #1
 8003904:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800390c:	f003 021c 	and.w	r2, r3, #28
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003914:	2102      	movs	r1, #2
 8003916:	fa01 f202 	lsl.w	r2, r1, r2
 800391a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2200      	movs	r2, #0
 8003920:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003928:	2b00      	cmp	r3, #0
 800392a:	d038      	beq.n	800399e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003930:	6878      	ldr	r0, [r7, #4]
 8003932:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003934:	e033      	b.n	800399e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800393a:	f003 031c 	and.w	r3, r3, #28
 800393e:	2208      	movs	r2, #8
 8003940:	409a      	lsls	r2, r3
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	4013      	ands	r3, r2
 8003946:	2b00      	cmp	r3, #0
 8003948:	d02a      	beq.n	80039a0 <HAL_DMA_IRQHandler+0x156>
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	f003 0308 	and.w	r3, r3, #8
 8003950:	2b00      	cmp	r3, #0
 8003952:	d025      	beq.n	80039a0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	681a      	ldr	r2, [r3, #0]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f022 020e 	bic.w	r2, r2, #14
 8003962:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003968:	f003 021c 	and.w	r2, r3, #28
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003970:	2101      	movs	r1, #1
 8003972:	fa01 f202 	lsl.w	r2, r1, r2
 8003976:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2201      	movs	r2, #1
 800397c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2201      	movs	r2, #1
 8003982:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2200      	movs	r2, #0
 800398a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003992:	2b00      	cmp	r3, #0
 8003994:	d004      	beq.n	80039a0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800399a:	6878      	ldr	r0, [r7, #4]
 800399c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800399e:	bf00      	nop
 80039a0:	bf00      	nop
}
 80039a2:	3710      	adds	r7, #16
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bd80      	pop	{r7, pc}

080039a8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80039a8:	b480      	push	{r7}
 80039aa:	b085      	sub	sp, #20
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	60f8      	str	r0, [r7, #12]
 80039b0:	60b9      	str	r1, [r7, #8]
 80039b2:	607a      	str	r2, [r7, #4]
 80039b4:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039ba:	68fa      	ldr	r2, [r7, #12]
 80039bc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80039be:	605a      	str	r2, [r3, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d004      	beq.n	80039d2 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039cc:	68fa      	ldr	r2, [r7, #12]
 80039ce:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80039d0:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039d6:	f003 021c 	and.w	r2, r3, #28
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039de:	2101      	movs	r1, #1
 80039e0:	fa01 f202 	lsl.w	r2, r1, r2
 80039e4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	683a      	ldr	r2, [r7, #0]
 80039ec:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	689b      	ldr	r3, [r3, #8]
 80039f2:	2b10      	cmp	r3, #16
 80039f4:	d108      	bne.n	8003a08 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	687a      	ldr	r2, [r7, #4]
 80039fc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	68ba      	ldr	r2, [r7, #8]
 8003a04:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003a06:	e007      	b.n	8003a18 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	68ba      	ldr	r2, [r7, #8]
 8003a0e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	687a      	ldr	r2, [r7, #4]
 8003a16:	60da      	str	r2, [r3, #12]
}
 8003a18:	bf00      	nop
 8003a1a:	3714      	adds	r7, #20
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a22:	4770      	bx	lr

08003a24 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003a24:	b480      	push	{r7}
 8003a26:	b085      	sub	sp, #20
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	461a      	mov	r2, r3
 8003a32:	4b17      	ldr	r3, [pc, #92]	; (8003a90 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003a34:	429a      	cmp	r2, r3
 8003a36:	d80a      	bhi.n	8003a4e <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a3c:	089b      	lsrs	r3, r3, #2
 8003a3e:	009b      	lsls	r3, r3, #2
 8003a40:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003a44:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8003a48:	687a      	ldr	r2, [r7, #4]
 8003a4a:	6493      	str	r3, [r2, #72]	; 0x48
 8003a4c:	e007      	b.n	8003a5e <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a52:	089b      	lsrs	r3, r3, #2
 8003a54:	009a      	lsls	r2, r3, #2
 8003a56:	4b0f      	ldr	r3, [pc, #60]	; (8003a94 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003a58:	4413      	add	r3, r2
 8003a5a:	687a      	ldr	r2, [r7, #4]
 8003a5c:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	b2db      	uxtb	r3, r3
 8003a64:	3b08      	subs	r3, #8
 8003a66:	4a0c      	ldr	r2, [pc, #48]	; (8003a98 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003a68:	fba2 2303 	umull	r2, r3, r2, r3
 8003a6c:	091b      	lsrs	r3, r3, #4
 8003a6e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	4a0a      	ldr	r2, [pc, #40]	; (8003a9c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003a74:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	f003 031f 	and.w	r3, r3, #31
 8003a7c:	2201      	movs	r2, #1
 8003a7e:	409a      	lsls	r2, r3
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003a84:	bf00      	nop
 8003a86:	3714      	adds	r7, #20
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8e:	4770      	bx	lr
 8003a90:	40020407 	.word	0x40020407
 8003a94:	4002081c 	.word	0x4002081c
 8003a98:	cccccccd 	.word	0xcccccccd
 8003a9c:	40020880 	.word	0x40020880

08003aa0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	b085      	sub	sp, #20
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	b2db      	uxtb	r3, r3
 8003aae:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003ab0:	68fa      	ldr	r2, [r7, #12]
 8003ab2:	4b0b      	ldr	r3, [pc, #44]	; (8003ae0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003ab4:	4413      	add	r3, r2
 8003ab6:	009b      	lsls	r3, r3, #2
 8003ab8:	461a      	mov	r2, r3
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	4a08      	ldr	r2, [pc, #32]	; (8003ae4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003ac2:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	3b01      	subs	r3, #1
 8003ac8:	f003 0303 	and.w	r3, r3, #3
 8003acc:	2201      	movs	r2, #1
 8003ace:	409a      	lsls	r2, r3
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003ad4:	bf00      	nop
 8003ad6:	3714      	adds	r7, #20
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ade:	4770      	bx	lr
 8003ae0:	1000823f 	.word	0x1000823f
 8003ae4:	40020940 	.word	0x40020940

08003ae8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	b087      	sub	sp, #28
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
 8003af0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003af2:	2300      	movs	r3, #0
 8003af4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003af6:	e166      	b.n	8003dc6 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	681a      	ldr	r2, [r3, #0]
 8003afc:	2101      	movs	r1, #1
 8003afe:	697b      	ldr	r3, [r7, #20]
 8003b00:	fa01 f303 	lsl.w	r3, r1, r3
 8003b04:	4013      	ands	r3, r2
 8003b06:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	f000 8158 	beq.w	8003dc0 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	f003 0303 	and.w	r3, r3, #3
 8003b18:	2b01      	cmp	r3, #1
 8003b1a:	d005      	beq.n	8003b28 <HAL_GPIO_Init+0x40>
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	f003 0303 	and.w	r3, r3, #3
 8003b24:	2b02      	cmp	r3, #2
 8003b26:	d130      	bne.n	8003b8a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	689b      	ldr	r3, [r3, #8]
 8003b2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003b2e:	697b      	ldr	r3, [r7, #20]
 8003b30:	005b      	lsls	r3, r3, #1
 8003b32:	2203      	movs	r2, #3
 8003b34:	fa02 f303 	lsl.w	r3, r2, r3
 8003b38:	43db      	mvns	r3, r3
 8003b3a:	693a      	ldr	r2, [r7, #16]
 8003b3c:	4013      	ands	r3, r2
 8003b3e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	68da      	ldr	r2, [r3, #12]
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	005b      	lsls	r3, r3, #1
 8003b48:	fa02 f303 	lsl.w	r3, r2, r3
 8003b4c:	693a      	ldr	r2, [r7, #16]
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	693a      	ldr	r2, [r7, #16]
 8003b56:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003b5e:	2201      	movs	r2, #1
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	fa02 f303 	lsl.w	r3, r2, r3
 8003b66:	43db      	mvns	r3, r3
 8003b68:	693a      	ldr	r2, [r7, #16]
 8003b6a:	4013      	ands	r3, r2
 8003b6c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	091b      	lsrs	r3, r3, #4
 8003b74:	f003 0201 	and.w	r2, r3, #1
 8003b78:	697b      	ldr	r3, [r7, #20]
 8003b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b7e:	693a      	ldr	r2, [r7, #16]
 8003b80:	4313      	orrs	r3, r2
 8003b82:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	693a      	ldr	r2, [r7, #16]
 8003b88:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	f003 0303 	and.w	r3, r3, #3
 8003b92:	2b03      	cmp	r3, #3
 8003b94:	d017      	beq.n	8003bc6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	68db      	ldr	r3, [r3, #12]
 8003b9a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003b9c:	697b      	ldr	r3, [r7, #20]
 8003b9e:	005b      	lsls	r3, r3, #1
 8003ba0:	2203      	movs	r2, #3
 8003ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba6:	43db      	mvns	r3, r3
 8003ba8:	693a      	ldr	r2, [r7, #16]
 8003baa:	4013      	ands	r3, r2
 8003bac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	689a      	ldr	r2, [r3, #8]
 8003bb2:	697b      	ldr	r3, [r7, #20]
 8003bb4:	005b      	lsls	r3, r3, #1
 8003bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8003bba:	693a      	ldr	r2, [r7, #16]
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	693a      	ldr	r2, [r7, #16]
 8003bc4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	f003 0303 	and.w	r3, r3, #3
 8003bce:	2b02      	cmp	r3, #2
 8003bd0:	d123      	bne.n	8003c1a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003bd2:	697b      	ldr	r3, [r7, #20]
 8003bd4:	08da      	lsrs	r2, r3, #3
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	3208      	adds	r2, #8
 8003bda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003bde:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003be0:	697b      	ldr	r3, [r7, #20]
 8003be2:	f003 0307 	and.w	r3, r3, #7
 8003be6:	009b      	lsls	r3, r3, #2
 8003be8:	220f      	movs	r2, #15
 8003bea:	fa02 f303 	lsl.w	r3, r2, r3
 8003bee:	43db      	mvns	r3, r3
 8003bf0:	693a      	ldr	r2, [r7, #16]
 8003bf2:	4013      	ands	r3, r2
 8003bf4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	691a      	ldr	r2, [r3, #16]
 8003bfa:	697b      	ldr	r3, [r7, #20]
 8003bfc:	f003 0307 	and.w	r3, r3, #7
 8003c00:	009b      	lsls	r3, r3, #2
 8003c02:	fa02 f303 	lsl.w	r3, r2, r3
 8003c06:	693a      	ldr	r2, [r7, #16]
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003c0c:	697b      	ldr	r3, [r7, #20]
 8003c0e:	08da      	lsrs	r2, r3, #3
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	3208      	adds	r2, #8
 8003c14:	6939      	ldr	r1, [r7, #16]
 8003c16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003c20:	697b      	ldr	r3, [r7, #20]
 8003c22:	005b      	lsls	r3, r3, #1
 8003c24:	2203      	movs	r2, #3
 8003c26:	fa02 f303 	lsl.w	r3, r2, r3
 8003c2a:	43db      	mvns	r3, r3
 8003c2c:	693a      	ldr	r2, [r7, #16]
 8003c2e:	4013      	ands	r3, r2
 8003c30:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	f003 0203 	and.w	r2, r3, #3
 8003c3a:	697b      	ldr	r3, [r7, #20]
 8003c3c:	005b      	lsls	r3, r3, #1
 8003c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c42:	693a      	ldr	r2, [r7, #16]
 8003c44:	4313      	orrs	r3, r2
 8003c46:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	693a      	ldr	r2, [r7, #16]
 8003c4c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	f000 80b2 	beq.w	8003dc0 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c5c:	4b61      	ldr	r3, [pc, #388]	; (8003de4 <HAL_GPIO_Init+0x2fc>)
 8003c5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c60:	4a60      	ldr	r2, [pc, #384]	; (8003de4 <HAL_GPIO_Init+0x2fc>)
 8003c62:	f043 0301 	orr.w	r3, r3, #1
 8003c66:	6613      	str	r3, [r2, #96]	; 0x60
 8003c68:	4b5e      	ldr	r3, [pc, #376]	; (8003de4 <HAL_GPIO_Init+0x2fc>)
 8003c6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c6c:	f003 0301 	and.w	r3, r3, #1
 8003c70:	60bb      	str	r3, [r7, #8]
 8003c72:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003c74:	4a5c      	ldr	r2, [pc, #368]	; (8003de8 <HAL_GPIO_Init+0x300>)
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	089b      	lsrs	r3, r3, #2
 8003c7a:	3302      	adds	r3, #2
 8003c7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c80:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003c82:	697b      	ldr	r3, [r7, #20]
 8003c84:	f003 0303 	and.w	r3, r3, #3
 8003c88:	009b      	lsls	r3, r3, #2
 8003c8a:	220f      	movs	r2, #15
 8003c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c90:	43db      	mvns	r3, r3
 8003c92:	693a      	ldr	r2, [r7, #16]
 8003c94:	4013      	ands	r3, r2
 8003c96:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003c9e:	d02b      	beq.n	8003cf8 <HAL_GPIO_Init+0x210>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	4a52      	ldr	r2, [pc, #328]	; (8003dec <HAL_GPIO_Init+0x304>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d025      	beq.n	8003cf4 <HAL_GPIO_Init+0x20c>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	4a51      	ldr	r2, [pc, #324]	; (8003df0 <HAL_GPIO_Init+0x308>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d01f      	beq.n	8003cf0 <HAL_GPIO_Init+0x208>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	4a50      	ldr	r2, [pc, #320]	; (8003df4 <HAL_GPIO_Init+0x30c>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d019      	beq.n	8003cec <HAL_GPIO_Init+0x204>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	4a4f      	ldr	r2, [pc, #316]	; (8003df8 <HAL_GPIO_Init+0x310>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d013      	beq.n	8003ce8 <HAL_GPIO_Init+0x200>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	4a4e      	ldr	r2, [pc, #312]	; (8003dfc <HAL_GPIO_Init+0x314>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d00d      	beq.n	8003ce4 <HAL_GPIO_Init+0x1fc>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	4a4d      	ldr	r2, [pc, #308]	; (8003e00 <HAL_GPIO_Init+0x318>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d007      	beq.n	8003ce0 <HAL_GPIO_Init+0x1f8>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	4a4c      	ldr	r2, [pc, #304]	; (8003e04 <HAL_GPIO_Init+0x31c>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d101      	bne.n	8003cdc <HAL_GPIO_Init+0x1f4>
 8003cd8:	2307      	movs	r3, #7
 8003cda:	e00e      	b.n	8003cfa <HAL_GPIO_Init+0x212>
 8003cdc:	2308      	movs	r3, #8
 8003cde:	e00c      	b.n	8003cfa <HAL_GPIO_Init+0x212>
 8003ce0:	2306      	movs	r3, #6
 8003ce2:	e00a      	b.n	8003cfa <HAL_GPIO_Init+0x212>
 8003ce4:	2305      	movs	r3, #5
 8003ce6:	e008      	b.n	8003cfa <HAL_GPIO_Init+0x212>
 8003ce8:	2304      	movs	r3, #4
 8003cea:	e006      	b.n	8003cfa <HAL_GPIO_Init+0x212>
 8003cec:	2303      	movs	r3, #3
 8003cee:	e004      	b.n	8003cfa <HAL_GPIO_Init+0x212>
 8003cf0:	2302      	movs	r3, #2
 8003cf2:	e002      	b.n	8003cfa <HAL_GPIO_Init+0x212>
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	e000      	b.n	8003cfa <HAL_GPIO_Init+0x212>
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	697a      	ldr	r2, [r7, #20]
 8003cfc:	f002 0203 	and.w	r2, r2, #3
 8003d00:	0092      	lsls	r2, r2, #2
 8003d02:	4093      	lsls	r3, r2
 8003d04:	693a      	ldr	r2, [r7, #16]
 8003d06:	4313      	orrs	r3, r2
 8003d08:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003d0a:	4937      	ldr	r1, [pc, #220]	; (8003de8 <HAL_GPIO_Init+0x300>)
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	089b      	lsrs	r3, r3, #2
 8003d10:	3302      	adds	r3, #2
 8003d12:	693a      	ldr	r2, [r7, #16]
 8003d14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003d18:	4b3b      	ldr	r3, [pc, #236]	; (8003e08 <HAL_GPIO_Init+0x320>)
 8003d1a:	689b      	ldr	r3, [r3, #8]
 8003d1c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	43db      	mvns	r3, r3
 8003d22:	693a      	ldr	r2, [r7, #16]
 8003d24:	4013      	ands	r3, r2
 8003d26:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d003      	beq.n	8003d3c <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8003d34:	693a      	ldr	r2, [r7, #16]
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003d3c:	4a32      	ldr	r2, [pc, #200]	; (8003e08 <HAL_GPIO_Init+0x320>)
 8003d3e:	693b      	ldr	r3, [r7, #16]
 8003d40:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003d42:	4b31      	ldr	r3, [pc, #196]	; (8003e08 <HAL_GPIO_Init+0x320>)
 8003d44:	68db      	ldr	r3, [r3, #12]
 8003d46:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	43db      	mvns	r3, r3
 8003d4c:	693a      	ldr	r2, [r7, #16]
 8003d4e:	4013      	ands	r3, r2
 8003d50:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d003      	beq.n	8003d66 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8003d5e:	693a      	ldr	r2, [r7, #16]
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	4313      	orrs	r3, r2
 8003d64:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003d66:	4a28      	ldr	r2, [pc, #160]	; (8003e08 <HAL_GPIO_Init+0x320>)
 8003d68:	693b      	ldr	r3, [r7, #16]
 8003d6a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003d6c:	4b26      	ldr	r3, [pc, #152]	; (8003e08 <HAL_GPIO_Init+0x320>)
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	43db      	mvns	r3, r3
 8003d76:	693a      	ldr	r2, [r7, #16]
 8003d78:	4013      	ands	r3, r2
 8003d7a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d003      	beq.n	8003d90 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8003d88:	693a      	ldr	r2, [r7, #16]
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003d90:	4a1d      	ldr	r2, [pc, #116]	; (8003e08 <HAL_GPIO_Init+0x320>)
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003d96:	4b1c      	ldr	r3, [pc, #112]	; (8003e08 <HAL_GPIO_Init+0x320>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	43db      	mvns	r3, r3
 8003da0:	693a      	ldr	r2, [r7, #16]
 8003da2:	4013      	ands	r3, r2
 8003da4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d003      	beq.n	8003dba <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8003db2:	693a      	ldr	r2, [r7, #16]
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	4313      	orrs	r3, r2
 8003db8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003dba:	4a13      	ldr	r2, [pc, #76]	; (8003e08 <HAL_GPIO_Init+0x320>)
 8003dbc:	693b      	ldr	r3, [r7, #16]
 8003dbe:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	3301      	adds	r3, #1
 8003dc4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	681a      	ldr	r2, [r3, #0]
 8003dca:	697b      	ldr	r3, [r7, #20]
 8003dcc:	fa22 f303 	lsr.w	r3, r2, r3
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	f47f ae91 	bne.w	8003af8 <HAL_GPIO_Init+0x10>
  }
}
 8003dd6:	bf00      	nop
 8003dd8:	bf00      	nop
 8003dda:	371c      	adds	r7, #28
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de2:	4770      	bx	lr
 8003de4:	40021000 	.word	0x40021000
 8003de8:	40010000 	.word	0x40010000
 8003dec:	48000400 	.word	0x48000400
 8003df0:	48000800 	.word	0x48000800
 8003df4:	48000c00 	.word	0x48000c00
 8003df8:	48001000 	.word	0x48001000
 8003dfc:	48001400 	.word	0x48001400
 8003e00:	48001800 	.word	0x48001800
 8003e04:	48001c00 	.word	0x48001c00
 8003e08:	40010400 	.word	0x40010400

08003e0c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b085      	sub	sp, #20
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
 8003e14:	460b      	mov	r3, r1
 8003e16:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	691a      	ldr	r2, [r3, #16]
 8003e1c:	887b      	ldrh	r3, [r7, #2]
 8003e1e:	4013      	ands	r3, r2
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d002      	beq.n	8003e2a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003e24:	2301      	movs	r3, #1
 8003e26:	73fb      	strb	r3, [r7, #15]
 8003e28:	e001      	b.n	8003e2e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003e2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	3714      	adds	r7, #20
 8003e34:	46bd      	mov	sp, r7
 8003e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3a:	4770      	bx	lr

08003e3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b083      	sub	sp, #12
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
 8003e44:	460b      	mov	r3, r1
 8003e46:	807b      	strh	r3, [r7, #2]
 8003e48:	4613      	mov	r3, r2
 8003e4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003e4c:	787b      	ldrb	r3, [r7, #1]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d003      	beq.n	8003e5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003e52:	887a      	ldrh	r2, [r7, #2]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003e58:	e002      	b.n	8003e60 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003e5a:	887a      	ldrh	r2, [r7, #2]
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003e60:	bf00      	nop
 8003e62:	370c      	adds	r7, #12
 8003e64:	46bd      	mov	sp, r7
 8003e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6a:	4770      	bx	lr

08003e6c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003e70:	4b0d      	ldr	r3, [pc, #52]	; (8003ea8 <HAL_PWREx_GetVoltageRange+0x3c>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003e78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e7c:	d102      	bne.n	8003e84 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8003e7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003e82:	e00b      	b.n	8003e9c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8003e84:	4b08      	ldr	r3, [pc, #32]	; (8003ea8 <HAL_PWREx_GetVoltageRange+0x3c>)
 8003e86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e92:	d102      	bne.n	8003e9a <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8003e94:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003e98:	e000      	b.n	8003e9c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8003e9a:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea4:	4770      	bx	lr
 8003ea6:	bf00      	nop
 8003ea8:	40007000 	.word	0x40007000

08003eac <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003eac:	b480      	push	{r7}
 8003eae:	b085      	sub	sp, #20
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d141      	bne.n	8003f3e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003eba:	4b4b      	ldr	r3, [pc, #300]	; (8003fe8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003ec2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ec6:	d131      	bne.n	8003f2c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003ec8:	4b47      	ldr	r3, [pc, #284]	; (8003fe8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003eca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ece:	4a46      	ldr	r2, [pc, #280]	; (8003fe8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ed0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ed4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003ed8:	4b43      	ldr	r3, [pc, #268]	; (8003fe8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003ee0:	4a41      	ldr	r2, [pc, #260]	; (8003fe8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ee2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003ee6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003ee8:	4b40      	ldr	r3, [pc, #256]	; (8003fec <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	2232      	movs	r2, #50	; 0x32
 8003eee:	fb02 f303 	mul.w	r3, r2, r3
 8003ef2:	4a3f      	ldr	r2, [pc, #252]	; (8003ff0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003ef4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ef8:	0c9b      	lsrs	r3, r3, #18
 8003efa:	3301      	adds	r3, #1
 8003efc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003efe:	e002      	b.n	8003f06 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	3b01      	subs	r3, #1
 8003f04:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003f06:	4b38      	ldr	r3, [pc, #224]	; (8003fe8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f08:	695b      	ldr	r3, [r3, #20]
 8003f0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f12:	d102      	bne.n	8003f1a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d1f2      	bne.n	8003f00 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003f1a:	4b33      	ldr	r3, [pc, #204]	; (8003fe8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f1c:	695b      	ldr	r3, [r3, #20]
 8003f1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f26:	d158      	bne.n	8003fda <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003f28:	2303      	movs	r3, #3
 8003f2a:	e057      	b.n	8003fdc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003f2c:	4b2e      	ldr	r3, [pc, #184]	; (8003fe8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f32:	4a2d      	ldr	r2, [pc, #180]	; (8003fe8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f38:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003f3c:	e04d      	b.n	8003fda <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f44:	d141      	bne.n	8003fca <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003f46:	4b28      	ldr	r3, [pc, #160]	; (8003fe8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003f4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f52:	d131      	bne.n	8003fb8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003f54:	4b24      	ldr	r3, [pc, #144]	; (8003fe8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f56:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f5a:	4a23      	ldr	r2, [pc, #140]	; (8003fe8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f60:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003f64:	4b20      	ldr	r3, [pc, #128]	; (8003fe8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003f6c:	4a1e      	ldr	r2, [pc, #120]	; (8003fe8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f6e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003f72:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003f74:	4b1d      	ldr	r3, [pc, #116]	; (8003fec <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	2232      	movs	r2, #50	; 0x32
 8003f7a:	fb02 f303 	mul.w	r3, r2, r3
 8003f7e:	4a1c      	ldr	r2, [pc, #112]	; (8003ff0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003f80:	fba2 2303 	umull	r2, r3, r2, r3
 8003f84:	0c9b      	lsrs	r3, r3, #18
 8003f86:	3301      	adds	r3, #1
 8003f88:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003f8a:	e002      	b.n	8003f92 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	3b01      	subs	r3, #1
 8003f90:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003f92:	4b15      	ldr	r3, [pc, #84]	; (8003fe8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f94:	695b      	ldr	r3, [r3, #20]
 8003f96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f9e:	d102      	bne.n	8003fa6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d1f2      	bne.n	8003f8c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003fa6:	4b10      	ldr	r3, [pc, #64]	; (8003fe8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fa8:	695b      	ldr	r3, [r3, #20]
 8003faa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fb2:	d112      	bne.n	8003fda <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003fb4:	2303      	movs	r3, #3
 8003fb6:	e011      	b.n	8003fdc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003fb8:	4b0b      	ldr	r3, [pc, #44]	; (8003fe8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003fbe:	4a0a      	ldr	r2, [pc, #40]	; (8003fe8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fc4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003fc8:	e007      	b.n	8003fda <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003fca:	4b07      	ldr	r3, [pc, #28]	; (8003fe8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003fd2:	4a05      	ldr	r2, [pc, #20]	; (8003fe8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fd4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003fd8:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003fda:	2300      	movs	r3, #0
}
 8003fdc:	4618      	mov	r0, r3
 8003fde:	3714      	adds	r7, #20
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe6:	4770      	bx	lr
 8003fe8:	40007000 	.word	0x40007000
 8003fec:	20000000 	.word	0x20000000
 8003ff0:	431bde83 	.word	0x431bde83

08003ff4 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8003ff8:	4b05      	ldr	r3, [pc, #20]	; (8004010 <HAL_PWREx_EnableVddIO2+0x1c>)
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	4a04      	ldr	r2, [pc, #16]	; (8004010 <HAL_PWREx_EnableVddIO2+0x1c>)
 8003ffe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004002:	6053      	str	r3, [r2, #4]
}
 8004004:	bf00      	nop
 8004006:	46bd      	mov	sp, r7
 8004008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400c:	4770      	bx	lr
 800400e:	bf00      	nop
 8004010:	40007000 	.word	0x40007000

08004014 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b088      	sub	sp, #32
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d102      	bne.n	8004028 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004022:	2301      	movs	r3, #1
 8004024:	f000 bc08 	b.w	8004838 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004028:	4b96      	ldr	r3, [pc, #600]	; (8004284 <HAL_RCC_OscConfig+0x270>)
 800402a:	689b      	ldr	r3, [r3, #8]
 800402c:	f003 030c 	and.w	r3, r3, #12
 8004030:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004032:	4b94      	ldr	r3, [pc, #592]	; (8004284 <HAL_RCC_OscConfig+0x270>)
 8004034:	68db      	ldr	r3, [r3, #12]
 8004036:	f003 0303 	and.w	r3, r3, #3
 800403a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f003 0310 	and.w	r3, r3, #16
 8004044:	2b00      	cmp	r3, #0
 8004046:	f000 80e4 	beq.w	8004212 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800404a:	69bb      	ldr	r3, [r7, #24]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d007      	beq.n	8004060 <HAL_RCC_OscConfig+0x4c>
 8004050:	69bb      	ldr	r3, [r7, #24]
 8004052:	2b0c      	cmp	r3, #12
 8004054:	f040 808b 	bne.w	800416e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004058:	697b      	ldr	r3, [r7, #20]
 800405a:	2b01      	cmp	r3, #1
 800405c:	f040 8087 	bne.w	800416e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004060:	4b88      	ldr	r3, [pc, #544]	; (8004284 <HAL_RCC_OscConfig+0x270>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f003 0302 	and.w	r3, r3, #2
 8004068:	2b00      	cmp	r3, #0
 800406a:	d005      	beq.n	8004078 <HAL_RCC_OscConfig+0x64>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	699b      	ldr	r3, [r3, #24]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d101      	bne.n	8004078 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004074:	2301      	movs	r3, #1
 8004076:	e3df      	b.n	8004838 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6a1a      	ldr	r2, [r3, #32]
 800407c:	4b81      	ldr	r3, [pc, #516]	; (8004284 <HAL_RCC_OscConfig+0x270>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f003 0308 	and.w	r3, r3, #8
 8004084:	2b00      	cmp	r3, #0
 8004086:	d004      	beq.n	8004092 <HAL_RCC_OscConfig+0x7e>
 8004088:	4b7e      	ldr	r3, [pc, #504]	; (8004284 <HAL_RCC_OscConfig+0x270>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004090:	e005      	b.n	800409e <HAL_RCC_OscConfig+0x8a>
 8004092:	4b7c      	ldr	r3, [pc, #496]	; (8004284 <HAL_RCC_OscConfig+0x270>)
 8004094:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004098:	091b      	lsrs	r3, r3, #4
 800409a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800409e:	4293      	cmp	r3, r2
 80040a0:	d223      	bcs.n	80040ea <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6a1b      	ldr	r3, [r3, #32]
 80040a6:	4618      	mov	r0, r3
 80040a8:	f000 fdfc 	bl	8004ca4 <RCC_SetFlashLatencyFromMSIRange>
 80040ac:	4603      	mov	r3, r0
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d001      	beq.n	80040b6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80040b2:	2301      	movs	r3, #1
 80040b4:	e3c0      	b.n	8004838 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80040b6:	4b73      	ldr	r3, [pc, #460]	; (8004284 <HAL_RCC_OscConfig+0x270>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a72      	ldr	r2, [pc, #456]	; (8004284 <HAL_RCC_OscConfig+0x270>)
 80040bc:	f043 0308 	orr.w	r3, r3, #8
 80040c0:	6013      	str	r3, [r2, #0]
 80040c2:	4b70      	ldr	r3, [pc, #448]	; (8004284 <HAL_RCC_OscConfig+0x270>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6a1b      	ldr	r3, [r3, #32]
 80040ce:	496d      	ldr	r1, [pc, #436]	; (8004284 <HAL_RCC_OscConfig+0x270>)
 80040d0:	4313      	orrs	r3, r2
 80040d2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80040d4:	4b6b      	ldr	r3, [pc, #428]	; (8004284 <HAL_RCC_OscConfig+0x270>)
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	69db      	ldr	r3, [r3, #28]
 80040e0:	021b      	lsls	r3, r3, #8
 80040e2:	4968      	ldr	r1, [pc, #416]	; (8004284 <HAL_RCC_OscConfig+0x270>)
 80040e4:	4313      	orrs	r3, r2
 80040e6:	604b      	str	r3, [r1, #4]
 80040e8:	e025      	b.n	8004136 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80040ea:	4b66      	ldr	r3, [pc, #408]	; (8004284 <HAL_RCC_OscConfig+0x270>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4a65      	ldr	r2, [pc, #404]	; (8004284 <HAL_RCC_OscConfig+0x270>)
 80040f0:	f043 0308 	orr.w	r3, r3, #8
 80040f4:	6013      	str	r3, [r2, #0]
 80040f6:	4b63      	ldr	r3, [pc, #396]	; (8004284 <HAL_RCC_OscConfig+0x270>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6a1b      	ldr	r3, [r3, #32]
 8004102:	4960      	ldr	r1, [pc, #384]	; (8004284 <HAL_RCC_OscConfig+0x270>)
 8004104:	4313      	orrs	r3, r2
 8004106:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004108:	4b5e      	ldr	r3, [pc, #376]	; (8004284 <HAL_RCC_OscConfig+0x270>)
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	69db      	ldr	r3, [r3, #28]
 8004114:	021b      	lsls	r3, r3, #8
 8004116:	495b      	ldr	r1, [pc, #364]	; (8004284 <HAL_RCC_OscConfig+0x270>)
 8004118:	4313      	orrs	r3, r2
 800411a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800411c:	69bb      	ldr	r3, [r7, #24]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d109      	bne.n	8004136 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6a1b      	ldr	r3, [r3, #32]
 8004126:	4618      	mov	r0, r3
 8004128:	f000 fdbc 	bl	8004ca4 <RCC_SetFlashLatencyFromMSIRange>
 800412c:	4603      	mov	r3, r0
 800412e:	2b00      	cmp	r3, #0
 8004130:	d001      	beq.n	8004136 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8004132:	2301      	movs	r3, #1
 8004134:	e380      	b.n	8004838 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004136:	f000 fcc1 	bl	8004abc <HAL_RCC_GetSysClockFreq>
 800413a:	4602      	mov	r2, r0
 800413c:	4b51      	ldr	r3, [pc, #324]	; (8004284 <HAL_RCC_OscConfig+0x270>)
 800413e:	689b      	ldr	r3, [r3, #8]
 8004140:	091b      	lsrs	r3, r3, #4
 8004142:	f003 030f 	and.w	r3, r3, #15
 8004146:	4950      	ldr	r1, [pc, #320]	; (8004288 <HAL_RCC_OscConfig+0x274>)
 8004148:	5ccb      	ldrb	r3, [r1, r3]
 800414a:	f003 031f 	and.w	r3, r3, #31
 800414e:	fa22 f303 	lsr.w	r3, r2, r3
 8004152:	4a4e      	ldr	r2, [pc, #312]	; (800428c <HAL_RCC_OscConfig+0x278>)
 8004154:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004156:	4b4e      	ldr	r3, [pc, #312]	; (8004290 <HAL_RCC_OscConfig+0x27c>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4618      	mov	r0, r3
 800415c:	f7fc ffce 	bl	80010fc <HAL_InitTick>
 8004160:	4603      	mov	r3, r0
 8004162:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004164:	7bfb      	ldrb	r3, [r7, #15]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d052      	beq.n	8004210 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800416a:	7bfb      	ldrb	r3, [r7, #15]
 800416c:	e364      	b.n	8004838 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	699b      	ldr	r3, [r3, #24]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d032      	beq.n	80041dc <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004176:	4b43      	ldr	r3, [pc, #268]	; (8004284 <HAL_RCC_OscConfig+0x270>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4a42      	ldr	r2, [pc, #264]	; (8004284 <HAL_RCC_OscConfig+0x270>)
 800417c:	f043 0301 	orr.w	r3, r3, #1
 8004180:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004182:	f7fd f8e5 	bl	8001350 <HAL_GetTick>
 8004186:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004188:	e008      	b.n	800419c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800418a:	f7fd f8e1 	bl	8001350 <HAL_GetTick>
 800418e:	4602      	mov	r2, r0
 8004190:	693b      	ldr	r3, [r7, #16]
 8004192:	1ad3      	subs	r3, r2, r3
 8004194:	2b02      	cmp	r3, #2
 8004196:	d901      	bls.n	800419c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004198:	2303      	movs	r3, #3
 800419a:	e34d      	b.n	8004838 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800419c:	4b39      	ldr	r3, [pc, #228]	; (8004284 <HAL_RCC_OscConfig+0x270>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f003 0302 	and.w	r3, r3, #2
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d0f0      	beq.n	800418a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80041a8:	4b36      	ldr	r3, [pc, #216]	; (8004284 <HAL_RCC_OscConfig+0x270>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a35      	ldr	r2, [pc, #212]	; (8004284 <HAL_RCC_OscConfig+0x270>)
 80041ae:	f043 0308 	orr.w	r3, r3, #8
 80041b2:	6013      	str	r3, [r2, #0]
 80041b4:	4b33      	ldr	r3, [pc, #204]	; (8004284 <HAL_RCC_OscConfig+0x270>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6a1b      	ldr	r3, [r3, #32]
 80041c0:	4930      	ldr	r1, [pc, #192]	; (8004284 <HAL_RCC_OscConfig+0x270>)
 80041c2:	4313      	orrs	r3, r2
 80041c4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80041c6:	4b2f      	ldr	r3, [pc, #188]	; (8004284 <HAL_RCC_OscConfig+0x270>)
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	69db      	ldr	r3, [r3, #28]
 80041d2:	021b      	lsls	r3, r3, #8
 80041d4:	492b      	ldr	r1, [pc, #172]	; (8004284 <HAL_RCC_OscConfig+0x270>)
 80041d6:	4313      	orrs	r3, r2
 80041d8:	604b      	str	r3, [r1, #4]
 80041da:	e01a      	b.n	8004212 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80041dc:	4b29      	ldr	r3, [pc, #164]	; (8004284 <HAL_RCC_OscConfig+0x270>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a28      	ldr	r2, [pc, #160]	; (8004284 <HAL_RCC_OscConfig+0x270>)
 80041e2:	f023 0301 	bic.w	r3, r3, #1
 80041e6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80041e8:	f7fd f8b2 	bl	8001350 <HAL_GetTick>
 80041ec:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80041ee:	e008      	b.n	8004202 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80041f0:	f7fd f8ae 	bl	8001350 <HAL_GetTick>
 80041f4:	4602      	mov	r2, r0
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	1ad3      	subs	r3, r2, r3
 80041fa:	2b02      	cmp	r3, #2
 80041fc:	d901      	bls.n	8004202 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80041fe:	2303      	movs	r3, #3
 8004200:	e31a      	b.n	8004838 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004202:	4b20      	ldr	r3, [pc, #128]	; (8004284 <HAL_RCC_OscConfig+0x270>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f003 0302 	and.w	r3, r3, #2
 800420a:	2b00      	cmp	r3, #0
 800420c:	d1f0      	bne.n	80041f0 <HAL_RCC_OscConfig+0x1dc>
 800420e:	e000      	b.n	8004212 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004210:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f003 0301 	and.w	r3, r3, #1
 800421a:	2b00      	cmp	r3, #0
 800421c:	d073      	beq.n	8004306 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800421e:	69bb      	ldr	r3, [r7, #24]
 8004220:	2b08      	cmp	r3, #8
 8004222:	d005      	beq.n	8004230 <HAL_RCC_OscConfig+0x21c>
 8004224:	69bb      	ldr	r3, [r7, #24]
 8004226:	2b0c      	cmp	r3, #12
 8004228:	d10e      	bne.n	8004248 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800422a:	697b      	ldr	r3, [r7, #20]
 800422c:	2b03      	cmp	r3, #3
 800422e:	d10b      	bne.n	8004248 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004230:	4b14      	ldr	r3, [pc, #80]	; (8004284 <HAL_RCC_OscConfig+0x270>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004238:	2b00      	cmp	r3, #0
 800423a:	d063      	beq.n	8004304 <HAL_RCC_OscConfig+0x2f0>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d15f      	bne.n	8004304 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004244:	2301      	movs	r3, #1
 8004246:	e2f7      	b.n	8004838 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004250:	d106      	bne.n	8004260 <HAL_RCC_OscConfig+0x24c>
 8004252:	4b0c      	ldr	r3, [pc, #48]	; (8004284 <HAL_RCC_OscConfig+0x270>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4a0b      	ldr	r2, [pc, #44]	; (8004284 <HAL_RCC_OscConfig+0x270>)
 8004258:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800425c:	6013      	str	r3, [r2, #0]
 800425e:	e025      	b.n	80042ac <HAL_RCC_OscConfig+0x298>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004268:	d114      	bne.n	8004294 <HAL_RCC_OscConfig+0x280>
 800426a:	4b06      	ldr	r3, [pc, #24]	; (8004284 <HAL_RCC_OscConfig+0x270>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4a05      	ldr	r2, [pc, #20]	; (8004284 <HAL_RCC_OscConfig+0x270>)
 8004270:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004274:	6013      	str	r3, [r2, #0]
 8004276:	4b03      	ldr	r3, [pc, #12]	; (8004284 <HAL_RCC_OscConfig+0x270>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a02      	ldr	r2, [pc, #8]	; (8004284 <HAL_RCC_OscConfig+0x270>)
 800427c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004280:	6013      	str	r3, [r2, #0]
 8004282:	e013      	b.n	80042ac <HAL_RCC_OscConfig+0x298>
 8004284:	40021000 	.word	0x40021000
 8004288:	0800d7c0 	.word	0x0800d7c0
 800428c:	20000000 	.word	0x20000000
 8004290:	20000004 	.word	0x20000004
 8004294:	4ba0      	ldr	r3, [pc, #640]	; (8004518 <HAL_RCC_OscConfig+0x504>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a9f      	ldr	r2, [pc, #636]	; (8004518 <HAL_RCC_OscConfig+0x504>)
 800429a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800429e:	6013      	str	r3, [r2, #0]
 80042a0:	4b9d      	ldr	r3, [pc, #628]	; (8004518 <HAL_RCC_OscConfig+0x504>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a9c      	ldr	r2, [pc, #624]	; (8004518 <HAL_RCC_OscConfig+0x504>)
 80042a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80042aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d013      	beq.n	80042dc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042b4:	f7fd f84c 	bl	8001350 <HAL_GetTick>
 80042b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80042ba:	e008      	b.n	80042ce <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042bc:	f7fd f848 	bl	8001350 <HAL_GetTick>
 80042c0:	4602      	mov	r2, r0
 80042c2:	693b      	ldr	r3, [r7, #16]
 80042c4:	1ad3      	subs	r3, r2, r3
 80042c6:	2b64      	cmp	r3, #100	; 0x64
 80042c8:	d901      	bls.n	80042ce <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80042ca:	2303      	movs	r3, #3
 80042cc:	e2b4      	b.n	8004838 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80042ce:	4b92      	ldr	r3, [pc, #584]	; (8004518 <HAL_RCC_OscConfig+0x504>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d0f0      	beq.n	80042bc <HAL_RCC_OscConfig+0x2a8>
 80042da:	e014      	b.n	8004306 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042dc:	f7fd f838 	bl	8001350 <HAL_GetTick>
 80042e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80042e2:	e008      	b.n	80042f6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042e4:	f7fd f834 	bl	8001350 <HAL_GetTick>
 80042e8:	4602      	mov	r2, r0
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	1ad3      	subs	r3, r2, r3
 80042ee:	2b64      	cmp	r3, #100	; 0x64
 80042f0:	d901      	bls.n	80042f6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80042f2:	2303      	movs	r3, #3
 80042f4:	e2a0      	b.n	8004838 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80042f6:	4b88      	ldr	r3, [pc, #544]	; (8004518 <HAL_RCC_OscConfig+0x504>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d1f0      	bne.n	80042e4 <HAL_RCC_OscConfig+0x2d0>
 8004302:	e000      	b.n	8004306 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004304:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f003 0302 	and.w	r3, r3, #2
 800430e:	2b00      	cmp	r3, #0
 8004310:	d060      	beq.n	80043d4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004312:	69bb      	ldr	r3, [r7, #24]
 8004314:	2b04      	cmp	r3, #4
 8004316:	d005      	beq.n	8004324 <HAL_RCC_OscConfig+0x310>
 8004318:	69bb      	ldr	r3, [r7, #24]
 800431a:	2b0c      	cmp	r3, #12
 800431c:	d119      	bne.n	8004352 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800431e:	697b      	ldr	r3, [r7, #20]
 8004320:	2b02      	cmp	r3, #2
 8004322:	d116      	bne.n	8004352 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004324:	4b7c      	ldr	r3, [pc, #496]	; (8004518 <HAL_RCC_OscConfig+0x504>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800432c:	2b00      	cmp	r3, #0
 800432e:	d005      	beq.n	800433c <HAL_RCC_OscConfig+0x328>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	68db      	ldr	r3, [r3, #12]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d101      	bne.n	800433c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004338:	2301      	movs	r3, #1
 800433a:	e27d      	b.n	8004838 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800433c:	4b76      	ldr	r3, [pc, #472]	; (8004518 <HAL_RCC_OscConfig+0x504>)
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	691b      	ldr	r3, [r3, #16]
 8004348:	061b      	lsls	r3, r3, #24
 800434a:	4973      	ldr	r1, [pc, #460]	; (8004518 <HAL_RCC_OscConfig+0x504>)
 800434c:	4313      	orrs	r3, r2
 800434e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004350:	e040      	b.n	80043d4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	68db      	ldr	r3, [r3, #12]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d023      	beq.n	80043a2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800435a:	4b6f      	ldr	r3, [pc, #444]	; (8004518 <HAL_RCC_OscConfig+0x504>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4a6e      	ldr	r2, [pc, #440]	; (8004518 <HAL_RCC_OscConfig+0x504>)
 8004360:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004364:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004366:	f7fc fff3 	bl	8001350 <HAL_GetTick>
 800436a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800436c:	e008      	b.n	8004380 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800436e:	f7fc ffef 	bl	8001350 <HAL_GetTick>
 8004372:	4602      	mov	r2, r0
 8004374:	693b      	ldr	r3, [r7, #16]
 8004376:	1ad3      	subs	r3, r2, r3
 8004378:	2b02      	cmp	r3, #2
 800437a:	d901      	bls.n	8004380 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800437c:	2303      	movs	r3, #3
 800437e:	e25b      	b.n	8004838 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004380:	4b65      	ldr	r3, [pc, #404]	; (8004518 <HAL_RCC_OscConfig+0x504>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004388:	2b00      	cmp	r3, #0
 800438a:	d0f0      	beq.n	800436e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800438c:	4b62      	ldr	r3, [pc, #392]	; (8004518 <HAL_RCC_OscConfig+0x504>)
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	691b      	ldr	r3, [r3, #16]
 8004398:	061b      	lsls	r3, r3, #24
 800439a:	495f      	ldr	r1, [pc, #380]	; (8004518 <HAL_RCC_OscConfig+0x504>)
 800439c:	4313      	orrs	r3, r2
 800439e:	604b      	str	r3, [r1, #4]
 80043a0:	e018      	b.n	80043d4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80043a2:	4b5d      	ldr	r3, [pc, #372]	; (8004518 <HAL_RCC_OscConfig+0x504>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a5c      	ldr	r2, [pc, #368]	; (8004518 <HAL_RCC_OscConfig+0x504>)
 80043a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80043ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043ae:	f7fc ffcf 	bl	8001350 <HAL_GetTick>
 80043b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80043b4:	e008      	b.n	80043c8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043b6:	f7fc ffcb 	bl	8001350 <HAL_GetTick>
 80043ba:	4602      	mov	r2, r0
 80043bc:	693b      	ldr	r3, [r7, #16]
 80043be:	1ad3      	subs	r3, r2, r3
 80043c0:	2b02      	cmp	r3, #2
 80043c2:	d901      	bls.n	80043c8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80043c4:	2303      	movs	r3, #3
 80043c6:	e237      	b.n	8004838 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80043c8:	4b53      	ldr	r3, [pc, #332]	; (8004518 <HAL_RCC_OscConfig+0x504>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d1f0      	bne.n	80043b6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f003 0308 	and.w	r3, r3, #8
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d03c      	beq.n	800445a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	695b      	ldr	r3, [r3, #20]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d01c      	beq.n	8004422 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80043e8:	4b4b      	ldr	r3, [pc, #300]	; (8004518 <HAL_RCC_OscConfig+0x504>)
 80043ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043ee:	4a4a      	ldr	r2, [pc, #296]	; (8004518 <HAL_RCC_OscConfig+0x504>)
 80043f0:	f043 0301 	orr.w	r3, r3, #1
 80043f4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043f8:	f7fc ffaa 	bl	8001350 <HAL_GetTick>
 80043fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80043fe:	e008      	b.n	8004412 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004400:	f7fc ffa6 	bl	8001350 <HAL_GetTick>
 8004404:	4602      	mov	r2, r0
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	1ad3      	subs	r3, r2, r3
 800440a:	2b02      	cmp	r3, #2
 800440c:	d901      	bls.n	8004412 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800440e:	2303      	movs	r3, #3
 8004410:	e212      	b.n	8004838 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004412:	4b41      	ldr	r3, [pc, #260]	; (8004518 <HAL_RCC_OscConfig+0x504>)
 8004414:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004418:	f003 0302 	and.w	r3, r3, #2
 800441c:	2b00      	cmp	r3, #0
 800441e:	d0ef      	beq.n	8004400 <HAL_RCC_OscConfig+0x3ec>
 8004420:	e01b      	b.n	800445a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004422:	4b3d      	ldr	r3, [pc, #244]	; (8004518 <HAL_RCC_OscConfig+0x504>)
 8004424:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004428:	4a3b      	ldr	r2, [pc, #236]	; (8004518 <HAL_RCC_OscConfig+0x504>)
 800442a:	f023 0301 	bic.w	r3, r3, #1
 800442e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004432:	f7fc ff8d 	bl	8001350 <HAL_GetTick>
 8004436:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004438:	e008      	b.n	800444c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800443a:	f7fc ff89 	bl	8001350 <HAL_GetTick>
 800443e:	4602      	mov	r2, r0
 8004440:	693b      	ldr	r3, [r7, #16]
 8004442:	1ad3      	subs	r3, r2, r3
 8004444:	2b02      	cmp	r3, #2
 8004446:	d901      	bls.n	800444c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004448:	2303      	movs	r3, #3
 800444a:	e1f5      	b.n	8004838 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800444c:	4b32      	ldr	r3, [pc, #200]	; (8004518 <HAL_RCC_OscConfig+0x504>)
 800444e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004452:	f003 0302 	and.w	r3, r3, #2
 8004456:	2b00      	cmp	r3, #0
 8004458:	d1ef      	bne.n	800443a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f003 0304 	and.w	r3, r3, #4
 8004462:	2b00      	cmp	r3, #0
 8004464:	f000 80a6 	beq.w	80045b4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004468:	2300      	movs	r3, #0
 800446a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800446c:	4b2a      	ldr	r3, [pc, #168]	; (8004518 <HAL_RCC_OscConfig+0x504>)
 800446e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004470:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004474:	2b00      	cmp	r3, #0
 8004476:	d10d      	bne.n	8004494 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004478:	4b27      	ldr	r3, [pc, #156]	; (8004518 <HAL_RCC_OscConfig+0x504>)
 800447a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800447c:	4a26      	ldr	r2, [pc, #152]	; (8004518 <HAL_RCC_OscConfig+0x504>)
 800447e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004482:	6593      	str	r3, [r2, #88]	; 0x58
 8004484:	4b24      	ldr	r3, [pc, #144]	; (8004518 <HAL_RCC_OscConfig+0x504>)
 8004486:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004488:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800448c:	60bb      	str	r3, [r7, #8]
 800448e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004490:	2301      	movs	r3, #1
 8004492:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004494:	4b21      	ldr	r3, [pc, #132]	; (800451c <HAL_RCC_OscConfig+0x508>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800449c:	2b00      	cmp	r3, #0
 800449e:	d118      	bne.n	80044d2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80044a0:	4b1e      	ldr	r3, [pc, #120]	; (800451c <HAL_RCC_OscConfig+0x508>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a1d      	ldr	r2, [pc, #116]	; (800451c <HAL_RCC_OscConfig+0x508>)
 80044a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044aa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044ac:	f7fc ff50 	bl	8001350 <HAL_GetTick>
 80044b0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80044b2:	e008      	b.n	80044c6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044b4:	f7fc ff4c 	bl	8001350 <HAL_GetTick>
 80044b8:	4602      	mov	r2, r0
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	1ad3      	subs	r3, r2, r3
 80044be:	2b02      	cmp	r3, #2
 80044c0:	d901      	bls.n	80044c6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80044c2:	2303      	movs	r3, #3
 80044c4:	e1b8      	b.n	8004838 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80044c6:	4b15      	ldr	r3, [pc, #84]	; (800451c <HAL_RCC_OscConfig+0x508>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d0f0      	beq.n	80044b4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	689b      	ldr	r3, [r3, #8]
 80044d6:	2b01      	cmp	r3, #1
 80044d8:	d108      	bne.n	80044ec <HAL_RCC_OscConfig+0x4d8>
 80044da:	4b0f      	ldr	r3, [pc, #60]	; (8004518 <HAL_RCC_OscConfig+0x504>)
 80044dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044e0:	4a0d      	ldr	r2, [pc, #52]	; (8004518 <HAL_RCC_OscConfig+0x504>)
 80044e2:	f043 0301 	orr.w	r3, r3, #1
 80044e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80044ea:	e029      	b.n	8004540 <HAL_RCC_OscConfig+0x52c>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	689b      	ldr	r3, [r3, #8]
 80044f0:	2b05      	cmp	r3, #5
 80044f2:	d115      	bne.n	8004520 <HAL_RCC_OscConfig+0x50c>
 80044f4:	4b08      	ldr	r3, [pc, #32]	; (8004518 <HAL_RCC_OscConfig+0x504>)
 80044f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044fa:	4a07      	ldr	r2, [pc, #28]	; (8004518 <HAL_RCC_OscConfig+0x504>)
 80044fc:	f043 0304 	orr.w	r3, r3, #4
 8004500:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004504:	4b04      	ldr	r3, [pc, #16]	; (8004518 <HAL_RCC_OscConfig+0x504>)
 8004506:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800450a:	4a03      	ldr	r2, [pc, #12]	; (8004518 <HAL_RCC_OscConfig+0x504>)
 800450c:	f043 0301 	orr.w	r3, r3, #1
 8004510:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004514:	e014      	b.n	8004540 <HAL_RCC_OscConfig+0x52c>
 8004516:	bf00      	nop
 8004518:	40021000 	.word	0x40021000
 800451c:	40007000 	.word	0x40007000
 8004520:	4b9d      	ldr	r3, [pc, #628]	; (8004798 <HAL_RCC_OscConfig+0x784>)
 8004522:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004526:	4a9c      	ldr	r2, [pc, #624]	; (8004798 <HAL_RCC_OscConfig+0x784>)
 8004528:	f023 0301 	bic.w	r3, r3, #1
 800452c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004530:	4b99      	ldr	r3, [pc, #612]	; (8004798 <HAL_RCC_OscConfig+0x784>)
 8004532:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004536:	4a98      	ldr	r2, [pc, #608]	; (8004798 <HAL_RCC_OscConfig+0x784>)
 8004538:	f023 0304 	bic.w	r3, r3, #4
 800453c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	689b      	ldr	r3, [r3, #8]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d016      	beq.n	8004576 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004548:	f7fc ff02 	bl	8001350 <HAL_GetTick>
 800454c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800454e:	e00a      	b.n	8004566 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004550:	f7fc fefe 	bl	8001350 <HAL_GetTick>
 8004554:	4602      	mov	r2, r0
 8004556:	693b      	ldr	r3, [r7, #16]
 8004558:	1ad3      	subs	r3, r2, r3
 800455a:	f241 3288 	movw	r2, #5000	; 0x1388
 800455e:	4293      	cmp	r3, r2
 8004560:	d901      	bls.n	8004566 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004562:	2303      	movs	r3, #3
 8004564:	e168      	b.n	8004838 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004566:	4b8c      	ldr	r3, [pc, #560]	; (8004798 <HAL_RCC_OscConfig+0x784>)
 8004568:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800456c:	f003 0302 	and.w	r3, r3, #2
 8004570:	2b00      	cmp	r3, #0
 8004572:	d0ed      	beq.n	8004550 <HAL_RCC_OscConfig+0x53c>
 8004574:	e015      	b.n	80045a2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004576:	f7fc feeb 	bl	8001350 <HAL_GetTick>
 800457a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800457c:	e00a      	b.n	8004594 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800457e:	f7fc fee7 	bl	8001350 <HAL_GetTick>
 8004582:	4602      	mov	r2, r0
 8004584:	693b      	ldr	r3, [r7, #16]
 8004586:	1ad3      	subs	r3, r2, r3
 8004588:	f241 3288 	movw	r2, #5000	; 0x1388
 800458c:	4293      	cmp	r3, r2
 800458e:	d901      	bls.n	8004594 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004590:	2303      	movs	r3, #3
 8004592:	e151      	b.n	8004838 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004594:	4b80      	ldr	r3, [pc, #512]	; (8004798 <HAL_RCC_OscConfig+0x784>)
 8004596:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800459a:	f003 0302 	and.w	r3, r3, #2
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d1ed      	bne.n	800457e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80045a2:	7ffb      	ldrb	r3, [r7, #31]
 80045a4:	2b01      	cmp	r3, #1
 80045a6:	d105      	bne.n	80045b4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045a8:	4b7b      	ldr	r3, [pc, #492]	; (8004798 <HAL_RCC_OscConfig+0x784>)
 80045aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045ac:	4a7a      	ldr	r2, [pc, #488]	; (8004798 <HAL_RCC_OscConfig+0x784>)
 80045ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045b2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f003 0320 	and.w	r3, r3, #32
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d03c      	beq.n	800463a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d01c      	beq.n	8004602 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80045c8:	4b73      	ldr	r3, [pc, #460]	; (8004798 <HAL_RCC_OscConfig+0x784>)
 80045ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80045ce:	4a72      	ldr	r2, [pc, #456]	; (8004798 <HAL_RCC_OscConfig+0x784>)
 80045d0:	f043 0301 	orr.w	r3, r3, #1
 80045d4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045d8:	f7fc feba 	bl	8001350 <HAL_GetTick>
 80045dc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80045de:	e008      	b.n	80045f2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80045e0:	f7fc feb6 	bl	8001350 <HAL_GetTick>
 80045e4:	4602      	mov	r2, r0
 80045e6:	693b      	ldr	r3, [r7, #16]
 80045e8:	1ad3      	subs	r3, r2, r3
 80045ea:	2b02      	cmp	r3, #2
 80045ec:	d901      	bls.n	80045f2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80045ee:	2303      	movs	r3, #3
 80045f0:	e122      	b.n	8004838 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80045f2:	4b69      	ldr	r3, [pc, #420]	; (8004798 <HAL_RCC_OscConfig+0x784>)
 80045f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80045f8:	f003 0302 	and.w	r3, r3, #2
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d0ef      	beq.n	80045e0 <HAL_RCC_OscConfig+0x5cc>
 8004600:	e01b      	b.n	800463a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004602:	4b65      	ldr	r3, [pc, #404]	; (8004798 <HAL_RCC_OscConfig+0x784>)
 8004604:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004608:	4a63      	ldr	r2, [pc, #396]	; (8004798 <HAL_RCC_OscConfig+0x784>)
 800460a:	f023 0301 	bic.w	r3, r3, #1
 800460e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004612:	f7fc fe9d 	bl	8001350 <HAL_GetTick>
 8004616:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004618:	e008      	b.n	800462c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800461a:	f7fc fe99 	bl	8001350 <HAL_GetTick>
 800461e:	4602      	mov	r2, r0
 8004620:	693b      	ldr	r3, [r7, #16]
 8004622:	1ad3      	subs	r3, r2, r3
 8004624:	2b02      	cmp	r3, #2
 8004626:	d901      	bls.n	800462c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004628:	2303      	movs	r3, #3
 800462a:	e105      	b.n	8004838 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800462c:	4b5a      	ldr	r3, [pc, #360]	; (8004798 <HAL_RCC_OscConfig+0x784>)
 800462e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004632:	f003 0302 	and.w	r3, r3, #2
 8004636:	2b00      	cmp	r3, #0
 8004638:	d1ef      	bne.n	800461a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800463e:	2b00      	cmp	r3, #0
 8004640:	f000 80f9 	beq.w	8004836 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004648:	2b02      	cmp	r3, #2
 800464a:	f040 80cf 	bne.w	80047ec <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800464e:	4b52      	ldr	r3, [pc, #328]	; (8004798 <HAL_RCC_OscConfig+0x784>)
 8004650:	68db      	ldr	r3, [r3, #12]
 8004652:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004654:	697b      	ldr	r3, [r7, #20]
 8004656:	f003 0203 	and.w	r2, r3, #3
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800465e:	429a      	cmp	r2, r3
 8004660:	d12c      	bne.n	80046bc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004662:	697b      	ldr	r3, [r7, #20]
 8004664:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800466c:	3b01      	subs	r3, #1
 800466e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004670:	429a      	cmp	r2, r3
 8004672:	d123      	bne.n	80046bc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004674:	697b      	ldr	r3, [r7, #20]
 8004676:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800467e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004680:	429a      	cmp	r2, r3
 8004682:	d11b      	bne.n	80046bc <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004684:	697b      	ldr	r3, [r7, #20]
 8004686:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800468e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004690:	429a      	cmp	r2, r3
 8004692:	d113      	bne.n	80046bc <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004694:	697b      	ldr	r3, [r7, #20]
 8004696:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800469e:	085b      	lsrs	r3, r3, #1
 80046a0:	3b01      	subs	r3, #1
 80046a2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80046a4:	429a      	cmp	r2, r3
 80046a6:	d109      	bne.n	80046bc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80046a8:	697b      	ldr	r3, [r7, #20]
 80046aa:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046b2:	085b      	lsrs	r3, r3, #1
 80046b4:	3b01      	subs	r3, #1
 80046b6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80046b8:	429a      	cmp	r2, r3
 80046ba:	d071      	beq.n	80047a0 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80046bc:	69bb      	ldr	r3, [r7, #24]
 80046be:	2b0c      	cmp	r3, #12
 80046c0:	d068      	beq.n	8004794 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80046c2:	4b35      	ldr	r3, [pc, #212]	; (8004798 <HAL_RCC_OscConfig+0x784>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d105      	bne.n	80046da <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80046ce:	4b32      	ldr	r3, [pc, #200]	; (8004798 <HAL_RCC_OscConfig+0x784>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d001      	beq.n	80046de <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80046da:	2301      	movs	r3, #1
 80046dc:	e0ac      	b.n	8004838 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80046de:	4b2e      	ldr	r3, [pc, #184]	; (8004798 <HAL_RCC_OscConfig+0x784>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4a2d      	ldr	r2, [pc, #180]	; (8004798 <HAL_RCC_OscConfig+0x784>)
 80046e4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80046e8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80046ea:	f7fc fe31 	bl	8001350 <HAL_GetTick>
 80046ee:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046f0:	e008      	b.n	8004704 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046f2:	f7fc fe2d 	bl	8001350 <HAL_GetTick>
 80046f6:	4602      	mov	r2, r0
 80046f8:	693b      	ldr	r3, [r7, #16]
 80046fa:	1ad3      	subs	r3, r2, r3
 80046fc:	2b02      	cmp	r3, #2
 80046fe:	d901      	bls.n	8004704 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8004700:	2303      	movs	r3, #3
 8004702:	e099      	b.n	8004838 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004704:	4b24      	ldr	r3, [pc, #144]	; (8004798 <HAL_RCC_OscConfig+0x784>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800470c:	2b00      	cmp	r3, #0
 800470e:	d1f0      	bne.n	80046f2 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004710:	4b21      	ldr	r3, [pc, #132]	; (8004798 <HAL_RCC_OscConfig+0x784>)
 8004712:	68da      	ldr	r2, [r3, #12]
 8004714:	4b21      	ldr	r3, [pc, #132]	; (800479c <HAL_RCC_OscConfig+0x788>)
 8004716:	4013      	ands	r3, r2
 8004718:	687a      	ldr	r2, [r7, #4]
 800471a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800471c:	687a      	ldr	r2, [r7, #4]
 800471e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004720:	3a01      	subs	r2, #1
 8004722:	0112      	lsls	r2, r2, #4
 8004724:	4311      	orrs	r1, r2
 8004726:	687a      	ldr	r2, [r7, #4]
 8004728:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800472a:	0212      	lsls	r2, r2, #8
 800472c:	4311      	orrs	r1, r2
 800472e:	687a      	ldr	r2, [r7, #4]
 8004730:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004732:	0852      	lsrs	r2, r2, #1
 8004734:	3a01      	subs	r2, #1
 8004736:	0552      	lsls	r2, r2, #21
 8004738:	4311      	orrs	r1, r2
 800473a:	687a      	ldr	r2, [r7, #4]
 800473c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800473e:	0852      	lsrs	r2, r2, #1
 8004740:	3a01      	subs	r2, #1
 8004742:	0652      	lsls	r2, r2, #25
 8004744:	4311      	orrs	r1, r2
 8004746:	687a      	ldr	r2, [r7, #4]
 8004748:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800474a:	06d2      	lsls	r2, r2, #27
 800474c:	430a      	orrs	r2, r1
 800474e:	4912      	ldr	r1, [pc, #72]	; (8004798 <HAL_RCC_OscConfig+0x784>)
 8004750:	4313      	orrs	r3, r2
 8004752:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004754:	4b10      	ldr	r3, [pc, #64]	; (8004798 <HAL_RCC_OscConfig+0x784>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4a0f      	ldr	r2, [pc, #60]	; (8004798 <HAL_RCC_OscConfig+0x784>)
 800475a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800475e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004760:	4b0d      	ldr	r3, [pc, #52]	; (8004798 <HAL_RCC_OscConfig+0x784>)
 8004762:	68db      	ldr	r3, [r3, #12]
 8004764:	4a0c      	ldr	r2, [pc, #48]	; (8004798 <HAL_RCC_OscConfig+0x784>)
 8004766:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800476a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800476c:	f7fc fdf0 	bl	8001350 <HAL_GetTick>
 8004770:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004772:	e008      	b.n	8004786 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004774:	f7fc fdec 	bl	8001350 <HAL_GetTick>
 8004778:	4602      	mov	r2, r0
 800477a:	693b      	ldr	r3, [r7, #16]
 800477c:	1ad3      	subs	r3, r2, r3
 800477e:	2b02      	cmp	r3, #2
 8004780:	d901      	bls.n	8004786 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8004782:	2303      	movs	r3, #3
 8004784:	e058      	b.n	8004838 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004786:	4b04      	ldr	r3, [pc, #16]	; (8004798 <HAL_RCC_OscConfig+0x784>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800478e:	2b00      	cmp	r3, #0
 8004790:	d0f0      	beq.n	8004774 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004792:	e050      	b.n	8004836 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004794:	2301      	movs	r3, #1
 8004796:	e04f      	b.n	8004838 <HAL_RCC_OscConfig+0x824>
 8004798:	40021000 	.word	0x40021000
 800479c:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80047a0:	4b27      	ldr	r3, [pc, #156]	; (8004840 <HAL_RCC_OscConfig+0x82c>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d144      	bne.n	8004836 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80047ac:	4b24      	ldr	r3, [pc, #144]	; (8004840 <HAL_RCC_OscConfig+0x82c>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a23      	ldr	r2, [pc, #140]	; (8004840 <HAL_RCC_OscConfig+0x82c>)
 80047b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80047b6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80047b8:	4b21      	ldr	r3, [pc, #132]	; (8004840 <HAL_RCC_OscConfig+0x82c>)
 80047ba:	68db      	ldr	r3, [r3, #12]
 80047bc:	4a20      	ldr	r2, [pc, #128]	; (8004840 <HAL_RCC_OscConfig+0x82c>)
 80047be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80047c2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80047c4:	f7fc fdc4 	bl	8001350 <HAL_GetTick>
 80047c8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80047ca:	e008      	b.n	80047de <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047cc:	f7fc fdc0 	bl	8001350 <HAL_GetTick>
 80047d0:	4602      	mov	r2, r0
 80047d2:	693b      	ldr	r3, [r7, #16]
 80047d4:	1ad3      	subs	r3, r2, r3
 80047d6:	2b02      	cmp	r3, #2
 80047d8:	d901      	bls.n	80047de <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80047da:	2303      	movs	r3, #3
 80047dc:	e02c      	b.n	8004838 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80047de:	4b18      	ldr	r3, [pc, #96]	; (8004840 <HAL_RCC_OscConfig+0x82c>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d0f0      	beq.n	80047cc <HAL_RCC_OscConfig+0x7b8>
 80047ea:	e024      	b.n	8004836 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80047ec:	69bb      	ldr	r3, [r7, #24]
 80047ee:	2b0c      	cmp	r3, #12
 80047f0:	d01f      	beq.n	8004832 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047f2:	4b13      	ldr	r3, [pc, #76]	; (8004840 <HAL_RCC_OscConfig+0x82c>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4a12      	ldr	r2, [pc, #72]	; (8004840 <HAL_RCC_OscConfig+0x82c>)
 80047f8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80047fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047fe:	f7fc fda7 	bl	8001350 <HAL_GetTick>
 8004802:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004804:	e008      	b.n	8004818 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004806:	f7fc fda3 	bl	8001350 <HAL_GetTick>
 800480a:	4602      	mov	r2, r0
 800480c:	693b      	ldr	r3, [r7, #16]
 800480e:	1ad3      	subs	r3, r2, r3
 8004810:	2b02      	cmp	r3, #2
 8004812:	d901      	bls.n	8004818 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8004814:	2303      	movs	r3, #3
 8004816:	e00f      	b.n	8004838 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004818:	4b09      	ldr	r3, [pc, #36]	; (8004840 <HAL_RCC_OscConfig+0x82c>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004820:	2b00      	cmp	r3, #0
 8004822:	d1f0      	bne.n	8004806 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004824:	4b06      	ldr	r3, [pc, #24]	; (8004840 <HAL_RCC_OscConfig+0x82c>)
 8004826:	68da      	ldr	r2, [r3, #12]
 8004828:	4905      	ldr	r1, [pc, #20]	; (8004840 <HAL_RCC_OscConfig+0x82c>)
 800482a:	4b06      	ldr	r3, [pc, #24]	; (8004844 <HAL_RCC_OscConfig+0x830>)
 800482c:	4013      	ands	r3, r2
 800482e:	60cb      	str	r3, [r1, #12]
 8004830:	e001      	b.n	8004836 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004832:	2301      	movs	r3, #1
 8004834:	e000      	b.n	8004838 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8004836:	2300      	movs	r3, #0
}
 8004838:	4618      	mov	r0, r3
 800483a:	3720      	adds	r7, #32
 800483c:	46bd      	mov	sp, r7
 800483e:	bd80      	pop	{r7, pc}
 8004840:	40021000 	.word	0x40021000
 8004844:	feeefffc 	.word	0xfeeefffc

08004848 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b086      	sub	sp, #24
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
 8004850:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004852:	2300      	movs	r3, #0
 8004854:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d101      	bne.n	8004860 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800485c:	2301      	movs	r3, #1
 800485e:	e11d      	b.n	8004a9c <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004860:	4b90      	ldr	r3, [pc, #576]	; (8004aa4 <HAL_RCC_ClockConfig+0x25c>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f003 030f 	and.w	r3, r3, #15
 8004868:	683a      	ldr	r2, [r7, #0]
 800486a:	429a      	cmp	r2, r3
 800486c:	d910      	bls.n	8004890 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800486e:	4b8d      	ldr	r3, [pc, #564]	; (8004aa4 <HAL_RCC_ClockConfig+0x25c>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f023 020f 	bic.w	r2, r3, #15
 8004876:	498b      	ldr	r1, [pc, #556]	; (8004aa4 <HAL_RCC_ClockConfig+0x25c>)
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	4313      	orrs	r3, r2
 800487c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800487e:	4b89      	ldr	r3, [pc, #548]	; (8004aa4 <HAL_RCC_ClockConfig+0x25c>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f003 030f 	and.w	r3, r3, #15
 8004886:	683a      	ldr	r2, [r7, #0]
 8004888:	429a      	cmp	r2, r3
 800488a:	d001      	beq.n	8004890 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800488c:	2301      	movs	r3, #1
 800488e:	e105      	b.n	8004a9c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f003 0302 	and.w	r3, r3, #2
 8004898:	2b00      	cmp	r3, #0
 800489a:	d010      	beq.n	80048be <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	689a      	ldr	r2, [r3, #8]
 80048a0:	4b81      	ldr	r3, [pc, #516]	; (8004aa8 <HAL_RCC_ClockConfig+0x260>)
 80048a2:	689b      	ldr	r3, [r3, #8]
 80048a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80048a8:	429a      	cmp	r2, r3
 80048aa:	d908      	bls.n	80048be <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048ac:	4b7e      	ldr	r3, [pc, #504]	; (8004aa8 <HAL_RCC_ClockConfig+0x260>)
 80048ae:	689b      	ldr	r3, [r3, #8]
 80048b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	689b      	ldr	r3, [r3, #8]
 80048b8:	497b      	ldr	r1, [pc, #492]	; (8004aa8 <HAL_RCC_ClockConfig+0x260>)
 80048ba:	4313      	orrs	r3, r2
 80048bc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f003 0301 	and.w	r3, r3, #1
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d079      	beq.n	80049be <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	2b03      	cmp	r3, #3
 80048d0:	d11e      	bne.n	8004910 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80048d2:	4b75      	ldr	r3, [pc, #468]	; (8004aa8 <HAL_RCC_ClockConfig+0x260>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d101      	bne.n	80048e2 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 80048de:	2301      	movs	r3, #1
 80048e0:	e0dc      	b.n	8004a9c <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 80048e2:	f000 fa39 	bl	8004d58 <RCC_GetSysClockFreqFromPLLSource>
 80048e6:	4603      	mov	r3, r0
 80048e8:	4a70      	ldr	r2, [pc, #448]	; (8004aac <HAL_RCC_ClockConfig+0x264>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d946      	bls.n	800497c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80048ee:	4b6e      	ldr	r3, [pc, #440]	; (8004aa8 <HAL_RCC_ClockConfig+0x260>)
 80048f0:	689b      	ldr	r3, [r3, #8]
 80048f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d140      	bne.n	800497c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80048fa:	4b6b      	ldr	r3, [pc, #428]	; (8004aa8 <HAL_RCC_ClockConfig+0x260>)
 80048fc:	689b      	ldr	r3, [r3, #8]
 80048fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004902:	4a69      	ldr	r2, [pc, #420]	; (8004aa8 <HAL_RCC_ClockConfig+0x260>)
 8004904:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004908:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800490a:	2380      	movs	r3, #128	; 0x80
 800490c:	617b      	str	r3, [r7, #20]
 800490e:	e035      	b.n	800497c <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	2b02      	cmp	r3, #2
 8004916:	d107      	bne.n	8004928 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004918:	4b63      	ldr	r3, [pc, #396]	; (8004aa8 <HAL_RCC_ClockConfig+0x260>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004920:	2b00      	cmp	r3, #0
 8004922:	d115      	bne.n	8004950 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004924:	2301      	movs	r3, #1
 8004926:	e0b9      	b.n	8004a9c <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d107      	bne.n	8004940 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004930:	4b5d      	ldr	r3, [pc, #372]	; (8004aa8 <HAL_RCC_ClockConfig+0x260>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f003 0302 	and.w	r3, r3, #2
 8004938:	2b00      	cmp	r3, #0
 800493a:	d109      	bne.n	8004950 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800493c:	2301      	movs	r3, #1
 800493e:	e0ad      	b.n	8004a9c <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004940:	4b59      	ldr	r3, [pc, #356]	; (8004aa8 <HAL_RCC_ClockConfig+0x260>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004948:	2b00      	cmp	r3, #0
 800494a:	d101      	bne.n	8004950 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800494c:	2301      	movs	r3, #1
 800494e:	e0a5      	b.n	8004a9c <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8004950:	f000 f8b4 	bl	8004abc <HAL_RCC_GetSysClockFreq>
 8004954:	4603      	mov	r3, r0
 8004956:	4a55      	ldr	r2, [pc, #340]	; (8004aac <HAL_RCC_ClockConfig+0x264>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d90f      	bls.n	800497c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800495c:	4b52      	ldr	r3, [pc, #328]	; (8004aa8 <HAL_RCC_ClockConfig+0x260>)
 800495e:	689b      	ldr	r3, [r3, #8]
 8004960:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004964:	2b00      	cmp	r3, #0
 8004966:	d109      	bne.n	800497c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004968:	4b4f      	ldr	r3, [pc, #316]	; (8004aa8 <HAL_RCC_ClockConfig+0x260>)
 800496a:	689b      	ldr	r3, [r3, #8]
 800496c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004970:	4a4d      	ldr	r2, [pc, #308]	; (8004aa8 <HAL_RCC_ClockConfig+0x260>)
 8004972:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004976:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004978:	2380      	movs	r3, #128	; 0x80
 800497a:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800497c:	4b4a      	ldr	r3, [pc, #296]	; (8004aa8 <HAL_RCC_ClockConfig+0x260>)
 800497e:	689b      	ldr	r3, [r3, #8]
 8004980:	f023 0203 	bic.w	r2, r3, #3
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	685b      	ldr	r3, [r3, #4]
 8004988:	4947      	ldr	r1, [pc, #284]	; (8004aa8 <HAL_RCC_ClockConfig+0x260>)
 800498a:	4313      	orrs	r3, r2
 800498c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800498e:	f7fc fcdf 	bl	8001350 <HAL_GetTick>
 8004992:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004994:	e00a      	b.n	80049ac <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004996:	f7fc fcdb 	bl	8001350 <HAL_GetTick>
 800499a:	4602      	mov	r2, r0
 800499c:	693b      	ldr	r3, [r7, #16]
 800499e:	1ad3      	subs	r3, r2, r3
 80049a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d901      	bls.n	80049ac <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 80049a8:	2303      	movs	r3, #3
 80049aa:	e077      	b.n	8004a9c <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049ac:	4b3e      	ldr	r3, [pc, #248]	; (8004aa8 <HAL_RCC_ClockConfig+0x260>)
 80049ae:	689b      	ldr	r3, [r3, #8]
 80049b0:	f003 020c 	and.w	r2, r3, #12
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	685b      	ldr	r3, [r3, #4]
 80049b8:	009b      	lsls	r3, r3, #2
 80049ba:	429a      	cmp	r2, r3
 80049bc:	d1eb      	bne.n	8004996 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 80049be:	697b      	ldr	r3, [r7, #20]
 80049c0:	2b80      	cmp	r3, #128	; 0x80
 80049c2:	d105      	bne.n	80049d0 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80049c4:	4b38      	ldr	r3, [pc, #224]	; (8004aa8 <HAL_RCC_ClockConfig+0x260>)
 80049c6:	689b      	ldr	r3, [r3, #8]
 80049c8:	4a37      	ldr	r2, [pc, #220]	; (8004aa8 <HAL_RCC_ClockConfig+0x260>)
 80049ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80049ce:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f003 0302 	and.w	r3, r3, #2
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d010      	beq.n	80049fe <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	689a      	ldr	r2, [r3, #8]
 80049e0:	4b31      	ldr	r3, [pc, #196]	; (8004aa8 <HAL_RCC_ClockConfig+0x260>)
 80049e2:	689b      	ldr	r3, [r3, #8]
 80049e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80049e8:	429a      	cmp	r2, r3
 80049ea:	d208      	bcs.n	80049fe <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049ec:	4b2e      	ldr	r3, [pc, #184]	; (8004aa8 <HAL_RCC_ClockConfig+0x260>)
 80049ee:	689b      	ldr	r3, [r3, #8]
 80049f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	689b      	ldr	r3, [r3, #8]
 80049f8:	492b      	ldr	r1, [pc, #172]	; (8004aa8 <HAL_RCC_ClockConfig+0x260>)
 80049fa:	4313      	orrs	r3, r2
 80049fc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80049fe:	4b29      	ldr	r3, [pc, #164]	; (8004aa4 <HAL_RCC_ClockConfig+0x25c>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f003 030f 	and.w	r3, r3, #15
 8004a06:	683a      	ldr	r2, [r7, #0]
 8004a08:	429a      	cmp	r2, r3
 8004a0a:	d210      	bcs.n	8004a2e <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a0c:	4b25      	ldr	r3, [pc, #148]	; (8004aa4 <HAL_RCC_ClockConfig+0x25c>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f023 020f 	bic.w	r2, r3, #15
 8004a14:	4923      	ldr	r1, [pc, #140]	; (8004aa4 <HAL_RCC_ClockConfig+0x25c>)
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	4313      	orrs	r3, r2
 8004a1a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a1c:	4b21      	ldr	r3, [pc, #132]	; (8004aa4 <HAL_RCC_ClockConfig+0x25c>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f003 030f 	and.w	r3, r3, #15
 8004a24:	683a      	ldr	r2, [r7, #0]
 8004a26:	429a      	cmp	r2, r3
 8004a28:	d001      	beq.n	8004a2e <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	e036      	b.n	8004a9c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f003 0304 	and.w	r3, r3, #4
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d008      	beq.n	8004a4c <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a3a:	4b1b      	ldr	r3, [pc, #108]	; (8004aa8 <HAL_RCC_ClockConfig+0x260>)
 8004a3c:	689b      	ldr	r3, [r3, #8]
 8004a3e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	68db      	ldr	r3, [r3, #12]
 8004a46:	4918      	ldr	r1, [pc, #96]	; (8004aa8 <HAL_RCC_ClockConfig+0x260>)
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f003 0308 	and.w	r3, r3, #8
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d009      	beq.n	8004a6c <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004a58:	4b13      	ldr	r3, [pc, #76]	; (8004aa8 <HAL_RCC_ClockConfig+0x260>)
 8004a5a:	689b      	ldr	r3, [r3, #8]
 8004a5c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	691b      	ldr	r3, [r3, #16]
 8004a64:	00db      	lsls	r3, r3, #3
 8004a66:	4910      	ldr	r1, [pc, #64]	; (8004aa8 <HAL_RCC_ClockConfig+0x260>)
 8004a68:	4313      	orrs	r3, r2
 8004a6a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004a6c:	f000 f826 	bl	8004abc <HAL_RCC_GetSysClockFreq>
 8004a70:	4602      	mov	r2, r0
 8004a72:	4b0d      	ldr	r3, [pc, #52]	; (8004aa8 <HAL_RCC_ClockConfig+0x260>)
 8004a74:	689b      	ldr	r3, [r3, #8]
 8004a76:	091b      	lsrs	r3, r3, #4
 8004a78:	f003 030f 	and.w	r3, r3, #15
 8004a7c:	490c      	ldr	r1, [pc, #48]	; (8004ab0 <HAL_RCC_ClockConfig+0x268>)
 8004a7e:	5ccb      	ldrb	r3, [r1, r3]
 8004a80:	f003 031f 	and.w	r3, r3, #31
 8004a84:	fa22 f303 	lsr.w	r3, r2, r3
 8004a88:	4a0a      	ldr	r2, [pc, #40]	; (8004ab4 <HAL_RCC_ClockConfig+0x26c>)
 8004a8a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004a8c:	4b0a      	ldr	r3, [pc, #40]	; (8004ab8 <HAL_RCC_ClockConfig+0x270>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4618      	mov	r0, r3
 8004a92:	f7fc fb33 	bl	80010fc <HAL_InitTick>
 8004a96:	4603      	mov	r3, r0
 8004a98:	73fb      	strb	r3, [r7, #15]

  return status;
 8004a9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	3718      	adds	r7, #24
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	bd80      	pop	{r7, pc}
 8004aa4:	40022000 	.word	0x40022000
 8004aa8:	40021000 	.word	0x40021000
 8004aac:	04c4b400 	.word	0x04c4b400
 8004ab0:	0800d7c0 	.word	0x0800d7c0
 8004ab4:	20000000 	.word	0x20000000
 8004ab8:	20000004 	.word	0x20000004

08004abc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004abc:	b480      	push	{r7}
 8004abe:	b089      	sub	sp, #36	; 0x24
 8004ac0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	61fb      	str	r3, [r7, #28]
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004aca:	4b3e      	ldr	r3, [pc, #248]	; (8004bc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004acc:	689b      	ldr	r3, [r3, #8]
 8004ace:	f003 030c 	and.w	r3, r3, #12
 8004ad2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004ad4:	4b3b      	ldr	r3, [pc, #236]	; (8004bc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004ad6:	68db      	ldr	r3, [r3, #12]
 8004ad8:	f003 0303 	and.w	r3, r3, #3
 8004adc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004ade:	693b      	ldr	r3, [r7, #16]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d005      	beq.n	8004af0 <HAL_RCC_GetSysClockFreq+0x34>
 8004ae4:	693b      	ldr	r3, [r7, #16]
 8004ae6:	2b0c      	cmp	r3, #12
 8004ae8:	d121      	bne.n	8004b2e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	2b01      	cmp	r3, #1
 8004aee:	d11e      	bne.n	8004b2e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004af0:	4b34      	ldr	r3, [pc, #208]	; (8004bc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f003 0308 	and.w	r3, r3, #8
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d107      	bne.n	8004b0c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004afc:	4b31      	ldr	r3, [pc, #196]	; (8004bc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004afe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b02:	0a1b      	lsrs	r3, r3, #8
 8004b04:	f003 030f 	and.w	r3, r3, #15
 8004b08:	61fb      	str	r3, [r7, #28]
 8004b0a:	e005      	b.n	8004b18 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004b0c:	4b2d      	ldr	r3, [pc, #180]	; (8004bc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	091b      	lsrs	r3, r3, #4
 8004b12:	f003 030f 	and.w	r3, r3, #15
 8004b16:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004b18:	4a2b      	ldr	r2, [pc, #172]	; (8004bc8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004b1a:	69fb      	ldr	r3, [r7, #28]
 8004b1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b20:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004b22:	693b      	ldr	r3, [r7, #16]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d10d      	bne.n	8004b44 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004b28:	69fb      	ldr	r3, [r7, #28]
 8004b2a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004b2c:	e00a      	b.n	8004b44 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004b2e:	693b      	ldr	r3, [r7, #16]
 8004b30:	2b04      	cmp	r3, #4
 8004b32:	d102      	bne.n	8004b3a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004b34:	4b25      	ldr	r3, [pc, #148]	; (8004bcc <HAL_RCC_GetSysClockFreq+0x110>)
 8004b36:	61bb      	str	r3, [r7, #24]
 8004b38:	e004      	b.n	8004b44 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004b3a:	693b      	ldr	r3, [r7, #16]
 8004b3c:	2b08      	cmp	r3, #8
 8004b3e:	d101      	bne.n	8004b44 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004b40:	4b22      	ldr	r3, [pc, #136]	; (8004bcc <HAL_RCC_GetSysClockFreq+0x110>)
 8004b42:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004b44:	693b      	ldr	r3, [r7, #16]
 8004b46:	2b0c      	cmp	r3, #12
 8004b48:	d134      	bne.n	8004bb4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004b4a:	4b1e      	ldr	r3, [pc, #120]	; (8004bc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004b4c:	68db      	ldr	r3, [r3, #12]
 8004b4e:	f003 0303 	and.w	r3, r3, #3
 8004b52:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	2b02      	cmp	r3, #2
 8004b58:	d003      	beq.n	8004b62 <HAL_RCC_GetSysClockFreq+0xa6>
 8004b5a:	68bb      	ldr	r3, [r7, #8]
 8004b5c:	2b03      	cmp	r3, #3
 8004b5e:	d003      	beq.n	8004b68 <HAL_RCC_GetSysClockFreq+0xac>
 8004b60:	e005      	b.n	8004b6e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004b62:	4b1a      	ldr	r3, [pc, #104]	; (8004bcc <HAL_RCC_GetSysClockFreq+0x110>)
 8004b64:	617b      	str	r3, [r7, #20]
      break;
 8004b66:	e005      	b.n	8004b74 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004b68:	4b18      	ldr	r3, [pc, #96]	; (8004bcc <HAL_RCC_GetSysClockFreq+0x110>)
 8004b6a:	617b      	str	r3, [r7, #20]
      break;
 8004b6c:	e002      	b.n	8004b74 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004b6e:	69fb      	ldr	r3, [r7, #28]
 8004b70:	617b      	str	r3, [r7, #20]
      break;
 8004b72:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004b74:	4b13      	ldr	r3, [pc, #76]	; (8004bc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004b76:	68db      	ldr	r3, [r3, #12]
 8004b78:	091b      	lsrs	r3, r3, #4
 8004b7a:	f003 030f 	and.w	r3, r3, #15
 8004b7e:	3301      	adds	r3, #1
 8004b80:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004b82:	4b10      	ldr	r3, [pc, #64]	; (8004bc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004b84:	68db      	ldr	r3, [r3, #12]
 8004b86:	0a1b      	lsrs	r3, r3, #8
 8004b88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b8c:	697a      	ldr	r2, [r7, #20]
 8004b8e:	fb03 f202 	mul.w	r2, r3, r2
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b98:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004b9a:	4b0a      	ldr	r3, [pc, #40]	; (8004bc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004b9c:	68db      	ldr	r3, [r3, #12]
 8004b9e:	0e5b      	lsrs	r3, r3, #25
 8004ba0:	f003 0303 	and.w	r3, r3, #3
 8004ba4:	3301      	adds	r3, #1
 8004ba6:	005b      	lsls	r3, r3, #1
 8004ba8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004baa:	697a      	ldr	r2, [r7, #20]
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bb2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004bb4:	69bb      	ldr	r3, [r7, #24]
}
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	3724      	adds	r7, #36	; 0x24
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc0:	4770      	bx	lr
 8004bc2:	bf00      	nop
 8004bc4:	40021000 	.word	0x40021000
 8004bc8:	0800d7d8 	.word	0x0800d7d8
 8004bcc:	00f42400 	.word	0x00f42400

08004bd0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004bd4:	4b03      	ldr	r3, [pc, #12]	; (8004be4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
}
 8004bd8:	4618      	mov	r0, r3
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be0:	4770      	bx	lr
 8004be2:	bf00      	nop
 8004be4:	20000000 	.word	0x20000000

08004be8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004bec:	f7ff fff0 	bl	8004bd0 <HAL_RCC_GetHCLKFreq>
 8004bf0:	4602      	mov	r2, r0
 8004bf2:	4b06      	ldr	r3, [pc, #24]	; (8004c0c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004bf4:	689b      	ldr	r3, [r3, #8]
 8004bf6:	0a1b      	lsrs	r3, r3, #8
 8004bf8:	f003 0307 	and.w	r3, r3, #7
 8004bfc:	4904      	ldr	r1, [pc, #16]	; (8004c10 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004bfe:	5ccb      	ldrb	r3, [r1, r3]
 8004c00:	f003 031f 	and.w	r3, r3, #31
 8004c04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c08:	4618      	mov	r0, r3
 8004c0a:	bd80      	pop	{r7, pc}
 8004c0c:	40021000 	.word	0x40021000
 8004c10:	0800d7d0 	.word	0x0800d7d0

08004c14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004c18:	f7ff ffda 	bl	8004bd0 <HAL_RCC_GetHCLKFreq>
 8004c1c:	4602      	mov	r2, r0
 8004c1e:	4b06      	ldr	r3, [pc, #24]	; (8004c38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004c20:	689b      	ldr	r3, [r3, #8]
 8004c22:	0adb      	lsrs	r3, r3, #11
 8004c24:	f003 0307 	and.w	r3, r3, #7
 8004c28:	4904      	ldr	r1, [pc, #16]	; (8004c3c <HAL_RCC_GetPCLK2Freq+0x28>)
 8004c2a:	5ccb      	ldrb	r3, [r1, r3]
 8004c2c:	f003 031f 	and.w	r3, r3, #31
 8004c30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c34:	4618      	mov	r0, r3
 8004c36:	bd80      	pop	{r7, pc}
 8004c38:	40021000 	.word	0x40021000
 8004c3c:	0800d7d0 	.word	0x0800d7d0

08004c40 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004c40:	b480      	push	{r7}
 8004c42:	b083      	sub	sp, #12
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
 8004c48:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	220f      	movs	r2, #15
 8004c4e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8004c50:	4b12      	ldr	r3, [pc, #72]	; (8004c9c <HAL_RCC_GetClockConfig+0x5c>)
 8004c52:	689b      	ldr	r3, [r3, #8]
 8004c54:	f003 0203 	and.w	r2, r3, #3
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8004c5c:	4b0f      	ldr	r3, [pc, #60]	; (8004c9c <HAL_RCC_GetClockConfig+0x5c>)
 8004c5e:	689b      	ldr	r3, [r3, #8]
 8004c60:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8004c68:	4b0c      	ldr	r3, [pc, #48]	; (8004c9c <HAL_RCC_GetClockConfig+0x5c>)
 8004c6a:	689b      	ldr	r3, [r3, #8]
 8004c6c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8004c74:	4b09      	ldr	r3, [pc, #36]	; (8004c9c <HAL_RCC_GetClockConfig+0x5c>)
 8004c76:	689b      	ldr	r3, [r3, #8]
 8004c78:	08db      	lsrs	r3, r3, #3
 8004c7a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8004c82:	4b07      	ldr	r3, [pc, #28]	; (8004ca0 <HAL_RCC_GetClockConfig+0x60>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f003 020f 	and.w	r2, r3, #15
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	601a      	str	r2, [r3, #0]
}
 8004c8e:	bf00      	nop
 8004c90:	370c      	adds	r7, #12
 8004c92:	46bd      	mov	sp, r7
 8004c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c98:	4770      	bx	lr
 8004c9a:	bf00      	nop
 8004c9c:	40021000 	.word	0x40021000
 8004ca0:	40022000 	.word	0x40022000

08004ca4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b086      	sub	sp, #24
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004cac:	2300      	movs	r3, #0
 8004cae:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004cb0:	4b27      	ldr	r3, [pc, #156]	; (8004d50 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004cb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d003      	beq.n	8004cc4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004cbc:	f7ff f8d6 	bl	8003e6c <HAL_PWREx_GetVoltageRange>
 8004cc0:	6178      	str	r0, [r7, #20]
 8004cc2:	e014      	b.n	8004cee <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004cc4:	4b22      	ldr	r3, [pc, #136]	; (8004d50 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004cc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cc8:	4a21      	ldr	r2, [pc, #132]	; (8004d50 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004cca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cce:	6593      	str	r3, [r2, #88]	; 0x58
 8004cd0:	4b1f      	ldr	r3, [pc, #124]	; (8004d50 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004cd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cd8:	60fb      	str	r3, [r7, #12]
 8004cda:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004cdc:	f7ff f8c6 	bl	8003e6c <HAL_PWREx_GetVoltageRange>
 8004ce0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004ce2:	4b1b      	ldr	r3, [pc, #108]	; (8004d50 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004ce4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ce6:	4a1a      	ldr	r2, [pc, #104]	; (8004d50 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004ce8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004cec:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004cee:	697b      	ldr	r3, [r7, #20]
 8004cf0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004cf4:	d10b      	bne.n	8004d0e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2b80      	cmp	r3, #128	; 0x80
 8004cfa:	d913      	bls.n	8004d24 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2ba0      	cmp	r3, #160	; 0xa0
 8004d00:	d902      	bls.n	8004d08 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004d02:	2302      	movs	r3, #2
 8004d04:	613b      	str	r3, [r7, #16]
 8004d06:	e00d      	b.n	8004d24 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004d08:	2301      	movs	r3, #1
 8004d0a:	613b      	str	r3, [r7, #16]
 8004d0c:	e00a      	b.n	8004d24 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2b7f      	cmp	r3, #127	; 0x7f
 8004d12:	d902      	bls.n	8004d1a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8004d14:	2302      	movs	r3, #2
 8004d16:	613b      	str	r3, [r7, #16]
 8004d18:	e004      	b.n	8004d24 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2b70      	cmp	r3, #112	; 0x70
 8004d1e:	d101      	bne.n	8004d24 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004d20:	2301      	movs	r3, #1
 8004d22:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004d24:	4b0b      	ldr	r3, [pc, #44]	; (8004d54 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f023 020f 	bic.w	r2, r3, #15
 8004d2c:	4909      	ldr	r1, [pc, #36]	; (8004d54 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004d2e:	693b      	ldr	r3, [r7, #16]
 8004d30:	4313      	orrs	r3, r2
 8004d32:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004d34:	4b07      	ldr	r3, [pc, #28]	; (8004d54 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f003 030f 	and.w	r3, r3, #15
 8004d3c:	693a      	ldr	r2, [r7, #16]
 8004d3e:	429a      	cmp	r2, r3
 8004d40:	d001      	beq.n	8004d46 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8004d42:	2301      	movs	r3, #1
 8004d44:	e000      	b.n	8004d48 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8004d46:	2300      	movs	r3, #0
}
 8004d48:	4618      	mov	r0, r3
 8004d4a:	3718      	adds	r7, #24
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	bd80      	pop	{r7, pc}
 8004d50:	40021000 	.word	0x40021000
 8004d54:	40022000 	.word	0x40022000

08004d58 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004d58:	b480      	push	{r7}
 8004d5a:	b087      	sub	sp, #28
 8004d5c:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004d5e:	4b2d      	ldr	r3, [pc, #180]	; (8004e14 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004d60:	68db      	ldr	r3, [r3, #12]
 8004d62:	f003 0303 	and.w	r3, r3, #3
 8004d66:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	2b03      	cmp	r3, #3
 8004d6c:	d00b      	beq.n	8004d86 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	2b03      	cmp	r3, #3
 8004d72:	d825      	bhi.n	8004dc0 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	2b01      	cmp	r3, #1
 8004d78:	d008      	beq.n	8004d8c <RCC_GetSysClockFreqFromPLLSource+0x34>
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	2b02      	cmp	r3, #2
 8004d7e:	d11f      	bne.n	8004dc0 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8004d80:	4b25      	ldr	r3, [pc, #148]	; (8004e18 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004d82:	613b      	str	r3, [r7, #16]
    break;
 8004d84:	e01f      	b.n	8004dc6 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8004d86:	4b24      	ldr	r3, [pc, #144]	; (8004e18 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004d88:	613b      	str	r3, [r7, #16]
    break;
 8004d8a:	e01c      	b.n	8004dc6 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004d8c:	4b21      	ldr	r3, [pc, #132]	; (8004e14 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f003 0308 	and.w	r3, r3, #8
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d107      	bne.n	8004da8 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004d98:	4b1e      	ldr	r3, [pc, #120]	; (8004e14 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004d9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d9e:	0a1b      	lsrs	r3, r3, #8
 8004da0:	f003 030f 	and.w	r3, r3, #15
 8004da4:	617b      	str	r3, [r7, #20]
 8004da6:	e005      	b.n	8004db4 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004da8:	4b1a      	ldr	r3, [pc, #104]	; (8004e14 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	091b      	lsrs	r3, r3, #4
 8004dae:	f003 030f 	and.w	r3, r3, #15
 8004db2:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8004db4:	4a19      	ldr	r2, [pc, #100]	; (8004e1c <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8004db6:	697b      	ldr	r3, [r7, #20]
 8004db8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004dbc:	613b      	str	r3, [r7, #16]
    break;
 8004dbe:	e002      	b.n	8004dc6 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	613b      	str	r3, [r7, #16]
    break;
 8004dc4:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004dc6:	4b13      	ldr	r3, [pc, #76]	; (8004e14 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004dc8:	68db      	ldr	r3, [r3, #12]
 8004dca:	091b      	lsrs	r3, r3, #4
 8004dcc:	f003 030f 	and.w	r3, r3, #15
 8004dd0:	3301      	adds	r3, #1
 8004dd2:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004dd4:	4b0f      	ldr	r3, [pc, #60]	; (8004e14 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004dd6:	68db      	ldr	r3, [r3, #12]
 8004dd8:	0a1b      	lsrs	r3, r3, #8
 8004dda:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004dde:	693a      	ldr	r2, [r7, #16]
 8004de0:	fb03 f202 	mul.w	r2, r3, r2
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dea:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004dec:	4b09      	ldr	r3, [pc, #36]	; (8004e14 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004dee:	68db      	ldr	r3, [r3, #12]
 8004df0:	0e5b      	lsrs	r3, r3, #25
 8004df2:	f003 0303 	and.w	r3, r3, #3
 8004df6:	3301      	adds	r3, #1
 8004df8:	005b      	lsls	r3, r3, #1
 8004dfa:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8004dfc:	693a      	ldr	r2, [r7, #16]
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e04:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8004e06:	683b      	ldr	r3, [r7, #0]
}
 8004e08:	4618      	mov	r0, r3
 8004e0a:	371c      	adds	r7, #28
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e12:	4770      	bx	lr
 8004e14:	40021000 	.word	0x40021000
 8004e18:	00f42400 	.word	0x00f42400
 8004e1c:	0800d7d8 	.word	0x0800d7d8

08004e20 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b086      	sub	sp, #24
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004e28:	2300      	movs	r3, #0
 8004e2a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d040      	beq.n	8004ebe <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e40:	2b80      	cmp	r3, #128	; 0x80
 8004e42:	d02a      	beq.n	8004e9a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004e44:	2b80      	cmp	r3, #128	; 0x80
 8004e46:	d825      	bhi.n	8004e94 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004e48:	2b60      	cmp	r3, #96	; 0x60
 8004e4a:	d026      	beq.n	8004e9a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004e4c:	2b60      	cmp	r3, #96	; 0x60
 8004e4e:	d821      	bhi.n	8004e94 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004e50:	2b40      	cmp	r3, #64	; 0x40
 8004e52:	d006      	beq.n	8004e62 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8004e54:	2b40      	cmp	r3, #64	; 0x40
 8004e56:	d81d      	bhi.n	8004e94 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d009      	beq.n	8004e70 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8004e5c:	2b20      	cmp	r3, #32
 8004e5e:	d010      	beq.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8004e60:	e018      	b.n	8004e94 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004e62:	4b89      	ldr	r3, [pc, #548]	; (8005088 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004e64:	68db      	ldr	r3, [r3, #12]
 8004e66:	4a88      	ldr	r2, [pc, #544]	; (8005088 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004e68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e6c:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004e6e:	e015      	b.n	8004e9c <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	3304      	adds	r3, #4
 8004e74:	2100      	movs	r1, #0
 8004e76:	4618      	mov	r0, r3
 8004e78:	f001 fa82 	bl	8006380 <RCCEx_PLLSAI1_Config>
 8004e7c:	4603      	mov	r3, r0
 8004e7e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004e80:	e00c      	b.n	8004e9c <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	3320      	adds	r3, #32
 8004e86:	2100      	movs	r1, #0
 8004e88:	4618      	mov	r0, r3
 8004e8a:	f001 fb6d 	bl	8006568 <RCCEx_PLLSAI2_Config>
 8004e8e:	4603      	mov	r3, r0
 8004e90:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004e92:	e003      	b.n	8004e9c <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004e94:	2301      	movs	r3, #1
 8004e96:	74fb      	strb	r3, [r7, #19]
      break;
 8004e98:	e000      	b.n	8004e9c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8004e9a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e9c:	7cfb      	ldrb	r3, [r7, #19]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d10b      	bne.n	8004eba <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004ea2:	4b79      	ldr	r3, [pc, #484]	; (8005088 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004ea4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004ea8:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004eb0:	4975      	ldr	r1, [pc, #468]	; (8005088 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004eb8:	e001      	b.n	8004ebe <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004eba:	7cfb      	ldrb	r3, [r7, #19]
 8004ebc:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d047      	beq.n	8004f5a <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ece:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ed2:	d030      	beq.n	8004f36 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004ed4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ed8:	d82a      	bhi.n	8004f30 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004eda:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004ede:	d02a      	beq.n	8004f36 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004ee0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004ee4:	d824      	bhi.n	8004f30 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004ee6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004eea:	d008      	beq.n	8004efe <HAL_RCCEx_PeriphCLKConfig+0xde>
 8004eec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ef0:	d81e      	bhi.n	8004f30 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d00a      	beq.n	8004f0c <HAL_RCCEx_PeriphCLKConfig+0xec>
 8004ef6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004efa:	d010      	beq.n	8004f1e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004efc:	e018      	b.n	8004f30 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004efe:	4b62      	ldr	r3, [pc, #392]	; (8005088 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004f00:	68db      	ldr	r3, [r3, #12]
 8004f02:	4a61      	ldr	r2, [pc, #388]	; (8005088 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004f04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f08:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004f0a:	e015      	b.n	8004f38 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	3304      	adds	r3, #4
 8004f10:	2100      	movs	r1, #0
 8004f12:	4618      	mov	r0, r3
 8004f14:	f001 fa34 	bl	8006380 <RCCEx_PLLSAI1_Config>
 8004f18:	4603      	mov	r3, r0
 8004f1a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004f1c:	e00c      	b.n	8004f38 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	3320      	adds	r3, #32
 8004f22:	2100      	movs	r1, #0
 8004f24:	4618      	mov	r0, r3
 8004f26:	f001 fb1f 	bl	8006568 <RCCEx_PLLSAI2_Config>
 8004f2a:	4603      	mov	r3, r0
 8004f2c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004f2e:	e003      	b.n	8004f38 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004f30:	2301      	movs	r3, #1
 8004f32:	74fb      	strb	r3, [r7, #19]
      break;
 8004f34:	e000      	b.n	8004f38 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8004f36:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f38:	7cfb      	ldrb	r3, [r7, #19]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d10b      	bne.n	8004f56 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004f3e:	4b52      	ldr	r3, [pc, #328]	; (8005088 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004f40:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004f44:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f4c:	494e      	ldr	r1, [pc, #312]	; (8005088 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004f54:	e001      	b.n	8004f5a <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f56:	7cfb      	ldrb	r3, [r7, #19]
 8004f58:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	f000 809f 	beq.w	80050a6 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f68:	2300      	movs	r3, #0
 8004f6a:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004f6c:	4b46      	ldr	r3, [pc, #280]	; (8005088 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004f6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d101      	bne.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8004f78:	2301      	movs	r3, #1
 8004f7a:	e000      	b.n	8004f7e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d00d      	beq.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f82:	4b41      	ldr	r3, [pc, #260]	; (8005088 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004f84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f86:	4a40      	ldr	r2, [pc, #256]	; (8005088 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004f88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f8c:	6593      	str	r3, [r2, #88]	; 0x58
 8004f8e:	4b3e      	ldr	r3, [pc, #248]	; (8005088 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004f90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f96:	60bb      	str	r3, [r7, #8]
 8004f98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004f9e:	4b3b      	ldr	r3, [pc, #236]	; (800508c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4a3a      	ldr	r2, [pc, #232]	; (800508c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004fa4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fa8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004faa:	f7fc f9d1 	bl	8001350 <HAL_GetTick>
 8004fae:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004fb0:	e009      	b.n	8004fc6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004fb2:	f7fc f9cd 	bl	8001350 <HAL_GetTick>
 8004fb6:	4602      	mov	r2, r0
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	1ad3      	subs	r3, r2, r3
 8004fbc:	2b02      	cmp	r3, #2
 8004fbe:	d902      	bls.n	8004fc6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8004fc0:	2303      	movs	r3, #3
 8004fc2:	74fb      	strb	r3, [r7, #19]
        break;
 8004fc4:	e005      	b.n	8004fd2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004fc6:	4b31      	ldr	r3, [pc, #196]	; (800508c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d0ef      	beq.n	8004fb2 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8004fd2:	7cfb      	ldrb	r3, [r7, #19]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d15b      	bne.n	8005090 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004fd8:	4b2b      	ldr	r3, [pc, #172]	; (8005088 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004fda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fe2:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004fe4:	697b      	ldr	r3, [r7, #20]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d01f      	beq.n	800502a <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004ff0:	697a      	ldr	r2, [r7, #20]
 8004ff2:	429a      	cmp	r2, r3
 8004ff4:	d019      	beq.n	800502a <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004ff6:	4b24      	ldr	r3, [pc, #144]	; (8005088 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004ff8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ffc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005000:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005002:	4b21      	ldr	r3, [pc, #132]	; (8005088 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005004:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005008:	4a1f      	ldr	r2, [pc, #124]	; (8005088 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800500a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800500e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005012:	4b1d      	ldr	r3, [pc, #116]	; (8005088 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005014:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005018:	4a1b      	ldr	r2, [pc, #108]	; (8005088 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800501a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800501e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005022:	4a19      	ldr	r2, [pc, #100]	; (8005088 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005024:	697b      	ldr	r3, [r7, #20]
 8005026:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800502a:	697b      	ldr	r3, [r7, #20]
 800502c:	f003 0301 	and.w	r3, r3, #1
 8005030:	2b00      	cmp	r3, #0
 8005032:	d016      	beq.n	8005062 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005034:	f7fc f98c 	bl	8001350 <HAL_GetTick>
 8005038:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800503a:	e00b      	b.n	8005054 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800503c:	f7fc f988 	bl	8001350 <HAL_GetTick>
 8005040:	4602      	mov	r2, r0
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	1ad3      	subs	r3, r2, r3
 8005046:	f241 3288 	movw	r2, #5000	; 0x1388
 800504a:	4293      	cmp	r3, r2
 800504c:	d902      	bls.n	8005054 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 800504e:	2303      	movs	r3, #3
 8005050:	74fb      	strb	r3, [r7, #19]
            break;
 8005052:	e006      	b.n	8005062 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005054:	4b0c      	ldr	r3, [pc, #48]	; (8005088 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005056:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800505a:	f003 0302 	and.w	r3, r3, #2
 800505e:	2b00      	cmp	r3, #0
 8005060:	d0ec      	beq.n	800503c <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8005062:	7cfb      	ldrb	r3, [r7, #19]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d10c      	bne.n	8005082 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005068:	4b07      	ldr	r3, [pc, #28]	; (8005088 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800506a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800506e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005078:	4903      	ldr	r1, [pc, #12]	; (8005088 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800507a:	4313      	orrs	r3, r2
 800507c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005080:	e008      	b.n	8005094 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005082:	7cfb      	ldrb	r3, [r7, #19]
 8005084:	74bb      	strb	r3, [r7, #18]
 8005086:	e005      	b.n	8005094 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8005088:	40021000 	.word	0x40021000
 800508c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005090:	7cfb      	ldrb	r3, [r7, #19]
 8005092:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005094:	7c7b      	ldrb	r3, [r7, #17]
 8005096:	2b01      	cmp	r3, #1
 8005098:	d105      	bne.n	80050a6 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800509a:	4ba0      	ldr	r3, [pc, #640]	; (800531c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800509c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800509e:	4a9f      	ldr	r2, [pc, #636]	; (800531c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80050a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80050a4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f003 0301 	and.w	r3, r3, #1
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d00a      	beq.n	80050c8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80050b2:	4b9a      	ldr	r3, [pc, #616]	; (800531c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80050b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050b8:	f023 0203 	bic.w	r2, r3, #3
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050c0:	4996      	ldr	r1, [pc, #600]	; (800531c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80050c2:	4313      	orrs	r3, r2
 80050c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f003 0302 	and.w	r3, r3, #2
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d00a      	beq.n	80050ea <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80050d4:	4b91      	ldr	r3, [pc, #580]	; (800531c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80050d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050da:	f023 020c 	bic.w	r2, r3, #12
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050e2:	498e      	ldr	r1, [pc, #568]	; (800531c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80050e4:	4313      	orrs	r3, r2
 80050e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f003 0304 	and.w	r3, r3, #4
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d00a      	beq.n	800510c <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80050f6:	4b89      	ldr	r3, [pc, #548]	; (800531c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80050f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050fc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005104:	4985      	ldr	r1, [pc, #532]	; (800531c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005106:	4313      	orrs	r3, r2
 8005108:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f003 0308 	and.w	r3, r3, #8
 8005114:	2b00      	cmp	r3, #0
 8005116:	d00a      	beq.n	800512e <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005118:	4b80      	ldr	r3, [pc, #512]	; (800531c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800511a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800511e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005126:	497d      	ldr	r1, [pc, #500]	; (800531c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005128:	4313      	orrs	r3, r2
 800512a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f003 0310 	and.w	r3, r3, #16
 8005136:	2b00      	cmp	r3, #0
 8005138:	d00a      	beq.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800513a:	4b78      	ldr	r3, [pc, #480]	; (800531c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800513c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005140:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005148:	4974      	ldr	r1, [pc, #464]	; (800531c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800514a:	4313      	orrs	r3, r2
 800514c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f003 0320 	and.w	r3, r3, #32
 8005158:	2b00      	cmp	r3, #0
 800515a:	d00a      	beq.n	8005172 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800515c:	4b6f      	ldr	r3, [pc, #444]	; (800531c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800515e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005162:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800516a:	496c      	ldr	r1, [pc, #432]	; (800531c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800516c:	4313      	orrs	r3, r2
 800516e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800517a:	2b00      	cmp	r3, #0
 800517c:	d00a      	beq.n	8005194 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800517e:	4b67      	ldr	r3, [pc, #412]	; (800531c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005180:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005184:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800518c:	4963      	ldr	r1, [pc, #396]	; (800531c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800518e:	4313      	orrs	r3, r2
 8005190:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800519c:	2b00      	cmp	r3, #0
 800519e:	d00a      	beq.n	80051b6 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80051a0:	4b5e      	ldr	r3, [pc, #376]	; (800531c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80051a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051a6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80051ae:	495b      	ldr	r1, [pc, #364]	; (800531c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80051b0:	4313      	orrs	r3, r2
 80051b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d00a      	beq.n	80051d8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80051c2:	4b56      	ldr	r3, [pc, #344]	; (800531c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80051c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051c8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051d0:	4952      	ldr	r1, [pc, #328]	; (800531c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80051d2:	4313      	orrs	r3, r2
 80051d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d00a      	beq.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80051e4:	4b4d      	ldr	r3, [pc, #308]	; (800531c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80051e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051ea:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051f2:	494a      	ldr	r1, [pc, #296]	; (800531c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80051f4:	4313      	orrs	r3, r2
 80051f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005202:	2b00      	cmp	r3, #0
 8005204:	d00a      	beq.n	800521c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005206:	4b45      	ldr	r3, [pc, #276]	; (800531c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005208:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800520c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005214:	4941      	ldr	r1, [pc, #260]	; (800531c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005216:	4313      	orrs	r3, r2
 8005218:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005224:	2b00      	cmp	r3, #0
 8005226:	d00a      	beq.n	800523e <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005228:	4b3c      	ldr	r3, [pc, #240]	; (800531c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800522a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800522e:	f023 0203 	bic.w	r2, r3, #3
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005236:	4939      	ldr	r1, [pc, #228]	; (800531c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005238:	4313      	orrs	r3, r2
 800523a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005246:	2b00      	cmp	r3, #0
 8005248:	d028      	beq.n	800529c <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800524a:	4b34      	ldr	r3, [pc, #208]	; (800531c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800524c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005250:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005258:	4930      	ldr	r1, [pc, #192]	; (800531c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800525a:	4313      	orrs	r3, r2
 800525c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005264:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005268:	d106      	bne.n	8005278 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800526a:	4b2c      	ldr	r3, [pc, #176]	; (800531c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800526c:	68db      	ldr	r3, [r3, #12]
 800526e:	4a2b      	ldr	r2, [pc, #172]	; (800531c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005270:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005274:	60d3      	str	r3, [r2, #12]
 8005276:	e011      	b.n	800529c <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800527c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005280:	d10c      	bne.n	800529c <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	3304      	adds	r3, #4
 8005286:	2101      	movs	r1, #1
 8005288:	4618      	mov	r0, r3
 800528a:	f001 f879 	bl	8006380 <RCCEx_PLLSAI1_Config>
 800528e:	4603      	mov	r3, r0
 8005290:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005292:	7cfb      	ldrb	r3, [r7, #19]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d001      	beq.n	800529c <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8005298:	7cfb      	ldrb	r3, [r7, #19]
 800529a:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d04d      	beq.n	8005344 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80052ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80052b0:	d108      	bne.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 80052b2:	4b1a      	ldr	r3, [pc, #104]	; (800531c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80052b4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80052b8:	4a18      	ldr	r2, [pc, #96]	; (800531c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80052ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80052be:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80052c2:	e012      	b.n	80052ea <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80052c4:	4b15      	ldr	r3, [pc, #84]	; (800531c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80052c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80052ca:	4a14      	ldr	r2, [pc, #80]	; (800531c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80052cc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80052d0:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80052d4:	4b11      	ldr	r3, [pc, #68]	; (800531c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80052d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052da:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80052e2:	490e      	ldr	r1, [pc, #56]	; (800531c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80052e4:	4313      	orrs	r3, r2
 80052e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80052ee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80052f2:	d106      	bne.n	8005302 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80052f4:	4b09      	ldr	r3, [pc, #36]	; (800531c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80052f6:	68db      	ldr	r3, [r3, #12]
 80052f8:	4a08      	ldr	r2, [pc, #32]	; (800531c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80052fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80052fe:	60d3      	str	r3, [r2, #12]
 8005300:	e020      	b.n	8005344 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005306:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800530a:	d109      	bne.n	8005320 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800530c:	4b03      	ldr	r3, [pc, #12]	; (800531c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800530e:	68db      	ldr	r3, [r3, #12]
 8005310:	4a02      	ldr	r2, [pc, #8]	; (800531c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005312:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005316:	60d3      	str	r3, [r2, #12]
 8005318:	e014      	b.n	8005344 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800531a:	bf00      	nop
 800531c:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005324:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005328:	d10c      	bne.n	8005344 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	3304      	adds	r3, #4
 800532e:	2101      	movs	r1, #1
 8005330:	4618      	mov	r0, r3
 8005332:	f001 f825 	bl	8006380 <RCCEx_PLLSAI1_Config>
 8005336:	4603      	mov	r3, r0
 8005338:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800533a:	7cfb      	ldrb	r3, [r7, #19]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d001      	beq.n	8005344 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8005340:	7cfb      	ldrb	r3, [r7, #19]
 8005342:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800534c:	2b00      	cmp	r3, #0
 800534e:	d028      	beq.n	80053a2 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005350:	4b7a      	ldr	r3, [pc, #488]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005352:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005356:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800535e:	4977      	ldr	r1, [pc, #476]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005360:	4313      	orrs	r3, r2
 8005362:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800536a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800536e:	d106      	bne.n	800537e <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005370:	4b72      	ldr	r3, [pc, #456]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005372:	68db      	ldr	r3, [r3, #12]
 8005374:	4a71      	ldr	r2, [pc, #452]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005376:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800537a:	60d3      	str	r3, [r2, #12]
 800537c:	e011      	b.n	80053a2 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005382:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005386:	d10c      	bne.n	80053a2 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	3304      	adds	r3, #4
 800538c:	2101      	movs	r1, #1
 800538e:	4618      	mov	r0, r3
 8005390:	f000 fff6 	bl	8006380 <RCCEx_PLLSAI1_Config>
 8005394:	4603      	mov	r3, r0
 8005396:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005398:	7cfb      	ldrb	r3, [r7, #19]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d001      	beq.n	80053a2 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 800539e:	7cfb      	ldrb	r3, [r7, #19]
 80053a0:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d01e      	beq.n	80053ec <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80053ae:	4b63      	ldr	r3, [pc, #396]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80053b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053b4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80053be:	495f      	ldr	r1, [pc, #380]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80053c0:	4313      	orrs	r3, r2
 80053c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80053cc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80053d0:	d10c      	bne.n	80053ec <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	3304      	adds	r3, #4
 80053d6:	2102      	movs	r1, #2
 80053d8:	4618      	mov	r0, r3
 80053da:	f000 ffd1 	bl	8006380 <RCCEx_PLLSAI1_Config>
 80053de:	4603      	mov	r3, r0
 80053e0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80053e2:	7cfb      	ldrb	r3, [r7, #19]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d001      	beq.n	80053ec <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 80053e8:	7cfb      	ldrb	r3, [r7, #19]
 80053ea:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d00b      	beq.n	8005410 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80053f8:	4b50      	ldr	r3, [pc, #320]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80053fa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80053fe:	f023 0204 	bic.w	r2, r3, #4
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005408:	494c      	ldr	r1, [pc, #304]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800540a:	4313      	orrs	r3, r2
 800540c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005418:	2b00      	cmp	r3, #0
 800541a:	d00b      	beq.n	8005434 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800541c:	4b47      	ldr	r3, [pc, #284]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800541e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005422:	f023 0218 	bic.w	r2, r3, #24
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800542c:	4943      	ldr	r1, [pc, #268]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800542e:	4313      	orrs	r3, r2
 8005430:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DFSDM1_Filter0 */

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800543c:	2b00      	cmp	r3, #0
 800543e:	d035      	beq.n	80054ac <HAL_RCCEx_PeriphCLKConfig+0x68c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005440:	4b3e      	ldr	r3, [pc, #248]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4a3d      	ldr	r2, [pc, #244]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005446:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800544a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800544c:	f7fb ff80 	bl	8001350 <HAL_GetTick>
 8005450:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005452:	e009      	b.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005454:	f7fb ff7c 	bl	8001350 <HAL_GetTick>
 8005458:	4602      	mov	r2, r0
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	1ad3      	subs	r3, r2, r3
 800545e:	2b02      	cmp	r3, #2
 8005460:	d902      	bls.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        ret = HAL_TIMEOUT;
 8005462:	2303      	movs	r3, #3
 8005464:	74fb      	strb	r3, [r7, #19]
        break;
 8005466:	e005      	b.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0x654>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005468:	4b34      	ldr	r3, [pc, #208]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005470:	2b00      	cmp	r3, #0
 8005472:	d1ef      	bne.n	8005454 <HAL_RCCEx_PeriphCLKConfig+0x634>
      }
    }

    if(ret == HAL_OK)
 8005474:	7cfb      	ldrb	r3, [r7, #19]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d113      	bne.n	80054a2 <HAL_RCCEx_PeriphCLKConfig+0x682>
    {
      /* Configure the LTDC clock source */
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 800547a:	4b30      	ldr	r3, [pc, #192]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800547c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005480:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800548a:	492c      	ldr	r1, [pc, #176]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800548c:	4313      	orrs	r3, r2
 800548e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	3320      	adds	r3, #32
 8005496:	2102      	movs	r1, #2
 8005498:	4618      	mov	r0, r3
 800549a:	f001 f865 	bl	8006568 <RCCEx_PLLSAI2_Config>
 800549e:	4603      	mov	r3, r0
 80054a0:	74fb      	strb	r3, [r7, #19]
    }

    if(ret != HAL_OK)
 80054a2:	7cfb      	ldrb	r3, [r7, #19]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d001      	beq.n	80054ac <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* set overall return value */
      status = ret;
 80054a8:	7cfb      	ldrb	r3, [r7, #19]
 80054aa:	74bb      	strb	r3, [r7, #18]
#endif /* LTDC */

#if defined(DSI)

  /*-------------------------- DSI clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d01e      	beq.n	80054f6 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DSICLKSOURCE(PeriphClkInit->DsiClockSelection));

    /* Configure the DSI clock source */
    __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 80054b8:	4b20      	ldr	r3, [pc, #128]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80054ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80054be:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054c8:	491c      	ldr	r1, [pc, #112]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80054ca:	4313      	orrs	r3, r2
 80054cc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLLSAI2)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054da:	d10c      	bne.n	80054f6 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
    {
      /* PLLSAI2 input clock, parameters M, N & Q configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_Q_UPDATE);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	3320      	adds	r3, #32
 80054e0:	2101      	movs	r1, #1
 80054e2:	4618      	mov	r0, r3
 80054e4:	f001 f840 	bl	8006568 <RCCEx_PLLSAI2_Config>
 80054e8:	4603      	mov	r3, r0
 80054ea:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80054ec:	7cfb      	ldrb	r3, [r7, #19]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d001      	beq.n	80054f6 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
      {
        /* set overall return value */
        status = ret;
 80054f2:	7cfb      	ldrb	r3, [r7, #19]
 80054f4:	74bb      	strb	r3, [r7, #18]
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d017      	beq.n	8005532 <HAL_RCCEx_PeriphCLKConfig+0x712>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005502:	4b0e      	ldr	r3, [pc, #56]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005504:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005508:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005512:	490a      	ldr	r1, [pc, #40]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005514:	4313      	orrs	r3, r2
 8005516:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005520:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005524:	d105      	bne.n	8005532 <HAL_RCCEx_PeriphCLKConfig+0x712>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005526:	4b05      	ldr	r3, [pc, #20]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005528:	68db      	ldr	r3, [r3, #12]
 800552a:	4a04      	ldr	r2, [pc, #16]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800552c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005530:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005532:	7cbb      	ldrb	r3, [r7, #18]
}
 8005534:	4618      	mov	r0, r3
 8005536:	3718      	adds	r7, #24
 8005538:	46bd      	mov	sp, r7
 800553a:	bd80      	pop	{r7, pc}
 800553c:	40021000 	.word	0x40021000

08005540 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b088      	sub	sp, #32
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8005548:	2300      	movs	r3, #0
 800554a:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005552:	d13e      	bne.n	80055d2 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8005554:	4bb6      	ldr	r3, [pc, #728]	; (8005830 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005556:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800555a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800555e:	60fb      	str	r3, [r7, #12]

    switch(srcclk)
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005566:	d028      	beq.n	80055ba <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800556e:	f200 86f2 	bhi.w	8006356 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005578:	d005      	beq.n	8005586 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005580:	d00e      	beq.n	80055a0 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 8005582:	f000 bee8 	b.w	8006356 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005586:	4baa      	ldr	r3, [pc, #680]	; (8005830 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005588:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800558c:	f003 0302 	and.w	r3, r3, #2
 8005590:	2b02      	cmp	r3, #2
 8005592:	f040 86e2 	bne.w	800635a <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
        frequency = LSE_VALUE;
 8005596:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800559a:	61fb      	str	r3, [r7, #28]
      break;
 800559c:	f000 bedd 	b.w	800635a <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80055a0:	4ba3      	ldr	r3, [pc, #652]	; (8005830 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80055a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80055a6:	f003 0302 	and.w	r3, r3, #2
 80055aa:	2b02      	cmp	r3, #2
 80055ac:	f040 86d7 	bne.w	800635e <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
          frequency = LSI_VALUE;
 80055b0:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80055b4:	61fb      	str	r3, [r7, #28]
      break;
 80055b6:	f000 bed2 	b.w	800635e <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80055ba:	4b9d      	ldr	r3, [pc, #628]	; (8005830 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055c2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80055c6:	f040 86cc 	bne.w	8006362 <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
        frequency = HSE_VALUE / 32U;
 80055ca:	4b9a      	ldr	r3, [pc, #616]	; (8005834 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80055cc:	61fb      	str	r3, [r7, #28]
      break;
 80055ce:	f000 bec8 	b.w	8006362 <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80055d2:	4b97      	ldr	r3, [pc, #604]	; (8005830 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80055d4:	68db      	ldr	r3, [r3, #12]
 80055d6:	f003 0303 	and.w	r3, r3, #3
 80055da:	613b      	str	r3, [r7, #16]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 80055dc:	693b      	ldr	r3, [r7, #16]
 80055de:	2b03      	cmp	r3, #3
 80055e0:	d036      	beq.n	8005650 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 80055e2:	693b      	ldr	r3, [r7, #16]
 80055e4:	2b03      	cmp	r3, #3
 80055e6:	d840      	bhi.n	800566a <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 80055e8:	693b      	ldr	r3, [r7, #16]
 80055ea:	2b01      	cmp	r3, #1
 80055ec:	d003      	beq.n	80055f6 <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 80055ee:	693b      	ldr	r3, [r7, #16]
 80055f0:	2b02      	cmp	r3, #2
 80055f2:	d020      	beq.n	8005636 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 80055f4:	e039      	b.n	800566a <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80055f6:	4b8e      	ldr	r3, [pc, #568]	; (8005830 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f003 0302 	and.w	r3, r3, #2
 80055fe:	2b02      	cmp	r3, #2
 8005600:	d116      	bne.n	8005630 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8005602:	4b8b      	ldr	r3, [pc, #556]	; (8005830 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f003 0308 	and.w	r3, r3, #8
 800560a:	2b00      	cmp	r3, #0
 800560c:	d005      	beq.n	800561a <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 800560e:	4b88      	ldr	r3, [pc, #544]	; (8005830 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	091b      	lsrs	r3, r3, #4
 8005614:	f003 030f 	and.w	r3, r3, #15
 8005618:	e005      	b.n	8005626 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 800561a:	4b85      	ldr	r3, [pc, #532]	; (8005830 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800561c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005620:	0a1b      	lsrs	r3, r3, #8
 8005622:	f003 030f 	and.w	r3, r3, #15
 8005626:	4a84      	ldr	r2, [pc, #528]	; (8005838 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005628:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800562c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 800562e:	e01f      	b.n	8005670 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8005630:	2300      	movs	r3, #0
 8005632:	61bb      	str	r3, [r7, #24]
      break;
 8005634:	e01c      	b.n	8005670 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005636:	4b7e      	ldr	r3, [pc, #504]	; (8005830 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800563e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005642:	d102      	bne.n	800564a <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 8005644:	4b7d      	ldr	r3, [pc, #500]	; (800583c <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8005646:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8005648:	e012      	b.n	8005670 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 800564a:	2300      	movs	r3, #0
 800564c:	61bb      	str	r3, [r7, #24]
      break;
 800564e:	e00f      	b.n	8005670 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005650:	4b77      	ldr	r3, [pc, #476]	; (8005830 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005658:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800565c:	d102      	bne.n	8005664 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 800565e:	4b77      	ldr	r3, [pc, #476]	; (800583c <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8005660:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8005662:	e005      	b.n	8005670 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8005664:	2300      	movs	r3, #0
 8005666:	61bb      	str	r3, [r7, #24]
      break;
 8005668:	e002      	b.n	8005670 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 800566a:	2300      	movs	r3, #0
 800566c:	61bb      	str	r3, [r7, #24]
      break;
 800566e:	bf00      	nop
    }

    switch(PeriphClk)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005676:	f000 8604 	beq.w	8006282 <HAL_RCCEx_GetPeriphCLKFreq+0xd42>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005680:	f200 8671 	bhi.w	8006366 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800568a:	f000 8467 	beq.w	8005f5c <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005694:	f200 8667 	bhi.w	8006366 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800569e:	f000 852f 	beq.w	8006100 <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80056a8:	f200 865d 	bhi.w	8006366 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80056b2:	f000 8185 	beq.w	80059c0 <HAL_RCCEx_GetPeriphCLKFreq+0x480>
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80056bc:	f200 8653 	bhi.w	8006366 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80056c6:	f000 80cb 	beq.w	8005860 <HAL_RCCEx_GetPeriphCLKFreq+0x320>
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80056d0:	f200 8649 	bhi.w	8006366 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056da:	f000 842e 	beq.w	8005f3a <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056e4:	f200 863f 	bhi.w	8006366 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80056ee:	f000 83e2 	beq.w	8005eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x976>
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80056f8:	f200 8635 	bhi.w	8006366 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005702:	f000 80ad 	beq.w	8005860 <HAL_RCCEx_GetPeriphCLKFreq+0x320>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800570c:	f200 862b 	bhi.w	8006366 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005716:	f000 809b 	beq.w	8005850 <HAL_RCCEx_GetPeriphCLKFreq+0x310>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005720:	f200 8621 	bhi.w	8006366 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800572a:	f000 8089 	beq.w	8005840 <HAL_RCCEx_GetPeriphCLKFreq+0x300>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005734:	f200 8617 	bhi.w	8006366 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800573e:	f000 8552 	beq.w	80061e6 <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005748:	f200 860d 	bhi.w	8006366 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005752:	f000 84fe 	beq.w	8006152 <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800575c:	f200 8603 	bhi.w	8006366 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005766:	f000 849f 	beq.w	80060a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005770:	f200 85f9 	bhi.w	8006366 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2b80      	cmp	r3, #128	; 0x80
 8005778:	f000 846a 	beq.w	8006050 <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2b80      	cmp	r3, #128	; 0x80
 8005780:	f200 85f1 	bhi.w	8006366 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2b20      	cmp	r3, #32
 8005788:	d84c      	bhi.n	8005824 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2b00      	cmp	r3, #0
 800578e:	f000 85ea 	beq.w	8006366 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	3b01      	subs	r3, #1
 8005796:	2b1f      	cmp	r3, #31
 8005798:	f200 85e5 	bhi.w	8006366 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 800579c:	a201      	add	r2, pc, #4	; (adr r2, 80057a4 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 800579e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057a2:	bf00      	nop
 80057a4:	08005bb5 	.word	0x08005bb5
 80057a8:	08005c23 	.word	0x08005c23
 80057ac:	08006367 	.word	0x08006367
 80057b0:	08005cb7 	.word	0x08005cb7
 80057b4:	08006367 	.word	0x08006367
 80057b8:	08006367 	.word	0x08006367
 80057bc:	08006367 	.word	0x08006367
 80057c0:	08005d2f 	.word	0x08005d2f
 80057c4:	08006367 	.word	0x08006367
 80057c8:	08006367 	.word	0x08006367
 80057cc:	08006367 	.word	0x08006367
 80057d0:	08006367 	.word	0x08006367
 80057d4:	08006367 	.word	0x08006367
 80057d8:	08006367 	.word	0x08006367
 80057dc:	08006367 	.word	0x08006367
 80057e0:	08005db3 	.word	0x08005db3
 80057e4:	08006367 	.word	0x08006367
 80057e8:	08006367 	.word	0x08006367
 80057ec:	08006367 	.word	0x08006367
 80057f0:	08006367 	.word	0x08006367
 80057f4:	08006367 	.word	0x08006367
 80057f8:	08006367 	.word	0x08006367
 80057fc:	08006367 	.word	0x08006367
 8005800:	08006367 	.word	0x08006367
 8005804:	08006367 	.word	0x08006367
 8005808:	08006367 	.word	0x08006367
 800580c:	08006367 	.word	0x08006367
 8005810:	08006367 	.word	0x08006367
 8005814:	08006367 	.word	0x08006367
 8005818:	08006367 	.word	0x08006367
 800581c:	08006367 	.word	0x08006367
 8005820:	08005e35 	.word	0x08005e35
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2b40      	cmp	r3, #64	; 0x40
 8005828:	f000 83e6 	beq.w	8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 800582c:	f000 bd9b 	b.w	8006366 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8005830:	40021000 	.word	0x40021000
 8005834:	0007a120 	.word	0x0007a120
 8005838:	0800d7d8 	.word	0x0800d7d8
 800583c:	00f42400 	.word	0x00f42400
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8005840:	69b9      	ldr	r1, [r7, #24]
 8005842:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8005846:	f000 ff83 	bl	8006750 <RCCEx_GetSAIxPeriphCLKFreq>
 800584a:	61f8      	str	r0, [r7, #28]
      break;
 800584c:	f000 bd8e 	b.w	800636c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 8005850:	69b9      	ldr	r1, [r7, #24]
 8005852:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8005856:	f000 ff7b 	bl	8006750 <RCCEx_GetSAIxPeriphCLKFreq>
 800585a:	61f8      	str	r0, [r7, #28]
      break;
 800585c:	f000 bd86 	b.w	800636c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8005860:	4b9a      	ldr	r3, [pc, #616]	; (8005acc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005862:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005866:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800586a:	60fb      	str	r3, [r7, #12]
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005872:	d015      	beq.n	80058a0 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800587a:	f200 8092 	bhi.w	80059a2 <HAL_RCCEx_GetPeriphCLKFreq+0x462>
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005884:	d029      	beq.n	80058da <HAL_RCCEx_GetPeriphCLKFreq+0x39a>
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800588c:	f200 8089 	bhi.w	80059a2 <HAL_RCCEx_GetPeriphCLKFreq+0x462>
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d07b      	beq.n	800598e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800589c:	d04a      	beq.n	8005934 <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
          break;
 800589e:	e080      	b.n	80059a2 <HAL_RCCEx_GetPeriphCLKFreq+0x462>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80058a0:	4b8a      	ldr	r3, [pc, #552]	; (8005acc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f003 0302 	and.w	r3, r3, #2
 80058a8:	2b02      	cmp	r3, #2
 80058aa:	d17d      	bne.n	80059a8 <HAL_RCCEx_GetPeriphCLKFreq+0x468>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80058ac:	4b87      	ldr	r3, [pc, #540]	; (8005acc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f003 0308 	and.w	r3, r3, #8
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d005      	beq.n	80058c4 <HAL_RCCEx_GetPeriphCLKFreq+0x384>
 80058b8:	4b84      	ldr	r3, [pc, #528]	; (8005acc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	091b      	lsrs	r3, r3, #4
 80058be:	f003 030f 	and.w	r3, r3, #15
 80058c2:	e005      	b.n	80058d0 <HAL_RCCEx_GetPeriphCLKFreq+0x390>
 80058c4:	4b81      	ldr	r3, [pc, #516]	; (8005acc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80058c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80058ca:	0a1b      	lsrs	r3, r3, #8
 80058cc:	f003 030f 	and.w	r3, r3, #15
 80058d0:	4a7f      	ldr	r2, [pc, #508]	; (8005ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80058d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80058d6:	61fb      	str	r3, [r7, #28]
          break;
 80058d8:	e066      	b.n	80059a8 <HAL_RCCEx_GetPeriphCLKFreq+0x468>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 80058da:	4b7c      	ldr	r3, [pc, #496]	; (8005acc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058e2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80058e6:	d162      	bne.n	80059ae <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 80058e8:	4b78      	ldr	r3, [pc, #480]	; (8005acc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80058ea:	68db      	ldr	r3, [r3, #12]
 80058ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80058f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80058f4:	d15b      	bne.n	80059ae <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80058f6:	4b75      	ldr	r3, [pc, #468]	; (8005acc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80058f8:	68db      	ldr	r3, [r3, #12]
 80058fa:	0a1b      	lsrs	r3, r3, #8
 80058fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005900:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005902:	69bb      	ldr	r3, [r7, #24]
 8005904:	68ba      	ldr	r2, [r7, #8]
 8005906:	fb03 f202 	mul.w	r2, r3, r2
 800590a:	4b70      	ldr	r3, [pc, #448]	; (8005acc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800590c:	68db      	ldr	r3, [r3, #12]
 800590e:	091b      	lsrs	r3, r3, #4
 8005910:	f003 030f 	and.w	r3, r3, #15
 8005914:	3301      	adds	r3, #1
 8005916:	fbb2 f3f3 	udiv	r3, r2, r3
 800591a:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 800591c:	4b6b      	ldr	r3, [pc, #428]	; (8005acc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800591e:	68db      	ldr	r3, [r3, #12]
 8005920:	0d5b      	lsrs	r3, r3, #21
 8005922:	f003 0303 	and.w	r3, r3, #3
 8005926:	3301      	adds	r3, #1
 8005928:	005b      	lsls	r3, r3, #1
 800592a:	69ba      	ldr	r2, [r7, #24]
 800592c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005930:	61fb      	str	r3, [r7, #28]
          break;
 8005932:	e03c      	b.n	80059ae <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8005934:	4b65      	ldr	r3, [pc, #404]	; (8005acc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800593c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005940:	d138      	bne.n	80059b4 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8005942:	4b62      	ldr	r3, [pc, #392]	; (8005acc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005944:	691b      	ldr	r3, [r3, #16]
 8005946:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800594a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800594e:	d131      	bne.n	80059b4 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8005950:	4b5e      	ldr	r3, [pc, #376]	; (8005acc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005952:	691b      	ldr	r3, [r3, #16]
 8005954:	0a1b      	lsrs	r3, r3, #8
 8005956:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800595a:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 800595c:	69bb      	ldr	r3, [r7, #24]
 800595e:	68ba      	ldr	r2, [r7, #8]
 8005960:	fb03 f202 	mul.w	r2, r3, r2
 8005964:	4b59      	ldr	r3, [pc, #356]	; (8005acc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005966:	691b      	ldr	r3, [r3, #16]
 8005968:	091b      	lsrs	r3, r3, #4
 800596a:	f003 030f 	and.w	r3, r3, #15
 800596e:	3301      	adds	r3, #1
 8005970:	fbb2 f3f3 	udiv	r3, r2, r3
 8005974:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8005976:	4b55      	ldr	r3, [pc, #340]	; (8005acc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005978:	691b      	ldr	r3, [r3, #16]
 800597a:	0d5b      	lsrs	r3, r3, #21
 800597c:	f003 0303 	and.w	r3, r3, #3
 8005980:	3301      	adds	r3, #1
 8005982:	005b      	lsls	r3, r3, #1
 8005984:	69ba      	ldr	r2, [r7, #24]
 8005986:	fbb2 f3f3 	udiv	r3, r2, r3
 800598a:	61fb      	str	r3, [r7, #28]
          break;
 800598c:	e012      	b.n	80059b4 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 800598e:	4b4f      	ldr	r3, [pc, #316]	; (8005acc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005990:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005994:	f003 0302 	and.w	r3, r3, #2
 8005998:	2b02      	cmp	r3, #2
 800599a:	d10e      	bne.n	80059ba <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
            frequency = HSI48_VALUE;
 800599c:	4b4d      	ldr	r3, [pc, #308]	; (8005ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800599e:	61fb      	str	r3, [r7, #28]
          break;
 80059a0:	e00b      	b.n	80059ba <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
          break;
 80059a2:	bf00      	nop
 80059a4:	f000 bce2 	b.w	800636c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80059a8:	bf00      	nop
 80059aa:	f000 bcdf 	b.w	800636c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80059ae:	bf00      	nop
 80059b0:	f000 bcdc 	b.w	800636c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80059b4:	bf00      	nop
 80059b6:	f000 bcd9 	b.w	800636c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80059ba:	bf00      	nop
        break;
 80059bc:	f000 bcd6 	b.w	800636c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      if(HAL_IS_BIT_SET(RCC->CCIPR2, RCC_CCIPR2_SDMMCSEL))  /* PLL "P" ? */
 80059c0:	4b42      	ldr	r3, [pc, #264]	; (8005acc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80059c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80059c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80059ca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80059ce:	d13d      	bne.n	8005a4c <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 80059d0:	4b3e      	ldr	r3, [pc, #248]	; (8005acc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059d8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80059dc:	f040 84c5 	bne.w	800636a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLPEN))
 80059e0:	4b3a      	ldr	r3, [pc, #232]	; (8005acc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80059e2:	68db      	ldr	r3, [r3, #12]
 80059e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80059e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059ec:	f040 84bd 	bne.w	800636a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80059f0:	4b36      	ldr	r3, [pc, #216]	; (8005acc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80059f2:	68db      	ldr	r3, [r3, #12]
 80059f4:	0a1b      	lsrs	r3, r3, #8
 80059f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80059fa:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80059fc:	69bb      	ldr	r3, [r7, #24]
 80059fe:	68ba      	ldr	r2, [r7, #8]
 8005a00:	fb03 f202 	mul.w	r2, r3, r2
 8005a04:	4b31      	ldr	r3, [pc, #196]	; (8005acc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005a06:	68db      	ldr	r3, [r3, #12]
 8005a08:	091b      	lsrs	r3, r3, #4
 8005a0a:	f003 030f 	and.w	r3, r3, #15
 8005a0e:	3301      	adds	r3, #1
 8005a10:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a14:	61bb      	str	r3, [r7, #24]
            pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 8005a16:	4b2d      	ldr	r3, [pc, #180]	; (8005acc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005a18:	68db      	ldr	r3, [r3, #12]
 8005a1a:	0edb      	lsrs	r3, r3, #27
 8005a1c:	f003 031f 	and.w	r3, r3, #31
 8005a20:	617b      	str	r3, [r7, #20]
            if(pllp == 0U)
 8005a22:	697b      	ldr	r3, [r7, #20]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d10a      	bne.n	8005a3e <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
              if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8005a28:	4b28      	ldr	r3, [pc, #160]	; (8005acc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005a2a:	68db      	ldr	r3, [r3, #12]
 8005a2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d002      	beq.n	8005a3a <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
                pllp = 17U;
 8005a34:	2311      	movs	r3, #17
 8005a36:	617b      	str	r3, [r7, #20]
 8005a38:	e001      	b.n	8005a3e <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
                pllp = 7U;
 8005a3a:	2307      	movs	r3, #7
 8005a3c:	617b      	str	r3, [r7, #20]
            frequency = (pllvco / pllp);
 8005a3e:	69ba      	ldr	r2, [r7, #24]
 8005a40:	697b      	ldr	r3, [r7, #20]
 8005a42:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a46:	61fb      	str	r3, [r7, #28]
      break;
 8005a48:	f000 bc8f 	b.w	800636a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8005a4c:	4b1f      	ldr	r3, [pc, #124]	; (8005acc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005a4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a52:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8005a56:	60fb      	str	r3, [r7, #12]
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005a5e:	d016      	beq.n	8005a8e <HAL_RCCEx_GetPeriphCLKFreq+0x54e>
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005a66:	f200 809b 	bhi.w	8005ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005a70:	d032      	beq.n	8005ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005a78:	f200 8092 	bhi.w	8005ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	f000 8084 	beq.w	8005b8c <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005a8a:	d052      	beq.n	8005b32 <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
          break;
 8005a8c:	e088      	b.n	8005ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8005a8e:	4b0f      	ldr	r3, [pc, #60]	; (8005acc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f003 0302 	and.w	r3, r3, #2
 8005a96:	2b02      	cmp	r3, #2
 8005a98:	f040 8084 	bne.w	8005ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8005a9c:	4b0b      	ldr	r3, [pc, #44]	; (8005acc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f003 0308 	and.w	r3, r3, #8
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d005      	beq.n	8005ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x574>
 8005aa8:	4b08      	ldr	r3, [pc, #32]	; (8005acc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	091b      	lsrs	r3, r3, #4
 8005aae:	f003 030f 	and.w	r3, r3, #15
 8005ab2:	e005      	b.n	8005ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x580>
 8005ab4:	4b05      	ldr	r3, [pc, #20]	; (8005acc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005ab6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005aba:	0a1b      	lsrs	r3, r3, #8
 8005abc:	f003 030f 	and.w	r3, r3, #15
 8005ac0:	4a03      	ldr	r2, [pc, #12]	; (8005ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005ac2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ac6:	61fb      	str	r3, [r7, #28]
          break;
 8005ac8:	e06c      	b.n	8005ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 8005aca:	bf00      	nop
 8005acc:	40021000 	.word	0x40021000
 8005ad0:	0800d7d8 	.word	0x0800d7d8
 8005ad4:	02dc6c00 	.word	0x02dc6c00
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8005ad8:	4ba5      	ldr	r3, [pc, #660]	; (8005d70 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ae0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005ae4:	d160      	bne.n	8005ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8005ae6:	4ba2      	ldr	r3, [pc, #648]	; (8005d70 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005ae8:	68db      	ldr	r3, [r3, #12]
 8005aea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005aee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005af2:	d159      	bne.n	8005ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8005af4:	4b9e      	ldr	r3, [pc, #632]	; (8005d70 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005af6:	68db      	ldr	r3, [r3, #12]
 8005af8:	0a1b      	lsrs	r3, r3, #8
 8005afa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005afe:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005b00:	69bb      	ldr	r3, [r7, #24]
 8005b02:	68ba      	ldr	r2, [r7, #8]
 8005b04:	fb03 f202 	mul.w	r2, r3, r2
 8005b08:	4b99      	ldr	r3, [pc, #612]	; (8005d70 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005b0a:	68db      	ldr	r3, [r3, #12]
 8005b0c:	091b      	lsrs	r3, r3, #4
 8005b0e:	f003 030f 	and.w	r3, r3, #15
 8005b12:	3301      	adds	r3, #1
 8005b14:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b18:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8005b1a:	4b95      	ldr	r3, [pc, #596]	; (8005d70 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005b1c:	68db      	ldr	r3, [r3, #12]
 8005b1e:	0d5b      	lsrs	r3, r3, #21
 8005b20:	f003 0303 	and.w	r3, r3, #3
 8005b24:	3301      	adds	r3, #1
 8005b26:	005b      	lsls	r3, r3, #1
 8005b28:	69ba      	ldr	r2, [r7, #24]
 8005b2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b2e:	61fb      	str	r3, [r7, #28]
          break;
 8005b30:	e03a      	b.n	8005ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8005b32:	4b8f      	ldr	r3, [pc, #572]	; (8005d70 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005b3a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005b3e:	d135      	bne.n	8005bac <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8005b40:	4b8b      	ldr	r3, [pc, #556]	; (8005d70 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005b42:	691b      	ldr	r3, [r3, #16]
 8005b44:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005b48:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005b4c:	d12e      	bne.n	8005bac <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8005b4e:	4b88      	ldr	r3, [pc, #544]	; (8005d70 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005b50:	691b      	ldr	r3, [r3, #16]
 8005b52:	0a1b      	lsrs	r3, r3, #8
 8005b54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b58:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8005b5a:	69bb      	ldr	r3, [r7, #24]
 8005b5c:	68ba      	ldr	r2, [r7, #8]
 8005b5e:	fb03 f202 	mul.w	r2, r3, r2
 8005b62:	4b83      	ldr	r3, [pc, #524]	; (8005d70 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005b64:	691b      	ldr	r3, [r3, #16]
 8005b66:	091b      	lsrs	r3, r3, #4
 8005b68:	f003 030f 	and.w	r3, r3, #15
 8005b6c:	3301      	adds	r3, #1
 8005b6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b72:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8005b74:	4b7e      	ldr	r3, [pc, #504]	; (8005d70 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005b76:	691b      	ldr	r3, [r3, #16]
 8005b78:	0d5b      	lsrs	r3, r3, #21
 8005b7a:	f003 0303 	and.w	r3, r3, #3
 8005b7e:	3301      	adds	r3, #1
 8005b80:	005b      	lsls	r3, r3, #1
 8005b82:	69ba      	ldr	r2, [r7, #24]
 8005b84:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b88:	61fb      	str	r3, [r7, #28]
          break;
 8005b8a:	e00f      	b.n	8005bac <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 8005b8c:	4b78      	ldr	r3, [pc, #480]	; (8005d70 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005b8e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005b92:	f003 0302 	and.w	r3, r3, #2
 8005b96:	2b02      	cmp	r3, #2
 8005b98:	d10a      	bne.n	8005bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
            frequency = HSI48_VALUE;
 8005b9a:	4b76      	ldr	r3, [pc, #472]	; (8005d74 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005b9c:	61fb      	str	r3, [r7, #28]
          break;
 8005b9e:	e007      	b.n	8005bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
          break;
 8005ba0:	bf00      	nop
 8005ba2:	e3e2      	b.n	800636a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          break;
 8005ba4:	bf00      	nop
 8005ba6:	e3e0      	b.n	800636a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          break;
 8005ba8:	bf00      	nop
 8005baa:	e3de      	b.n	800636a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          break;
 8005bac:	bf00      	nop
 8005bae:	e3dc      	b.n	800636a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          break;
 8005bb0:	bf00      	nop
      break;
 8005bb2:	e3da      	b.n	800636a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8005bb4:	4b6e      	ldr	r3, [pc, #440]	; (8005d70 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005bb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bba:	f003 0303 	and.w	r3, r3, #3
 8005bbe:	60fb      	str	r3, [r7, #12]
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	2b03      	cmp	r3, #3
 8005bc4:	d827      	bhi.n	8005c16 <HAL_RCCEx_GetPeriphCLKFreq+0x6d6>
 8005bc6:	a201      	add	r2, pc, #4	; (adr r2, 8005bcc <HAL_RCCEx_GetPeriphCLKFreq+0x68c>)
 8005bc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bcc:	08005bdd 	.word	0x08005bdd
 8005bd0:	08005be5 	.word	0x08005be5
 8005bd4:	08005bed 	.word	0x08005bed
 8005bd8:	08005c01 	.word	0x08005c01
          frequency = HAL_RCC_GetPCLK2Freq();
 8005bdc:	f7ff f81a 	bl	8004c14 <HAL_RCC_GetPCLK2Freq>
 8005be0:	61f8      	str	r0, [r7, #28]
          break;
 8005be2:	e01d      	b.n	8005c20 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
          frequency = HAL_RCC_GetSysClockFreq();
 8005be4:	f7fe ff6a 	bl	8004abc <HAL_RCC_GetSysClockFreq>
 8005be8:	61f8      	str	r0, [r7, #28]
          break;
 8005bea:	e019      	b.n	8005c20 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005bec:	4b60      	ldr	r3, [pc, #384]	; (8005d70 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005bf4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005bf8:	d10f      	bne.n	8005c1a <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
            frequency = HSI_VALUE;
 8005bfa:	4b5f      	ldr	r3, [pc, #380]	; (8005d78 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8005bfc:	61fb      	str	r3, [r7, #28]
          break;
 8005bfe:	e00c      	b.n	8005c1a <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005c00:	4b5b      	ldr	r3, [pc, #364]	; (8005d70 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005c02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c06:	f003 0302 	and.w	r3, r3, #2
 8005c0a:	2b02      	cmp	r3, #2
 8005c0c:	d107      	bne.n	8005c1e <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
            frequency = LSE_VALUE;
 8005c0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c12:	61fb      	str	r3, [r7, #28]
          break;
 8005c14:	e003      	b.n	8005c1e <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
          break;
 8005c16:	bf00      	nop
 8005c18:	e3a8      	b.n	800636c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005c1a:	bf00      	nop
 8005c1c:	e3a6      	b.n	800636c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005c1e:	bf00      	nop
        break;
 8005c20:	e3a4      	b.n	800636c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8005c22:	4b53      	ldr	r3, [pc, #332]	; (8005d70 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005c24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c28:	f003 030c 	and.w	r3, r3, #12
 8005c2c:	60fb      	str	r3, [r7, #12]
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	2b0c      	cmp	r3, #12
 8005c32:	d83a      	bhi.n	8005caa <HAL_RCCEx_GetPeriphCLKFreq+0x76a>
 8005c34:	a201      	add	r2, pc, #4	; (adr r2, 8005c3c <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>)
 8005c36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c3a:	bf00      	nop
 8005c3c:	08005c71 	.word	0x08005c71
 8005c40:	08005cab 	.word	0x08005cab
 8005c44:	08005cab 	.word	0x08005cab
 8005c48:	08005cab 	.word	0x08005cab
 8005c4c:	08005c79 	.word	0x08005c79
 8005c50:	08005cab 	.word	0x08005cab
 8005c54:	08005cab 	.word	0x08005cab
 8005c58:	08005cab 	.word	0x08005cab
 8005c5c:	08005c81 	.word	0x08005c81
 8005c60:	08005cab 	.word	0x08005cab
 8005c64:	08005cab 	.word	0x08005cab
 8005c68:	08005cab 	.word	0x08005cab
 8005c6c:	08005c95 	.word	0x08005c95
          frequency = HAL_RCC_GetPCLK1Freq();
 8005c70:	f7fe ffba 	bl	8004be8 <HAL_RCC_GetPCLK1Freq>
 8005c74:	61f8      	str	r0, [r7, #28]
          break;
 8005c76:	e01d      	b.n	8005cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x774>
          frequency = HAL_RCC_GetSysClockFreq();
 8005c78:	f7fe ff20 	bl	8004abc <HAL_RCC_GetSysClockFreq>
 8005c7c:	61f8      	str	r0, [r7, #28]
          break;
 8005c7e:	e019      	b.n	8005cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x774>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005c80:	4b3b      	ldr	r3, [pc, #236]	; (8005d70 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c8c:	d10f      	bne.n	8005cae <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
            frequency = HSI_VALUE;
 8005c8e:	4b3a      	ldr	r3, [pc, #232]	; (8005d78 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8005c90:	61fb      	str	r3, [r7, #28]
          break;
 8005c92:	e00c      	b.n	8005cae <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005c94:	4b36      	ldr	r3, [pc, #216]	; (8005d70 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005c96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c9a:	f003 0302 	and.w	r3, r3, #2
 8005c9e:	2b02      	cmp	r3, #2
 8005ca0:	d107      	bne.n	8005cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
            frequency = LSE_VALUE;
 8005ca2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ca6:	61fb      	str	r3, [r7, #28]
          break;
 8005ca8:	e003      	b.n	8005cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
          break;
 8005caa:	bf00      	nop
 8005cac:	e35e      	b.n	800636c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005cae:	bf00      	nop
 8005cb0:	e35c      	b.n	800636c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005cb2:	bf00      	nop
        break;
 8005cb4:	e35a      	b.n	800636c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8005cb6:	4b2e      	ldr	r3, [pc, #184]	; (8005d70 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005cb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cbc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005cc0:	60fb      	str	r3, [r7, #12]
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	2b30      	cmp	r3, #48	; 0x30
 8005cc6:	d021      	beq.n	8005d0c <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	2b30      	cmp	r3, #48	; 0x30
 8005ccc:	d829      	bhi.n	8005d22 <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	2b20      	cmp	r3, #32
 8005cd2:	d011      	beq.n	8005cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	2b20      	cmp	r3, #32
 8005cd8:	d823      	bhi.n	8005d22 <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d003      	beq.n	8005ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	2b10      	cmp	r3, #16
 8005ce4:	d004      	beq.n	8005cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>
          break;
 8005ce6:	e01c      	b.n	8005d22 <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005ce8:	f7fe ff7e 	bl	8004be8 <HAL_RCC_GetPCLK1Freq>
 8005cec:	61f8      	str	r0, [r7, #28]
          break;
 8005cee:	e01d      	b.n	8005d2c <HAL_RCCEx_GetPeriphCLKFreq+0x7ec>
          frequency = HAL_RCC_GetSysClockFreq();
 8005cf0:	f7fe fee4 	bl	8004abc <HAL_RCC_GetSysClockFreq>
 8005cf4:	61f8      	str	r0, [r7, #28]
          break;
 8005cf6:	e019      	b.n	8005d2c <HAL_RCCEx_GetPeriphCLKFreq+0x7ec>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005cf8:	4b1d      	ldr	r3, [pc, #116]	; (8005d70 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d04:	d10f      	bne.n	8005d26 <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
            frequency = HSI_VALUE;
 8005d06:	4b1c      	ldr	r3, [pc, #112]	; (8005d78 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8005d08:	61fb      	str	r3, [r7, #28]
          break;
 8005d0a:	e00c      	b.n	8005d26 <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005d0c:	4b18      	ldr	r3, [pc, #96]	; (8005d70 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005d0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d12:	f003 0302 	and.w	r3, r3, #2
 8005d16:	2b02      	cmp	r3, #2
 8005d18:	d107      	bne.n	8005d2a <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
            frequency = LSE_VALUE;
 8005d1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d1e:	61fb      	str	r3, [r7, #28]
          break;
 8005d20:	e003      	b.n	8005d2a <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
          break;
 8005d22:	bf00      	nop
 8005d24:	e322      	b.n	800636c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005d26:	bf00      	nop
 8005d28:	e320      	b.n	800636c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005d2a:	bf00      	nop
        break;
 8005d2c:	e31e      	b.n	800636c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8005d2e:	4b10      	ldr	r3, [pc, #64]	; (8005d70 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005d30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d34:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005d38:	60fb      	str	r3, [r7, #12]
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	2bc0      	cmp	r3, #192	; 0xc0
 8005d3e:	d027      	beq.n	8005d90 <HAL_RCCEx_GetPeriphCLKFreq+0x850>
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	2bc0      	cmp	r3, #192	; 0xc0
 8005d44:	d82f      	bhi.n	8005da6 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	2b80      	cmp	r3, #128	; 0x80
 8005d4a:	d017      	beq.n	8005d7c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	2b80      	cmp	r3, #128	; 0x80
 8005d50:	d829      	bhi.n	8005da6 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d003      	beq.n	8005d60 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	2b40      	cmp	r3, #64	; 0x40
 8005d5c:	d004      	beq.n	8005d68 <HAL_RCCEx_GetPeriphCLKFreq+0x828>
          break;
 8005d5e:	e022      	b.n	8005da6 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005d60:	f7fe ff42 	bl	8004be8 <HAL_RCC_GetPCLK1Freq>
 8005d64:	61f8      	str	r0, [r7, #28]
          break;
 8005d66:	e023      	b.n	8005db0 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
          frequency = HAL_RCC_GetSysClockFreq();
 8005d68:	f7fe fea8 	bl	8004abc <HAL_RCC_GetSysClockFreq>
 8005d6c:	61f8      	str	r0, [r7, #28]
          break;
 8005d6e:	e01f      	b.n	8005db0 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
 8005d70:	40021000 	.word	0x40021000
 8005d74:	02dc6c00 	.word	0x02dc6c00
 8005d78:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005d7c:	4b9b      	ldr	r3, [pc, #620]	; (8005fec <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d88:	d10f      	bne.n	8005daa <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
            frequency = HSI_VALUE;
 8005d8a:	4b99      	ldr	r3, [pc, #612]	; (8005ff0 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005d8c:	61fb      	str	r3, [r7, #28]
          break;
 8005d8e:	e00c      	b.n	8005daa <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005d90:	4b96      	ldr	r3, [pc, #600]	; (8005fec <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8005d92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d96:	f003 0302 	and.w	r3, r3, #2
 8005d9a:	2b02      	cmp	r3, #2
 8005d9c:	d107      	bne.n	8005dae <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
            frequency = LSE_VALUE;
 8005d9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005da2:	61fb      	str	r3, [r7, #28]
          break;
 8005da4:	e003      	b.n	8005dae <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
          break;
 8005da6:	bf00      	nop
 8005da8:	e2e0      	b.n	800636c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005daa:	bf00      	nop
 8005dac:	e2de      	b.n	800636c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005dae:	bf00      	nop
        break;
 8005db0:	e2dc      	b.n	800636c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8005db2:	4b8e      	ldr	r3, [pc, #568]	; (8005fec <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8005db4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005db8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005dbc:	60fb      	str	r3, [r7, #12]
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005dc4:	d025      	beq.n	8005e12 <HAL_RCCEx_GetPeriphCLKFreq+0x8d2>
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005dcc:	d82c      	bhi.n	8005e28 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005dd4:	d013      	beq.n	8005dfe <HAL_RCCEx_GetPeriphCLKFreq+0x8be>
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ddc:	d824      	bhi.n	8005e28 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d004      	beq.n	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005dea:	d004      	beq.n	8005df6 <HAL_RCCEx_GetPeriphCLKFreq+0x8b6>
          break;
 8005dec:	e01c      	b.n	8005e28 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005dee:	f7fe fefb 	bl	8004be8 <HAL_RCC_GetPCLK1Freq>
 8005df2:	61f8      	str	r0, [r7, #28]
          break;
 8005df4:	e01d      	b.n	8005e32 <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
          frequency = HAL_RCC_GetSysClockFreq();
 8005df6:	f7fe fe61 	bl	8004abc <HAL_RCC_GetSysClockFreq>
 8005dfa:	61f8      	str	r0, [r7, #28]
          break;
 8005dfc:	e019      	b.n	8005e32 <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005dfe:	4b7b      	ldr	r3, [pc, #492]	; (8005fec <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e0a:	d10f      	bne.n	8005e2c <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
            frequency = HSI_VALUE;
 8005e0c:	4b78      	ldr	r3, [pc, #480]	; (8005ff0 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005e0e:	61fb      	str	r3, [r7, #28]
          break;
 8005e10:	e00c      	b.n	8005e2c <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005e12:	4b76      	ldr	r3, [pc, #472]	; (8005fec <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8005e14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e18:	f003 0302 	and.w	r3, r3, #2
 8005e1c:	2b02      	cmp	r3, #2
 8005e1e:	d107      	bne.n	8005e30 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
            frequency = LSE_VALUE;
 8005e20:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e24:	61fb      	str	r3, [r7, #28]
          break;
 8005e26:	e003      	b.n	8005e30 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          break;
 8005e28:	bf00      	nop
 8005e2a:	e29f      	b.n	800636c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005e2c:	bf00      	nop
 8005e2e:	e29d      	b.n	800636c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005e30:	bf00      	nop
        break;
 8005e32:	e29b      	b.n	800636c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8005e34:	4b6d      	ldr	r3, [pc, #436]	; (8005fec <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8005e36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e3a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005e3e:	60fb      	str	r3, [r7, #12]
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005e46:	d025      	beq.n	8005e94 <HAL_RCCEx_GetPeriphCLKFreq+0x954>
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005e4e:	d82c      	bhi.n	8005eaa <HAL_RCCEx_GetPeriphCLKFreq+0x96a>
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e56:	d013      	beq.n	8005e80 <HAL_RCCEx_GetPeriphCLKFreq+0x940>
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e5e:	d824      	bhi.n	8005eaa <HAL_RCCEx_GetPeriphCLKFreq+0x96a>
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d004      	beq.n	8005e70 <HAL_RCCEx_GetPeriphCLKFreq+0x930>
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e6c:	d004      	beq.n	8005e78 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
          break;
 8005e6e:	e01c      	b.n	8005eaa <HAL_RCCEx_GetPeriphCLKFreq+0x96a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005e70:	f7fe feba 	bl	8004be8 <HAL_RCC_GetPCLK1Freq>
 8005e74:	61f8      	str	r0, [r7, #28]
          break;
 8005e76:	e01d      	b.n	8005eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x974>
          frequency = HAL_RCC_GetSysClockFreq();
 8005e78:	f7fe fe20 	bl	8004abc <HAL_RCC_GetSysClockFreq>
 8005e7c:	61f8      	str	r0, [r7, #28]
          break;
 8005e7e:	e019      	b.n	8005eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x974>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005e80:	4b5a      	ldr	r3, [pc, #360]	; (8005fec <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e8c:	d10f      	bne.n	8005eae <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
            frequency = HSI_VALUE;
 8005e8e:	4b58      	ldr	r3, [pc, #352]	; (8005ff0 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005e90:	61fb      	str	r3, [r7, #28]
          break;
 8005e92:	e00c      	b.n	8005eae <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005e94:	4b55      	ldr	r3, [pc, #340]	; (8005fec <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8005e96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e9a:	f003 0302 	and.w	r3, r3, #2
 8005e9e:	2b02      	cmp	r3, #2
 8005ea0:	d107      	bne.n	8005eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x972>
            frequency = LSE_VALUE;
 8005ea2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ea6:	61fb      	str	r3, [r7, #28]
          break;
 8005ea8:	e003      	b.n	8005eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x972>
          break;
 8005eaa:	bf00      	nop
 8005eac:	e25e      	b.n	800636c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005eae:	bf00      	nop
 8005eb0:	e25c      	b.n	800636c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005eb2:	bf00      	nop
        break;
 8005eb4:	e25a      	b.n	800636c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8005eb6:	4b4d      	ldr	r3, [pc, #308]	; (8005fec <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8005eb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ebc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005ec0:	60fb      	str	r3, [r7, #12]
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005ec8:	d007      	beq.n	8005eda <HAL_RCCEx_GetPeriphCLKFreq+0x99a>
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005ed0:	d12f      	bne.n	8005f32 <HAL_RCCEx_GetPeriphCLKFreq+0x9f2>
          frequency = HAL_RCC_GetSysClockFreq();
 8005ed2:	f7fe fdf3 	bl	8004abc <HAL_RCC_GetSysClockFreq>
 8005ed6:	61f8      	str	r0, [r7, #28]
          break;
 8005ed8:	e02e      	b.n	8005f38 <HAL_RCCEx_GetPeriphCLKFreq+0x9f8>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 8005eda:	4b44      	ldr	r3, [pc, #272]	; (8005fec <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005ee2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005ee6:	d126      	bne.n	8005f36 <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
 8005ee8:	4b40      	ldr	r3, [pc, #256]	; (8005fec <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8005eea:	691b      	ldr	r3, [r3, #16]
 8005eec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d020      	beq.n	8005f36 <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8005ef4:	4b3d      	ldr	r3, [pc, #244]	; (8005fec <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8005ef6:	691b      	ldr	r3, [r3, #16]
 8005ef8:	0a1b      	lsrs	r3, r3, #8
 8005efa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005efe:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8005f00:	69bb      	ldr	r3, [r7, #24]
 8005f02:	68ba      	ldr	r2, [r7, #8]
 8005f04:	fb03 f202 	mul.w	r2, r3, r2
 8005f08:	4b38      	ldr	r3, [pc, #224]	; (8005fec <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8005f0a:	691b      	ldr	r3, [r3, #16]
 8005f0c:	091b      	lsrs	r3, r3, #4
 8005f0e:	f003 030f 	and.w	r3, r3, #15
 8005f12:	3301      	adds	r3, #1
 8005f14:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f18:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 8005f1a:	4b34      	ldr	r3, [pc, #208]	; (8005fec <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8005f1c:	691b      	ldr	r3, [r3, #16]
 8005f1e:	0e5b      	lsrs	r3, r3, #25
 8005f20:	f003 0303 	and.w	r3, r3, #3
 8005f24:	3301      	adds	r3, #1
 8005f26:	005b      	lsls	r3, r3, #1
 8005f28:	69ba      	ldr	r2, [r7, #24]
 8005f2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f2e:	61fb      	str	r3, [r7, #28]
          break;
 8005f30:	e001      	b.n	8005f36 <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
          break;
 8005f32:	bf00      	nop
 8005f34:	e21a      	b.n	800636c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005f36:	bf00      	nop
        break;
 8005f38:	e218      	b.n	800636c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 8005f3a:	4b2c      	ldr	r3, [pc, #176]	; (8005fec <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8005f3c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005f40:	f003 0304 	and.w	r3, r3, #4
 8005f44:	60fb      	str	r3, [r7, #12]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d103      	bne.n	8005f54 <HAL_RCCEx_GetPeriphCLKFreq+0xa14>
          frequency = HAL_RCC_GetPCLK2Freq();
 8005f4c:	f7fe fe62 	bl	8004c14 <HAL_RCC_GetPCLK2Freq>
 8005f50:	61f8      	str	r0, [r7, #28]
        break;
 8005f52:	e20b      	b.n	800636c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          frequency = HAL_RCC_GetSysClockFreq();
 8005f54:	f7fe fdb2 	bl	8004abc <HAL_RCC_GetSysClockFreq>
 8005f58:	61f8      	str	r0, [r7, #28]
        break;
 8005f5a:	e207      	b.n	800636c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
 8005f5c:	4b23      	ldr	r3, [pc, #140]	; (8005fec <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8005f5e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005f62:	f003 0318 	and.w	r3, r3, #24
 8005f66:	60fb      	str	r3, [r7, #12]
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	2b10      	cmp	r3, #16
 8005f6c:	d010      	beq.n	8005f90 <HAL_RCCEx_GetPeriphCLKFreq+0xa50>
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	2b10      	cmp	r3, #16
 8005f72:	d834      	bhi.n	8005fde <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d003      	beq.n	8005f82 <HAL_RCCEx_GetPeriphCLKFreq+0xa42>
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	2b08      	cmp	r3, #8
 8005f7e:	d024      	beq.n	8005fca <HAL_RCCEx_GetPeriphCLKFreq+0xa8a>
          break;
 8005f80:	e02d      	b.n	8005fde <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
          frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8005f82:	69b9      	ldr	r1, [r7, #24]
 8005f84:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8005f88:	f000 fbe2 	bl	8006750 <RCCEx_GetSAIxPeriphCLKFreq>
 8005f8c:	61f8      	str	r0, [r7, #28]
          break;
 8005f8e:	e02b      	b.n	8005fe8 <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8005f90:	4b16      	ldr	r3, [pc, #88]	; (8005fec <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f003 0302 	and.w	r3, r3, #2
 8005f98:	2b02      	cmp	r3, #2
 8005f9a:	d122      	bne.n	8005fe2 <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8005f9c:	4b13      	ldr	r3, [pc, #76]	; (8005fec <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f003 0308 	and.w	r3, r3, #8
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d005      	beq.n	8005fb4 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
 8005fa8:	4b10      	ldr	r3, [pc, #64]	; (8005fec <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	091b      	lsrs	r3, r3, #4
 8005fae:	f003 030f 	and.w	r3, r3, #15
 8005fb2:	e005      	b.n	8005fc0 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 8005fb4:	4b0d      	ldr	r3, [pc, #52]	; (8005fec <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8005fb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005fba:	0a1b      	lsrs	r3, r3, #8
 8005fbc:	f003 030f 	and.w	r3, r3, #15
 8005fc0:	4a0c      	ldr	r2, [pc, #48]	; (8005ff4 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8005fc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005fc6:	61fb      	str	r3, [r7, #28]
          break;
 8005fc8:	e00b      	b.n	8005fe2 <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005fca:	4b08      	ldr	r3, [pc, #32]	; (8005fec <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005fd2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005fd6:	d106      	bne.n	8005fe6 <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
            frequency = HSI_VALUE;
 8005fd8:	4b05      	ldr	r3, [pc, #20]	; (8005ff0 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005fda:	61fb      	str	r3, [r7, #28]
          break;
 8005fdc:	e003      	b.n	8005fe6 <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
          break;
 8005fde:	bf00      	nop
 8005fe0:	e1c4      	b.n	800636c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005fe2:	bf00      	nop
 8005fe4:	e1c2      	b.n	800636c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005fe6:	bf00      	nop
        break;
 8005fe8:	e1c0      	b.n	800636c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
 8005fea:	bf00      	nop
 8005fec:	40021000 	.word	0x40021000
 8005ff0:	00f42400 	.word	0x00f42400
 8005ff4:	0800d7d8 	.word	0x0800d7d8
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8005ff8:	4b96      	ldr	r3, [pc, #600]	; (8006254 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8005ffa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ffe:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006002:	60fb      	str	r3, [r7, #12]
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800600a:	d013      	beq.n	8006034 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006012:	d819      	bhi.n	8006048 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d004      	beq.n	8006024 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006020:	d004      	beq.n	800602c <HAL_RCCEx_GetPeriphCLKFreq+0xaec>
          break;
 8006022:	e011      	b.n	8006048 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006024:	f7fe fde0 	bl	8004be8 <HAL_RCC_GetPCLK1Freq>
 8006028:	61f8      	str	r0, [r7, #28]
          break;
 800602a:	e010      	b.n	800604e <HAL_RCCEx_GetPeriphCLKFreq+0xb0e>
          frequency = HAL_RCC_GetSysClockFreq();
 800602c:	f7fe fd46 	bl	8004abc <HAL_RCC_GetSysClockFreq>
 8006030:	61f8      	str	r0, [r7, #28]
          break;
 8006032:	e00c      	b.n	800604e <HAL_RCCEx_GetPeriphCLKFreq+0xb0e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006034:	4b87      	ldr	r3, [pc, #540]	; (8006254 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800603c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006040:	d104      	bne.n	800604c <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
            frequency = HSI_VALUE;
 8006042:	4b85      	ldr	r3, [pc, #532]	; (8006258 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006044:	61fb      	str	r3, [r7, #28]
          break;
 8006046:	e001      	b.n	800604c <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
          break;
 8006048:	bf00      	nop
 800604a:	e18f      	b.n	800636c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800604c:	bf00      	nop
        break;
 800604e:	e18d      	b.n	800636c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8006050:	4b80      	ldr	r3, [pc, #512]	; (8006254 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8006052:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006056:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800605a:	60fb      	str	r3, [r7, #12]
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006062:	d013      	beq.n	800608c <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800606a:	d819      	bhi.n	80060a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d004      	beq.n	800607c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006078:	d004      	beq.n	8006084 <HAL_RCCEx_GetPeriphCLKFreq+0xb44>
          break;
 800607a:	e011      	b.n	80060a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          frequency = HAL_RCC_GetPCLK1Freq();
 800607c:	f7fe fdb4 	bl	8004be8 <HAL_RCC_GetPCLK1Freq>
 8006080:	61f8      	str	r0, [r7, #28]
          break;
 8006082:	e010      	b.n	80060a6 <HAL_RCCEx_GetPeriphCLKFreq+0xb66>
          frequency = HAL_RCC_GetSysClockFreq();
 8006084:	f7fe fd1a 	bl	8004abc <HAL_RCC_GetSysClockFreq>
 8006088:	61f8      	str	r0, [r7, #28]
          break;
 800608a:	e00c      	b.n	80060a6 <HAL_RCCEx_GetPeriphCLKFreq+0xb66>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800608c:	4b71      	ldr	r3, [pc, #452]	; (8006254 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006094:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006098:	d104      	bne.n	80060a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
            frequency = HSI_VALUE;
 800609a:	4b6f      	ldr	r3, [pc, #444]	; (8006258 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800609c:	61fb      	str	r3, [r7, #28]
          break;
 800609e:	e001      	b.n	80060a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
          break;
 80060a0:	bf00      	nop
 80060a2:	e163      	b.n	800636c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80060a4:	bf00      	nop
        break;
 80060a6:	e161      	b.n	800636c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 80060a8:	4b6a      	ldr	r3, [pc, #424]	; (8006254 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 80060aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060ae:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80060b2:	60fb      	str	r3, [r7, #12]
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80060ba:	d013      	beq.n	80060e4 <HAL_RCCEx_GetPeriphCLKFreq+0xba4>
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80060c2:	d819      	bhi.n	80060f8 <HAL_RCCEx_GetPeriphCLKFreq+0xbb8>
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d004      	beq.n	80060d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb94>
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80060d0:	d004      	beq.n	80060dc <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>
          break;
 80060d2:	e011      	b.n	80060f8 <HAL_RCCEx_GetPeriphCLKFreq+0xbb8>
          frequency = HAL_RCC_GetPCLK1Freq();
 80060d4:	f7fe fd88 	bl	8004be8 <HAL_RCC_GetPCLK1Freq>
 80060d8:	61f8      	str	r0, [r7, #28]
          break;
 80060da:	e010      	b.n	80060fe <HAL_RCCEx_GetPeriphCLKFreq+0xbbe>
          frequency = HAL_RCC_GetSysClockFreq();
 80060dc:	f7fe fcee 	bl	8004abc <HAL_RCC_GetSysClockFreq>
 80060e0:	61f8      	str	r0, [r7, #28]
          break;
 80060e2:	e00c      	b.n	80060fe <HAL_RCCEx_GetPeriphCLKFreq+0xbbe>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80060e4:	4b5b      	ldr	r3, [pc, #364]	; (8006254 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80060ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060f0:	d104      	bne.n	80060fc <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
            frequency = HSI_VALUE;
 80060f2:	4b59      	ldr	r3, [pc, #356]	; (8006258 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80060f4:	61fb      	str	r3, [r7, #28]
          break;
 80060f6:	e001      	b.n	80060fc <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
          break;
 80060f8:	bf00      	nop
 80060fa:	e137      	b.n	800636c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80060fc:	bf00      	nop
        break;
 80060fe:	e135      	b.n	800636c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8006100:	4b54      	ldr	r3, [pc, #336]	; (8006254 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8006102:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006106:	f003 0303 	and.w	r3, r3, #3
 800610a:	60fb      	str	r3, [r7, #12]
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	2b02      	cmp	r3, #2
 8006110:	d011      	beq.n	8006136 <HAL_RCCEx_GetPeriphCLKFreq+0xbf6>
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	2b02      	cmp	r3, #2
 8006116:	d818      	bhi.n	800614a <HAL_RCCEx_GetPeriphCLKFreq+0xc0a>
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d003      	beq.n	8006126 <HAL_RCCEx_GetPeriphCLKFreq+0xbe6>
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	2b01      	cmp	r3, #1
 8006122:	d004      	beq.n	800612e <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
          break;
 8006124:	e011      	b.n	800614a <HAL_RCCEx_GetPeriphCLKFreq+0xc0a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006126:	f7fe fd5f 	bl	8004be8 <HAL_RCC_GetPCLK1Freq>
 800612a:	61f8      	str	r0, [r7, #28]
          break;
 800612c:	e010      	b.n	8006150 <HAL_RCCEx_GetPeriphCLKFreq+0xc10>
          frequency = HAL_RCC_GetSysClockFreq();
 800612e:	f7fe fcc5 	bl	8004abc <HAL_RCC_GetSysClockFreq>
 8006132:	61f8      	str	r0, [r7, #28]
          break;
 8006134:	e00c      	b.n	8006150 <HAL_RCCEx_GetPeriphCLKFreq+0xc10>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006136:	4b47      	ldr	r3, [pc, #284]	; (8006254 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800613e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006142:	d104      	bne.n	800614e <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
            frequency = HSI_VALUE;
 8006144:	4b44      	ldr	r3, [pc, #272]	; (8006258 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006146:	61fb      	str	r3, [r7, #28]
          break;
 8006148:	e001      	b.n	800614e <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
          break;
 800614a:	bf00      	nop
 800614c:	e10e      	b.n	800636c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800614e:	bf00      	nop
        break;
 8006150:	e10c      	b.n	800636c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8006152:	4b40      	ldr	r3, [pc, #256]	; (8006254 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8006154:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006158:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800615c:	60fb      	str	r3, [r7, #12]
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006164:	d02c      	beq.n	80061c0 <HAL_RCCEx_GetPeriphCLKFreq+0xc80>
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800616c:	d833      	bhi.n	80061d6 <HAL_RCCEx_GetPeriphCLKFreq+0xc96>
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006174:	d01a      	beq.n	80061ac <HAL_RCCEx_GetPeriphCLKFreq+0xc6c>
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800617c:	d82b      	bhi.n	80061d6 <HAL_RCCEx_GetPeriphCLKFreq+0xc96>
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d004      	beq.n	800618e <HAL_RCCEx_GetPeriphCLKFreq+0xc4e>
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800618a:	d004      	beq.n	8006196 <HAL_RCCEx_GetPeriphCLKFreq+0xc56>
          break;
 800618c:	e023      	b.n	80061d6 <HAL_RCCEx_GetPeriphCLKFreq+0xc96>
          frequency = HAL_RCC_GetPCLK1Freq();
 800618e:	f7fe fd2b 	bl	8004be8 <HAL_RCC_GetPCLK1Freq>
 8006192:	61f8      	str	r0, [r7, #28]
          break;
 8006194:	e026      	b.n	80061e4 <HAL_RCCEx_GetPeriphCLKFreq+0xca4>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8006196:	4b2f      	ldr	r3, [pc, #188]	; (8006254 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8006198:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800619c:	f003 0302 	and.w	r3, r3, #2
 80061a0:	2b02      	cmp	r3, #2
 80061a2:	d11a      	bne.n	80061da <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
              frequency = LSI_VALUE;
 80061a4:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80061a8:	61fb      	str	r3, [r7, #28]
          break;
 80061aa:	e016      	b.n	80061da <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80061ac:	4b29      	ldr	r3, [pc, #164]	; (8006254 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80061b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061b8:	d111      	bne.n	80061de <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
            frequency = HSI_VALUE;
 80061ba:	4b27      	ldr	r3, [pc, #156]	; (8006258 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80061bc:	61fb      	str	r3, [r7, #28]
          break;
 80061be:	e00e      	b.n	80061de <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80061c0:	4b24      	ldr	r3, [pc, #144]	; (8006254 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 80061c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061c6:	f003 0302 	and.w	r3, r3, #2
 80061ca:	2b02      	cmp	r3, #2
 80061cc:	d109      	bne.n	80061e2 <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
            frequency = LSE_VALUE;
 80061ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80061d2:	61fb      	str	r3, [r7, #28]
          break;
 80061d4:	e005      	b.n	80061e2 <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
          break;
 80061d6:	bf00      	nop
 80061d8:	e0c8      	b.n	800636c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80061da:	bf00      	nop
 80061dc:	e0c6      	b.n	800636c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80061de:	bf00      	nop
 80061e0:	e0c4      	b.n	800636c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80061e2:	bf00      	nop
        break;
 80061e4:	e0c2      	b.n	800636c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 80061e6:	4b1b      	ldr	r3, [pc, #108]	; (8006254 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 80061e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061ec:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80061f0:	60fb      	str	r3, [r7, #12]
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80061f8:	d030      	beq.n	800625c <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006200:	d837      	bhi.n	8006272 <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006208:	d01a      	beq.n	8006240 <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006210:	d82f      	bhi.n	8006272 <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d004      	beq.n	8006222 <HAL_RCCEx_GetPeriphCLKFreq+0xce2>
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800621e:	d004      	beq.n	800622a <HAL_RCCEx_GetPeriphCLKFreq+0xcea>
          break;
 8006220:	e027      	b.n	8006272 <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006222:	f7fe fce1 	bl	8004be8 <HAL_RCC_GetPCLK1Freq>
 8006226:	61f8      	str	r0, [r7, #28]
          break;
 8006228:	e02a      	b.n	8006280 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800622a:	4b0a      	ldr	r3, [pc, #40]	; (8006254 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 800622c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006230:	f003 0302 	and.w	r3, r3, #2
 8006234:	2b02      	cmp	r3, #2
 8006236:	d11e      	bne.n	8006276 <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
              frequency = LSI_VALUE;
 8006238:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800623c:	61fb      	str	r3, [r7, #28]
          break;
 800623e:	e01a      	b.n	8006276 <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006240:	4b04      	ldr	r3, [pc, #16]	; (8006254 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006248:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800624c:	d115      	bne.n	800627a <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
            frequency = HSI_VALUE;
 800624e:	4b02      	ldr	r3, [pc, #8]	; (8006258 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006250:	61fb      	str	r3, [r7, #28]
          break;
 8006252:	e012      	b.n	800627a <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
 8006254:	40021000 	.word	0x40021000
 8006258:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800625c:	4b46      	ldr	r3, [pc, #280]	; (8006378 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 800625e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006262:	f003 0302 	and.w	r3, r3, #2
 8006266:	2b02      	cmp	r3, #2
 8006268:	d109      	bne.n	800627e <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
            frequency = LSE_VALUE;
 800626a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800626e:	61fb      	str	r3, [r7, #28]
          break;
 8006270:	e005      	b.n	800627e <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
          break;
 8006272:	bf00      	nop
 8006274:	e07a      	b.n	800636c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8006276:	bf00      	nop
 8006278:	e078      	b.n	800636c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800627a:	bf00      	nop
 800627c:	e076      	b.n	800636c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800627e:	bf00      	nop
        break;
 8006280:	e074      	b.n	800636c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8006282:	4b3d      	ldr	r3, [pc, #244]	; (8006378 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8006284:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006288:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800628c:	60fb      	str	r3, [r7, #12]
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006294:	d02c      	beq.n	80062f0 <HAL_RCCEx_GetPeriphCLKFreq+0xdb0>
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800629c:	d855      	bhi.n	800634a <HAL_RCCEx_GetPeriphCLKFreq+0xe0a>
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d004      	beq.n	80062ae <HAL_RCCEx_GetPeriphCLKFreq+0xd6e>
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80062aa:	d004      	beq.n	80062b6 <HAL_RCCEx_GetPeriphCLKFreq+0xd76>
          break;
 80062ac:	e04d      	b.n	800634a <HAL_RCCEx_GetPeriphCLKFreq+0xe0a>
          frequency = HAL_RCC_GetSysClockFreq();
 80062ae:	f7fe fc05 	bl	8004abc <HAL_RCC_GetSysClockFreq>
 80062b2:	61f8      	str	r0, [r7, #28]
          break;
 80062b4:	e04e      	b.n	8006354 <HAL_RCCEx_GetPeriphCLKFreq+0xe14>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80062b6:	4b30      	ldr	r3, [pc, #192]	; (8006378 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f003 0302 	and.w	r3, r3, #2
 80062be:	2b02      	cmp	r3, #2
 80062c0:	d145      	bne.n	800634e <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80062c2:	4b2d      	ldr	r3, [pc, #180]	; (8006378 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f003 0308 	and.w	r3, r3, #8
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d005      	beq.n	80062da <HAL_RCCEx_GetPeriphCLKFreq+0xd9a>
 80062ce:	4b2a      	ldr	r3, [pc, #168]	; (8006378 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	091b      	lsrs	r3, r3, #4
 80062d4:	f003 030f 	and.w	r3, r3, #15
 80062d8:	e005      	b.n	80062e6 <HAL_RCCEx_GetPeriphCLKFreq+0xda6>
 80062da:	4b27      	ldr	r3, [pc, #156]	; (8006378 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 80062dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80062e0:	0a1b      	lsrs	r3, r3, #8
 80062e2:	f003 030f 	and.w	r3, r3, #15
 80062e6:	4a25      	ldr	r2, [pc, #148]	; (800637c <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 80062e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80062ec:	61fb      	str	r3, [r7, #28]
          break;
 80062ee:	e02e      	b.n	800634e <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 80062f0:	4b21      	ldr	r3, [pc, #132]	; (8006378 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062f8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80062fc:	d129      	bne.n	8006352 <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 80062fe:	4b1e      	ldr	r3, [pc, #120]	; (8006378 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8006300:	68db      	ldr	r3, [r3, #12]
 8006302:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006306:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800630a:	d122      	bne.n	8006352 <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800630c:	4b1a      	ldr	r3, [pc, #104]	; (8006378 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 800630e:	68db      	ldr	r3, [r3, #12]
 8006310:	0a1b      	lsrs	r3, r3, #8
 8006312:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006316:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8006318:	69bb      	ldr	r3, [r7, #24]
 800631a:	68ba      	ldr	r2, [r7, #8]
 800631c:	fb03 f202 	mul.w	r2, r3, r2
 8006320:	4b15      	ldr	r3, [pc, #84]	; (8006378 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8006322:	68db      	ldr	r3, [r3, #12]
 8006324:	091b      	lsrs	r3, r3, #4
 8006326:	f003 030f 	and.w	r3, r3, #15
 800632a:	3301      	adds	r3, #1
 800632c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006330:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8006332:	4b11      	ldr	r3, [pc, #68]	; (8006378 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8006334:	68db      	ldr	r3, [r3, #12]
 8006336:	0d5b      	lsrs	r3, r3, #21
 8006338:	f003 0303 	and.w	r3, r3, #3
 800633c:	3301      	adds	r3, #1
 800633e:	005b      	lsls	r3, r3, #1
 8006340:	69ba      	ldr	r2, [r7, #24]
 8006342:	fbb2 f3f3 	udiv	r3, r2, r3
 8006346:	61fb      	str	r3, [r7, #28]
          break;
 8006348:	e003      	b.n	8006352 <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
          break;
 800634a:	bf00      	nop
 800634c:	e00e      	b.n	800636c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800634e:	bf00      	nop
 8006350:	e00c      	b.n	800636c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8006352:	bf00      	nop
        break;
 8006354:	e00a      	b.n	800636c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 8006356:	bf00      	nop
 8006358:	e008      	b.n	800636c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 800635a:	bf00      	nop
 800635c:	e006      	b.n	800636c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 800635e:	bf00      	nop
 8006360:	e004      	b.n	800636c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 8006362:	bf00      	nop
 8006364:	e002      	b.n	800636c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 8006366:	bf00      	nop
 8006368:	e000      	b.n	800636c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 800636a:	bf00      	nop
    }
  }

  return(frequency);
 800636c:	69fb      	ldr	r3, [r7, #28]
}
 800636e:	4618      	mov	r0, r3
 8006370:	3720      	adds	r7, #32
 8006372:	46bd      	mov	sp, r7
 8006374:	bd80      	pop	{r7, pc}
 8006376:	bf00      	nop
 8006378:	40021000 	.word	0x40021000
 800637c:	0800d7d8 	.word	0x0800d7d8

08006380 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006380:	b580      	push	{r7, lr}
 8006382:	b084      	sub	sp, #16
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
 8006388:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800638a:	2300      	movs	r3, #0
 800638c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800638e:	4b72      	ldr	r3, [pc, #456]	; (8006558 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006390:	68db      	ldr	r3, [r3, #12]
 8006392:	f003 0303 	and.w	r3, r3, #3
 8006396:	2b00      	cmp	r3, #0
 8006398:	d00e      	beq.n	80063b8 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800639a:	4b6f      	ldr	r3, [pc, #444]	; (8006558 <RCCEx_PLLSAI1_Config+0x1d8>)
 800639c:	68db      	ldr	r3, [r3, #12]
 800639e:	f003 0203 	and.w	r2, r3, #3
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	429a      	cmp	r2, r3
 80063a8:	d103      	bne.n	80063b2 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
       ||
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d142      	bne.n	8006438 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 80063b2:	2301      	movs	r3, #1
 80063b4:	73fb      	strb	r3, [r7, #15]
 80063b6:	e03f      	b.n	8006438 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	2b03      	cmp	r3, #3
 80063be:	d018      	beq.n	80063f2 <RCCEx_PLLSAI1_Config+0x72>
 80063c0:	2b03      	cmp	r3, #3
 80063c2:	d825      	bhi.n	8006410 <RCCEx_PLLSAI1_Config+0x90>
 80063c4:	2b01      	cmp	r3, #1
 80063c6:	d002      	beq.n	80063ce <RCCEx_PLLSAI1_Config+0x4e>
 80063c8:	2b02      	cmp	r3, #2
 80063ca:	d009      	beq.n	80063e0 <RCCEx_PLLSAI1_Config+0x60>
 80063cc:	e020      	b.n	8006410 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80063ce:	4b62      	ldr	r3, [pc, #392]	; (8006558 <RCCEx_PLLSAI1_Config+0x1d8>)
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f003 0302 	and.w	r3, r3, #2
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d11d      	bne.n	8006416 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 80063da:	2301      	movs	r3, #1
 80063dc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80063de:	e01a      	b.n	8006416 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80063e0:	4b5d      	ldr	r3, [pc, #372]	; (8006558 <RCCEx_PLLSAI1_Config+0x1d8>)
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d116      	bne.n	800641a <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 80063ec:	2301      	movs	r3, #1
 80063ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80063f0:	e013      	b.n	800641a <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80063f2:	4b59      	ldr	r3, [pc, #356]	; (8006558 <RCCEx_PLLSAI1_Config+0x1d8>)
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d10f      	bne.n	800641e <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80063fe:	4b56      	ldr	r3, [pc, #344]	; (8006558 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006406:	2b00      	cmp	r3, #0
 8006408:	d109      	bne.n	800641e <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 800640a:	2301      	movs	r3, #1
 800640c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800640e:	e006      	b.n	800641e <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8006410:	2301      	movs	r3, #1
 8006412:	73fb      	strb	r3, [r7, #15]
      break;
 8006414:	e004      	b.n	8006420 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8006416:	bf00      	nop
 8006418:	e002      	b.n	8006420 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800641a:	bf00      	nop
 800641c:	e000      	b.n	8006420 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800641e:	bf00      	nop
    }

    if(status == HAL_OK)
 8006420:	7bfb      	ldrb	r3, [r7, #15]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d108      	bne.n	8006438 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8006426:	4b4c      	ldr	r3, [pc, #304]	; (8006558 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006428:	68db      	ldr	r3, [r3, #12]
 800642a:	f023 0203 	bic.w	r2, r3, #3
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	4949      	ldr	r1, [pc, #292]	; (8006558 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006434:	4313      	orrs	r3, r2
 8006436:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8006438:	7bfb      	ldrb	r3, [r7, #15]
 800643a:	2b00      	cmp	r3, #0
 800643c:	f040 8086 	bne.w	800654c <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006440:	4b45      	ldr	r3, [pc, #276]	; (8006558 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	4a44      	ldr	r2, [pc, #272]	; (8006558 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006446:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800644a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800644c:	f7fa ff80 	bl	8001350 <HAL_GetTick>
 8006450:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006452:	e009      	b.n	8006468 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006454:	f7fa ff7c 	bl	8001350 <HAL_GetTick>
 8006458:	4602      	mov	r2, r0
 800645a:	68bb      	ldr	r3, [r7, #8]
 800645c:	1ad3      	subs	r3, r2, r3
 800645e:	2b02      	cmp	r3, #2
 8006460:	d902      	bls.n	8006468 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8006462:	2303      	movs	r3, #3
 8006464:	73fb      	strb	r3, [r7, #15]
        break;
 8006466:	e005      	b.n	8006474 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006468:	4b3b      	ldr	r3, [pc, #236]	; (8006558 <RCCEx_PLLSAI1_Config+0x1d8>)
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006470:	2b00      	cmp	r3, #0
 8006472:	d1ef      	bne.n	8006454 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8006474:	7bfb      	ldrb	r3, [r7, #15]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d168      	bne.n	800654c <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d113      	bne.n	80064a8 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006480:	4b35      	ldr	r3, [pc, #212]	; (8006558 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006482:	691a      	ldr	r2, [r3, #16]
 8006484:	4b35      	ldr	r3, [pc, #212]	; (800655c <RCCEx_PLLSAI1_Config+0x1dc>)
 8006486:	4013      	ands	r3, r2
 8006488:	687a      	ldr	r2, [r7, #4]
 800648a:	6892      	ldr	r2, [r2, #8]
 800648c:	0211      	lsls	r1, r2, #8
 800648e:	687a      	ldr	r2, [r7, #4]
 8006490:	68d2      	ldr	r2, [r2, #12]
 8006492:	06d2      	lsls	r2, r2, #27
 8006494:	4311      	orrs	r1, r2
 8006496:	687a      	ldr	r2, [r7, #4]
 8006498:	6852      	ldr	r2, [r2, #4]
 800649a:	3a01      	subs	r2, #1
 800649c:	0112      	lsls	r2, r2, #4
 800649e:	430a      	orrs	r2, r1
 80064a0:	492d      	ldr	r1, [pc, #180]	; (8006558 <RCCEx_PLLSAI1_Config+0x1d8>)
 80064a2:	4313      	orrs	r3, r2
 80064a4:	610b      	str	r3, [r1, #16]
 80064a6:	e02d      	b.n	8006504 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	2b01      	cmp	r3, #1
 80064ac:	d115      	bne.n	80064da <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80064ae:	4b2a      	ldr	r3, [pc, #168]	; (8006558 <RCCEx_PLLSAI1_Config+0x1d8>)
 80064b0:	691a      	ldr	r2, [r3, #16]
 80064b2:	4b2b      	ldr	r3, [pc, #172]	; (8006560 <RCCEx_PLLSAI1_Config+0x1e0>)
 80064b4:	4013      	ands	r3, r2
 80064b6:	687a      	ldr	r2, [r7, #4]
 80064b8:	6892      	ldr	r2, [r2, #8]
 80064ba:	0211      	lsls	r1, r2, #8
 80064bc:	687a      	ldr	r2, [r7, #4]
 80064be:	6912      	ldr	r2, [r2, #16]
 80064c0:	0852      	lsrs	r2, r2, #1
 80064c2:	3a01      	subs	r2, #1
 80064c4:	0552      	lsls	r2, r2, #21
 80064c6:	4311      	orrs	r1, r2
 80064c8:	687a      	ldr	r2, [r7, #4]
 80064ca:	6852      	ldr	r2, [r2, #4]
 80064cc:	3a01      	subs	r2, #1
 80064ce:	0112      	lsls	r2, r2, #4
 80064d0:	430a      	orrs	r2, r1
 80064d2:	4921      	ldr	r1, [pc, #132]	; (8006558 <RCCEx_PLLSAI1_Config+0x1d8>)
 80064d4:	4313      	orrs	r3, r2
 80064d6:	610b      	str	r3, [r1, #16]
 80064d8:	e014      	b.n	8006504 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80064da:	4b1f      	ldr	r3, [pc, #124]	; (8006558 <RCCEx_PLLSAI1_Config+0x1d8>)
 80064dc:	691a      	ldr	r2, [r3, #16]
 80064de:	4b21      	ldr	r3, [pc, #132]	; (8006564 <RCCEx_PLLSAI1_Config+0x1e4>)
 80064e0:	4013      	ands	r3, r2
 80064e2:	687a      	ldr	r2, [r7, #4]
 80064e4:	6892      	ldr	r2, [r2, #8]
 80064e6:	0211      	lsls	r1, r2, #8
 80064e8:	687a      	ldr	r2, [r7, #4]
 80064ea:	6952      	ldr	r2, [r2, #20]
 80064ec:	0852      	lsrs	r2, r2, #1
 80064ee:	3a01      	subs	r2, #1
 80064f0:	0652      	lsls	r2, r2, #25
 80064f2:	4311      	orrs	r1, r2
 80064f4:	687a      	ldr	r2, [r7, #4]
 80064f6:	6852      	ldr	r2, [r2, #4]
 80064f8:	3a01      	subs	r2, #1
 80064fa:	0112      	lsls	r2, r2, #4
 80064fc:	430a      	orrs	r2, r1
 80064fe:	4916      	ldr	r1, [pc, #88]	; (8006558 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006500:	4313      	orrs	r3, r2
 8006502:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006504:	4b14      	ldr	r3, [pc, #80]	; (8006558 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	4a13      	ldr	r2, [pc, #76]	; (8006558 <RCCEx_PLLSAI1_Config+0x1d8>)
 800650a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800650e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006510:	f7fa ff1e 	bl	8001350 <HAL_GetTick>
 8006514:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006516:	e009      	b.n	800652c <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006518:	f7fa ff1a 	bl	8001350 <HAL_GetTick>
 800651c:	4602      	mov	r2, r0
 800651e:	68bb      	ldr	r3, [r7, #8]
 8006520:	1ad3      	subs	r3, r2, r3
 8006522:	2b02      	cmp	r3, #2
 8006524:	d902      	bls.n	800652c <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8006526:	2303      	movs	r3, #3
 8006528:	73fb      	strb	r3, [r7, #15]
          break;
 800652a:	e005      	b.n	8006538 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800652c:	4b0a      	ldr	r3, [pc, #40]	; (8006558 <RCCEx_PLLSAI1_Config+0x1d8>)
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006534:	2b00      	cmp	r3, #0
 8006536:	d0ef      	beq.n	8006518 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8006538:	7bfb      	ldrb	r3, [r7, #15]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d106      	bne.n	800654c <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800653e:	4b06      	ldr	r3, [pc, #24]	; (8006558 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006540:	691a      	ldr	r2, [r3, #16]
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	699b      	ldr	r3, [r3, #24]
 8006546:	4904      	ldr	r1, [pc, #16]	; (8006558 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006548:	4313      	orrs	r3, r2
 800654a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800654c:	7bfb      	ldrb	r3, [r7, #15]
}
 800654e:	4618      	mov	r0, r3
 8006550:	3710      	adds	r7, #16
 8006552:	46bd      	mov	sp, r7
 8006554:	bd80      	pop	{r7, pc}
 8006556:	bf00      	nop
 8006558:	40021000 	.word	0x40021000
 800655c:	07ff800f 	.word	0x07ff800f
 8006560:	ff9f800f 	.word	0xff9f800f
 8006564:	f9ff800f 	.word	0xf9ff800f

08006568 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8006568:	b580      	push	{r7, lr}
 800656a:	b084      	sub	sp, #16
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
 8006570:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006572:	2300      	movs	r3, #0
 8006574:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006576:	4b72      	ldr	r3, [pc, #456]	; (8006740 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006578:	68db      	ldr	r3, [r3, #12]
 800657a:	f003 0303 	and.w	r3, r3, #3
 800657e:	2b00      	cmp	r3, #0
 8006580:	d00e      	beq.n	80065a0 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8006582:	4b6f      	ldr	r3, [pc, #444]	; (8006740 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006584:	68db      	ldr	r3, [r3, #12]
 8006586:	f003 0203 	and.w	r2, r3, #3
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	429a      	cmp	r2, r3
 8006590:	d103      	bne.n	800659a <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
       ||
 8006596:	2b00      	cmp	r3, #0
 8006598:	d142      	bne.n	8006620 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 800659a:	2301      	movs	r3, #1
 800659c:	73fb      	strb	r3, [r7, #15]
 800659e:	e03f      	b.n	8006620 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	2b03      	cmp	r3, #3
 80065a6:	d018      	beq.n	80065da <RCCEx_PLLSAI2_Config+0x72>
 80065a8:	2b03      	cmp	r3, #3
 80065aa:	d825      	bhi.n	80065f8 <RCCEx_PLLSAI2_Config+0x90>
 80065ac:	2b01      	cmp	r3, #1
 80065ae:	d002      	beq.n	80065b6 <RCCEx_PLLSAI2_Config+0x4e>
 80065b0:	2b02      	cmp	r3, #2
 80065b2:	d009      	beq.n	80065c8 <RCCEx_PLLSAI2_Config+0x60>
 80065b4:	e020      	b.n	80065f8 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80065b6:	4b62      	ldr	r3, [pc, #392]	; (8006740 <RCCEx_PLLSAI2_Config+0x1d8>)
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f003 0302 	and.w	r3, r3, #2
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d11d      	bne.n	80065fe <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 80065c2:	2301      	movs	r3, #1
 80065c4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80065c6:	e01a      	b.n	80065fe <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80065c8:	4b5d      	ldr	r3, [pc, #372]	; (8006740 <RCCEx_PLLSAI2_Config+0x1d8>)
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d116      	bne.n	8006602 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 80065d4:	2301      	movs	r3, #1
 80065d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80065d8:	e013      	b.n	8006602 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80065da:	4b59      	ldr	r3, [pc, #356]	; (8006740 <RCCEx_PLLSAI2_Config+0x1d8>)
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d10f      	bne.n	8006606 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80065e6:	4b56      	ldr	r3, [pc, #344]	; (8006740 <RCCEx_PLLSAI2_Config+0x1d8>)
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d109      	bne.n	8006606 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 80065f2:	2301      	movs	r3, #1
 80065f4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80065f6:	e006      	b.n	8006606 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 80065f8:	2301      	movs	r3, #1
 80065fa:	73fb      	strb	r3, [r7, #15]
      break;
 80065fc:	e004      	b.n	8006608 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80065fe:	bf00      	nop
 8006600:	e002      	b.n	8006608 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8006602:	bf00      	nop
 8006604:	e000      	b.n	8006608 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8006606:	bf00      	nop
    }

    if(status == HAL_OK)
 8006608:	7bfb      	ldrb	r3, [r7, #15]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d108      	bne.n	8006620 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 800660e:	4b4c      	ldr	r3, [pc, #304]	; (8006740 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006610:	68db      	ldr	r3, [r3, #12]
 8006612:	f023 0203 	bic.w	r2, r3, #3
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	4949      	ldr	r1, [pc, #292]	; (8006740 <RCCEx_PLLSAI2_Config+0x1d8>)
 800661c:	4313      	orrs	r3, r2
 800661e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8006620:	7bfb      	ldrb	r3, [r7, #15]
 8006622:	2b00      	cmp	r3, #0
 8006624:	f040 8086 	bne.w	8006734 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006628:	4b45      	ldr	r3, [pc, #276]	; (8006740 <RCCEx_PLLSAI2_Config+0x1d8>)
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	4a44      	ldr	r2, [pc, #272]	; (8006740 <RCCEx_PLLSAI2_Config+0x1d8>)
 800662e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006632:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006634:	f7fa fe8c 	bl	8001350 <HAL_GetTick>
 8006638:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800663a:	e009      	b.n	8006650 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800663c:	f7fa fe88 	bl	8001350 <HAL_GetTick>
 8006640:	4602      	mov	r2, r0
 8006642:	68bb      	ldr	r3, [r7, #8]
 8006644:	1ad3      	subs	r3, r2, r3
 8006646:	2b02      	cmp	r3, #2
 8006648:	d902      	bls.n	8006650 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800664a:	2303      	movs	r3, #3
 800664c:	73fb      	strb	r3, [r7, #15]
        break;
 800664e:	e005      	b.n	800665c <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006650:	4b3b      	ldr	r3, [pc, #236]	; (8006740 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006658:	2b00      	cmp	r3, #0
 800665a:	d1ef      	bne.n	800663c <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800665c:	7bfb      	ldrb	r3, [r7, #15]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d168      	bne.n	8006734 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d113      	bne.n	8006690 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006668:	4b35      	ldr	r3, [pc, #212]	; (8006740 <RCCEx_PLLSAI2_Config+0x1d8>)
 800666a:	695a      	ldr	r2, [r3, #20]
 800666c:	4b35      	ldr	r3, [pc, #212]	; (8006744 <RCCEx_PLLSAI2_Config+0x1dc>)
 800666e:	4013      	ands	r3, r2
 8006670:	687a      	ldr	r2, [r7, #4]
 8006672:	6892      	ldr	r2, [r2, #8]
 8006674:	0211      	lsls	r1, r2, #8
 8006676:	687a      	ldr	r2, [r7, #4]
 8006678:	68d2      	ldr	r2, [r2, #12]
 800667a:	06d2      	lsls	r2, r2, #27
 800667c:	4311      	orrs	r1, r2
 800667e:	687a      	ldr	r2, [r7, #4]
 8006680:	6852      	ldr	r2, [r2, #4]
 8006682:	3a01      	subs	r2, #1
 8006684:	0112      	lsls	r2, r2, #4
 8006686:	430a      	orrs	r2, r1
 8006688:	492d      	ldr	r1, [pc, #180]	; (8006740 <RCCEx_PLLSAI2_Config+0x1d8>)
 800668a:	4313      	orrs	r3, r2
 800668c:	614b      	str	r3, [r1, #20]
 800668e:	e02d      	b.n	80066ec <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	2b01      	cmp	r3, #1
 8006694:	d115      	bne.n	80066c2 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006696:	4b2a      	ldr	r3, [pc, #168]	; (8006740 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006698:	695a      	ldr	r2, [r3, #20]
 800669a:	4b2b      	ldr	r3, [pc, #172]	; (8006748 <RCCEx_PLLSAI2_Config+0x1e0>)
 800669c:	4013      	ands	r3, r2
 800669e:	687a      	ldr	r2, [r7, #4]
 80066a0:	6892      	ldr	r2, [r2, #8]
 80066a2:	0211      	lsls	r1, r2, #8
 80066a4:	687a      	ldr	r2, [r7, #4]
 80066a6:	6912      	ldr	r2, [r2, #16]
 80066a8:	0852      	lsrs	r2, r2, #1
 80066aa:	3a01      	subs	r2, #1
 80066ac:	0552      	lsls	r2, r2, #21
 80066ae:	4311      	orrs	r1, r2
 80066b0:	687a      	ldr	r2, [r7, #4]
 80066b2:	6852      	ldr	r2, [r2, #4]
 80066b4:	3a01      	subs	r2, #1
 80066b6:	0112      	lsls	r2, r2, #4
 80066b8:	430a      	orrs	r2, r1
 80066ba:	4921      	ldr	r1, [pc, #132]	; (8006740 <RCCEx_PLLSAI2_Config+0x1d8>)
 80066bc:	4313      	orrs	r3, r2
 80066be:	614b      	str	r3, [r1, #20]
 80066c0:	e014      	b.n	80066ec <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80066c2:	4b1f      	ldr	r3, [pc, #124]	; (8006740 <RCCEx_PLLSAI2_Config+0x1d8>)
 80066c4:	695a      	ldr	r2, [r3, #20]
 80066c6:	4b21      	ldr	r3, [pc, #132]	; (800674c <RCCEx_PLLSAI2_Config+0x1e4>)
 80066c8:	4013      	ands	r3, r2
 80066ca:	687a      	ldr	r2, [r7, #4]
 80066cc:	6892      	ldr	r2, [r2, #8]
 80066ce:	0211      	lsls	r1, r2, #8
 80066d0:	687a      	ldr	r2, [r7, #4]
 80066d2:	6952      	ldr	r2, [r2, #20]
 80066d4:	0852      	lsrs	r2, r2, #1
 80066d6:	3a01      	subs	r2, #1
 80066d8:	0652      	lsls	r2, r2, #25
 80066da:	4311      	orrs	r1, r2
 80066dc:	687a      	ldr	r2, [r7, #4]
 80066de:	6852      	ldr	r2, [r2, #4]
 80066e0:	3a01      	subs	r2, #1
 80066e2:	0112      	lsls	r2, r2, #4
 80066e4:	430a      	orrs	r2, r1
 80066e6:	4916      	ldr	r1, [pc, #88]	; (8006740 <RCCEx_PLLSAI2_Config+0x1d8>)
 80066e8:	4313      	orrs	r3, r2
 80066ea:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80066ec:	4b14      	ldr	r3, [pc, #80]	; (8006740 <RCCEx_PLLSAI2_Config+0x1d8>)
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	4a13      	ldr	r2, [pc, #76]	; (8006740 <RCCEx_PLLSAI2_Config+0x1d8>)
 80066f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80066f6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066f8:	f7fa fe2a 	bl	8001350 <HAL_GetTick>
 80066fc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80066fe:	e009      	b.n	8006714 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006700:	f7fa fe26 	bl	8001350 <HAL_GetTick>
 8006704:	4602      	mov	r2, r0
 8006706:	68bb      	ldr	r3, [r7, #8]
 8006708:	1ad3      	subs	r3, r2, r3
 800670a:	2b02      	cmp	r3, #2
 800670c:	d902      	bls.n	8006714 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800670e:	2303      	movs	r3, #3
 8006710:	73fb      	strb	r3, [r7, #15]
          break;
 8006712:	e005      	b.n	8006720 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006714:	4b0a      	ldr	r3, [pc, #40]	; (8006740 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800671c:	2b00      	cmp	r3, #0
 800671e:	d0ef      	beq.n	8006700 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8006720:	7bfb      	ldrb	r3, [r7, #15]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d106      	bne.n	8006734 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8006726:	4b06      	ldr	r3, [pc, #24]	; (8006740 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006728:	695a      	ldr	r2, [r3, #20]
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	699b      	ldr	r3, [r3, #24]
 800672e:	4904      	ldr	r1, [pc, #16]	; (8006740 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006730:	4313      	orrs	r3, r2
 8006732:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006734:	7bfb      	ldrb	r3, [r7, #15]
}
 8006736:	4618      	mov	r0, r3
 8006738:	3710      	adds	r7, #16
 800673a:	46bd      	mov	sp, r7
 800673c:	bd80      	pop	{r7, pc}
 800673e:	bf00      	nop
 8006740:	40021000 	.word	0x40021000
 8006744:	07ff800f 	.word	0x07ff800f
 8006748:	ff9f800f 	.word	0xff9f800f
 800674c:	f9ff800f 	.word	0xf9ff800f

08006750 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 8006750:	b480      	push	{r7}
 8006752:	b089      	sub	sp, #36	; 0x24
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
 8006758:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 800675a:	2300      	movs	r3, #0
 800675c:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 800675e:	2300      	movs	r3, #0
 8006760:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 8006762:	2300      	movs	r3, #0
 8006764:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800676c:	d10b      	bne.n	8006786 <RCCEx_GetSAIxPeriphCLKFreq+0x36>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800676e:	4b7e      	ldr	r3, [pc, #504]	; (8006968 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006770:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006774:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8006778:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 800677a:	69bb      	ldr	r3, [r7, #24]
 800677c:	2b60      	cmp	r3, #96	; 0x60
 800677e:	d112      	bne.n	80067a6 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8006780:	4b7a      	ldr	r3, [pc, #488]	; (800696c <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 8006782:	61fb      	str	r3, [r7, #28]
 8006784:	e00f      	b.n	80067a6 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800678c:	d10b      	bne.n	80067a6 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800678e:	4b76      	ldr	r3, [pc, #472]	; (8006968 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006790:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006794:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006798:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 800679a:	69bb      	ldr	r3, [r7, #24]
 800679c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80067a0:	d101      	bne.n	80067a6 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 80067a2:	4b72      	ldr	r3, [pc, #456]	; (800696c <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 80067a4:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 80067a6:	69fb      	ldr	r3, [r7, #28]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	f040 80d6 	bne.w	800695a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
  {
    pllvco = InputFrequency;
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 80067b2:	69bb      	ldr	r3, [r7, #24]
 80067b4:	2b40      	cmp	r3, #64	; 0x40
 80067b6:	d003      	beq.n	80067c0 <RCCEx_GetSAIxPeriphCLKFreq+0x70>
 80067b8:	69bb      	ldr	r3, [r7, #24]
 80067ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80067be:	d13b      	bne.n	8006838 <RCCEx_GetSAIxPeriphCLKFreq+0xe8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 80067c0:	4b69      	ldr	r3, [pc, #420]	; (8006968 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067c8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80067cc:	f040 80c4 	bne.w	8006958 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
 80067d0:	4b65      	ldr	r3, [pc, #404]	; (8006968 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80067d2:	68db      	ldr	r3, [r3, #12]
 80067d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80067d8:	2b00      	cmp	r3, #0
 80067da:	f000 80bd 	beq.w	8006958 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80067de:	4b62      	ldr	r3, [pc, #392]	; (8006968 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80067e0:	68db      	ldr	r3, [r3, #12]
 80067e2:	091b      	lsrs	r3, r3, #4
 80067e4:	f003 030f 	and.w	r3, r3, #15
 80067e8:	3301      	adds	r3, #1
 80067ea:	693a      	ldr	r2, [r7, #16]
 80067ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80067f0:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80067f2:	4b5d      	ldr	r3, [pc, #372]	; (8006968 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80067f4:	68db      	ldr	r3, [r3, #12]
 80067f6:	0a1b      	lsrs	r3, r3, #8
 80067f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80067fc:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 80067fe:	4b5a      	ldr	r3, [pc, #360]	; (8006968 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006800:	68db      	ldr	r3, [r3, #12]
 8006802:	0edb      	lsrs	r3, r3, #27
 8006804:	f003 031f 	and.w	r3, r3, #31
 8006808:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 800680a:	697b      	ldr	r3, [r7, #20]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d10a      	bne.n	8006826 <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8006810:	4b55      	ldr	r3, [pc, #340]	; (8006968 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006812:	68db      	ldr	r3, [r3, #12]
 8006814:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006818:	2b00      	cmp	r3, #0
 800681a:	d002      	beq.n	8006822 <RCCEx_GetSAIxPeriphCLKFreq+0xd2>
          {
            pllp = 17U;
 800681c:	2311      	movs	r3, #17
 800681e:	617b      	str	r3, [r7, #20]
 8006820:	e001      	b.n	8006826 <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
          }
          else
          {
            pllp = 7U;
 8006822:	2307      	movs	r3, #7
 8006824:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8006826:	693b      	ldr	r3, [r7, #16]
 8006828:	68fa      	ldr	r2, [r7, #12]
 800682a:	fb03 f202 	mul.w	r2, r3, r2
 800682e:	697b      	ldr	r3, [r7, #20]
 8006830:	fbb2 f3f3 	udiv	r3, r2, r3
 8006834:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8006836:	e08f      	b.n	8006958 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 8006838:	69bb      	ldr	r3, [r7, #24]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d13a      	bne.n	80068b4 <RCCEx_GetSAIxPeriphCLKFreq+0x164>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 800683e:	4b4a      	ldr	r3, [pc, #296]	; (8006968 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006846:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800684a:	f040 8086 	bne.w	800695a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 800684e:	4b46      	ldr	r3, [pc, #280]	; (8006968 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006850:	691b      	ldr	r3, [r3, #16]
 8006852:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006856:	2b00      	cmp	r3, #0
 8006858:	d07f      	beq.n	800695a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 800685a:	4b43      	ldr	r3, [pc, #268]	; (8006968 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800685c:	691b      	ldr	r3, [r3, #16]
 800685e:	091b      	lsrs	r3, r3, #4
 8006860:	f003 030f 	and.w	r3, r3, #15
 8006864:	3301      	adds	r3, #1
 8006866:	693a      	ldr	r2, [r7, #16]
 8006868:	fbb2 f3f3 	udiv	r3, r2, r3
 800686c:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800686e:	4b3e      	ldr	r3, [pc, #248]	; (8006968 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006870:	691b      	ldr	r3, [r3, #16]
 8006872:	0a1b      	lsrs	r3, r3, #8
 8006874:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006878:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 800687a:	4b3b      	ldr	r3, [pc, #236]	; (8006968 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800687c:	691b      	ldr	r3, [r3, #16]
 800687e:	0edb      	lsrs	r3, r3, #27
 8006880:	f003 031f 	and.w	r3, r3, #31
 8006884:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8006886:	697b      	ldr	r3, [r7, #20]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d10a      	bne.n	80068a2 <RCCEx_GetSAIxPeriphCLKFreq+0x152>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 800688c:	4b36      	ldr	r3, [pc, #216]	; (8006968 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800688e:	691b      	ldr	r3, [r3, #16]
 8006890:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006894:	2b00      	cmp	r3, #0
 8006896:	d002      	beq.n	800689e <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
          {
            pllp = 17U;
 8006898:	2311      	movs	r3, #17
 800689a:	617b      	str	r3, [r7, #20]
 800689c:	e001      	b.n	80068a2 <RCCEx_GetSAIxPeriphCLKFreq+0x152>
          }
          else
          {
            pllp = 7U;
 800689e:	2307      	movs	r3, #7
 80068a0:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 80068a2:	693b      	ldr	r3, [r7, #16]
 80068a4:	68fa      	ldr	r2, [r7, #12]
 80068a6:	fb03 f202 	mul.w	r2, r3, r2
 80068aa:	697b      	ldr	r3, [r7, #20]
 80068ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80068b0:	61fb      	str	r3, [r7, #28]
 80068b2:	e052      	b.n	800695a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      }
    }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    else if((srcclk == RCC_SAI1CLKSOURCE_HSI) || (srcclk == RCC_SAI2CLKSOURCE_HSI))
 80068b4:	69bb      	ldr	r3, [r7, #24]
 80068b6:	2b80      	cmp	r3, #128	; 0x80
 80068b8:	d003      	beq.n	80068c2 <RCCEx_GetSAIxPeriphCLKFreq+0x172>
 80068ba:	69bb      	ldr	r3, [r7, #24]
 80068bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80068c0:	d109      	bne.n	80068d6 <RCCEx_GetSAIxPeriphCLKFreq+0x186>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80068c2:	4b29      	ldr	r3, [pc, #164]	; (8006968 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80068ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80068ce:	d144      	bne.n	800695a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
        frequency = HSI_VALUE;
 80068d0:	4b27      	ldr	r3, [pc, #156]	; (8006970 <RCCEx_GetSAIxPeriphCLKFreq+0x220>)
 80068d2:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80068d4:	e041      	b.n	800695a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 80068d6:	69bb      	ldr	r3, [r7, #24]
 80068d8:	2b20      	cmp	r3, #32
 80068da:	d003      	beq.n	80068e4 <RCCEx_GetSAIxPeriphCLKFreq+0x194>
 80068dc:	69bb      	ldr	r3, [r7, #24]
 80068de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80068e2:	d13a      	bne.n	800695a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 80068e4:	4b20      	ldr	r3, [pc, #128]	; (8006968 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80068ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80068f0:	d133      	bne.n	800695a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 80068f2:	4b1d      	ldr	r3, [pc, #116]	; (8006968 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80068f4:	695b      	ldr	r3, [r3, #20]
 80068f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d02d      	beq.n	800695a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
 80068fe:	4b1a      	ldr	r3, [pc, #104]	; (8006968 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006900:	695b      	ldr	r3, [r3, #20]
 8006902:	091b      	lsrs	r3, r3, #4
 8006904:	f003 030f 	and.w	r3, r3, #15
 8006908:	3301      	adds	r3, #1
 800690a:	693a      	ldr	r2, [r7, #16]
 800690c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006910:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8006912:	4b15      	ldr	r3, [pc, #84]	; (8006968 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006914:	695b      	ldr	r3, [r3, #20]
 8006916:	0a1b      	lsrs	r3, r3, #8
 8006918:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800691c:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
 800691e:	4b12      	ldr	r3, [pc, #72]	; (8006968 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006920:	695b      	ldr	r3, [r3, #20]
 8006922:	0edb      	lsrs	r3, r3, #27
 8006924:	f003 031f 	and.w	r3, r3, #31
 8006928:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 800692a:	697b      	ldr	r3, [r7, #20]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d10a      	bne.n	8006946 <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 8006930:	4b0d      	ldr	r3, [pc, #52]	; (8006968 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006932:	695b      	ldr	r3, [r3, #20]
 8006934:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006938:	2b00      	cmp	r3, #0
 800693a:	d002      	beq.n	8006942 <RCCEx_GetSAIxPeriphCLKFreq+0x1f2>
          {
            pllp = 17U;
 800693c:	2311      	movs	r3, #17
 800693e:	617b      	str	r3, [r7, #20]
 8006940:	e001      	b.n	8006946 <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
          }
          else
          {
            pllp = 7U;
 8006942:	2307      	movs	r3, #7
 8006944:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8006946:	693b      	ldr	r3, [r7, #16]
 8006948:	68fa      	ldr	r2, [r7, #12]
 800694a:	fb03 f202 	mul.w	r2, r3, r2
 800694e:	697b      	ldr	r3, [r7, #20]
 8006950:	fbb2 f3f3 	udiv	r3, r2, r3
 8006954:	61fb      	str	r3, [r7, #28]
 8006956:	e000      	b.n	800695a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8006958:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 800695a:	69fb      	ldr	r3, [r7, #28]
}
 800695c:	4618      	mov	r0, r3
 800695e:	3724      	adds	r7, #36	; 0x24
 8006960:	46bd      	mov	sp, r7
 8006962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006966:	4770      	bx	lr
 8006968:	40021000 	.word	0x40021000
 800696c:	001fff68 	.word	0x001fff68
 8006970:	00f42400 	.word	0x00f42400

08006974 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8006974:	b580      	push	{r7, lr}
 8006976:	b08a      	sub	sp, #40	; 0x28
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;
#endif

  /* Check the SD handle allocation */
  if(hsd == NULL)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d101      	bne.n	8006986 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8006982:	2301      	movs	r3, #1
 8006984:	e078      	b.n	8006a78 <HAL_SD_Init+0x104>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800698c:	b2db      	uxtb	r3, r3
 800698e:	2b00      	cmp	r3, #0
 8006990:	d105      	bne.n	800699e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	2200      	movs	r2, #0
 8006996:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8006998:	6878      	ldr	r0, [r7, #4]
 800699a:	f7fa fb21 	bl	8000fe0 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	2203      	movs	r2, #3
 80069a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80069a6:	6878      	ldr	r0, [r7, #4]
 80069a8:	f000 f86a 	bl	8006a80 <HAL_SD_InitCard>
 80069ac:	4603      	mov	r3, r0
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d001      	beq.n	80069b6 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80069b2:	2301      	movs	r3, #1
 80069b4:	e060      	b.n	8006a78 <HAL_SD_Init+0x104>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 80069b6:	f107 0308 	add.w	r3, r7, #8
 80069ba:	4619      	mov	r1, r3
 80069bc:	6878      	ldr	r0, [r7, #4]
 80069be:	f000 fdb5 	bl	800752c <HAL_SD_GetCardStatus>
 80069c2:	4603      	mov	r3, r0
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d001      	beq.n	80069cc <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 80069c8:	2301      	movs	r3, #1
 80069ca:	e055      	b.n	8006a78 <HAL_SD_Init+0x104>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 80069cc:	7e3b      	ldrb	r3, [r7, #24]
 80069ce:	b2db      	uxtb	r3, r3
 80069d0:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 80069d2:	7e7b      	ldrb	r3, [r7, #25]
 80069d4:	b2db      	uxtb	r3, r3
 80069d6:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069dc:	2b01      	cmp	r3, #1
 80069de:	d10a      	bne.n	80069f6 <HAL_SD_Init+0x82>
 80069e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d102      	bne.n	80069ec <HAL_SD_Init+0x78>
 80069e6:	6a3b      	ldr	r3, [r7, #32]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d004      	beq.n	80069f6 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80069f2:	65da      	str	r2, [r3, #92]	; 0x5c
 80069f4:	e00b      	b.n	8006a0e <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069fa:	2b01      	cmp	r3, #1
 80069fc:	d104      	bne.n	8006a08 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006a04:	65da      	str	r2, [r3, #92]	; 0x5c
 8006a06:	e002      	b.n	8006a0e <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }
  /* Configure the bus wide */
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	68db      	ldr	r3, [r3, #12]
 8006a12:	4619      	mov	r1, r3
 8006a14:	6878      	ldr	r0, [r7, #4]
 8006a16:	f000 fe6b 	bl	80076f0 <HAL_SD_ConfigWideBusOperation>
 8006a1a:	4603      	mov	r3, r0
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d001      	beq.n	8006a24 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 8006a20:	2301      	movs	r3, #1
 8006a22:	e029      	b.n	8006a78 <HAL_SD_Init+0x104>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8006a24:	f7fa fc94 	bl	8001350 <HAL_GetTick>
 8006a28:	61f8      	str	r0, [r7, #28]
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8006a2a:	e014      	b.n	8006a56 <HAL_SD_Init+0xe2>
  {
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
 8006a2c:	f7fa fc90 	bl	8001350 <HAL_GetTick>
 8006a30:	4602      	mov	r2, r0
 8006a32:	69fb      	ldr	r3, [r7, #28]
 8006a34:	1ad3      	subs	r3, r2, r3
 8006a36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a3a:	d10c      	bne.n	8006a56 <HAL_SD_Init+0xe2>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006a42:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2201      	movs	r2, #1
 8006a48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2200      	movs	r2, #0
 8006a50:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 8006a52:	2303      	movs	r3, #3
 8006a54:	e010      	b.n	8006a78 <HAL_SD_Init+0x104>
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8006a56:	6878      	ldr	r0, [r7, #4]
 8006a58:	f000 ff5e 	bl	8007918 <HAL_SD_GetCardState>
 8006a5c:	4603      	mov	r3, r0
 8006a5e:	2b04      	cmp	r3, #4
 8006a60:	d1e4      	bne.n	8006a2c <HAL_SD_Init+0xb8>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	2200      	movs	r2, #0
 8006a66:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	2201      	movs	r2, #1
 8006a72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006a76:	2300      	movs	r3, #0
}
 8006a78:	4618      	mov	r0, r3
 8006a7a:	3728      	adds	r7, #40	; 0x28
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	bd80      	pop	{r7, pc}

08006a80 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006a80:	b5b0      	push	{r4, r5, r7, lr}
 8006a82:	b08e      	sub	sp, #56	; 0x38
 8006a84:	af04      	add	r7, sp, #16
 8006a86:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8006a88:	2300      	movs	r3, #0
 8006a8a:	60bb      	str	r3, [r7, #8]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	60fb      	str	r3, [r7, #12]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8006a90:	2300      	movs	r3, #0
 8006a92:	613b      	str	r3, [r7, #16]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8006a94:	2300      	movs	r3, #0
 8006a96:	617b      	str	r3, [r7, #20]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 8006a98:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8006a9c:	f7fe fd50 	bl	8005540 <HAL_RCCEx_GetPeriphCLKFreq>
 8006aa0:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 8006aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d109      	bne.n	8006abc <HAL_SD_InitCard+0x3c>
  {
      hsd->State = HAL_SD_STATE_READY;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2201      	movs	r2, #1
 8006aac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006ab6:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8006ab8:	2301      	movs	r3, #1
 8006aba:	e079      	b.n	8006bb0 <HAL_SD_InitCard+0x130>
  }
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockDiv = ((sdmmc_clk / SD_INIT_FREQ) - 2U);
#else
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8006abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006abe:	0a1b      	lsrs	r3, r3, #8
 8006ac0:	4a3d      	ldr	r2, [pc, #244]	; (8006bb8 <HAL_SD_InitCard+0x138>)
 8006ac2:	fba2 2303 	umull	r2, r3, r2, r3
 8006ac6:	091b      	lsrs	r3, r3, #4
 8006ac8:	61bb      	str	r3, [r7, #24]
#endif

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  Init.Transceiver = hsd->Init.Transceiver;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	699b      	ldr	r3, [r3, #24]
 8006ace:	61fb      	str	r3, [r7, #28]
  if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	699b      	ldr	r3, [r3, #24]
 8006ad4:	2b01      	cmp	r3, #1
 8006ad6:	d107      	bne.n	8006ae8 <HAL_SD_InitCard+0x68>
  {
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	681a      	ldr	r2, [r3, #0]
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f042 0210 	orr.w	r2, r2, #16
 8006ae6:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681d      	ldr	r5, [r3, #0]
 8006aec:	466c      	mov	r4, sp
 8006aee:	f107 0314 	add.w	r3, r7, #20
 8006af2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006af6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006afa:	f107 0308 	add.w	r3, r7, #8
 8006afe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006b00:	4628      	mov	r0, r5
 8006b02:	f001 fefd 	bl	8008900 <SDMMC_Init>
  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	f001 ff40 	bl	8008990 <SDMMC_PowerState_ON>
  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  sdmmc_clk = sdmmc_clk/(Init.ClockDiv + 2U);
#else
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
 8006b10:	69bb      	ldr	r3, [r7, #24]
 8006b12:	005b      	lsls	r3, r3, #1
 8006b14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b16:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b1a:	627b      	str	r3, [r7, #36]	; 0x24
#endif
  HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 8006b1c:	4a27      	ldr	r2, [pc, #156]	; (8006bbc <HAL_SD_InitCard+0x13c>)
 8006b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b20:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b24:	3301      	adds	r3, #1
 8006b26:	4618      	mov	r0, r3
 8006b28:	f7fa fc1e 	bl	8001368 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8006b2c:	6878      	ldr	r0, [r7, #4]
 8006b2e:	f000 ffd3 	bl	8007ad8 <SD_PowerON>
 8006b32:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006b34:	6a3b      	ldr	r3, [r7, #32]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d00b      	beq.n	8006b52 <HAL_SD_InitCard+0xd2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2201      	movs	r2, #1
 8006b3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b46:	6a3b      	ldr	r3, [r7, #32]
 8006b48:	431a      	orrs	r2, r3
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006b4e:	2301      	movs	r3, #1
 8006b50:	e02e      	b.n	8006bb0 <HAL_SD_InitCard+0x130>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8006b52:	6878      	ldr	r0, [r7, #4]
 8006b54:	f000 ff00 	bl	8007958 <SD_InitCard>
 8006b58:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006b5a:	6a3b      	ldr	r3, [r7, #32]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d00b      	beq.n	8006b78 <HAL_SD_InitCard+0xf8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2201      	movs	r2, #1
 8006b64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b6c:	6a3b      	ldr	r3, [r7, #32]
 8006b6e:	431a      	orrs	r2, r3
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006b74:	2301      	movs	r3, #1
 8006b76:	e01b      	b.n	8006bb0 <HAL_SD_InitCard+0x130>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006b80:	4618      	mov	r0, r3
 8006b82:	f001 ff9b 	bl	8008abc <SDMMC_CmdBlockLength>
 8006b86:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006b88:	6a3b      	ldr	r3, [r7, #32]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d00f      	beq.n	8006bae <HAL_SD_InitCard+0x12e>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	4a0b      	ldr	r2, [pc, #44]	; (8006bc0 <HAL_SD_InitCard+0x140>)
 8006b94:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b9a:	6a3b      	ldr	r3, [r7, #32]
 8006b9c:	431a      	orrs	r2, r3
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	2201      	movs	r2, #1
 8006ba6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006baa:	2301      	movs	r3, #1
 8006bac:	e000      	b.n	8006bb0 <HAL_SD_InitCard+0x130>
  }

  return HAL_OK;
 8006bae:	2300      	movs	r3, #0
}
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	3728      	adds	r7, #40	; 0x28
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	bdb0      	pop	{r4, r5, r7, pc}
 8006bb8:	014f8b59 	.word	0x014f8b59
 8006bbc:	00012110 	.word	0x00012110
 8006bc0:	1fe00fff 	.word	0x1fe00fff

08006bc4 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd Block Address from where data is to be read
  * @param  NumberOfBlocks Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	b08c      	sub	sp, #48	; 0x30
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	60f8      	str	r0, [r7, #12]
 8006bcc:	60b9      	str	r1, [r7, #8]
 8006bce:	607a      	str	r2, [r7, #4]
 8006bd0:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8006bd6:	68bb      	ldr	r3, [r7, #8]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d107      	bne.n	8006bec <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006be0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006be8:	2301      	movs	r3, #1
 8006bea:	e08d      	b.n	8006d08 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006bf2:	b2db      	uxtb	r3, r3
 8006bf4:	2b01      	cmp	r3, #1
 8006bf6:	f040 8086 	bne.w	8006d06 <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006c00:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006c02:	683b      	ldr	r3, [r7, #0]
 8006c04:	441a      	add	r2, r3
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c0a:	429a      	cmp	r2, r3
 8006c0c:	d907      	bls.n	8006c1e <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c12:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8006c1a:	2301      	movs	r3, #1
 8006c1c:	e074      	b.n	8006d08 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	2203      	movs	r2, #3
 8006c22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	62da      	str	r2, [r3, #44]	; 0x2c
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
#else
      hsd->pRxBuffPtr = pData;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	68ba      	ldr	r2, [r7, #8]
 8006c32:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	025a      	lsls	r2, r3, #9
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c40:	2b01      	cmp	r3, #1
 8006c42:	d002      	beq.n	8006c4a <HAL_SD_ReadBlocks_DMA+0x86>
      {
        add *= 512U;
 8006c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c46:	025b      	lsls	r3, r3, #9
 8006c48:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006c4a:	f04f 33ff 	mov.w	r3, #4294967295
 8006c4e:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8006c50:	683b      	ldr	r3, [r7, #0]
 8006c52:	025b      	lsls	r3, r3, #9
 8006c54:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8006c56:	2390      	movs	r3, #144	; 0x90
 8006c58:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8006c5a:	2302      	movs	r3, #2
 8006c5c:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006c5e:	2300      	movs	r3, #0
 8006c60:	623b      	str	r3, [r7, #32]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      config.DPSM          = SDMMC_DPSM_DISABLE;
 8006c62:	2300      	movs	r3, #0
 8006c64:	627b      	str	r3, [r7, #36]	; 0x24
#else
      config.DPSM          = SDMMC_DPSM_ENABLE;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	f107 0210 	add.w	r2, r7, #16
 8006c6e:	4611      	mov	r1, r2
 8006c70:	4618      	mov	r0, r3
 8006c72:	f001 fef7 	bl	8008a64 <SDMMC_ConfigData>

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)

      __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	68da      	ldr	r2, [r3, #12]
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006c84:	60da      	str	r2, [r3, #12]
      hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	68ba      	ldr	r2, [r7, #8]
 8006c8c:	659a      	str	r2, [r3, #88]	; 0x58
      hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	2201      	movs	r2, #1
 8006c94:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	2b01      	cmp	r3, #1
 8006c9a:	d90a      	bls.n	8006cb2 <HAL_SD_ReadBlocks_DMA+0xee>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	2282      	movs	r2, #130	; 0x82
 8006ca0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006ca8:	4618      	mov	r0, r3
 8006caa:	f001 ff4d 	bl	8008b48 <SDMMC_CmdReadMultiBlock>
 8006cae:	62f8      	str	r0, [r7, #44]	; 0x2c
 8006cb0:	e009      	b.n	8006cc6 <HAL_SD_ReadBlocks_DMA+0x102>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	2281      	movs	r2, #129	; 0x81
 8006cb6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	f001 ff1f 	bl	8008b02 <SDMMC_CmdReadSingleBlock>
 8006cc4:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8006cc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d012      	beq.n	8006cf2 <HAL_SD_ReadBlocks_DMA+0x12e>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	4a0f      	ldr	r2, [pc, #60]	; (8006d10 <HAL_SD_ReadBlocks_DMA+0x14c>)
 8006cd2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006cd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cda:	431a      	orrs	r2, r3
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	2201      	movs	r2, #1
 8006ce4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	2200      	movs	r2, #0
 8006cec:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8006cee:	2301      	movs	r3, #1
 8006cf0:	e00a      	b.n	8006d08 <HAL_SD_ReadBlocks_DMA+0x144>
      }

      /* Enable transfer interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8006d00:	63da      	str	r2, [r3, #60]	; 0x3c

      return HAL_OK;
 8006d02:	2300      	movs	r3, #0
 8006d04:	e000      	b.n	8006d08 <HAL_SD_ReadBlocks_DMA+0x144>
    }
#endif
  }
  else
  {
    return HAL_BUSY;
 8006d06:	2302      	movs	r3, #2
  }
}
 8006d08:	4618      	mov	r0, r3
 8006d0a:	3730      	adds	r7, #48	; 0x30
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	bd80      	pop	{r7, pc}
 8006d10:	1fe00fff 	.word	0x1fe00fff

08006d14 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd Block Address where data will be written
  * @param  NumberOfBlocks Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8006d14:	b580      	push	{r7, lr}
 8006d16:	b08c      	sub	sp, #48	; 0x30
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	60f8      	str	r0, [r7, #12]
 8006d1c:	60b9      	str	r1, [r7, #8]
 8006d1e:	607a      	str	r2, [r7, #4]
 8006d20:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8006d26:	68bb      	ldr	r3, [r7, #8]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d107      	bne.n	8006d3c <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d30:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006d38:	2301      	movs	r3, #1
 8006d3a:	e08d      	b.n	8006e58 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006d42:	b2db      	uxtb	r3, r3
 8006d44:	2b01      	cmp	r3, #1
 8006d46:	f040 8086 	bne.w	8006e56 <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006d50:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006d52:	683b      	ldr	r3, [r7, #0]
 8006d54:	441a      	add	r2, r3
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d5a:	429a      	cmp	r2, r3
 8006d5c:	d907      	bls.n	8006d6e <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d62:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8006d6a:	2301      	movs	r3, #1
 8006d6c:	e074      	b.n	8006e58 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	2203      	movs	r2, #3
 8006d72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    hsd->pTxBuffPtr = pData;
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	68ba      	ldr	r2, [r7, #8]
 8006d82:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 8006d84:	683b      	ldr	r3, [r7, #0]
 8006d86:	025a      	lsls	r2, r3, #9
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d90:	2b01      	cmp	r3, #1
 8006d92:	d002      	beq.n	8006d9a <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 8006d94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d96:	025b      	lsls	r3, r3, #9
 8006d98:	62bb      	str	r3, [r7, #40]	; 0x28
    }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006d9a:	f04f 33ff 	mov.w	r3, #4294967295
 8006d9e:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	025b      	lsls	r3, r3, #9
 8006da4:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8006da6:	2390      	movs	r3, #144	; 0x90
 8006da8:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8006daa:	2300      	movs	r3, #0
 8006dac:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006dae:	2300      	movs	r3, #0
 8006db0:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8006db2:	2300      	movs	r3, #0
 8006db4:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	f107 0210 	add.w	r2, r7, #16
 8006dbe:	4611      	mov	r1, r2
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	f001 fe4f 	bl	8008a64 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	68da      	ldr	r2, [r3, #12]
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006dd4:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	68ba      	ldr	r2, [r7, #8]
 8006ddc:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	2201      	movs	r2, #1
 8006de4:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	2b01      	cmp	r3, #1
 8006dea:	d90a      	bls.n	8006e02 <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	22a0      	movs	r2, #160	; 0xa0
 8006df0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006df8:	4618      	mov	r0, r3
 8006dfa:	f001 feeb 	bl	8008bd4 <SDMMC_CmdWriteMultiBlock>
 8006dfe:	62f8      	str	r0, [r7, #44]	; 0x2c
 8006e00:	e009      	b.n	8006e16 <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	2290      	movs	r2, #144	; 0x90
 8006e06:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006e0e:	4618      	mov	r0, r3
 8006e10:	f001 febd 	bl	8008b8e <SDMMC_CmdWriteSingleBlock>
 8006e14:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8006e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d012      	beq.n	8006e42 <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	4a0f      	ldr	r2, [pc, #60]	; (8006e60 <HAL_SD_WriteBlocks_DMA+0x14c>)
 8006e22:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006e28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e2a:	431a      	orrs	r2, r3
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	2201      	movs	r2, #1
 8006e34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006e3e:	2301      	movs	r3, #1
 8006e40:	e00a      	b.n	8006e58 <HAL_SD_WriteBlocks_DMA+0x144>

      /* Enable SD Error interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));
#else
      /* Enable transfer interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 8006e50:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

      return HAL_OK;
 8006e52:	2300      	movs	r3, #0
 8006e54:	e000      	b.n	8006e58 <HAL_SD_WriteBlocks_DMA+0x144>
    }
#endif
  }
  else
  {
    return HAL_BUSY;
 8006e56:	2302      	movs	r3, #2
  }
}
 8006e58:	4618      	mov	r0, r3
 8006e5a:	3730      	adds	r7, #48	; 0x30
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	bd80      	pop	{r7, pc}
 8006e60:	1fe00fff 	.word	0x1fe00fff

08006e64 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b084      	sub	sp, #16
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e70:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e78:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d008      	beq.n	8006e92 <HAL_SD_IRQHandler+0x2e>
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	f003 0308 	and.w	r3, r3, #8
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d003      	beq.n	8006e92 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8006e8a:	6878      	ldr	r0, [r7, #4]
 8006e8c:	f001 f98e 	bl	80081ac <SD_Read_IT>
 8006e90:	e199      	b.n	80071c6 <HAL_SD_IRQHandler+0x362>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	f000 80ae 	beq.w	8006ffe <HAL_SD_IRQHandler+0x19a>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006eaa:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT |\
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006eb2:	687a      	ldr	r2, [r7, #4]
 8006eb4:	6812      	ldr	r2, [r2, #0]
 8006eb6:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 8006eba:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8006ebe:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8006ece:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	68da      	ldr	r2, [r3, #12]
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006ede:	60da      	str	r2, [r3, #12]
#else
    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    if((context & SD_CONTEXT_IT) != 0U)
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	f003 0308 	and.w	r3, r3, #8
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d038      	beq.n	8006f5c <HAL_SD_IRQHandler+0xf8>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	f003 0302 	and.w	r3, r3, #2
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d104      	bne.n	8006efe <HAL_SD_IRQHandler+0x9a>
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	f003 0320 	and.w	r3, r3, #32
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d011      	beq.n	8006f22 <HAL_SD_IRQHandler+0xbe>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	4618      	mov	r0, r3
 8006f04:	f001 fe8a 	bl	8008c1c <SDMMC_CmdStopTransfer>
 8006f08:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8006f0a:	68bb      	ldr	r3, [r7, #8]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d008      	beq.n	8006f22 <HAL_SD_IRQHandler+0xbe>
        {
          hsd->ErrorCode |= errorstate;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f14:	68bb      	ldr	r3, [r7, #8]
 8006f16:	431a      	orrs	r2, r3
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8006f1c:	6878      	ldr	r0, [r7, #4]
 8006f1e:	f000 f957 	bl	80071d0 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	4a90      	ldr	r2, [pc, #576]	; (8007168 <HAL_SD_IRQHandler+0x304>)
 8006f28:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	2201      	movs	r2, #1
 8006f2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	2200      	movs	r2, #0
 8006f36:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	f003 0301 	and.w	r3, r3, #1
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d104      	bne.n	8006f4c <HAL_SD_IRQHandler+0xe8>
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	f003 0302 	and.w	r3, r3, #2
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d003      	beq.n	8006f54 <HAL_SD_IRQHandler+0xf0>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8006f4c:	6878      	ldr	r0, [r7, #4]
 8006f4e:	f002 fb51 	bl	80095f4 <HAL_SD_RxCpltCallback>
 8006f52:	e138      	b.n	80071c6 <HAL_SD_IRQHandler+0x362>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8006f54:	6878      	ldr	r0, [r7, #4]
 8006f56:	f002 fb43 	bl	80095e0 <HAL_SD_TxCpltCallback>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else
  {
    /* Nothing to do */
  }
}
 8006f5a:	e134      	b.n	80071c6 <HAL_SD_IRQHandler+0x362>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	f000 812f 	beq.w	80071c6 <HAL_SD_IRQHandler+0x362>
      hsd->Instance->DLEN = 0;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	2200      	movs	r2, #0
 8006f76:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	651a      	str	r2, [r3, #80]	; 0x50
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	f003 0302 	and.w	r3, r3, #2
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d104      	bne.n	8006f94 <HAL_SD_IRQHandler+0x130>
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	f003 0320 	and.w	r3, r3, #32
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d011      	beq.n	8006fb8 <HAL_SD_IRQHandler+0x154>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	4618      	mov	r0, r3
 8006f9a:	f001 fe3f 	bl	8008c1c <SDMMC_CmdStopTransfer>
 8006f9e:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8006fa0:	68bb      	ldr	r3, [r7, #8]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d008      	beq.n	8006fb8 <HAL_SD_IRQHandler+0x154>
          hsd->ErrorCode |= errorstate;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006faa:	68bb      	ldr	r3, [r7, #8]
 8006fac:	431a      	orrs	r2, r3
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8006fb2:	6878      	ldr	r0, [r7, #4]
 8006fb4:	f000 f90c 	bl	80071d0 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2201      	movs	r2, #1
 8006fbc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	f003 0310 	and.w	r3, r3, #16
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d104      	bne.n	8006fda <HAL_SD_IRQHandler+0x176>
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	f003 0320 	and.w	r3, r3, #32
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d002      	beq.n	8006fe0 <HAL_SD_IRQHandler+0x17c>
        HAL_SD_TxCpltCallback(hsd);
 8006fda:	6878      	ldr	r0, [r7, #4]
 8006fdc:	f002 fb00 	bl	80095e0 <HAL_SD_TxCpltCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	f003 0301 	and.w	r3, r3, #1
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d105      	bne.n	8006ff6 <HAL_SD_IRQHandler+0x192>
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	f003 0302 	and.w	r3, r3, #2
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	f000 80e8 	beq.w	80071c6 <HAL_SD_IRQHandler+0x362>
        HAL_SD_RxCpltCallback(hsd);
 8006ff6:	6878      	ldr	r0, [r7, #4]
 8006ff8:	f002 fafc 	bl	80095f4 <HAL_SD_RxCpltCallback>
}
 8006ffc:	e0e3      	b.n	80071c6 <HAL_SD_IRQHandler+0x362>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007004:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007008:	2b00      	cmp	r3, #0
 800700a:	d008      	beq.n	800701e <HAL_SD_IRQHandler+0x1ba>
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	f003 0308 	and.w	r3, r3, #8
 8007012:	2b00      	cmp	r3, #0
 8007014:	d003      	beq.n	800701e <HAL_SD_IRQHandler+0x1ba>
    SD_Write_IT(hsd);
 8007016:	6878      	ldr	r0, [r7, #4]
 8007018:	f001 f919 	bl	800824e <SD_Write_IT>
 800701c:	e0d3      	b.n	80071c6 <HAL_SD_IRQHandler+0x362>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007024:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8007028:	2b00      	cmp	r3, #0
 800702a:	f000 809f 	beq.w	800716c <HAL_SD_IRQHandler+0x308>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007034:	f003 0302 	and.w	r3, r3, #2
 8007038:	2b00      	cmp	r3, #0
 800703a:	d005      	beq.n	8007048 <HAL_SD_IRQHandler+0x1e4>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007040:	f043 0202 	orr.w	r2, r3, #2
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800704e:	f003 0308 	and.w	r3, r3, #8
 8007052:	2b00      	cmp	r3, #0
 8007054:	d005      	beq.n	8007062 <HAL_SD_IRQHandler+0x1fe>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800705a:	f043 0208 	orr.w	r2, r3, #8
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007068:	f003 0320 	and.w	r3, r3, #32
 800706c:	2b00      	cmp	r3, #0
 800706e:	d005      	beq.n	800707c <HAL_SD_IRQHandler+0x218>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007074:	f043 0220 	orr.w	r2, r3, #32
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007082:	f003 0310 	and.w	r3, r3, #16
 8007086:	2b00      	cmp	r3, #0
 8007088:	d005      	beq.n	8007096 <HAL_SD_IRQHandler+0x232>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800708e:	f043 0210 	orr.w	r2, r3, #16
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	4a33      	ldr	r2, [pc, #204]	; (8007168 <HAL_SD_IRQHandler+0x304>)
 800709c:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 80070ac:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	68da      	ldr	r2, [r3, #12]
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80070bc:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80070cc:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	68da      	ldr	r2, [r3, #12]
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80070dc:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	4618      	mov	r0, r3
 80070e4:	f001 fd9a 	bl	8008c1c <SDMMC_CmdStopTransfer>
 80070e8:	4602      	mov	r2, r0
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070ee:	431a      	orrs	r2, r3
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	68da      	ldr	r2, [r3, #12]
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007102:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800710c:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	f003 0308 	and.w	r3, r3, #8
 8007114:	2b00      	cmp	r3, #0
 8007116:	d00a      	beq.n	800712e <HAL_SD_IRQHandler+0x2ca>
      hsd->State = HAL_SD_STATE_READY;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2201      	movs	r2, #1
 800711c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	2200      	movs	r2, #0
 8007124:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8007126:	6878      	ldr	r0, [r7, #4]
 8007128:	f000 f852 	bl	80071d0 <HAL_SD_ErrorCallback>
}
 800712c:	e04b      	b.n	80071c6 <HAL_SD_IRQHandler+0x362>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007134:	2b00      	cmp	r3, #0
 8007136:	d046      	beq.n	80071c6 <HAL_SD_IRQHandler+0x362>
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800713c:	2b00      	cmp	r3, #0
 800713e:	d042      	beq.n	80071c6 <HAL_SD_IRQHandler+0x362>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800714e:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	2200      	movs	r2, #0
 8007156:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2201      	movs	r2, #1
 800715c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_ErrorCallback(hsd);
 8007160:	6878      	ldr	r0, [r7, #4]
 8007162:	f000 f835 	bl	80071d0 <HAL_SD_ErrorCallback>
}
 8007166:	e02e      	b.n	80071c6 <HAL_SD_IRQHandler+0x362>
 8007168:	18000f3a 	.word	0x18000f3a
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007172:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007176:	2b00      	cmp	r3, #0
 8007178:	d025      	beq.n	80071c6 <HAL_SD_IRQHandler+0x362>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007182:	639a      	str	r2, [r3, #56]	; 0x38
    if(READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800718a:	f003 0304 	and.w	r3, r3, #4
 800718e:	2b00      	cmp	r3, #0
 8007190:	d10c      	bne.n	80071ac <HAL_SD_IRQHandler+0x348>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	f003 0320 	and.w	r3, r3, #32
 8007198:	2b00      	cmp	r3, #0
 800719a:	d003      	beq.n	80071a4 <HAL_SD_IRQHandler+0x340>
        HAL_SDEx_Write_DMADoubleBuffer1CpltCallback(hsd);
 800719c:	6878      	ldr	r0, [r7, #4]
 800719e:	f001 f8d4 	bl	800834a <HAL_SDEx_Write_DMADoubleBuffer1CpltCallback>
}
 80071a2:	e010      	b.n	80071c6 <HAL_SD_IRQHandler+0x362>
        HAL_SDEx_Read_DMADoubleBuffer1CpltCallback(hsd);
 80071a4:	6878      	ldr	r0, [r7, #4]
 80071a6:	f001 f8bc 	bl	8008322 <HAL_SDEx_Read_DMADoubleBuffer1CpltCallback>
}
 80071aa:	e00c      	b.n	80071c6 <HAL_SD_IRQHandler+0x362>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	f003 0320 	and.w	r3, r3, #32
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d003      	beq.n	80071be <HAL_SD_IRQHandler+0x35a>
        HAL_SDEx_Write_DMADoubleBuffer0CpltCallback(hsd);
 80071b6:	6878      	ldr	r0, [r7, #4]
 80071b8:	f001 f8bd 	bl	8008336 <HAL_SDEx_Write_DMADoubleBuffer0CpltCallback>
}
 80071bc:	e003      	b.n	80071c6 <HAL_SD_IRQHandler+0x362>
        HAL_SDEx_Read_DMADoubleBuffer0CpltCallback(hsd);
 80071be:	6878      	ldr	r0, [r7, #4]
 80071c0:	f001 f8a5 	bl	800830e <HAL_SDEx_Read_DMADoubleBuffer0CpltCallback>
}
 80071c4:	e7ff      	b.n	80071c6 <HAL_SD_IRQHandler+0x362>
 80071c6:	bf00      	nop
 80071c8:	3710      	adds	r7, #16
 80071ca:	46bd      	mov	sp, r7
 80071cc:	bd80      	pop	{r7, pc}
 80071ce:	bf00      	nop

080071d0 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 80071d0:	b480      	push	{r7}
 80071d2:	b083      	sub	sp, #12
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 80071d8:	bf00      	nop
 80071da:	370c      	adds	r7, #12
 80071dc:	46bd      	mov	sp, r7
 80071de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e2:	4770      	bx	lr

080071e4 <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80071e4:	b480      	push	{r7}
 80071e6:	b083      	sub	sp, #12
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
 80071ec:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80071f2:	0f9b      	lsrs	r3, r3, #30
 80071f4:	b2da      	uxtb	r2, r3
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80071fe:	0e9b      	lsrs	r3, r3, #26
 8007200:	b2db      	uxtb	r3, r3
 8007202:	f003 030f 	and.w	r3, r3, #15
 8007206:	b2da      	uxtb	r2, r3
 8007208:	683b      	ldr	r3, [r7, #0]
 800720a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007210:	0e1b      	lsrs	r3, r3, #24
 8007212:	b2db      	uxtb	r3, r3
 8007214:	f003 0303 	and.w	r3, r3, #3
 8007218:	b2da      	uxtb	r2, r3
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007222:	0c1b      	lsrs	r3, r3, #16
 8007224:	b2da      	uxtb	r2, r3
 8007226:	683b      	ldr	r3, [r7, #0]
 8007228:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800722e:	0a1b      	lsrs	r3, r3, #8
 8007230:	b2da      	uxtb	r2, r3
 8007232:	683b      	ldr	r3, [r7, #0]
 8007234:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800723a:	b2da      	uxtb	r2, r3
 800723c:	683b      	ldr	r3, [r7, #0]
 800723e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007244:	0d1b      	lsrs	r3, r3, #20
 8007246:	b29a      	uxth	r2, r3
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007250:	0c1b      	lsrs	r3, r3, #16
 8007252:	b2db      	uxtb	r3, r3
 8007254:	f003 030f 	and.w	r3, r3, #15
 8007258:	b2da      	uxtb	r2, r3
 800725a:	683b      	ldr	r3, [r7, #0]
 800725c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007262:	0bdb      	lsrs	r3, r3, #15
 8007264:	b2db      	uxtb	r3, r3
 8007266:	f003 0301 	and.w	r3, r3, #1
 800726a:	b2da      	uxtb	r2, r3
 800726c:	683b      	ldr	r3, [r7, #0]
 800726e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007274:	0b9b      	lsrs	r3, r3, #14
 8007276:	b2db      	uxtb	r3, r3
 8007278:	f003 0301 	and.w	r3, r3, #1
 800727c:	b2da      	uxtb	r2, r3
 800727e:	683b      	ldr	r3, [r7, #0]
 8007280:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007286:	0b5b      	lsrs	r3, r3, #13
 8007288:	b2db      	uxtb	r3, r3
 800728a:	f003 0301 	and.w	r3, r3, #1
 800728e:	b2da      	uxtb	r2, r3
 8007290:	683b      	ldr	r3, [r7, #0]
 8007292:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007298:	0b1b      	lsrs	r3, r3, #12
 800729a:	b2db      	uxtb	r3, r3
 800729c:	f003 0301 	and.w	r3, r3, #1
 80072a0:	b2da      	uxtb	r2, r3
 80072a2:	683b      	ldr	r3, [r7, #0]
 80072a4:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	2200      	movs	r2, #0
 80072aa:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d163      	bne.n	800737c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80072b8:	009a      	lsls	r2, r3, #2
 80072ba:	f640 73fc 	movw	r3, #4092	; 0xffc
 80072be:	4013      	ands	r3, r2
 80072c0:	687a      	ldr	r2, [r7, #4]
 80072c2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80072c4:	0f92      	lsrs	r2, r2, #30
 80072c6:	431a      	orrs	r2, r3
 80072c8:	683b      	ldr	r3, [r7, #0]
 80072ca:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80072d0:	0edb      	lsrs	r3, r3, #27
 80072d2:	b2db      	uxtb	r3, r3
 80072d4:	f003 0307 	and.w	r3, r3, #7
 80072d8:	b2da      	uxtb	r2, r3
 80072da:	683b      	ldr	r3, [r7, #0]
 80072dc:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80072e2:	0e1b      	lsrs	r3, r3, #24
 80072e4:	b2db      	uxtb	r3, r3
 80072e6:	f003 0307 	and.w	r3, r3, #7
 80072ea:	b2da      	uxtb	r2, r3
 80072ec:	683b      	ldr	r3, [r7, #0]
 80072ee:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80072f4:	0d5b      	lsrs	r3, r3, #21
 80072f6:	b2db      	uxtb	r3, r3
 80072f8:	f003 0307 	and.w	r3, r3, #7
 80072fc:	b2da      	uxtb	r2, r3
 80072fe:	683b      	ldr	r3, [r7, #0]
 8007300:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007306:	0c9b      	lsrs	r3, r3, #18
 8007308:	b2db      	uxtb	r3, r3
 800730a:	f003 0307 	and.w	r3, r3, #7
 800730e:	b2da      	uxtb	r2, r3
 8007310:	683b      	ldr	r3, [r7, #0]
 8007312:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007318:	0bdb      	lsrs	r3, r3, #15
 800731a:	b2db      	uxtb	r3, r3
 800731c:	f003 0307 	and.w	r3, r3, #7
 8007320:	b2da      	uxtb	r2, r3
 8007322:	683b      	ldr	r3, [r7, #0]
 8007324:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8007326:	683b      	ldr	r3, [r7, #0]
 8007328:	691b      	ldr	r3, [r3, #16]
 800732a:	1c5a      	adds	r2, r3, #1
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8007330:	683b      	ldr	r3, [r7, #0]
 8007332:	7e1b      	ldrb	r3, [r3, #24]
 8007334:	b2db      	uxtb	r3, r3
 8007336:	f003 0307 	and.w	r3, r3, #7
 800733a:	3302      	adds	r3, #2
 800733c:	2201      	movs	r2, #1
 800733e:	fa02 f303 	lsl.w	r3, r2, r3
 8007342:	687a      	ldr	r2, [r7, #4]
 8007344:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8007346:	fb03 f202 	mul.w	r2, r3, r2
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800734e:	683b      	ldr	r3, [r7, #0]
 8007350:	7a1b      	ldrb	r3, [r3, #8]
 8007352:	b2db      	uxtb	r3, r3
 8007354:	f003 030f 	and.w	r3, r3, #15
 8007358:	2201      	movs	r2, #1
 800735a:	409a      	lsls	r2, r3
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	651a      	str	r2, [r3, #80]	; 0x50

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007364:	687a      	ldr	r2, [r7, #4]
 8007366:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8007368:	0a52      	lsrs	r2, r2, #9
 800736a:	fb03 f202 	mul.w	r2, r3, r2
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockSize = 512U;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007378:	659a      	str	r2, [r3, #88]	; 0x58
 800737a:	e031      	b.n	80073e0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007380:	2b01      	cmp	r3, #1
 8007382:	d11d      	bne.n	80073c0 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007388:	041b      	lsls	r3, r3, #16
 800738a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007392:	0c1b      	lsrs	r3, r3, #16
 8007394:	431a      	orrs	r2, r3
 8007396:	683b      	ldr	r3, [r7, #0]
 8007398:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800739a:	683b      	ldr	r3, [r7, #0]
 800739c:	691b      	ldr	r3, [r3, #16]
 800739e:	3301      	adds	r3, #1
 80073a0:	029a      	lsls	r2, r3, #10
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 512U;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80073b4:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	659a      	str	r2, [r3, #88]	; 0x58
 80073be:	e00f      	b.n	80073e0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	4a58      	ldr	r2, [pc, #352]	; (8007528 <HAL_SD_GetCardCSD+0x344>)
 80073c6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073cc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2201      	movs	r2, #1
 80073d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80073dc:	2301      	movs	r3, #1
 80073de:	e09d      	b.n	800751c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80073e4:	0b9b      	lsrs	r3, r3, #14
 80073e6:	b2db      	uxtb	r3, r3
 80073e8:	f003 0301 	and.w	r3, r3, #1
 80073ec:	b2da      	uxtb	r2, r3
 80073ee:	683b      	ldr	r3, [r7, #0]
 80073f0:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80073f6:	09db      	lsrs	r3, r3, #7
 80073f8:	b2db      	uxtb	r3, r3
 80073fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80073fe:	b2da      	uxtb	r2, r3
 8007400:	683b      	ldr	r3, [r7, #0]
 8007402:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007408:	b2db      	uxtb	r3, r3
 800740a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800740e:	b2da      	uxtb	r2, r3
 8007410:	683b      	ldr	r3, [r7, #0]
 8007412:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007418:	0fdb      	lsrs	r3, r3, #31
 800741a:	b2da      	uxtb	r2, r3
 800741c:	683b      	ldr	r3, [r7, #0]
 800741e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007424:	0f5b      	lsrs	r3, r3, #29
 8007426:	b2db      	uxtb	r3, r3
 8007428:	f003 0303 	and.w	r3, r3, #3
 800742c:	b2da      	uxtb	r2, r3
 800742e:	683b      	ldr	r3, [r7, #0]
 8007430:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007436:	0e9b      	lsrs	r3, r3, #26
 8007438:	b2db      	uxtb	r3, r3
 800743a:	f003 0307 	and.w	r3, r3, #7
 800743e:	b2da      	uxtb	r2, r3
 8007440:	683b      	ldr	r3, [r7, #0]
 8007442:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007448:	0d9b      	lsrs	r3, r3, #22
 800744a:	b2db      	uxtb	r3, r3
 800744c:	f003 030f 	and.w	r3, r3, #15
 8007450:	b2da      	uxtb	r2, r3
 8007452:	683b      	ldr	r3, [r7, #0]
 8007454:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800745a:	0d5b      	lsrs	r3, r3, #21
 800745c:	b2db      	uxtb	r3, r3
 800745e:	f003 0301 	and.w	r3, r3, #1
 8007462:	b2da      	uxtb	r2, r3
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800746a:	683b      	ldr	r3, [r7, #0]
 800746c:	2200      	movs	r2, #0
 800746e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007476:	0c1b      	lsrs	r3, r3, #16
 8007478:	b2db      	uxtb	r3, r3
 800747a:	f003 0301 	and.w	r3, r3, #1
 800747e:	b2da      	uxtb	r2, r3
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800748a:	0bdb      	lsrs	r3, r3, #15
 800748c:	b2db      	uxtb	r3, r3
 800748e:	f003 0301 	and.w	r3, r3, #1
 8007492:	b2da      	uxtb	r2, r3
 8007494:	683b      	ldr	r3, [r7, #0]
 8007496:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800749e:	0b9b      	lsrs	r3, r3, #14
 80074a0:	b2db      	uxtb	r3, r3
 80074a2:	f003 0301 	and.w	r3, r3, #1
 80074a6:	b2da      	uxtb	r2, r3
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80074b2:	0b5b      	lsrs	r3, r3, #13
 80074b4:	b2db      	uxtb	r3, r3
 80074b6:	f003 0301 	and.w	r3, r3, #1
 80074ba:	b2da      	uxtb	r2, r3
 80074bc:	683b      	ldr	r3, [r7, #0]
 80074be:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80074c6:	0b1b      	lsrs	r3, r3, #12
 80074c8:	b2db      	uxtb	r3, r3
 80074ca:	f003 0301 	and.w	r3, r3, #1
 80074ce:	b2da      	uxtb	r2, r3
 80074d0:	683b      	ldr	r3, [r7, #0]
 80074d2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80074da:	0a9b      	lsrs	r3, r3, #10
 80074dc:	b2db      	uxtb	r3, r3
 80074de:	f003 0303 	and.w	r3, r3, #3
 80074e2:	b2da      	uxtb	r2, r3
 80074e4:	683b      	ldr	r3, [r7, #0]
 80074e6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80074ee:	0a1b      	lsrs	r3, r3, #8
 80074f0:	b2db      	uxtb	r3, r3
 80074f2:	f003 0303 	and.w	r3, r3, #3
 80074f6:	b2da      	uxtb	r2, r3
 80074f8:	683b      	ldr	r3, [r7, #0]
 80074fa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007502:	085b      	lsrs	r3, r3, #1
 8007504:	b2db      	uxtb	r3, r3
 8007506:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800750a:	b2da      	uxtb	r2, r3
 800750c:	683b      	ldr	r3, [r7, #0]
 800750e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8007512:	683b      	ldr	r3, [r7, #0]
 8007514:	2201      	movs	r2, #1
 8007516:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800751a:	2300      	movs	r3, #0
}
 800751c:	4618      	mov	r0, r3
 800751e:	370c      	adds	r7, #12
 8007520:	46bd      	mov	sp, r7
 8007522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007526:	4770      	bx	lr
 8007528:	1fe00fff 	.word	0x1fe00fff

0800752c <HAL_SD_GetCardStatus>:
  * @param  pStatus Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800752c:	b580      	push	{r7, lr}
 800752e:	b094      	sub	sp, #80	; 0x50
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
 8007534:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8007536:	2300      	movs	r3, #0
 8007538:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800753c:	f107 0308 	add.w	r3, r7, #8
 8007540:	4619      	mov	r1, r3
 8007542:	6878      	ldr	r0, [r7, #4]
 8007544:	f000 fbd4 	bl	8007cf0 <SD_SendSDStatus>
 8007548:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 800754a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800754c:	2b00      	cmp	r3, #0
 800754e:	d011      	beq.n	8007574 <HAL_SD_GetCardStatus+0x48>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	4a4f      	ldr	r2, [pc, #316]	; (8007694 <HAL_SD_GetCardStatus+0x168>)
 8007556:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800755c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800755e:	431a      	orrs	r2, r3
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2201      	movs	r2, #1
 8007568:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800756c:	2301      	movs	r3, #1
 800756e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8007572:	e070      	b.n	8007656 <HAL_SD_GetCardStatus+0x12a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8007574:	68bb      	ldr	r3, [r7, #8]
 8007576:	099b      	lsrs	r3, r3, #6
 8007578:	b2db      	uxtb	r3, r3
 800757a:	f003 0303 	and.w	r3, r3, #3
 800757e:	b2da      	uxtb	r2, r3
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8007584:	68bb      	ldr	r3, [r7, #8]
 8007586:	095b      	lsrs	r3, r3, #5
 8007588:	b2db      	uxtb	r3, r3
 800758a:	f003 0301 	and.w	r3, r3, #1
 800758e:	b2da      	uxtb	r2, r3
 8007590:	683b      	ldr	r3, [r7, #0]
 8007592:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8007594:	68bb      	ldr	r3, [r7, #8]
 8007596:	0a1b      	lsrs	r3, r3, #8
 8007598:	b29b      	uxth	r3, r3
 800759a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800759e:	b29a      	uxth	r2, r3
 80075a0:	68bb      	ldr	r3, [r7, #8]
 80075a2:	0e1b      	lsrs	r3, r3, #24
 80075a4:	b29b      	uxth	r3, r3
 80075a6:	4313      	orrs	r3, r2
 80075a8:	b29a      	uxth	r2, r3
 80075aa:	683b      	ldr	r3, [r7, #0]
 80075ac:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	061a      	lsls	r2, r3, #24
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	021b      	lsls	r3, r3, #8
 80075b6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80075ba:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	0a1b      	lsrs	r3, r3, #8
 80075c0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80075c4:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	0e1b      	lsrs	r3, r3, #24
 80075ca:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80075cc:	683b      	ldr	r3, [r7, #0]
 80075ce:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 80075d0:	693b      	ldr	r3, [r7, #16]
 80075d2:	b2da      	uxtb	r2, r3
 80075d4:	683b      	ldr	r3, [r7, #0]
 80075d6:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 80075d8:	693b      	ldr	r3, [r7, #16]
 80075da:	0a1b      	lsrs	r3, r3, #8
 80075dc:	b2da      	uxtb	r2, r3
 80075de:	683b      	ldr	r3, [r7, #0]
 80075e0:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 80075e2:	693b      	ldr	r3, [r7, #16]
 80075e4:	0d1b      	lsrs	r3, r3, #20
 80075e6:	b2db      	uxtb	r3, r3
 80075e8:	f003 030f 	and.w	r3, r3, #15
 80075ec:	b2da      	uxtb	r2, r3
 80075ee:	683b      	ldr	r3, [r7, #0]
 80075f0:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 80075f2:	693b      	ldr	r3, [r7, #16]
 80075f4:	0c1b      	lsrs	r3, r3, #16
 80075f6:	b29b      	uxth	r3, r3
 80075f8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80075fc:	b29a      	uxth	r2, r3
 80075fe:	697b      	ldr	r3, [r7, #20]
 8007600:	b29b      	uxth	r3, r3
 8007602:	b2db      	uxtb	r3, r3
 8007604:	b29b      	uxth	r3, r3
 8007606:	4313      	orrs	r3, r2
 8007608:	b29a      	uxth	r2, r3
 800760a:	683b      	ldr	r3, [r7, #0]
 800760c:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800760e:	697b      	ldr	r3, [r7, #20]
 8007610:	0a9b      	lsrs	r3, r3, #10
 8007612:	b2db      	uxtb	r3, r3
 8007614:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007618:	b2da      	uxtb	r2, r3
 800761a:	683b      	ldr	r3, [r7, #0]
 800761c:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800761e:	697b      	ldr	r3, [r7, #20]
 8007620:	0a1b      	lsrs	r3, r3, #8
 8007622:	b2db      	uxtb	r3, r3
 8007624:	f003 0303 	and.w	r3, r3, #3
 8007628:	b2da      	uxtb	r2, r3
 800762a:	683b      	ldr	r3, [r7, #0]
 800762c:	73da      	strb	r2, [r3, #15]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800762e:	697b      	ldr	r3, [r7, #20]
 8007630:	091b      	lsrs	r3, r3, #4
 8007632:	b2db      	uxtb	r3, r3
 8007634:	f003 030f 	and.w	r3, r3, #15
 8007638:	b2da      	uxtb	r2, r3
 800763a:	683b      	ldr	r3, [r7, #0]
 800763c:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800763e:	697b      	ldr	r3, [r7, #20]
 8007640:	b2db      	uxtb	r3, r3
 8007642:	f003 030f 	and.w	r3, r3, #15
 8007646:	b2da      	uxtb	r2, r3
 8007648:	683b      	ldr	r3, [r7, #0]
 800764a:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800764c:	69bb      	ldr	r3, [r7, #24]
 800764e:	0e1b      	lsrs	r3, r3, #24
 8007650:	b2da      	uxtb	r2, r3
 8007652:	683b      	ldr	r3, [r7, #0]
 8007654:	749a      	strb	r2, [r3, #18]
#endif
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800765e:	4618      	mov	r0, r3
 8007660:	f001 fa2c 	bl	8008abc <SDMMC_CmdBlockLength>
 8007664:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 8007666:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007668:	2b00      	cmp	r3, #0
 800766a:	d00d      	beq.n	8007688 <HAL_SD_GetCardStatus+0x15c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	4a08      	ldr	r2, [pc, #32]	; (8007694 <HAL_SD_GetCardStatus+0x168>)
 8007672:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007678:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	2201      	movs	r2, #1
 800767e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8007682:	2301      	movs	r3, #1
 8007684:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }

  return status;
 8007688:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800768c:	4618      	mov	r0, r3
 800768e:	3750      	adds	r7, #80	; 0x50
 8007690:	46bd      	mov	sp, r7
 8007692:	bd80      	pop	{r7, pc}
 8007694:	1fe00fff 	.word	0x1fe00fff

08007698 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8007698:	b480      	push	{r7}
 800769a:	b083      	sub	sp, #12
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
 80076a0:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80076a6:	683b      	ldr	r3, [r7, #0]
 80076a8:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80076ae:	683b      	ldr	r3, [r7, #0]
 80076b0:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80076b6:	683b      	ldr	r3, [r7, #0]
 80076b8:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80076be:	683b      	ldr	r3, [r7, #0]
 80076c0:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80076c6:	683b      	ldr	r3, [r7, #0]
 80076c8:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80076ce:	683b      	ldr	r3, [r7, #0]
 80076d0:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80076d6:	683b      	ldr	r3, [r7, #0]
 80076d8:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80076de:	683b      	ldr	r3, [r7, #0]
 80076e0:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80076e2:	2300      	movs	r3, #0
}
 80076e4:	4618      	mov	r0, r3
 80076e6:	370c      	adds	r7, #12
 80076e8:	46bd      	mov	sp, r7
 80076ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ee:	4770      	bx	lr

080076f0 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80076f0:	b5b0      	push	{r4, r5, r7, lr}
 80076f2:	b090      	sub	sp, #64	; 0x40
 80076f4:	af04      	add	r7, sp, #16
 80076f6:	6078      	str	r0, [r7, #4]
 80076f8:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 80076fa:	2300      	movs	r3, #0
 80076fc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	2203      	movs	r2, #3
 8007704:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800770c:	2b03      	cmp	r3, #3
 800770e:	d02e      	beq.n	800776e <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8007710:	683b      	ldr	r3, [r7, #0]
 8007712:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007716:	d106      	bne.n	8007726 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800771c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	639a      	str	r2, [r3, #56]	; 0x38
 8007724:	e029      	b.n	800777a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8007726:	683b      	ldr	r3, [r7, #0]
 8007728:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800772c:	d10a      	bne.n	8007744 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800772e:	6878      	ldr	r0, [r7, #4]
 8007730:	f000 fbd6 	bl	8007ee0 <SD_WideBus_Enable>
 8007734:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800773a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800773c:	431a      	orrs	r2, r3
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	639a      	str	r2, [r3, #56]	; 0x38
 8007742:	e01a      	b.n	800777a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8007744:	683b      	ldr	r3, [r7, #0]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d10a      	bne.n	8007760 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800774a:	6878      	ldr	r0, [r7, #4]
 800774c:	f000 fc13 	bl	8007f76 <SD_WideBus_Disable>
 8007750:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007758:	431a      	orrs	r2, r3
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	639a      	str	r2, [r3, #56]	; 0x38
 800775e:	e00c      	b.n	800777a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007764:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	639a      	str	r2, [r3, #56]	; 0x38
 800776c:	e005      	b.n	800777a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007772:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800777e:	2b00      	cmp	r3, #0
 8007780:	d007      	beq.n	8007792 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	4a60      	ldr	r2, [pc, #384]	; (8007908 <HAL_SD_ConfigWideBusOperation+0x218>)
 8007788:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800778a:	2301      	movs	r3, #1
 800778c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8007790:	e097      	b.n	80078c2 <HAL_SD_ConfigWideBusOperation+0x1d2>
  }
  else
  {
    sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 8007792:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8007796:	f7fd fed3 	bl	8005540 <HAL_RCCEx_GetPeriphCLKFreq>
 800779a:	6278      	str	r0, [r7, #36]	; 0x24
    if (sdmmc_clk != 0U)
 800779c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800779e:	2b00      	cmp	r3, #0
 80077a0:	f000 8086 	beq.w	80078b0 <HAL_SD_ConfigWideBusOperation+0x1c0>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	685b      	ldr	r3, [r3, #4]
 80077a8:	60fb      	str	r3, [r7, #12]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
      Init.ClockBypass         = hsd->Init.ClockBypass;
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	689b      	ldr	r3, [r3, #8]
 80077ae:	613b      	str	r3, [r7, #16]
      Init.BusWide             = WideMode;
 80077b0:	683b      	ldr	r3, [r7, #0]
 80077b2:	617b      	str	r3, [r7, #20]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	691b      	ldr	r3, [r3, #16]
 80077b8:	61bb      	str	r3, [r7, #24]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	695a      	ldr	r2, [r3, #20]
 80077be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077c0:	4952      	ldr	r1, [pc, #328]	; (800790c <HAL_SD_ConfigWideBusOperation+0x21c>)
 80077c2:	fba1 1303 	umull	r1, r3, r1, r3
 80077c6:	0e1b      	lsrs	r3, r3, #24
 80077c8:	429a      	cmp	r2, r3
 80077ca:	d303      	bcc.n	80077d4 <HAL_SD_ConfigWideBusOperation+0xe4>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	695b      	ldr	r3, [r3, #20]
 80077d0:	61fb      	str	r3, [r7, #28]
 80077d2:	e05a      	b.n	800788a <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80077d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80077dc:	d103      	bne.n	80077e6 <HAL_SD_ConfigWideBusOperation+0xf6>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	695b      	ldr	r3, [r3, #20]
 80077e2:	61fb      	str	r3, [r7, #28]
 80077e4:	e051      	b.n	800788a <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80077ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80077ee:	d126      	bne.n	800783e <HAL_SD_ConfigWideBusOperation+0x14e>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	695b      	ldr	r3, [r3, #20]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d10e      	bne.n	8007816 <HAL_SD_ConfigWideBusOperation+0x126>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 80077f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077fa:	4a45      	ldr	r2, [pc, #276]	; (8007910 <HAL_SD_ConfigWideBusOperation+0x220>)
 80077fc:	4293      	cmp	r3, r2
 80077fe:	d906      	bls.n	800780e <HAL_SD_ConfigWideBusOperation+0x11e>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8007800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007802:	4a42      	ldr	r2, [pc, #264]	; (800790c <HAL_SD_ConfigWideBusOperation+0x21c>)
 8007804:	fba2 2303 	umull	r2, r3, r2, r3
 8007808:	0e5b      	lsrs	r3, r3, #25
 800780a:	61fb      	str	r3, [r7, #28]
 800780c:	e03d      	b.n	800788a <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	695b      	ldr	r3, [r3, #20]
 8007812:	61fb      	str	r3, [r7, #28]
 8007814:	e039      	b.n	800788a <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	695b      	ldr	r3, [r3, #20]
 800781a:	005b      	lsls	r3, r3, #1
 800781c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800781e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007822:	4a3b      	ldr	r2, [pc, #236]	; (8007910 <HAL_SD_ConfigWideBusOperation+0x220>)
 8007824:	4293      	cmp	r3, r2
 8007826:	d906      	bls.n	8007836 <HAL_SD_ConfigWideBusOperation+0x146>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8007828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800782a:	4a38      	ldr	r2, [pc, #224]	; (800790c <HAL_SD_ConfigWideBusOperation+0x21c>)
 800782c:	fba2 2303 	umull	r2, r3, r2, r3
 8007830:	0e5b      	lsrs	r3, r3, #25
 8007832:	61fb      	str	r3, [r7, #28]
 8007834:	e029      	b.n	800788a <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	695b      	ldr	r3, [r3, #20]
 800783a:	61fb      	str	r3, [r7, #28]
 800783c:	e025      	b.n	800788a <HAL_SD_ConfigWideBusOperation+0x19a>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	695b      	ldr	r3, [r3, #20]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d10e      	bne.n	8007864 <HAL_SD_ConfigWideBusOperation+0x174>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 8007846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007848:	4a32      	ldr	r2, [pc, #200]	; (8007914 <HAL_SD_ConfigWideBusOperation+0x224>)
 800784a:	4293      	cmp	r3, r2
 800784c:	d906      	bls.n	800785c <HAL_SD_ConfigWideBusOperation+0x16c>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800784e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007850:	4a2e      	ldr	r2, [pc, #184]	; (800790c <HAL_SD_ConfigWideBusOperation+0x21c>)
 8007852:	fba2 2303 	umull	r2, r3, r2, r3
 8007856:	0e1b      	lsrs	r3, r3, #24
 8007858:	61fb      	str	r3, [r7, #28]
 800785a:	e016      	b.n	800788a <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	695b      	ldr	r3, [r3, #20]
 8007860:	61fb      	str	r3, [r7, #28]
 8007862:	e012      	b.n	800788a <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	695b      	ldr	r3, [r3, #20]
 8007868:	005b      	lsls	r3, r3, #1
 800786a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800786c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007870:	4a28      	ldr	r2, [pc, #160]	; (8007914 <HAL_SD_ConfigWideBusOperation+0x224>)
 8007872:	4293      	cmp	r3, r2
 8007874:	d906      	bls.n	8007884 <HAL_SD_ConfigWideBusOperation+0x194>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8007876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007878:	4a24      	ldr	r2, [pc, #144]	; (800790c <HAL_SD_ConfigWideBusOperation+0x21c>)
 800787a:	fba2 2303 	umull	r2, r3, r2, r3
 800787e:	0e1b      	lsrs	r3, r3, #24
 8007880:	61fb      	str	r3, [r7, #28]
 8007882:	e002      	b.n	800788a <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	695b      	ldr	r3, [r3, #20]
 8007888:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      Init.Transceiver = hsd->Init.Transceiver;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	699b      	ldr	r3, [r3, #24]
 800788e:	623b      	str	r3, [r7, #32]
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
      }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

      (void)SDMMC_Init(hsd->Instance, Init);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681d      	ldr	r5, [r3, #0]
 8007894:	466c      	mov	r4, sp
 8007896:	f107 0318 	add.w	r3, r7, #24
 800789a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800789e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80078a2:	f107 030c 	add.w	r3, r7, #12
 80078a6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80078a8:	4628      	mov	r0, r5
 80078aa:	f001 f829 	bl	8008900 <SDMMC_Init>
 80078ae:	e008      	b.n	80078c2 <HAL_SD_ConfigWideBusOperation+0x1d2>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078b4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	639a      	str	r2, [r3, #56]	; 0x38
      status = HAL_ERROR;
 80078bc:	2301      	movs	r3, #1
 80078be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80078ca:	4618      	mov	r0, r3
 80078cc:	f001 f8f6 	bl	8008abc <SDMMC_CmdBlockLength>
 80078d0:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80078d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d00c      	beq.n	80078f2 <HAL_SD_ConfigWideBusOperation+0x202>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	4a0a      	ldr	r2, [pc, #40]	; (8007908 <HAL_SD_ConfigWideBusOperation+0x218>)
 80078de:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80078e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078e6:	431a      	orrs	r2, r3
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 80078ec:	2301      	movs	r3, #1
 80078ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	2201      	movs	r2, #1
 80078f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 80078fa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80078fe:	4618      	mov	r0, r3
 8007900:	3730      	adds	r7, #48	; 0x30
 8007902:	46bd      	mov	sp, r7
 8007904:	bdb0      	pop	{r4, r5, r7, pc}
 8007906:	bf00      	nop
 8007908:	1fe00fff 	.word	0x1fe00fff
 800790c:	55e63b89 	.word	0x55e63b89
 8007910:	02faf080 	.word	0x02faf080
 8007914:	017d7840 	.word	0x017d7840

08007918 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8007918:	b580      	push	{r7, lr}
 800791a:	b086      	sub	sp, #24
 800791c:	af00      	add	r7, sp, #0
 800791e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8007920:	2300      	movs	r3, #0
 8007922:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8007924:	f107 030c 	add.w	r3, r7, #12
 8007928:	4619      	mov	r1, r3
 800792a:	6878      	ldr	r0, [r7, #4]
 800792c:	f000 fab0 	bl	8007e90 <SD_SendStatus>
 8007930:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007932:	697b      	ldr	r3, [r7, #20]
 8007934:	2b00      	cmp	r3, #0
 8007936:	d005      	beq.n	8007944 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800793c:	697b      	ldr	r3, [r7, #20]
 800793e:	431a      	orrs	r2, r3
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	0a5b      	lsrs	r3, r3, #9
 8007948:	f003 030f 	and.w	r3, r3, #15
 800794c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800794e:	693b      	ldr	r3, [r7, #16]
}
 8007950:	4618      	mov	r0, r3
 8007952:	3718      	adds	r7, #24
 8007954:	46bd      	mov	sp, r7
 8007956:	bd80      	pop	{r7, pc}

08007958 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007958:	b5b0      	push	{r4, r5, r7, lr}
 800795a:	b090      	sub	sp, #64	; 0x40
 800795c:	af00      	add	r7, sp, #0
 800795e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8007960:	2301      	movs	r3, #1
 8007962:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	4618      	mov	r0, r3
 800796a:	f001 f823 	bl	80089b4 <SDMMC_GetPowerState>
 800796e:	4603      	mov	r3, r0
 8007970:	2b00      	cmp	r3, #0
 8007972:	d102      	bne.n	800797a <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007974:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8007978:	e0a9      	b.n	8007ace <SD_InitCard+0x176>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800797e:	2b03      	cmp	r3, #3
 8007980:	d02e      	beq.n	80079e0 <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	4618      	mov	r0, r3
 8007988:	f001 fa68 	bl	8008e5c <SDMMC_CmdSendCID>
 800798c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800798e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007990:	2b00      	cmp	r3, #0
 8007992:	d001      	beq.n	8007998 <SD_InitCard+0x40>
    {
      return errorstate;
 8007994:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007996:	e09a      	b.n	8007ace <SD_InitCard+0x176>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	2100      	movs	r1, #0
 800799e:	4618      	mov	r0, r3
 80079a0:	f001 f84d 	bl	8008a3e <SDMMC_GetResponse>
 80079a4:	4602      	mov	r2, r0
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	2104      	movs	r1, #4
 80079b0:	4618      	mov	r0, r3
 80079b2:	f001 f844 	bl	8008a3e <SDMMC_GetResponse>
 80079b6:	4602      	mov	r2, r0
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	2108      	movs	r1, #8
 80079c2:	4618      	mov	r0, r3
 80079c4:	f001 f83b 	bl	8008a3e <SDMMC_GetResponse>
 80079c8:	4602      	mov	r2, r0
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	210c      	movs	r1, #12
 80079d4:	4618      	mov	r0, r3
 80079d6:	f001 f832 	bl	8008a3e <SDMMC_GetResponse>
 80079da:	4602      	mov	r2, r0
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	67da      	str	r2, [r3, #124]	; 0x7c
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079e4:	2b03      	cmp	r3, #3
 80079e6:	d00d      	beq.n	8007a04 <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	f107 020e 	add.w	r2, r7, #14
 80079f0:	4611      	mov	r1, r2
 80079f2:	4618      	mov	r0, r3
 80079f4:	f001 fa71 	bl	8008eda <SDMMC_CmdSetRelAdd>
 80079f8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80079fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d001      	beq.n	8007a04 <SD_InitCard+0xac>
    {
      return errorstate;
 8007a00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a02:	e064      	b.n	8007ace <SD_InitCard+0x176>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a08:	2b03      	cmp	r3, #3
 8007a0a:	d036      	beq.n	8007a7a <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8007a0c:	89fb      	ldrh	r3, [r7, #14]
 8007a0e:	461a      	mov	r2, r3
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	649a      	str	r2, [r3, #72]	; 0x48

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681a      	ldr	r2, [r3, #0]
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a1c:	041b      	lsls	r3, r3, #16
 8007a1e:	4619      	mov	r1, r3
 8007a20:	4610      	mov	r0, r2
 8007a22:	f001 fa3a 	bl	8008e9a <SDMMC_CmdSendCSD>
 8007a26:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007a28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d001      	beq.n	8007a32 <SD_InitCard+0xda>
    {
      return errorstate;
 8007a2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a30:	e04d      	b.n	8007ace <SD_InitCard+0x176>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	2100      	movs	r1, #0
 8007a38:	4618      	mov	r0, r3
 8007a3a:	f001 f800 	bl	8008a3e <SDMMC_GetResponse>
 8007a3e:	4602      	mov	r2, r0
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	2104      	movs	r1, #4
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	f000 fff7 	bl	8008a3e <SDMMC_GetResponse>
 8007a50:	4602      	mov	r2, r0
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	2108      	movs	r1, #8
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	f000 ffee 	bl	8008a3e <SDMMC_GetResponse>
 8007a62:	4602      	mov	r2, r0
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	210c      	movs	r1, #12
 8007a6e:	4618      	mov	r0, r3
 8007a70:	f000 ffe5 	bl	8008a3e <SDMMC_GetResponse>
 8007a74:	4602      	mov	r2, r0
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	66da      	str	r2, [r3, #108]	; 0x6c
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	2104      	movs	r1, #4
 8007a80:	4618      	mov	r0, r3
 8007a82:	f000 ffdc 	bl	8008a3e <SDMMC_GetResponse>
 8007a86:	4603      	mov	r3, r0
 8007a88:	0d1a      	lsrs	r2, r3, #20
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8007a8e:	f107 0310 	add.w	r3, r7, #16
 8007a92:	4619      	mov	r1, r3
 8007a94:	6878      	ldr	r0, [r7, #4]
 8007a96:	f7ff fba5 	bl	80071e4 <HAL_SD_GetCardCSD>
 8007a9a:	4603      	mov	r3, r0
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d002      	beq.n	8007aa6 <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007aa0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007aa4:	e013      	b.n	8007ace <SD_InitCard+0x176>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	6819      	ldr	r1, [r3, #0]
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007aae:	041b      	lsls	r3, r3, #16
 8007ab0:	2200      	movs	r2, #0
 8007ab2:	461c      	mov	r4, r3
 8007ab4:	4615      	mov	r5, r2
 8007ab6:	4622      	mov	r2, r4
 8007ab8:	462b      	mov	r3, r5
 8007aba:	4608      	mov	r0, r1
 8007abc:	f001 f8e4 	bl	8008c88 <SDMMC_CmdSelDesel>
 8007ac0:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8007ac2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d001      	beq.n	8007acc <SD_InitCard+0x174>
  {
    return errorstate;
 8007ac8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007aca:	e000      	b.n	8007ace <SD_InitCard+0x176>
  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8007acc:	2300      	movs	r3, #0
}
 8007ace:	4618      	mov	r0, r3
 8007ad0:	3740      	adds	r7, #64	; 0x40
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	bdb0      	pop	{r4, r5, r7, pc}
	...

08007ad8 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b088      	sub	sp, #32
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007ae0:	2300      	movs	r3, #0
 8007ae2:	60fb      	str	r3, [r7, #12]
  uint32_t response = 0U, validvoltage = 0U;
 8007ae4:	2300      	movs	r3, #0
 8007ae6:	61fb      	str	r3, [r7, #28]
 8007ae8:	2300      	movs	r3, #0
 8007aea:	61bb      	str	r3, [r7, #24]
  uint32_t errorstate;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t tickstart = HAL_GetTick();
 8007aec:	f7f9 fc30 	bl	8001350 <HAL_GetTick>
 8007af0:	6178      	str	r0, [r7, #20]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	4618      	mov	r0, r3
 8007af8:	f001 f8ea 	bl	8008cd0 <SDMMC_CmdGoIdleState>
 8007afc:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007afe:	693b      	ldr	r3, [r7, #16]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d001      	beq.n	8007b08 <SD_PowerON+0x30>
  {
    return errorstate;
 8007b04:	693b      	ldr	r3, [r7, #16]
 8007b06:	e0ed      	b.n	8007ce4 <SD_PowerON+0x20c>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	f001 f8fd 	bl	8008d0c <SDMMC_CmdOperCond>
 8007b12:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007b14:	693b      	ldr	r3, [r7, #16]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d00d      	beq.n	8007b36 <SD_PowerON+0x5e>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	2200      	movs	r2, #0
 8007b1e:	641a      	str	r2, [r3, #64]	; 0x40
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	4618      	mov	r0, r3
 8007b26:	f001 f8d3 	bl	8008cd0 <SDMMC_CmdGoIdleState>
 8007b2a:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007b2c:	693b      	ldr	r3, [r7, #16]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d004      	beq.n	8007b3c <SD_PowerON+0x64>
    {
      return errorstate;
 8007b32:	693b      	ldr	r3, [r7, #16]
 8007b34:	e0d6      	b.n	8007ce4 <SD_PowerON+0x20c>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	2201      	movs	r2, #1
 8007b3a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b40:	2b01      	cmp	r3, #1
 8007b42:	d137      	bne.n	8007bb4 <SD_PowerON+0xdc>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	2100      	movs	r1, #0
 8007b4a:	4618      	mov	r0, r3
 8007b4c:	f001 f8fe 	bl	8008d4c <SDMMC_CmdAppCommand>
 8007b50:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007b52:	693b      	ldr	r3, [r7, #16]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d02d      	beq.n	8007bb4 <SD_PowerON+0xdc>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007b58:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007b5c:	e0c2      	b.n	8007ce4 <SD_PowerON+0x20c>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	2100      	movs	r1, #0
 8007b64:	4618      	mov	r0, r3
 8007b66:	f001 f8f1 	bl	8008d4c <SDMMC_CmdAppCommand>
 8007b6a:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007b6c:	693b      	ldr	r3, [r7, #16]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d001      	beq.n	8007b76 <SD_PowerON+0x9e>
    {
      return errorstate;
 8007b72:	693b      	ldr	r3, [r7, #16]
 8007b74:	e0b6      	b.n	8007ce4 <SD_PowerON+0x20c>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	495c      	ldr	r1, [pc, #368]	; (8007cec <SD_PowerON+0x214>)
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	f001 f908 	bl	8008d92 <SDMMC_CmdAppOperCommand>
 8007b82:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007b84:	693b      	ldr	r3, [r7, #16]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d002      	beq.n	8007b90 <SD_PowerON+0xb8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007b8a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007b8e:	e0a9      	b.n	8007ce4 <SD_PowerON+0x20c>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	2100      	movs	r1, #0
 8007b96:	4618      	mov	r0, r3
 8007b98:	f000 ff51 	bl	8008a3e <SDMMC_GetResponse>
 8007b9c:	61f8      	str	r0, [r7, #28]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8007b9e:	69fb      	ldr	r3, [r7, #28]
 8007ba0:	0fdb      	lsrs	r3, r3, #31
 8007ba2:	2b01      	cmp	r3, #1
 8007ba4:	d101      	bne.n	8007baa <SD_PowerON+0xd2>
 8007ba6:	2301      	movs	r3, #1
 8007ba8:	e000      	b.n	8007bac <SD_PowerON+0xd4>
 8007baa:	2300      	movs	r3, #0
 8007bac:	61bb      	str	r3, [r7, #24]

    count++;
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	3301      	adds	r3, #1
 8007bb2:	60fb      	str	r3, [r7, #12]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8007bba:	4293      	cmp	r3, r2
 8007bbc:	d802      	bhi.n	8007bc4 <SD_PowerON+0xec>
 8007bbe:	69bb      	ldr	r3, [r7, #24]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d0cc      	beq.n	8007b5e <SD_PowerON+0x86>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8007bca:	4293      	cmp	r3, r2
 8007bcc:	d902      	bls.n	8007bd4 <SD_PowerON+0xfc>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8007bce:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007bd2:	e087      	b.n	8007ce4 <SD_PowerON+0x20c>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8007bd4:	69fb      	ldr	r3, [r7, #28]
 8007bd6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d07e      	beq.n	8007cdc <SD_PowerON+0x204>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	2201      	movs	r2, #1
 8007be2:	63da      	str	r2, [r3, #60]	; 0x3c
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	699b      	ldr	r3, [r3, #24]
 8007be8:	2b01      	cmp	r3, #1
 8007bea:	d17a      	bne.n	8007ce2 <SD_PowerON+0x20a>
    {
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 8007bec:	69fb      	ldr	r3, [r7, #28]
 8007bee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d075      	beq.n	8007ce2 <SD_PowerON+0x20a>
      {
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007bfc:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Start switching procedue */
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	681a      	ldr	r2, [r3, #0]
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	f042 0208 	orr.w	r2, r2, #8
 8007c0c:	601a      	str	r2, [r3, #0]

        /* Send CMD11 to switch 1.8V mode */
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	4618      	mov	r0, r3
 8007c14:	f001 f9c8 	bl	8008fa8 <SDMMC_CmdVoltageSwitch>
 8007c18:	6138      	str	r0, [r7, #16]
        if(errorstate != HAL_SD_ERROR_NONE)
 8007c1a:	693b      	ldr	r3, [r7, #16]
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d00c      	beq.n	8007c3a <SD_PowerON+0x162>
        {
          return errorstate;
 8007c20:	693b      	ldr	r3, [r7, #16]
 8007c22:	e05f      	b.n	8007ce4 <SD_PowerON+0x20c>
        }

        /* Check to CKSTOP */
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
        {
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007c24:	f7f9 fb94 	bl	8001350 <HAL_GetTick>
 8007c28:	4602      	mov	r2, r0
 8007c2a:	697b      	ldr	r3, [r7, #20]
 8007c2c:	1ad3      	subs	r3, r2, r3
 8007c2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c32:	d102      	bne.n	8007c3a <SD_PowerON+0x162>
          {
            return HAL_SD_ERROR_TIMEOUT;
 8007c34:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007c38:	e054      	b.n	8007ce4 <SD_PowerON+0x20c>
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c40:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007c44:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007c48:	d1ec      	bne.n	8007c24 <SD_PowerON+0x14c>
          }
        }

        /* Clear CKSTOP Flag */
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8007c52:	639a      	str	r2, [r3, #56]	; 0x38

        /* Check to BusyD0 */
        if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007c5e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007c62:	d002      	beq.n	8007c6a <SD_PowerON+0x192>
        {
          /* Error when activate Voltage Switch in SDMMC Peripheral */
          return SDMMC_ERROR_UNSUPPORTED_FEATURE;
 8007c64:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007c68:	e03c      	b.n	8007ce4 <SD_PowerON+0x20c>
        {
          /* Enable Transceiver Switch PIN */
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->DriveTransceiver_1_8V_Callback(SET);
#else
          HAL_SDEx_DriveTransceiver_1_8V_Callback(SET);
 8007c6a:	2001      	movs	r0, #1
 8007c6c:	f000 fb44 	bl	80082f8 <HAL_SDEx_DriveTransceiver_1_8V_Callback>
#endif

          /* Switch ready */
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	681a      	ldr	r2, [r3, #0]
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	f042 0204 	orr.w	r2, r2, #4
 8007c7e:	601a      	str	r2, [r3, #0]

          /* Check VSWEND Flag */
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 8007c80:	e00a      	b.n	8007c98 <SD_PowerON+0x1c0>
          {
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007c82:	f7f9 fb65 	bl	8001350 <HAL_GetTick>
 8007c86:	4602      	mov	r2, r0
 8007c88:	697b      	ldr	r3, [r7, #20]
 8007c8a:	1ad3      	subs	r3, r2, r3
 8007c8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c90:	d102      	bne.n	8007c98 <SD_PowerON+0x1c0>
            {
              return HAL_SD_ERROR_TIMEOUT;
 8007c92:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007c96:	e025      	b.n	8007ce4 <SD_PowerON+0x20c>
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ca2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007ca6:	d1ec      	bne.n	8007c82 <SD_PowerON+0x1aa>
            }
          }

          /* Clear VSWEND Flag */
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007cb0:	639a      	str	r2, [r3, #56]	; 0x38

          /* Check BusyD0 status */
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cb8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007cbc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007cc0:	d102      	bne.n	8007cc8 <SD_PowerON+0x1f0>
          {
            /* Error when enabling 1.8V mode */
            return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8007cc2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007cc6:	e00d      	b.n	8007ce4 <SD_PowerON+0x20c>
          }
          /* Switch to 1.8V OK */

          /* Disable VSWITCH FLAG from SDMMC Peripheral */
          hsd->Instance->POWER = 0x13U;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	2213      	movs	r2, #19
 8007cce:	601a      	str	r2, [r3, #0]

          /* Clean Status flags */
          hsd->Instance->ICR = 0xFFFFFFFFU;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	f04f 32ff 	mov.w	r2, #4294967295
 8007cd8:	639a      	str	r2, [r3, #56]	; 0x38
 8007cda:	e002      	b.n	8007ce2 <SD_PowerON+0x20a>
    }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	2200      	movs	r2, #0
 8007ce0:	63da      	str	r2, [r3, #60]	; 0x3c
  }


  return HAL_SD_ERROR_NONE;
 8007ce2:	2300      	movs	r3, #0
}
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	3720      	adds	r7, #32
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	bd80      	pop	{r7, pc}
 8007cec:	c1100000 	.word	0xc1100000

08007cf0 <SD_SendSDStatus>:
  * @param  pSDstatus Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b08c      	sub	sp, #48	; 0x30
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
 8007cf8:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8007cfa:	f7f9 fb29 	bl	8001350 <HAL_GetTick>
 8007cfe:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8007d00:	683b      	ldr	r3, [r7, #0]
 8007d02:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	2100      	movs	r1, #0
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	f000 fe97 	bl	8008a3e <SDMMC_GetResponse>
 8007d10:	4603      	mov	r3, r0
 8007d12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d16:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007d1a:	d102      	bne.n	8007d22 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007d1c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007d20:	e0b0      	b.n	8007e84 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	2140      	movs	r1, #64	; 0x40
 8007d28:	4618      	mov	r0, r3
 8007d2a:	f000 fec7 	bl	8008abc <SDMMC_CmdBlockLength>
 8007d2e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007d30:	6a3b      	ldr	r3, [r7, #32]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d005      	beq.n	8007d42 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8007d3e:	6a3b      	ldr	r3, [r7, #32]
 8007d40:	e0a0      	b.n	8007e84 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681a      	ldr	r2, [r3, #0]
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d4a:	041b      	lsls	r3, r3, #16
 8007d4c:	4619      	mov	r1, r3
 8007d4e:	4610      	mov	r0, r2
 8007d50:	f000 fffc 	bl	8008d4c <SDMMC_CmdAppCommand>
 8007d54:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007d56:	6a3b      	ldr	r3, [r7, #32]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d005      	beq.n	8007d68 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8007d64:	6a3b      	ldr	r3, [r7, #32]
 8007d66:	e08d      	b.n	8007e84 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007d68:	f04f 33ff 	mov.w	r3, #4294967295
 8007d6c:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 8007d6e:	2340      	movs	r3, #64	; 0x40
 8007d70:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8007d72:	2360      	movs	r3, #96	; 0x60
 8007d74:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8007d76:	2302      	movs	r3, #2
 8007d78:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8007d7e:	2301      	movs	r3, #1
 8007d80:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	f107 0208 	add.w	r2, r7, #8
 8007d8a:	4611      	mov	r1, r2
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	f000 fe69 	bl	8008a64 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	4618      	mov	r0, r3
 8007d98:	f001 f8e4 	bl	8008f64 <SDMMC_CmdStatusRegister>
 8007d9c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007d9e:	6a3b      	ldr	r3, [r7, #32]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d02b      	beq.n	8007dfc <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8007dac:	6a3b      	ldr	r3, [r7, #32]
 8007dae:	e069      	b.n	8007e84 <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
#else
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007db6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d013      	beq.n	8007de6 <SD_SendSDStatus+0xf6>
    {
      for(count = 0U; count < 8U; count++)
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007dc2:	e00d      	b.n	8007de0 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	4618      	mov	r0, r3
 8007dca:	f000 fdc3 	bl	8008954 <SDMMC_ReadFIFO>
 8007dce:	4602      	mov	r2, r0
 8007dd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dd2:	601a      	str	r2, [r3, #0]
        pData++;
 8007dd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dd6:	3304      	adds	r3, #4
 8007dd8:	62bb      	str	r3, [r7, #40]	; 0x28
      for(count = 0U; count < 8U; count++)
 8007dda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ddc:	3301      	adds	r3, #1
 8007dde:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007de0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007de2:	2b07      	cmp	r3, #7
 8007de4:	d9ee      	bls.n	8007dc4 <SD_SendSDStatus+0xd4>
      }
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007de6:	f7f9 fab3 	bl	8001350 <HAL_GetTick>
 8007dea:	4602      	mov	r2, r0
 8007dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dee:	1ad3      	subs	r3, r2, r3
 8007df0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007df4:	d102      	bne.n	8007dfc <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8007df6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007dfa:	e043      	b.n	8007e84 <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e02:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d0d2      	beq.n	8007db0 <SD_SendSDStatus+0xc0>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e10:	f003 0308 	and.w	r3, r3, #8
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d001      	beq.n	8007e1c <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8007e18:	2308      	movs	r3, #8
 8007e1a:	e033      	b.n	8007e84 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e22:	f003 0302 	and.w	r3, r3, #2
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d001      	beq.n	8007e2e <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8007e2a:	2302      	movs	r3, #2
 8007e2c:	e02a      	b.n	8007e84 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e34:	f003 0320 	and.w	r3, r3, #32
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d017      	beq.n	8007e6c <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8007e3c:	2320      	movs	r3, #32
 8007e3e:	e021      	b.n	8007e84 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
#else
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)))
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	4618      	mov	r0, r3
 8007e46:	f000 fd85 	bl	8008954 <SDMMC_ReadFIFO>
 8007e4a:	4602      	mov	r2, r0
 8007e4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e4e:	601a      	str	r2, [r3, #0]
    pData++;
 8007e50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e52:	3304      	adds	r3, #4
 8007e54:	62bb      	str	r3, [r7, #40]	; 0x28

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007e56:	f7f9 fa7b 	bl	8001350 <HAL_GetTick>
 8007e5a:	4602      	mov	r2, r0
 8007e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e5e:	1ad3      	subs	r3, r2, r3
 8007e60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e64:	d102      	bne.n	8007e6c <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8007e66:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007e6a:	e00b      	b.n	8007e84 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e72:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d1e2      	bne.n	8007e40 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	4a03      	ldr	r2, [pc, #12]	; (8007e8c <SD_SendSDStatus+0x19c>)
 8007e80:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 8007e82:	2300      	movs	r3, #0
}
 8007e84:	4618      	mov	r0, r3
 8007e86:	3730      	adds	r7, #48	; 0x30
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	bd80      	pop	{r7, pc}
 8007e8c:	18000f3a 	.word	0x18000f3a

08007e90 <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8007e90:	b580      	push	{r7, lr}
 8007e92:	b084      	sub	sp, #16
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6078      	str	r0, [r7, #4]
 8007e98:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8007e9a:	683b      	ldr	r3, [r7, #0]
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d102      	bne.n	8007ea6 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8007ea0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007ea4:	e018      	b.n	8007ed8 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681a      	ldr	r2, [r3, #0]
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007eae:	041b      	lsls	r3, r3, #16
 8007eb0:	4619      	mov	r1, r3
 8007eb2:	4610      	mov	r0, r2
 8007eb4:	f001 f833 	bl	8008f1e <SDMMC_CmdSendStatus>
 8007eb8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d001      	beq.n	8007ec4 <SD_SendStatus+0x34>
  {
    return errorstate;
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	e009      	b.n	8007ed8 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	2100      	movs	r1, #0
 8007eca:	4618      	mov	r0, r3
 8007ecc:	f000 fdb7 	bl	8008a3e <SDMMC_GetResponse>
 8007ed0:	4602      	mov	r2, r0
 8007ed2:	683b      	ldr	r3, [r7, #0]
 8007ed4:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8007ed6:	2300      	movs	r3, #0
}
 8007ed8:	4618      	mov	r0, r3
 8007eda:	3710      	adds	r7, #16
 8007edc:	46bd      	mov	sp, r7
 8007ede:	bd80      	pop	{r7, pc}

08007ee0 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8007ee0:	b580      	push	{r7, lr}
 8007ee2:	b086      	sub	sp, #24
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8007ee8:	2300      	movs	r3, #0
 8007eea:	60fb      	str	r3, [r7, #12]
 8007eec:	2300      	movs	r3, #0
 8007eee:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	2100      	movs	r1, #0
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	f000 fda1 	bl	8008a3e <SDMMC_GetResponse>
 8007efc:	4603      	mov	r3, r0
 8007efe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f02:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007f06:	d102      	bne.n	8007f0e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007f08:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007f0c:	e02f      	b.n	8007f6e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8007f0e:	f107 030c 	add.w	r3, r7, #12
 8007f12:	4619      	mov	r1, r3
 8007f14:	6878      	ldr	r0, [r7, #4]
 8007f16:	f000 f879 	bl	800800c <SD_FindSCR>
 8007f1a:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007f1c:	697b      	ldr	r3, [r7, #20]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d001      	beq.n	8007f26 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8007f22:	697b      	ldr	r3, [r7, #20]
 8007f24:	e023      	b.n	8007f6e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8007f26:	693b      	ldr	r3, [r7, #16]
 8007f28:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d01c      	beq.n	8007f6a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681a      	ldr	r2, [r3, #0]
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f38:	041b      	lsls	r3, r3, #16
 8007f3a:	4619      	mov	r1, r3
 8007f3c:	4610      	mov	r0, r2
 8007f3e:	f000 ff05 	bl	8008d4c <SDMMC_CmdAppCommand>
 8007f42:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007f44:	697b      	ldr	r3, [r7, #20]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d001      	beq.n	8007f4e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8007f4a:	697b      	ldr	r3, [r7, #20]
 8007f4c:	e00f      	b.n	8007f6e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	2102      	movs	r1, #2
 8007f54:	4618      	mov	r0, r3
 8007f56:	f000 ff3c 	bl	8008dd2 <SDMMC_CmdBusWidth>
 8007f5a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007f5c:	697b      	ldr	r3, [r7, #20]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d001      	beq.n	8007f66 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8007f62:	697b      	ldr	r3, [r7, #20]
 8007f64:	e003      	b.n	8007f6e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8007f66:	2300      	movs	r3, #0
 8007f68:	e001      	b.n	8007f6e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007f6a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8007f6e:	4618      	mov	r0, r3
 8007f70:	3718      	adds	r7, #24
 8007f72:	46bd      	mov	sp, r7
 8007f74:	bd80      	pop	{r7, pc}

08007f76 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8007f76:	b580      	push	{r7, lr}
 8007f78:	b086      	sub	sp, #24
 8007f7a:	af00      	add	r7, sp, #0
 8007f7c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8007f7e:	2300      	movs	r3, #0
 8007f80:	60fb      	str	r3, [r7, #12]
 8007f82:	2300      	movs	r3, #0
 8007f84:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	2100      	movs	r1, #0
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	f000 fd56 	bl	8008a3e <SDMMC_GetResponse>
 8007f92:	4603      	mov	r3, r0
 8007f94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f98:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007f9c:	d102      	bne.n	8007fa4 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007f9e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007fa2:	e02f      	b.n	8008004 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8007fa4:	f107 030c 	add.w	r3, r7, #12
 8007fa8:	4619      	mov	r1, r3
 8007faa:	6878      	ldr	r0, [r7, #4]
 8007fac:	f000 f82e 	bl	800800c <SD_FindSCR>
 8007fb0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007fb2:	697b      	ldr	r3, [r7, #20]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d001      	beq.n	8007fbc <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8007fb8:	697b      	ldr	r3, [r7, #20]
 8007fba:	e023      	b.n	8008004 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8007fbc:	693b      	ldr	r3, [r7, #16]
 8007fbe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d01c      	beq.n	8008000 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681a      	ldr	r2, [r3, #0]
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007fce:	041b      	lsls	r3, r3, #16
 8007fd0:	4619      	mov	r1, r3
 8007fd2:	4610      	mov	r0, r2
 8007fd4:	f000 feba 	bl	8008d4c <SDMMC_CmdAppCommand>
 8007fd8:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007fda:	697b      	ldr	r3, [r7, #20]
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d001      	beq.n	8007fe4 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8007fe0:	697b      	ldr	r3, [r7, #20]
 8007fe2:	e00f      	b.n	8008004 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	2100      	movs	r1, #0
 8007fea:	4618      	mov	r0, r3
 8007fec:	f000 fef1 	bl	8008dd2 <SDMMC_CmdBusWidth>
 8007ff0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007ff2:	697b      	ldr	r3, [r7, #20]
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d001      	beq.n	8007ffc <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8007ff8:	697b      	ldr	r3, [r7, #20]
 8007ffa:	e003      	b.n	8008004 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	e001      	b.n	8008004 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008000:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8008004:	4618      	mov	r0, r3
 8008006:	3718      	adds	r7, #24
 8008008:	46bd      	mov	sp, r7
 800800a:	bd80      	pop	{r7, pc}

0800800c <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800800c:	b580      	push	{r7, lr}
 800800e:	b08e      	sub	sp, #56	; 0x38
 8008010:	af00      	add	r7, sp, #0
 8008012:	6078      	str	r0, [r7, #4]
 8008014:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008016:	f7f9 f99b 	bl	8001350 <HAL_GetTick>
 800801a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800801c:	2300      	movs	r3, #0
 800801e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8008020:	2300      	movs	r3, #0
 8008022:	60bb      	str	r3, [r7, #8]
 8008024:	2300      	movs	r3, #0
 8008026:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8008028:	683b      	ldr	r3, [r7, #0]
 800802a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	2108      	movs	r1, #8
 8008032:	4618      	mov	r0, r3
 8008034:	f000 fd42 	bl	8008abc <SDMMC_CmdBlockLength>
 8008038:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800803a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800803c:	2b00      	cmp	r3, #0
 800803e:	d001      	beq.n	8008044 <SD_FindSCR+0x38>
  {
    return errorstate;
 8008040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008042:	e0ad      	b.n	80081a0 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681a      	ldr	r2, [r3, #0]
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800804c:	041b      	lsls	r3, r3, #16
 800804e:	4619      	mov	r1, r3
 8008050:	4610      	mov	r0, r2
 8008052:	f000 fe7b 	bl	8008d4c <SDMMC_CmdAppCommand>
 8008056:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800805a:	2b00      	cmp	r3, #0
 800805c:	d001      	beq.n	8008062 <SD_FindSCR+0x56>
  {
    return errorstate;
 800805e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008060:	e09e      	b.n	80081a0 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008062:	f04f 33ff 	mov.w	r3, #4294967295
 8008066:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8008068:	2308      	movs	r3, #8
 800806a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800806c:	2330      	movs	r3, #48	; 0x30
 800806e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008070:	2302      	movs	r3, #2
 8008072:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008074:	2300      	movs	r3, #0
 8008076:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8008078:	2301      	movs	r3, #1
 800807a:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	f107 0210 	add.w	r2, r7, #16
 8008084:	4611      	mov	r1, r2
 8008086:	4618      	mov	r0, r3
 8008088:	f000 fcec 	bl	8008a64 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	4618      	mov	r0, r3
 8008092:	f000 fec1 	bl	8008e18 <SDMMC_CmdSendSCR>
 8008096:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800809a:	2b00      	cmp	r3, #0
 800809c:	d027      	beq.n	80080ee <SD_FindSCR+0xe2>
  {
    return errorstate;
 800809e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080a0:	e07e      	b.n	80081a0 <SD_FindSCR+0x194>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
  {
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080a8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d113      	bne.n	80080d8 <SD_FindSCR+0xcc>
 80080b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d110      	bne.n	80080d8 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	4618      	mov	r0, r3
 80080bc:	f000 fc4a 	bl	8008954 <SDMMC_ReadFIFO>
 80080c0:	4603      	mov	r3, r0
 80080c2:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	4618      	mov	r0, r3
 80080ca:	f000 fc43 	bl	8008954 <SDMMC_ReadFIFO>
 80080ce:	4603      	mov	r3, r0
 80080d0:	60fb      	str	r3, [r7, #12]
      index++;
 80080d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080d4:	3301      	adds	r3, #1
 80080d6:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80080d8:	f7f9 f93a 	bl	8001350 <HAL_GetTick>
 80080dc:	4602      	mov	r2, r0
 80080de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080e0:	1ad3      	subs	r3, r2, r3
 80080e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080e6:	d102      	bne.n	80080ee <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80080e8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80080ec:	e058      	b.n	80081a0 <SD_FindSCR+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80080f4:	f240 532a 	movw	r3, #1322	; 0x52a
 80080f8:	4013      	ands	r3, r2
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d0d1      	beq.n	80080a2 <SD_FindSCR+0x96>
      return HAL_SD_ERROR_TIMEOUT;
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008104:	f003 0308 	and.w	r3, r3, #8
 8008108:	2b00      	cmp	r3, #0
 800810a:	d005      	beq.n	8008118 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	2208      	movs	r2, #8
 8008112:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8008114:	2308      	movs	r3, #8
 8008116:	e043      	b.n	80081a0 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800811e:	f003 0302 	and.w	r3, r3, #2
 8008122:	2b00      	cmp	r3, #0
 8008124:	d005      	beq.n	8008132 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	2202      	movs	r2, #2
 800812c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800812e:	2302      	movs	r3, #2
 8008130:	e036      	b.n	80081a0 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008138:	f003 0320 	and.w	r3, r3, #32
 800813c:	2b00      	cmp	r3, #0
 800813e:	d005      	beq.n	800814c <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	2220      	movs	r2, #32
 8008146:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8008148:	2320      	movs	r3, #32
 800814a:	e029      	b.n	80081a0 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	4a15      	ldr	r2, [pc, #84]	; (80081a8 <SD_FindSCR+0x19c>)
 8008152:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	061a      	lsls	r2, r3, #24
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	021b      	lsls	r3, r3, #8
 800815c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008160:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	0a1b      	lsrs	r3, r3, #8
 8008166:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800816a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	0e1b      	lsrs	r3, r3, #24
 8008170:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008174:	601a      	str	r2, [r3, #0]
    scr++;
 8008176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008178:	3304      	adds	r3, #4
 800817a:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800817c:	68bb      	ldr	r3, [r7, #8]
 800817e:	061a      	lsls	r2, r3, #24
 8008180:	68bb      	ldr	r3, [r7, #8]
 8008182:	021b      	lsls	r3, r3, #8
 8008184:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008188:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800818a:	68bb      	ldr	r3, [r7, #8]
 800818c:	0a1b      	lsrs	r3, r3, #8
 800818e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008192:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8008194:	68bb      	ldr	r3, [r7, #8]
 8008196:	0e1b      	lsrs	r3, r3, #24
 8008198:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800819a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800819c:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800819e:	2300      	movs	r3, #0
}
 80081a0:	4618      	mov	r0, r3
 80081a2:	3738      	adds	r7, #56	; 0x38
 80081a4:	46bd      	mov	sp, r7
 80081a6:	bd80      	pop	{r7, pc}
 80081a8:	18000f3a 	.word	0x18000f3a

080081ac <SD_Read_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 80081ac:	b580      	push	{r7, lr}
 80081ae:	b086      	sub	sp, #24
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081b8:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081be:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80081c0:	693b      	ldr	r3, [r7, #16]
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d03f      	beq.n	8008246 <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 80081c6:	2300      	movs	r3, #0
 80081c8:	617b      	str	r3, [r7, #20]
 80081ca:	e033      	b.n	8008234 <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	4618      	mov	r0, r3
 80081d2:	f000 fbbf 	bl	8008954 <SDMMC_ReadFIFO>
 80081d6:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 80081d8:	68bb      	ldr	r3, [r7, #8]
 80081da:	b2da      	uxtb	r2, r3
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	701a      	strb	r2, [r3, #0]
      tmp++;
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	3301      	adds	r3, #1
 80081e4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80081e6:	693b      	ldr	r3, [r7, #16]
 80081e8:	3b01      	subs	r3, #1
 80081ea:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 80081ec:	68bb      	ldr	r3, [r7, #8]
 80081ee:	0a1b      	lsrs	r3, r3, #8
 80081f0:	b2da      	uxtb	r2, r3
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	701a      	strb	r2, [r3, #0]
      tmp++;
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	3301      	adds	r3, #1
 80081fa:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80081fc:	693b      	ldr	r3, [r7, #16]
 80081fe:	3b01      	subs	r3, #1
 8008200:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8008202:	68bb      	ldr	r3, [r7, #8]
 8008204:	0c1b      	lsrs	r3, r3, #16
 8008206:	b2da      	uxtb	r2, r3
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	3301      	adds	r3, #1
 8008210:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008212:	693b      	ldr	r3, [r7, #16]
 8008214:	3b01      	subs	r3, #1
 8008216:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8008218:	68bb      	ldr	r3, [r7, #8]
 800821a:	0e1b      	lsrs	r3, r3, #24
 800821c:	b2da      	uxtb	r2, r3
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	3301      	adds	r3, #1
 8008226:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008228:	693b      	ldr	r3, [r7, #16]
 800822a:	3b01      	subs	r3, #1
 800822c:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800822e:	697b      	ldr	r3, [r7, #20]
 8008230:	3301      	adds	r3, #1
 8008232:	617b      	str	r3, [r7, #20]
 8008234:	697b      	ldr	r3, [r7, #20]
 8008236:	2b07      	cmp	r3, #7
 8008238:	d9c8      	bls.n	80081cc <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	68fa      	ldr	r2, [r7, #12]
 800823e:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	693a      	ldr	r2, [r7, #16]
 8008244:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8008246:	bf00      	nop
 8008248:	3718      	adds	r7, #24
 800824a:	46bd      	mov	sp, r7
 800824c:	bd80      	pop	{r7, pc}

0800824e <SD_Write_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800824e:	b580      	push	{r7, lr}
 8008250:	b086      	sub	sp, #24
 8008252:	af00      	add	r7, sp, #0
 8008254:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	6a1b      	ldr	r3, [r3, #32]
 800825a:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008260:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8008262:	693b      	ldr	r3, [r7, #16]
 8008264:	2b00      	cmp	r3, #0
 8008266:	d043      	beq.n	80082f0 <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8008268:	2300      	movs	r3, #0
 800826a:	617b      	str	r3, [r7, #20]
 800826c:	e037      	b.n	80082de <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	781b      	ldrb	r3, [r3, #0]
 8008272:	60bb      	str	r3, [r7, #8]
      tmp++;
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	3301      	adds	r3, #1
 8008278:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800827a:	693b      	ldr	r3, [r7, #16]
 800827c:	3b01      	subs	r3, #1
 800827e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	781b      	ldrb	r3, [r3, #0]
 8008284:	021a      	lsls	r2, r3, #8
 8008286:	68bb      	ldr	r3, [r7, #8]
 8008288:	4313      	orrs	r3, r2
 800828a:	60bb      	str	r3, [r7, #8]
      tmp++;
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	3301      	adds	r3, #1
 8008290:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008292:	693b      	ldr	r3, [r7, #16]
 8008294:	3b01      	subs	r3, #1
 8008296:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	781b      	ldrb	r3, [r3, #0]
 800829c:	041a      	lsls	r2, r3, #16
 800829e:	68bb      	ldr	r3, [r7, #8]
 80082a0:	4313      	orrs	r3, r2
 80082a2:	60bb      	str	r3, [r7, #8]
      tmp++;
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	3301      	adds	r3, #1
 80082a8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80082aa:	693b      	ldr	r3, [r7, #16]
 80082ac:	3b01      	subs	r3, #1
 80082ae:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	781b      	ldrb	r3, [r3, #0]
 80082b4:	061a      	lsls	r2, r3, #24
 80082b6:	68bb      	ldr	r3, [r7, #8]
 80082b8:	4313      	orrs	r3, r2
 80082ba:	60bb      	str	r3, [r7, #8]
      tmp++;
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	3301      	adds	r3, #1
 80082c0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80082c2:	693b      	ldr	r3, [r7, #16]
 80082c4:	3b01      	subs	r3, #1
 80082c6:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	f107 0208 	add.w	r2, r7, #8
 80082d0:	4611      	mov	r1, r2
 80082d2:	4618      	mov	r0, r3
 80082d4:	f000 fb4b 	bl	800896e <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 80082d8:	697b      	ldr	r3, [r7, #20]
 80082da:	3301      	adds	r3, #1
 80082dc:	617b      	str	r3, [r7, #20]
 80082de:	697b      	ldr	r3, [r7, #20]
 80082e0:	2b07      	cmp	r3, #7
 80082e2:	d9c4      	bls.n	800826e <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	68fa      	ldr	r2, [r7, #12]
 80082e8:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	693a      	ldr	r2, [r7, #16]
 80082ee:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 80082f0:	bf00      	nop
 80082f2:	3718      	adds	r7, #24
 80082f4:	46bd      	mov	sp, r7
 80082f6:	bd80      	pop	{r7, pc}

080082f8 <HAL_SDEx_DriveTransceiver_1_8V_Callback>:
  * @brief  Enable/Disable the SD Transceiver 1.8V Mode Callback.
  * @param  status Voltage Switch State
  * @retval None
  */
__weak void HAL_SDEx_DriveTransceiver_1_8V_Callback(FlagStatus status)
{
 80082f8:	b480      	push	{r7}
 80082fa:	b083      	sub	sp, #12
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	4603      	mov	r3, r0
 8008300:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SD_EnableTransciver could be implemented in the user file
   */
}
 8008302:	bf00      	nop
 8008304:	370c      	adds	r7, #12
 8008306:	46bd      	mov	sp, r7
 8008308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830c:	4770      	bx	lr

0800830e <HAL_SDEx_Read_DMADoubleBuffer0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuffer0CpltCallback(SD_HandleTypeDef *hsd)
{
 800830e:	b480      	push	{r7}
 8008310:	b083      	sub	sp, #12
 8008312:	af00      	add	r7, sp, #0
 8008314:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuffer0CpltCallback can be implemented in the user file
   */
}
 8008316:	bf00      	nop
 8008318:	370c      	adds	r7, #12
 800831a:	46bd      	mov	sp, r7
 800831c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008320:	4770      	bx	lr

08008322 <HAL_SDEx_Read_DMADoubleBuffer1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuffer1CpltCallback(SD_HandleTypeDef *hsd)
{
 8008322:	b480      	push	{r7}
 8008324:	b083      	sub	sp, #12
 8008326:	af00      	add	r7, sp, #0
 8008328:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuffer1CpltCallback can be implemented in the user file
   */
}
 800832a:	bf00      	nop
 800832c:	370c      	adds	r7, #12
 800832e:	46bd      	mov	sp, r7
 8008330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008334:	4770      	bx	lr

08008336 <HAL_SDEx_Write_DMADoubleBuffer0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuffer0CpltCallback(SD_HandleTypeDef *hsd)
{
 8008336:	b480      	push	{r7}
 8008338:	b083      	sub	sp, #12
 800833a:	af00      	add	r7, sp, #0
 800833c:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuffer0CpltCallback can be implemented in the user file
   */
}
 800833e:	bf00      	nop
 8008340:	370c      	adds	r7, #12
 8008342:	46bd      	mov	sp, r7
 8008344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008348:	4770      	bx	lr

0800834a <HAL_SDEx_Write_DMADoubleBuffer1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuffer1CpltCallback(SD_HandleTypeDef *hsd)
{
 800834a:	b480      	push	{r7}
 800834c:	b083      	sub	sp, #12
 800834e:	af00      	add	r7, sp, #0
 8008350:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuffer0CpltCallback can be implemented in the user file
   */
}
 8008352:	bf00      	nop
 8008354:	370c      	adds	r7, #12
 8008356:	46bd      	mov	sp, r7
 8008358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835c:	4770      	bx	lr

0800835e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800835e:	b580      	push	{r7, lr}
 8008360:	b082      	sub	sp, #8
 8008362:	af00      	add	r7, sp, #0
 8008364:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	2b00      	cmp	r3, #0
 800836a:	d101      	bne.n	8008370 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800836c:	2301      	movs	r3, #1
 800836e:	e049      	b.n	8008404 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008376:	b2db      	uxtb	r3, r3
 8008378:	2b00      	cmp	r3, #0
 800837a:	d106      	bne.n	800838a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	2200      	movs	r2, #0
 8008380:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008384:	6878      	ldr	r0, [r7, #4]
 8008386:	f000 f841 	bl	800840c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	2202      	movs	r2, #2
 800838e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681a      	ldr	r2, [r3, #0]
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	3304      	adds	r3, #4
 800839a:	4619      	mov	r1, r3
 800839c:	4610      	mov	r0, r2
 800839e:	f000 f9f7 	bl	8008790 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	2201      	movs	r2, #1
 80083a6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	2201      	movs	r2, #1
 80083ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	2201      	movs	r2, #1
 80083b6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	2201      	movs	r2, #1
 80083be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	2201      	movs	r2, #1
 80083c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	2201      	movs	r2, #1
 80083ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	2201      	movs	r2, #1
 80083d6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	2201      	movs	r2, #1
 80083de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	2201      	movs	r2, #1
 80083e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	2201      	movs	r2, #1
 80083ee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	2201      	movs	r2, #1
 80083f6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	2201      	movs	r2, #1
 80083fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008402:	2300      	movs	r3, #0
}
 8008404:	4618      	mov	r0, r3
 8008406:	3708      	adds	r7, #8
 8008408:	46bd      	mov	sp, r7
 800840a:	bd80      	pop	{r7, pc}

0800840c <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800840c:	b480      	push	{r7}
 800840e:	b083      	sub	sp, #12
 8008410:	af00      	add	r7, sp, #0
 8008412:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8008414:	bf00      	nop
 8008416:	370c      	adds	r7, #12
 8008418:	46bd      	mov	sp, r7
 800841a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841e:	4770      	bx	lr

08008420 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008420:	b480      	push	{r7}
 8008422:	b085      	sub	sp, #20
 8008424:	af00      	add	r7, sp, #0
 8008426:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800842e:	b2db      	uxtb	r3, r3
 8008430:	2b01      	cmp	r3, #1
 8008432:	d001      	beq.n	8008438 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008434:	2301      	movs	r3, #1
 8008436:	e04f      	b.n	80084d8 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	2202      	movs	r2, #2
 800843c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	68da      	ldr	r2, [r3, #12]
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	f042 0201 	orr.w	r2, r2, #1
 800844e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	4a23      	ldr	r2, [pc, #140]	; (80084e4 <HAL_TIM_Base_Start_IT+0xc4>)
 8008456:	4293      	cmp	r3, r2
 8008458:	d01d      	beq.n	8008496 <HAL_TIM_Base_Start_IT+0x76>
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008462:	d018      	beq.n	8008496 <HAL_TIM_Base_Start_IT+0x76>
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	4a1f      	ldr	r2, [pc, #124]	; (80084e8 <HAL_TIM_Base_Start_IT+0xc8>)
 800846a:	4293      	cmp	r3, r2
 800846c:	d013      	beq.n	8008496 <HAL_TIM_Base_Start_IT+0x76>
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	4a1e      	ldr	r2, [pc, #120]	; (80084ec <HAL_TIM_Base_Start_IT+0xcc>)
 8008474:	4293      	cmp	r3, r2
 8008476:	d00e      	beq.n	8008496 <HAL_TIM_Base_Start_IT+0x76>
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	4a1c      	ldr	r2, [pc, #112]	; (80084f0 <HAL_TIM_Base_Start_IT+0xd0>)
 800847e:	4293      	cmp	r3, r2
 8008480:	d009      	beq.n	8008496 <HAL_TIM_Base_Start_IT+0x76>
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	4a1b      	ldr	r2, [pc, #108]	; (80084f4 <HAL_TIM_Base_Start_IT+0xd4>)
 8008488:	4293      	cmp	r3, r2
 800848a:	d004      	beq.n	8008496 <HAL_TIM_Base_Start_IT+0x76>
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	4a19      	ldr	r2, [pc, #100]	; (80084f8 <HAL_TIM_Base_Start_IT+0xd8>)
 8008492:	4293      	cmp	r3, r2
 8008494:	d115      	bne.n	80084c2 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	689a      	ldr	r2, [r3, #8]
 800849c:	4b17      	ldr	r3, [pc, #92]	; (80084fc <HAL_TIM_Base_Start_IT+0xdc>)
 800849e:	4013      	ands	r3, r2
 80084a0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	2b06      	cmp	r3, #6
 80084a6:	d015      	beq.n	80084d4 <HAL_TIM_Base_Start_IT+0xb4>
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80084ae:	d011      	beq.n	80084d4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	681a      	ldr	r2, [r3, #0]
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	f042 0201 	orr.w	r2, r2, #1
 80084be:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80084c0:	e008      	b.n	80084d4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	681a      	ldr	r2, [r3, #0]
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	f042 0201 	orr.w	r2, r2, #1
 80084d0:	601a      	str	r2, [r3, #0]
 80084d2:	e000      	b.n	80084d6 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80084d4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80084d6:	2300      	movs	r3, #0
}
 80084d8:	4618      	mov	r0, r3
 80084da:	3714      	adds	r7, #20
 80084dc:	46bd      	mov	sp, r7
 80084de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e2:	4770      	bx	lr
 80084e4:	40012c00 	.word	0x40012c00
 80084e8:	40000400 	.word	0x40000400
 80084ec:	40000800 	.word	0x40000800
 80084f0:	40000c00 	.word	0x40000c00
 80084f4:	40013400 	.word	0x40013400
 80084f8:	40014000 	.word	0x40014000
 80084fc:	00010007 	.word	0x00010007

08008500 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008500:	b580      	push	{r7, lr}
 8008502:	b082      	sub	sp, #8
 8008504:	af00      	add	r7, sp, #0
 8008506:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	691b      	ldr	r3, [r3, #16]
 800850e:	f003 0302 	and.w	r3, r3, #2
 8008512:	2b02      	cmp	r3, #2
 8008514:	d122      	bne.n	800855c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	68db      	ldr	r3, [r3, #12]
 800851c:	f003 0302 	and.w	r3, r3, #2
 8008520:	2b02      	cmp	r3, #2
 8008522:	d11b      	bne.n	800855c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	f06f 0202 	mvn.w	r2, #2
 800852c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	2201      	movs	r2, #1
 8008532:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	699b      	ldr	r3, [r3, #24]
 800853a:	f003 0303 	and.w	r3, r3, #3
 800853e:	2b00      	cmp	r3, #0
 8008540:	d003      	beq.n	800854a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008542:	6878      	ldr	r0, [r7, #4]
 8008544:	f000 f905 	bl	8008752 <HAL_TIM_IC_CaptureCallback>
 8008548:	e005      	b.n	8008556 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800854a:	6878      	ldr	r0, [r7, #4]
 800854c:	f000 f8f7 	bl	800873e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008550:	6878      	ldr	r0, [r7, #4]
 8008552:	f000 f908 	bl	8008766 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	2200      	movs	r2, #0
 800855a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	691b      	ldr	r3, [r3, #16]
 8008562:	f003 0304 	and.w	r3, r3, #4
 8008566:	2b04      	cmp	r3, #4
 8008568:	d122      	bne.n	80085b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	68db      	ldr	r3, [r3, #12]
 8008570:	f003 0304 	and.w	r3, r3, #4
 8008574:	2b04      	cmp	r3, #4
 8008576:	d11b      	bne.n	80085b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	f06f 0204 	mvn.w	r2, #4
 8008580:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	2202      	movs	r2, #2
 8008586:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	699b      	ldr	r3, [r3, #24]
 800858e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008592:	2b00      	cmp	r3, #0
 8008594:	d003      	beq.n	800859e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008596:	6878      	ldr	r0, [r7, #4]
 8008598:	f000 f8db 	bl	8008752 <HAL_TIM_IC_CaptureCallback>
 800859c:	e005      	b.n	80085aa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800859e:	6878      	ldr	r0, [r7, #4]
 80085a0:	f000 f8cd 	bl	800873e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80085a4:	6878      	ldr	r0, [r7, #4]
 80085a6:	f000 f8de 	bl	8008766 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	2200      	movs	r2, #0
 80085ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	691b      	ldr	r3, [r3, #16]
 80085b6:	f003 0308 	and.w	r3, r3, #8
 80085ba:	2b08      	cmp	r3, #8
 80085bc:	d122      	bne.n	8008604 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	68db      	ldr	r3, [r3, #12]
 80085c4:	f003 0308 	and.w	r3, r3, #8
 80085c8:	2b08      	cmp	r3, #8
 80085ca:	d11b      	bne.n	8008604 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	f06f 0208 	mvn.w	r2, #8
 80085d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	2204      	movs	r2, #4
 80085da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	69db      	ldr	r3, [r3, #28]
 80085e2:	f003 0303 	and.w	r3, r3, #3
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d003      	beq.n	80085f2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80085ea:	6878      	ldr	r0, [r7, #4]
 80085ec:	f000 f8b1 	bl	8008752 <HAL_TIM_IC_CaptureCallback>
 80085f0:	e005      	b.n	80085fe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80085f2:	6878      	ldr	r0, [r7, #4]
 80085f4:	f000 f8a3 	bl	800873e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80085f8:	6878      	ldr	r0, [r7, #4]
 80085fa:	f000 f8b4 	bl	8008766 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	2200      	movs	r2, #0
 8008602:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	691b      	ldr	r3, [r3, #16]
 800860a:	f003 0310 	and.w	r3, r3, #16
 800860e:	2b10      	cmp	r3, #16
 8008610:	d122      	bne.n	8008658 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	68db      	ldr	r3, [r3, #12]
 8008618:	f003 0310 	and.w	r3, r3, #16
 800861c:	2b10      	cmp	r3, #16
 800861e:	d11b      	bne.n	8008658 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	f06f 0210 	mvn.w	r2, #16
 8008628:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	2208      	movs	r2, #8
 800862e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	69db      	ldr	r3, [r3, #28]
 8008636:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800863a:	2b00      	cmp	r3, #0
 800863c:	d003      	beq.n	8008646 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800863e:	6878      	ldr	r0, [r7, #4]
 8008640:	f000 f887 	bl	8008752 <HAL_TIM_IC_CaptureCallback>
 8008644:	e005      	b.n	8008652 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008646:	6878      	ldr	r0, [r7, #4]
 8008648:	f000 f879 	bl	800873e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800864c:	6878      	ldr	r0, [r7, #4]
 800864e:	f000 f88a 	bl	8008766 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	2200      	movs	r2, #0
 8008656:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	691b      	ldr	r3, [r3, #16]
 800865e:	f003 0301 	and.w	r3, r3, #1
 8008662:	2b01      	cmp	r3, #1
 8008664:	d10e      	bne.n	8008684 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	68db      	ldr	r3, [r3, #12]
 800866c:	f003 0301 	and.w	r3, r3, #1
 8008670:	2b01      	cmp	r3, #1
 8008672:	d107      	bne.n	8008684 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	f06f 0201 	mvn.w	r2, #1
 800867c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800867e:	6878      	ldr	r0, [r7, #4]
 8008680:	f7f8 fb48 	bl	8000d14 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	691b      	ldr	r3, [r3, #16]
 800868a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800868e:	2b80      	cmp	r3, #128	; 0x80
 8008690:	d10e      	bne.n	80086b0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	68db      	ldr	r3, [r3, #12]
 8008698:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800869c:	2b80      	cmp	r3, #128	; 0x80
 800869e:	d107      	bne.n	80086b0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80086a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80086aa:	6878      	ldr	r0, [r7, #4]
 80086ac:	f000 f914 	bl	80088d8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	691b      	ldr	r3, [r3, #16]
 80086b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80086be:	d10e      	bne.n	80086de <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	68db      	ldr	r3, [r3, #12]
 80086c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086ca:	2b80      	cmp	r3, #128	; 0x80
 80086cc:	d107      	bne.n	80086de <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80086d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80086d8:	6878      	ldr	r0, [r7, #4]
 80086da:	f000 f907 	bl	80088ec <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	691b      	ldr	r3, [r3, #16]
 80086e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086e8:	2b40      	cmp	r3, #64	; 0x40
 80086ea:	d10e      	bne.n	800870a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	68db      	ldr	r3, [r3, #12]
 80086f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086f6:	2b40      	cmp	r3, #64	; 0x40
 80086f8:	d107      	bne.n	800870a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008702:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008704:	6878      	ldr	r0, [r7, #4]
 8008706:	f000 f838 	bl	800877a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	691b      	ldr	r3, [r3, #16]
 8008710:	f003 0320 	and.w	r3, r3, #32
 8008714:	2b20      	cmp	r3, #32
 8008716:	d10e      	bne.n	8008736 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	68db      	ldr	r3, [r3, #12]
 800871e:	f003 0320 	and.w	r3, r3, #32
 8008722:	2b20      	cmp	r3, #32
 8008724:	d107      	bne.n	8008736 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	f06f 0220 	mvn.w	r2, #32
 800872e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008730:	6878      	ldr	r0, [r7, #4]
 8008732:	f000 f8c7 	bl	80088c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008736:	bf00      	nop
 8008738:	3708      	adds	r7, #8
 800873a:	46bd      	mov	sp, r7
 800873c:	bd80      	pop	{r7, pc}

0800873e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800873e:	b480      	push	{r7}
 8008740:	b083      	sub	sp, #12
 8008742:	af00      	add	r7, sp, #0
 8008744:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008746:	bf00      	nop
 8008748:	370c      	adds	r7, #12
 800874a:	46bd      	mov	sp, r7
 800874c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008750:	4770      	bx	lr

08008752 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008752:	b480      	push	{r7}
 8008754:	b083      	sub	sp, #12
 8008756:	af00      	add	r7, sp, #0
 8008758:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800875a:	bf00      	nop
 800875c:	370c      	adds	r7, #12
 800875e:	46bd      	mov	sp, r7
 8008760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008764:	4770      	bx	lr

08008766 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008766:	b480      	push	{r7}
 8008768:	b083      	sub	sp, #12
 800876a:	af00      	add	r7, sp, #0
 800876c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800876e:	bf00      	nop
 8008770:	370c      	adds	r7, #12
 8008772:	46bd      	mov	sp, r7
 8008774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008778:	4770      	bx	lr

0800877a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800877a:	b480      	push	{r7}
 800877c:	b083      	sub	sp, #12
 800877e:	af00      	add	r7, sp, #0
 8008780:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008782:	bf00      	nop
 8008784:	370c      	adds	r7, #12
 8008786:	46bd      	mov	sp, r7
 8008788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878c:	4770      	bx	lr
	...

08008790 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008790:	b480      	push	{r7}
 8008792:	b085      	sub	sp, #20
 8008794:	af00      	add	r7, sp, #0
 8008796:	6078      	str	r0, [r7, #4]
 8008798:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	4a40      	ldr	r2, [pc, #256]	; (80088a4 <TIM_Base_SetConfig+0x114>)
 80087a4:	4293      	cmp	r3, r2
 80087a6:	d013      	beq.n	80087d0 <TIM_Base_SetConfig+0x40>
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80087ae:	d00f      	beq.n	80087d0 <TIM_Base_SetConfig+0x40>
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	4a3d      	ldr	r2, [pc, #244]	; (80088a8 <TIM_Base_SetConfig+0x118>)
 80087b4:	4293      	cmp	r3, r2
 80087b6:	d00b      	beq.n	80087d0 <TIM_Base_SetConfig+0x40>
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	4a3c      	ldr	r2, [pc, #240]	; (80088ac <TIM_Base_SetConfig+0x11c>)
 80087bc:	4293      	cmp	r3, r2
 80087be:	d007      	beq.n	80087d0 <TIM_Base_SetConfig+0x40>
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	4a3b      	ldr	r2, [pc, #236]	; (80088b0 <TIM_Base_SetConfig+0x120>)
 80087c4:	4293      	cmp	r3, r2
 80087c6:	d003      	beq.n	80087d0 <TIM_Base_SetConfig+0x40>
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	4a3a      	ldr	r2, [pc, #232]	; (80088b4 <TIM_Base_SetConfig+0x124>)
 80087cc:	4293      	cmp	r3, r2
 80087ce:	d108      	bne.n	80087e2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80087d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80087d8:	683b      	ldr	r3, [r7, #0]
 80087da:	685b      	ldr	r3, [r3, #4]
 80087dc:	68fa      	ldr	r2, [r7, #12]
 80087de:	4313      	orrs	r3, r2
 80087e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	4a2f      	ldr	r2, [pc, #188]	; (80088a4 <TIM_Base_SetConfig+0x114>)
 80087e6:	4293      	cmp	r3, r2
 80087e8:	d01f      	beq.n	800882a <TIM_Base_SetConfig+0x9a>
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80087f0:	d01b      	beq.n	800882a <TIM_Base_SetConfig+0x9a>
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	4a2c      	ldr	r2, [pc, #176]	; (80088a8 <TIM_Base_SetConfig+0x118>)
 80087f6:	4293      	cmp	r3, r2
 80087f8:	d017      	beq.n	800882a <TIM_Base_SetConfig+0x9a>
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	4a2b      	ldr	r2, [pc, #172]	; (80088ac <TIM_Base_SetConfig+0x11c>)
 80087fe:	4293      	cmp	r3, r2
 8008800:	d013      	beq.n	800882a <TIM_Base_SetConfig+0x9a>
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	4a2a      	ldr	r2, [pc, #168]	; (80088b0 <TIM_Base_SetConfig+0x120>)
 8008806:	4293      	cmp	r3, r2
 8008808:	d00f      	beq.n	800882a <TIM_Base_SetConfig+0x9a>
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	4a29      	ldr	r2, [pc, #164]	; (80088b4 <TIM_Base_SetConfig+0x124>)
 800880e:	4293      	cmp	r3, r2
 8008810:	d00b      	beq.n	800882a <TIM_Base_SetConfig+0x9a>
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	4a28      	ldr	r2, [pc, #160]	; (80088b8 <TIM_Base_SetConfig+0x128>)
 8008816:	4293      	cmp	r3, r2
 8008818:	d007      	beq.n	800882a <TIM_Base_SetConfig+0x9a>
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	4a27      	ldr	r2, [pc, #156]	; (80088bc <TIM_Base_SetConfig+0x12c>)
 800881e:	4293      	cmp	r3, r2
 8008820:	d003      	beq.n	800882a <TIM_Base_SetConfig+0x9a>
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	4a26      	ldr	r2, [pc, #152]	; (80088c0 <TIM_Base_SetConfig+0x130>)
 8008826:	4293      	cmp	r3, r2
 8008828:	d108      	bne.n	800883c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008830:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008832:	683b      	ldr	r3, [r7, #0]
 8008834:	68db      	ldr	r3, [r3, #12]
 8008836:	68fa      	ldr	r2, [r7, #12]
 8008838:	4313      	orrs	r3, r2
 800883a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008842:	683b      	ldr	r3, [r7, #0]
 8008844:	695b      	ldr	r3, [r3, #20]
 8008846:	4313      	orrs	r3, r2
 8008848:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	68fa      	ldr	r2, [r7, #12]
 800884e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008850:	683b      	ldr	r3, [r7, #0]
 8008852:	689a      	ldr	r2, [r3, #8]
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008858:	683b      	ldr	r3, [r7, #0]
 800885a:	681a      	ldr	r2, [r3, #0]
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	4a10      	ldr	r2, [pc, #64]	; (80088a4 <TIM_Base_SetConfig+0x114>)
 8008864:	4293      	cmp	r3, r2
 8008866:	d00f      	beq.n	8008888 <TIM_Base_SetConfig+0xf8>
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	4a12      	ldr	r2, [pc, #72]	; (80088b4 <TIM_Base_SetConfig+0x124>)
 800886c:	4293      	cmp	r3, r2
 800886e:	d00b      	beq.n	8008888 <TIM_Base_SetConfig+0xf8>
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	4a11      	ldr	r2, [pc, #68]	; (80088b8 <TIM_Base_SetConfig+0x128>)
 8008874:	4293      	cmp	r3, r2
 8008876:	d007      	beq.n	8008888 <TIM_Base_SetConfig+0xf8>
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	4a10      	ldr	r2, [pc, #64]	; (80088bc <TIM_Base_SetConfig+0x12c>)
 800887c:	4293      	cmp	r3, r2
 800887e:	d003      	beq.n	8008888 <TIM_Base_SetConfig+0xf8>
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	4a0f      	ldr	r2, [pc, #60]	; (80088c0 <TIM_Base_SetConfig+0x130>)
 8008884:	4293      	cmp	r3, r2
 8008886:	d103      	bne.n	8008890 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008888:	683b      	ldr	r3, [r7, #0]
 800888a:	691a      	ldr	r2, [r3, #16]
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	2201      	movs	r2, #1
 8008894:	615a      	str	r2, [r3, #20]
}
 8008896:	bf00      	nop
 8008898:	3714      	adds	r7, #20
 800889a:	46bd      	mov	sp, r7
 800889c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a0:	4770      	bx	lr
 80088a2:	bf00      	nop
 80088a4:	40012c00 	.word	0x40012c00
 80088a8:	40000400 	.word	0x40000400
 80088ac:	40000800 	.word	0x40000800
 80088b0:	40000c00 	.word	0x40000c00
 80088b4:	40013400 	.word	0x40013400
 80088b8:	40014000 	.word	0x40014000
 80088bc:	40014400 	.word	0x40014400
 80088c0:	40014800 	.word	0x40014800

080088c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80088c4:	b480      	push	{r7}
 80088c6:	b083      	sub	sp, #12
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80088cc:	bf00      	nop
 80088ce:	370c      	adds	r7, #12
 80088d0:	46bd      	mov	sp, r7
 80088d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d6:	4770      	bx	lr

080088d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80088d8:	b480      	push	{r7}
 80088da:	b083      	sub	sp, #12
 80088dc:	af00      	add	r7, sp, #0
 80088de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80088e0:	bf00      	nop
 80088e2:	370c      	adds	r7, #12
 80088e4:	46bd      	mov	sp, r7
 80088e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ea:	4770      	bx	lr

080088ec <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80088ec:	b480      	push	{r7}
 80088ee:	b083      	sub	sp, #12
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80088f4:	bf00      	nop
 80088f6:	370c      	adds	r7, #12
 80088f8:	46bd      	mov	sp, r7
 80088fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088fe:	4770      	bx	lr

08008900 <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8008900:	b084      	sub	sp, #16
 8008902:	b480      	push	{r7}
 8008904:	b085      	sub	sp, #20
 8008906:	af00      	add	r7, sp, #0
 8008908:	6078      	str	r0, [r7, #4]
 800890a:	f107 001c 	add.w	r0, r7, #28
 800890e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8008912:	2300      	movs	r3, #0
 8008914:	60fb      	str	r3, [r7, #12]

  /* Set SDMMC configuration parameters */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  tmpreg |= Init.ClockBypass;
#endif
  tmpreg |= (Init.ClockEdge           |\
 8008916:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 8008918:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800891a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800891c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      |\
 800891e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8008920:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             |\
 8008922:	431a      	orrs	r2, r3
             Init.ClockDiv
 8008924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl |\
 8008926:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8008928:	68fa      	ldr	r2, [r7, #12]
 800892a:	4313      	orrs	r3, r2
 800892c:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	685a      	ldr	r2, [r3, #4]
 8008932:	4b07      	ldr	r3, [pc, #28]	; (8008950 <SDMMC_Init+0x50>)
 8008934:	4013      	ands	r3, r2
 8008936:	68fa      	ldr	r2, [r7, #12]
 8008938:	431a      	orrs	r2, r3
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800893e:	2300      	movs	r3, #0
}
 8008940:	4618      	mov	r0, r3
 8008942:	3714      	adds	r7, #20
 8008944:	46bd      	mov	sp, r7
 8008946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800894a:	b004      	add	sp, #16
 800894c:	4770      	bx	lr
 800894e:	bf00      	nop
 8008950:	ffc02c00 	.word	0xffc02c00

08008954 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8008954:	b480      	push	{r7}
 8008956:	b083      	sub	sp, #12
 8008958:	af00      	add	r7, sp, #0
 800895a:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8008962:	4618      	mov	r0, r3
 8008964:	370c      	adds	r7, #12
 8008966:	46bd      	mov	sp, r7
 8008968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800896c:	4770      	bx	lr

0800896e <SDMMC_WriteFIFO>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pWriteData pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800896e:	b480      	push	{r7}
 8008970:	b083      	sub	sp, #12
 8008972:	af00      	add	r7, sp, #0
 8008974:	6078      	str	r0, [r7, #4]
 8008976:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8008978:	683b      	ldr	r3, [r7, #0]
 800897a:	681a      	ldr	r2, [r3, #0]
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008982:	2300      	movs	r3, #0
}
 8008984:	4618      	mov	r0, r3
 8008986:	370c      	adds	r7, #12
 8008988:	46bd      	mov	sp, r7
 800898a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800898e:	4770      	bx	lr

08008990 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8008990:	b580      	push	{r7, lr}
 8008992:	b082      	sub	sp, #8
 8008994:	af00      	add	r7, sp, #0
 8008996:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	f043 0203 	orr.w	r2, r3, #3
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	601a      	str	r2, [r3, #0]
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 80089a4:	2002      	movs	r0, #2
 80089a6:	f7f8 fcdf 	bl	8001368 <HAL_Delay>

  return HAL_OK;
 80089aa:	2300      	movs	r3, #0
}
 80089ac:	4618      	mov	r0, r3
 80089ae:	3708      	adds	r7, #8
 80089b0:	46bd      	mov	sp, r7
 80089b2:	bd80      	pop	{r7, pc}

080089b4 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 80089b4:	b480      	push	{r7}
 80089b6:	b083      	sub	sp, #12
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	f003 0303 	and.w	r3, r3, #3
}
 80089c4:	4618      	mov	r0, r3
 80089c6:	370c      	adds	r7, #12
 80089c8:	46bd      	mov	sp, r7
 80089ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ce:	4770      	bx	lr

080089d0 <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 80089d0:	b480      	push	{r7}
 80089d2:	b085      	sub	sp, #20
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	6078      	str	r0, [r7, #4]
 80089d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80089da:	2300      	movs	r3, #0
 80089dc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 80089de:	683b      	ldr	r3, [r7, #0]
 80089e0:	681a      	ldr	r2, [r3, #0]
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80089e6:	683b      	ldr	r3, [r7, #0]
 80089e8:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80089ea:	683b      	ldr	r3, [r7, #0]
 80089ec:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80089ee:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80089f0:	683b      	ldr	r3, [r7, #0]
 80089f2:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80089f4:	431a      	orrs	r2, r3
                       Command->CPSM);
 80089f6:	683b      	ldr	r3, [r7, #0]
 80089f8:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80089fa:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80089fc:	68fa      	ldr	r2, [r7, #12]
 80089fe:	4313      	orrs	r3, r2
 8008a00:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	68da      	ldr	r2, [r3, #12]
 8008a06:	4b06      	ldr	r3, [pc, #24]	; (8008a20 <SDMMC_SendCommand+0x50>)
 8008a08:	4013      	ands	r3, r2
 8008a0a:	68fa      	ldr	r2, [r7, #12]
 8008a0c:	431a      	orrs	r2, r3
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008a12:	2300      	movs	r3, #0
}
 8008a14:	4618      	mov	r0, r3
 8008a16:	3714      	adds	r7, #20
 8008a18:	46bd      	mov	sp, r7
 8008a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a1e:	4770      	bx	lr
 8008a20:	fffee0c0 	.word	0xfffee0c0

08008a24 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8008a24:	b480      	push	{r7}
 8008a26:	b083      	sub	sp, #12
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	691b      	ldr	r3, [r3, #16]
 8008a30:	b2db      	uxtb	r3, r3
}
 8008a32:	4618      	mov	r0, r3
 8008a34:	370c      	adds	r7, #12
 8008a36:	46bd      	mov	sp, r7
 8008a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3c:	4770      	bx	lr

08008a3e <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8008a3e:	b480      	push	{r7}
 8008a40:	b085      	sub	sp, #20
 8008a42:	af00      	add	r7, sp, #0
 8008a44:	6078      	str	r0, [r7, #4]
 8008a46:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	3314      	adds	r3, #20
 8008a4c:	461a      	mov	r2, r3
 8008a4e:	683b      	ldr	r3, [r7, #0]
 8008a50:	4413      	add	r3, r2
 8008a52:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	681b      	ldr	r3, [r3, #0]
}
 8008a58:	4618      	mov	r0, r3
 8008a5a:	3714      	adds	r7, #20
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a62:	4770      	bx	lr

08008a64 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8008a64:	b480      	push	{r7}
 8008a66:	b085      	sub	sp, #20
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	6078      	str	r0, [r7, #4]
 8008a6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8008a6e:	2300      	movs	r3, #0
 8008a70:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8008a72:	683b      	ldr	r3, [r7, #0]
 8008a74:	681a      	ldr	r2, [r3, #0]
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8008a7a:	683b      	ldr	r3, [r7, #0]
 8008a7c:	685a      	ldr	r2, [r3, #4]
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008a82:	683b      	ldr	r3, [r7, #0]
 8008a84:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8008a86:	683b      	ldr	r3, [r7, #0]
 8008a88:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008a8a:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8008a8c:	683b      	ldr	r3, [r7, #0]
 8008a8e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8008a90:	431a      	orrs	r2, r3
                       Data->DPSM);
 8008a92:	683b      	ldr	r3, [r7, #0]
 8008a94:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8008a96:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008a98:	68fa      	ldr	r2, [r7, #12]
 8008a9a:	4313      	orrs	r3, r2
 8008a9c:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008aa2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	431a      	orrs	r2, r3
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8008aae:	2300      	movs	r3, #0

}
 8008ab0:	4618      	mov	r0, r3
 8008ab2:	3714      	adds	r7, #20
 8008ab4:	46bd      	mov	sp, r7
 8008ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aba:	4770      	bx	lr

08008abc <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8008abc:	b580      	push	{r7, lr}
 8008abe:	b088      	sub	sp, #32
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	6078      	str	r0, [r7, #4]
 8008ac4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8008ac6:	683b      	ldr	r3, [r7, #0]
 8008ac8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8008aca:	2310      	movs	r3, #16
 8008acc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008ace:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008ad2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008ad4:	2300      	movs	r3, #0
 8008ad6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008ad8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008adc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008ade:	f107 0308 	add.w	r3, r7, #8
 8008ae2:	4619      	mov	r1, r3
 8008ae4:	6878      	ldr	r0, [r7, #4]
 8008ae6:	f7ff ff73 	bl	80089d0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8008aea:	f241 3288 	movw	r2, #5000	; 0x1388
 8008aee:	2110      	movs	r1, #16
 8008af0:	6878      	ldr	r0, [r7, #4]
 8008af2:	f000 fa7b 	bl	8008fec <SDMMC_GetCmdResp1>
 8008af6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008af8:	69fb      	ldr	r3, [r7, #28]
}
 8008afa:	4618      	mov	r0, r3
 8008afc:	3720      	adds	r7, #32
 8008afe:	46bd      	mov	sp, r7
 8008b00:	bd80      	pop	{r7, pc}

08008b02 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8008b02:	b580      	push	{r7, lr}
 8008b04:	b088      	sub	sp, #32
 8008b06:	af00      	add	r7, sp, #0
 8008b08:	6078      	str	r0, [r7, #4]
 8008b0a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8008b0c:	683b      	ldr	r3, [r7, #0]
 8008b0e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8008b10:	2311      	movs	r3, #17
 8008b12:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008b14:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008b18:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008b1a:	2300      	movs	r3, #0
 8008b1c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008b1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008b22:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008b24:	f107 0308 	add.w	r3, r7, #8
 8008b28:	4619      	mov	r1, r3
 8008b2a:	6878      	ldr	r0, [r7, #4]
 8008b2c:	f7ff ff50 	bl	80089d0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8008b30:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b34:	2111      	movs	r1, #17
 8008b36:	6878      	ldr	r0, [r7, #4]
 8008b38:	f000 fa58 	bl	8008fec <SDMMC_GetCmdResp1>
 8008b3c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008b3e:	69fb      	ldr	r3, [r7, #28]
}
 8008b40:	4618      	mov	r0, r3
 8008b42:	3720      	adds	r7, #32
 8008b44:	46bd      	mov	sp, r7
 8008b46:	bd80      	pop	{r7, pc}

08008b48 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8008b48:	b580      	push	{r7, lr}
 8008b4a:	b088      	sub	sp, #32
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	6078      	str	r0, [r7, #4]
 8008b50:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8008b52:	683b      	ldr	r3, [r7, #0]
 8008b54:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8008b56:	2312      	movs	r3, #18
 8008b58:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008b5a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008b5e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008b60:	2300      	movs	r3, #0
 8008b62:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008b64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008b68:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008b6a:	f107 0308 	add.w	r3, r7, #8
 8008b6e:	4619      	mov	r1, r3
 8008b70:	6878      	ldr	r0, [r7, #4]
 8008b72:	f7ff ff2d 	bl	80089d0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8008b76:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b7a:	2112      	movs	r1, #18
 8008b7c:	6878      	ldr	r0, [r7, #4]
 8008b7e:	f000 fa35 	bl	8008fec <SDMMC_GetCmdResp1>
 8008b82:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008b84:	69fb      	ldr	r3, [r7, #28]
}
 8008b86:	4618      	mov	r0, r3
 8008b88:	3720      	adds	r7, #32
 8008b8a:	46bd      	mov	sp, r7
 8008b8c:	bd80      	pop	{r7, pc}

08008b8e <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8008b8e:	b580      	push	{r7, lr}
 8008b90:	b088      	sub	sp, #32
 8008b92:	af00      	add	r7, sp, #0
 8008b94:	6078      	str	r0, [r7, #4]
 8008b96:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8008b98:	683b      	ldr	r3, [r7, #0]
 8008b9a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8008b9c:	2318      	movs	r3, #24
 8008b9e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008ba0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008ba4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008ba6:	2300      	movs	r3, #0
 8008ba8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008baa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008bae:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008bb0:	f107 0308 	add.w	r3, r7, #8
 8008bb4:	4619      	mov	r1, r3
 8008bb6:	6878      	ldr	r0, [r7, #4]
 8008bb8:	f7ff ff0a 	bl	80089d0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8008bbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8008bc0:	2118      	movs	r1, #24
 8008bc2:	6878      	ldr	r0, [r7, #4]
 8008bc4:	f000 fa12 	bl	8008fec <SDMMC_GetCmdResp1>
 8008bc8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008bca:	69fb      	ldr	r3, [r7, #28]
}
 8008bcc:	4618      	mov	r0, r3
 8008bce:	3720      	adds	r7, #32
 8008bd0:	46bd      	mov	sp, r7
 8008bd2:	bd80      	pop	{r7, pc}

08008bd4 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8008bd4:	b580      	push	{r7, lr}
 8008bd6:	b088      	sub	sp, #32
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	6078      	str	r0, [r7, #4]
 8008bdc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8008bde:	683b      	ldr	r3, [r7, #0]
 8008be0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8008be2:	2319      	movs	r3, #25
 8008be4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008be6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008bea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008bec:	2300      	movs	r3, #0
 8008bee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008bf0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008bf4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008bf6:	f107 0308 	add.w	r3, r7, #8
 8008bfa:	4619      	mov	r1, r3
 8008bfc:	6878      	ldr	r0, [r7, #4]
 8008bfe:	f7ff fee7 	bl	80089d0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8008c02:	f241 3288 	movw	r2, #5000	; 0x1388
 8008c06:	2119      	movs	r1, #25
 8008c08:	6878      	ldr	r0, [r7, #4]
 8008c0a:	f000 f9ef 	bl	8008fec <SDMMC_GetCmdResp1>
 8008c0e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008c10:	69fb      	ldr	r3, [r7, #28]
}
 8008c12:	4618      	mov	r0, r3
 8008c14:	3720      	adds	r7, #32
 8008c16:	46bd      	mov	sp, r7
 8008c18:	bd80      	pop	{r7, pc}
	...

08008c1c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8008c1c:	b580      	push	{r7, lr}
 8008c1e:	b088      	sub	sp, #32
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8008c24:	2300      	movs	r3, #0
 8008c26:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8008c28:	230c      	movs	r3, #12
 8008c2a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008c2c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008c30:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008c32:	2300      	movs	r3, #0
 8008c34:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008c36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008c3a:	61bb      	str	r3, [r7, #24]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	68db      	ldr	r3, [r3, #12]
 8008c40:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	68db      	ldr	r3, [r3, #12]
 8008c4c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008c54:	f107 0308 	add.w	r3, r7, #8
 8008c58:	4619      	mov	r1, r3
 8008c5a:	6878      	ldr	r0, [r7, #4]
 8008c5c:	f7ff feb8 	bl	80089d0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8008c60:	4a08      	ldr	r2, [pc, #32]	; (8008c84 <SDMMC_CmdStopTransfer+0x68>)
 8008c62:	210c      	movs	r1, #12
 8008c64:	6878      	ldr	r0, [r7, #4]
 8008c66:	f000 f9c1 	bl	8008fec <SDMMC_GetCmdResp1>
 8008c6a:	61f8      	str	r0, [r7, #28]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	68db      	ldr	r3, [r3, #12]
 8008c70:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  return errorstate;
 8008c78:	69fb      	ldr	r3, [r7, #28]
}
 8008c7a:	4618      	mov	r0, r3
 8008c7c:	3720      	adds	r7, #32
 8008c7e:	46bd      	mov	sp, r7
 8008c80:	bd80      	pop	{r7, pc}
 8008c82:	bf00      	nop
 8008c84:	05f5e100 	.word	0x05f5e100

08008c88 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  addr Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8008c88:	b580      	push	{r7, lr}
 8008c8a:	b08a      	sub	sp, #40	; 0x28
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	60f8      	str	r0, [r7, #12]
 8008c90:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8008c94:	683b      	ldr	r3, [r7, #0]
 8008c96:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8008c98:	2307      	movs	r3, #7
 8008c9a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008c9c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008ca0:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008ca2:	2300      	movs	r3, #0
 8008ca4:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008ca6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008caa:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008cac:	f107 0310 	add.w	r3, r7, #16
 8008cb0:	4619      	mov	r1, r3
 8008cb2:	68f8      	ldr	r0, [r7, #12]
 8008cb4:	f7ff fe8c 	bl	80089d0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8008cb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8008cbc:	2107      	movs	r1, #7
 8008cbe:	68f8      	ldr	r0, [r7, #12]
 8008cc0:	f000 f994 	bl	8008fec <SDMMC_GetCmdResp1>
 8008cc4:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8008cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008cc8:	4618      	mov	r0, r3
 8008cca:	3728      	adds	r7, #40	; 0x28
 8008ccc:	46bd      	mov	sp, r7
 8008cce:	bd80      	pop	{r7, pc}

08008cd0 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8008cd0:	b580      	push	{r7, lr}
 8008cd2:	b088      	sub	sp, #32
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8008cd8:	2300      	movs	r3, #0
 8008cda:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8008cdc:	2300      	movs	r3, #0
 8008cde:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8008ce0:	2300      	movs	r3, #0
 8008ce2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008ce4:	2300      	movs	r3, #0
 8008ce6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008ce8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008cec:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008cee:	f107 0308 	add.w	r3, r7, #8
 8008cf2:	4619      	mov	r1, r3
 8008cf4:	6878      	ldr	r0, [r7, #4]
 8008cf6:	f7ff fe6b 	bl	80089d0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8008cfa:	6878      	ldr	r0, [r7, #4]
 8008cfc:	f000 fbb8 	bl	8009470 <SDMMC_GetCmdError>
 8008d00:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008d02:	69fb      	ldr	r3, [r7, #28]
}
 8008d04:	4618      	mov	r0, r3
 8008d06:	3720      	adds	r7, #32
 8008d08:	46bd      	mov	sp, r7
 8008d0a:	bd80      	pop	{r7, pc}

08008d0c <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8008d0c:	b580      	push	{r7, lr}
 8008d0e:	b088      	sub	sp, #32
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8008d14:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8008d18:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8008d1a:	2308      	movs	r3, #8
 8008d1c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008d1e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008d22:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008d24:	2300      	movs	r3, #0
 8008d26:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008d28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008d2c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008d2e:	f107 0308 	add.w	r3, r7, #8
 8008d32:	4619      	mov	r1, r3
 8008d34:	6878      	ldr	r0, [r7, #4]
 8008d36:	f7ff fe4b 	bl	80089d0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8008d3a:	6878      	ldr	r0, [r7, #4]
 8008d3c:	f000 fb4a 	bl	80093d4 <SDMMC_GetCmdResp7>
 8008d40:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008d42:	69fb      	ldr	r3, [r7, #28]
}
 8008d44:	4618      	mov	r0, r3
 8008d46:	3720      	adds	r7, #32
 8008d48:	46bd      	mov	sp, r7
 8008d4a:	bd80      	pop	{r7, pc}

08008d4c <SDMMC_CmdAppCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008d4c:	b580      	push	{r7, lr}
 8008d4e:	b088      	sub	sp, #32
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	6078      	str	r0, [r7, #4]
 8008d54:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8008d56:	683b      	ldr	r3, [r7, #0]
 8008d58:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8008d5a:	2337      	movs	r3, #55	; 0x37
 8008d5c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008d5e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008d62:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008d64:	2300      	movs	r3, #0
 8008d66:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008d68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008d6c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008d6e:	f107 0308 	add.w	r3, r7, #8
 8008d72:	4619      	mov	r1, r3
 8008d74:	6878      	ldr	r0, [r7, #4]
 8008d76:	f7ff fe2b 	bl	80089d0 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8008d7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d7e:	2137      	movs	r1, #55	; 0x37
 8008d80:	6878      	ldr	r0, [r7, #4]
 8008d82:	f000 f933 	bl	8008fec <SDMMC_GetCmdResp1>
 8008d86:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008d88:	69fb      	ldr	r3, [r7, #28]
}
 8008d8a:	4618      	mov	r0, r3
 8008d8c:	3720      	adds	r7, #32
 8008d8e:	46bd      	mov	sp, r7
 8008d90:	bd80      	pop	{r7, pc}

08008d92 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008d92:	b580      	push	{r7, lr}
 8008d94:	b088      	sub	sp, #32
 8008d96:	af00      	add	r7, sp, #0
 8008d98:	6078      	str	r0, [r7, #4]
 8008d9a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  sdmmc_cmdinit.Argument         = Argument;
 8008d9c:	683b      	ldr	r3, [r7, #0]
 8008d9e:	60bb      	str	r3, [r7, #8]
#else
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8008da0:	2329      	movs	r3, #41	; 0x29
 8008da2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008da4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008da8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008daa:	2300      	movs	r3, #0
 8008dac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008dae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008db2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008db4:	f107 0308 	add.w	r3, r7, #8
 8008db8:	4619      	mov	r1, r3
 8008dba:	6878      	ldr	r0, [r7, #4]
 8008dbc:	f7ff fe08 	bl	80089d0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8008dc0:	6878      	ldr	r0, [r7, #4]
 8008dc2:	f000 fa4f 	bl	8009264 <SDMMC_GetCmdResp3>
 8008dc6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008dc8:	69fb      	ldr	r3, [r7, #28]
}
 8008dca:	4618      	mov	r0, r3
 8008dcc:	3720      	adds	r7, #32
 8008dce:	46bd      	mov	sp, r7
 8008dd0:	bd80      	pop	{r7, pc}

08008dd2 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  BusWidth BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8008dd2:	b580      	push	{r7, lr}
 8008dd4:	b088      	sub	sp, #32
 8008dd6:	af00      	add	r7, sp, #0
 8008dd8:	6078      	str	r0, [r7, #4]
 8008dda:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8008ddc:	683b      	ldr	r3, [r7, #0]
 8008dde:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8008de0:	2306      	movs	r3, #6
 8008de2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008de4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008de8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008dea:	2300      	movs	r3, #0
 8008dec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008dee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008df2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008df4:	f107 0308 	add.w	r3, r7, #8
 8008df8:	4619      	mov	r1, r3
 8008dfa:	6878      	ldr	r0, [r7, #4]
 8008dfc:	f7ff fde8 	bl	80089d0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8008e00:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e04:	2106      	movs	r1, #6
 8008e06:	6878      	ldr	r0, [r7, #4]
 8008e08:	f000 f8f0 	bl	8008fec <SDMMC_GetCmdResp1>
 8008e0c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008e0e:	69fb      	ldr	r3, [r7, #28]
}
 8008e10:	4618      	mov	r0, r3
 8008e12:	3720      	adds	r7, #32
 8008e14:	46bd      	mov	sp, r7
 8008e16:	bd80      	pop	{r7, pc}

08008e18 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8008e18:	b580      	push	{r7, lr}
 8008e1a:	b088      	sub	sp, #32
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8008e20:	2300      	movs	r3, #0
 8008e22:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8008e24:	2333      	movs	r3, #51	; 0x33
 8008e26:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008e28:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008e2c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008e2e:	2300      	movs	r3, #0
 8008e30:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008e32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008e36:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008e38:	f107 0308 	add.w	r3, r7, #8
 8008e3c:	4619      	mov	r1, r3
 8008e3e:	6878      	ldr	r0, [r7, #4]
 8008e40:	f7ff fdc6 	bl	80089d0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8008e44:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e48:	2133      	movs	r1, #51	; 0x33
 8008e4a:	6878      	ldr	r0, [r7, #4]
 8008e4c:	f000 f8ce 	bl	8008fec <SDMMC_GetCmdResp1>
 8008e50:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008e52:	69fb      	ldr	r3, [r7, #28]
}
 8008e54:	4618      	mov	r0, r3
 8008e56:	3720      	adds	r7, #32
 8008e58:	46bd      	mov	sp, r7
 8008e5a:	bd80      	pop	{r7, pc}

08008e5c <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8008e5c:	b580      	push	{r7, lr}
 8008e5e:	b088      	sub	sp, #32
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8008e64:	2300      	movs	r3, #0
 8008e66:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8008e68:	2302      	movs	r3, #2
 8008e6a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8008e6c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8008e70:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008e72:	2300      	movs	r3, #0
 8008e74:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008e76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008e7a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008e7c:	f107 0308 	add.w	r3, r7, #8
 8008e80:	4619      	mov	r1, r3
 8008e82:	6878      	ldr	r0, [r7, #4]
 8008e84:	f7ff fda4 	bl	80089d0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8008e88:	6878      	ldr	r0, [r7, #4]
 8008e8a:	f000 f9a1 	bl	80091d0 <SDMMC_GetCmdResp2>
 8008e8e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008e90:	69fb      	ldr	r3, [r7, #28]
}
 8008e92:	4618      	mov	r0, r3
 8008e94:	3720      	adds	r7, #32
 8008e96:	46bd      	mov	sp, r7
 8008e98:	bd80      	pop	{r7, pc}

08008e9a <SDMMC_CmdSendCSD>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008e9a:	b580      	push	{r7, lr}
 8008e9c:	b088      	sub	sp, #32
 8008e9e:	af00      	add	r7, sp, #0
 8008ea0:	6078      	str	r0, [r7, #4]
 8008ea2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8008ea4:	683b      	ldr	r3, [r7, #0]
 8008ea6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8008ea8:	2309      	movs	r3, #9
 8008eaa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8008eac:	f44f 7340 	mov.w	r3, #768	; 0x300
 8008eb0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008eb2:	2300      	movs	r3, #0
 8008eb4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008eb6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008eba:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008ebc:	f107 0308 	add.w	r3, r7, #8
 8008ec0:	4619      	mov	r1, r3
 8008ec2:	6878      	ldr	r0, [r7, #4]
 8008ec4:	f7ff fd84 	bl	80089d0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8008ec8:	6878      	ldr	r0, [r7, #4]
 8008eca:	f000 f981 	bl	80091d0 <SDMMC_GetCmdResp2>
 8008ece:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008ed0:	69fb      	ldr	r3, [r7, #28]
}
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	3720      	adds	r7, #32
 8008ed6:	46bd      	mov	sp, r7
 8008ed8:	bd80      	pop	{r7, pc}

08008eda <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pRCA Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8008eda:	b580      	push	{r7, lr}
 8008edc:	b088      	sub	sp, #32
 8008ede:	af00      	add	r7, sp, #0
 8008ee0:	6078      	str	r0, [r7, #4]
 8008ee2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8008ee4:	2300      	movs	r3, #0
 8008ee6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8008ee8:	2303      	movs	r3, #3
 8008eea:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008eec:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008ef0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008ef2:	2300      	movs	r3, #0
 8008ef4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008ef6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008efa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008efc:	f107 0308 	add.w	r3, r7, #8
 8008f00:	4619      	mov	r1, r3
 8008f02:	6878      	ldr	r0, [r7, #4]
 8008f04:	f7ff fd64 	bl	80089d0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8008f08:	683a      	ldr	r2, [r7, #0]
 8008f0a:	2103      	movs	r1, #3
 8008f0c:	6878      	ldr	r0, [r7, #4]
 8008f0e:	f000 f9e9 	bl	80092e4 <SDMMC_GetCmdResp6>
 8008f12:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008f14:	69fb      	ldr	r3, [r7, #28]
}
 8008f16:	4618      	mov	r0, r3
 8008f18:	3720      	adds	r7, #32
 8008f1a:	46bd      	mov	sp, r7
 8008f1c:	bd80      	pop	{r7, pc}

08008f1e <SDMMC_CmdSendStatus>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008f1e:	b580      	push	{r7, lr}
 8008f20:	b088      	sub	sp, #32
 8008f22:	af00      	add	r7, sp, #0
 8008f24:	6078      	str	r0, [r7, #4]
 8008f26:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8008f28:	683b      	ldr	r3, [r7, #0]
 8008f2a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8008f2c:	230d      	movs	r3, #13
 8008f2e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008f30:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008f34:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008f36:	2300      	movs	r3, #0
 8008f38:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008f3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008f3e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008f40:	f107 0308 	add.w	r3, r7, #8
 8008f44:	4619      	mov	r1, r3
 8008f46:	6878      	ldr	r0, [r7, #4]
 8008f48:	f7ff fd42 	bl	80089d0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8008f4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008f50:	210d      	movs	r1, #13
 8008f52:	6878      	ldr	r0, [r7, #4]
 8008f54:	f000 f84a 	bl	8008fec <SDMMC_GetCmdResp1>
 8008f58:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008f5a:	69fb      	ldr	r3, [r7, #28]
}
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	3720      	adds	r7, #32
 8008f60:	46bd      	mov	sp, r7
 8008f62:	bd80      	pop	{r7, pc}

08008f64 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 8008f64:	b580      	push	{r7, lr}
 8008f66:	b088      	sub	sp, #32
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8008f6c:	2300      	movs	r3, #0
 8008f6e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 8008f70:	230d      	movs	r3, #13
 8008f72:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008f74:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008f78:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008f7a:	2300      	movs	r3, #0
 8008f7c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008f7e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008f82:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008f84:	f107 0308 	add.w	r3, r7, #8
 8008f88:	4619      	mov	r1, r3
 8008f8a:	6878      	ldr	r0, [r7, #4]
 8008f8c:	f7ff fd20 	bl	80089d0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 8008f90:	f241 3288 	movw	r2, #5000	; 0x1388
 8008f94:	210d      	movs	r1, #13
 8008f96:	6878      	ldr	r0, [r7, #4]
 8008f98:	f000 f828 	bl	8008fec <SDMMC_GetCmdResp1>
 8008f9c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008f9e:	69fb      	ldr	r3, [r7, #28]
}
 8008fa0:	4618      	mov	r0, r3
 8008fa2:	3720      	adds	r7, #32
 8008fa4:	46bd      	mov	sp, r7
 8008fa6:	bd80      	pop	{r7, pc}

08008fa8 <SDMMC_CmdVoltageSwitch>:
  *         condition register (OCR)
  * @param  None
  * @retval HAL status
  */
uint32_t SDMMC_CmdVoltageSwitch(SDMMC_TypeDef *SDMMCx)
{
 8008fa8:	b580      	push	{r7, lr}
 8008faa:	b088      	sub	sp, #32
 8008fac:	af00      	add	r7, sp, #0
 8008fae:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0x00000000;
 8008fb0:	2300      	movs	r3, #0
 8008fb2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 8008fb4:	230b      	movs	r3, #11
 8008fb6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008fb8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008fbc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008fbe:	2300      	movs	r3, #0
 8008fc0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008fc2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008fc6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008fc8:	f107 0308 	add.w	r3, r7, #8
 8008fcc:	4619      	mov	r1, r3
 8008fce:	6878      	ldr	r0, [r7, #4]
 8008fd0:	f7ff fcfe 	bl	80089d0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 8008fd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8008fd8:	210b      	movs	r1, #11
 8008fda:	6878      	ldr	r0, [r7, #4]
 8008fdc:	f000 f806 	bl	8008fec <SDMMC_GetCmdResp1>
 8008fe0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008fe2:	69fb      	ldr	r3, [r7, #28]
}
 8008fe4:	4618      	mov	r0, r3
 8008fe6:	3720      	adds	r7, #32
 8008fe8:	46bd      	mov	sp, r7
 8008fea:	bd80      	pop	{r7, pc}

08008fec <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8008fec:	b580      	push	{r7, lr}
 8008fee:	b088      	sub	sp, #32
 8008ff0:	af00      	add	r7, sp, #0
 8008ff2:	60f8      	str	r0, [r7, #12]
 8008ff4:	460b      	mov	r3, r1
 8008ff6:	607a      	str	r2, [r7, #4]
 8008ff8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8008ffa:	4b70      	ldr	r3, [pc, #448]	; (80091bc <SDMMC_GetCmdResp1+0x1d0>)
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	4a70      	ldr	r2, [pc, #448]	; (80091c0 <SDMMC_GetCmdResp1+0x1d4>)
 8009000:	fba2 2303 	umull	r2, r3, r2, r3
 8009004:	0a5a      	lsrs	r2, r3, #9
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	fb02 f303 	mul.w	r3, r2, r3
 800900c:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800900e:	69fb      	ldr	r3, [r7, #28]
 8009010:	1e5a      	subs	r2, r3, #1
 8009012:	61fa      	str	r2, [r7, #28]
 8009014:	2b00      	cmp	r3, #0
 8009016:	d102      	bne.n	800901e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009018:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800901c:	e0c9      	b.n	80091b2 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009022:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8009024:	69ba      	ldr	r2, [r7, #24]
 8009026:	4b67      	ldr	r3, [pc, #412]	; (80091c4 <SDMMC_GetCmdResp1+0x1d8>)
 8009028:	4013      	ands	r3, r2
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800902a:	2b00      	cmp	r3, #0
 800902c:	d0ef      	beq.n	800900e <SDMMC_GetCmdResp1+0x22>
 800902e:	69bb      	ldr	r3, [r7, #24]
 8009030:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8009034:	2b00      	cmp	r3, #0
 8009036:	d1ea      	bne.n	800900e <SDMMC_GetCmdResp1+0x22>
#else
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800903c:	f003 0304 	and.w	r3, r3, #4
 8009040:	2b00      	cmp	r3, #0
 8009042:	d004      	beq.n	800904e <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	2204      	movs	r2, #4
 8009048:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800904a:	2304      	movs	r3, #4
 800904c:	e0b1      	b.n	80091b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009052:	f003 0301 	and.w	r3, r3, #1
 8009056:	2b00      	cmp	r3, #0
 8009058:	d004      	beq.n	8009064 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	2201      	movs	r2, #1
 800905e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009060:	2301      	movs	r3, #1
 8009062:	e0a6      	b.n	80091b2 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	4a58      	ldr	r2, [pc, #352]	; (80091c8 <SDMMC_GetCmdResp1+0x1dc>)
 8009068:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800906a:	68f8      	ldr	r0, [r7, #12]
 800906c:	f7ff fcda 	bl	8008a24 <SDMMC_GetCommandResponse>
 8009070:	4603      	mov	r3, r0
 8009072:	461a      	mov	r2, r3
 8009074:	7afb      	ldrb	r3, [r7, #11]
 8009076:	4293      	cmp	r3, r2
 8009078:	d001      	beq.n	800907e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800907a:	2301      	movs	r3, #1
 800907c:	e099      	b.n	80091b2 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800907e:	2100      	movs	r1, #0
 8009080:	68f8      	ldr	r0, [r7, #12]
 8009082:	f7ff fcdc 	bl	8008a3e <SDMMC_GetResponse>
 8009086:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8009088:	697a      	ldr	r2, [r7, #20]
 800908a:	4b50      	ldr	r3, [pc, #320]	; (80091cc <SDMMC_GetCmdResp1+0x1e0>)
 800908c:	4013      	ands	r3, r2
 800908e:	2b00      	cmp	r3, #0
 8009090:	d101      	bne.n	8009096 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8009092:	2300      	movs	r3, #0
 8009094:	e08d      	b.n	80091b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8009096:	697b      	ldr	r3, [r7, #20]
 8009098:	2b00      	cmp	r3, #0
 800909a:	da02      	bge.n	80090a2 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800909c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80090a0:	e087      	b.n	80091b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80090a2:	697b      	ldr	r3, [r7, #20]
 80090a4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d001      	beq.n	80090b0 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80090ac:	2340      	movs	r3, #64	; 0x40
 80090ae:	e080      	b.n	80091b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80090b0:	697b      	ldr	r3, [r7, #20]
 80090b2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d001      	beq.n	80090be <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80090ba:	2380      	movs	r3, #128	; 0x80
 80090bc:	e079      	b.n	80091b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80090be:	697b      	ldr	r3, [r7, #20]
 80090c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d002      	beq.n	80090ce <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80090c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80090cc:	e071      	b.n	80091b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80090ce:	697b      	ldr	r3, [r7, #20]
 80090d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d002      	beq.n	80090de <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80090d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80090dc:	e069      	b.n	80091b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80090de:	697b      	ldr	r3, [r7, #20]
 80090e0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d002      	beq.n	80090ee <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80090e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80090ec:	e061      	b.n	80091b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80090ee:	697b      	ldr	r3, [r7, #20]
 80090f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d002      	beq.n	80090fe <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80090f8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80090fc:	e059      	b.n	80091b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80090fe:	697b      	ldr	r3, [r7, #20]
 8009100:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009104:	2b00      	cmp	r3, #0
 8009106:	d002      	beq.n	800910e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009108:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800910c:	e051      	b.n	80091b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800910e:	697b      	ldr	r3, [r7, #20]
 8009110:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009114:	2b00      	cmp	r3, #0
 8009116:	d002      	beq.n	800911e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009118:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800911c:	e049      	b.n	80091b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800911e:	697b      	ldr	r3, [r7, #20]
 8009120:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009124:	2b00      	cmp	r3, #0
 8009126:	d002      	beq.n	800912e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8009128:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800912c:	e041      	b.n	80091b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800912e:	697b      	ldr	r3, [r7, #20]
 8009130:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009134:	2b00      	cmp	r3, #0
 8009136:	d002      	beq.n	800913e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8009138:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800913c:	e039      	b.n	80091b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800913e:	697b      	ldr	r3, [r7, #20]
 8009140:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009144:	2b00      	cmp	r3, #0
 8009146:	d002      	beq.n	800914e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8009148:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800914c:	e031      	b.n	80091b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800914e:	697b      	ldr	r3, [r7, #20]
 8009150:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009154:	2b00      	cmp	r3, #0
 8009156:	d002      	beq.n	800915e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8009158:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800915c:	e029      	b.n	80091b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800915e:	697b      	ldr	r3, [r7, #20]
 8009160:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009164:	2b00      	cmp	r3, #0
 8009166:	d002      	beq.n	800916e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8009168:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800916c:	e021      	b.n	80091b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800916e:	697b      	ldr	r3, [r7, #20]
 8009170:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009174:	2b00      	cmp	r3, #0
 8009176:	d002      	beq.n	800917e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8009178:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800917c:	e019      	b.n	80091b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800917e:	697b      	ldr	r3, [r7, #20]
 8009180:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009184:	2b00      	cmp	r3, #0
 8009186:	d002      	beq.n	800918e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8009188:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800918c:	e011      	b.n	80091b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800918e:	697b      	ldr	r3, [r7, #20]
 8009190:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009194:	2b00      	cmp	r3, #0
 8009196:	d002      	beq.n	800919e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8009198:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800919c:	e009      	b.n	80091b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800919e:	697b      	ldr	r3, [r7, #20]
 80091a0:	f003 0308 	and.w	r3, r3, #8
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d002      	beq.n	80091ae <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80091a8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80091ac:	e001      	b.n	80091b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80091ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80091b2:	4618      	mov	r0, r3
 80091b4:	3720      	adds	r7, #32
 80091b6:	46bd      	mov	sp, r7
 80091b8:	bd80      	pop	{r7, pc}
 80091ba:	bf00      	nop
 80091bc:	20000000 	.word	0x20000000
 80091c0:	10624dd3 	.word	0x10624dd3
 80091c4:	00200045 	.word	0x00200045
 80091c8:	002000c5 	.word	0x002000c5
 80091cc:	fdffe008 	.word	0xfdffe008

080091d0 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 80091d0:	b480      	push	{r7}
 80091d2:	b085      	sub	sp, #20
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80091d8:	4b1f      	ldr	r3, [pc, #124]	; (8009258 <SDMMC_GetCmdResp2+0x88>)
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	4a1f      	ldr	r2, [pc, #124]	; (800925c <SDMMC_GetCmdResp2+0x8c>)
 80091de:	fba2 2303 	umull	r2, r3, r2, r3
 80091e2:	0a5b      	lsrs	r3, r3, #9
 80091e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80091e8:	fb02 f303 	mul.w	r3, r2, r3
 80091ec:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	1e5a      	subs	r2, r3, #1
 80091f2:	60fa      	str	r2, [r7, #12]
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d102      	bne.n	80091fe <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80091f8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80091fc:	e026      	b.n	800924c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009202:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009204:	68bb      	ldr	r3, [r7, #8]
 8009206:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800920a:	2b00      	cmp	r3, #0
 800920c:	d0ef      	beq.n	80091ee <SDMMC_GetCmdResp2+0x1e>
 800920e:	68bb      	ldr	r3, [r7, #8]
 8009210:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009214:	2b00      	cmp	r3, #0
 8009216:	d1ea      	bne.n	80091ee <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800921c:	f003 0304 	and.w	r3, r3, #4
 8009220:	2b00      	cmp	r3, #0
 8009222:	d004      	beq.n	800922e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	2204      	movs	r2, #4
 8009228:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800922a:	2304      	movs	r3, #4
 800922c:	e00e      	b.n	800924c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009232:	f003 0301 	and.w	r3, r3, #1
 8009236:	2b00      	cmp	r3, #0
 8009238:	d004      	beq.n	8009244 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	2201      	movs	r2, #1
 800923e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009240:	2301      	movs	r3, #1
 8009242:	e003      	b.n	800924c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	4a06      	ldr	r2, [pc, #24]	; (8009260 <SDMMC_GetCmdResp2+0x90>)
 8009248:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800924a:	2300      	movs	r3, #0
}
 800924c:	4618      	mov	r0, r3
 800924e:	3714      	adds	r7, #20
 8009250:	46bd      	mov	sp, r7
 8009252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009256:	4770      	bx	lr
 8009258:	20000000 	.word	0x20000000
 800925c:	10624dd3 	.word	0x10624dd3
 8009260:	002000c5 	.word	0x002000c5

08009264 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8009264:	b480      	push	{r7}
 8009266:	b085      	sub	sp, #20
 8009268:	af00      	add	r7, sp, #0
 800926a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800926c:	4b1a      	ldr	r3, [pc, #104]	; (80092d8 <SDMMC_GetCmdResp3+0x74>)
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	4a1a      	ldr	r2, [pc, #104]	; (80092dc <SDMMC_GetCmdResp3+0x78>)
 8009272:	fba2 2303 	umull	r2, r3, r2, r3
 8009276:	0a5b      	lsrs	r3, r3, #9
 8009278:	f241 3288 	movw	r2, #5000	; 0x1388
 800927c:	fb02 f303 	mul.w	r3, r2, r3
 8009280:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	1e5a      	subs	r2, r3, #1
 8009286:	60fa      	str	r2, [r7, #12]
 8009288:	2b00      	cmp	r3, #0
 800928a:	d102      	bne.n	8009292 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800928c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009290:	e01b      	b.n	80092ca <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009296:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009298:	68bb      	ldr	r3, [r7, #8]
 800929a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d0ef      	beq.n	8009282 <SDMMC_GetCmdResp3+0x1e>
 80092a2:	68bb      	ldr	r3, [r7, #8]
 80092a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d1ea      	bne.n	8009282 <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092b0:	f003 0304 	and.w	r3, r3, #4
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d004      	beq.n	80092c2 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	2204      	movs	r2, #4
 80092bc:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80092be:	2304      	movs	r3, #4
 80092c0:	e003      	b.n	80092ca <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	4a06      	ldr	r2, [pc, #24]	; (80092e0 <SDMMC_GetCmdResp3+0x7c>)
 80092c6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80092c8:	2300      	movs	r3, #0
}
 80092ca:	4618      	mov	r0, r3
 80092cc:	3714      	adds	r7, #20
 80092ce:	46bd      	mov	sp, r7
 80092d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d4:	4770      	bx	lr
 80092d6:	bf00      	nop
 80092d8:	20000000 	.word	0x20000000
 80092dc:	10624dd3 	.word	0x10624dd3
 80092e0:	002000c5 	.word	0x002000c5

080092e4 <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80092e4:	b580      	push	{r7, lr}
 80092e6:	b088      	sub	sp, #32
 80092e8:	af00      	add	r7, sp, #0
 80092ea:	60f8      	str	r0, [r7, #12]
 80092ec:	460b      	mov	r3, r1
 80092ee:	607a      	str	r2, [r7, #4]
 80092f0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80092f2:	4b35      	ldr	r3, [pc, #212]	; (80093c8 <SDMMC_GetCmdResp6+0xe4>)
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	4a35      	ldr	r2, [pc, #212]	; (80093cc <SDMMC_GetCmdResp6+0xe8>)
 80092f8:	fba2 2303 	umull	r2, r3, r2, r3
 80092fc:	0a5b      	lsrs	r3, r3, #9
 80092fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8009302:	fb02 f303 	mul.w	r3, r2, r3
 8009306:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8009308:	69fb      	ldr	r3, [r7, #28]
 800930a:	1e5a      	subs	r2, r3, #1
 800930c:	61fa      	str	r2, [r7, #28]
 800930e:	2b00      	cmp	r3, #0
 8009310:	d102      	bne.n	8009318 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009312:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009316:	e052      	b.n	80093be <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800931c:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800931e:	69bb      	ldr	r3, [r7, #24]
 8009320:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8009324:	2b00      	cmp	r3, #0
 8009326:	d0ef      	beq.n	8009308 <SDMMC_GetCmdResp6+0x24>
 8009328:	69bb      	ldr	r3, [r7, #24]
 800932a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800932e:	2b00      	cmp	r3, #0
 8009330:	d1ea      	bne.n	8009308 <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009336:	f003 0304 	and.w	r3, r3, #4
 800933a:	2b00      	cmp	r3, #0
 800933c:	d004      	beq.n	8009348 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	2204      	movs	r2, #4
 8009342:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009344:	2304      	movs	r3, #4
 8009346:	e03a      	b.n	80093be <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800934c:	f003 0301 	and.w	r3, r3, #1
 8009350:	2b00      	cmp	r3, #0
 8009352:	d004      	beq.n	800935e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	2201      	movs	r2, #1
 8009358:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800935a:	2301      	movs	r3, #1
 800935c:	e02f      	b.n	80093be <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800935e:	68f8      	ldr	r0, [r7, #12]
 8009360:	f7ff fb60 	bl	8008a24 <SDMMC_GetCommandResponse>
 8009364:	4603      	mov	r3, r0
 8009366:	461a      	mov	r2, r3
 8009368:	7afb      	ldrb	r3, [r7, #11]
 800936a:	4293      	cmp	r3, r2
 800936c:	d001      	beq.n	8009372 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800936e:	2301      	movs	r3, #1
 8009370:	e025      	b.n	80093be <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	4a16      	ldr	r2, [pc, #88]	; (80093d0 <SDMMC_GetCmdResp6+0xec>)
 8009376:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8009378:	2100      	movs	r1, #0
 800937a:	68f8      	ldr	r0, [r7, #12]
 800937c:	f7ff fb5f 	bl	8008a3e <SDMMC_GetResponse>
 8009380:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8009382:	697b      	ldr	r3, [r7, #20]
 8009384:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8009388:	2b00      	cmp	r3, #0
 800938a:	d106      	bne.n	800939a <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800938c:	697b      	ldr	r3, [r7, #20]
 800938e:	0c1b      	lsrs	r3, r3, #16
 8009390:	b29a      	uxth	r2, r3
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 8009396:	2300      	movs	r3, #0
 8009398:	e011      	b.n	80093be <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800939a:	697b      	ldr	r3, [r7, #20]
 800939c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d002      	beq.n	80093aa <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80093a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80093a8:	e009      	b.n	80093be <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80093aa:	697b      	ldr	r3, [r7, #20]
 80093ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d002      	beq.n	80093ba <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80093b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80093b8:	e001      	b.n	80093be <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80093ba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80093be:	4618      	mov	r0, r3
 80093c0:	3720      	adds	r7, #32
 80093c2:	46bd      	mov	sp, r7
 80093c4:	bd80      	pop	{r7, pc}
 80093c6:	bf00      	nop
 80093c8:	20000000 	.word	0x20000000
 80093cc:	10624dd3 	.word	0x10624dd3
 80093d0:	002000c5 	.word	0x002000c5

080093d4 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 80093d4:	b480      	push	{r7}
 80093d6:	b085      	sub	sp, #20
 80093d8:	af00      	add	r7, sp, #0
 80093da:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80093dc:	4b22      	ldr	r3, [pc, #136]	; (8009468 <SDMMC_GetCmdResp7+0x94>)
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	4a22      	ldr	r2, [pc, #136]	; (800946c <SDMMC_GetCmdResp7+0x98>)
 80093e2:	fba2 2303 	umull	r2, r3, r2, r3
 80093e6:	0a5b      	lsrs	r3, r3, #9
 80093e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80093ec:	fb02 f303 	mul.w	r3, r2, r3
 80093f0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	1e5a      	subs	r2, r3, #1
 80093f6:	60fa      	str	r2, [r7, #12]
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d102      	bne.n	8009402 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80093fc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009400:	e02c      	b.n	800945c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009406:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009408:	68bb      	ldr	r3, [r7, #8]
 800940a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800940e:	2b00      	cmp	r3, #0
 8009410:	d0ef      	beq.n	80093f2 <SDMMC_GetCmdResp7+0x1e>
 8009412:	68bb      	ldr	r3, [r7, #8]
 8009414:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009418:	2b00      	cmp	r3, #0
 800941a:	d1ea      	bne.n	80093f2 <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009420:	f003 0304 	and.w	r3, r3, #4
 8009424:	2b00      	cmp	r3, #0
 8009426:	d004      	beq.n	8009432 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	2204      	movs	r2, #4
 800942c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800942e:	2304      	movs	r3, #4
 8009430:	e014      	b.n	800945c <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009436:	f003 0301 	and.w	r3, r3, #1
 800943a:	2b00      	cmp	r3, #0
 800943c:	d004      	beq.n	8009448 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	2201      	movs	r2, #1
 8009442:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009444:	2301      	movs	r3, #1
 8009446:	e009      	b.n	800945c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800944c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009450:	2b00      	cmp	r3, #0
 8009452:	d002      	beq.n	800945a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	2240      	movs	r2, #64	; 0x40
 8009458:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800945a:	2300      	movs	r3, #0

}
 800945c:	4618      	mov	r0, r3
 800945e:	3714      	adds	r7, #20
 8009460:	46bd      	mov	sp, r7
 8009462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009466:	4770      	bx	lr
 8009468:	20000000 	.word	0x20000000
 800946c:	10624dd3 	.word	0x10624dd3

08009470 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8009470:	b480      	push	{r7}
 8009472:	b085      	sub	sp, #20
 8009474:	af00      	add	r7, sp, #0
 8009476:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009478:	4b11      	ldr	r3, [pc, #68]	; (80094c0 <SDMMC_GetCmdError+0x50>)
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	4a11      	ldr	r2, [pc, #68]	; (80094c4 <SDMMC_GetCmdError+0x54>)
 800947e:	fba2 2303 	umull	r2, r3, r2, r3
 8009482:	0a5b      	lsrs	r3, r3, #9
 8009484:	f241 3288 	movw	r2, #5000	; 0x1388
 8009488:	fb02 f303 	mul.w	r3, r2, r3
 800948c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	1e5a      	subs	r2, r3, #1
 8009492:	60fa      	str	r2, [r7, #12]
 8009494:	2b00      	cmp	r3, #0
 8009496:	d102      	bne.n	800949e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009498:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800949c:	e009      	b.n	80094b2 <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d0f1      	beq.n	800948e <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	4a06      	ldr	r2, [pc, #24]	; (80094c8 <SDMMC_GetCmdError+0x58>)
 80094ae:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 80094b0:	2300      	movs	r3, #0
}
 80094b2:	4618      	mov	r0, r3
 80094b4:	3714      	adds	r7, #20
 80094b6:	46bd      	mov	sp, r7
 80094b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094bc:	4770      	bx	lr
 80094be:	bf00      	nop
 80094c0:	20000000 	.word	0x20000000
 80094c4:	10624dd3 	.word	0x10624dd3
 80094c8:	002000c5 	.word	0x002000c5

080094cc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80094cc:	b580      	push	{r7, lr}
 80094ce:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80094d0:	4904      	ldr	r1, [pc, #16]	; (80094e4 <MX_FATFS_Init+0x18>)
 80094d2:	4805      	ldr	r0, [pc, #20]	; (80094e8 <MX_FATFS_Init+0x1c>)
 80094d4:	f000 faa6 	bl	8009a24 <FATFS_LinkDriver>
 80094d8:	4603      	mov	r3, r0
 80094da:	461a      	mov	r2, r3
 80094dc:	4b03      	ldr	r3, [pc, #12]	; (80094ec <MX_FATFS_Init+0x20>)
 80094de:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80094e0:	bf00      	nop
 80094e2:	bd80      	pop	{r7, pc}
 80094e4:	200003d4 	.word	0x200003d4
 80094e8:	0800d808 	.word	0x0800d808
 80094ec:	200003d0 	.word	0x200003d0

080094f0 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 80094f0:	b580      	push	{r7, lr}
 80094f2:	b082      	sub	sp, #8
 80094f4:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80094f6:	2300      	movs	r3, #0
 80094f8:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80094fa:	f000 f885 	bl	8009608 <BSP_SD_IsDetected>
 80094fe:	4603      	mov	r3, r0
 8009500:	2b01      	cmp	r3, #1
 8009502:	d001      	beq.n	8009508 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8009504:	2302      	movs	r3, #2
 8009506:	e012      	b.n	800952e <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8009508:	480b      	ldr	r0, [pc, #44]	; (8009538 <BSP_SD_Init+0x48>)
 800950a:	f7fd fa33 	bl	8006974 <HAL_SD_Init>
 800950e:	4603      	mov	r3, r0
 8009510:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8009512:	79fb      	ldrb	r3, [r7, #7]
 8009514:	2b00      	cmp	r3, #0
 8009516:	d109      	bne.n	800952c <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8009518:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800951c:	4806      	ldr	r0, [pc, #24]	; (8009538 <BSP_SD_Init+0x48>)
 800951e:	f7fe f8e7 	bl	80076f0 <HAL_SD_ConfigWideBusOperation>
 8009522:	4603      	mov	r3, r0
 8009524:	2b00      	cmp	r3, #0
 8009526:	d001      	beq.n	800952c <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8009528:	2301      	movs	r3, #1
 800952a:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800952c:	79fb      	ldrb	r3, [r7, #7]
}
 800952e:	4618      	mov	r0, r3
 8009530:	3708      	adds	r7, #8
 8009532:	46bd      	mov	sp, r7
 8009534:	bd80      	pop	{r7, pc}
 8009536:	bf00      	nop
 8009538:	20000234 	.word	0x20000234

0800953c <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800953c:	b580      	push	{r7, lr}
 800953e:	b086      	sub	sp, #24
 8009540:	af00      	add	r7, sp, #0
 8009542:	60f8      	str	r0, [r7, #12]
 8009544:	60b9      	str	r1, [r7, #8]
 8009546:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8009548:	2300      	movs	r3, #0
 800954a:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	68ba      	ldr	r2, [r7, #8]
 8009550:	68f9      	ldr	r1, [r7, #12]
 8009552:	4806      	ldr	r0, [pc, #24]	; (800956c <BSP_SD_ReadBlocks_DMA+0x30>)
 8009554:	f7fd fb36 	bl	8006bc4 <HAL_SD_ReadBlocks_DMA>
 8009558:	4603      	mov	r3, r0
 800955a:	2b00      	cmp	r3, #0
 800955c:	d001      	beq.n	8009562 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800955e:	2301      	movs	r3, #1
 8009560:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8009562:	7dfb      	ldrb	r3, [r7, #23]
}
 8009564:	4618      	mov	r0, r3
 8009566:	3718      	adds	r7, #24
 8009568:	46bd      	mov	sp, r7
 800956a:	bd80      	pop	{r7, pc}
 800956c:	20000234 	.word	0x20000234

08009570 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8009570:	b580      	push	{r7, lr}
 8009572:	b086      	sub	sp, #24
 8009574:	af00      	add	r7, sp, #0
 8009576:	60f8      	str	r0, [r7, #12]
 8009578:	60b9      	str	r1, [r7, #8]
 800957a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800957c:	2300      	movs	r3, #0
 800957e:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	68ba      	ldr	r2, [r7, #8]
 8009584:	68f9      	ldr	r1, [r7, #12]
 8009586:	4806      	ldr	r0, [pc, #24]	; (80095a0 <BSP_SD_WriteBlocks_DMA+0x30>)
 8009588:	f7fd fbc4 	bl	8006d14 <HAL_SD_WriteBlocks_DMA>
 800958c:	4603      	mov	r3, r0
 800958e:	2b00      	cmp	r3, #0
 8009590:	d001      	beq.n	8009596 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8009592:	2301      	movs	r3, #1
 8009594:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8009596:	7dfb      	ldrb	r3, [r7, #23]
}
 8009598:	4618      	mov	r0, r3
 800959a:	3718      	adds	r7, #24
 800959c:	46bd      	mov	sp, r7
 800959e:	bd80      	pop	{r7, pc}
 80095a0:	20000234 	.word	0x20000234

080095a4 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80095a4:	b580      	push	{r7, lr}
 80095a6:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80095a8:	4805      	ldr	r0, [pc, #20]	; (80095c0 <BSP_SD_GetCardState+0x1c>)
 80095aa:	f7fe f9b5 	bl	8007918 <HAL_SD_GetCardState>
 80095ae:	4603      	mov	r3, r0
 80095b0:	2b04      	cmp	r3, #4
 80095b2:	bf14      	ite	ne
 80095b4:	2301      	movne	r3, #1
 80095b6:	2300      	moveq	r3, #0
 80095b8:	b2db      	uxtb	r3, r3
}
 80095ba:	4618      	mov	r0, r3
 80095bc:	bd80      	pop	{r7, pc}
 80095be:	bf00      	nop
 80095c0:	20000234 	.word	0x20000234

080095c4 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(BSP_SD_CardInfo *CardInfo)
{
 80095c4:	b580      	push	{r7, lr}
 80095c6:	b082      	sub	sp, #8
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 80095cc:	6879      	ldr	r1, [r7, #4]
 80095ce:	4803      	ldr	r0, [pc, #12]	; (80095dc <BSP_SD_GetCardInfo+0x18>)
 80095d0:	f7fe f862 	bl	8007698 <HAL_SD_GetCardInfo>
}
 80095d4:	bf00      	nop
 80095d6:	3708      	adds	r7, #8
 80095d8:	46bd      	mov	sp, r7
 80095da:	bd80      	pop	{r7, pc}
 80095dc:	20000234 	.word	0x20000234

080095e0 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 80095e0:	b580      	push	{r7, lr}
 80095e2:	b082      	sub	sp, #8
 80095e4:	af00      	add	r7, sp, #0
 80095e6:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 80095e8:	f000 f9ac 	bl	8009944 <BSP_SD_WriteCpltCallback>
}
 80095ec:	bf00      	nop
 80095ee:	3708      	adds	r7, #8
 80095f0:	46bd      	mov	sp, r7
 80095f2:	bd80      	pop	{r7, pc}

080095f4 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 80095f4:	b580      	push	{r7, lr}
 80095f6:	b082      	sub	sp, #8
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 80095fc:	f000 f9b4 	bl	8009968 <BSP_SD_ReadCpltCallback>
}
 8009600:	bf00      	nop
 8009602:	3708      	adds	r7, #8
 8009604:	46bd      	mov	sp, r7
 8009606:	bd80      	pop	{r7, pc}

08009608 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8009608:	b580      	push	{r7, lr}
 800960a:	b082      	sub	sp, #8
 800960c:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800960e:	2301      	movs	r3, #1
 8009610:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8009612:	f000 f80b 	bl	800962c <BSP_PlatformIsDetected>
 8009616:	4603      	mov	r3, r0
 8009618:	2b00      	cmp	r3, #0
 800961a:	d101      	bne.n	8009620 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800961c:	2300      	movs	r3, #0
 800961e:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8009620:	79fb      	ldrb	r3, [r7, #7]
 8009622:	b2db      	uxtb	r3, r3
}
 8009624:	4618      	mov	r0, r3
 8009626:	3708      	adds	r7, #8
 8009628:	46bd      	mov	sp, r7
 800962a:	bd80      	pop	{r7, pc}

0800962c <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800962c:	b580      	push	{r7, lr}
 800962e:	b082      	sub	sp, #8
 8009630:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8009632:	2301      	movs	r3, #1
 8009634:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8009636:	2180      	movs	r1, #128	; 0x80
 8009638:	4806      	ldr	r0, [pc, #24]	; (8009654 <BSP_PlatformIsDetected+0x28>)
 800963a:	f7fa fbe7 	bl	8003e0c <HAL_GPIO_ReadPin>
 800963e:	4603      	mov	r3, r0
 8009640:	2b00      	cmp	r3, #0
 8009642:	d001      	beq.n	8009648 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 8009644:	2300      	movs	r3, #0
 8009646:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8009648:	79fb      	ldrb	r3, [r7, #7]
}
 800964a:	4618      	mov	r0, r3
 800964c:	3708      	adds	r7, #8
 800964e:	46bd      	mov	sp, r7
 8009650:	bd80      	pop	{r7, pc}
 8009652:	bf00      	nop
 8009654:	48000800 	.word	0x48000800

08009658 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8009658:	b580      	push	{r7, lr}
 800965a:	b084      	sub	sp, #16
 800965c:	af00      	add	r7, sp, #0
 800965e:	6078      	str	r0, [r7, #4]
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
  while( osKernelSysTick() - timer < timeout)
#else
  timer = osKernelGetTickCount();
 8009660:	f000 faa0 	bl	8009ba4 <osKernelGetTickCount>
 8009664:	60f8      	str	r0, [r7, #12]
  while( osKernelGetTickCount() - timer < timeout)
 8009666:	e006      	b.n	8009676 <SD_CheckStatusWithTimeout+0x1e>
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8009668:	f7ff ff9c 	bl	80095a4 <BSP_SD_GetCardState>
 800966c:	4603      	mov	r3, r0
 800966e:	2b00      	cmp	r3, #0
 8009670:	d101      	bne.n	8009676 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8009672:	2300      	movs	r3, #0
 8009674:	e009      	b.n	800968a <SD_CheckStatusWithTimeout+0x32>
  while( osKernelGetTickCount() - timer < timeout)
 8009676:	f000 fa95 	bl	8009ba4 <osKernelGetTickCount>
 800967a:	4602      	mov	r2, r0
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	1ad3      	subs	r3, r2, r3
 8009680:	687a      	ldr	r2, [r7, #4]
 8009682:	429a      	cmp	r2, r3
 8009684:	d8f0      	bhi.n	8009668 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8009686:	f04f 33ff 	mov.w	r3, #4294967295
}
 800968a:	4618      	mov	r0, r3
 800968c:	3710      	adds	r7, #16
 800968e:	46bd      	mov	sp, r7
 8009690:	bd80      	pop	{r7, pc}
	...

08009694 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8009694:	b580      	push	{r7, lr}
 8009696:	b082      	sub	sp, #8
 8009698:	af00      	add	r7, sp, #0
 800969a:	4603      	mov	r3, r0
 800969c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800969e:	4b0b      	ldr	r3, [pc, #44]	; (80096cc <SD_CheckStatus+0x38>)
 80096a0:	2201      	movs	r2, #1
 80096a2:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80096a4:	f7ff ff7e 	bl	80095a4 <BSP_SD_GetCardState>
 80096a8:	4603      	mov	r3, r0
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d107      	bne.n	80096be <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80096ae:	4b07      	ldr	r3, [pc, #28]	; (80096cc <SD_CheckStatus+0x38>)
 80096b0:	781b      	ldrb	r3, [r3, #0]
 80096b2:	b2db      	uxtb	r3, r3
 80096b4:	f023 0301 	bic.w	r3, r3, #1
 80096b8:	b2da      	uxtb	r2, r3
 80096ba:	4b04      	ldr	r3, [pc, #16]	; (80096cc <SD_CheckStatus+0x38>)
 80096bc:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80096be:	4b03      	ldr	r3, [pc, #12]	; (80096cc <SD_CheckStatus+0x38>)
 80096c0:	781b      	ldrb	r3, [r3, #0]
 80096c2:	b2db      	uxtb	r3, r3
}
 80096c4:	4618      	mov	r0, r3
 80096c6:	3708      	adds	r7, #8
 80096c8:	46bd      	mov	sp, r7
 80096ca:	bd80      	pop	{r7, pc}
 80096cc:	20000009 	.word	0x20000009

080096d0 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80096d0:	b580      	push	{r7, lr}
 80096d2:	b082      	sub	sp, #8
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	4603      	mov	r3, r0
 80096d8:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 80096da:	4b1c      	ldr	r3, [pc, #112]	; (800974c <SD_initialize+0x7c>)
 80096dc:	2201      	movs	r2, #1
 80096de:	701a      	strb	r2, [r3, #0]
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
#else
  if(osKernelGetState() == osKernelRunning)
 80096e0:	f000 fa18 	bl	8009b14 <osKernelGetState>
 80096e4:	4603      	mov	r3, r0
 80096e6:	2b02      	cmp	r3, #2
 80096e8:	d129      	bne.n	800973e <SD_initialize+0x6e>
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 80096ea:	f7ff ff01 	bl	80094f0 <BSP_SD_Init>
 80096ee:	4603      	mov	r3, r0
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d107      	bne.n	8009704 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 80096f4:	79fb      	ldrb	r3, [r7, #7]
 80096f6:	4618      	mov	r0, r3
 80096f8:	f7ff ffcc 	bl	8009694 <SD_CheckStatus>
 80096fc:	4603      	mov	r3, r0
 80096fe:	461a      	mov	r2, r3
 8009700:	4b12      	ldr	r3, [pc, #72]	; (800974c <SD_initialize+0x7c>)
 8009702:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 8009704:	4b11      	ldr	r3, [pc, #68]	; (800974c <SD_initialize+0x7c>)
 8009706:	781b      	ldrb	r3, [r3, #0]
 8009708:	b2db      	uxtb	r3, r3
 800970a:	2b01      	cmp	r3, #1
 800970c:	d017      	beq.n	800973e <SD_initialize+0x6e>
    {
      if (SDQueueID == NULL)
 800970e:	4b10      	ldr	r3, [pc, #64]	; (8009750 <SD_initialize+0x80>)
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	2b00      	cmp	r3, #0
 8009714:	d107      	bne.n	8009726 <SD_initialize+0x56>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
 8009716:	2200      	movs	r2, #0
 8009718:	2102      	movs	r1, #2
 800971a:	200a      	movs	r0, #10
 800971c:	f000 fcaa 	bl	800a074 <osMessageQueueNew>
 8009720:	4603      	mov	r3, r0
 8009722:	4a0b      	ldr	r2, [pc, #44]	; (8009750 <SD_initialize+0x80>)
 8009724:	6013      	str	r3, [r2, #0]
#endif
      }

      if (SDQueueID == NULL)
 8009726:	4b0a      	ldr	r3, [pc, #40]	; (8009750 <SD_initialize+0x80>)
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	2b00      	cmp	r3, #0
 800972c:	d107      	bne.n	800973e <SD_initialize+0x6e>
      {
        Stat |= STA_NOINIT;
 800972e:	4b07      	ldr	r3, [pc, #28]	; (800974c <SD_initialize+0x7c>)
 8009730:	781b      	ldrb	r3, [r3, #0]
 8009732:	b2db      	uxtb	r3, r3
 8009734:	f043 0301 	orr.w	r3, r3, #1
 8009738:	b2da      	uxtb	r2, r3
 800973a:	4b04      	ldr	r3, [pc, #16]	; (800974c <SD_initialize+0x7c>)
 800973c:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 800973e:	4b03      	ldr	r3, [pc, #12]	; (800974c <SD_initialize+0x7c>)
 8009740:	781b      	ldrb	r3, [r3, #0]
 8009742:	b2db      	uxtb	r3, r3
}
 8009744:	4618      	mov	r0, r3
 8009746:	3708      	adds	r7, #8
 8009748:	46bd      	mov	sp, r7
 800974a:	bd80      	pop	{r7, pc}
 800974c:	20000009 	.word	0x20000009
 8009750:	200003d8 	.word	0x200003d8

08009754 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8009754:	b580      	push	{r7, lr}
 8009756:	b082      	sub	sp, #8
 8009758:	af00      	add	r7, sp, #0
 800975a:	4603      	mov	r3, r0
 800975c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800975e:	79fb      	ldrb	r3, [r7, #7]
 8009760:	4618      	mov	r0, r3
 8009762:	f7ff ff97 	bl	8009694 <SD_CheckStatus>
 8009766:	4603      	mov	r3, r0
}
 8009768:	4618      	mov	r0, r3
 800976a:	3708      	adds	r7, #8
 800976c:	46bd      	mov	sp, r7
 800976e:	bd80      	pop	{r7, pc}

08009770 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8009770:	b580      	push	{r7, lr}
 8009772:	b088      	sub	sp, #32
 8009774:	af00      	add	r7, sp, #0
 8009776:	60b9      	str	r1, [r7, #8]
 8009778:	607a      	str	r2, [r7, #4]
 800977a:	603b      	str	r3, [r7, #0]
 800977c:	4603      	mov	r3, r0
 800977e:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 8009780:	2301      	movs	r3, #1
 8009782:	77fb      	strb	r3, [r7, #31]
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8009784:	f247 5030 	movw	r0, #30000	; 0x7530
 8009788:	f7ff ff66 	bl	8009658 <SD_CheckStatusWithTimeout>
 800978c:	4603      	mov	r3, r0
 800978e:	2b00      	cmp	r3, #0
 8009790:	da01      	bge.n	8009796 <SD_read+0x26>
  {
    return res;
 8009792:	7ffb      	ldrb	r3, [r7, #31]
 8009794:	e02f      	b.n	80097f6 <SD_read+0x86>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 8009796:	683a      	ldr	r2, [r7, #0]
 8009798:	6879      	ldr	r1, [r7, #4]
 800979a:	68b8      	ldr	r0, [r7, #8]
 800979c:	f7ff fece 	bl	800953c <BSP_SD_ReadBlocks_DMA>
 80097a0:	4603      	mov	r3, r0
 80097a2:	77bb      	strb	r3, [r7, #30]

    if (ret == MSD_OK) {
 80097a4:	7fbb      	ldrb	r3, [r7, #30]
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d124      	bne.n	80097f4 <SD_read+0x84>
      {
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
#else
          status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 80097aa:	4b15      	ldr	r3, [pc, #84]	; (8009800 <SD_read+0x90>)
 80097ac:	6818      	ldr	r0, [r3, #0]
 80097ae:	f107 0112 	add.w	r1, r7, #18
 80097b2:	f247 5330 	movw	r3, #30000	; 0x7530
 80097b6:	2200      	movs	r2, #0
 80097b8:	f000 fd30 	bl	800a21c <osMessageQueueGet>
 80097bc:	61b8      	str	r0, [r7, #24]
          if ((status == osOK) && (event == READ_CPLT_MSG))
 80097be:	69bb      	ldr	r3, [r7, #24]
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d117      	bne.n	80097f4 <SD_read+0x84>
 80097c4:	8a7b      	ldrh	r3, [r7, #18]
 80097c6:	2b01      	cmp	r3, #1
 80097c8:	d114      	bne.n	80097f4 <SD_read+0x84>
          {
            timer = osKernelGetTickCount();
 80097ca:	f000 f9eb 	bl	8009ba4 <osKernelGetTickCount>
 80097ce:	6178      	str	r0, [r7, #20]
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 80097d0:	e007      	b.n	80097e2 <SD_read+0x72>
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80097d2:	f7ff fee7 	bl	80095a4 <BSP_SD_GetCardState>
 80097d6:	4603      	mov	r3, r0
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d102      	bne.n	80097e2 <SD_read+0x72>
              {
                res = RES_OK;
 80097dc:	2300      	movs	r3, #0
 80097de:	77fb      	strb	r3, [r7, #31]
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 80097e0:	e008      	b.n	80097f4 <SD_read+0x84>
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 80097e2:	f000 f9df 	bl	8009ba4 <osKernelGetTickCount>
 80097e6:	4602      	mov	r2, r0
 80097e8:	697b      	ldr	r3, [r7, #20]
 80097ea:	1ad3      	subs	r3, r2, r3
 80097ec:	f247 522f 	movw	r2, #29999	; 0x752f
 80097f0:	4293      	cmp	r3, r2
 80097f2:	d9ee      	bls.n	80097d2 <SD_read+0x62>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 80097f4:	7ffb      	ldrb	r3, [r7, #31]
}
 80097f6:	4618      	mov	r0, r3
 80097f8:	3720      	adds	r7, #32
 80097fa:	46bd      	mov	sp, r7
 80097fc:	bd80      	pop	{r7, pc}
 80097fe:	bf00      	nop
 8009800:	200003d8 	.word	0x200003d8

08009804 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8009804:	b580      	push	{r7, lr}
 8009806:	b088      	sub	sp, #32
 8009808:	af00      	add	r7, sp, #0
 800980a:	60b9      	str	r1, [r7, #8]
 800980c:	607a      	str	r2, [r7, #4]
 800980e:	603b      	str	r3, [r7, #0]
 8009810:	4603      	mov	r3, r0
 8009812:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8009814:	2301      	movs	r3, #1
 8009816:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8009818:	f247 5030 	movw	r0, #30000	; 0x7530
 800981c:	f7ff ff1c 	bl	8009658 <SD_CheckStatusWithTimeout>
 8009820:	4603      	mov	r3, r0
 8009822:	2b00      	cmp	r3, #0
 8009824:	da01      	bge.n	800982a <SD_write+0x26>
  {
    return res;
 8009826:	7ffb      	ldrb	r3, [r7, #31]
 8009828:	e02d      	b.n	8009886 <SD_write+0x82>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800982a:	683a      	ldr	r2, [r7, #0]
 800982c:	6879      	ldr	r1, [r7, #4]
 800982e:	68b8      	ldr	r0, [r7, #8]
 8009830:	f7ff fe9e 	bl	8009570 <BSP_SD_WriteBlocks_DMA>
 8009834:	4603      	mov	r3, r0
 8009836:	2b00      	cmp	r3, #0
 8009838:	d124      	bne.n	8009884 <SD_write+0x80>
    if (event.status == osEventMessage)
    {
      if (event.value.v == WRITE_CPLT_MSG)
      {
#else
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 800983a:	4b15      	ldr	r3, [pc, #84]	; (8009890 <SD_write+0x8c>)
 800983c:	6818      	ldr	r0, [r3, #0]
 800983e:	f107 0112 	add.w	r1, r7, #18
 8009842:	f247 5330 	movw	r3, #30000	; 0x7530
 8009846:	2200      	movs	r2, #0
 8009848:	f000 fce8 	bl	800a21c <osMessageQueueGet>
 800984c:	61b8      	str	r0, [r7, #24]
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
 800984e:	69bb      	ldr	r3, [r7, #24]
 8009850:	2b00      	cmp	r3, #0
 8009852:	d117      	bne.n	8009884 <SD_write+0x80>
 8009854:	8a7b      	ldrh	r3, [r7, #18]
 8009856:	2b02      	cmp	r3, #2
 8009858:	d114      	bne.n	8009884 <SD_write+0x80>
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
#else
        timer = osKernelGetTickCount();
 800985a:	f000 f9a3 	bl	8009ba4 <osKernelGetTickCount>
 800985e:	6178      	str	r0, [r7, #20]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 8009860:	e007      	b.n	8009872 <SD_write+0x6e>
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8009862:	f7ff fe9f 	bl	80095a4 <BSP_SD_GetCardState>
 8009866:	4603      	mov	r3, r0
 8009868:	2b00      	cmp	r3, #0
 800986a:	d102      	bne.n	8009872 <SD_write+0x6e>
          {
            res = RES_OK;
 800986c:	2300      	movs	r3, #0
 800986e:	77fb      	strb	r3, [r7, #31]
            break;
 8009870:	e008      	b.n	8009884 <SD_write+0x80>
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 8009872:	f000 f997 	bl	8009ba4 <osKernelGetTickCount>
 8009876:	4602      	mov	r2, r0
 8009878:	697b      	ldr	r3, [r7, #20]
 800987a:	1ad3      	subs	r3, r2, r3
 800987c:	f247 522f 	movw	r2, #29999	; 0x752f
 8009880:	4293      	cmp	r3, r2
 8009882:	d9ee      	bls.n	8009862 <SD_write+0x5e>
    }

  }
#endif

  return res;
 8009884:	7ffb      	ldrb	r3, [r7, #31]
}
 8009886:	4618      	mov	r0, r3
 8009888:	3720      	adds	r7, #32
 800988a:	46bd      	mov	sp, r7
 800988c:	bd80      	pop	{r7, pc}
 800988e:	bf00      	nop
 8009890:	200003d8 	.word	0x200003d8

08009894 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8009894:	b580      	push	{r7, lr}
 8009896:	b08c      	sub	sp, #48	; 0x30
 8009898:	af00      	add	r7, sp, #0
 800989a:	4603      	mov	r3, r0
 800989c:	603a      	str	r2, [r7, #0]
 800989e:	71fb      	strb	r3, [r7, #7]
 80098a0:	460b      	mov	r3, r1
 80098a2:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80098a4:	2301      	movs	r3, #1
 80098a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80098aa:	4b25      	ldr	r3, [pc, #148]	; (8009940 <SD_ioctl+0xac>)
 80098ac:	781b      	ldrb	r3, [r3, #0]
 80098ae:	b2db      	uxtb	r3, r3
 80098b0:	f003 0301 	and.w	r3, r3, #1
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d001      	beq.n	80098bc <SD_ioctl+0x28>
 80098b8:	2303      	movs	r3, #3
 80098ba:	e03c      	b.n	8009936 <SD_ioctl+0xa2>

  switch (cmd)
 80098bc:	79bb      	ldrb	r3, [r7, #6]
 80098be:	2b03      	cmp	r3, #3
 80098c0:	d834      	bhi.n	800992c <SD_ioctl+0x98>
 80098c2:	a201      	add	r2, pc, #4	; (adr r2, 80098c8 <SD_ioctl+0x34>)
 80098c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098c8:	080098d9 	.word	0x080098d9
 80098cc:	080098e1 	.word	0x080098e1
 80098d0:	080098f9 	.word	0x080098f9
 80098d4:	08009913 	.word	0x08009913
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80098d8:	2300      	movs	r3, #0
 80098da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80098de:	e028      	b.n	8009932 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80098e0:	f107 0308 	add.w	r3, r7, #8
 80098e4:	4618      	mov	r0, r3
 80098e6:	f7ff fe6d 	bl	80095c4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80098ea:	6a3a      	ldr	r2, [r7, #32]
 80098ec:	683b      	ldr	r3, [r7, #0]
 80098ee:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80098f0:	2300      	movs	r3, #0
 80098f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80098f6:	e01c      	b.n	8009932 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80098f8:	f107 0308 	add.w	r3, r7, #8
 80098fc:	4618      	mov	r0, r3
 80098fe:	f7ff fe61 	bl	80095c4 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8009902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009904:	b29a      	uxth	r2, r3
 8009906:	683b      	ldr	r3, [r7, #0]
 8009908:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800990a:	2300      	movs	r3, #0
 800990c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009910:	e00f      	b.n	8009932 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8009912:	f107 0308 	add.w	r3, r7, #8
 8009916:	4618      	mov	r0, r3
 8009918:	f7ff fe54 	bl	80095c4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800991c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800991e:	0a5a      	lsrs	r2, r3, #9
 8009920:	683b      	ldr	r3, [r7, #0]
 8009922:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8009924:	2300      	movs	r3, #0
 8009926:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800992a:	e002      	b.n	8009932 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800992c:	2304      	movs	r3, #4
 800992e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8009932:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8009936:	4618      	mov	r0, r3
 8009938:	3730      	adds	r7, #48	; 0x30
 800993a:	46bd      	mov	sp, r7
 800993c:	bd80      	pop	{r7, pc}
 800993e:	bf00      	nop
 8009940:	20000009 	.word	0x20000009

08009944 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8009944:	b580      	push	{r7, lr}
 8009946:	b082      	sub	sp, #8
 8009948:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
#else
   const uint16_t msg = WRITE_CPLT_MSG;
 800994a:	2302      	movs	r3, #2
 800994c:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 800994e:	4b05      	ldr	r3, [pc, #20]	; (8009964 <BSP_SD_WriteCpltCallback+0x20>)
 8009950:	6818      	ldr	r0, [r3, #0]
 8009952:	1db9      	adds	r1, r7, #6
 8009954:	2300      	movs	r3, #0
 8009956:	2200      	movs	r2, #0
 8009958:	f000 fc00 	bl	800a15c <osMessageQueuePut>
#endif
}
 800995c:	bf00      	nop
 800995e:	3708      	adds	r7, #8
 8009960:	46bd      	mov	sp, r7
 8009962:	bd80      	pop	{r7, pc}
 8009964:	200003d8 	.word	0x200003d8

08009968 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8009968:	b580      	push	{r7, lr}
 800996a:	b082      	sub	sp, #8
 800996c:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
#else
   const uint16_t msg = READ_CPLT_MSG;
 800996e:	2301      	movs	r3, #1
 8009970:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 8009972:	4b05      	ldr	r3, [pc, #20]	; (8009988 <BSP_SD_ReadCpltCallback+0x20>)
 8009974:	6818      	ldr	r0, [r3, #0]
 8009976:	1db9      	adds	r1, r7, #6
 8009978:	2300      	movs	r3, #0
 800997a:	2200      	movs	r2, #0
 800997c:	f000 fbee 	bl	800a15c <osMessageQueuePut>
#endif
}
 8009980:	bf00      	nop
 8009982:	3708      	adds	r7, #8
 8009984:	46bd      	mov	sp, r7
 8009986:	bd80      	pop	{r7, pc}
 8009988:	200003d8 	.word	0x200003d8

0800998c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800998c:	b480      	push	{r7}
 800998e:	b087      	sub	sp, #28
 8009990:	af00      	add	r7, sp, #0
 8009992:	60f8      	str	r0, [r7, #12]
 8009994:	60b9      	str	r1, [r7, #8]
 8009996:	4613      	mov	r3, r2
 8009998:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800999a:	2301      	movs	r3, #1
 800999c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800999e:	2300      	movs	r3, #0
 80099a0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80099a2:	4b1f      	ldr	r3, [pc, #124]	; (8009a20 <FATFS_LinkDriverEx+0x94>)
 80099a4:	7a5b      	ldrb	r3, [r3, #9]
 80099a6:	b2db      	uxtb	r3, r3
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d131      	bne.n	8009a10 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80099ac:	4b1c      	ldr	r3, [pc, #112]	; (8009a20 <FATFS_LinkDriverEx+0x94>)
 80099ae:	7a5b      	ldrb	r3, [r3, #9]
 80099b0:	b2db      	uxtb	r3, r3
 80099b2:	461a      	mov	r2, r3
 80099b4:	4b1a      	ldr	r3, [pc, #104]	; (8009a20 <FATFS_LinkDriverEx+0x94>)
 80099b6:	2100      	movs	r1, #0
 80099b8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80099ba:	4b19      	ldr	r3, [pc, #100]	; (8009a20 <FATFS_LinkDriverEx+0x94>)
 80099bc:	7a5b      	ldrb	r3, [r3, #9]
 80099be:	b2db      	uxtb	r3, r3
 80099c0:	4a17      	ldr	r2, [pc, #92]	; (8009a20 <FATFS_LinkDriverEx+0x94>)
 80099c2:	009b      	lsls	r3, r3, #2
 80099c4:	4413      	add	r3, r2
 80099c6:	68fa      	ldr	r2, [r7, #12]
 80099c8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80099ca:	4b15      	ldr	r3, [pc, #84]	; (8009a20 <FATFS_LinkDriverEx+0x94>)
 80099cc:	7a5b      	ldrb	r3, [r3, #9]
 80099ce:	b2db      	uxtb	r3, r3
 80099d0:	461a      	mov	r2, r3
 80099d2:	4b13      	ldr	r3, [pc, #76]	; (8009a20 <FATFS_LinkDriverEx+0x94>)
 80099d4:	4413      	add	r3, r2
 80099d6:	79fa      	ldrb	r2, [r7, #7]
 80099d8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80099da:	4b11      	ldr	r3, [pc, #68]	; (8009a20 <FATFS_LinkDriverEx+0x94>)
 80099dc:	7a5b      	ldrb	r3, [r3, #9]
 80099de:	b2db      	uxtb	r3, r3
 80099e0:	1c5a      	adds	r2, r3, #1
 80099e2:	b2d1      	uxtb	r1, r2
 80099e4:	4a0e      	ldr	r2, [pc, #56]	; (8009a20 <FATFS_LinkDriverEx+0x94>)
 80099e6:	7251      	strb	r1, [r2, #9]
 80099e8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80099ea:	7dbb      	ldrb	r3, [r7, #22]
 80099ec:	3330      	adds	r3, #48	; 0x30
 80099ee:	b2da      	uxtb	r2, r3
 80099f0:	68bb      	ldr	r3, [r7, #8]
 80099f2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80099f4:	68bb      	ldr	r3, [r7, #8]
 80099f6:	3301      	adds	r3, #1
 80099f8:	223a      	movs	r2, #58	; 0x3a
 80099fa:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80099fc:	68bb      	ldr	r3, [r7, #8]
 80099fe:	3302      	adds	r3, #2
 8009a00:	222f      	movs	r2, #47	; 0x2f
 8009a02:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8009a04:	68bb      	ldr	r3, [r7, #8]
 8009a06:	3303      	adds	r3, #3
 8009a08:	2200      	movs	r2, #0
 8009a0a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8009a0c:	2300      	movs	r3, #0
 8009a0e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8009a10:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a12:	4618      	mov	r0, r3
 8009a14:	371c      	adds	r7, #28
 8009a16:	46bd      	mov	sp, r7
 8009a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a1c:	4770      	bx	lr
 8009a1e:	bf00      	nop
 8009a20:	200003dc 	.word	0x200003dc

08009a24 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8009a24:	b580      	push	{r7, lr}
 8009a26:	b082      	sub	sp, #8
 8009a28:	af00      	add	r7, sp, #0
 8009a2a:	6078      	str	r0, [r7, #4]
 8009a2c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8009a2e:	2200      	movs	r2, #0
 8009a30:	6839      	ldr	r1, [r7, #0]
 8009a32:	6878      	ldr	r0, [r7, #4]
 8009a34:	f7ff ffaa 	bl	800998c <FATFS_LinkDriverEx>
 8009a38:	4603      	mov	r3, r0
}
 8009a3a:	4618      	mov	r0, r3
 8009a3c:	3708      	adds	r7, #8
 8009a3e:	46bd      	mov	sp, r7
 8009a40:	bd80      	pop	{r7, pc}
	...

08009a44 <__NVIC_SetPriority>:
{
 8009a44:	b480      	push	{r7}
 8009a46:	b083      	sub	sp, #12
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	4603      	mov	r3, r0
 8009a4c:	6039      	str	r1, [r7, #0]
 8009a4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009a50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	db0a      	blt.n	8009a6e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009a58:	683b      	ldr	r3, [r7, #0]
 8009a5a:	b2da      	uxtb	r2, r3
 8009a5c:	490c      	ldr	r1, [pc, #48]	; (8009a90 <__NVIC_SetPriority+0x4c>)
 8009a5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009a62:	0112      	lsls	r2, r2, #4
 8009a64:	b2d2      	uxtb	r2, r2
 8009a66:	440b      	add	r3, r1
 8009a68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8009a6c:	e00a      	b.n	8009a84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009a6e:	683b      	ldr	r3, [r7, #0]
 8009a70:	b2da      	uxtb	r2, r3
 8009a72:	4908      	ldr	r1, [pc, #32]	; (8009a94 <__NVIC_SetPriority+0x50>)
 8009a74:	79fb      	ldrb	r3, [r7, #7]
 8009a76:	f003 030f 	and.w	r3, r3, #15
 8009a7a:	3b04      	subs	r3, #4
 8009a7c:	0112      	lsls	r2, r2, #4
 8009a7e:	b2d2      	uxtb	r2, r2
 8009a80:	440b      	add	r3, r1
 8009a82:	761a      	strb	r2, [r3, #24]
}
 8009a84:	bf00      	nop
 8009a86:	370c      	adds	r7, #12
 8009a88:	46bd      	mov	sp, r7
 8009a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a8e:	4770      	bx	lr
 8009a90:	e000e100 	.word	0xe000e100
 8009a94:	e000ed00 	.word	0xe000ed00

08009a98 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8009a98:	b580      	push	{r7, lr}
 8009a9a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8009a9c:	4b05      	ldr	r3, [pc, #20]	; (8009ab4 <SysTick_Handler+0x1c>)
 8009a9e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8009aa0:	f002 fbb6 	bl	800c210 <xTaskGetSchedulerState>
 8009aa4:	4603      	mov	r3, r0
 8009aa6:	2b01      	cmp	r3, #1
 8009aa8:	d001      	beq.n	8009aae <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8009aaa:	f003 fa9d 	bl	800cfe8 <xPortSysTickHandler>
  }
}
 8009aae:	bf00      	nop
 8009ab0:	bd80      	pop	{r7, pc}
 8009ab2:	bf00      	nop
 8009ab4:	e000e010 	.word	0xe000e010

08009ab8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009ab8:	b580      	push	{r7, lr}
 8009aba:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8009abc:	2100      	movs	r1, #0
 8009abe:	f06f 0004 	mvn.w	r0, #4
 8009ac2:	f7ff ffbf 	bl	8009a44 <__NVIC_SetPriority>
#endif
}
 8009ac6:	bf00      	nop
 8009ac8:	bd80      	pop	{r7, pc}
	...

08009acc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009acc:	b480      	push	{r7}
 8009ace:	b083      	sub	sp, #12
 8009ad0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009ad2:	f3ef 8305 	mrs	r3, IPSR
 8009ad6:	603b      	str	r3, [r7, #0]
  return(result);
 8009ad8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d003      	beq.n	8009ae6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8009ade:	f06f 0305 	mvn.w	r3, #5
 8009ae2:	607b      	str	r3, [r7, #4]
 8009ae4:	e00c      	b.n	8009b00 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8009ae6:	4b0a      	ldr	r3, [pc, #40]	; (8009b10 <osKernelInitialize+0x44>)
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d105      	bne.n	8009afa <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8009aee:	4b08      	ldr	r3, [pc, #32]	; (8009b10 <osKernelInitialize+0x44>)
 8009af0:	2201      	movs	r2, #1
 8009af2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009af4:	2300      	movs	r3, #0
 8009af6:	607b      	str	r3, [r7, #4]
 8009af8:	e002      	b.n	8009b00 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8009afa:	f04f 33ff 	mov.w	r3, #4294967295
 8009afe:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009b00:	687b      	ldr	r3, [r7, #4]
}
 8009b02:	4618      	mov	r0, r3
 8009b04:	370c      	adds	r7, #12
 8009b06:	46bd      	mov	sp, r7
 8009b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b0c:	4770      	bx	lr
 8009b0e:	bf00      	nop
 8009b10:	200003e8 	.word	0x200003e8

08009b14 <osKernelGetState>:
  }

  return (osOK);
}

osKernelState_t osKernelGetState (void) {
 8009b14:	b580      	push	{r7, lr}
 8009b16:	b082      	sub	sp, #8
 8009b18:	af00      	add	r7, sp, #0
  osKernelState_t state;

  switch (xTaskGetSchedulerState()) {
 8009b1a:	f002 fb79 	bl	800c210 <xTaskGetSchedulerState>
 8009b1e:	4603      	mov	r3, r0
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d004      	beq.n	8009b2e <osKernelGetState+0x1a>
 8009b24:	2b02      	cmp	r3, #2
 8009b26:	d105      	bne.n	8009b34 <osKernelGetState+0x20>
    case taskSCHEDULER_RUNNING:
      state = osKernelRunning;
 8009b28:	2302      	movs	r3, #2
 8009b2a:	607b      	str	r3, [r7, #4]
      break;
 8009b2c:	e00c      	b.n	8009b48 <osKernelGetState+0x34>

    case taskSCHEDULER_SUSPENDED:
      state = osKernelLocked;
 8009b2e:	2303      	movs	r3, #3
 8009b30:	607b      	str	r3, [r7, #4]
      break;
 8009b32:	e009      	b.n	8009b48 <osKernelGetState+0x34>

    case taskSCHEDULER_NOT_STARTED:
    default:
      if (KernelState == osKernelReady) {
 8009b34:	4b07      	ldr	r3, [pc, #28]	; (8009b54 <osKernelGetState+0x40>)
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	2b01      	cmp	r3, #1
 8009b3a:	d102      	bne.n	8009b42 <osKernelGetState+0x2e>
        state = osKernelReady;
 8009b3c:	2301      	movs	r3, #1
 8009b3e:	607b      	str	r3, [r7, #4]
      } else {
        state = osKernelInactive;
      }
      break;
 8009b40:	e001      	b.n	8009b46 <osKernelGetState+0x32>
        state = osKernelInactive;
 8009b42:	2300      	movs	r3, #0
 8009b44:	607b      	str	r3, [r7, #4]
      break;
 8009b46:	bf00      	nop
  }

  return (state);
 8009b48:	687b      	ldr	r3, [r7, #4]
}
 8009b4a:	4618      	mov	r0, r3
 8009b4c:	3708      	adds	r7, #8
 8009b4e:	46bd      	mov	sp, r7
 8009b50:	bd80      	pop	{r7, pc}
 8009b52:	bf00      	nop
 8009b54:	200003e8 	.word	0x200003e8

08009b58 <osKernelStart>:

osStatus_t osKernelStart (void) {
 8009b58:	b580      	push	{r7, lr}
 8009b5a:	b082      	sub	sp, #8
 8009b5c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009b5e:	f3ef 8305 	mrs	r3, IPSR
 8009b62:	603b      	str	r3, [r7, #0]
  return(result);
 8009b64:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d003      	beq.n	8009b72 <osKernelStart+0x1a>
    stat = osErrorISR;
 8009b6a:	f06f 0305 	mvn.w	r3, #5
 8009b6e:	607b      	str	r3, [r7, #4]
 8009b70:	e010      	b.n	8009b94 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8009b72:	4b0b      	ldr	r3, [pc, #44]	; (8009ba0 <osKernelStart+0x48>)
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	2b01      	cmp	r3, #1
 8009b78:	d109      	bne.n	8009b8e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8009b7a:	f7ff ff9d 	bl	8009ab8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8009b7e:	4b08      	ldr	r3, [pc, #32]	; (8009ba0 <osKernelStart+0x48>)
 8009b80:	2202      	movs	r2, #2
 8009b82:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009b84:	f001 fed6 	bl	800b934 <vTaskStartScheduler>
      stat = osOK;
 8009b88:	2300      	movs	r3, #0
 8009b8a:	607b      	str	r3, [r7, #4]
 8009b8c:	e002      	b.n	8009b94 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8009b8e:	f04f 33ff 	mov.w	r3, #4294967295
 8009b92:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009b94:	687b      	ldr	r3, [r7, #4]
}
 8009b96:	4618      	mov	r0, r3
 8009b98:	3708      	adds	r7, #8
 8009b9a:	46bd      	mov	sp, r7
 8009b9c:	bd80      	pop	{r7, pc}
 8009b9e:	bf00      	nop
 8009ba0:	200003e8 	.word	0x200003e8

08009ba4 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8009ba4:	b580      	push	{r7, lr}
 8009ba6:	b082      	sub	sp, #8
 8009ba8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009baa:	f3ef 8305 	mrs	r3, IPSR
 8009bae:	603b      	str	r3, [r7, #0]
  return(result);
 8009bb0:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d003      	beq.n	8009bbe <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 8009bb6:	f001 ffe9 	bl	800bb8c <xTaskGetTickCountFromISR>
 8009bba:	6078      	str	r0, [r7, #4]
 8009bbc:	e002      	b.n	8009bc4 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 8009bbe:	f001 ffd5 	bl	800bb6c <xTaskGetTickCount>
 8009bc2:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 8009bc4:	687b      	ldr	r3, [r7, #4]
}
 8009bc6:	4618      	mov	r0, r3
 8009bc8:	3708      	adds	r7, #8
 8009bca:	46bd      	mov	sp, r7
 8009bcc:	bd80      	pop	{r7, pc}

08009bce <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009bce:	b580      	push	{r7, lr}
 8009bd0:	b08e      	sub	sp, #56	; 0x38
 8009bd2:	af04      	add	r7, sp, #16
 8009bd4:	60f8      	str	r0, [r7, #12]
 8009bd6:	60b9      	str	r1, [r7, #8]
 8009bd8:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009bda:	2300      	movs	r3, #0
 8009bdc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009bde:	f3ef 8305 	mrs	r3, IPSR
 8009be2:	617b      	str	r3, [r7, #20]
  return(result);
 8009be4:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d17e      	bne.n	8009ce8 <osThreadNew+0x11a>
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d07b      	beq.n	8009ce8 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8009bf0:	2380      	movs	r3, #128	; 0x80
 8009bf2:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8009bf4:	2318      	movs	r3, #24
 8009bf6:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8009bf8:	2300      	movs	r3, #0
 8009bfa:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8009bfc:	f04f 33ff 	mov.w	r3, #4294967295
 8009c00:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d045      	beq.n	8009c94 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d002      	beq.n	8009c16 <osThreadNew+0x48>
        name = attr->name;
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	699b      	ldr	r3, [r3, #24]
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d002      	beq.n	8009c24 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	699b      	ldr	r3, [r3, #24]
 8009c22:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009c24:	69fb      	ldr	r3, [r7, #28]
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d008      	beq.n	8009c3c <osThreadNew+0x6e>
 8009c2a:	69fb      	ldr	r3, [r7, #28]
 8009c2c:	2b38      	cmp	r3, #56	; 0x38
 8009c2e:	d805      	bhi.n	8009c3c <osThreadNew+0x6e>
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	685b      	ldr	r3, [r3, #4]
 8009c34:	f003 0301 	and.w	r3, r3, #1
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d001      	beq.n	8009c40 <osThreadNew+0x72>
        return (NULL);
 8009c3c:	2300      	movs	r3, #0
 8009c3e:	e054      	b.n	8009cea <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	695b      	ldr	r3, [r3, #20]
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d003      	beq.n	8009c50 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	695b      	ldr	r3, [r3, #20]
 8009c4c:	089b      	lsrs	r3, r3, #2
 8009c4e:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	689b      	ldr	r3, [r3, #8]
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d00e      	beq.n	8009c76 <osThreadNew+0xa8>
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	68db      	ldr	r3, [r3, #12]
 8009c5c:	2bbb      	cmp	r3, #187	; 0xbb
 8009c5e:	d90a      	bls.n	8009c76 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d006      	beq.n	8009c76 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	695b      	ldr	r3, [r3, #20]
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d002      	beq.n	8009c76 <osThreadNew+0xa8>
        mem = 1;
 8009c70:	2301      	movs	r3, #1
 8009c72:	61bb      	str	r3, [r7, #24]
 8009c74:	e010      	b.n	8009c98 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	689b      	ldr	r3, [r3, #8]
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d10c      	bne.n	8009c98 <osThreadNew+0xca>
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	68db      	ldr	r3, [r3, #12]
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d108      	bne.n	8009c98 <osThreadNew+0xca>
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	691b      	ldr	r3, [r3, #16]
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d104      	bne.n	8009c98 <osThreadNew+0xca>
          mem = 0;
 8009c8e:	2300      	movs	r3, #0
 8009c90:	61bb      	str	r3, [r7, #24]
 8009c92:	e001      	b.n	8009c98 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8009c94:	2300      	movs	r3, #0
 8009c96:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009c98:	69bb      	ldr	r3, [r7, #24]
 8009c9a:	2b01      	cmp	r3, #1
 8009c9c:	d110      	bne.n	8009cc0 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8009ca2:	687a      	ldr	r2, [r7, #4]
 8009ca4:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009ca6:	9202      	str	r2, [sp, #8]
 8009ca8:	9301      	str	r3, [sp, #4]
 8009caa:	69fb      	ldr	r3, [r7, #28]
 8009cac:	9300      	str	r3, [sp, #0]
 8009cae:	68bb      	ldr	r3, [r7, #8]
 8009cb0:	6a3a      	ldr	r2, [r7, #32]
 8009cb2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009cb4:	68f8      	ldr	r0, [r7, #12]
 8009cb6:	f001 fc51 	bl	800b55c <xTaskCreateStatic>
 8009cba:	4603      	mov	r3, r0
 8009cbc:	613b      	str	r3, [r7, #16]
 8009cbe:	e013      	b.n	8009ce8 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8009cc0:	69bb      	ldr	r3, [r7, #24]
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d110      	bne.n	8009ce8 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009cc6:	6a3b      	ldr	r3, [r7, #32]
 8009cc8:	b29a      	uxth	r2, r3
 8009cca:	f107 0310 	add.w	r3, r7, #16
 8009cce:	9301      	str	r3, [sp, #4]
 8009cd0:	69fb      	ldr	r3, [r7, #28]
 8009cd2:	9300      	str	r3, [sp, #0]
 8009cd4:	68bb      	ldr	r3, [r7, #8]
 8009cd6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009cd8:	68f8      	ldr	r0, [r7, #12]
 8009cda:	f001 fc9c 	bl	800b616 <xTaskCreate>
 8009cde:	4603      	mov	r3, r0
 8009ce0:	2b01      	cmp	r3, #1
 8009ce2:	d001      	beq.n	8009ce8 <osThreadNew+0x11a>
            hTask = NULL;
 8009ce4:	2300      	movs	r3, #0
 8009ce6:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009ce8:	693b      	ldr	r3, [r7, #16]
}
 8009cea:	4618      	mov	r0, r3
 8009cec:	3728      	adds	r7, #40	; 0x28
 8009cee:	46bd      	mov	sp, r7
 8009cf0:	bd80      	pop	{r7, pc}

08009cf2 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8009cf2:	b580      	push	{r7, lr}
 8009cf4:	b084      	sub	sp, #16
 8009cf6:	af00      	add	r7, sp, #0
 8009cf8:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009cfa:	f3ef 8305 	mrs	r3, IPSR
 8009cfe:	60bb      	str	r3, [r7, #8]
  return(result);
 8009d00:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d003      	beq.n	8009d0e <osDelay+0x1c>
    stat = osErrorISR;
 8009d06:	f06f 0305 	mvn.w	r3, #5
 8009d0a:	60fb      	str	r3, [r7, #12]
 8009d0c:	e007      	b.n	8009d1e <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8009d0e:	2300      	movs	r3, #0
 8009d10:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d002      	beq.n	8009d1e <osDelay+0x2c>
      vTaskDelay(ticks);
 8009d18:	6878      	ldr	r0, [r7, #4]
 8009d1a:	f001 fdd7 	bl	800b8cc <vTaskDelay>
    }
  }

  return (stat);
 8009d1e:	68fb      	ldr	r3, [r7, #12]
}
 8009d20:	4618      	mov	r0, r3
 8009d22:	3710      	adds	r7, #16
 8009d24:	46bd      	mov	sp, r7
 8009d26:	bd80      	pop	{r7, pc}

08009d28 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8009d28:	b580      	push	{r7, lr}
 8009d2a:	b088      	sub	sp, #32
 8009d2c:	af00      	add	r7, sp, #0
 8009d2e:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8009d30:	2300      	movs	r3, #0
 8009d32:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009d34:	f3ef 8305 	mrs	r3, IPSR
 8009d38:	60bb      	str	r3, [r7, #8]
  return(result);
 8009d3a:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d174      	bne.n	8009e2a <osMutexNew+0x102>
    if (attr != NULL) {
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d003      	beq.n	8009d4e <osMutexNew+0x26>
      type = attr->attr_bits;
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	685b      	ldr	r3, [r3, #4]
 8009d4a:	61bb      	str	r3, [r7, #24]
 8009d4c:	e001      	b.n	8009d52 <osMutexNew+0x2a>
    } else {
      type = 0U;
 8009d4e:	2300      	movs	r3, #0
 8009d50:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8009d52:	69bb      	ldr	r3, [r7, #24]
 8009d54:	f003 0301 	and.w	r3, r3, #1
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d002      	beq.n	8009d62 <osMutexNew+0x3a>
      rmtx = 1U;
 8009d5c:	2301      	movs	r3, #1
 8009d5e:	617b      	str	r3, [r7, #20]
 8009d60:	e001      	b.n	8009d66 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8009d62:	2300      	movs	r3, #0
 8009d64:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8009d66:	69bb      	ldr	r3, [r7, #24]
 8009d68:	f003 0308 	and.w	r3, r3, #8
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d15c      	bne.n	8009e2a <osMutexNew+0x102>
      mem = -1;
 8009d70:	f04f 33ff 	mov.w	r3, #4294967295
 8009d74:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d015      	beq.n	8009da8 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	689b      	ldr	r3, [r3, #8]
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d006      	beq.n	8009d92 <osMutexNew+0x6a>
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	68db      	ldr	r3, [r3, #12]
 8009d88:	2b4f      	cmp	r3, #79	; 0x4f
 8009d8a:	d902      	bls.n	8009d92 <osMutexNew+0x6a>
          mem = 1;
 8009d8c:	2301      	movs	r3, #1
 8009d8e:	613b      	str	r3, [r7, #16]
 8009d90:	e00c      	b.n	8009dac <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	689b      	ldr	r3, [r3, #8]
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d108      	bne.n	8009dac <osMutexNew+0x84>
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	68db      	ldr	r3, [r3, #12]
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d104      	bne.n	8009dac <osMutexNew+0x84>
            mem = 0;
 8009da2:	2300      	movs	r3, #0
 8009da4:	613b      	str	r3, [r7, #16]
 8009da6:	e001      	b.n	8009dac <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8009da8:	2300      	movs	r3, #0
 8009daa:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8009dac:	693b      	ldr	r3, [r7, #16]
 8009dae:	2b01      	cmp	r3, #1
 8009db0:	d112      	bne.n	8009dd8 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8009db2:	697b      	ldr	r3, [r7, #20]
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d007      	beq.n	8009dc8 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	689b      	ldr	r3, [r3, #8]
 8009dbc:	4619      	mov	r1, r3
 8009dbe:	2004      	movs	r0, #4
 8009dc0:	f000 fce1 	bl	800a786 <xQueueCreateMutexStatic>
 8009dc4:	61f8      	str	r0, [r7, #28]
 8009dc6:	e016      	b.n	8009df6 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	689b      	ldr	r3, [r3, #8]
 8009dcc:	4619      	mov	r1, r3
 8009dce:	2001      	movs	r0, #1
 8009dd0:	f000 fcd9 	bl	800a786 <xQueueCreateMutexStatic>
 8009dd4:	61f8      	str	r0, [r7, #28]
 8009dd6:	e00e      	b.n	8009df6 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8009dd8:	693b      	ldr	r3, [r7, #16]
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d10b      	bne.n	8009df6 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8009dde:	697b      	ldr	r3, [r7, #20]
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d004      	beq.n	8009dee <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8009de4:	2004      	movs	r0, #4
 8009de6:	f000 fcb6 	bl	800a756 <xQueueCreateMutex>
 8009dea:	61f8      	str	r0, [r7, #28]
 8009dec:	e003      	b.n	8009df6 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8009dee:	2001      	movs	r0, #1
 8009df0:	f000 fcb1 	bl	800a756 <xQueueCreateMutex>
 8009df4:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8009df6:	69fb      	ldr	r3, [r7, #28]
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d00c      	beq.n	8009e16 <osMutexNew+0xee>
        if (attr != NULL) {
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d003      	beq.n	8009e0a <osMutexNew+0xe2>
          name = attr->name;
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	60fb      	str	r3, [r7, #12]
 8009e08:	e001      	b.n	8009e0e <osMutexNew+0xe6>
        } else {
          name = NULL;
 8009e0a:	2300      	movs	r3, #0
 8009e0c:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8009e0e:	68f9      	ldr	r1, [r7, #12]
 8009e10:	69f8      	ldr	r0, [r7, #28]
 8009e12:	f001 fb1b 	bl	800b44c <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8009e16:	69fb      	ldr	r3, [r7, #28]
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d006      	beq.n	8009e2a <osMutexNew+0x102>
 8009e1c:	697b      	ldr	r3, [r7, #20]
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d003      	beq.n	8009e2a <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8009e22:	69fb      	ldr	r3, [r7, #28]
 8009e24:	f043 0301 	orr.w	r3, r3, #1
 8009e28:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8009e2a:	69fb      	ldr	r3, [r7, #28]
}
 8009e2c:	4618      	mov	r0, r3
 8009e2e:	3720      	adds	r7, #32
 8009e30:	46bd      	mov	sp, r7
 8009e32:	bd80      	pop	{r7, pc}

08009e34 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8009e34:	b580      	push	{r7, lr}
 8009e36:	b08a      	sub	sp, #40	; 0x28
 8009e38:	af02      	add	r7, sp, #8
 8009e3a:	60f8      	str	r0, [r7, #12]
 8009e3c:	60b9      	str	r1, [r7, #8]
 8009e3e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8009e40:	2300      	movs	r3, #0
 8009e42:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009e44:	f3ef 8305 	mrs	r3, IPSR
 8009e48:	613b      	str	r3, [r7, #16]
  return(result);
 8009e4a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d175      	bne.n	8009f3c <osSemaphoreNew+0x108>
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d072      	beq.n	8009f3c <osSemaphoreNew+0x108>
 8009e56:	68ba      	ldr	r2, [r7, #8]
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	429a      	cmp	r2, r3
 8009e5c:	d86e      	bhi.n	8009f3c <osSemaphoreNew+0x108>
    mem = -1;
 8009e5e:	f04f 33ff 	mov.w	r3, #4294967295
 8009e62:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d015      	beq.n	8009e96 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	689b      	ldr	r3, [r3, #8]
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d006      	beq.n	8009e80 <osSemaphoreNew+0x4c>
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	68db      	ldr	r3, [r3, #12]
 8009e76:	2b4f      	cmp	r3, #79	; 0x4f
 8009e78:	d902      	bls.n	8009e80 <osSemaphoreNew+0x4c>
        mem = 1;
 8009e7a:	2301      	movs	r3, #1
 8009e7c:	61bb      	str	r3, [r7, #24]
 8009e7e:	e00c      	b.n	8009e9a <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	689b      	ldr	r3, [r3, #8]
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d108      	bne.n	8009e9a <osSemaphoreNew+0x66>
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	68db      	ldr	r3, [r3, #12]
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d104      	bne.n	8009e9a <osSemaphoreNew+0x66>
          mem = 0;
 8009e90:	2300      	movs	r3, #0
 8009e92:	61bb      	str	r3, [r7, #24]
 8009e94:	e001      	b.n	8009e9a <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8009e96:	2300      	movs	r3, #0
 8009e98:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8009e9a:	69bb      	ldr	r3, [r7, #24]
 8009e9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ea0:	d04c      	beq.n	8009f3c <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	2b01      	cmp	r3, #1
 8009ea6:	d128      	bne.n	8009efa <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8009ea8:	69bb      	ldr	r3, [r7, #24]
 8009eaa:	2b01      	cmp	r3, #1
 8009eac:	d10a      	bne.n	8009ec4 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	689b      	ldr	r3, [r3, #8]
 8009eb2:	2203      	movs	r2, #3
 8009eb4:	9200      	str	r2, [sp, #0]
 8009eb6:	2200      	movs	r2, #0
 8009eb8:	2100      	movs	r1, #0
 8009eba:	2001      	movs	r0, #1
 8009ebc:	f000 fb5c 	bl	800a578 <xQueueGenericCreateStatic>
 8009ec0:	61f8      	str	r0, [r7, #28]
 8009ec2:	e005      	b.n	8009ed0 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8009ec4:	2203      	movs	r2, #3
 8009ec6:	2100      	movs	r1, #0
 8009ec8:	2001      	movs	r0, #1
 8009eca:	f000 fbcd 	bl	800a668 <xQueueGenericCreate>
 8009ece:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8009ed0:	69fb      	ldr	r3, [r7, #28]
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d022      	beq.n	8009f1c <osSemaphoreNew+0xe8>
 8009ed6:	68bb      	ldr	r3, [r7, #8]
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d01f      	beq.n	8009f1c <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8009edc:	2300      	movs	r3, #0
 8009ede:	2200      	movs	r2, #0
 8009ee0:	2100      	movs	r1, #0
 8009ee2:	69f8      	ldr	r0, [r7, #28]
 8009ee4:	f000 fcd4 	bl	800a890 <xQueueGenericSend>
 8009ee8:	4603      	mov	r3, r0
 8009eea:	2b01      	cmp	r3, #1
 8009eec:	d016      	beq.n	8009f1c <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8009eee:	69f8      	ldr	r0, [r7, #28]
 8009ef0:	f001 f960 	bl	800b1b4 <vQueueDelete>
            hSemaphore = NULL;
 8009ef4:	2300      	movs	r3, #0
 8009ef6:	61fb      	str	r3, [r7, #28]
 8009ef8:	e010      	b.n	8009f1c <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8009efa:	69bb      	ldr	r3, [r7, #24]
 8009efc:	2b01      	cmp	r3, #1
 8009efe:	d108      	bne.n	8009f12 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	689b      	ldr	r3, [r3, #8]
 8009f04:	461a      	mov	r2, r3
 8009f06:	68b9      	ldr	r1, [r7, #8]
 8009f08:	68f8      	ldr	r0, [r7, #12]
 8009f0a:	f000 fc57 	bl	800a7bc <xQueueCreateCountingSemaphoreStatic>
 8009f0e:	61f8      	str	r0, [r7, #28]
 8009f10:	e004      	b.n	8009f1c <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8009f12:	68b9      	ldr	r1, [r7, #8]
 8009f14:	68f8      	ldr	r0, [r7, #12]
 8009f16:	f000 fc88 	bl	800a82a <xQueueCreateCountingSemaphore>
 8009f1a:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8009f1c:	69fb      	ldr	r3, [r7, #28]
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d00c      	beq.n	8009f3c <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d003      	beq.n	8009f30 <osSemaphoreNew+0xfc>
          name = attr->name;
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	617b      	str	r3, [r7, #20]
 8009f2e:	e001      	b.n	8009f34 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8009f30:	2300      	movs	r3, #0
 8009f32:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8009f34:	6979      	ldr	r1, [r7, #20]
 8009f36:	69f8      	ldr	r0, [r7, #28]
 8009f38:	f001 fa88 	bl	800b44c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8009f3c:	69fb      	ldr	r3, [r7, #28]
}
 8009f3e:	4618      	mov	r0, r3
 8009f40:	3720      	adds	r7, #32
 8009f42:	46bd      	mov	sp, r7
 8009f44:	bd80      	pop	{r7, pc}
	...

08009f48 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8009f48:	b580      	push	{r7, lr}
 8009f4a:	b086      	sub	sp, #24
 8009f4c:	af00      	add	r7, sp, #0
 8009f4e:	6078      	str	r0, [r7, #4]
 8009f50:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8009f56:	2300      	movs	r3, #0
 8009f58:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8009f5a:	693b      	ldr	r3, [r7, #16]
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d103      	bne.n	8009f68 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8009f60:	f06f 0303 	mvn.w	r3, #3
 8009f64:	617b      	str	r3, [r7, #20]
 8009f66:	e039      	b.n	8009fdc <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009f68:	f3ef 8305 	mrs	r3, IPSR
 8009f6c:	60fb      	str	r3, [r7, #12]
  return(result);
 8009f6e:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d022      	beq.n	8009fba <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8009f74:	683b      	ldr	r3, [r7, #0]
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d003      	beq.n	8009f82 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8009f7a:	f06f 0303 	mvn.w	r3, #3
 8009f7e:	617b      	str	r3, [r7, #20]
 8009f80:	e02c      	b.n	8009fdc <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8009f82:	2300      	movs	r3, #0
 8009f84:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8009f86:	f107 0308 	add.w	r3, r7, #8
 8009f8a:	461a      	mov	r2, r3
 8009f8c:	2100      	movs	r1, #0
 8009f8e:	6938      	ldr	r0, [r7, #16]
 8009f90:	f001 f890 	bl	800b0b4 <xQueueReceiveFromISR>
 8009f94:	4603      	mov	r3, r0
 8009f96:	2b01      	cmp	r3, #1
 8009f98:	d003      	beq.n	8009fa2 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8009f9a:	f06f 0302 	mvn.w	r3, #2
 8009f9e:	617b      	str	r3, [r7, #20]
 8009fa0:	e01c      	b.n	8009fdc <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8009fa2:	68bb      	ldr	r3, [r7, #8]
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d019      	beq.n	8009fdc <osSemaphoreAcquire+0x94>
 8009fa8:	4b0f      	ldr	r3, [pc, #60]	; (8009fe8 <osSemaphoreAcquire+0xa0>)
 8009faa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009fae:	601a      	str	r2, [r3, #0]
 8009fb0:	f3bf 8f4f 	dsb	sy
 8009fb4:	f3bf 8f6f 	isb	sy
 8009fb8:	e010      	b.n	8009fdc <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8009fba:	6839      	ldr	r1, [r7, #0]
 8009fbc:	6938      	ldr	r0, [r7, #16]
 8009fbe:	f000 ff6d 	bl	800ae9c <xQueueSemaphoreTake>
 8009fc2:	4603      	mov	r3, r0
 8009fc4:	2b01      	cmp	r3, #1
 8009fc6:	d009      	beq.n	8009fdc <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8009fc8:	683b      	ldr	r3, [r7, #0]
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d003      	beq.n	8009fd6 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8009fce:	f06f 0301 	mvn.w	r3, #1
 8009fd2:	617b      	str	r3, [r7, #20]
 8009fd4:	e002      	b.n	8009fdc <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8009fd6:	f06f 0302 	mvn.w	r3, #2
 8009fda:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8009fdc:	697b      	ldr	r3, [r7, #20]
}
 8009fde:	4618      	mov	r0, r3
 8009fe0:	3718      	adds	r7, #24
 8009fe2:	46bd      	mov	sp, r7
 8009fe4:	bd80      	pop	{r7, pc}
 8009fe6:	bf00      	nop
 8009fe8:	e000ed04 	.word	0xe000ed04

08009fec <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8009fec:	b580      	push	{r7, lr}
 8009fee:	b086      	sub	sp, #24
 8009ff0:	af00      	add	r7, sp, #0
 8009ff2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8009ff8:	2300      	movs	r3, #0
 8009ffa:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8009ffc:	693b      	ldr	r3, [r7, #16]
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d103      	bne.n	800a00a <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800a002:	f06f 0303 	mvn.w	r3, #3
 800a006:	617b      	str	r3, [r7, #20]
 800a008:	e02c      	b.n	800a064 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a00a:	f3ef 8305 	mrs	r3, IPSR
 800a00e:	60fb      	str	r3, [r7, #12]
  return(result);
 800a010:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800a012:	2b00      	cmp	r3, #0
 800a014:	d01a      	beq.n	800a04c <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800a016:	2300      	movs	r3, #0
 800a018:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800a01a:	f107 0308 	add.w	r3, r7, #8
 800a01e:	4619      	mov	r1, r3
 800a020:	6938      	ldr	r0, [r7, #16]
 800a022:	f000 fdce 	bl	800abc2 <xQueueGiveFromISR>
 800a026:	4603      	mov	r3, r0
 800a028:	2b01      	cmp	r3, #1
 800a02a:	d003      	beq.n	800a034 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800a02c:	f06f 0302 	mvn.w	r3, #2
 800a030:	617b      	str	r3, [r7, #20]
 800a032:	e017      	b.n	800a064 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800a034:	68bb      	ldr	r3, [r7, #8]
 800a036:	2b00      	cmp	r3, #0
 800a038:	d014      	beq.n	800a064 <osSemaphoreRelease+0x78>
 800a03a:	4b0d      	ldr	r3, [pc, #52]	; (800a070 <osSemaphoreRelease+0x84>)
 800a03c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a040:	601a      	str	r2, [r3, #0]
 800a042:	f3bf 8f4f 	dsb	sy
 800a046:	f3bf 8f6f 	isb	sy
 800a04a:	e00b      	b.n	800a064 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800a04c:	2300      	movs	r3, #0
 800a04e:	2200      	movs	r2, #0
 800a050:	2100      	movs	r1, #0
 800a052:	6938      	ldr	r0, [r7, #16]
 800a054:	f000 fc1c 	bl	800a890 <xQueueGenericSend>
 800a058:	4603      	mov	r3, r0
 800a05a:	2b01      	cmp	r3, #1
 800a05c:	d002      	beq.n	800a064 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800a05e:	f06f 0302 	mvn.w	r3, #2
 800a062:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800a064:	697b      	ldr	r3, [r7, #20]
}
 800a066:	4618      	mov	r0, r3
 800a068:	3718      	adds	r7, #24
 800a06a:	46bd      	mov	sp, r7
 800a06c:	bd80      	pop	{r7, pc}
 800a06e:	bf00      	nop
 800a070:	e000ed04 	.word	0xe000ed04

0800a074 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800a074:	b580      	push	{r7, lr}
 800a076:	b08a      	sub	sp, #40	; 0x28
 800a078:	af02      	add	r7, sp, #8
 800a07a:	60f8      	str	r0, [r7, #12]
 800a07c:	60b9      	str	r1, [r7, #8]
 800a07e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800a080:	2300      	movs	r3, #0
 800a082:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a084:	f3ef 8305 	mrs	r3, IPSR
 800a088:	613b      	str	r3, [r7, #16]
  return(result);
 800a08a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d15f      	bne.n	800a150 <osMessageQueueNew+0xdc>
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	2b00      	cmp	r3, #0
 800a094:	d05c      	beq.n	800a150 <osMessageQueueNew+0xdc>
 800a096:	68bb      	ldr	r3, [r7, #8]
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d059      	beq.n	800a150 <osMessageQueueNew+0xdc>
    mem = -1;
 800a09c:	f04f 33ff 	mov.w	r3, #4294967295
 800a0a0:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d029      	beq.n	800a0fc <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	689b      	ldr	r3, [r3, #8]
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d012      	beq.n	800a0d6 <osMessageQueueNew+0x62>
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	68db      	ldr	r3, [r3, #12]
 800a0b4:	2b4f      	cmp	r3, #79	; 0x4f
 800a0b6:	d90e      	bls.n	800a0d6 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d00a      	beq.n	800a0d6 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	695a      	ldr	r2, [r3, #20]
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	68b9      	ldr	r1, [r7, #8]
 800a0c8:	fb01 f303 	mul.w	r3, r1, r3
 800a0cc:	429a      	cmp	r2, r3
 800a0ce:	d302      	bcc.n	800a0d6 <osMessageQueueNew+0x62>
        mem = 1;
 800a0d0:	2301      	movs	r3, #1
 800a0d2:	61bb      	str	r3, [r7, #24]
 800a0d4:	e014      	b.n	800a100 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	689b      	ldr	r3, [r3, #8]
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d110      	bne.n	800a100 <osMessageQueueNew+0x8c>
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	68db      	ldr	r3, [r3, #12]
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d10c      	bne.n	800a100 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d108      	bne.n	800a100 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	695b      	ldr	r3, [r3, #20]
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d104      	bne.n	800a100 <osMessageQueueNew+0x8c>
          mem = 0;
 800a0f6:	2300      	movs	r3, #0
 800a0f8:	61bb      	str	r3, [r7, #24]
 800a0fa:	e001      	b.n	800a100 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800a0fc:	2300      	movs	r3, #0
 800a0fe:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800a100:	69bb      	ldr	r3, [r7, #24]
 800a102:	2b01      	cmp	r3, #1
 800a104:	d10b      	bne.n	800a11e <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	691a      	ldr	r2, [r3, #16]
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	689b      	ldr	r3, [r3, #8]
 800a10e:	2100      	movs	r1, #0
 800a110:	9100      	str	r1, [sp, #0]
 800a112:	68b9      	ldr	r1, [r7, #8]
 800a114:	68f8      	ldr	r0, [r7, #12]
 800a116:	f000 fa2f 	bl	800a578 <xQueueGenericCreateStatic>
 800a11a:	61f8      	str	r0, [r7, #28]
 800a11c:	e008      	b.n	800a130 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800a11e:	69bb      	ldr	r3, [r7, #24]
 800a120:	2b00      	cmp	r3, #0
 800a122:	d105      	bne.n	800a130 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800a124:	2200      	movs	r2, #0
 800a126:	68b9      	ldr	r1, [r7, #8]
 800a128:	68f8      	ldr	r0, [r7, #12]
 800a12a:	f000 fa9d 	bl	800a668 <xQueueGenericCreate>
 800a12e:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800a130:	69fb      	ldr	r3, [r7, #28]
 800a132:	2b00      	cmp	r3, #0
 800a134:	d00c      	beq.n	800a150 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d003      	beq.n	800a144 <osMessageQueueNew+0xd0>
        name = attr->name;
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	617b      	str	r3, [r7, #20]
 800a142:	e001      	b.n	800a148 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800a144:	2300      	movs	r3, #0
 800a146:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800a148:	6979      	ldr	r1, [r7, #20]
 800a14a:	69f8      	ldr	r0, [r7, #28]
 800a14c:	f001 f97e 	bl	800b44c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800a150:	69fb      	ldr	r3, [r7, #28]
}
 800a152:	4618      	mov	r0, r3
 800a154:	3720      	adds	r7, #32
 800a156:	46bd      	mov	sp, r7
 800a158:	bd80      	pop	{r7, pc}
	...

0800a15c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800a15c:	b580      	push	{r7, lr}
 800a15e:	b088      	sub	sp, #32
 800a160:	af00      	add	r7, sp, #0
 800a162:	60f8      	str	r0, [r7, #12]
 800a164:	60b9      	str	r1, [r7, #8]
 800a166:	603b      	str	r3, [r7, #0]
 800a168:	4613      	mov	r3, r2
 800a16a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800a170:	2300      	movs	r3, #0
 800a172:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a174:	f3ef 8305 	mrs	r3, IPSR
 800a178:	617b      	str	r3, [r7, #20]
  return(result);
 800a17a:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d028      	beq.n	800a1d2 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800a180:	69bb      	ldr	r3, [r7, #24]
 800a182:	2b00      	cmp	r3, #0
 800a184:	d005      	beq.n	800a192 <osMessageQueuePut+0x36>
 800a186:	68bb      	ldr	r3, [r7, #8]
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d002      	beq.n	800a192 <osMessageQueuePut+0x36>
 800a18c:	683b      	ldr	r3, [r7, #0]
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d003      	beq.n	800a19a <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800a192:	f06f 0303 	mvn.w	r3, #3
 800a196:	61fb      	str	r3, [r7, #28]
 800a198:	e038      	b.n	800a20c <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800a19a:	2300      	movs	r3, #0
 800a19c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800a19e:	f107 0210 	add.w	r2, r7, #16
 800a1a2:	2300      	movs	r3, #0
 800a1a4:	68b9      	ldr	r1, [r7, #8]
 800a1a6:	69b8      	ldr	r0, [r7, #24]
 800a1a8:	f000 fc70 	bl	800aa8c <xQueueGenericSendFromISR>
 800a1ac:	4603      	mov	r3, r0
 800a1ae:	2b01      	cmp	r3, #1
 800a1b0:	d003      	beq.n	800a1ba <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800a1b2:	f06f 0302 	mvn.w	r3, #2
 800a1b6:	61fb      	str	r3, [r7, #28]
 800a1b8:	e028      	b.n	800a20c <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800a1ba:	693b      	ldr	r3, [r7, #16]
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d025      	beq.n	800a20c <osMessageQueuePut+0xb0>
 800a1c0:	4b15      	ldr	r3, [pc, #84]	; (800a218 <osMessageQueuePut+0xbc>)
 800a1c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a1c6:	601a      	str	r2, [r3, #0]
 800a1c8:	f3bf 8f4f 	dsb	sy
 800a1cc:	f3bf 8f6f 	isb	sy
 800a1d0:	e01c      	b.n	800a20c <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800a1d2:	69bb      	ldr	r3, [r7, #24]
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d002      	beq.n	800a1de <osMessageQueuePut+0x82>
 800a1d8:	68bb      	ldr	r3, [r7, #8]
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d103      	bne.n	800a1e6 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800a1de:	f06f 0303 	mvn.w	r3, #3
 800a1e2:	61fb      	str	r3, [r7, #28]
 800a1e4:	e012      	b.n	800a20c <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800a1e6:	2300      	movs	r3, #0
 800a1e8:	683a      	ldr	r2, [r7, #0]
 800a1ea:	68b9      	ldr	r1, [r7, #8]
 800a1ec:	69b8      	ldr	r0, [r7, #24]
 800a1ee:	f000 fb4f 	bl	800a890 <xQueueGenericSend>
 800a1f2:	4603      	mov	r3, r0
 800a1f4:	2b01      	cmp	r3, #1
 800a1f6:	d009      	beq.n	800a20c <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800a1f8:	683b      	ldr	r3, [r7, #0]
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d003      	beq.n	800a206 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800a1fe:	f06f 0301 	mvn.w	r3, #1
 800a202:	61fb      	str	r3, [r7, #28]
 800a204:	e002      	b.n	800a20c <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800a206:	f06f 0302 	mvn.w	r3, #2
 800a20a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800a20c:	69fb      	ldr	r3, [r7, #28]
}
 800a20e:	4618      	mov	r0, r3
 800a210:	3720      	adds	r7, #32
 800a212:	46bd      	mov	sp, r7
 800a214:	bd80      	pop	{r7, pc}
 800a216:	bf00      	nop
 800a218:	e000ed04 	.word	0xe000ed04

0800a21c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800a21c:	b580      	push	{r7, lr}
 800a21e:	b088      	sub	sp, #32
 800a220:	af00      	add	r7, sp, #0
 800a222:	60f8      	str	r0, [r7, #12]
 800a224:	60b9      	str	r1, [r7, #8]
 800a226:	607a      	str	r2, [r7, #4]
 800a228:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800a22e:	2300      	movs	r3, #0
 800a230:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a232:	f3ef 8305 	mrs	r3, IPSR
 800a236:	617b      	str	r3, [r7, #20]
  return(result);
 800a238:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d028      	beq.n	800a290 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800a23e:	69bb      	ldr	r3, [r7, #24]
 800a240:	2b00      	cmp	r3, #0
 800a242:	d005      	beq.n	800a250 <osMessageQueueGet+0x34>
 800a244:	68bb      	ldr	r3, [r7, #8]
 800a246:	2b00      	cmp	r3, #0
 800a248:	d002      	beq.n	800a250 <osMessageQueueGet+0x34>
 800a24a:	683b      	ldr	r3, [r7, #0]
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d003      	beq.n	800a258 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800a250:	f06f 0303 	mvn.w	r3, #3
 800a254:	61fb      	str	r3, [r7, #28]
 800a256:	e037      	b.n	800a2c8 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800a258:	2300      	movs	r3, #0
 800a25a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800a25c:	f107 0310 	add.w	r3, r7, #16
 800a260:	461a      	mov	r2, r3
 800a262:	68b9      	ldr	r1, [r7, #8]
 800a264:	69b8      	ldr	r0, [r7, #24]
 800a266:	f000 ff25 	bl	800b0b4 <xQueueReceiveFromISR>
 800a26a:	4603      	mov	r3, r0
 800a26c:	2b01      	cmp	r3, #1
 800a26e:	d003      	beq.n	800a278 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800a270:	f06f 0302 	mvn.w	r3, #2
 800a274:	61fb      	str	r3, [r7, #28]
 800a276:	e027      	b.n	800a2c8 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800a278:	693b      	ldr	r3, [r7, #16]
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d024      	beq.n	800a2c8 <osMessageQueueGet+0xac>
 800a27e:	4b15      	ldr	r3, [pc, #84]	; (800a2d4 <osMessageQueueGet+0xb8>)
 800a280:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a284:	601a      	str	r2, [r3, #0]
 800a286:	f3bf 8f4f 	dsb	sy
 800a28a:	f3bf 8f6f 	isb	sy
 800a28e:	e01b      	b.n	800a2c8 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800a290:	69bb      	ldr	r3, [r7, #24]
 800a292:	2b00      	cmp	r3, #0
 800a294:	d002      	beq.n	800a29c <osMessageQueueGet+0x80>
 800a296:	68bb      	ldr	r3, [r7, #8]
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d103      	bne.n	800a2a4 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800a29c:	f06f 0303 	mvn.w	r3, #3
 800a2a0:	61fb      	str	r3, [r7, #28]
 800a2a2:	e011      	b.n	800a2c8 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800a2a4:	683a      	ldr	r2, [r7, #0]
 800a2a6:	68b9      	ldr	r1, [r7, #8]
 800a2a8:	69b8      	ldr	r0, [r7, #24]
 800a2aa:	f000 fd17 	bl	800acdc <xQueueReceive>
 800a2ae:	4603      	mov	r3, r0
 800a2b0:	2b01      	cmp	r3, #1
 800a2b2:	d009      	beq.n	800a2c8 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800a2b4:	683b      	ldr	r3, [r7, #0]
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d003      	beq.n	800a2c2 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800a2ba:	f06f 0301 	mvn.w	r3, #1
 800a2be:	61fb      	str	r3, [r7, #28]
 800a2c0:	e002      	b.n	800a2c8 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800a2c2:	f06f 0302 	mvn.w	r3, #2
 800a2c6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800a2c8:	69fb      	ldr	r3, [r7, #28]
}
 800a2ca:	4618      	mov	r0, r3
 800a2cc:	3720      	adds	r7, #32
 800a2ce:	46bd      	mov	sp, r7
 800a2d0:	bd80      	pop	{r7, pc}
 800a2d2:	bf00      	nop
 800a2d4:	e000ed04 	.word	0xe000ed04

0800a2d8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a2d8:	b480      	push	{r7}
 800a2da:	b085      	sub	sp, #20
 800a2dc:	af00      	add	r7, sp, #0
 800a2de:	60f8      	str	r0, [r7, #12]
 800a2e0:	60b9      	str	r1, [r7, #8]
 800a2e2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	4a07      	ldr	r2, [pc, #28]	; (800a304 <vApplicationGetIdleTaskMemory+0x2c>)
 800a2e8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a2ea:	68bb      	ldr	r3, [r7, #8]
 800a2ec:	4a06      	ldr	r2, [pc, #24]	; (800a308 <vApplicationGetIdleTaskMemory+0x30>)
 800a2ee:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	2280      	movs	r2, #128	; 0x80
 800a2f4:	601a      	str	r2, [r3, #0]
}
 800a2f6:	bf00      	nop
 800a2f8:	3714      	adds	r7, #20
 800a2fa:	46bd      	mov	sp, r7
 800a2fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a300:	4770      	bx	lr
 800a302:	bf00      	nop
 800a304:	200003ec 	.word	0x200003ec
 800a308:	200004a8 	.word	0x200004a8

0800a30c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a30c:	b480      	push	{r7}
 800a30e:	b085      	sub	sp, #20
 800a310:	af00      	add	r7, sp, #0
 800a312:	60f8      	str	r0, [r7, #12]
 800a314:	60b9      	str	r1, [r7, #8]
 800a316:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	4a07      	ldr	r2, [pc, #28]	; (800a338 <vApplicationGetTimerTaskMemory+0x2c>)
 800a31c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a31e:	68bb      	ldr	r3, [r7, #8]
 800a320:	4a06      	ldr	r2, [pc, #24]	; (800a33c <vApplicationGetTimerTaskMemory+0x30>)
 800a322:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a32a:	601a      	str	r2, [r3, #0]
}
 800a32c:	bf00      	nop
 800a32e:	3714      	adds	r7, #20
 800a330:	46bd      	mov	sp, r7
 800a332:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a336:	4770      	bx	lr
 800a338:	200006a8 	.word	0x200006a8
 800a33c:	20000764 	.word	0x20000764

0800a340 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a340:	b480      	push	{r7}
 800a342:	b083      	sub	sp, #12
 800a344:	af00      	add	r7, sp, #0
 800a346:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	f103 0208 	add.w	r2, r3, #8
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	f04f 32ff 	mov.w	r2, #4294967295
 800a358:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	f103 0208 	add.w	r2, r3, #8
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	f103 0208 	add.w	r2, r3, #8
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	2200      	movs	r2, #0
 800a372:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a374:	bf00      	nop
 800a376:	370c      	adds	r7, #12
 800a378:	46bd      	mov	sp, r7
 800a37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a37e:	4770      	bx	lr

0800a380 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a380:	b480      	push	{r7}
 800a382:	b083      	sub	sp, #12
 800a384:	af00      	add	r7, sp, #0
 800a386:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	2200      	movs	r2, #0
 800a38c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a38e:	bf00      	nop
 800a390:	370c      	adds	r7, #12
 800a392:	46bd      	mov	sp, r7
 800a394:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a398:	4770      	bx	lr

0800a39a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a39a:	b480      	push	{r7}
 800a39c:	b085      	sub	sp, #20
 800a39e:	af00      	add	r7, sp, #0
 800a3a0:	6078      	str	r0, [r7, #4]
 800a3a2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	685b      	ldr	r3, [r3, #4]
 800a3a8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a3aa:	683b      	ldr	r3, [r7, #0]
 800a3ac:	68fa      	ldr	r2, [r7, #12]
 800a3ae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	689a      	ldr	r2, [r3, #8]
 800a3b4:	683b      	ldr	r3, [r7, #0]
 800a3b6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	689b      	ldr	r3, [r3, #8]
 800a3bc:	683a      	ldr	r2, [r7, #0]
 800a3be:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	683a      	ldr	r2, [r7, #0]
 800a3c4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a3c6:	683b      	ldr	r3, [r7, #0]
 800a3c8:	687a      	ldr	r2, [r7, #4]
 800a3ca:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	1c5a      	adds	r2, r3, #1
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	601a      	str	r2, [r3, #0]
}
 800a3d6:	bf00      	nop
 800a3d8:	3714      	adds	r7, #20
 800a3da:	46bd      	mov	sp, r7
 800a3dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e0:	4770      	bx	lr

0800a3e2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a3e2:	b480      	push	{r7}
 800a3e4:	b085      	sub	sp, #20
 800a3e6:	af00      	add	r7, sp, #0
 800a3e8:	6078      	str	r0, [r7, #4]
 800a3ea:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a3ec:	683b      	ldr	r3, [r7, #0]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a3f2:	68bb      	ldr	r3, [r7, #8]
 800a3f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3f8:	d103      	bne.n	800a402 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	691b      	ldr	r3, [r3, #16]
 800a3fe:	60fb      	str	r3, [r7, #12]
 800a400:	e00c      	b.n	800a41c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	3308      	adds	r3, #8
 800a406:	60fb      	str	r3, [r7, #12]
 800a408:	e002      	b.n	800a410 <vListInsert+0x2e>
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	685b      	ldr	r3, [r3, #4]
 800a40e:	60fb      	str	r3, [r7, #12]
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	685b      	ldr	r3, [r3, #4]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	68ba      	ldr	r2, [r7, #8]
 800a418:	429a      	cmp	r2, r3
 800a41a:	d2f6      	bcs.n	800a40a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	685a      	ldr	r2, [r3, #4]
 800a420:	683b      	ldr	r3, [r7, #0]
 800a422:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a424:	683b      	ldr	r3, [r7, #0]
 800a426:	685b      	ldr	r3, [r3, #4]
 800a428:	683a      	ldr	r2, [r7, #0]
 800a42a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a42c:	683b      	ldr	r3, [r7, #0]
 800a42e:	68fa      	ldr	r2, [r7, #12]
 800a430:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	683a      	ldr	r2, [r7, #0]
 800a436:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a438:	683b      	ldr	r3, [r7, #0]
 800a43a:	687a      	ldr	r2, [r7, #4]
 800a43c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	1c5a      	adds	r2, r3, #1
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	601a      	str	r2, [r3, #0]
}
 800a448:	bf00      	nop
 800a44a:	3714      	adds	r7, #20
 800a44c:	46bd      	mov	sp, r7
 800a44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a452:	4770      	bx	lr

0800a454 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a454:	b480      	push	{r7}
 800a456:	b085      	sub	sp, #20
 800a458:	af00      	add	r7, sp, #0
 800a45a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	691b      	ldr	r3, [r3, #16]
 800a460:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	685b      	ldr	r3, [r3, #4]
 800a466:	687a      	ldr	r2, [r7, #4]
 800a468:	6892      	ldr	r2, [r2, #8]
 800a46a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	689b      	ldr	r3, [r3, #8]
 800a470:	687a      	ldr	r2, [r7, #4]
 800a472:	6852      	ldr	r2, [r2, #4]
 800a474:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	685b      	ldr	r3, [r3, #4]
 800a47a:	687a      	ldr	r2, [r7, #4]
 800a47c:	429a      	cmp	r2, r3
 800a47e:	d103      	bne.n	800a488 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	689a      	ldr	r2, [r3, #8]
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	2200      	movs	r2, #0
 800a48c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	1e5a      	subs	r2, r3, #1
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	681b      	ldr	r3, [r3, #0]
}
 800a49c:	4618      	mov	r0, r3
 800a49e:	3714      	adds	r7, #20
 800a4a0:	46bd      	mov	sp, r7
 800a4a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a6:	4770      	bx	lr

0800a4a8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a4a8:	b580      	push	{r7, lr}
 800a4aa:	b084      	sub	sp, #16
 800a4ac:	af00      	add	r7, sp, #0
 800a4ae:	6078      	str	r0, [r7, #4]
 800a4b0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d10a      	bne.n	800a4d2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a4bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4c0:	f383 8811 	msr	BASEPRI, r3
 800a4c4:	f3bf 8f6f 	isb	sy
 800a4c8:	f3bf 8f4f 	dsb	sy
 800a4cc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a4ce:	bf00      	nop
 800a4d0:	e7fe      	b.n	800a4d0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a4d2:	f002 fcf7 	bl	800cec4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	681a      	ldr	r2, [r3, #0]
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4de:	68f9      	ldr	r1, [r7, #12]
 800a4e0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a4e2:	fb01 f303 	mul.w	r3, r1, r3
 800a4e6:	441a      	add	r2, r3
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	2200      	movs	r2, #0
 800a4f0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	681a      	ldr	r2, [r3, #0]
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	681a      	ldr	r2, [r3, #0]
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a502:	3b01      	subs	r3, #1
 800a504:	68f9      	ldr	r1, [r7, #12]
 800a506:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a508:	fb01 f303 	mul.w	r3, r1, r3
 800a50c:	441a      	add	r2, r3
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	22ff      	movs	r2, #255	; 0xff
 800a516:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	22ff      	movs	r2, #255	; 0xff
 800a51e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800a522:	683b      	ldr	r3, [r7, #0]
 800a524:	2b00      	cmp	r3, #0
 800a526:	d114      	bne.n	800a552 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	691b      	ldr	r3, [r3, #16]
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d01a      	beq.n	800a566 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	3310      	adds	r3, #16
 800a534:	4618      	mov	r0, r3
 800a536:	f001 fca9 	bl	800be8c <xTaskRemoveFromEventList>
 800a53a:	4603      	mov	r3, r0
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d012      	beq.n	800a566 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a540:	4b0c      	ldr	r3, [pc, #48]	; (800a574 <xQueueGenericReset+0xcc>)
 800a542:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a546:	601a      	str	r2, [r3, #0]
 800a548:	f3bf 8f4f 	dsb	sy
 800a54c:	f3bf 8f6f 	isb	sy
 800a550:	e009      	b.n	800a566 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	3310      	adds	r3, #16
 800a556:	4618      	mov	r0, r3
 800a558:	f7ff fef2 	bl	800a340 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	3324      	adds	r3, #36	; 0x24
 800a560:	4618      	mov	r0, r3
 800a562:	f7ff feed 	bl	800a340 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a566:	f002 fcdd 	bl	800cf24 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a56a:	2301      	movs	r3, #1
}
 800a56c:	4618      	mov	r0, r3
 800a56e:	3710      	adds	r7, #16
 800a570:	46bd      	mov	sp, r7
 800a572:	bd80      	pop	{r7, pc}
 800a574:	e000ed04 	.word	0xe000ed04

0800a578 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a578:	b580      	push	{r7, lr}
 800a57a:	b08e      	sub	sp, #56	; 0x38
 800a57c:	af02      	add	r7, sp, #8
 800a57e:	60f8      	str	r0, [r7, #12]
 800a580:	60b9      	str	r1, [r7, #8]
 800a582:	607a      	str	r2, [r7, #4]
 800a584:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d10a      	bne.n	800a5a2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800a58c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a590:	f383 8811 	msr	BASEPRI, r3
 800a594:	f3bf 8f6f 	isb	sy
 800a598:	f3bf 8f4f 	dsb	sy
 800a59c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a59e:	bf00      	nop
 800a5a0:	e7fe      	b.n	800a5a0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a5a2:	683b      	ldr	r3, [r7, #0]
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d10a      	bne.n	800a5be <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800a5a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5ac:	f383 8811 	msr	BASEPRI, r3
 800a5b0:	f3bf 8f6f 	isb	sy
 800a5b4:	f3bf 8f4f 	dsb	sy
 800a5b8:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a5ba:	bf00      	nop
 800a5bc:	e7fe      	b.n	800a5bc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d002      	beq.n	800a5ca <xQueueGenericCreateStatic+0x52>
 800a5c4:	68bb      	ldr	r3, [r7, #8]
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d001      	beq.n	800a5ce <xQueueGenericCreateStatic+0x56>
 800a5ca:	2301      	movs	r3, #1
 800a5cc:	e000      	b.n	800a5d0 <xQueueGenericCreateStatic+0x58>
 800a5ce:	2300      	movs	r3, #0
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d10a      	bne.n	800a5ea <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800a5d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5d8:	f383 8811 	msr	BASEPRI, r3
 800a5dc:	f3bf 8f6f 	isb	sy
 800a5e0:	f3bf 8f4f 	dsb	sy
 800a5e4:	623b      	str	r3, [r7, #32]
}
 800a5e6:	bf00      	nop
 800a5e8:	e7fe      	b.n	800a5e8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d102      	bne.n	800a5f6 <xQueueGenericCreateStatic+0x7e>
 800a5f0:	68bb      	ldr	r3, [r7, #8]
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d101      	bne.n	800a5fa <xQueueGenericCreateStatic+0x82>
 800a5f6:	2301      	movs	r3, #1
 800a5f8:	e000      	b.n	800a5fc <xQueueGenericCreateStatic+0x84>
 800a5fa:	2300      	movs	r3, #0
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d10a      	bne.n	800a616 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800a600:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a604:	f383 8811 	msr	BASEPRI, r3
 800a608:	f3bf 8f6f 	isb	sy
 800a60c:	f3bf 8f4f 	dsb	sy
 800a610:	61fb      	str	r3, [r7, #28]
}
 800a612:	bf00      	nop
 800a614:	e7fe      	b.n	800a614 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a616:	2350      	movs	r3, #80	; 0x50
 800a618:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a61a:	697b      	ldr	r3, [r7, #20]
 800a61c:	2b50      	cmp	r3, #80	; 0x50
 800a61e:	d00a      	beq.n	800a636 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800a620:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a624:	f383 8811 	msr	BASEPRI, r3
 800a628:	f3bf 8f6f 	isb	sy
 800a62c:	f3bf 8f4f 	dsb	sy
 800a630:	61bb      	str	r3, [r7, #24]
}
 800a632:	bf00      	nop
 800a634:	e7fe      	b.n	800a634 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a636:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a638:	683b      	ldr	r3, [r7, #0]
 800a63a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800a63c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d00d      	beq.n	800a65e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a644:	2201      	movs	r2, #1
 800a646:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a64a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a64e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a650:	9300      	str	r3, [sp, #0]
 800a652:	4613      	mov	r3, r2
 800a654:	687a      	ldr	r2, [r7, #4]
 800a656:	68b9      	ldr	r1, [r7, #8]
 800a658:	68f8      	ldr	r0, [r7, #12]
 800a65a:	f000 f83f 	bl	800a6dc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a65e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a660:	4618      	mov	r0, r3
 800a662:	3730      	adds	r7, #48	; 0x30
 800a664:	46bd      	mov	sp, r7
 800a666:	bd80      	pop	{r7, pc}

0800a668 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a668:	b580      	push	{r7, lr}
 800a66a:	b08a      	sub	sp, #40	; 0x28
 800a66c:	af02      	add	r7, sp, #8
 800a66e:	60f8      	str	r0, [r7, #12]
 800a670:	60b9      	str	r1, [r7, #8]
 800a672:	4613      	mov	r3, r2
 800a674:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d10a      	bne.n	800a692 <xQueueGenericCreate+0x2a>
	__asm volatile
 800a67c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a680:	f383 8811 	msr	BASEPRI, r3
 800a684:	f3bf 8f6f 	isb	sy
 800a688:	f3bf 8f4f 	dsb	sy
 800a68c:	613b      	str	r3, [r7, #16]
}
 800a68e:	bf00      	nop
 800a690:	e7fe      	b.n	800a690 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	68ba      	ldr	r2, [r7, #8]
 800a696:	fb02 f303 	mul.w	r3, r2, r3
 800a69a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800a69c:	69fb      	ldr	r3, [r7, #28]
 800a69e:	3350      	adds	r3, #80	; 0x50
 800a6a0:	4618      	mov	r0, r3
 800a6a2:	f002 fd31 	bl	800d108 <pvPortMalloc>
 800a6a6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a6a8:	69bb      	ldr	r3, [r7, #24]
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d011      	beq.n	800a6d2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800a6ae:	69bb      	ldr	r3, [r7, #24]
 800a6b0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a6b2:	697b      	ldr	r3, [r7, #20]
 800a6b4:	3350      	adds	r3, #80	; 0x50
 800a6b6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a6b8:	69bb      	ldr	r3, [r7, #24]
 800a6ba:	2200      	movs	r2, #0
 800a6bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a6c0:	79fa      	ldrb	r2, [r7, #7]
 800a6c2:	69bb      	ldr	r3, [r7, #24]
 800a6c4:	9300      	str	r3, [sp, #0]
 800a6c6:	4613      	mov	r3, r2
 800a6c8:	697a      	ldr	r2, [r7, #20]
 800a6ca:	68b9      	ldr	r1, [r7, #8]
 800a6cc:	68f8      	ldr	r0, [r7, #12]
 800a6ce:	f000 f805 	bl	800a6dc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a6d2:	69bb      	ldr	r3, [r7, #24]
	}
 800a6d4:	4618      	mov	r0, r3
 800a6d6:	3720      	adds	r7, #32
 800a6d8:	46bd      	mov	sp, r7
 800a6da:	bd80      	pop	{r7, pc}

0800a6dc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a6dc:	b580      	push	{r7, lr}
 800a6de:	b084      	sub	sp, #16
 800a6e0:	af00      	add	r7, sp, #0
 800a6e2:	60f8      	str	r0, [r7, #12]
 800a6e4:	60b9      	str	r1, [r7, #8]
 800a6e6:	607a      	str	r2, [r7, #4]
 800a6e8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a6ea:	68bb      	ldr	r3, [r7, #8]
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d103      	bne.n	800a6f8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a6f0:	69bb      	ldr	r3, [r7, #24]
 800a6f2:	69ba      	ldr	r2, [r7, #24]
 800a6f4:	601a      	str	r2, [r3, #0]
 800a6f6:	e002      	b.n	800a6fe <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a6f8:	69bb      	ldr	r3, [r7, #24]
 800a6fa:	687a      	ldr	r2, [r7, #4]
 800a6fc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a6fe:	69bb      	ldr	r3, [r7, #24]
 800a700:	68fa      	ldr	r2, [r7, #12]
 800a702:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a704:	69bb      	ldr	r3, [r7, #24]
 800a706:	68ba      	ldr	r2, [r7, #8]
 800a708:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a70a:	2101      	movs	r1, #1
 800a70c:	69b8      	ldr	r0, [r7, #24]
 800a70e:	f7ff fecb 	bl	800a4a8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a712:	69bb      	ldr	r3, [r7, #24]
 800a714:	78fa      	ldrb	r2, [r7, #3]
 800a716:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a71a:	bf00      	nop
 800a71c:	3710      	adds	r7, #16
 800a71e:	46bd      	mov	sp, r7
 800a720:	bd80      	pop	{r7, pc}

0800a722 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800a722:	b580      	push	{r7, lr}
 800a724:	b082      	sub	sp, #8
 800a726:	af00      	add	r7, sp, #0
 800a728:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d00e      	beq.n	800a74e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	2200      	movs	r2, #0
 800a734:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	2200      	movs	r2, #0
 800a73a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	2200      	movs	r2, #0
 800a740:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800a742:	2300      	movs	r3, #0
 800a744:	2200      	movs	r2, #0
 800a746:	2100      	movs	r1, #0
 800a748:	6878      	ldr	r0, [r7, #4]
 800a74a:	f000 f8a1 	bl	800a890 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800a74e:	bf00      	nop
 800a750:	3708      	adds	r7, #8
 800a752:	46bd      	mov	sp, r7
 800a754:	bd80      	pop	{r7, pc}

0800a756 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800a756:	b580      	push	{r7, lr}
 800a758:	b086      	sub	sp, #24
 800a75a:	af00      	add	r7, sp, #0
 800a75c:	4603      	mov	r3, r0
 800a75e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800a760:	2301      	movs	r3, #1
 800a762:	617b      	str	r3, [r7, #20]
 800a764:	2300      	movs	r3, #0
 800a766:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800a768:	79fb      	ldrb	r3, [r7, #7]
 800a76a:	461a      	mov	r2, r3
 800a76c:	6939      	ldr	r1, [r7, #16]
 800a76e:	6978      	ldr	r0, [r7, #20]
 800a770:	f7ff ff7a 	bl	800a668 <xQueueGenericCreate>
 800a774:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800a776:	68f8      	ldr	r0, [r7, #12]
 800a778:	f7ff ffd3 	bl	800a722 <prvInitialiseMutex>

		return xNewQueue;
 800a77c:	68fb      	ldr	r3, [r7, #12]
	}
 800a77e:	4618      	mov	r0, r3
 800a780:	3718      	adds	r7, #24
 800a782:	46bd      	mov	sp, r7
 800a784:	bd80      	pop	{r7, pc}

0800a786 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800a786:	b580      	push	{r7, lr}
 800a788:	b088      	sub	sp, #32
 800a78a:	af02      	add	r7, sp, #8
 800a78c:	4603      	mov	r3, r0
 800a78e:	6039      	str	r1, [r7, #0]
 800a790:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800a792:	2301      	movs	r3, #1
 800a794:	617b      	str	r3, [r7, #20]
 800a796:	2300      	movs	r3, #0
 800a798:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800a79a:	79fb      	ldrb	r3, [r7, #7]
 800a79c:	9300      	str	r3, [sp, #0]
 800a79e:	683b      	ldr	r3, [r7, #0]
 800a7a0:	2200      	movs	r2, #0
 800a7a2:	6939      	ldr	r1, [r7, #16]
 800a7a4:	6978      	ldr	r0, [r7, #20]
 800a7a6:	f7ff fee7 	bl	800a578 <xQueueGenericCreateStatic>
 800a7aa:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800a7ac:	68f8      	ldr	r0, [r7, #12]
 800a7ae:	f7ff ffb8 	bl	800a722 <prvInitialiseMutex>

		return xNewQueue;
 800a7b2:	68fb      	ldr	r3, [r7, #12]
	}
 800a7b4:	4618      	mov	r0, r3
 800a7b6:	3718      	adds	r7, #24
 800a7b8:	46bd      	mov	sp, r7
 800a7ba:	bd80      	pop	{r7, pc}

0800a7bc <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800a7bc:	b580      	push	{r7, lr}
 800a7be:	b08a      	sub	sp, #40	; 0x28
 800a7c0:	af02      	add	r7, sp, #8
 800a7c2:	60f8      	str	r0, [r7, #12]
 800a7c4:	60b9      	str	r1, [r7, #8]
 800a7c6:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d10a      	bne.n	800a7e4 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800a7ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7d2:	f383 8811 	msr	BASEPRI, r3
 800a7d6:	f3bf 8f6f 	isb	sy
 800a7da:	f3bf 8f4f 	dsb	sy
 800a7de:	61bb      	str	r3, [r7, #24]
}
 800a7e0:	bf00      	nop
 800a7e2:	e7fe      	b.n	800a7e2 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800a7e4:	68ba      	ldr	r2, [r7, #8]
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	429a      	cmp	r2, r3
 800a7ea:	d90a      	bls.n	800a802 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800a7ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7f0:	f383 8811 	msr	BASEPRI, r3
 800a7f4:	f3bf 8f6f 	isb	sy
 800a7f8:	f3bf 8f4f 	dsb	sy
 800a7fc:	617b      	str	r3, [r7, #20]
}
 800a7fe:	bf00      	nop
 800a800:	e7fe      	b.n	800a800 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800a802:	2302      	movs	r3, #2
 800a804:	9300      	str	r3, [sp, #0]
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	2200      	movs	r2, #0
 800a80a:	2100      	movs	r1, #0
 800a80c:	68f8      	ldr	r0, [r7, #12]
 800a80e:	f7ff feb3 	bl	800a578 <xQueueGenericCreateStatic>
 800a812:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800a814:	69fb      	ldr	r3, [r7, #28]
 800a816:	2b00      	cmp	r3, #0
 800a818:	d002      	beq.n	800a820 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800a81a:	69fb      	ldr	r3, [r7, #28]
 800a81c:	68ba      	ldr	r2, [r7, #8]
 800a81e:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800a820:	69fb      	ldr	r3, [r7, #28]
	}
 800a822:	4618      	mov	r0, r3
 800a824:	3720      	adds	r7, #32
 800a826:	46bd      	mov	sp, r7
 800a828:	bd80      	pop	{r7, pc}

0800a82a <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800a82a:	b580      	push	{r7, lr}
 800a82c:	b086      	sub	sp, #24
 800a82e:	af00      	add	r7, sp, #0
 800a830:	6078      	str	r0, [r7, #4]
 800a832:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	2b00      	cmp	r3, #0
 800a838:	d10a      	bne.n	800a850 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800a83a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a83e:	f383 8811 	msr	BASEPRI, r3
 800a842:	f3bf 8f6f 	isb	sy
 800a846:	f3bf 8f4f 	dsb	sy
 800a84a:	613b      	str	r3, [r7, #16]
}
 800a84c:	bf00      	nop
 800a84e:	e7fe      	b.n	800a84e <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800a850:	683a      	ldr	r2, [r7, #0]
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	429a      	cmp	r2, r3
 800a856:	d90a      	bls.n	800a86e <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800a858:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a85c:	f383 8811 	msr	BASEPRI, r3
 800a860:	f3bf 8f6f 	isb	sy
 800a864:	f3bf 8f4f 	dsb	sy
 800a868:	60fb      	str	r3, [r7, #12]
}
 800a86a:	bf00      	nop
 800a86c:	e7fe      	b.n	800a86c <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800a86e:	2202      	movs	r2, #2
 800a870:	2100      	movs	r1, #0
 800a872:	6878      	ldr	r0, [r7, #4]
 800a874:	f7ff fef8 	bl	800a668 <xQueueGenericCreate>
 800a878:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800a87a:	697b      	ldr	r3, [r7, #20]
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d002      	beq.n	800a886 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800a880:	697b      	ldr	r3, [r7, #20]
 800a882:	683a      	ldr	r2, [r7, #0]
 800a884:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800a886:	697b      	ldr	r3, [r7, #20]
	}
 800a888:	4618      	mov	r0, r3
 800a88a:	3718      	adds	r7, #24
 800a88c:	46bd      	mov	sp, r7
 800a88e:	bd80      	pop	{r7, pc}

0800a890 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a890:	b580      	push	{r7, lr}
 800a892:	b08e      	sub	sp, #56	; 0x38
 800a894:	af00      	add	r7, sp, #0
 800a896:	60f8      	str	r0, [r7, #12]
 800a898:	60b9      	str	r1, [r7, #8]
 800a89a:	607a      	str	r2, [r7, #4]
 800a89c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a89e:	2300      	movs	r3, #0
 800a8a0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a8a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d10a      	bne.n	800a8c2 <xQueueGenericSend+0x32>
	__asm volatile
 800a8ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8b0:	f383 8811 	msr	BASEPRI, r3
 800a8b4:	f3bf 8f6f 	isb	sy
 800a8b8:	f3bf 8f4f 	dsb	sy
 800a8bc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a8be:	bf00      	nop
 800a8c0:	e7fe      	b.n	800a8c0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a8c2:	68bb      	ldr	r3, [r7, #8]
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d103      	bne.n	800a8d0 <xQueueGenericSend+0x40>
 800a8c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d101      	bne.n	800a8d4 <xQueueGenericSend+0x44>
 800a8d0:	2301      	movs	r3, #1
 800a8d2:	e000      	b.n	800a8d6 <xQueueGenericSend+0x46>
 800a8d4:	2300      	movs	r3, #0
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d10a      	bne.n	800a8f0 <xQueueGenericSend+0x60>
	__asm volatile
 800a8da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8de:	f383 8811 	msr	BASEPRI, r3
 800a8e2:	f3bf 8f6f 	isb	sy
 800a8e6:	f3bf 8f4f 	dsb	sy
 800a8ea:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a8ec:	bf00      	nop
 800a8ee:	e7fe      	b.n	800a8ee <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a8f0:	683b      	ldr	r3, [r7, #0]
 800a8f2:	2b02      	cmp	r3, #2
 800a8f4:	d103      	bne.n	800a8fe <xQueueGenericSend+0x6e>
 800a8f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a8fa:	2b01      	cmp	r3, #1
 800a8fc:	d101      	bne.n	800a902 <xQueueGenericSend+0x72>
 800a8fe:	2301      	movs	r3, #1
 800a900:	e000      	b.n	800a904 <xQueueGenericSend+0x74>
 800a902:	2300      	movs	r3, #0
 800a904:	2b00      	cmp	r3, #0
 800a906:	d10a      	bne.n	800a91e <xQueueGenericSend+0x8e>
	__asm volatile
 800a908:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a90c:	f383 8811 	msr	BASEPRI, r3
 800a910:	f3bf 8f6f 	isb	sy
 800a914:	f3bf 8f4f 	dsb	sy
 800a918:	623b      	str	r3, [r7, #32]
}
 800a91a:	bf00      	nop
 800a91c:	e7fe      	b.n	800a91c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a91e:	f001 fc77 	bl	800c210 <xTaskGetSchedulerState>
 800a922:	4603      	mov	r3, r0
 800a924:	2b00      	cmp	r3, #0
 800a926:	d102      	bne.n	800a92e <xQueueGenericSend+0x9e>
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d101      	bne.n	800a932 <xQueueGenericSend+0xa2>
 800a92e:	2301      	movs	r3, #1
 800a930:	e000      	b.n	800a934 <xQueueGenericSend+0xa4>
 800a932:	2300      	movs	r3, #0
 800a934:	2b00      	cmp	r3, #0
 800a936:	d10a      	bne.n	800a94e <xQueueGenericSend+0xbe>
	__asm volatile
 800a938:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a93c:	f383 8811 	msr	BASEPRI, r3
 800a940:	f3bf 8f6f 	isb	sy
 800a944:	f3bf 8f4f 	dsb	sy
 800a948:	61fb      	str	r3, [r7, #28]
}
 800a94a:	bf00      	nop
 800a94c:	e7fe      	b.n	800a94c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a94e:	f002 fab9 	bl	800cec4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a954:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a958:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a95a:	429a      	cmp	r2, r3
 800a95c:	d302      	bcc.n	800a964 <xQueueGenericSend+0xd4>
 800a95e:	683b      	ldr	r3, [r7, #0]
 800a960:	2b02      	cmp	r3, #2
 800a962:	d129      	bne.n	800a9b8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a964:	683a      	ldr	r2, [r7, #0]
 800a966:	68b9      	ldr	r1, [r7, #8]
 800a968:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a96a:	f000 fc5e 	bl	800b22a <prvCopyDataToQueue>
 800a96e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a974:	2b00      	cmp	r3, #0
 800a976:	d010      	beq.n	800a99a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a97a:	3324      	adds	r3, #36	; 0x24
 800a97c:	4618      	mov	r0, r3
 800a97e:	f001 fa85 	bl	800be8c <xTaskRemoveFromEventList>
 800a982:	4603      	mov	r3, r0
 800a984:	2b00      	cmp	r3, #0
 800a986:	d013      	beq.n	800a9b0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a988:	4b3f      	ldr	r3, [pc, #252]	; (800aa88 <xQueueGenericSend+0x1f8>)
 800a98a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a98e:	601a      	str	r2, [r3, #0]
 800a990:	f3bf 8f4f 	dsb	sy
 800a994:	f3bf 8f6f 	isb	sy
 800a998:	e00a      	b.n	800a9b0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a99a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d007      	beq.n	800a9b0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a9a0:	4b39      	ldr	r3, [pc, #228]	; (800aa88 <xQueueGenericSend+0x1f8>)
 800a9a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a9a6:	601a      	str	r2, [r3, #0]
 800a9a8:	f3bf 8f4f 	dsb	sy
 800a9ac:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a9b0:	f002 fab8 	bl	800cf24 <vPortExitCritical>
				return pdPASS;
 800a9b4:	2301      	movs	r3, #1
 800a9b6:	e063      	b.n	800aa80 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d103      	bne.n	800a9c6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a9be:	f002 fab1 	bl	800cf24 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a9c2:	2300      	movs	r3, #0
 800a9c4:	e05c      	b.n	800aa80 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a9c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d106      	bne.n	800a9da <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a9cc:	f107 0314 	add.w	r3, r7, #20
 800a9d0:	4618      	mov	r0, r3
 800a9d2:	f001 fabf 	bl	800bf54 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a9d6:	2301      	movs	r3, #1
 800a9d8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a9da:	f002 faa3 	bl	800cf24 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a9de:	f001 f819 	bl	800ba14 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a9e2:	f002 fa6f 	bl	800cec4 <vPortEnterCritical>
 800a9e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9e8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a9ec:	b25b      	sxtb	r3, r3
 800a9ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9f2:	d103      	bne.n	800a9fc <xQueueGenericSend+0x16c>
 800a9f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9f6:	2200      	movs	r2, #0
 800a9f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a9fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9fe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aa02:	b25b      	sxtb	r3, r3
 800aa04:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa08:	d103      	bne.n	800aa12 <xQueueGenericSend+0x182>
 800aa0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa0c:	2200      	movs	r2, #0
 800aa0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800aa12:	f002 fa87 	bl	800cf24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800aa16:	1d3a      	adds	r2, r7, #4
 800aa18:	f107 0314 	add.w	r3, r7, #20
 800aa1c:	4611      	mov	r1, r2
 800aa1e:	4618      	mov	r0, r3
 800aa20:	f001 faae 	bl	800bf80 <xTaskCheckForTimeOut>
 800aa24:	4603      	mov	r3, r0
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d124      	bne.n	800aa74 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800aa2a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aa2c:	f000 fcf5 	bl	800b41a <prvIsQueueFull>
 800aa30:	4603      	mov	r3, r0
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d018      	beq.n	800aa68 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800aa36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa38:	3310      	adds	r3, #16
 800aa3a:	687a      	ldr	r2, [r7, #4]
 800aa3c:	4611      	mov	r1, r2
 800aa3e:	4618      	mov	r0, r3
 800aa40:	f001 f9d4 	bl	800bdec <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800aa44:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aa46:	f000 fc80 	bl	800b34a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800aa4a:	f000 fff1 	bl	800ba30 <xTaskResumeAll>
 800aa4e:	4603      	mov	r3, r0
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	f47f af7c 	bne.w	800a94e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800aa56:	4b0c      	ldr	r3, [pc, #48]	; (800aa88 <xQueueGenericSend+0x1f8>)
 800aa58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa5c:	601a      	str	r2, [r3, #0]
 800aa5e:	f3bf 8f4f 	dsb	sy
 800aa62:	f3bf 8f6f 	isb	sy
 800aa66:	e772      	b.n	800a94e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800aa68:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aa6a:	f000 fc6e 	bl	800b34a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800aa6e:	f000 ffdf 	bl	800ba30 <xTaskResumeAll>
 800aa72:	e76c      	b.n	800a94e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800aa74:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aa76:	f000 fc68 	bl	800b34a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800aa7a:	f000 ffd9 	bl	800ba30 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800aa7e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800aa80:	4618      	mov	r0, r3
 800aa82:	3738      	adds	r7, #56	; 0x38
 800aa84:	46bd      	mov	sp, r7
 800aa86:	bd80      	pop	{r7, pc}
 800aa88:	e000ed04 	.word	0xe000ed04

0800aa8c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800aa8c:	b580      	push	{r7, lr}
 800aa8e:	b090      	sub	sp, #64	; 0x40
 800aa90:	af00      	add	r7, sp, #0
 800aa92:	60f8      	str	r0, [r7, #12]
 800aa94:	60b9      	str	r1, [r7, #8]
 800aa96:	607a      	str	r2, [r7, #4]
 800aa98:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800aa9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d10a      	bne.n	800aaba <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800aaa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaa8:	f383 8811 	msr	BASEPRI, r3
 800aaac:	f3bf 8f6f 	isb	sy
 800aab0:	f3bf 8f4f 	dsb	sy
 800aab4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800aab6:	bf00      	nop
 800aab8:	e7fe      	b.n	800aab8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800aaba:	68bb      	ldr	r3, [r7, #8]
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d103      	bne.n	800aac8 <xQueueGenericSendFromISR+0x3c>
 800aac0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d101      	bne.n	800aacc <xQueueGenericSendFromISR+0x40>
 800aac8:	2301      	movs	r3, #1
 800aaca:	e000      	b.n	800aace <xQueueGenericSendFromISR+0x42>
 800aacc:	2300      	movs	r3, #0
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d10a      	bne.n	800aae8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800aad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aad6:	f383 8811 	msr	BASEPRI, r3
 800aada:	f3bf 8f6f 	isb	sy
 800aade:	f3bf 8f4f 	dsb	sy
 800aae2:	627b      	str	r3, [r7, #36]	; 0x24
}
 800aae4:	bf00      	nop
 800aae6:	e7fe      	b.n	800aae6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800aae8:	683b      	ldr	r3, [r7, #0]
 800aaea:	2b02      	cmp	r3, #2
 800aaec:	d103      	bne.n	800aaf6 <xQueueGenericSendFromISR+0x6a>
 800aaee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aaf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aaf2:	2b01      	cmp	r3, #1
 800aaf4:	d101      	bne.n	800aafa <xQueueGenericSendFromISR+0x6e>
 800aaf6:	2301      	movs	r3, #1
 800aaf8:	e000      	b.n	800aafc <xQueueGenericSendFromISR+0x70>
 800aafa:	2300      	movs	r3, #0
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d10a      	bne.n	800ab16 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800ab00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab04:	f383 8811 	msr	BASEPRI, r3
 800ab08:	f3bf 8f6f 	isb	sy
 800ab0c:	f3bf 8f4f 	dsb	sy
 800ab10:	623b      	str	r3, [r7, #32]
}
 800ab12:	bf00      	nop
 800ab14:	e7fe      	b.n	800ab14 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ab16:	f002 fab7 	bl	800d088 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800ab1a:	f3ef 8211 	mrs	r2, BASEPRI
 800ab1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab22:	f383 8811 	msr	BASEPRI, r3
 800ab26:	f3bf 8f6f 	isb	sy
 800ab2a:	f3bf 8f4f 	dsb	sy
 800ab2e:	61fa      	str	r2, [r7, #28]
 800ab30:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800ab32:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ab34:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ab36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ab3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab3e:	429a      	cmp	r2, r3
 800ab40:	d302      	bcc.n	800ab48 <xQueueGenericSendFromISR+0xbc>
 800ab42:	683b      	ldr	r3, [r7, #0]
 800ab44:	2b02      	cmp	r3, #2
 800ab46:	d12f      	bne.n	800aba8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ab48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab4a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ab4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ab52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab56:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ab58:	683a      	ldr	r2, [r7, #0]
 800ab5a:	68b9      	ldr	r1, [r7, #8]
 800ab5c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ab5e:	f000 fb64 	bl	800b22a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ab62:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800ab66:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab6a:	d112      	bne.n	800ab92 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ab6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d016      	beq.n	800aba2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ab74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab76:	3324      	adds	r3, #36	; 0x24
 800ab78:	4618      	mov	r0, r3
 800ab7a:	f001 f987 	bl	800be8c <xTaskRemoveFromEventList>
 800ab7e:	4603      	mov	r3, r0
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d00e      	beq.n	800aba2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d00b      	beq.n	800aba2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	2201      	movs	r2, #1
 800ab8e:	601a      	str	r2, [r3, #0]
 800ab90:	e007      	b.n	800aba2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ab92:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ab96:	3301      	adds	r3, #1
 800ab98:	b2db      	uxtb	r3, r3
 800ab9a:	b25a      	sxtb	r2, r3
 800ab9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800aba2:	2301      	movs	r3, #1
 800aba4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800aba6:	e001      	b.n	800abac <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800aba8:	2300      	movs	r3, #0
 800abaa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800abac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abae:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800abb0:	697b      	ldr	r3, [r7, #20]
 800abb2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800abb6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800abb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800abba:	4618      	mov	r0, r3
 800abbc:	3740      	adds	r7, #64	; 0x40
 800abbe:	46bd      	mov	sp, r7
 800abc0:	bd80      	pop	{r7, pc}

0800abc2 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800abc2:	b580      	push	{r7, lr}
 800abc4:	b08e      	sub	sp, #56	; 0x38
 800abc6:	af00      	add	r7, sp, #0
 800abc8:	6078      	str	r0, [r7, #4]
 800abca:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800abd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d10a      	bne.n	800abec <xQueueGiveFromISR+0x2a>
	__asm volatile
 800abd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abda:	f383 8811 	msr	BASEPRI, r3
 800abde:	f3bf 8f6f 	isb	sy
 800abe2:	f3bf 8f4f 	dsb	sy
 800abe6:	623b      	str	r3, [r7, #32]
}
 800abe8:	bf00      	nop
 800abea:	e7fe      	b.n	800abea <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800abec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d00a      	beq.n	800ac0a <xQueueGiveFromISR+0x48>
	__asm volatile
 800abf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abf8:	f383 8811 	msr	BASEPRI, r3
 800abfc:	f3bf 8f6f 	isb	sy
 800ac00:	f3bf 8f4f 	dsb	sy
 800ac04:	61fb      	str	r3, [r7, #28]
}
 800ac06:	bf00      	nop
 800ac08:	e7fe      	b.n	800ac08 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800ac0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d103      	bne.n	800ac1a <xQueueGiveFromISR+0x58>
 800ac12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac14:	689b      	ldr	r3, [r3, #8]
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d101      	bne.n	800ac1e <xQueueGiveFromISR+0x5c>
 800ac1a:	2301      	movs	r3, #1
 800ac1c:	e000      	b.n	800ac20 <xQueueGiveFromISR+0x5e>
 800ac1e:	2300      	movs	r3, #0
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d10a      	bne.n	800ac3a <xQueueGiveFromISR+0x78>
	__asm volatile
 800ac24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac28:	f383 8811 	msr	BASEPRI, r3
 800ac2c:	f3bf 8f6f 	isb	sy
 800ac30:	f3bf 8f4f 	dsb	sy
 800ac34:	61bb      	str	r3, [r7, #24]
}
 800ac36:	bf00      	nop
 800ac38:	e7fe      	b.n	800ac38 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ac3a:	f002 fa25 	bl	800d088 <vPortValidateInterruptPriority>
	__asm volatile
 800ac3e:	f3ef 8211 	mrs	r2, BASEPRI
 800ac42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac46:	f383 8811 	msr	BASEPRI, r3
 800ac4a:	f3bf 8f6f 	isb	sy
 800ac4e:	f3bf 8f4f 	dsb	sy
 800ac52:	617a      	str	r2, [r7, #20]
 800ac54:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800ac56:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ac58:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ac5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac5e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800ac60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac64:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ac66:	429a      	cmp	r2, r3
 800ac68:	d22b      	bcs.n	800acc2 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ac6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac6c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ac70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ac74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac76:	1c5a      	adds	r2, r3, #1
 800ac78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac7a:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ac7c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ac80:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac84:	d112      	bne.n	800acac <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ac86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d016      	beq.n	800acbc <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ac8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac90:	3324      	adds	r3, #36	; 0x24
 800ac92:	4618      	mov	r0, r3
 800ac94:	f001 f8fa 	bl	800be8c <xTaskRemoveFromEventList>
 800ac98:	4603      	mov	r3, r0
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d00e      	beq.n	800acbc <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ac9e:	683b      	ldr	r3, [r7, #0]
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d00b      	beq.n	800acbc <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800aca4:	683b      	ldr	r3, [r7, #0]
 800aca6:	2201      	movs	r2, #1
 800aca8:	601a      	str	r2, [r3, #0]
 800acaa:	e007      	b.n	800acbc <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800acac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800acb0:	3301      	adds	r3, #1
 800acb2:	b2db      	uxtb	r3, r3
 800acb4:	b25a      	sxtb	r2, r3
 800acb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acb8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800acbc:	2301      	movs	r3, #1
 800acbe:	637b      	str	r3, [r7, #52]	; 0x34
 800acc0:	e001      	b.n	800acc6 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800acc2:	2300      	movs	r3, #0
 800acc4:	637b      	str	r3, [r7, #52]	; 0x34
 800acc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acc8:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	f383 8811 	msr	BASEPRI, r3
}
 800acd0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800acd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800acd4:	4618      	mov	r0, r3
 800acd6:	3738      	adds	r7, #56	; 0x38
 800acd8:	46bd      	mov	sp, r7
 800acda:	bd80      	pop	{r7, pc}

0800acdc <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800acdc:	b580      	push	{r7, lr}
 800acde:	b08c      	sub	sp, #48	; 0x30
 800ace0:	af00      	add	r7, sp, #0
 800ace2:	60f8      	str	r0, [r7, #12]
 800ace4:	60b9      	str	r1, [r7, #8]
 800ace6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800ace8:	2300      	movs	r3, #0
 800acea:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800acf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d10a      	bne.n	800ad0c <xQueueReceive+0x30>
	__asm volatile
 800acf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acfa:	f383 8811 	msr	BASEPRI, r3
 800acfe:	f3bf 8f6f 	isb	sy
 800ad02:	f3bf 8f4f 	dsb	sy
 800ad06:	623b      	str	r3, [r7, #32]
}
 800ad08:	bf00      	nop
 800ad0a:	e7fe      	b.n	800ad0a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ad0c:	68bb      	ldr	r3, [r7, #8]
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d103      	bne.n	800ad1a <xQueueReceive+0x3e>
 800ad12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d101      	bne.n	800ad1e <xQueueReceive+0x42>
 800ad1a:	2301      	movs	r3, #1
 800ad1c:	e000      	b.n	800ad20 <xQueueReceive+0x44>
 800ad1e:	2300      	movs	r3, #0
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d10a      	bne.n	800ad3a <xQueueReceive+0x5e>
	__asm volatile
 800ad24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad28:	f383 8811 	msr	BASEPRI, r3
 800ad2c:	f3bf 8f6f 	isb	sy
 800ad30:	f3bf 8f4f 	dsb	sy
 800ad34:	61fb      	str	r3, [r7, #28]
}
 800ad36:	bf00      	nop
 800ad38:	e7fe      	b.n	800ad38 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ad3a:	f001 fa69 	bl	800c210 <xTaskGetSchedulerState>
 800ad3e:	4603      	mov	r3, r0
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d102      	bne.n	800ad4a <xQueueReceive+0x6e>
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d101      	bne.n	800ad4e <xQueueReceive+0x72>
 800ad4a:	2301      	movs	r3, #1
 800ad4c:	e000      	b.n	800ad50 <xQueueReceive+0x74>
 800ad4e:	2300      	movs	r3, #0
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d10a      	bne.n	800ad6a <xQueueReceive+0x8e>
	__asm volatile
 800ad54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad58:	f383 8811 	msr	BASEPRI, r3
 800ad5c:	f3bf 8f6f 	isb	sy
 800ad60:	f3bf 8f4f 	dsb	sy
 800ad64:	61bb      	str	r3, [r7, #24]
}
 800ad66:	bf00      	nop
 800ad68:	e7fe      	b.n	800ad68 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ad6a:	f002 f8ab 	bl	800cec4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ad6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad72:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ad74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d01f      	beq.n	800adba <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ad7a:	68b9      	ldr	r1, [r7, #8]
 800ad7c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ad7e:	f000 fabe 	bl	800b2fe <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ad82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad84:	1e5a      	subs	r2, r3, #1
 800ad86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad88:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ad8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad8c:	691b      	ldr	r3, [r3, #16]
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d00f      	beq.n	800adb2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ad92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad94:	3310      	adds	r3, #16
 800ad96:	4618      	mov	r0, r3
 800ad98:	f001 f878 	bl	800be8c <xTaskRemoveFromEventList>
 800ad9c:	4603      	mov	r3, r0
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d007      	beq.n	800adb2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ada2:	4b3d      	ldr	r3, [pc, #244]	; (800ae98 <xQueueReceive+0x1bc>)
 800ada4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ada8:	601a      	str	r2, [r3, #0]
 800adaa:	f3bf 8f4f 	dsb	sy
 800adae:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800adb2:	f002 f8b7 	bl	800cf24 <vPortExitCritical>
				return pdPASS;
 800adb6:	2301      	movs	r3, #1
 800adb8:	e069      	b.n	800ae8e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d103      	bne.n	800adc8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800adc0:	f002 f8b0 	bl	800cf24 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800adc4:	2300      	movs	r3, #0
 800adc6:	e062      	b.n	800ae8e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800adc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d106      	bne.n	800addc <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800adce:	f107 0310 	add.w	r3, r7, #16
 800add2:	4618      	mov	r0, r3
 800add4:	f001 f8be 	bl	800bf54 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800add8:	2301      	movs	r3, #1
 800adda:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800addc:	f002 f8a2 	bl	800cf24 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ade0:	f000 fe18 	bl	800ba14 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ade4:	f002 f86e 	bl	800cec4 <vPortEnterCritical>
 800ade8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800adee:	b25b      	sxtb	r3, r3
 800adf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800adf4:	d103      	bne.n	800adfe <xQueueReceive+0x122>
 800adf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adf8:	2200      	movs	r2, #0
 800adfa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800adfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae00:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ae04:	b25b      	sxtb	r3, r3
 800ae06:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae0a:	d103      	bne.n	800ae14 <xQueueReceive+0x138>
 800ae0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae0e:	2200      	movs	r2, #0
 800ae10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ae14:	f002 f886 	bl	800cf24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ae18:	1d3a      	adds	r2, r7, #4
 800ae1a:	f107 0310 	add.w	r3, r7, #16
 800ae1e:	4611      	mov	r1, r2
 800ae20:	4618      	mov	r0, r3
 800ae22:	f001 f8ad 	bl	800bf80 <xTaskCheckForTimeOut>
 800ae26:	4603      	mov	r3, r0
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d123      	bne.n	800ae74 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ae2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ae2e:	f000 fade 	bl	800b3ee <prvIsQueueEmpty>
 800ae32:	4603      	mov	r3, r0
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d017      	beq.n	800ae68 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ae38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae3a:	3324      	adds	r3, #36	; 0x24
 800ae3c:	687a      	ldr	r2, [r7, #4]
 800ae3e:	4611      	mov	r1, r2
 800ae40:	4618      	mov	r0, r3
 800ae42:	f000 ffd3 	bl	800bdec <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ae46:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ae48:	f000 fa7f 	bl	800b34a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ae4c:	f000 fdf0 	bl	800ba30 <xTaskResumeAll>
 800ae50:	4603      	mov	r3, r0
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d189      	bne.n	800ad6a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800ae56:	4b10      	ldr	r3, [pc, #64]	; (800ae98 <xQueueReceive+0x1bc>)
 800ae58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae5c:	601a      	str	r2, [r3, #0]
 800ae5e:	f3bf 8f4f 	dsb	sy
 800ae62:	f3bf 8f6f 	isb	sy
 800ae66:	e780      	b.n	800ad6a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800ae68:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ae6a:	f000 fa6e 	bl	800b34a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ae6e:	f000 fddf 	bl	800ba30 <xTaskResumeAll>
 800ae72:	e77a      	b.n	800ad6a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800ae74:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ae76:	f000 fa68 	bl	800b34a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ae7a:	f000 fdd9 	bl	800ba30 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ae7e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ae80:	f000 fab5 	bl	800b3ee <prvIsQueueEmpty>
 800ae84:	4603      	mov	r3, r0
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	f43f af6f 	beq.w	800ad6a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ae8c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ae8e:	4618      	mov	r0, r3
 800ae90:	3730      	adds	r7, #48	; 0x30
 800ae92:	46bd      	mov	sp, r7
 800ae94:	bd80      	pop	{r7, pc}
 800ae96:	bf00      	nop
 800ae98:	e000ed04 	.word	0xe000ed04

0800ae9c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800ae9c:	b580      	push	{r7, lr}
 800ae9e:	b08e      	sub	sp, #56	; 0x38
 800aea0:	af00      	add	r7, sp, #0
 800aea2:	6078      	str	r0, [r7, #4]
 800aea4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800aea6:	2300      	movs	r3, #0
 800aea8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800aeae:	2300      	movs	r3, #0
 800aeb0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800aeb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d10a      	bne.n	800aece <xQueueSemaphoreTake+0x32>
	__asm volatile
 800aeb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aebc:	f383 8811 	msr	BASEPRI, r3
 800aec0:	f3bf 8f6f 	isb	sy
 800aec4:	f3bf 8f4f 	dsb	sy
 800aec8:	623b      	str	r3, [r7, #32]
}
 800aeca:	bf00      	nop
 800aecc:	e7fe      	b.n	800aecc <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800aece:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d00a      	beq.n	800aeec <xQueueSemaphoreTake+0x50>
	__asm volatile
 800aed6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aeda:	f383 8811 	msr	BASEPRI, r3
 800aede:	f3bf 8f6f 	isb	sy
 800aee2:	f3bf 8f4f 	dsb	sy
 800aee6:	61fb      	str	r3, [r7, #28]
}
 800aee8:	bf00      	nop
 800aeea:	e7fe      	b.n	800aeea <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800aeec:	f001 f990 	bl	800c210 <xTaskGetSchedulerState>
 800aef0:	4603      	mov	r3, r0
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d102      	bne.n	800aefc <xQueueSemaphoreTake+0x60>
 800aef6:	683b      	ldr	r3, [r7, #0]
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d101      	bne.n	800af00 <xQueueSemaphoreTake+0x64>
 800aefc:	2301      	movs	r3, #1
 800aefe:	e000      	b.n	800af02 <xQueueSemaphoreTake+0x66>
 800af00:	2300      	movs	r3, #0
 800af02:	2b00      	cmp	r3, #0
 800af04:	d10a      	bne.n	800af1c <xQueueSemaphoreTake+0x80>
	__asm volatile
 800af06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af0a:	f383 8811 	msr	BASEPRI, r3
 800af0e:	f3bf 8f6f 	isb	sy
 800af12:	f3bf 8f4f 	dsb	sy
 800af16:	61bb      	str	r3, [r7, #24]
}
 800af18:	bf00      	nop
 800af1a:	e7fe      	b.n	800af1a <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800af1c:	f001 ffd2 	bl	800cec4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800af20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af24:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800af26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d024      	beq.n	800af76 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800af2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af2e:	1e5a      	subs	r2, r3, #1
 800af30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af32:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800af34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d104      	bne.n	800af46 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800af3c:	f001 fade 	bl	800c4fc <pvTaskIncrementMutexHeldCount>
 800af40:	4602      	mov	r2, r0
 800af42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af44:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800af46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af48:	691b      	ldr	r3, [r3, #16]
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d00f      	beq.n	800af6e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800af4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af50:	3310      	adds	r3, #16
 800af52:	4618      	mov	r0, r3
 800af54:	f000 ff9a 	bl	800be8c <xTaskRemoveFromEventList>
 800af58:	4603      	mov	r3, r0
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d007      	beq.n	800af6e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800af5e:	4b54      	ldr	r3, [pc, #336]	; (800b0b0 <xQueueSemaphoreTake+0x214>)
 800af60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af64:	601a      	str	r2, [r3, #0]
 800af66:	f3bf 8f4f 	dsb	sy
 800af6a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800af6e:	f001 ffd9 	bl	800cf24 <vPortExitCritical>
				return pdPASS;
 800af72:	2301      	movs	r3, #1
 800af74:	e097      	b.n	800b0a6 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800af76:	683b      	ldr	r3, [r7, #0]
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d111      	bne.n	800afa0 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800af7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d00a      	beq.n	800af98 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800af82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af86:	f383 8811 	msr	BASEPRI, r3
 800af8a:	f3bf 8f6f 	isb	sy
 800af8e:	f3bf 8f4f 	dsb	sy
 800af92:	617b      	str	r3, [r7, #20]
}
 800af94:	bf00      	nop
 800af96:	e7fe      	b.n	800af96 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800af98:	f001 ffc4 	bl	800cf24 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800af9c:	2300      	movs	r3, #0
 800af9e:	e082      	b.n	800b0a6 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800afa0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d106      	bne.n	800afb4 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800afa6:	f107 030c 	add.w	r3, r7, #12
 800afaa:	4618      	mov	r0, r3
 800afac:	f000 ffd2 	bl	800bf54 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800afb0:	2301      	movs	r3, #1
 800afb2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800afb4:	f001 ffb6 	bl	800cf24 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800afb8:	f000 fd2c 	bl	800ba14 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800afbc:	f001 ff82 	bl	800cec4 <vPortEnterCritical>
 800afc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afc2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800afc6:	b25b      	sxtb	r3, r3
 800afc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800afcc:	d103      	bne.n	800afd6 <xQueueSemaphoreTake+0x13a>
 800afce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afd0:	2200      	movs	r2, #0
 800afd2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800afd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afd8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800afdc:	b25b      	sxtb	r3, r3
 800afde:	f1b3 3fff 	cmp.w	r3, #4294967295
 800afe2:	d103      	bne.n	800afec <xQueueSemaphoreTake+0x150>
 800afe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afe6:	2200      	movs	r2, #0
 800afe8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800afec:	f001 ff9a 	bl	800cf24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800aff0:	463a      	mov	r2, r7
 800aff2:	f107 030c 	add.w	r3, r7, #12
 800aff6:	4611      	mov	r1, r2
 800aff8:	4618      	mov	r0, r3
 800affa:	f000 ffc1 	bl	800bf80 <xTaskCheckForTimeOut>
 800affe:	4603      	mov	r3, r0
 800b000:	2b00      	cmp	r3, #0
 800b002:	d132      	bne.n	800b06a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b004:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b006:	f000 f9f2 	bl	800b3ee <prvIsQueueEmpty>
 800b00a:	4603      	mov	r3, r0
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d026      	beq.n	800b05e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	2b00      	cmp	r3, #0
 800b016:	d109      	bne.n	800b02c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800b018:	f001 ff54 	bl	800cec4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b01c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b01e:	689b      	ldr	r3, [r3, #8]
 800b020:	4618      	mov	r0, r3
 800b022:	f001 f913 	bl	800c24c <xTaskPriorityInherit>
 800b026:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800b028:	f001 ff7c 	bl	800cf24 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b02c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b02e:	3324      	adds	r3, #36	; 0x24
 800b030:	683a      	ldr	r2, [r7, #0]
 800b032:	4611      	mov	r1, r2
 800b034:	4618      	mov	r0, r3
 800b036:	f000 fed9 	bl	800bdec <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b03a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b03c:	f000 f985 	bl	800b34a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b040:	f000 fcf6 	bl	800ba30 <xTaskResumeAll>
 800b044:	4603      	mov	r3, r0
 800b046:	2b00      	cmp	r3, #0
 800b048:	f47f af68 	bne.w	800af1c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800b04c:	4b18      	ldr	r3, [pc, #96]	; (800b0b0 <xQueueSemaphoreTake+0x214>)
 800b04e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b052:	601a      	str	r2, [r3, #0]
 800b054:	f3bf 8f4f 	dsb	sy
 800b058:	f3bf 8f6f 	isb	sy
 800b05c:	e75e      	b.n	800af1c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800b05e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b060:	f000 f973 	bl	800b34a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b064:	f000 fce4 	bl	800ba30 <xTaskResumeAll>
 800b068:	e758      	b.n	800af1c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800b06a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b06c:	f000 f96d 	bl	800b34a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b070:	f000 fcde 	bl	800ba30 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b074:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b076:	f000 f9ba 	bl	800b3ee <prvIsQueueEmpty>
 800b07a:	4603      	mov	r3, r0
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	f43f af4d 	beq.w	800af1c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800b082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b084:	2b00      	cmp	r3, #0
 800b086:	d00d      	beq.n	800b0a4 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800b088:	f001 ff1c 	bl	800cec4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800b08c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b08e:	f000 f8b4 	bl	800b1fa <prvGetDisinheritPriorityAfterTimeout>
 800b092:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800b094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b096:	689b      	ldr	r3, [r3, #8]
 800b098:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b09a:	4618      	mov	r0, r3
 800b09c:	f001 f9ac 	bl	800c3f8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800b0a0:	f001 ff40 	bl	800cf24 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b0a4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b0a6:	4618      	mov	r0, r3
 800b0a8:	3738      	adds	r7, #56	; 0x38
 800b0aa:	46bd      	mov	sp, r7
 800b0ac:	bd80      	pop	{r7, pc}
 800b0ae:	bf00      	nop
 800b0b0:	e000ed04 	.word	0xe000ed04

0800b0b4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800b0b4:	b580      	push	{r7, lr}
 800b0b6:	b08e      	sub	sp, #56	; 0x38
 800b0b8:	af00      	add	r7, sp, #0
 800b0ba:	60f8      	str	r0, [r7, #12]
 800b0bc:	60b9      	str	r1, [r7, #8]
 800b0be:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b0c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d10a      	bne.n	800b0e0 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800b0ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0ce:	f383 8811 	msr	BASEPRI, r3
 800b0d2:	f3bf 8f6f 	isb	sy
 800b0d6:	f3bf 8f4f 	dsb	sy
 800b0da:	623b      	str	r3, [r7, #32]
}
 800b0dc:	bf00      	nop
 800b0de:	e7fe      	b.n	800b0de <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b0e0:	68bb      	ldr	r3, [r7, #8]
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d103      	bne.n	800b0ee <xQueueReceiveFromISR+0x3a>
 800b0e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d101      	bne.n	800b0f2 <xQueueReceiveFromISR+0x3e>
 800b0ee:	2301      	movs	r3, #1
 800b0f0:	e000      	b.n	800b0f4 <xQueueReceiveFromISR+0x40>
 800b0f2:	2300      	movs	r3, #0
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d10a      	bne.n	800b10e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800b0f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0fc:	f383 8811 	msr	BASEPRI, r3
 800b100:	f3bf 8f6f 	isb	sy
 800b104:	f3bf 8f4f 	dsb	sy
 800b108:	61fb      	str	r3, [r7, #28]
}
 800b10a:	bf00      	nop
 800b10c:	e7fe      	b.n	800b10c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b10e:	f001 ffbb 	bl	800d088 <vPortValidateInterruptPriority>
	__asm volatile
 800b112:	f3ef 8211 	mrs	r2, BASEPRI
 800b116:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b11a:	f383 8811 	msr	BASEPRI, r3
 800b11e:	f3bf 8f6f 	isb	sy
 800b122:	f3bf 8f4f 	dsb	sy
 800b126:	61ba      	str	r2, [r7, #24]
 800b128:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800b12a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b12c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b12e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b130:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b132:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b136:	2b00      	cmp	r3, #0
 800b138:	d02f      	beq.n	800b19a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800b13a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b13c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b140:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b144:	68b9      	ldr	r1, [r7, #8]
 800b146:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b148:	f000 f8d9 	bl	800b2fe <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b14c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b14e:	1e5a      	subs	r2, r3, #1
 800b150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b152:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800b154:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b158:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b15c:	d112      	bne.n	800b184 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b15e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b160:	691b      	ldr	r3, [r3, #16]
 800b162:	2b00      	cmp	r3, #0
 800b164:	d016      	beq.n	800b194 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b168:	3310      	adds	r3, #16
 800b16a:	4618      	mov	r0, r3
 800b16c:	f000 fe8e 	bl	800be8c <xTaskRemoveFromEventList>
 800b170:	4603      	mov	r3, r0
 800b172:	2b00      	cmp	r3, #0
 800b174:	d00e      	beq.n	800b194 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d00b      	beq.n	800b194 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	2201      	movs	r2, #1
 800b180:	601a      	str	r2, [r3, #0]
 800b182:	e007      	b.n	800b194 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800b184:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b188:	3301      	adds	r3, #1
 800b18a:	b2db      	uxtb	r3, r3
 800b18c:	b25a      	sxtb	r2, r3
 800b18e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b190:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800b194:	2301      	movs	r3, #1
 800b196:	637b      	str	r3, [r7, #52]	; 0x34
 800b198:	e001      	b.n	800b19e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800b19a:	2300      	movs	r3, #0
 800b19c:	637b      	str	r3, [r7, #52]	; 0x34
 800b19e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1a0:	613b      	str	r3, [r7, #16]
	__asm volatile
 800b1a2:	693b      	ldr	r3, [r7, #16]
 800b1a4:	f383 8811 	msr	BASEPRI, r3
}
 800b1a8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b1aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b1ac:	4618      	mov	r0, r3
 800b1ae:	3738      	adds	r7, #56	; 0x38
 800b1b0:	46bd      	mov	sp, r7
 800b1b2:	bd80      	pop	{r7, pc}

0800b1b4 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800b1b4:	b580      	push	{r7, lr}
 800b1b6:	b084      	sub	sp, #16
 800b1b8:	af00      	add	r7, sp, #0
 800b1ba:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d10a      	bne.n	800b1dc <vQueueDelete+0x28>
	__asm volatile
 800b1c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1ca:	f383 8811 	msr	BASEPRI, r3
 800b1ce:	f3bf 8f6f 	isb	sy
 800b1d2:	f3bf 8f4f 	dsb	sy
 800b1d6:	60bb      	str	r3, [r7, #8]
}
 800b1d8:	bf00      	nop
 800b1da:	e7fe      	b.n	800b1da <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800b1dc:	68f8      	ldr	r0, [r7, #12]
 800b1de:	f000 f95f 	bl	800b4a0 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d102      	bne.n	800b1f2 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800b1ec:	68f8      	ldr	r0, [r7, #12]
 800b1ee:	f002 f857 	bl	800d2a0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800b1f2:	bf00      	nop
 800b1f4:	3710      	adds	r7, #16
 800b1f6:	46bd      	mov	sp, r7
 800b1f8:	bd80      	pop	{r7, pc}

0800b1fa <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800b1fa:	b480      	push	{r7}
 800b1fc:	b085      	sub	sp, #20
 800b1fe:	af00      	add	r7, sp, #0
 800b200:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b206:	2b00      	cmp	r3, #0
 800b208:	d006      	beq.n	800b218 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800b214:	60fb      	str	r3, [r7, #12]
 800b216:	e001      	b.n	800b21c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800b218:	2300      	movs	r3, #0
 800b21a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800b21c:	68fb      	ldr	r3, [r7, #12]
	}
 800b21e:	4618      	mov	r0, r3
 800b220:	3714      	adds	r7, #20
 800b222:	46bd      	mov	sp, r7
 800b224:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b228:	4770      	bx	lr

0800b22a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b22a:	b580      	push	{r7, lr}
 800b22c:	b086      	sub	sp, #24
 800b22e:	af00      	add	r7, sp, #0
 800b230:	60f8      	str	r0, [r7, #12]
 800b232:	60b9      	str	r1, [r7, #8]
 800b234:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b236:	2300      	movs	r3, #0
 800b238:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b23e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b244:	2b00      	cmp	r3, #0
 800b246:	d10d      	bne.n	800b264 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d14d      	bne.n	800b2ec <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	689b      	ldr	r3, [r3, #8]
 800b254:	4618      	mov	r0, r3
 800b256:	f001 f861 	bl	800c31c <xTaskPriorityDisinherit>
 800b25a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	2200      	movs	r2, #0
 800b260:	609a      	str	r2, [r3, #8]
 800b262:	e043      	b.n	800b2ec <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	2b00      	cmp	r3, #0
 800b268:	d119      	bne.n	800b29e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	6858      	ldr	r0, [r3, #4]
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b272:	461a      	mov	r2, r3
 800b274:	68b9      	ldr	r1, [r7, #8]
 800b276:	f002 f957 	bl	800d528 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	685a      	ldr	r2, [r3, #4]
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b282:	441a      	add	r2, r3
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	685a      	ldr	r2, [r3, #4]
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	689b      	ldr	r3, [r3, #8]
 800b290:	429a      	cmp	r2, r3
 800b292:	d32b      	bcc.n	800b2ec <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	681a      	ldr	r2, [r3, #0]
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	605a      	str	r2, [r3, #4]
 800b29c:	e026      	b.n	800b2ec <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	68d8      	ldr	r0, [r3, #12]
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2a6:	461a      	mov	r2, r3
 800b2a8:	68b9      	ldr	r1, [r7, #8]
 800b2aa:	f002 f93d 	bl	800d528 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	68da      	ldr	r2, [r3, #12]
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2b6:	425b      	negs	r3, r3
 800b2b8:	441a      	add	r2, r3
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	68da      	ldr	r2, [r3, #12]
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	429a      	cmp	r2, r3
 800b2c8:	d207      	bcs.n	800b2da <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	689a      	ldr	r2, [r3, #8]
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2d2:	425b      	negs	r3, r3
 800b2d4:	441a      	add	r2, r3
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	2b02      	cmp	r3, #2
 800b2de:	d105      	bne.n	800b2ec <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b2e0:	693b      	ldr	r3, [r7, #16]
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d002      	beq.n	800b2ec <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b2e6:	693b      	ldr	r3, [r7, #16]
 800b2e8:	3b01      	subs	r3, #1
 800b2ea:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b2ec:	693b      	ldr	r3, [r7, #16]
 800b2ee:	1c5a      	adds	r2, r3, #1
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800b2f4:	697b      	ldr	r3, [r7, #20]
}
 800b2f6:	4618      	mov	r0, r3
 800b2f8:	3718      	adds	r7, #24
 800b2fa:	46bd      	mov	sp, r7
 800b2fc:	bd80      	pop	{r7, pc}

0800b2fe <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b2fe:	b580      	push	{r7, lr}
 800b300:	b082      	sub	sp, #8
 800b302:	af00      	add	r7, sp, #0
 800b304:	6078      	str	r0, [r7, #4]
 800b306:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d018      	beq.n	800b342 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	68da      	ldr	r2, [r3, #12]
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b318:	441a      	add	r2, r3
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	68da      	ldr	r2, [r3, #12]
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	689b      	ldr	r3, [r3, #8]
 800b326:	429a      	cmp	r2, r3
 800b328:	d303      	bcc.n	800b332 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	681a      	ldr	r2, [r3, #0]
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	68d9      	ldr	r1, [r3, #12]
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b33a:	461a      	mov	r2, r3
 800b33c:	6838      	ldr	r0, [r7, #0]
 800b33e:	f002 f8f3 	bl	800d528 <memcpy>
	}
}
 800b342:	bf00      	nop
 800b344:	3708      	adds	r7, #8
 800b346:	46bd      	mov	sp, r7
 800b348:	bd80      	pop	{r7, pc}

0800b34a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b34a:	b580      	push	{r7, lr}
 800b34c:	b084      	sub	sp, #16
 800b34e:	af00      	add	r7, sp, #0
 800b350:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b352:	f001 fdb7 	bl	800cec4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b35c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b35e:	e011      	b.n	800b384 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b364:	2b00      	cmp	r3, #0
 800b366:	d012      	beq.n	800b38e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	3324      	adds	r3, #36	; 0x24
 800b36c:	4618      	mov	r0, r3
 800b36e:	f000 fd8d 	bl	800be8c <xTaskRemoveFromEventList>
 800b372:	4603      	mov	r3, r0
 800b374:	2b00      	cmp	r3, #0
 800b376:	d001      	beq.n	800b37c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b378:	f000 fe64 	bl	800c044 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b37c:	7bfb      	ldrb	r3, [r7, #15]
 800b37e:	3b01      	subs	r3, #1
 800b380:	b2db      	uxtb	r3, r3
 800b382:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b384:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b388:	2b00      	cmp	r3, #0
 800b38a:	dce9      	bgt.n	800b360 <prvUnlockQueue+0x16>
 800b38c:	e000      	b.n	800b390 <prvUnlockQueue+0x46>
					break;
 800b38e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	22ff      	movs	r2, #255	; 0xff
 800b394:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800b398:	f001 fdc4 	bl	800cf24 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b39c:	f001 fd92 	bl	800cec4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b3a6:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b3a8:	e011      	b.n	800b3ce <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	691b      	ldr	r3, [r3, #16]
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d012      	beq.n	800b3d8 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	3310      	adds	r3, #16
 800b3b6:	4618      	mov	r0, r3
 800b3b8:	f000 fd68 	bl	800be8c <xTaskRemoveFromEventList>
 800b3bc:	4603      	mov	r3, r0
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d001      	beq.n	800b3c6 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b3c2:	f000 fe3f 	bl	800c044 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b3c6:	7bbb      	ldrb	r3, [r7, #14]
 800b3c8:	3b01      	subs	r3, #1
 800b3ca:	b2db      	uxtb	r3, r3
 800b3cc:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b3ce:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	dce9      	bgt.n	800b3aa <prvUnlockQueue+0x60>
 800b3d6:	e000      	b.n	800b3da <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b3d8:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	22ff      	movs	r2, #255	; 0xff
 800b3de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800b3e2:	f001 fd9f 	bl	800cf24 <vPortExitCritical>
}
 800b3e6:	bf00      	nop
 800b3e8:	3710      	adds	r7, #16
 800b3ea:	46bd      	mov	sp, r7
 800b3ec:	bd80      	pop	{r7, pc}

0800b3ee <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b3ee:	b580      	push	{r7, lr}
 800b3f0:	b084      	sub	sp, #16
 800b3f2:	af00      	add	r7, sp, #0
 800b3f4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b3f6:	f001 fd65 	bl	800cec4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d102      	bne.n	800b408 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b402:	2301      	movs	r3, #1
 800b404:	60fb      	str	r3, [r7, #12]
 800b406:	e001      	b.n	800b40c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b408:	2300      	movs	r3, #0
 800b40a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b40c:	f001 fd8a 	bl	800cf24 <vPortExitCritical>

	return xReturn;
 800b410:	68fb      	ldr	r3, [r7, #12]
}
 800b412:	4618      	mov	r0, r3
 800b414:	3710      	adds	r7, #16
 800b416:	46bd      	mov	sp, r7
 800b418:	bd80      	pop	{r7, pc}

0800b41a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b41a:	b580      	push	{r7, lr}
 800b41c:	b084      	sub	sp, #16
 800b41e:	af00      	add	r7, sp, #0
 800b420:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b422:	f001 fd4f 	bl	800cec4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b42e:	429a      	cmp	r2, r3
 800b430:	d102      	bne.n	800b438 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b432:	2301      	movs	r3, #1
 800b434:	60fb      	str	r3, [r7, #12]
 800b436:	e001      	b.n	800b43c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b438:	2300      	movs	r3, #0
 800b43a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b43c:	f001 fd72 	bl	800cf24 <vPortExitCritical>

	return xReturn;
 800b440:	68fb      	ldr	r3, [r7, #12]
}
 800b442:	4618      	mov	r0, r3
 800b444:	3710      	adds	r7, #16
 800b446:	46bd      	mov	sp, r7
 800b448:	bd80      	pop	{r7, pc}
	...

0800b44c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b44c:	b480      	push	{r7}
 800b44e:	b085      	sub	sp, #20
 800b450:	af00      	add	r7, sp, #0
 800b452:	6078      	str	r0, [r7, #4]
 800b454:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b456:	2300      	movs	r3, #0
 800b458:	60fb      	str	r3, [r7, #12]
 800b45a:	e014      	b.n	800b486 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b45c:	4a0f      	ldr	r2, [pc, #60]	; (800b49c <vQueueAddToRegistry+0x50>)
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b464:	2b00      	cmp	r3, #0
 800b466:	d10b      	bne.n	800b480 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b468:	490c      	ldr	r1, [pc, #48]	; (800b49c <vQueueAddToRegistry+0x50>)
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	683a      	ldr	r2, [r7, #0]
 800b46e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b472:	4a0a      	ldr	r2, [pc, #40]	; (800b49c <vQueueAddToRegistry+0x50>)
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	00db      	lsls	r3, r3, #3
 800b478:	4413      	add	r3, r2
 800b47a:	687a      	ldr	r2, [r7, #4]
 800b47c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b47e:	e006      	b.n	800b48e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	3301      	adds	r3, #1
 800b484:	60fb      	str	r3, [r7, #12]
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	2b07      	cmp	r3, #7
 800b48a:	d9e7      	bls.n	800b45c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b48c:	bf00      	nop
 800b48e:	bf00      	nop
 800b490:	3714      	adds	r7, #20
 800b492:	46bd      	mov	sp, r7
 800b494:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b498:	4770      	bx	lr
 800b49a:	bf00      	nop
 800b49c:	20000b64 	.word	0x20000b64

0800b4a0 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800b4a0:	b480      	push	{r7}
 800b4a2:	b085      	sub	sp, #20
 800b4a4:	af00      	add	r7, sp, #0
 800b4a6:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b4a8:	2300      	movs	r3, #0
 800b4aa:	60fb      	str	r3, [r7, #12]
 800b4ac:	e016      	b.n	800b4dc <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800b4ae:	4a10      	ldr	r2, [pc, #64]	; (800b4f0 <vQueueUnregisterQueue+0x50>)
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	00db      	lsls	r3, r3, #3
 800b4b4:	4413      	add	r3, r2
 800b4b6:	685b      	ldr	r3, [r3, #4]
 800b4b8:	687a      	ldr	r2, [r7, #4]
 800b4ba:	429a      	cmp	r2, r3
 800b4bc:	d10b      	bne.n	800b4d6 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800b4be:	4a0c      	ldr	r2, [pc, #48]	; (800b4f0 <vQueueUnregisterQueue+0x50>)
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	2100      	movs	r1, #0
 800b4c4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800b4c8:	4a09      	ldr	r2, [pc, #36]	; (800b4f0 <vQueueUnregisterQueue+0x50>)
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	00db      	lsls	r3, r3, #3
 800b4ce:	4413      	add	r3, r2
 800b4d0:	2200      	movs	r2, #0
 800b4d2:	605a      	str	r2, [r3, #4]
				break;
 800b4d4:	e006      	b.n	800b4e4 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	3301      	adds	r3, #1
 800b4da:	60fb      	str	r3, [r7, #12]
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	2b07      	cmp	r3, #7
 800b4e0:	d9e5      	bls.n	800b4ae <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800b4e2:	bf00      	nop
 800b4e4:	bf00      	nop
 800b4e6:	3714      	adds	r7, #20
 800b4e8:	46bd      	mov	sp, r7
 800b4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ee:	4770      	bx	lr
 800b4f0:	20000b64 	.word	0x20000b64

0800b4f4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b4f4:	b580      	push	{r7, lr}
 800b4f6:	b086      	sub	sp, #24
 800b4f8:	af00      	add	r7, sp, #0
 800b4fa:	60f8      	str	r0, [r7, #12]
 800b4fc:	60b9      	str	r1, [r7, #8]
 800b4fe:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b504:	f001 fcde 	bl	800cec4 <vPortEnterCritical>
 800b508:	697b      	ldr	r3, [r7, #20]
 800b50a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b50e:	b25b      	sxtb	r3, r3
 800b510:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b514:	d103      	bne.n	800b51e <vQueueWaitForMessageRestricted+0x2a>
 800b516:	697b      	ldr	r3, [r7, #20]
 800b518:	2200      	movs	r2, #0
 800b51a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b51e:	697b      	ldr	r3, [r7, #20]
 800b520:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b524:	b25b      	sxtb	r3, r3
 800b526:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b52a:	d103      	bne.n	800b534 <vQueueWaitForMessageRestricted+0x40>
 800b52c:	697b      	ldr	r3, [r7, #20]
 800b52e:	2200      	movs	r2, #0
 800b530:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b534:	f001 fcf6 	bl	800cf24 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b538:	697b      	ldr	r3, [r7, #20]
 800b53a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d106      	bne.n	800b54e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b540:	697b      	ldr	r3, [r7, #20]
 800b542:	3324      	adds	r3, #36	; 0x24
 800b544:	687a      	ldr	r2, [r7, #4]
 800b546:	68b9      	ldr	r1, [r7, #8]
 800b548:	4618      	mov	r0, r3
 800b54a:	f000 fc73 	bl	800be34 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b54e:	6978      	ldr	r0, [r7, #20]
 800b550:	f7ff fefb 	bl	800b34a <prvUnlockQueue>
	}
 800b554:	bf00      	nop
 800b556:	3718      	adds	r7, #24
 800b558:	46bd      	mov	sp, r7
 800b55a:	bd80      	pop	{r7, pc}

0800b55c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b55c:	b580      	push	{r7, lr}
 800b55e:	b08e      	sub	sp, #56	; 0x38
 800b560:	af04      	add	r7, sp, #16
 800b562:	60f8      	str	r0, [r7, #12]
 800b564:	60b9      	str	r1, [r7, #8]
 800b566:	607a      	str	r2, [r7, #4]
 800b568:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b56a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d10a      	bne.n	800b586 <xTaskCreateStatic+0x2a>
	__asm volatile
 800b570:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b574:	f383 8811 	msr	BASEPRI, r3
 800b578:	f3bf 8f6f 	isb	sy
 800b57c:	f3bf 8f4f 	dsb	sy
 800b580:	623b      	str	r3, [r7, #32]
}
 800b582:	bf00      	nop
 800b584:	e7fe      	b.n	800b584 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b586:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d10a      	bne.n	800b5a2 <xTaskCreateStatic+0x46>
	__asm volatile
 800b58c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b590:	f383 8811 	msr	BASEPRI, r3
 800b594:	f3bf 8f6f 	isb	sy
 800b598:	f3bf 8f4f 	dsb	sy
 800b59c:	61fb      	str	r3, [r7, #28]
}
 800b59e:	bf00      	nop
 800b5a0:	e7fe      	b.n	800b5a0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b5a2:	23bc      	movs	r3, #188	; 0xbc
 800b5a4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b5a6:	693b      	ldr	r3, [r7, #16]
 800b5a8:	2bbc      	cmp	r3, #188	; 0xbc
 800b5aa:	d00a      	beq.n	800b5c2 <xTaskCreateStatic+0x66>
	__asm volatile
 800b5ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5b0:	f383 8811 	msr	BASEPRI, r3
 800b5b4:	f3bf 8f6f 	isb	sy
 800b5b8:	f3bf 8f4f 	dsb	sy
 800b5bc:	61bb      	str	r3, [r7, #24]
}
 800b5be:	bf00      	nop
 800b5c0:	e7fe      	b.n	800b5c0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b5c2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b5c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d01e      	beq.n	800b608 <xTaskCreateStatic+0xac>
 800b5ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d01b      	beq.n	800b608 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b5d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5d2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b5d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b5d8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b5da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5dc:	2202      	movs	r2, #2
 800b5de:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b5e2:	2300      	movs	r3, #0
 800b5e4:	9303      	str	r3, [sp, #12]
 800b5e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5e8:	9302      	str	r3, [sp, #8]
 800b5ea:	f107 0314 	add.w	r3, r7, #20
 800b5ee:	9301      	str	r3, [sp, #4]
 800b5f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5f2:	9300      	str	r3, [sp, #0]
 800b5f4:	683b      	ldr	r3, [r7, #0]
 800b5f6:	687a      	ldr	r2, [r7, #4]
 800b5f8:	68b9      	ldr	r1, [r7, #8]
 800b5fa:	68f8      	ldr	r0, [r7, #12]
 800b5fc:	f000 f850 	bl	800b6a0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b600:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b602:	f000 f8f3 	bl	800b7ec <prvAddNewTaskToReadyList>
 800b606:	e001      	b.n	800b60c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800b608:	2300      	movs	r3, #0
 800b60a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b60c:	697b      	ldr	r3, [r7, #20]
	}
 800b60e:	4618      	mov	r0, r3
 800b610:	3728      	adds	r7, #40	; 0x28
 800b612:	46bd      	mov	sp, r7
 800b614:	bd80      	pop	{r7, pc}

0800b616 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b616:	b580      	push	{r7, lr}
 800b618:	b08c      	sub	sp, #48	; 0x30
 800b61a:	af04      	add	r7, sp, #16
 800b61c:	60f8      	str	r0, [r7, #12]
 800b61e:	60b9      	str	r1, [r7, #8]
 800b620:	603b      	str	r3, [r7, #0]
 800b622:	4613      	mov	r3, r2
 800b624:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b626:	88fb      	ldrh	r3, [r7, #6]
 800b628:	009b      	lsls	r3, r3, #2
 800b62a:	4618      	mov	r0, r3
 800b62c:	f001 fd6c 	bl	800d108 <pvPortMalloc>
 800b630:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b632:	697b      	ldr	r3, [r7, #20]
 800b634:	2b00      	cmp	r3, #0
 800b636:	d00e      	beq.n	800b656 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b638:	20bc      	movs	r0, #188	; 0xbc
 800b63a:	f001 fd65 	bl	800d108 <pvPortMalloc>
 800b63e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b640:	69fb      	ldr	r3, [r7, #28]
 800b642:	2b00      	cmp	r3, #0
 800b644:	d003      	beq.n	800b64e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b646:	69fb      	ldr	r3, [r7, #28]
 800b648:	697a      	ldr	r2, [r7, #20]
 800b64a:	631a      	str	r2, [r3, #48]	; 0x30
 800b64c:	e005      	b.n	800b65a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b64e:	6978      	ldr	r0, [r7, #20]
 800b650:	f001 fe26 	bl	800d2a0 <vPortFree>
 800b654:	e001      	b.n	800b65a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b656:	2300      	movs	r3, #0
 800b658:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b65a:	69fb      	ldr	r3, [r7, #28]
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d017      	beq.n	800b690 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b660:	69fb      	ldr	r3, [r7, #28]
 800b662:	2200      	movs	r2, #0
 800b664:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b668:	88fa      	ldrh	r2, [r7, #6]
 800b66a:	2300      	movs	r3, #0
 800b66c:	9303      	str	r3, [sp, #12]
 800b66e:	69fb      	ldr	r3, [r7, #28]
 800b670:	9302      	str	r3, [sp, #8]
 800b672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b674:	9301      	str	r3, [sp, #4]
 800b676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b678:	9300      	str	r3, [sp, #0]
 800b67a:	683b      	ldr	r3, [r7, #0]
 800b67c:	68b9      	ldr	r1, [r7, #8]
 800b67e:	68f8      	ldr	r0, [r7, #12]
 800b680:	f000 f80e 	bl	800b6a0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b684:	69f8      	ldr	r0, [r7, #28]
 800b686:	f000 f8b1 	bl	800b7ec <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b68a:	2301      	movs	r3, #1
 800b68c:	61bb      	str	r3, [r7, #24]
 800b68e:	e002      	b.n	800b696 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b690:	f04f 33ff 	mov.w	r3, #4294967295
 800b694:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b696:	69bb      	ldr	r3, [r7, #24]
	}
 800b698:	4618      	mov	r0, r3
 800b69a:	3720      	adds	r7, #32
 800b69c:	46bd      	mov	sp, r7
 800b69e:	bd80      	pop	{r7, pc}

0800b6a0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b6a0:	b580      	push	{r7, lr}
 800b6a2:	b088      	sub	sp, #32
 800b6a4:	af00      	add	r7, sp, #0
 800b6a6:	60f8      	str	r0, [r7, #12]
 800b6a8:	60b9      	str	r1, [r7, #8]
 800b6aa:	607a      	str	r2, [r7, #4]
 800b6ac:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b6ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6b0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	009b      	lsls	r3, r3, #2
 800b6b6:	461a      	mov	r2, r3
 800b6b8:	21a5      	movs	r1, #165	; 0xa5
 800b6ba:	f001 ff43 	bl	800d544 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b6be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b6c8:	3b01      	subs	r3, #1
 800b6ca:	009b      	lsls	r3, r3, #2
 800b6cc:	4413      	add	r3, r2
 800b6ce:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b6d0:	69bb      	ldr	r3, [r7, #24]
 800b6d2:	f023 0307 	bic.w	r3, r3, #7
 800b6d6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b6d8:	69bb      	ldr	r3, [r7, #24]
 800b6da:	f003 0307 	and.w	r3, r3, #7
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d00a      	beq.n	800b6f8 <prvInitialiseNewTask+0x58>
	__asm volatile
 800b6e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6e6:	f383 8811 	msr	BASEPRI, r3
 800b6ea:	f3bf 8f6f 	isb	sy
 800b6ee:	f3bf 8f4f 	dsb	sy
 800b6f2:	617b      	str	r3, [r7, #20]
}
 800b6f4:	bf00      	nop
 800b6f6:	e7fe      	b.n	800b6f6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b6f8:	68bb      	ldr	r3, [r7, #8]
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d01f      	beq.n	800b73e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b6fe:	2300      	movs	r3, #0
 800b700:	61fb      	str	r3, [r7, #28]
 800b702:	e012      	b.n	800b72a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b704:	68ba      	ldr	r2, [r7, #8]
 800b706:	69fb      	ldr	r3, [r7, #28]
 800b708:	4413      	add	r3, r2
 800b70a:	7819      	ldrb	r1, [r3, #0]
 800b70c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b70e:	69fb      	ldr	r3, [r7, #28]
 800b710:	4413      	add	r3, r2
 800b712:	3334      	adds	r3, #52	; 0x34
 800b714:	460a      	mov	r2, r1
 800b716:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b718:	68ba      	ldr	r2, [r7, #8]
 800b71a:	69fb      	ldr	r3, [r7, #28]
 800b71c:	4413      	add	r3, r2
 800b71e:	781b      	ldrb	r3, [r3, #0]
 800b720:	2b00      	cmp	r3, #0
 800b722:	d006      	beq.n	800b732 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b724:	69fb      	ldr	r3, [r7, #28]
 800b726:	3301      	adds	r3, #1
 800b728:	61fb      	str	r3, [r7, #28]
 800b72a:	69fb      	ldr	r3, [r7, #28]
 800b72c:	2b0f      	cmp	r3, #15
 800b72e:	d9e9      	bls.n	800b704 <prvInitialiseNewTask+0x64>
 800b730:	e000      	b.n	800b734 <prvInitialiseNewTask+0x94>
			{
				break;
 800b732:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b736:	2200      	movs	r2, #0
 800b738:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b73c:	e003      	b.n	800b746 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b73e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b740:	2200      	movs	r2, #0
 800b742:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b748:	2b37      	cmp	r3, #55	; 0x37
 800b74a:	d901      	bls.n	800b750 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b74c:	2337      	movs	r3, #55	; 0x37
 800b74e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b752:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b754:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b758:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b75a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800b75c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b75e:	2200      	movs	r2, #0
 800b760:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b764:	3304      	adds	r3, #4
 800b766:	4618      	mov	r0, r3
 800b768:	f7fe fe0a 	bl	800a380 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b76c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b76e:	3318      	adds	r3, #24
 800b770:	4618      	mov	r0, r3
 800b772:	f7fe fe05 	bl	800a380 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b778:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b77a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b77c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b77e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b784:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b788:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b78a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b78c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b78e:	2200      	movs	r2, #0
 800b790:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b796:	2200      	movs	r2, #0
 800b798:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800b79c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b79e:	3354      	adds	r3, #84	; 0x54
 800b7a0:	2260      	movs	r2, #96	; 0x60
 800b7a2:	2100      	movs	r1, #0
 800b7a4:	4618      	mov	r0, r3
 800b7a6:	f001 fecd 	bl	800d544 <memset>
 800b7aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7ac:	4a0c      	ldr	r2, [pc, #48]	; (800b7e0 <prvInitialiseNewTask+0x140>)
 800b7ae:	659a      	str	r2, [r3, #88]	; 0x58
 800b7b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7b2:	4a0c      	ldr	r2, [pc, #48]	; (800b7e4 <prvInitialiseNewTask+0x144>)
 800b7b4:	65da      	str	r2, [r3, #92]	; 0x5c
 800b7b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7b8:	4a0b      	ldr	r2, [pc, #44]	; (800b7e8 <prvInitialiseNewTask+0x148>)
 800b7ba:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b7bc:	683a      	ldr	r2, [r7, #0]
 800b7be:	68f9      	ldr	r1, [r7, #12]
 800b7c0:	69b8      	ldr	r0, [r7, #24]
 800b7c2:	f001 fa51 	bl	800cc68 <pxPortInitialiseStack>
 800b7c6:	4602      	mov	r2, r0
 800b7c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7ca:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b7cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d002      	beq.n	800b7d8 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b7d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b7d6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b7d8:	bf00      	nop
 800b7da:	3720      	adds	r7, #32
 800b7dc:	46bd      	mov	sp, r7
 800b7de:	bd80      	pop	{r7, pc}
 800b7e0:	0800d83c 	.word	0x0800d83c
 800b7e4:	0800d85c 	.word	0x0800d85c
 800b7e8:	0800d81c 	.word	0x0800d81c

0800b7ec <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b7ec:	b580      	push	{r7, lr}
 800b7ee:	b082      	sub	sp, #8
 800b7f0:	af00      	add	r7, sp, #0
 800b7f2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b7f4:	f001 fb66 	bl	800cec4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b7f8:	4b2d      	ldr	r3, [pc, #180]	; (800b8b0 <prvAddNewTaskToReadyList+0xc4>)
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	3301      	adds	r3, #1
 800b7fe:	4a2c      	ldr	r2, [pc, #176]	; (800b8b0 <prvAddNewTaskToReadyList+0xc4>)
 800b800:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b802:	4b2c      	ldr	r3, [pc, #176]	; (800b8b4 <prvAddNewTaskToReadyList+0xc8>)
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	2b00      	cmp	r3, #0
 800b808:	d109      	bne.n	800b81e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b80a:	4a2a      	ldr	r2, [pc, #168]	; (800b8b4 <prvAddNewTaskToReadyList+0xc8>)
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b810:	4b27      	ldr	r3, [pc, #156]	; (800b8b0 <prvAddNewTaskToReadyList+0xc4>)
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	2b01      	cmp	r3, #1
 800b816:	d110      	bne.n	800b83a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b818:	f000 fc38 	bl	800c08c <prvInitialiseTaskLists>
 800b81c:	e00d      	b.n	800b83a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b81e:	4b26      	ldr	r3, [pc, #152]	; (800b8b8 <prvAddNewTaskToReadyList+0xcc>)
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	2b00      	cmp	r3, #0
 800b824:	d109      	bne.n	800b83a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b826:	4b23      	ldr	r3, [pc, #140]	; (800b8b4 <prvAddNewTaskToReadyList+0xc8>)
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b830:	429a      	cmp	r2, r3
 800b832:	d802      	bhi.n	800b83a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b834:	4a1f      	ldr	r2, [pc, #124]	; (800b8b4 <prvAddNewTaskToReadyList+0xc8>)
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b83a:	4b20      	ldr	r3, [pc, #128]	; (800b8bc <prvAddNewTaskToReadyList+0xd0>)
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	3301      	adds	r3, #1
 800b840:	4a1e      	ldr	r2, [pc, #120]	; (800b8bc <prvAddNewTaskToReadyList+0xd0>)
 800b842:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b844:	4b1d      	ldr	r3, [pc, #116]	; (800b8bc <prvAddNewTaskToReadyList+0xd0>)
 800b846:	681a      	ldr	r2, [r3, #0]
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b850:	4b1b      	ldr	r3, [pc, #108]	; (800b8c0 <prvAddNewTaskToReadyList+0xd4>)
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	429a      	cmp	r2, r3
 800b856:	d903      	bls.n	800b860 <prvAddNewTaskToReadyList+0x74>
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b85c:	4a18      	ldr	r2, [pc, #96]	; (800b8c0 <prvAddNewTaskToReadyList+0xd4>)
 800b85e:	6013      	str	r3, [r2, #0]
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b864:	4613      	mov	r3, r2
 800b866:	009b      	lsls	r3, r3, #2
 800b868:	4413      	add	r3, r2
 800b86a:	009b      	lsls	r3, r3, #2
 800b86c:	4a15      	ldr	r2, [pc, #84]	; (800b8c4 <prvAddNewTaskToReadyList+0xd8>)
 800b86e:	441a      	add	r2, r3
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	3304      	adds	r3, #4
 800b874:	4619      	mov	r1, r3
 800b876:	4610      	mov	r0, r2
 800b878:	f7fe fd8f 	bl	800a39a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b87c:	f001 fb52 	bl	800cf24 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b880:	4b0d      	ldr	r3, [pc, #52]	; (800b8b8 <prvAddNewTaskToReadyList+0xcc>)
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	2b00      	cmp	r3, #0
 800b886:	d00e      	beq.n	800b8a6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b888:	4b0a      	ldr	r3, [pc, #40]	; (800b8b4 <prvAddNewTaskToReadyList+0xc8>)
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b892:	429a      	cmp	r2, r3
 800b894:	d207      	bcs.n	800b8a6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b896:	4b0c      	ldr	r3, [pc, #48]	; (800b8c8 <prvAddNewTaskToReadyList+0xdc>)
 800b898:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b89c:	601a      	str	r2, [r3, #0]
 800b89e:	f3bf 8f4f 	dsb	sy
 800b8a2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b8a6:	bf00      	nop
 800b8a8:	3708      	adds	r7, #8
 800b8aa:	46bd      	mov	sp, r7
 800b8ac:	bd80      	pop	{r7, pc}
 800b8ae:	bf00      	nop
 800b8b0:	20001078 	.word	0x20001078
 800b8b4:	20000ba4 	.word	0x20000ba4
 800b8b8:	20001084 	.word	0x20001084
 800b8bc:	20001094 	.word	0x20001094
 800b8c0:	20001080 	.word	0x20001080
 800b8c4:	20000ba8 	.word	0x20000ba8
 800b8c8:	e000ed04 	.word	0xe000ed04

0800b8cc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b8cc:	b580      	push	{r7, lr}
 800b8ce:	b084      	sub	sp, #16
 800b8d0:	af00      	add	r7, sp, #0
 800b8d2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b8d4:	2300      	movs	r3, #0
 800b8d6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d017      	beq.n	800b90e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b8de:	4b13      	ldr	r3, [pc, #76]	; (800b92c <vTaskDelay+0x60>)
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	d00a      	beq.n	800b8fc <vTaskDelay+0x30>
	__asm volatile
 800b8e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8ea:	f383 8811 	msr	BASEPRI, r3
 800b8ee:	f3bf 8f6f 	isb	sy
 800b8f2:	f3bf 8f4f 	dsb	sy
 800b8f6:	60bb      	str	r3, [r7, #8]
}
 800b8f8:	bf00      	nop
 800b8fa:	e7fe      	b.n	800b8fa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b8fc:	f000 f88a 	bl	800ba14 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b900:	2100      	movs	r1, #0
 800b902:	6878      	ldr	r0, [r7, #4]
 800b904:	f000 fe0e 	bl	800c524 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b908:	f000 f892 	bl	800ba30 <xTaskResumeAll>
 800b90c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	2b00      	cmp	r3, #0
 800b912:	d107      	bne.n	800b924 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800b914:	4b06      	ldr	r3, [pc, #24]	; (800b930 <vTaskDelay+0x64>)
 800b916:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b91a:	601a      	str	r2, [r3, #0]
 800b91c:	f3bf 8f4f 	dsb	sy
 800b920:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b924:	bf00      	nop
 800b926:	3710      	adds	r7, #16
 800b928:	46bd      	mov	sp, r7
 800b92a:	bd80      	pop	{r7, pc}
 800b92c:	200010a0 	.word	0x200010a0
 800b930:	e000ed04 	.word	0xe000ed04

0800b934 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b934:	b580      	push	{r7, lr}
 800b936:	b08a      	sub	sp, #40	; 0x28
 800b938:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b93a:	2300      	movs	r3, #0
 800b93c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b93e:	2300      	movs	r3, #0
 800b940:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b942:	463a      	mov	r2, r7
 800b944:	1d39      	adds	r1, r7, #4
 800b946:	f107 0308 	add.w	r3, r7, #8
 800b94a:	4618      	mov	r0, r3
 800b94c:	f7fe fcc4 	bl	800a2d8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b950:	6839      	ldr	r1, [r7, #0]
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	68ba      	ldr	r2, [r7, #8]
 800b956:	9202      	str	r2, [sp, #8]
 800b958:	9301      	str	r3, [sp, #4]
 800b95a:	2300      	movs	r3, #0
 800b95c:	9300      	str	r3, [sp, #0]
 800b95e:	2300      	movs	r3, #0
 800b960:	460a      	mov	r2, r1
 800b962:	4924      	ldr	r1, [pc, #144]	; (800b9f4 <vTaskStartScheduler+0xc0>)
 800b964:	4824      	ldr	r0, [pc, #144]	; (800b9f8 <vTaskStartScheduler+0xc4>)
 800b966:	f7ff fdf9 	bl	800b55c <xTaskCreateStatic>
 800b96a:	4603      	mov	r3, r0
 800b96c:	4a23      	ldr	r2, [pc, #140]	; (800b9fc <vTaskStartScheduler+0xc8>)
 800b96e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b970:	4b22      	ldr	r3, [pc, #136]	; (800b9fc <vTaskStartScheduler+0xc8>)
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	2b00      	cmp	r3, #0
 800b976:	d002      	beq.n	800b97e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b978:	2301      	movs	r3, #1
 800b97a:	617b      	str	r3, [r7, #20]
 800b97c:	e001      	b.n	800b982 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b97e:	2300      	movs	r3, #0
 800b980:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b982:	697b      	ldr	r3, [r7, #20]
 800b984:	2b01      	cmp	r3, #1
 800b986:	d102      	bne.n	800b98e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b988:	f000 fe20 	bl	800c5cc <xTimerCreateTimerTask>
 800b98c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b98e:	697b      	ldr	r3, [r7, #20]
 800b990:	2b01      	cmp	r3, #1
 800b992:	d11b      	bne.n	800b9cc <vTaskStartScheduler+0x98>
	__asm volatile
 800b994:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b998:	f383 8811 	msr	BASEPRI, r3
 800b99c:	f3bf 8f6f 	isb	sy
 800b9a0:	f3bf 8f4f 	dsb	sy
 800b9a4:	613b      	str	r3, [r7, #16]
}
 800b9a6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b9a8:	4b15      	ldr	r3, [pc, #84]	; (800ba00 <vTaskStartScheduler+0xcc>)
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	3354      	adds	r3, #84	; 0x54
 800b9ae:	4a15      	ldr	r2, [pc, #84]	; (800ba04 <vTaskStartScheduler+0xd0>)
 800b9b0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b9b2:	4b15      	ldr	r3, [pc, #84]	; (800ba08 <vTaskStartScheduler+0xd4>)
 800b9b4:	f04f 32ff 	mov.w	r2, #4294967295
 800b9b8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b9ba:	4b14      	ldr	r3, [pc, #80]	; (800ba0c <vTaskStartScheduler+0xd8>)
 800b9bc:	2201      	movs	r2, #1
 800b9be:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b9c0:	4b13      	ldr	r3, [pc, #76]	; (800ba10 <vTaskStartScheduler+0xdc>)
 800b9c2:	2200      	movs	r2, #0
 800b9c4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b9c6:	f001 f9db 	bl	800cd80 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b9ca:	e00e      	b.n	800b9ea <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b9cc:	697b      	ldr	r3, [r7, #20]
 800b9ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b9d2:	d10a      	bne.n	800b9ea <vTaskStartScheduler+0xb6>
	__asm volatile
 800b9d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9d8:	f383 8811 	msr	BASEPRI, r3
 800b9dc:	f3bf 8f6f 	isb	sy
 800b9e0:	f3bf 8f4f 	dsb	sy
 800b9e4:	60fb      	str	r3, [r7, #12]
}
 800b9e6:	bf00      	nop
 800b9e8:	e7fe      	b.n	800b9e8 <vTaskStartScheduler+0xb4>
}
 800b9ea:	bf00      	nop
 800b9ec:	3718      	adds	r7, #24
 800b9ee:	46bd      	mov	sp, r7
 800b9f0:	bd80      	pop	{r7, pc}
 800b9f2:	bf00      	nop
 800b9f4:	0800d728 	.word	0x0800d728
 800b9f8:	0800c05d 	.word	0x0800c05d
 800b9fc:	2000109c 	.word	0x2000109c
 800ba00:	20000ba4 	.word	0x20000ba4
 800ba04:	20000010 	.word	0x20000010
 800ba08:	20001098 	.word	0x20001098
 800ba0c:	20001084 	.word	0x20001084
 800ba10:	2000107c 	.word	0x2000107c

0800ba14 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800ba14:	b480      	push	{r7}
 800ba16:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800ba18:	4b04      	ldr	r3, [pc, #16]	; (800ba2c <vTaskSuspendAll+0x18>)
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	3301      	adds	r3, #1
 800ba1e:	4a03      	ldr	r2, [pc, #12]	; (800ba2c <vTaskSuspendAll+0x18>)
 800ba20:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800ba22:	bf00      	nop
 800ba24:	46bd      	mov	sp, r7
 800ba26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba2a:	4770      	bx	lr
 800ba2c:	200010a0 	.word	0x200010a0

0800ba30 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800ba30:	b580      	push	{r7, lr}
 800ba32:	b084      	sub	sp, #16
 800ba34:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800ba36:	2300      	movs	r3, #0
 800ba38:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ba3a:	2300      	movs	r3, #0
 800ba3c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800ba3e:	4b42      	ldr	r3, [pc, #264]	; (800bb48 <xTaskResumeAll+0x118>)
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d10a      	bne.n	800ba5c <xTaskResumeAll+0x2c>
	__asm volatile
 800ba46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba4a:	f383 8811 	msr	BASEPRI, r3
 800ba4e:	f3bf 8f6f 	isb	sy
 800ba52:	f3bf 8f4f 	dsb	sy
 800ba56:	603b      	str	r3, [r7, #0]
}
 800ba58:	bf00      	nop
 800ba5a:	e7fe      	b.n	800ba5a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ba5c:	f001 fa32 	bl	800cec4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ba60:	4b39      	ldr	r3, [pc, #228]	; (800bb48 <xTaskResumeAll+0x118>)
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	3b01      	subs	r3, #1
 800ba66:	4a38      	ldr	r2, [pc, #224]	; (800bb48 <xTaskResumeAll+0x118>)
 800ba68:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ba6a:	4b37      	ldr	r3, [pc, #220]	; (800bb48 <xTaskResumeAll+0x118>)
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d162      	bne.n	800bb38 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ba72:	4b36      	ldr	r3, [pc, #216]	; (800bb4c <xTaskResumeAll+0x11c>)
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d05e      	beq.n	800bb38 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ba7a:	e02f      	b.n	800badc <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ba7c:	4b34      	ldr	r3, [pc, #208]	; (800bb50 <xTaskResumeAll+0x120>)
 800ba7e:	68db      	ldr	r3, [r3, #12]
 800ba80:	68db      	ldr	r3, [r3, #12]
 800ba82:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	3318      	adds	r3, #24
 800ba88:	4618      	mov	r0, r3
 800ba8a:	f7fe fce3 	bl	800a454 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	3304      	adds	r3, #4
 800ba92:	4618      	mov	r0, r3
 800ba94:	f7fe fcde 	bl	800a454 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba9c:	4b2d      	ldr	r3, [pc, #180]	; (800bb54 <xTaskResumeAll+0x124>)
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	429a      	cmp	r2, r3
 800baa2:	d903      	bls.n	800baac <xTaskResumeAll+0x7c>
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800baa8:	4a2a      	ldr	r2, [pc, #168]	; (800bb54 <xTaskResumeAll+0x124>)
 800baaa:	6013      	str	r3, [r2, #0]
 800baac:	68fb      	ldr	r3, [r7, #12]
 800baae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bab0:	4613      	mov	r3, r2
 800bab2:	009b      	lsls	r3, r3, #2
 800bab4:	4413      	add	r3, r2
 800bab6:	009b      	lsls	r3, r3, #2
 800bab8:	4a27      	ldr	r2, [pc, #156]	; (800bb58 <xTaskResumeAll+0x128>)
 800baba:	441a      	add	r2, r3
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	3304      	adds	r3, #4
 800bac0:	4619      	mov	r1, r3
 800bac2:	4610      	mov	r0, r2
 800bac4:	f7fe fc69 	bl	800a39a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bacc:	4b23      	ldr	r3, [pc, #140]	; (800bb5c <xTaskResumeAll+0x12c>)
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bad2:	429a      	cmp	r2, r3
 800bad4:	d302      	bcc.n	800badc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800bad6:	4b22      	ldr	r3, [pc, #136]	; (800bb60 <xTaskResumeAll+0x130>)
 800bad8:	2201      	movs	r2, #1
 800bada:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800badc:	4b1c      	ldr	r3, [pc, #112]	; (800bb50 <xTaskResumeAll+0x120>)
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d1cb      	bne.n	800ba7c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d001      	beq.n	800baee <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800baea:	f000 fb71 	bl	800c1d0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800baee:	4b1d      	ldr	r3, [pc, #116]	; (800bb64 <xTaskResumeAll+0x134>)
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d010      	beq.n	800bb1c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800bafa:	f000 f859 	bl	800bbb0 <xTaskIncrementTick>
 800bafe:	4603      	mov	r3, r0
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d002      	beq.n	800bb0a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800bb04:	4b16      	ldr	r3, [pc, #88]	; (800bb60 <xTaskResumeAll+0x130>)
 800bb06:	2201      	movs	r2, #1
 800bb08:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	3b01      	subs	r3, #1
 800bb0e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d1f1      	bne.n	800bafa <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800bb16:	4b13      	ldr	r3, [pc, #76]	; (800bb64 <xTaskResumeAll+0x134>)
 800bb18:	2200      	movs	r2, #0
 800bb1a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800bb1c:	4b10      	ldr	r3, [pc, #64]	; (800bb60 <xTaskResumeAll+0x130>)
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d009      	beq.n	800bb38 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800bb24:	2301      	movs	r3, #1
 800bb26:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800bb28:	4b0f      	ldr	r3, [pc, #60]	; (800bb68 <xTaskResumeAll+0x138>)
 800bb2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bb2e:	601a      	str	r2, [r3, #0]
 800bb30:	f3bf 8f4f 	dsb	sy
 800bb34:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bb38:	f001 f9f4 	bl	800cf24 <vPortExitCritical>

	return xAlreadyYielded;
 800bb3c:	68bb      	ldr	r3, [r7, #8]
}
 800bb3e:	4618      	mov	r0, r3
 800bb40:	3710      	adds	r7, #16
 800bb42:	46bd      	mov	sp, r7
 800bb44:	bd80      	pop	{r7, pc}
 800bb46:	bf00      	nop
 800bb48:	200010a0 	.word	0x200010a0
 800bb4c:	20001078 	.word	0x20001078
 800bb50:	20001038 	.word	0x20001038
 800bb54:	20001080 	.word	0x20001080
 800bb58:	20000ba8 	.word	0x20000ba8
 800bb5c:	20000ba4 	.word	0x20000ba4
 800bb60:	2000108c 	.word	0x2000108c
 800bb64:	20001088 	.word	0x20001088
 800bb68:	e000ed04 	.word	0xe000ed04

0800bb6c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800bb6c:	b480      	push	{r7}
 800bb6e:	b083      	sub	sp, #12
 800bb70:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800bb72:	4b05      	ldr	r3, [pc, #20]	; (800bb88 <xTaskGetTickCount+0x1c>)
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800bb78:	687b      	ldr	r3, [r7, #4]
}
 800bb7a:	4618      	mov	r0, r3
 800bb7c:	370c      	adds	r7, #12
 800bb7e:	46bd      	mov	sp, r7
 800bb80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb84:	4770      	bx	lr
 800bb86:	bf00      	nop
 800bb88:	2000107c 	.word	0x2000107c

0800bb8c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800bb8c:	b580      	push	{r7, lr}
 800bb8e:	b082      	sub	sp, #8
 800bb90:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bb92:	f001 fa79 	bl	800d088 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800bb96:	2300      	movs	r3, #0
 800bb98:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800bb9a:	4b04      	ldr	r3, [pc, #16]	; (800bbac <xTaskGetTickCountFromISR+0x20>)
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800bba0:	683b      	ldr	r3, [r7, #0]
}
 800bba2:	4618      	mov	r0, r3
 800bba4:	3708      	adds	r7, #8
 800bba6:	46bd      	mov	sp, r7
 800bba8:	bd80      	pop	{r7, pc}
 800bbaa:	bf00      	nop
 800bbac:	2000107c 	.word	0x2000107c

0800bbb0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800bbb0:	b580      	push	{r7, lr}
 800bbb2:	b086      	sub	sp, #24
 800bbb4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800bbb6:	2300      	movs	r3, #0
 800bbb8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bbba:	4b4f      	ldr	r3, [pc, #316]	; (800bcf8 <xTaskIncrementTick+0x148>)
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	f040 808f 	bne.w	800bce2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800bbc4:	4b4d      	ldr	r3, [pc, #308]	; (800bcfc <xTaskIncrementTick+0x14c>)
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	3301      	adds	r3, #1
 800bbca:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800bbcc:	4a4b      	ldr	r2, [pc, #300]	; (800bcfc <xTaskIncrementTick+0x14c>)
 800bbce:	693b      	ldr	r3, [r7, #16]
 800bbd0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800bbd2:	693b      	ldr	r3, [r7, #16]
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d120      	bne.n	800bc1a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800bbd8:	4b49      	ldr	r3, [pc, #292]	; (800bd00 <xTaskIncrementTick+0x150>)
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d00a      	beq.n	800bbf8 <xTaskIncrementTick+0x48>
	__asm volatile
 800bbe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbe6:	f383 8811 	msr	BASEPRI, r3
 800bbea:	f3bf 8f6f 	isb	sy
 800bbee:	f3bf 8f4f 	dsb	sy
 800bbf2:	603b      	str	r3, [r7, #0]
}
 800bbf4:	bf00      	nop
 800bbf6:	e7fe      	b.n	800bbf6 <xTaskIncrementTick+0x46>
 800bbf8:	4b41      	ldr	r3, [pc, #260]	; (800bd00 <xTaskIncrementTick+0x150>)
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	60fb      	str	r3, [r7, #12]
 800bbfe:	4b41      	ldr	r3, [pc, #260]	; (800bd04 <xTaskIncrementTick+0x154>)
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	4a3f      	ldr	r2, [pc, #252]	; (800bd00 <xTaskIncrementTick+0x150>)
 800bc04:	6013      	str	r3, [r2, #0]
 800bc06:	4a3f      	ldr	r2, [pc, #252]	; (800bd04 <xTaskIncrementTick+0x154>)
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	6013      	str	r3, [r2, #0]
 800bc0c:	4b3e      	ldr	r3, [pc, #248]	; (800bd08 <xTaskIncrementTick+0x158>)
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	3301      	adds	r3, #1
 800bc12:	4a3d      	ldr	r2, [pc, #244]	; (800bd08 <xTaskIncrementTick+0x158>)
 800bc14:	6013      	str	r3, [r2, #0]
 800bc16:	f000 fadb 	bl	800c1d0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800bc1a:	4b3c      	ldr	r3, [pc, #240]	; (800bd0c <xTaskIncrementTick+0x15c>)
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	693a      	ldr	r2, [r7, #16]
 800bc20:	429a      	cmp	r2, r3
 800bc22:	d349      	bcc.n	800bcb8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bc24:	4b36      	ldr	r3, [pc, #216]	; (800bd00 <xTaskIncrementTick+0x150>)
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	681b      	ldr	r3, [r3, #0]
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d104      	bne.n	800bc38 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bc2e:	4b37      	ldr	r3, [pc, #220]	; (800bd0c <xTaskIncrementTick+0x15c>)
 800bc30:	f04f 32ff 	mov.w	r2, #4294967295
 800bc34:	601a      	str	r2, [r3, #0]
					break;
 800bc36:	e03f      	b.n	800bcb8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bc38:	4b31      	ldr	r3, [pc, #196]	; (800bd00 <xTaskIncrementTick+0x150>)
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	68db      	ldr	r3, [r3, #12]
 800bc3e:	68db      	ldr	r3, [r3, #12]
 800bc40:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800bc42:	68bb      	ldr	r3, [r7, #8]
 800bc44:	685b      	ldr	r3, [r3, #4]
 800bc46:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800bc48:	693a      	ldr	r2, [r7, #16]
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	429a      	cmp	r2, r3
 800bc4e:	d203      	bcs.n	800bc58 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800bc50:	4a2e      	ldr	r2, [pc, #184]	; (800bd0c <xTaskIncrementTick+0x15c>)
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800bc56:	e02f      	b.n	800bcb8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bc58:	68bb      	ldr	r3, [r7, #8]
 800bc5a:	3304      	adds	r3, #4
 800bc5c:	4618      	mov	r0, r3
 800bc5e:	f7fe fbf9 	bl	800a454 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800bc62:	68bb      	ldr	r3, [r7, #8]
 800bc64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d004      	beq.n	800bc74 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bc6a:	68bb      	ldr	r3, [r7, #8]
 800bc6c:	3318      	adds	r3, #24
 800bc6e:	4618      	mov	r0, r3
 800bc70:	f7fe fbf0 	bl	800a454 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800bc74:	68bb      	ldr	r3, [r7, #8]
 800bc76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc78:	4b25      	ldr	r3, [pc, #148]	; (800bd10 <xTaskIncrementTick+0x160>)
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	429a      	cmp	r2, r3
 800bc7e:	d903      	bls.n	800bc88 <xTaskIncrementTick+0xd8>
 800bc80:	68bb      	ldr	r3, [r7, #8]
 800bc82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc84:	4a22      	ldr	r2, [pc, #136]	; (800bd10 <xTaskIncrementTick+0x160>)
 800bc86:	6013      	str	r3, [r2, #0]
 800bc88:	68bb      	ldr	r3, [r7, #8]
 800bc8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc8c:	4613      	mov	r3, r2
 800bc8e:	009b      	lsls	r3, r3, #2
 800bc90:	4413      	add	r3, r2
 800bc92:	009b      	lsls	r3, r3, #2
 800bc94:	4a1f      	ldr	r2, [pc, #124]	; (800bd14 <xTaskIncrementTick+0x164>)
 800bc96:	441a      	add	r2, r3
 800bc98:	68bb      	ldr	r3, [r7, #8]
 800bc9a:	3304      	adds	r3, #4
 800bc9c:	4619      	mov	r1, r3
 800bc9e:	4610      	mov	r0, r2
 800bca0:	f7fe fb7b 	bl	800a39a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bca4:	68bb      	ldr	r3, [r7, #8]
 800bca6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bca8:	4b1b      	ldr	r3, [pc, #108]	; (800bd18 <xTaskIncrementTick+0x168>)
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcae:	429a      	cmp	r2, r3
 800bcb0:	d3b8      	bcc.n	800bc24 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800bcb2:	2301      	movs	r3, #1
 800bcb4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bcb6:	e7b5      	b.n	800bc24 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800bcb8:	4b17      	ldr	r3, [pc, #92]	; (800bd18 <xTaskIncrementTick+0x168>)
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bcbe:	4915      	ldr	r1, [pc, #84]	; (800bd14 <xTaskIncrementTick+0x164>)
 800bcc0:	4613      	mov	r3, r2
 800bcc2:	009b      	lsls	r3, r3, #2
 800bcc4:	4413      	add	r3, r2
 800bcc6:	009b      	lsls	r3, r3, #2
 800bcc8:	440b      	add	r3, r1
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	2b01      	cmp	r3, #1
 800bcce:	d901      	bls.n	800bcd4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800bcd0:	2301      	movs	r3, #1
 800bcd2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800bcd4:	4b11      	ldr	r3, [pc, #68]	; (800bd1c <xTaskIncrementTick+0x16c>)
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d007      	beq.n	800bcec <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800bcdc:	2301      	movs	r3, #1
 800bcde:	617b      	str	r3, [r7, #20]
 800bce0:	e004      	b.n	800bcec <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800bce2:	4b0f      	ldr	r3, [pc, #60]	; (800bd20 <xTaskIncrementTick+0x170>)
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	3301      	adds	r3, #1
 800bce8:	4a0d      	ldr	r2, [pc, #52]	; (800bd20 <xTaskIncrementTick+0x170>)
 800bcea:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800bcec:	697b      	ldr	r3, [r7, #20]
}
 800bcee:	4618      	mov	r0, r3
 800bcf0:	3718      	adds	r7, #24
 800bcf2:	46bd      	mov	sp, r7
 800bcf4:	bd80      	pop	{r7, pc}
 800bcf6:	bf00      	nop
 800bcf8:	200010a0 	.word	0x200010a0
 800bcfc:	2000107c 	.word	0x2000107c
 800bd00:	20001030 	.word	0x20001030
 800bd04:	20001034 	.word	0x20001034
 800bd08:	20001090 	.word	0x20001090
 800bd0c:	20001098 	.word	0x20001098
 800bd10:	20001080 	.word	0x20001080
 800bd14:	20000ba8 	.word	0x20000ba8
 800bd18:	20000ba4 	.word	0x20000ba4
 800bd1c:	2000108c 	.word	0x2000108c
 800bd20:	20001088 	.word	0x20001088

0800bd24 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800bd24:	b480      	push	{r7}
 800bd26:	b085      	sub	sp, #20
 800bd28:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800bd2a:	4b2a      	ldr	r3, [pc, #168]	; (800bdd4 <vTaskSwitchContext+0xb0>)
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d003      	beq.n	800bd3a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800bd32:	4b29      	ldr	r3, [pc, #164]	; (800bdd8 <vTaskSwitchContext+0xb4>)
 800bd34:	2201      	movs	r2, #1
 800bd36:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800bd38:	e046      	b.n	800bdc8 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800bd3a:	4b27      	ldr	r3, [pc, #156]	; (800bdd8 <vTaskSwitchContext+0xb4>)
 800bd3c:	2200      	movs	r2, #0
 800bd3e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bd40:	4b26      	ldr	r3, [pc, #152]	; (800bddc <vTaskSwitchContext+0xb8>)
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	60fb      	str	r3, [r7, #12]
 800bd46:	e010      	b.n	800bd6a <vTaskSwitchContext+0x46>
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d10a      	bne.n	800bd64 <vTaskSwitchContext+0x40>
	__asm volatile
 800bd4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd52:	f383 8811 	msr	BASEPRI, r3
 800bd56:	f3bf 8f6f 	isb	sy
 800bd5a:	f3bf 8f4f 	dsb	sy
 800bd5e:	607b      	str	r3, [r7, #4]
}
 800bd60:	bf00      	nop
 800bd62:	e7fe      	b.n	800bd62 <vTaskSwitchContext+0x3e>
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	3b01      	subs	r3, #1
 800bd68:	60fb      	str	r3, [r7, #12]
 800bd6a:	491d      	ldr	r1, [pc, #116]	; (800bde0 <vTaskSwitchContext+0xbc>)
 800bd6c:	68fa      	ldr	r2, [r7, #12]
 800bd6e:	4613      	mov	r3, r2
 800bd70:	009b      	lsls	r3, r3, #2
 800bd72:	4413      	add	r3, r2
 800bd74:	009b      	lsls	r3, r3, #2
 800bd76:	440b      	add	r3, r1
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d0e4      	beq.n	800bd48 <vTaskSwitchContext+0x24>
 800bd7e:	68fa      	ldr	r2, [r7, #12]
 800bd80:	4613      	mov	r3, r2
 800bd82:	009b      	lsls	r3, r3, #2
 800bd84:	4413      	add	r3, r2
 800bd86:	009b      	lsls	r3, r3, #2
 800bd88:	4a15      	ldr	r2, [pc, #84]	; (800bde0 <vTaskSwitchContext+0xbc>)
 800bd8a:	4413      	add	r3, r2
 800bd8c:	60bb      	str	r3, [r7, #8]
 800bd8e:	68bb      	ldr	r3, [r7, #8]
 800bd90:	685b      	ldr	r3, [r3, #4]
 800bd92:	685a      	ldr	r2, [r3, #4]
 800bd94:	68bb      	ldr	r3, [r7, #8]
 800bd96:	605a      	str	r2, [r3, #4]
 800bd98:	68bb      	ldr	r3, [r7, #8]
 800bd9a:	685a      	ldr	r2, [r3, #4]
 800bd9c:	68bb      	ldr	r3, [r7, #8]
 800bd9e:	3308      	adds	r3, #8
 800bda0:	429a      	cmp	r2, r3
 800bda2:	d104      	bne.n	800bdae <vTaskSwitchContext+0x8a>
 800bda4:	68bb      	ldr	r3, [r7, #8]
 800bda6:	685b      	ldr	r3, [r3, #4]
 800bda8:	685a      	ldr	r2, [r3, #4]
 800bdaa:	68bb      	ldr	r3, [r7, #8]
 800bdac:	605a      	str	r2, [r3, #4]
 800bdae:	68bb      	ldr	r3, [r7, #8]
 800bdb0:	685b      	ldr	r3, [r3, #4]
 800bdb2:	68db      	ldr	r3, [r3, #12]
 800bdb4:	4a0b      	ldr	r2, [pc, #44]	; (800bde4 <vTaskSwitchContext+0xc0>)
 800bdb6:	6013      	str	r3, [r2, #0]
 800bdb8:	4a08      	ldr	r2, [pc, #32]	; (800bddc <vTaskSwitchContext+0xb8>)
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800bdbe:	4b09      	ldr	r3, [pc, #36]	; (800bde4 <vTaskSwitchContext+0xc0>)
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	3354      	adds	r3, #84	; 0x54
 800bdc4:	4a08      	ldr	r2, [pc, #32]	; (800bde8 <vTaskSwitchContext+0xc4>)
 800bdc6:	6013      	str	r3, [r2, #0]
}
 800bdc8:	bf00      	nop
 800bdca:	3714      	adds	r7, #20
 800bdcc:	46bd      	mov	sp, r7
 800bdce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdd2:	4770      	bx	lr
 800bdd4:	200010a0 	.word	0x200010a0
 800bdd8:	2000108c 	.word	0x2000108c
 800bddc:	20001080 	.word	0x20001080
 800bde0:	20000ba8 	.word	0x20000ba8
 800bde4:	20000ba4 	.word	0x20000ba4
 800bde8:	20000010 	.word	0x20000010

0800bdec <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800bdec:	b580      	push	{r7, lr}
 800bdee:	b084      	sub	sp, #16
 800bdf0:	af00      	add	r7, sp, #0
 800bdf2:	6078      	str	r0, [r7, #4]
 800bdf4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	d10a      	bne.n	800be12 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800bdfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be00:	f383 8811 	msr	BASEPRI, r3
 800be04:	f3bf 8f6f 	isb	sy
 800be08:	f3bf 8f4f 	dsb	sy
 800be0c:	60fb      	str	r3, [r7, #12]
}
 800be0e:	bf00      	nop
 800be10:	e7fe      	b.n	800be10 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800be12:	4b07      	ldr	r3, [pc, #28]	; (800be30 <vTaskPlaceOnEventList+0x44>)
 800be14:	681b      	ldr	r3, [r3, #0]
 800be16:	3318      	adds	r3, #24
 800be18:	4619      	mov	r1, r3
 800be1a:	6878      	ldr	r0, [r7, #4]
 800be1c:	f7fe fae1 	bl	800a3e2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800be20:	2101      	movs	r1, #1
 800be22:	6838      	ldr	r0, [r7, #0]
 800be24:	f000 fb7e 	bl	800c524 <prvAddCurrentTaskToDelayedList>
}
 800be28:	bf00      	nop
 800be2a:	3710      	adds	r7, #16
 800be2c:	46bd      	mov	sp, r7
 800be2e:	bd80      	pop	{r7, pc}
 800be30:	20000ba4 	.word	0x20000ba4

0800be34 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800be34:	b580      	push	{r7, lr}
 800be36:	b086      	sub	sp, #24
 800be38:	af00      	add	r7, sp, #0
 800be3a:	60f8      	str	r0, [r7, #12]
 800be3c:	60b9      	str	r1, [r7, #8]
 800be3e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	2b00      	cmp	r3, #0
 800be44:	d10a      	bne.n	800be5c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800be46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be4a:	f383 8811 	msr	BASEPRI, r3
 800be4e:	f3bf 8f6f 	isb	sy
 800be52:	f3bf 8f4f 	dsb	sy
 800be56:	617b      	str	r3, [r7, #20]
}
 800be58:	bf00      	nop
 800be5a:	e7fe      	b.n	800be5a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800be5c:	4b0a      	ldr	r3, [pc, #40]	; (800be88 <vTaskPlaceOnEventListRestricted+0x54>)
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	3318      	adds	r3, #24
 800be62:	4619      	mov	r1, r3
 800be64:	68f8      	ldr	r0, [r7, #12]
 800be66:	f7fe fa98 	bl	800a39a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d002      	beq.n	800be76 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800be70:	f04f 33ff 	mov.w	r3, #4294967295
 800be74:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800be76:	6879      	ldr	r1, [r7, #4]
 800be78:	68b8      	ldr	r0, [r7, #8]
 800be7a:	f000 fb53 	bl	800c524 <prvAddCurrentTaskToDelayedList>
	}
 800be7e:	bf00      	nop
 800be80:	3718      	adds	r7, #24
 800be82:	46bd      	mov	sp, r7
 800be84:	bd80      	pop	{r7, pc}
 800be86:	bf00      	nop
 800be88:	20000ba4 	.word	0x20000ba4

0800be8c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800be8c:	b580      	push	{r7, lr}
 800be8e:	b086      	sub	sp, #24
 800be90:	af00      	add	r7, sp, #0
 800be92:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	68db      	ldr	r3, [r3, #12]
 800be98:	68db      	ldr	r3, [r3, #12]
 800be9a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800be9c:	693b      	ldr	r3, [r7, #16]
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	d10a      	bne.n	800beb8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800bea2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bea6:	f383 8811 	msr	BASEPRI, r3
 800beaa:	f3bf 8f6f 	isb	sy
 800beae:	f3bf 8f4f 	dsb	sy
 800beb2:	60fb      	str	r3, [r7, #12]
}
 800beb4:	bf00      	nop
 800beb6:	e7fe      	b.n	800beb6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800beb8:	693b      	ldr	r3, [r7, #16]
 800beba:	3318      	adds	r3, #24
 800bebc:	4618      	mov	r0, r3
 800bebe:	f7fe fac9 	bl	800a454 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bec2:	4b1e      	ldr	r3, [pc, #120]	; (800bf3c <xTaskRemoveFromEventList+0xb0>)
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d11d      	bne.n	800bf06 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800beca:	693b      	ldr	r3, [r7, #16]
 800becc:	3304      	adds	r3, #4
 800bece:	4618      	mov	r0, r3
 800bed0:	f7fe fac0 	bl	800a454 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800bed4:	693b      	ldr	r3, [r7, #16]
 800bed6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bed8:	4b19      	ldr	r3, [pc, #100]	; (800bf40 <xTaskRemoveFromEventList+0xb4>)
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	429a      	cmp	r2, r3
 800bede:	d903      	bls.n	800bee8 <xTaskRemoveFromEventList+0x5c>
 800bee0:	693b      	ldr	r3, [r7, #16]
 800bee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bee4:	4a16      	ldr	r2, [pc, #88]	; (800bf40 <xTaskRemoveFromEventList+0xb4>)
 800bee6:	6013      	str	r3, [r2, #0]
 800bee8:	693b      	ldr	r3, [r7, #16]
 800beea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800beec:	4613      	mov	r3, r2
 800beee:	009b      	lsls	r3, r3, #2
 800bef0:	4413      	add	r3, r2
 800bef2:	009b      	lsls	r3, r3, #2
 800bef4:	4a13      	ldr	r2, [pc, #76]	; (800bf44 <xTaskRemoveFromEventList+0xb8>)
 800bef6:	441a      	add	r2, r3
 800bef8:	693b      	ldr	r3, [r7, #16]
 800befa:	3304      	adds	r3, #4
 800befc:	4619      	mov	r1, r3
 800befe:	4610      	mov	r0, r2
 800bf00:	f7fe fa4b 	bl	800a39a <vListInsertEnd>
 800bf04:	e005      	b.n	800bf12 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800bf06:	693b      	ldr	r3, [r7, #16]
 800bf08:	3318      	adds	r3, #24
 800bf0a:	4619      	mov	r1, r3
 800bf0c:	480e      	ldr	r0, [pc, #56]	; (800bf48 <xTaskRemoveFromEventList+0xbc>)
 800bf0e:	f7fe fa44 	bl	800a39a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800bf12:	693b      	ldr	r3, [r7, #16]
 800bf14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf16:	4b0d      	ldr	r3, [pc, #52]	; (800bf4c <xTaskRemoveFromEventList+0xc0>)
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf1c:	429a      	cmp	r2, r3
 800bf1e:	d905      	bls.n	800bf2c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800bf20:	2301      	movs	r3, #1
 800bf22:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800bf24:	4b0a      	ldr	r3, [pc, #40]	; (800bf50 <xTaskRemoveFromEventList+0xc4>)
 800bf26:	2201      	movs	r2, #1
 800bf28:	601a      	str	r2, [r3, #0]
 800bf2a:	e001      	b.n	800bf30 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800bf2c:	2300      	movs	r3, #0
 800bf2e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800bf30:	697b      	ldr	r3, [r7, #20]
}
 800bf32:	4618      	mov	r0, r3
 800bf34:	3718      	adds	r7, #24
 800bf36:	46bd      	mov	sp, r7
 800bf38:	bd80      	pop	{r7, pc}
 800bf3a:	bf00      	nop
 800bf3c:	200010a0 	.word	0x200010a0
 800bf40:	20001080 	.word	0x20001080
 800bf44:	20000ba8 	.word	0x20000ba8
 800bf48:	20001038 	.word	0x20001038
 800bf4c:	20000ba4 	.word	0x20000ba4
 800bf50:	2000108c 	.word	0x2000108c

0800bf54 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800bf54:	b480      	push	{r7}
 800bf56:	b083      	sub	sp, #12
 800bf58:	af00      	add	r7, sp, #0
 800bf5a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800bf5c:	4b06      	ldr	r3, [pc, #24]	; (800bf78 <vTaskInternalSetTimeOutState+0x24>)
 800bf5e:	681a      	ldr	r2, [r3, #0]
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800bf64:	4b05      	ldr	r3, [pc, #20]	; (800bf7c <vTaskInternalSetTimeOutState+0x28>)
 800bf66:	681a      	ldr	r2, [r3, #0]
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	605a      	str	r2, [r3, #4]
}
 800bf6c:	bf00      	nop
 800bf6e:	370c      	adds	r7, #12
 800bf70:	46bd      	mov	sp, r7
 800bf72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf76:	4770      	bx	lr
 800bf78:	20001090 	.word	0x20001090
 800bf7c:	2000107c 	.word	0x2000107c

0800bf80 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800bf80:	b580      	push	{r7, lr}
 800bf82:	b088      	sub	sp, #32
 800bf84:	af00      	add	r7, sp, #0
 800bf86:	6078      	str	r0, [r7, #4]
 800bf88:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d10a      	bne.n	800bfa6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800bf90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf94:	f383 8811 	msr	BASEPRI, r3
 800bf98:	f3bf 8f6f 	isb	sy
 800bf9c:	f3bf 8f4f 	dsb	sy
 800bfa0:	613b      	str	r3, [r7, #16]
}
 800bfa2:	bf00      	nop
 800bfa4:	e7fe      	b.n	800bfa4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800bfa6:	683b      	ldr	r3, [r7, #0]
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d10a      	bne.n	800bfc2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800bfac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfb0:	f383 8811 	msr	BASEPRI, r3
 800bfb4:	f3bf 8f6f 	isb	sy
 800bfb8:	f3bf 8f4f 	dsb	sy
 800bfbc:	60fb      	str	r3, [r7, #12]
}
 800bfbe:	bf00      	nop
 800bfc0:	e7fe      	b.n	800bfc0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800bfc2:	f000 ff7f 	bl	800cec4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800bfc6:	4b1d      	ldr	r3, [pc, #116]	; (800c03c <xTaskCheckForTimeOut+0xbc>)
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	685b      	ldr	r3, [r3, #4]
 800bfd0:	69ba      	ldr	r2, [r7, #24]
 800bfd2:	1ad3      	subs	r3, r2, r3
 800bfd4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800bfd6:	683b      	ldr	r3, [r7, #0]
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bfde:	d102      	bne.n	800bfe6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800bfe0:	2300      	movs	r3, #0
 800bfe2:	61fb      	str	r3, [r7, #28]
 800bfe4:	e023      	b.n	800c02e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	681a      	ldr	r2, [r3, #0]
 800bfea:	4b15      	ldr	r3, [pc, #84]	; (800c040 <xTaskCheckForTimeOut+0xc0>)
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	429a      	cmp	r2, r3
 800bff0:	d007      	beq.n	800c002 <xTaskCheckForTimeOut+0x82>
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	685b      	ldr	r3, [r3, #4]
 800bff6:	69ba      	ldr	r2, [r7, #24]
 800bff8:	429a      	cmp	r2, r3
 800bffa:	d302      	bcc.n	800c002 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800bffc:	2301      	movs	r3, #1
 800bffe:	61fb      	str	r3, [r7, #28]
 800c000:	e015      	b.n	800c02e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c002:	683b      	ldr	r3, [r7, #0]
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	697a      	ldr	r2, [r7, #20]
 800c008:	429a      	cmp	r2, r3
 800c00a:	d20b      	bcs.n	800c024 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c00c:	683b      	ldr	r3, [r7, #0]
 800c00e:	681a      	ldr	r2, [r3, #0]
 800c010:	697b      	ldr	r3, [r7, #20]
 800c012:	1ad2      	subs	r2, r2, r3
 800c014:	683b      	ldr	r3, [r7, #0]
 800c016:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c018:	6878      	ldr	r0, [r7, #4]
 800c01a:	f7ff ff9b 	bl	800bf54 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c01e:	2300      	movs	r3, #0
 800c020:	61fb      	str	r3, [r7, #28]
 800c022:	e004      	b.n	800c02e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800c024:	683b      	ldr	r3, [r7, #0]
 800c026:	2200      	movs	r2, #0
 800c028:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c02a:	2301      	movs	r3, #1
 800c02c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c02e:	f000 ff79 	bl	800cf24 <vPortExitCritical>

	return xReturn;
 800c032:	69fb      	ldr	r3, [r7, #28]
}
 800c034:	4618      	mov	r0, r3
 800c036:	3720      	adds	r7, #32
 800c038:	46bd      	mov	sp, r7
 800c03a:	bd80      	pop	{r7, pc}
 800c03c:	2000107c 	.word	0x2000107c
 800c040:	20001090 	.word	0x20001090

0800c044 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c044:	b480      	push	{r7}
 800c046:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c048:	4b03      	ldr	r3, [pc, #12]	; (800c058 <vTaskMissedYield+0x14>)
 800c04a:	2201      	movs	r2, #1
 800c04c:	601a      	str	r2, [r3, #0]
}
 800c04e:	bf00      	nop
 800c050:	46bd      	mov	sp, r7
 800c052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c056:	4770      	bx	lr
 800c058:	2000108c 	.word	0x2000108c

0800c05c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c05c:	b580      	push	{r7, lr}
 800c05e:	b082      	sub	sp, #8
 800c060:	af00      	add	r7, sp, #0
 800c062:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c064:	f000 f852 	bl	800c10c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c068:	4b06      	ldr	r3, [pc, #24]	; (800c084 <prvIdleTask+0x28>)
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	2b01      	cmp	r3, #1
 800c06e:	d9f9      	bls.n	800c064 <prvIdleTask+0x8>
			{
				taskYIELD();
 800c070:	4b05      	ldr	r3, [pc, #20]	; (800c088 <prvIdleTask+0x2c>)
 800c072:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c076:	601a      	str	r2, [r3, #0]
 800c078:	f3bf 8f4f 	dsb	sy
 800c07c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c080:	e7f0      	b.n	800c064 <prvIdleTask+0x8>
 800c082:	bf00      	nop
 800c084:	20000ba8 	.word	0x20000ba8
 800c088:	e000ed04 	.word	0xe000ed04

0800c08c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c08c:	b580      	push	{r7, lr}
 800c08e:	b082      	sub	sp, #8
 800c090:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c092:	2300      	movs	r3, #0
 800c094:	607b      	str	r3, [r7, #4]
 800c096:	e00c      	b.n	800c0b2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c098:	687a      	ldr	r2, [r7, #4]
 800c09a:	4613      	mov	r3, r2
 800c09c:	009b      	lsls	r3, r3, #2
 800c09e:	4413      	add	r3, r2
 800c0a0:	009b      	lsls	r3, r3, #2
 800c0a2:	4a12      	ldr	r2, [pc, #72]	; (800c0ec <prvInitialiseTaskLists+0x60>)
 800c0a4:	4413      	add	r3, r2
 800c0a6:	4618      	mov	r0, r3
 800c0a8:	f7fe f94a 	bl	800a340 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	3301      	adds	r3, #1
 800c0b0:	607b      	str	r3, [r7, #4]
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	2b37      	cmp	r3, #55	; 0x37
 800c0b6:	d9ef      	bls.n	800c098 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c0b8:	480d      	ldr	r0, [pc, #52]	; (800c0f0 <prvInitialiseTaskLists+0x64>)
 800c0ba:	f7fe f941 	bl	800a340 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c0be:	480d      	ldr	r0, [pc, #52]	; (800c0f4 <prvInitialiseTaskLists+0x68>)
 800c0c0:	f7fe f93e 	bl	800a340 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c0c4:	480c      	ldr	r0, [pc, #48]	; (800c0f8 <prvInitialiseTaskLists+0x6c>)
 800c0c6:	f7fe f93b 	bl	800a340 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c0ca:	480c      	ldr	r0, [pc, #48]	; (800c0fc <prvInitialiseTaskLists+0x70>)
 800c0cc:	f7fe f938 	bl	800a340 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c0d0:	480b      	ldr	r0, [pc, #44]	; (800c100 <prvInitialiseTaskLists+0x74>)
 800c0d2:	f7fe f935 	bl	800a340 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c0d6:	4b0b      	ldr	r3, [pc, #44]	; (800c104 <prvInitialiseTaskLists+0x78>)
 800c0d8:	4a05      	ldr	r2, [pc, #20]	; (800c0f0 <prvInitialiseTaskLists+0x64>)
 800c0da:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c0dc:	4b0a      	ldr	r3, [pc, #40]	; (800c108 <prvInitialiseTaskLists+0x7c>)
 800c0de:	4a05      	ldr	r2, [pc, #20]	; (800c0f4 <prvInitialiseTaskLists+0x68>)
 800c0e0:	601a      	str	r2, [r3, #0]
}
 800c0e2:	bf00      	nop
 800c0e4:	3708      	adds	r7, #8
 800c0e6:	46bd      	mov	sp, r7
 800c0e8:	bd80      	pop	{r7, pc}
 800c0ea:	bf00      	nop
 800c0ec:	20000ba8 	.word	0x20000ba8
 800c0f0:	20001008 	.word	0x20001008
 800c0f4:	2000101c 	.word	0x2000101c
 800c0f8:	20001038 	.word	0x20001038
 800c0fc:	2000104c 	.word	0x2000104c
 800c100:	20001064 	.word	0x20001064
 800c104:	20001030 	.word	0x20001030
 800c108:	20001034 	.word	0x20001034

0800c10c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c10c:	b580      	push	{r7, lr}
 800c10e:	b082      	sub	sp, #8
 800c110:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c112:	e019      	b.n	800c148 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c114:	f000 fed6 	bl	800cec4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c118:	4b10      	ldr	r3, [pc, #64]	; (800c15c <prvCheckTasksWaitingTermination+0x50>)
 800c11a:	68db      	ldr	r3, [r3, #12]
 800c11c:	68db      	ldr	r3, [r3, #12]
 800c11e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	3304      	adds	r3, #4
 800c124:	4618      	mov	r0, r3
 800c126:	f7fe f995 	bl	800a454 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c12a:	4b0d      	ldr	r3, [pc, #52]	; (800c160 <prvCheckTasksWaitingTermination+0x54>)
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	3b01      	subs	r3, #1
 800c130:	4a0b      	ldr	r2, [pc, #44]	; (800c160 <prvCheckTasksWaitingTermination+0x54>)
 800c132:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c134:	4b0b      	ldr	r3, [pc, #44]	; (800c164 <prvCheckTasksWaitingTermination+0x58>)
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	3b01      	subs	r3, #1
 800c13a:	4a0a      	ldr	r2, [pc, #40]	; (800c164 <prvCheckTasksWaitingTermination+0x58>)
 800c13c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c13e:	f000 fef1 	bl	800cf24 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c142:	6878      	ldr	r0, [r7, #4]
 800c144:	f000 f810 	bl	800c168 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c148:	4b06      	ldr	r3, [pc, #24]	; (800c164 <prvCheckTasksWaitingTermination+0x58>)
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d1e1      	bne.n	800c114 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c150:	bf00      	nop
 800c152:	bf00      	nop
 800c154:	3708      	adds	r7, #8
 800c156:	46bd      	mov	sp, r7
 800c158:	bd80      	pop	{r7, pc}
 800c15a:	bf00      	nop
 800c15c:	2000104c 	.word	0x2000104c
 800c160:	20001078 	.word	0x20001078
 800c164:	20001060 	.word	0x20001060

0800c168 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c168:	b580      	push	{r7, lr}
 800c16a:	b084      	sub	sp, #16
 800c16c:	af00      	add	r7, sp, #0
 800c16e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	3354      	adds	r3, #84	; 0x54
 800c174:	4618      	mov	r0, r3
 800c176:	f001 f9fb 	bl	800d570 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800c180:	2b00      	cmp	r3, #0
 800c182:	d108      	bne.n	800c196 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c188:	4618      	mov	r0, r3
 800c18a:	f001 f889 	bl	800d2a0 <vPortFree>
				vPortFree( pxTCB );
 800c18e:	6878      	ldr	r0, [r7, #4]
 800c190:	f001 f886 	bl	800d2a0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c194:	e018      	b.n	800c1c8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800c19c:	2b01      	cmp	r3, #1
 800c19e:	d103      	bne.n	800c1a8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800c1a0:	6878      	ldr	r0, [r7, #4]
 800c1a2:	f001 f87d 	bl	800d2a0 <vPortFree>
	}
 800c1a6:	e00f      	b.n	800c1c8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800c1ae:	2b02      	cmp	r3, #2
 800c1b0:	d00a      	beq.n	800c1c8 <prvDeleteTCB+0x60>
	__asm volatile
 800c1b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1b6:	f383 8811 	msr	BASEPRI, r3
 800c1ba:	f3bf 8f6f 	isb	sy
 800c1be:	f3bf 8f4f 	dsb	sy
 800c1c2:	60fb      	str	r3, [r7, #12]
}
 800c1c4:	bf00      	nop
 800c1c6:	e7fe      	b.n	800c1c6 <prvDeleteTCB+0x5e>
	}
 800c1c8:	bf00      	nop
 800c1ca:	3710      	adds	r7, #16
 800c1cc:	46bd      	mov	sp, r7
 800c1ce:	bd80      	pop	{r7, pc}

0800c1d0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c1d0:	b480      	push	{r7}
 800c1d2:	b083      	sub	sp, #12
 800c1d4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c1d6:	4b0c      	ldr	r3, [pc, #48]	; (800c208 <prvResetNextTaskUnblockTime+0x38>)
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d104      	bne.n	800c1ea <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c1e0:	4b0a      	ldr	r3, [pc, #40]	; (800c20c <prvResetNextTaskUnblockTime+0x3c>)
 800c1e2:	f04f 32ff 	mov.w	r2, #4294967295
 800c1e6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c1e8:	e008      	b.n	800c1fc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c1ea:	4b07      	ldr	r3, [pc, #28]	; (800c208 <prvResetNextTaskUnblockTime+0x38>)
 800c1ec:	681b      	ldr	r3, [r3, #0]
 800c1ee:	68db      	ldr	r3, [r3, #12]
 800c1f0:	68db      	ldr	r3, [r3, #12]
 800c1f2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	685b      	ldr	r3, [r3, #4]
 800c1f8:	4a04      	ldr	r2, [pc, #16]	; (800c20c <prvResetNextTaskUnblockTime+0x3c>)
 800c1fa:	6013      	str	r3, [r2, #0]
}
 800c1fc:	bf00      	nop
 800c1fe:	370c      	adds	r7, #12
 800c200:	46bd      	mov	sp, r7
 800c202:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c206:	4770      	bx	lr
 800c208:	20001030 	.word	0x20001030
 800c20c:	20001098 	.word	0x20001098

0800c210 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c210:	b480      	push	{r7}
 800c212:	b083      	sub	sp, #12
 800c214:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c216:	4b0b      	ldr	r3, [pc, #44]	; (800c244 <xTaskGetSchedulerState+0x34>)
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d102      	bne.n	800c224 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c21e:	2301      	movs	r3, #1
 800c220:	607b      	str	r3, [r7, #4]
 800c222:	e008      	b.n	800c236 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c224:	4b08      	ldr	r3, [pc, #32]	; (800c248 <xTaskGetSchedulerState+0x38>)
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d102      	bne.n	800c232 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c22c:	2302      	movs	r3, #2
 800c22e:	607b      	str	r3, [r7, #4]
 800c230:	e001      	b.n	800c236 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c232:	2300      	movs	r3, #0
 800c234:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c236:	687b      	ldr	r3, [r7, #4]
	}
 800c238:	4618      	mov	r0, r3
 800c23a:	370c      	adds	r7, #12
 800c23c:	46bd      	mov	sp, r7
 800c23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c242:	4770      	bx	lr
 800c244:	20001084 	.word	0x20001084
 800c248:	200010a0 	.word	0x200010a0

0800c24c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800c24c:	b580      	push	{r7, lr}
 800c24e:	b084      	sub	sp, #16
 800c250:	af00      	add	r7, sp, #0
 800c252:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800c258:	2300      	movs	r3, #0
 800c25a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d051      	beq.n	800c306 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800c262:	68bb      	ldr	r3, [r7, #8]
 800c264:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c266:	4b2a      	ldr	r3, [pc, #168]	; (800c310 <xTaskPriorityInherit+0xc4>)
 800c268:	681b      	ldr	r3, [r3, #0]
 800c26a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c26c:	429a      	cmp	r2, r3
 800c26e:	d241      	bcs.n	800c2f4 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c270:	68bb      	ldr	r3, [r7, #8]
 800c272:	699b      	ldr	r3, [r3, #24]
 800c274:	2b00      	cmp	r3, #0
 800c276:	db06      	blt.n	800c286 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c278:	4b25      	ldr	r3, [pc, #148]	; (800c310 <xTaskPriorityInherit+0xc4>)
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c27e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c282:	68bb      	ldr	r3, [r7, #8]
 800c284:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800c286:	68bb      	ldr	r3, [r7, #8]
 800c288:	6959      	ldr	r1, [r3, #20]
 800c28a:	68bb      	ldr	r3, [r7, #8]
 800c28c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c28e:	4613      	mov	r3, r2
 800c290:	009b      	lsls	r3, r3, #2
 800c292:	4413      	add	r3, r2
 800c294:	009b      	lsls	r3, r3, #2
 800c296:	4a1f      	ldr	r2, [pc, #124]	; (800c314 <xTaskPriorityInherit+0xc8>)
 800c298:	4413      	add	r3, r2
 800c29a:	4299      	cmp	r1, r3
 800c29c:	d122      	bne.n	800c2e4 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c29e:	68bb      	ldr	r3, [r7, #8]
 800c2a0:	3304      	adds	r3, #4
 800c2a2:	4618      	mov	r0, r3
 800c2a4:	f7fe f8d6 	bl	800a454 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c2a8:	4b19      	ldr	r3, [pc, #100]	; (800c310 <xTaskPriorityInherit+0xc4>)
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c2ae:	68bb      	ldr	r3, [r7, #8]
 800c2b0:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800c2b2:	68bb      	ldr	r3, [r7, #8]
 800c2b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c2b6:	4b18      	ldr	r3, [pc, #96]	; (800c318 <xTaskPriorityInherit+0xcc>)
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	429a      	cmp	r2, r3
 800c2bc:	d903      	bls.n	800c2c6 <xTaskPriorityInherit+0x7a>
 800c2be:	68bb      	ldr	r3, [r7, #8]
 800c2c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2c2:	4a15      	ldr	r2, [pc, #84]	; (800c318 <xTaskPriorityInherit+0xcc>)
 800c2c4:	6013      	str	r3, [r2, #0]
 800c2c6:	68bb      	ldr	r3, [r7, #8]
 800c2c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c2ca:	4613      	mov	r3, r2
 800c2cc:	009b      	lsls	r3, r3, #2
 800c2ce:	4413      	add	r3, r2
 800c2d0:	009b      	lsls	r3, r3, #2
 800c2d2:	4a10      	ldr	r2, [pc, #64]	; (800c314 <xTaskPriorityInherit+0xc8>)
 800c2d4:	441a      	add	r2, r3
 800c2d6:	68bb      	ldr	r3, [r7, #8]
 800c2d8:	3304      	adds	r3, #4
 800c2da:	4619      	mov	r1, r3
 800c2dc:	4610      	mov	r0, r2
 800c2de:	f7fe f85c 	bl	800a39a <vListInsertEnd>
 800c2e2:	e004      	b.n	800c2ee <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c2e4:	4b0a      	ldr	r3, [pc, #40]	; (800c310 <xTaskPriorityInherit+0xc4>)
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c2ea:	68bb      	ldr	r3, [r7, #8]
 800c2ec:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800c2ee:	2301      	movs	r3, #1
 800c2f0:	60fb      	str	r3, [r7, #12]
 800c2f2:	e008      	b.n	800c306 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800c2f4:	68bb      	ldr	r3, [r7, #8]
 800c2f6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c2f8:	4b05      	ldr	r3, [pc, #20]	; (800c310 <xTaskPriorityInherit+0xc4>)
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2fe:	429a      	cmp	r2, r3
 800c300:	d201      	bcs.n	800c306 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800c302:	2301      	movs	r3, #1
 800c304:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c306:	68fb      	ldr	r3, [r7, #12]
	}
 800c308:	4618      	mov	r0, r3
 800c30a:	3710      	adds	r7, #16
 800c30c:	46bd      	mov	sp, r7
 800c30e:	bd80      	pop	{r7, pc}
 800c310:	20000ba4 	.word	0x20000ba4
 800c314:	20000ba8 	.word	0x20000ba8
 800c318:	20001080 	.word	0x20001080

0800c31c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c31c:	b580      	push	{r7, lr}
 800c31e:	b086      	sub	sp, #24
 800c320:	af00      	add	r7, sp, #0
 800c322:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c328:	2300      	movs	r3, #0
 800c32a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d056      	beq.n	800c3e0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c332:	4b2e      	ldr	r3, [pc, #184]	; (800c3ec <xTaskPriorityDisinherit+0xd0>)
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	693a      	ldr	r2, [r7, #16]
 800c338:	429a      	cmp	r2, r3
 800c33a:	d00a      	beq.n	800c352 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800c33c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c340:	f383 8811 	msr	BASEPRI, r3
 800c344:	f3bf 8f6f 	isb	sy
 800c348:	f3bf 8f4f 	dsb	sy
 800c34c:	60fb      	str	r3, [r7, #12]
}
 800c34e:	bf00      	nop
 800c350:	e7fe      	b.n	800c350 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800c352:	693b      	ldr	r3, [r7, #16]
 800c354:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c356:	2b00      	cmp	r3, #0
 800c358:	d10a      	bne.n	800c370 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800c35a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c35e:	f383 8811 	msr	BASEPRI, r3
 800c362:	f3bf 8f6f 	isb	sy
 800c366:	f3bf 8f4f 	dsb	sy
 800c36a:	60bb      	str	r3, [r7, #8]
}
 800c36c:	bf00      	nop
 800c36e:	e7fe      	b.n	800c36e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800c370:	693b      	ldr	r3, [r7, #16]
 800c372:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c374:	1e5a      	subs	r2, r3, #1
 800c376:	693b      	ldr	r3, [r7, #16]
 800c378:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c37a:	693b      	ldr	r3, [r7, #16]
 800c37c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c37e:	693b      	ldr	r3, [r7, #16]
 800c380:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c382:	429a      	cmp	r2, r3
 800c384:	d02c      	beq.n	800c3e0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c386:	693b      	ldr	r3, [r7, #16]
 800c388:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	d128      	bne.n	800c3e0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c38e:	693b      	ldr	r3, [r7, #16]
 800c390:	3304      	adds	r3, #4
 800c392:	4618      	mov	r0, r3
 800c394:	f7fe f85e 	bl	800a454 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c398:	693b      	ldr	r3, [r7, #16]
 800c39a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c39c:	693b      	ldr	r3, [r7, #16]
 800c39e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c3a0:	693b      	ldr	r3, [r7, #16]
 800c3a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3a4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c3a8:	693b      	ldr	r3, [r7, #16]
 800c3aa:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c3ac:	693b      	ldr	r3, [r7, #16]
 800c3ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c3b0:	4b0f      	ldr	r3, [pc, #60]	; (800c3f0 <xTaskPriorityDisinherit+0xd4>)
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	429a      	cmp	r2, r3
 800c3b6:	d903      	bls.n	800c3c0 <xTaskPriorityDisinherit+0xa4>
 800c3b8:	693b      	ldr	r3, [r7, #16]
 800c3ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3bc:	4a0c      	ldr	r2, [pc, #48]	; (800c3f0 <xTaskPriorityDisinherit+0xd4>)
 800c3be:	6013      	str	r3, [r2, #0]
 800c3c0:	693b      	ldr	r3, [r7, #16]
 800c3c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c3c4:	4613      	mov	r3, r2
 800c3c6:	009b      	lsls	r3, r3, #2
 800c3c8:	4413      	add	r3, r2
 800c3ca:	009b      	lsls	r3, r3, #2
 800c3cc:	4a09      	ldr	r2, [pc, #36]	; (800c3f4 <xTaskPriorityDisinherit+0xd8>)
 800c3ce:	441a      	add	r2, r3
 800c3d0:	693b      	ldr	r3, [r7, #16]
 800c3d2:	3304      	adds	r3, #4
 800c3d4:	4619      	mov	r1, r3
 800c3d6:	4610      	mov	r0, r2
 800c3d8:	f7fd ffdf 	bl	800a39a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c3dc:	2301      	movs	r3, #1
 800c3de:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c3e0:	697b      	ldr	r3, [r7, #20]
	}
 800c3e2:	4618      	mov	r0, r3
 800c3e4:	3718      	adds	r7, #24
 800c3e6:	46bd      	mov	sp, r7
 800c3e8:	bd80      	pop	{r7, pc}
 800c3ea:	bf00      	nop
 800c3ec:	20000ba4 	.word	0x20000ba4
 800c3f0:	20001080 	.word	0x20001080
 800c3f4:	20000ba8 	.word	0x20000ba8

0800c3f8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800c3f8:	b580      	push	{r7, lr}
 800c3fa:	b088      	sub	sp, #32
 800c3fc:	af00      	add	r7, sp, #0
 800c3fe:	6078      	str	r0, [r7, #4]
 800c400:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800c406:	2301      	movs	r3, #1
 800c408:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d06a      	beq.n	800c4e6 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800c410:	69bb      	ldr	r3, [r7, #24]
 800c412:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c414:	2b00      	cmp	r3, #0
 800c416:	d10a      	bne.n	800c42e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800c418:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c41c:	f383 8811 	msr	BASEPRI, r3
 800c420:	f3bf 8f6f 	isb	sy
 800c424:	f3bf 8f4f 	dsb	sy
 800c428:	60fb      	str	r3, [r7, #12]
}
 800c42a:	bf00      	nop
 800c42c:	e7fe      	b.n	800c42c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800c42e:	69bb      	ldr	r3, [r7, #24]
 800c430:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c432:	683a      	ldr	r2, [r7, #0]
 800c434:	429a      	cmp	r2, r3
 800c436:	d902      	bls.n	800c43e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800c438:	683b      	ldr	r3, [r7, #0]
 800c43a:	61fb      	str	r3, [r7, #28]
 800c43c:	e002      	b.n	800c444 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800c43e:	69bb      	ldr	r3, [r7, #24]
 800c440:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c442:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800c444:	69bb      	ldr	r3, [r7, #24]
 800c446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c448:	69fa      	ldr	r2, [r7, #28]
 800c44a:	429a      	cmp	r2, r3
 800c44c:	d04b      	beq.n	800c4e6 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800c44e:	69bb      	ldr	r3, [r7, #24]
 800c450:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c452:	697a      	ldr	r2, [r7, #20]
 800c454:	429a      	cmp	r2, r3
 800c456:	d146      	bne.n	800c4e6 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800c458:	4b25      	ldr	r3, [pc, #148]	; (800c4f0 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	69ba      	ldr	r2, [r7, #24]
 800c45e:	429a      	cmp	r2, r3
 800c460:	d10a      	bne.n	800c478 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800c462:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c466:	f383 8811 	msr	BASEPRI, r3
 800c46a:	f3bf 8f6f 	isb	sy
 800c46e:	f3bf 8f4f 	dsb	sy
 800c472:	60bb      	str	r3, [r7, #8]
}
 800c474:	bf00      	nop
 800c476:	e7fe      	b.n	800c476 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800c478:	69bb      	ldr	r3, [r7, #24]
 800c47a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c47c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800c47e:	69bb      	ldr	r3, [r7, #24]
 800c480:	69fa      	ldr	r2, [r7, #28]
 800c482:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c484:	69bb      	ldr	r3, [r7, #24]
 800c486:	699b      	ldr	r3, [r3, #24]
 800c488:	2b00      	cmp	r3, #0
 800c48a:	db04      	blt.n	800c496 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c48c:	69fb      	ldr	r3, [r7, #28]
 800c48e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c492:	69bb      	ldr	r3, [r7, #24]
 800c494:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800c496:	69bb      	ldr	r3, [r7, #24]
 800c498:	6959      	ldr	r1, [r3, #20]
 800c49a:	693a      	ldr	r2, [r7, #16]
 800c49c:	4613      	mov	r3, r2
 800c49e:	009b      	lsls	r3, r3, #2
 800c4a0:	4413      	add	r3, r2
 800c4a2:	009b      	lsls	r3, r3, #2
 800c4a4:	4a13      	ldr	r2, [pc, #76]	; (800c4f4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800c4a6:	4413      	add	r3, r2
 800c4a8:	4299      	cmp	r1, r3
 800c4aa:	d11c      	bne.n	800c4e6 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c4ac:	69bb      	ldr	r3, [r7, #24]
 800c4ae:	3304      	adds	r3, #4
 800c4b0:	4618      	mov	r0, r3
 800c4b2:	f7fd ffcf 	bl	800a454 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800c4b6:	69bb      	ldr	r3, [r7, #24]
 800c4b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c4ba:	4b0f      	ldr	r3, [pc, #60]	; (800c4f8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	429a      	cmp	r2, r3
 800c4c0:	d903      	bls.n	800c4ca <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800c4c2:	69bb      	ldr	r3, [r7, #24]
 800c4c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4c6:	4a0c      	ldr	r2, [pc, #48]	; (800c4f8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800c4c8:	6013      	str	r3, [r2, #0]
 800c4ca:	69bb      	ldr	r3, [r7, #24]
 800c4cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c4ce:	4613      	mov	r3, r2
 800c4d0:	009b      	lsls	r3, r3, #2
 800c4d2:	4413      	add	r3, r2
 800c4d4:	009b      	lsls	r3, r3, #2
 800c4d6:	4a07      	ldr	r2, [pc, #28]	; (800c4f4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800c4d8:	441a      	add	r2, r3
 800c4da:	69bb      	ldr	r3, [r7, #24]
 800c4dc:	3304      	adds	r3, #4
 800c4de:	4619      	mov	r1, r3
 800c4e0:	4610      	mov	r0, r2
 800c4e2:	f7fd ff5a 	bl	800a39a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c4e6:	bf00      	nop
 800c4e8:	3720      	adds	r7, #32
 800c4ea:	46bd      	mov	sp, r7
 800c4ec:	bd80      	pop	{r7, pc}
 800c4ee:	bf00      	nop
 800c4f0:	20000ba4 	.word	0x20000ba4
 800c4f4:	20000ba8 	.word	0x20000ba8
 800c4f8:	20001080 	.word	0x20001080

0800c4fc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800c4fc:	b480      	push	{r7}
 800c4fe:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800c500:	4b07      	ldr	r3, [pc, #28]	; (800c520 <pvTaskIncrementMutexHeldCount+0x24>)
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	2b00      	cmp	r3, #0
 800c506:	d004      	beq.n	800c512 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800c508:	4b05      	ldr	r3, [pc, #20]	; (800c520 <pvTaskIncrementMutexHeldCount+0x24>)
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c50e:	3201      	adds	r2, #1
 800c510:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800c512:	4b03      	ldr	r3, [pc, #12]	; (800c520 <pvTaskIncrementMutexHeldCount+0x24>)
 800c514:	681b      	ldr	r3, [r3, #0]
	}
 800c516:	4618      	mov	r0, r3
 800c518:	46bd      	mov	sp, r7
 800c51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c51e:	4770      	bx	lr
 800c520:	20000ba4 	.word	0x20000ba4

0800c524 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c524:	b580      	push	{r7, lr}
 800c526:	b084      	sub	sp, #16
 800c528:	af00      	add	r7, sp, #0
 800c52a:	6078      	str	r0, [r7, #4]
 800c52c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c52e:	4b21      	ldr	r3, [pc, #132]	; (800c5b4 <prvAddCurrentTaskToDelayedList+0x90>)
 800c530:	681b      	ldr	r3, [r3, #0]
 800c532:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c534:	4b20      	ldr	r3, [pc, #128]	; (800c5b8 <prvAddCurrentTaskToDelayedList+0x94>)
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	3304      	adds	r3, #4
 800c53a:	4618      	mov	r0, r3
 800c53c:	f7fd ff8a 	bl	800a454 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c546:	d10a      	bne.n	800c55e <prvAddCurrentTaskToDelayedList+0x3a>
 800c548:	683b      	ldr	r3, [r7, #0]
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	d007      	beq.n	800c55e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c54e:	4b1a      	ldr	r3, [pc, #104]	; (800c5b8 <prvAddCurrentTaskToDelayedList+0x94>)
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	3304      	adds	r3, #4
 800c554:	4619      	mov	r1, r3
 800c556:	4819      	ldr	r0, [pc, #100]	; (800c5bc <prvAddCurrentTaskToDelayedList+0x98>)
 800c558:	f7fd ff1f 	bl	800a39a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c55c:	e026      	b.n	800c5ac <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c55e:	68fa      	ldr	r2, [r7, #12]
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	4413      	add	r3, r2
 800c564:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c566:	4b14      	ldr	r3, [pc, #80]	; (800c5b8 <prvAddCurrentTaskToDelayedList+0x94>)
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	68ba      	ldr	r2, [r7, #8]
 800c56c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c56e:	68ba      	ldr	r2, [r7, #8]
 800c570:	68fb      	ldr	r3, [r7, #12]
 800c572:	429a      	cmp	r2, r3
 800c574:	d209      	bcs.n	800c58a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c576:	4b12      	ldr	r3, [pc, #72]	; (800c5c0 <prvAddCurrentTaskToDelayedList+0x9c>)
 800c578:	681a      	ldr	r2, [r3, #0]
 800c57a:	4b0f      	ldr	r3, [pc, #60]	; (800c5b8 <prvAddCurrentTaskToDelayedList+0x94>)
 800c57c:	681b      	ldr	r3, [r3, #0]
 800c57e:	3304      	adds	r3, #4
 800c580:	4619      	mov	r1, r3
 800c582:	4610      	mov	r0, r2
 800c584:	f7fd ff2d 	bl	800a3e2 <vListInsert>
}
 800c588:	e010      	b.n	800c5ac <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c58a:	4b0e      	ldr	r3, [pc, #56]	; (800c5c4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800c58c:	681a      	ldr	r2, [r3, #0]
 800c58e:	4b0a      	ldr	r3, [pc, #40]	; (800c5b8 <prvAddCurrentTaskToDelayedList+0x94>)
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	3304      	adds	r3, #4
 800c594:	4619      	mov	r1, r3
 800c596:	4610      	mov	r0, r2
 800c598:	f7fd ff23 	bl	800a3e2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c59c:	4b0a      	ldr	r3, [pc, #40]	; (800c5c8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	68ba      	ldr	r2, [r7, #8]
 800c5a2:	429a      	cmp	r2, r3
 800c5a4:	d202      	bcs.n	800c5ac <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800c5a6:	4a08      	ldr	r2, [pc, #32]	; (800c5c8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c5a8:	68bb      	ldr	r3, [r7, #8]
 800c5aa:	6013      	str	r3, [r2, #0]
}
 800c5ac:	bf00      	nop
 800c5ae:	3710      	adds	r7, #16
 800c5b0:	46bd      	mov	sp, r7
 800c5b2:	bd80      	pop	{r7, pc}
 800c5b4:	2000107c 	.word	0x2000107c
 800c5b8:	20000ba4 	.word	0x20000ba4
 800c5bc:	20001064 	.word	0x20001064
 800c5c0:	20001034 	.word	0x20001034
 800c5c4:	20001030 	.word	0x20001030
 800c5c8:	20001098 	.word	0x20001098

0800c5cc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c5cc:	b580      	push	{r7, lr}
 800c5ce:	b08a      	sub	sp, #40	; 0x28
 800c5d0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800c5d2:	2300      	movs	r3, #0
 800c5d4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c5d6:	f000 fb07 	bl	800cbe8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c5da:	4b1c      	ldr	r3, [pc, #112]	; (800c64c <xTimerCreateTimerTask+0x80>)
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	d021      	beq.n	800c626 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c5e2:	2300      	movs	r3, #0
 800c5e4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c5e6:	2300      	movs	r3, #0
 800c5e8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c5ea:	1d3a      	adds	r2, r7, #4
 800c5ec:	f107 0108 	add.w	r1, r7, #8
 800c5f0:	f107 030c 	add.w	r3, r7, #12
 800c5f4:	4618      	mov	r0, r3
 800c5f6:	f7fd fe89 	bl	800a30c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c5fa:	6879      	ldr	r1, [r7, #4]
 800c5fc:	68bb      	ldr	r3, [r7, #8]
 800c5fe:	68fa      	ldr	r2, [r7, #12]
 800c600:	9202      	str	r2, [sp, #8]
 800c602:	9301      	str	r3, [sp, #4]
 800c604:	2302      	movs	r3, #2
 800c606:	9300      	str	r3, [sp, #0]
 800c608:	2300      	movs	r3, #0
 800c60a:	460a      	mov	r2, r1
 800c60c:	4910      	ldr	r1, [pc, #64]	; (800c650 <xTimerCreateTimerTask+0x84>)
 800c60e:	4811      	ldr	r0, [pc, #68]	; (800c654 <xTimerCreateTimerTask+0x88>)
 800c610:	f7fe ffa4 	bl	800b55c <xTaskCreateStatic>
 800c614:	4603      	mov	r3, r0
 800c616:	4a10      	ldr	r2, [pc, #64]	; (800c658 <xTimerCreateTimerTask+0x8c>)
 800c618:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800c61a:	4b0f      	ldr	r3, [pc, #60]	; (800c658 <xTimerCreateTimerTask+0x8c>)
 800c61c:	681b      	ldr	r3, [r3, #0]
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d001      	beq.n	800c626 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800c622:	2301      	movs	r3, #1
 800c624:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c626:	697b      	ldr	r3, [r7, #20]
 800c628:	2b00      	cmp	r3, #0
 800c62a:	d10a      	bne.n	800c642 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800c62c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c630:	f383 8811 	msr	BASEPRI, r3
 800c634:	f3bf 8f6f 	isb	sy
 800c638:	f3bf 8f4f 	dsb	sy
 800c63c:	613b      	str	r3, [r7, #16]
}
 800c63e:	bf00      	nop
 800c640:	e7fe      	b.n	800c640 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800c642:	697b      	ldr	r3, [r7, #20]
}
 800c644:	4618      	mov	r0, r3
 800c646:	3718      	adds	r7, #24
 800c648:	46bd      	mov	sp, r7
 800c64a:	bd80      	pop	{r7, pc}
 800c64c:	200010d4 	.word	0x200010d4
 800c650:	0800d730 	.word	0x0800d730
 800c654:	0800c791 	.word	0x0800c791
 800c658:	200010d8 	.word	0x200010d8

0800c65c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c65c:	b580      	push	{r7, lr}
 800c65e:	b08a      	sub	sp, #40	; 0x28
 800c660:	af00      	add	r7, sp, #0
 800c662:	60f8      	str	r0, [r7, #12]
 800c664:	60b9      	str	r1, [r7, #8]
 800c666:	607a      	str	r2, [r7, #4]
 800c668:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c66a:	2300      	movs	r3, #0
 800c66c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c66e:	68fb      	ldr	r3, [r7, #12]
 800c670:	2b00      	cmp	r3, #0
 800c672:	d10a      	bne.n	800c68a <xTimerGenericCommand+0x2e>
	__asm volatile
 800c674:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c678:	f383 8811 	msr	BASEPRI, r3
 800c67c:	f3bf 8f6f 	isb	sy
 800c680:	f3bf 8f4f 	dsb	sy
 800c684:	623b      	str	r3, [r7, #32]
}
 800c686:	bf00      	nop
 800c688:	e7fe      	b.n	800c688 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c68a:	4b1a      	ldr	r3, [pc, #104]	; (800c6f4 <xTimerGenericCommand+0x98>)
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d02a      	beq.n	800c6e8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c692:	68bb      	ldr	r3, [r7, #8]
 800c694:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800c69a:	68fb      	ldr	r3, [r7, #12]
 800c69c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c69e:	68bb      	ldr	r3, [r7, #8]
 800c6a0:	2b05      	cmp	r3, #5
 800c6a2:	dc18      	bgt.n	800c6d6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c6a4:	f7ff fdb4 	bl	800c210 <xTaskGetSchedulerState>
 800c6a8:	4603      	mov	r3, r0
 800c6aa:	2b02      	cmp	r3, #2
 800c6ac:	d109      	bne.n	800c6c2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c6ae:	4b11      	ldr	r3, [pc, #68]	; (800c6f4 <xTimerGenericCommand+0x98>)
 800c6b0:	6818      	ldr	r0, [r3, #0]
 800c6b2:	f107 0110 	add.w	r1, r7, #16
 800c6b6:	2300      	movs	r3, #0
 800c6b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c6ba:	f7fe f8e9 	bl	800a890 <xQueueGenericSend>
 800c6be:	6278      	str	r0, [r7, #36]	; 0x24
 800c6c0:	e012      	b.n	800c6e8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c6c2:	4b0c      	ldr	r3, [pc, #48]	; (800c6f4 <xTimerGenericCommand+0x98>)
 800c6c4:	6818      	ldr	r0, [r3, #0]
 800c6c6:	f107 0110 	add.w	r1, r7, #16
 800c6ca:	2300      	movs	r3, #0
 800c6cc:	2200      	movs	r2, #0
 800c6ce:	f7fe f8df 	bl	800a890 <xQueueGenericSend>
 800c6d2:	6278      	str	r0, [r7, #36]	; 0x24
 800c6d4:	e008      	b.n	800c6e8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c6d6:	4b07      	ldr	r3, [pc, #28]	; (800c6f4 <xTimerGenericCommand+0x98>)
 800c6d8:	6818      	ldr	r0, [r3, #0]
 800c6da:	f107 0110 	add.w	r1, r7, #16
 800c6de:	2300      	movs	r3, #0
 800c6e0:	683a      	ldr	r2, [r7, #0]
 800c6e2:	f7fe f9d3 	bl	800aa8c <xQueueGenericSendFromISR>
 800c6e6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c6e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c6ea:	4618      	mov	r0, r3
 800c6ec:	3728      	adds	r7, #40	; 0x28
 800c6ee:	46bd      	mov	sp, r7
 800c6f0:	bd80      	pop	{r7, pc}
 800c6f2:	bf00      	nop
 800c6f4:	200010d4 	.word	0x200010d4

0800c6f8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c6f8:	b580      	push	{r7, lr}
 800c6fa:	b088      	sub	sp, #32
 800c6fc:	af02      	add	r7, sp, #8
 800c6fe:	6078      	str	r0, [r7, #4]
 800c700:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c702:	4b22      	ldr	r3, [pc, #136]	; (800c78c <prvProcessExpiredTimer+0x94>)
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	68db      	ldr	r3, [r3, #12]
 800c708:	68db      	ldr	r3, [r3, #12]
 800c70a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c70c:	697b      	ldr	r3, [r7, #20]
 800c70e:	3304      	adds	r3, #4
 800c710:	4618      	mov	r0, r3
 800c712:	f7fd fe9f 	bl	800a454 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c716:	697b      	ldr	r3, [r7, #20]
 800c718:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c71c:	f003 0304 	and.w	r3, r3, #4
 800c720:	2b00      	cmp	r3, #0
 800c722:	d022      	beq.n	800c76a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c724:	697b      	ldr	r3, [r7, #20]
 800c726:	699a      	ldr	r2, [r3, #24]
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	18d1      	adds	r1, r2, r3
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	683a      	ldr	r2, [r7, #0]
 800c730:	6978      	ldr	r0, [r7, #20]
 800c732:	f000 f8d1 	bl	800c8d8 <prvInsertTimerInActiveList>
 800c736:	4603      	mov	r3, r0
 800c738:	2b00      	cmp	r3, #0
 800c73a:	d01f      	beq.n	800c77c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c73c:	2300      	movs	r3, #0
 800c73e:	9300      	str	r3, [sp, #0]
 800c740:	2300      	movs	r3, #0
 800c742:	687a      	ldr	r2, [r7, #4]
 800c744:	2100      	movs	r1, #0
 800c746:	6978      	ldr	r0, [r7, #20]
 800c748:	f7ff ff88 	bl	800c65c <xTimerGenericCommand>
 800c74c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c74e:	693b      	ldr	r3, [r7, #16]
 800c750:	2b00      	cmp	r3, #0
 800c752:	d113      	bne.n	800c77c <prvProcessExpiredTimer+0x84>
	__asm volatile
 800c754:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c758:	f383 8811 	msr	BASEPRI, r3
 800c75c:	f3bf 8f6f 	isb	sy
 800c760:	f3bf 8f4f 	dsb	sy
 800c764:	60fb      	str	r3, [r7, #12]
}
 800c766:	bf00      	nop
 800c768:	e7fe      	b.n	800c768 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c76a:	697b      	ldr	r3, [r7, #20]
 800c76c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c770:	f023 0301 	bic.w	r3, r3, #1
 800c774:	b2da      	uxtb	r2, r3
 800c776:	697b      	ldr	r3, [r7, #20]
 800c778:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c77c:	697b      	ldr	r3, [r7, #20]
 800c77e:	6a1b      	ldr	r3, [r3, #32]
 800c780:	6978      	ldr	r0, [r7, #20]
 800c782:	4798      	blx	r3
}
 800c784:	bf00      	nop
 800c786:	3718      	adds	r7, #24
 800c788:	46bd      	mov	sp, r7
 800c78a:	bd80      	pop	{r7, pc}
 800c78c:	200010cc 	.word	0x200010cc

0800c790 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800c790:	b580      	push	{r7, lr}
 800c792:	b084      	sub	sp, #16
 800c794:	af00      	add	r7, sp, #0
 800c796:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c798:	f107 0308 	add.w	r3, r7, #8
 800c79c:	4618      	mov	r0, r3
 800c79e:	f000 f857 	bl	800c850 <prvGetNextExpireTime>
 800c7a2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c7a4:	68bb      	ldr	r3, [r7, #8]
 800c7a6:	4619      	mov	r1, r3
 800c7a8:	68f8      	ldr	r0, [r7, #12]
 800c7aa:	f000 f803 	bl	800c7b4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c7ae:	f000 f8d5 	bl	800c95c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c7b2:	e7f1      	b.n	800c798 <prvTimerTask+0x8>

0800c7b4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c7b4:	b580      	push	{r7, lr}
 800c7b6:	b084      	sub	sp, #16
 800c7b8:	af00      	add	r7, sp, #0
 800c7ba:	6078      	str	r0, [r7, #4]
 800c7bc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c7be:	f7ff f929 	bl	800ba14 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c7c2:	f107 0308 	add.w	r3, r7, #8
 800c7c6:	4618      	mov	r0, r3
 800c7c8:	f000 f866 	bl	800c898 <prvSampleTimeNow>
 800c7cc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c7ce:	68bb      	ldr	r3, [r7, #8]
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	d130      	bne.n	800c836 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c7d4:	683b      	ldr	r3, [r7, #0]
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d10a      	bne.n	800c7f0 <prvProcessTimerOrBlockTask+0x3c>
 800c7da:	687a      	ldr	r2, [r7, #4]
 800c7dc:	68fb      	ldr	r3, [r7, #12]
 800c7de:	429a      	cmp	r2, r3
 800c7e0:	d806      	bhi.n	800c7f0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c7e2:	f7ff f925 	bl	800ba30 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c7e6:	68f9      	ldr	r1, [r7, #12]
 800c7e8:	6878      	ldr	r0, [r7, #4]
 800c7ea:	f7ff ff85 	bl	800c6f8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c7ee:	e024      	b.n	800c83a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c7f0:	683b      	ldr	r3, [r7, #0]
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	d008      	beq.n	800c808 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c7f6:	4b13      	ldr	r3, [pc, #76]	; (800c844 <prvProcessTimerOrBlockTask+0x90>)
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	681b      	ldr	r3, [r3, #0]
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d101      	bne.n	800c804 <prvProcessTimerOrBlockTask+0x50>
 800c800:	2301      	movs	r3, #1
 800c802:	e000      	b.n	800c806 <prvProcessTimerOrBlockTask+0x52>
 800c804:	2300      	movs	r3, #0
 800c806:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c808:	4b0f      	ldr	r3, [pc, #60]	; (800c848 <prvProcessTimerOrBlockTask+0x94>)
 800c80a:	6818      	ldr	r0, [r3, #0]
 800c80c:	687a      	ldr	r2, [r7, #4]
 800c80e:	68fb      	ldr	r3, [r7, #12]
 800c810:	1ad3      	subs	r3, r2, r3
 800c812:	683a      	ldr	r2, [r7, #0]
 800c814:	4619      	mov	r1, r3
 800c816:	f7fe fe6d 	bl	800b4f4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c81a:	f7ff f909 	bl	800ba30 <xTaskResumeAll>
 800c81e:	4603      	mov	r3, r0
 800c820:	2b00      	cmp	r3, #0
 800c822:	d10a      	bne.n	800c83a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c824:	4b09      	ldr	r3, [pc, #36]	; (800c84c <prvProcessTimerOrBlockTask+0x98>)
 800c826:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c82a:	601a      	str	r2, [r3, #0]
 800c82c:	f3bf 8f4f 	dsb	sy
 800c830:	f3bf 8f6f 	isb	sy
}
 800c834:	e001      	b.n	800c83a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c836:	f7ff f8fb 	bl	800ba30 <xTaskResumeAll>
}
 800c83a:	bf00      	nop
 800c83c:	3710      	adds	r7, #16
 800c83e:	46bd      	mov	sp, r7
 800c840:	bd80      	pop	{r7, pc}
 800c842:	bf00      	nop
 800c844:	200010d0 	.word	0x200010d0
 800c848:	200010d4 	.word	0x200010d4
 800c84c:	e000ed04 	.word	0xe000ed04

0800c850 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c850:	b480      	push	{r7}
 800c852:	b085      	sub	sp, #20
 800c854:	af00      	add	r7, sp, #0
 800c856:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c858:	4b0e      	ldr	r3, [pc, #56]	; (800c894 <prvGetNextExpireTime+0x44>)
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	681b      	ldr	r3, [r3, #0]
 800c85e:	2b00      	cmp	r3, #0
 800c860:	d101      	bne.n	800c866 <prvGetNextExpireTime+0x16>
 800c862:	2201      	movs	r2, #1
 800c864:	e000      	b.n	800c868 <prvGetNextExpireTime+0x18>
 800c866:	2200      	movs	r2, #0
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	2b00      	cmp	r3, #0
 800c872:	d105      	bne.n	800c880 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c874:	4b07      	ldr	r3, [pc, #28]	; (800c894 <prvGetNextExpireTime+0x44>)
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	68db      	ldr	r3, [r3, #12]
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	60fb      	str	r3, [r7, #12]
 800c87e:	e001      	b.n	800c884 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c880:	2300      	movs	r3, #0
 800c882:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c884:	68fb      	ldr	r3, [r7, #12]
}
 800c886:	4618      	mov	r0, r3
 800c888:	3714      	adds	r7, #20
 800c88a:	46bd      	mov	sp, r7
 800c88c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c890:	4770      	bx	lr
 800c892:	bf00      	nop
 800c894:	200010cc 	.word	0x200010cc

0800c898 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c898:	b580      	push	{r7, lr}
 800c89a:	b084      	sub	sp, #16
 800c89c:	af00      	add	r7, sp, #0
 800c89e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c8a0:	f7ff f964 	bl	800bb6c <xTaskGetTickCount>
 800c8a4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c8a6:	4b0b      	ldr	r3, [pc, #44]	; (800c8d4 <prvSampleTimeNow+0x3c>)
 800c8a8:	681b      	ldr	r3, [r3, #0]
 800c8aa:	68fa      	ldr	r2, [r7, #12]
 800c8ac:	429a      	cmp	r2, r3
 800c8ae:	d205      	bcs.n	800c8bc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c8b0:	f000 f936 	bl	800cb20 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	2201      	movs	r2, #1
 800c8b8:	601a      	str	r2, [r3, #0]
 800c8ba:	e002      	b.n	800c8c2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	2200      	movs	r2, #0
 800c8c0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c8c2:	4a04      	ldr	r2, [pc, #16]	; (800c8d4 <prvSampleTimeNow+0x3c>)
 800c8c4:	68fb      	ldr	r3, [r7, #12]
 800c8c6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c8c8:	68fb      	ldr	r3, [r7, #12]
}
 800c8ca:	4618      	mov	r0, r3
 800c8cc:	3710      	adds	r7, #16
 800c8ce:	46bd      	mov	sp, r7
 800c8d0:	bd80      	pop	{r7, pc}
 800c8d2:	bf00      	nop
 800c8d4:	200010dc 	.word	0x200010dc

0800c8d8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c8d8:	b580      	push	{r7, lr}
 800c8da:	b086      	sub	sp, #24
 800c8dc:	af00      	add	r7, sp, #0
 800c8de:	60f8      	str	r0, [r7, #12]
 800c8e0:	60b9      	str	r1, [r7, #8]
 800c8e2:	607a      	str	r2, [r7, #4]
 800c8e4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c8e6:	2300      	movs	r3, #0
 800c8e8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c8ea:	68fb      	ldr	r3, [r7, #12]
 800c8ec:	68ba      	ldr	r2, [r7, #8]
 800c8ee:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c8f0:	68fb      	ldr	r3, [r7, #12]
 800c8f2:	68fa      	ldr	r2, [r7, #12]
 800c8f4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c8f6:	68ba      	ldr	r2, [r7, #8]
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	429a      	cmp	r2, r3
 800c8fc:	d812      	bhi.n	800c924 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c8fe:	687a      	ldr	r2, [r7, #4]
 800c900:	683b      	ldr	r3, [r7, #0]
 800c902:	1ad2      	subs	r2, r2, r3
 800c904:	68fb      	ldr	r3, [r7, #12]
 800c906:	699b      	ldr	r3, [r3, #24]
 800c908:	429a      	cmp	r2, r3
 800c90a:	d302      	bcc.n	800c912 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c90c:	2301      	movs	r3, #1
 800c90e:	617b      	str	r3, [r7, #20]
 800c910:	e01b      	b.n	800c94a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c912:	4b10      	ldr	r3, [pc, #64]	; (800c954 <prvInsertTimerInActiveList+0x7c>)
 800c914:	681a      	ldr	r2, [r3, #0]
 800c916:	68fb      	ldr	r3, [r7, #12]
 800c918:	3304      	adds	r3, #4
 800c91a:	4619      	mov	r1, r3
 800c91c:	4610      	mov	r0, r2
 800c91e:	f7fd fd60 	bl	800a3e2 <vListInsert>
 800c922:	e012      	b.n	800c94a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c924:	687a      	ldr	r2, [r7, #4]
 800c926:	683b      	ldr	r3, [r7, #0]
 800c928:	429a      	cmp	r2, r3
 800c92a:	d206      	bcs.n	800c93a <prvInsertTimerInActiveList+0x62>
 800c92c:	68ba      	ldr	r2, [r7, #8]
 800c92e:	683b      	ldr	r3, [r7, #0]
 800c930:	429a      	cmp	r2, r3
 800c932:	d302      	bcc.n	800c93a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c934:	2301      	movs	r3, #1
 800c936:	617b      	str	r3, [r7, #20]
 800c938:	e007      	b.n	800c94a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c93a:	4b07      	ldr	r3, [pc, #28]	; (800c958 <prvInsertTimerInActiveList+0x80>)
 800c93c:	681a      	ldr	r2, [r3, #0]
 800c93e:	68fb      	ldr	r3, [r7, #12]
 800c940:	3304      	adds	r3, #4
 800c942:	4619      	mov	r1, r3
 800c944:	4610      	mov	r0, r2
 800c946:	f7fd fd4c 	bl	800a3e2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c94a:	697b      	ldr	r3, [r7, #20]
}
 800c94c:	4618      	mov	r0, r3
 800c94e:	3718      	adds	r7, #24
 800c950:	46bd      	mov	sp, r7
 800c952:	bd80      	pop	{r7, pc}
 800c954:	200010d0 	.word	0x200010d0
 800c958:	200010cc 	.word	0x200010cc

0800c95c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c95c:	b580      	push	{r7, lr}
 800c95e:	b08e      	sub	sp, #56	; 0x38
 800c960:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c962:	e0ca      	b.n	800cafa <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	2b00      	cmp	r3, #0
 800c968:	da18      	bge.n	800c99c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c96a:	1d3b      	adds	r3, r7, #4
 800c96c:	3304      	adds	r3, #4
 800c96e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c972:	2b00      	cmp	r3, #0
 800c974:	d10a      	bne.n	800c98c <prvProcessReceivedCommands+0x30>
	__asm volatile
 800c976:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c97a:	f383 8811 	msr	BASEPRI, r3
 800c97e:	f3bf 8f6f 	isb	sy
 800c982:	f3bf 8f4f 	dsb	sy
 800c986:	61fb      	str	r3, [r7, #28]
}
 800c988:	bf00      	nop
 800c98a:	e7fe      	b.n	800c98a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c98c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c98e:	681b      	ldr	r3, [r3, #0]
 800c990:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c992:	6850      	ldr	r0, [r2, #4]
 800c994:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c996:	6892      	ldr	r2, [r2, #8]
 800c998:	4611      	mov	r1, r2
 800c99a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	f2c0 80aa 	blt.w	800caf8 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c9a4:	68fb      	ldr	r3, [r7, #12]
 800c9a6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c9a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9aa:	695b      	ldr	r3, [r3, #20]
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d004      	beq.n	800c9ba <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c9b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9b2:	3304      	adds	r3, #4
 800c9b4:	4618      	mov	r0, r3
 800c9b6:	f7fd fd4d 	bl	800a454 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c9ba:	463b      	mov	r3, r7
 800c9bc:	4618      	mov	r0, r3
 800c9be:	f7ff ff6b 	bl	800c898 <prvSampleTimeNow>
 800c9c2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	2b09      	cmp	r3, #9
 800c9c8:	f200 8097 	bhi.w	800cafa <prvProcessReceivedCommands+0x19e>
 800c9cc:	a201      	add	r2, pc, #4	; (adr r2, 800c9d4 <prvProcessReceivedCommands+0x78>)
 800c9ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c9d2:	bf00      	nop
 800c9d4:	0800c9fd 	.word	0x0800c9fd
 800c9d8:	0800c9fd 	.word	0x0800c9fd
 800c9dc:	0800c9fd 	.word	0x0800c9fd
 800c9e0:	0800ca71 	.word	0x0800ca71
 800c9e4:	0800ca85 	.word	0x0800ca85
 800c9e8:	0800cacf 	.word	0x0800cacf
 800c9ec:	0800c9fd 	.word	0x0800c9fd
 800c9f0:	0800c9fd 	.word	0x0800c9fd
 800c9f4:	0800ca71 	.word	0x0800ca71
 800c9f8:	0800ca85 	.word	0x0800ca85
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c9fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9fe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ca02:	f043 0301 	orr.w	r3, r3, #1
 800ca06:	b2da      	uxtb	r2, r3
 800ca08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca0a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800ca0e:	68ba      	ldr	r2, [r7, #8]
 800ca10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca12:	699b      	ldr	r3, [r3, #24]
 800ca14:	18d1      	adds	r1, r2, r3
 800ca16:	68bb      	ldr	r3, [r7, #8]
 800ca18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ca1a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ca1c:	f7ff ff5c 	bl	800c8d8 <prvInsertTimerInActiveList>
 800ca20:	4603      	mov	r3, r0
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	d069      	beq.n	800cafa <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ca26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca28:	6a1b      	ldr	r3, [r3, #32]
 800ca2a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ca2c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ca2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca30:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ca34:	f003 0304 	and.w	r3, r3, #4
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	d05e      	beq.n	800cafa <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800ca3c:	68ba      	ldr	r2, [r7, #8]
 800ca3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca40:	699b      	ldr	r3, [r3, #24]
 800ca42:	441a      	add	r2, r3
 800ca44:	2300      	movs	r3, #0
 800ca46:	9300      	str	r3, [sp, #0]
 800ca48:	2300      	movs	r3, #0
 800ca4a:	2100      	movs	r1, #0
 800ca4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ca4e:	f7ff fe05 	bl	800c65c <xTimerGenericCommand>
 800ca52:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800ca54:	6a3b      	ldr	r3, [r7, #32]
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	d14f      	bne.n	800cafa <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800ca5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca5e:	f383 8811 	msr	BASEPRI, r3
 800ca62:	f3bf 8f6f 	isb	sy
 800ca66:	f3bf 8f4f 	dsb	sy
 800ca6a:	61bb      	str	r3, [r7, #24]
}
 800ca6c:	bf00      	nop
 800ca6e:	e7fe      	b.n	800ca6e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ca70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca72:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ca76:	f023 0301 	bic.w	r3, r3, #1
 800ca7a:	b2da      	uxtb	r2, r3
 800ca7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca7e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800ca82:	e03a      	b.n	800cafa <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ca84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca86:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ca8a:	f043 0301 	orr.w	r3, r3, #1
 800ca8e:	b2da      	uxtb	r2, r3
 800ca90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca92:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800ca96:	68ba      	ldr	r2, [r7, #8]
 800ca98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca9a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800ca9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca9e:	699b      	ldr	r3, [r3, #24]
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	d10a      	bne.n	800caba <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800caa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800caa8:	f383 8811 	msr	BASEPRI, r3
 800caac:	f3bf 8f6f 	isb	sy
 800cab0:	f3bf 8f4f 	dsb	sy
 800cab4:	617b      	str	r3, [r7, #20]
}
 800cab6:	bf00      	nop
 800cab8:	e7fe      	b.n	800cab8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800caba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cabc:	699a      	ldr	r2, [r3, #24]
 800cabe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cac0:	18d1      	adds	r1, r2, r3
 800cac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cac4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cac6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cac8:	f7ff ff06 	bl	800c8d8 <prvInsertTimerInActiveList>
					break;
 800cacc:	e015      	b.n	800cafa <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800cace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cad0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cad4:	f003 0302 	and.w	r3, r3, #2
 800cad8:	2b00      	cmp	r3, #0
 800cada:	d103      	bne.n	800cae4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800cadc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cade:	f000 fbdf 	bl	800d2a0 <vPortFree>
 800cae2:	e00a      	b.n	800cafa <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800cae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cae6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800caea:	f023 0301 	bic.w	r3, r3, #1
 800caee:	b2da      	uxtb	r2, r3
 800caf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800caf2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800caf6:	e000      	b.n	800cafa <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800caf8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800cafa:	4b08      	ldr	r3, [pc, #32]	; (800cb1c <prvProcessReceivedCommands+0x1c0>)
 800cafc:	681b      	ldr	r3, [r3, #0]
 800cafe:	1d39      	adds	r1, r7, #4
 800cb00:	2200      	movs	r2, #0
 800cb02:	4618      	mov	r0, r3
 800cb04:	f7fe f8ea 	bl	800acdc <xQueueReceive>
 800cb08:	4603      	mov	r3, r0
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	f47f af2a 	bne.w	800c964 <prvProcessReceivedCommands+0x8>
	}
}
 800cb10:	bf00      	nop
 800cb12:	bf00      	nop
 800cb14:	3730      	adds	r7, #48	; 0x30
 800cb16:	46bd      	mov	sp, r7
 800cb18:	bd80      	pop	{r7, pc}
 800cb1a:	bf00      	nop
 800cb1c:	200010d4 	.word	0x200010d4

0800cb20 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800cb20:	b580      	push	{r7, lr}
 800cb22:	b088      	sub	sp, #32
 800cb24:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800cb26:	e048      	b.n	800cbba <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800cb28:	4b2d      	ldr	r3, [pc, #180]	; (800cbe0 <prvSwitchTimerLists+0xc0>)
 800cb2a:	681b      	ldr	r3, [r3, #0]
 800cb2c:	68db      	ldr	r3, [r3, #12]
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cb32:	4b2b      	ldr	r3, [pc, #172]	; (800cbe0 <prvSwitchTimerLists+0xc0>)
 800cb34:	681b      	ldr	r3, [r3, #0]
 800cb36:	68db      	ldr	r3, [r3, #12]
 800cb38:	68db      	ldr	r3, [r3, #12]
 800cb3a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cb3c:	68fb      	ldr	r3, [r7, #12]
 800cb3e:	3304      	adds	r3, #4
 800cb40:	4618      	mov	r0, r3
 800cb42:	f7fd fc87 	bl	800a454 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cb46:	68fb      	ldr	r3, [r7, #12]
 800cb48:	6a1b      	ldr	r3, [r3, #32]
 800cb4a:	68f8      	ldr	r0, [r7, #12]
 800cb4c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cb4e:	68fb      	ldr	r3, [r7, #12]
 800cb50:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cb54:	f003 0304 	and.w	r3, r3, #4
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	d02e      	beq.n	800cbba <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800cb5c:	68fb      	ldr	r3, [r7, #12]
 800cb5e:	699b      	ldr	r3, [r3, #24]
 800cb60:	693a      	ldr	r2, [r7, #16]
 800cb62:	4413      	add	r3, r2
 800cb64:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800cb66:	68ba      	ldr	r2, [r7, #8]
 800cb68:	693b      	ldr	r3, [r7, #16]
 800cb6a:	429a      	cmp	r2, r3
 800cb6c:	d90e      	bls.n	800cb8c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800cb6e:	68fb      	ldr	r3, [r7, #12]
 800cb70:	68ba      	ldr	r2, [r7, #8]
 800cb72:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800cb74:	68fb      	ldr	r3, [r7, #12]
 800cb76:	68fa      	ldr	r2, [r7, #12]
 800cb78:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800cb7a:	4b19      	ldr	r3, [pc, #100]	; (800cbe0 <prvSwitchTimerLists+0xc0>)
 800cb7c:	681a      	ldr	r2, [r3, #0]
 800cb7e:	68fb      	ldr	r3, [r7, #12]
 800cb80:	3304      	adds	r3, #4
 800cb82:	4619      	mov	r1, r3
 800cb84:	4610      	mov	r0, r2
 800cb86:	f7fd fc2c 	bl	800a3e2 <vListInsert>
 800cb8a:	e016      	b.n	800cbba <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800cb8c:	2300      	movs	r3, #0
 800cb8e:	9300      	str	r3, [sp, #0]
 800cb90:	2300      	movs	r3, #0
 800cb92:	693a      	ldr	r2, [r7, #16]
 800cb94:	2100      	movs	r1, #0
 800cb96:	68f8      	ldr	r0, [r7, #12]
 800cb98:	f7ff fd60 	bl	800c65c <xTimerGenericCommand>
 800cb9c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	d10a      	bne.n	800cbba <prvSwitchTimerLists+0x9a>
	__asm volatile
 800cba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cba8:	f383 8811 	msr	BASEPRI, r3
 800cbac:	f3bf 8f6f 	isb	sy
 800cbb0:	f3bf 8f4f 	dsb	sy
 800cbb4:	603b      	str	r3, [r7, #0]
}
 800cbb6:	bf00      	nop
 800cbb8:	e7fe      	b.n	800cbb8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800cbba:	4b09      	ldr	r3, [pc, #36]	; (800cbe0 <prvSwitchTimerLists+0xc0>)
 800cbbc:	681b      	ldr	r3, [r3, #0]
 800cbbe:	681b      	ldr	r3, [r3, #0]
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d1b1      	bne.n	800cb28 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800cbc4:	4b06      	ldr	r3, [pc, #24]	; (800cbe0 <prvSwitchTimerLists+0xc0>)
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800cbca:	4b06      	ldr	r3, [pc, #24]	; (800cbe4 <prvSwitchTimerLists+0xc4>)
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	4a04      	ldr	r2, [pc, #16]	; (800cbe0 <prvSwitchTimerLists+0xc0>)
 800cbd0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800cbd2:	4a04      	ldr	r2, [pc, #16]	; (800cbe4 <prvSwitchTimerLists+0xc4>)
 800cbd4:	697b      	ldr	r3, [r7, #20]
 800cbd6:	6013      	str	r3, [r2, #0]
}
 800cbd8:	bf00      	nop
 800cbda:	3718      	adds	r7, #24
 800cbdc:	46bd      	mov	sp, r7
 800cbde:	bd80      	pop	{r7, pc}
 800cbe0:	200010cc 	.word	0x200010cc
 800cbe4:	200010d0 	.word	0x200010d0

0800cbe8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800cbe8:	b580      	push	{r7, lr}
 800cbea:	b082      	sub	sp, #8
 800cbec:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800cbee:	f000 f969 	bl	800cec4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800cbf2:	4b15      	ldr	r3, [pc, #84]	; (800cc48 <prvCheckForValidListAndQueue+0x60>)
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	d120      	bne.n	800cc3c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800cbfa:	4814      	ldr	r0, [pc, #80]	; (800cc4c <prvCheckForValidListAndQueue+0x64>)
 800cbfc:	f7fd fba0 	bl	800a340 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800cc00:	4813      	ldr	r0, [pc, #76]	; (800cc50 <prvCheckForValidListAndQueue+0x68>)
 800cc02:	f7fd fb9d 	bl	800a340 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800cc06:	4b13      	ldr	r3, [pc, #76]	; (800cc54 <prvCheckForValidListAndQueue+0x6c>)
 800cc08:	4a10      	ldr	r2, [pc, #64]	; (800cc4c <prvCheckForValidListAndQueue+0x64>)
 800cc0a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800cc0c:	4b12      	ldr	r3, [pc, #72]	; (800cc58 <prvCheckForValidListAndQueue+0x70>)
 800cc0e:	4a10      	ldr	r2, [pc, #64]	; (800cc50 <prvCheckForValidListAndQueue+0x68>)
 800cc10:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800cc12:	2300      	movs	r3, #0
 800cc14:	9300      	str	r3, [sp, #0]
 800cc16:	4b11      	ldr	r3, [pc, #68]	; (800cc5c <prvCheckForValidListAndQueue+0x74>)
 800cc18:	4a11      	ldr	r2, [pc, #68]	; (800cc60 <prvCheckForValidListAndQueue+0x78>)
 800cc1a:	2110      	movs	r1, #16
 800cc1c:	200a      	movs	r0, #10
 800cc1e:	f7fd fcab 	bl	800a578 <xQueueGenericCreateStatic>
 800cc22:	4603      	mov	r3, r0
 800cc24:	4a08      	ldr	r2, [pc, #32]	; (800cc48 <prvCheckForValidListAndQueue+0x60>)
 800cc26:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800cc28:	4b07      	ldr	r3, [pc, #28]	; (800cc48 <prvCheckForValidListAndQueue+0x60>)
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	d005      	beq.n	800cc3c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800cc30:	4b05      	ldr	r3, [pc, #20]	; (800cc48 <prvCheckForValidListAndQueue+0x60>)
 800cc32:	681b      	ldr	r3, [r3, #0]
 800cc34:	490b      	ldr	r1, [pc, #44]	; (800cc64 <prvCheckForValidListAndQueue+0x7c>)
 800cc36:	4618      	mov	r0, r3
 800cc38:	f7fe fc08 	bl	800b44c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800cc3c:	f000 f972 	bl	800cf24 <vPortExitCritical>
}
 800cc40:	bf00      	nop
 800cc42:	46bd      	mov	sp, r7
 800cc44:	bd80      	pop	{r7, pc}
 800cc46:	bf00      	nop
 800cc48:	200010d4 	.word	0x200010d4
 800cc4c:	200010a4 	.word	0x200010a4
 800cc50:	200010b8 	.word	0x200010b8
 800cc54:	200010cc 	.word	0x200010cc
 800cc58:	200010d0 	.word	0x200010d0
 800cc5c:	20001180 	.word	0x20001180
 800cc60:	200010e0 	.word	0x200010e0
 800cc64:	0800d738 	.word	0x0800d738

0800cc68 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800cc68:	b480      	push	{r7}
 800cc6a:	b085      	sub	sp, #20
 800cc6c:	af00      	add	r7, sp, #0
 800cc6e:	60f8      	str	r0, [r7, #12]
 800cc70:	60b9      	str	r1, [r7, #8]
 800cc72:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800cc74:	68fb      	ldr	r3, [r7, #12]
 800cc76:	3b04      	subs	r3, #4
 800cc78:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800cc7a:	68fb      	ldr	r3, [r7, #12]
 800cc7c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800cc80:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cc82:	68fb      	ldr	r3, [r7, #12]
 800cc84:	3b04      	subs	r3, #4
 800cc86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800cc88:	68bb      	ldr	r3, [r7, #8]
 800cc8a:	f023 0201 	bic.w	r2, r3, #1
 800cc8e:	68fb      	ldr	r3, [r7, #12]
 800cc90:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cc92:	68fb      	ldr	r3, [r7, #12]
 800cc94:	3b04      	subs	r3, #4
 800cc96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800cc98:	4a0c      	ldr	r2, [pc, #48]	; (800cccc <pxPortInitialiseStack+0x64>)
 800cc9a:	68fb      	ldr	r3, [r7, #12]
 800cc9c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800cc9e:	68fb      	ldr	r3, [r7, #12]
 800cca0:	3b14      	subs	r3, #20
 800cca2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800cca4:	687a      	ldr	r2, [r7, #4]
 800cca6:	68fb      	ldr	r3, [r7, #12]
 800cca8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800ccaa:	68fb      	ldr	r3, [r7, #12]
 800ccac:	3b04      	subs	r3, #4
 800ccae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ccb0:	68fb      	ldr	r3, [r7, #12]
 800ccb2:	f06f 0202 	mvn.w	r2, #2
 800ccb6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ccb8:	68fb      	ldr	r3, [r7, #12]
 800ccba:	3b20      	subs	r3, #32
 800ccbc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ccbe:	68fb      	ldr	r3, [r7, #12]
}
 800ccc0:	4618      	mov	r0, r3
 800ccc2:	3714      	adds	r7, #20
 800ccc4:	46bd      	mov	sp, r7
 800ccc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccca:	4770      	bx	lr
 800cccc:	0800ccd1 	.word	0x0800ccd1

0800ccd0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ccd0:	b480      	push	{r7}
 800ccd2:	b085      	sub	sp, #20
 800ccd4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ccd6:	2300      	movs	r3, #0
 800ccd8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ccda:	4b12      	ldr	r3, [pc, #72]	; (800cd24 <prvTaskExitError+0x54>)
 800ccdc:	681b      	ldr	r3, [r3, #0]
 800ccde:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cce2:	d00a      	beq.n	800ccfa <prvTaskExitError+0x2a>
	__asm volatile
 800cce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cce8:	f383 8811 	msr	BASEPRI, r3
 800ccec:	f3bf 8f6f 	isb	sy
 800ccf0:	f3bf 8f4f 	dsb	sy
 800ccf4:	60fb      	str	r3, [r7, #12]
}
 800ccf6:	bf00      	nop
 800ccf8:	e7fe      	b.n	800ccf8 <prvTaskExitError+0x28>
	__asm volatile
 800ccfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccfe:	f383 8811 	msr	BASEPRI, r3
 800cd02:	f3bf 8f6f 	isb	sy
 800cd06:	f3bf 8f4f 	dsb	sy
 800cd0a:	60bb      	str	r3, [r7, #8]
}
 800cd0c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800cd0e:	bf00      	nop
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	d0fc      	beq.n	800cd10 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800cd16:	bf00      	nop
 800cd18:	bf00      	nop
 800cd1a:	3714      	adds	r7, #20
 800cd1c:	46bd      	mov	sp, r7
 800cd1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd22:	4770      	bx	lr
 800cd24:	2000000c 	.word	0x2000000c
	...

0800cd30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800cd30:	4b07      	ldr	r3, [pc, #28]	; (800cd50 <pxCurrentTCBConst2>)
 800cd32:	6819      	ldr	r1, [r3, #0]
 800cd34:	6808      	ldr	r0, [r1, #0]
 800cd36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd3a:	f380 8809 	msr	PSP, r0
 800cd3e:	f3bf 8f6f 	isb	sy
 800cd42:	f04f 0000 	mov.w	r0, #0
 800cd46:	f380 8811 	msr	BASEPRI, r0
 800cd4a:	4770      	bx	lr
 800cd4c:	f3af 8000 	nop.w

0800cd50 <pxCurrentTCBConst2>:
 800cd50:	20000ba4 	.word	0x20000ba4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800cd54:	bf00      	nop
 800cd56:	bf00      	nop

0800cd58 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800cd58:	4808      	ldr	r0, [pc, #32]	; (800cd7c <prvPortStartFirstTask+0x24>)
 800cd5a:	6800      	ldr	r0, [r0, #0]
 800cd5c:	6800      	ldr	r0, [r0, #0]
 800cd5e:	f380 8808 	msr	MSP, r0
 800cd62:	f04f 0000 	mov.w	r0, #0
 800cd66:	f380 8814 	msr	CONTROL, r0
 800cd6a:	b662      	cpsie	i
 800cd6c:	b661      	cpsie	f
 800cd6e:	f3bf 8f4f 	dsb	sy
 800cd72:	f3bf 8f6f 	isb	sy
 800cd76:	df00      	svc	0
 800cd78:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800cd7a:	bf00      	nop
 800cd7c:	e000ed08 	.word	0xe000ed08

0800cd80 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800cd80:	b580      	push	{r7, lr}
 800cd82:	b086      	sub	sp, #24
 800cd84:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800cd86:	4b46      	ldr	r3, [pc, #280]	; (800cea0 <xPortStartScheduler+0x120>)
 800cd88:	681b      	ldr	r3, [r3, #0]
 800cd8a:	4a46      	ldr	r2, [pc, #280]	; (800cea4 <xPortStartScheduler+0x124>)
 800cd8c:	4293      	cmp	r3, r2
 800cd8e:	d10a      	bne.n	800cda6 <xPortStartScheduler+0x26>
	__asm volatile
 800cd90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd94:	f383 8811 	msr	BASEPRI, r3
 800cd98:	f3bf 8f6f 	isb	sy
 800cd9c:	f3bf 8f4f 	dsb	sy
 800cda0:	613b      	str	r3, [r7, #16]
}
 800cda2:	bf00      	nop
 800cda4:	e7fe      	b.n	800cda4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800cda6:	4b3e      	ldr	r3, [pc, #248]	; (800cea0 <xPortStartScheduler+0x120>)
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	4a3f      	ldr	r2, [pc, #252]	; (800cea8 <xPortStartScheduler+0x128>)
 800cdac:	4293      	cmp	r3, r2
 800cdae:	d10a      	bne.n	800cdc6 <xPortStartScheduler+0x46>
	__asm volatile
 800cdb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdb4:	f383 8811 	msr	BASEPRI, r3
 800cdb8:	f3bf 8f6f 	isb	sy
 800cdbc:	f3bf 8f4f 	dsb	sy
 800cdc0:	60fb      	str	r3, [r7, #12]
}
 800cdc2:	bf00      	nop
 800cdc4:	e7fe      	b.n	800cdc4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800cdc6:	4b39      	ldr	r3, [pc, #228]	; (800ceac <xPortStartScheduler+0x12c>)
 800cdc8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800cdca:	697b      	ldr	r3, [r7, #20]
 800cdcc:	781b      	ldrb	r3, [r3, #0]
 800cdce:	b2db      	uxtb	r3, r3
 800cdd0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800cdd2:	697b      	ldr	r3, [r7, #20]
 800cdd4:	22ff      	movs	r2, #255	; 0xff
 800cdd6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800cdd8:	697b      	ldr	r3, [r7, #20]
 800cdda:	781b      	ldrb	r3, [r3, #0]
 800cddc:	b2db      	uxtb	r3, r3
 800cdde:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800cde0:	78fb      	ldrb	r3, [r7, #3]
 800cde2:	b2db      	uxtb	r3, r3
 800cde4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800cde8:	b2da      	uxtb	r2, r3
 800cdea:	4b31      	ldr	r3, [pc, #196]	; (800ceb0 <xPortStartScheduler+0x130>)
 800cdec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800cdee:	4b31      	ldr	r3, [pc, #196]	; (800ceb4 <xPortStartScheduler+0x134>)
 800cdf0:	2207      	movs	r2, #7
 800cdf2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cdf4:	e009      	b.n	800ce0a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800cdf6:	4b2f      	ldr	r3, [pc, #188]	; (800ceb4 <xPortStartScheduler+0x134>)
 800cdf8:	681b      	ldr	r3, [r3, #0]
 800cdfa:	3b01      	subs	r3, #1
 800cdfc:	4a2d      	ldr	r2, [pc, #180]	; (800ceb4 <xPortStartScheduler+0x134>)
 800cdfe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ce00:	78fb      	ldrb	r3, [r7, #3]
 800ce02:	b2db      	uxtb	r3, r3
 800ce04:	005b      	lsls	r3, r3, #1
 800ce06:	b2db      	uxtb	r3, r3
 800ce08:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ce0a:	78fb      	ldrb	r3, [r7, #3]
 800ce0c:	b2db      	uxtb	r3, r3
 800ce0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ce12:	2b80      	cmp	r3, #128	; 0x80
 800ce14:	d0ef      	beq.n	800cdf6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ce16:	4b27      	ldr	r3, [pc, #156]	; (800ceb4 <xPortStartScheduler+0x134>)
 800ce18:	681b      	ldr	r3, [r3, #0]
 800ce1a:	f1c3 0307 	rsb	r3, r3, #7
 800ce1e:	2b04      	cmp	r3, #4
 800ce20:	d00a      	beq.n	800ce38 <xPortStartScheduler+0xb8>
	__asm volatile
 800ce22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce26:	f383 8811 	msr	BASEPRI, r3
 800ce2a:	f3bf 8f6f 	isb	sy
 800ce2e:	f3bf 8f4f 	dsb	sy
 800ce32:	60bb      	str	r3, [r7, #8]
}
 800ce34:	bf00      	nop
 800ce36:	e7fe      	b.n	800ce36 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ce38:	4b1e      	ldr	r3, [pc, #120]	; (800ceb4 <xPortStartScheduler+0x134>)
 800ce3a:	681b      	ldr	r3, [r3, #0]
 800ce3c:	021b      	lsls	r3, r3, #8
 800ce3e:	4a1d      	ldr	r2, [pc, #116]	; (800ceb4 <xPortStartScheduler+0x134>)
 800ce40:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ce42:	4b1c      	ldr	r3, [pc, #112]	; (800ceb4 <xPortStartScheduler+0x134>)
 800ce44:	681b      	ldr	r3, [r3, #0]
 800ce46:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ce4a:	4a1a      	ldr	r2, [pc, #104]	; (800ceb4 <xPortStartScheduler+0x134>)
 800ce4c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	b2da      	uxtb	r2, r3
 800ce52:	697b      	ldr	r3, [r7, #20]
 800ce54:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ce56:	4b18      	ldr	r3, [pc, #96]	; (800ceb8 <xPortStartScheduler+0x138>)
 800ce58:	681b      	ldr	r3, [r3, #0]
 800ce5a:	4a17      	ldr	r2, [pc, #92]	; (800ceb8 <xPortStartScheduler+0x138>)
 800ce5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ce60:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ce62:	4b15      	ldr	r3, [pc, #84]	; (800ceb8 <xPortStartScheduler+0x138>)
 800ce64:	681b      	ldr	r3, [r3, #0]
 800ce66:	4a14      	ldr	r2, [pc, #80]	; (800ceb8 <xPortStartScheduler+0x138>)
 800ce68:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800ce6c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ce6e:	f000 f8dd 	bl	800d02c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ce72:	4b12      	ldr	r3, [pc, #72]	; (800cebc <xPortStartScheduler+0x13c>)
 800ce74:	2200      	movs	r2, #0
 800ce76:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ce78:	f000 f8fc 	bl	800d074 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ce7c:	4b10      	ldr	r3, [pc, #64]	; (800cec0 <xPortStartScheduler+0x140>)
 800ce7e:	681b      	ldr	r3, [r3, #0]
 800ce80:	4a0f      	ldr	r2, [pc, #60]	; (800cec0 <xPortStartScheduler+0x140>)
 800ce82:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800ce86:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ce88:	f7ff ff66 	bl	800cd58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ce8c:	f7fe ff4a 	bl	800bd24 <vTaskSwitchContext>
	prvTaskExitError();
 800ce90:	f7ff ff1e 	bl	800ccd0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ce94:	2300      	movs	r3, #0
}
 800ce96:	4618      	mov	r0, r3
 800ce98:	3718      	adds	r7, #24
 800ce9a:	46bd      	mov	sp, r7
 800ce9c:	bd80      	pop	{r7, pc}
 800ce9e:	bf00      	nop
 800cea0:	e000ed00 	.word	0xe000ed00
 800cea4:	410fc271 	.word	0x410fc271
 800cea8:	410fc270 	.word	0x410fc270
 800ceac:	e000e400 	.word	0xe000e400
 800ceb0:	200011d0 	.word	0x200011d0
 800ceb4:	200011d4 	.word	0x200011d4
 800ceb8:	e000ed20 	.word	0xe000ed20
 800cebc:	2000000c 	.word	0x2000000c
 800cec0:	e000ef34 	.word	0xe000ef34

0800cec4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800cec4:	b480      	push	{r7}
 800cec6:	b083      	sub	sp, #12
 800cec8:	af00      	add	r7, sp, #0
	__asm volatile
 800ceca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cece:	f383 8811 	msr	BASEPRI, r3
 800ced2:	f3bf 8f6f 	isb	sy
 800ced6:	f3bf 8f4f 	dsb	sy
 800ceda:	607b      	str	r3, [r7, #4]
}
 800cedc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800cede:	4b0f      	ldr	r3, [pc, #60]	; (800cf1c <vPortEnterCritical+0x58>)
 800cee0:	681b      	ldr	r3, [r3, #0]
 800cee2:	3301      	adds	r3, #1
 800cee4:	4a0d      	ldr	r2, [pc, #52]	; (800cf1c <vPortEnterCritical+0x58>)
 800cee6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800cee8:	4b0c      	ldr	r3, [pc, #48]	; (800cf1c <vPortEnterCritical+0x58>)
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	2b01      	cmp	r3, #1
 800ceee:	d10f      	bne.n	800cf10 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800cef0:	4b0b      	ldr	r3, [pc, #44]	; (800cf20 <vPortEnterCritical+0x5c>)
 800cef2:	681b      	ldr	r3, [r3, #0]
 800cef4:	b2db      	uxtb	r3, r3
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	d00a      	beq.n	800cf10 <vPortEnterCritical+0x4c>
	__asm volatile
 800cefa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cefe:	f383 8811 	msr	BASEPRI, r3
 800cf02:	f3bf 8f6f 	isb	sy
 800cf06:	f3bf 8f4f 	dsb	sy
 800cf0a:	603b      	str	r3, [r7, #0]
}
 800cf0c:	bf00      	nop
 800cf0e:	e7fe      	b.n	800cf0e <vPortEnterCritical+0x4a>
	}
}
 800cf10:	bf00      	nop
 800cf12:	370c      	adds	r7, #12
 800cf14:	46bd      	mov	sp, r7
 800cf16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf1a:	4770      	bx	lr
 800cf1c:	2000000c 	.word	0x2000000c
 800cf20:	e000ed04 	.word	0xe000ed04

0800cf24 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800cf24:	b480      	push	{r7}
 800cf26:	b083      	sub	sp, #12
 800cf28:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800cf2a:	4b12      	ldr	r3, [pc, #72]	; (800cf74 <vPortExitCritical+0x50>)
 800cf2c:	681b      	ldr	r3, [r3, #0]
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	d10a      	bne.n	800cf48 <vPortExitCritical+0x24>
	__asm volatile
 800cf32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf36:	f383 8811 	msr	BASEPRI, r3
 800cf3a:	f3bf 8f6f 	isb	sy
 800cf3e:	f3bf 8f4f 	dsb	sy
 800cf42:	607b      	str	r3, [r7, #4]
}
 800cf44:	bf00      	nop
 800cf46:	e7fe      	b.n	800cf46 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800cf48:	4b0a      	ldr	r3, [pc, #40]	; (800cf74 <vPortExitCritical+0x50>)
 800cf4a:	681b      	ldr	r3, [r3, #0]
 800cf4c:	3b01      	subs	r3, #1
 800cf4e:	4a09      	ldr	r2, [pc, #36]	; (800cf74 <vPortExitCritical+0x50>)
 800cf50:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800cf52:	4b08      	ldr	r3, [pc, #32]	; (800cf74 <vPortExitCritical+0x50>)
 800cf54:	681b      	ldr	r3, [r3, #0]
 800cf56:	2b00      	cmp	r3, #0
 800cf58:	d105      	bne.n	800cf66 <vPortExitCritical+0x42>
 800cf5a:	2300      	movs	r3, #0
 800cf5c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cf5e:	683b      	ldr	r3, [r7, #0]
 800cf60:	f383 8811 	msr	BASEPRI, r3
}
 800cf64:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800cf66:	bf00      	nop
 800cf68:	370c      	adds	r7, #12
 800cf6a:	46bd      	mov	sp, r7
 800cf6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf70:	4770      	bx	lr
 800cf72:	bf00      	nop
 800cf74:	2000000c 	.word	0x2000000c
	...

0800cf80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800cf80:	f3ef 8009 	mrs	r0, PSP
 800cf84:	f3bf 8f6f 	isb	sy
 800cf88:	4b15      	ldr	r3, [pc, #84]	; (800cfe0 <pxCurrentTCBConst>)
 800cf8a:	681a      	ldr	r2, [r3, #0]
 800cf8c:	f01e 0f10 	tst.w	lr, #16
 800cf90:	bf08      	it	eq
 800cf92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800cf96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf9a:	6010      	str	r0, [r2, #0]
 800cf9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800cfa0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800cfa4:	f380 8811 	msr	BASEPRI, r0
 800cfa8:	f3bf 8f4f 	dsb	sy
 800cfac:	f3bf 8f6f 	isb	sy
 800cfb0:	f7fe feb8 	bl	800bd24 <vTaskSwitchContext>
 800cfb4:	f04f 0000 	mov.w	r0, #0
 800cfb8:	f380 8811 	msr	BASEPRI, r0
 800cfbc:	bc09      	pop	{r0, r3}
 800cfbe:	6819      	ldr	r1, [r3, #0]
 800cfc0:	6808      	ldr	r0, [r1, #0]
 800cfc2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cfc6:	f01e 0f10 	tst.w	lr, #16
 800cfca:	bf08      	it	eq
 800cfcc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800cfd0:	f380 8809 	msr	PSP, r0
 800cfd4:	f3bf 8f6f 	isb	sy
 800cfd8:	4770      	bx	lr
 800cfda:	bf00      	nop
 800cfdc:	f3af 8000 	nop.w

0800cfe0 <pxCurrentTCBConst>:
 800cfe0:	20000ba4 	.word	0x20000ba4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800cfe4:	bf00      	nop
 800cfe6:	bf00      	nop

0800cfe8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800cfe8:	b580      	push	{r7, lr}
 800cfea:	b082      	sub	sp, #8
 800cfec:	af00      	add	r7, sp, #0
	__asm volatile
 800cfee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cff2:	f383 8811 	msr	BASEPRI, r3
 800cff6:	f3bf 8f6f 	isb	sy
 800cffa:	f3bf 8f4f 	dsb	sy
 800cffe:	607b      	str	r3, [r7, #4]
}
 800d000:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d002:	f7fe fdd5 	bl	800bbb0 <xTaskIncrementTick>
 800d006:	4603      	mov	r3, r0
 800d008:	2b00      	cmp	r3, #0
 800d00a:	d003      	beq.n	800d014 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d00c:	4b06      	ldr	r3, [pc, #24]	; (800d028 <xPortSysTickHandler+0x40>)
 800d00e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d012:	601a      	str	r2, [r3, #0]
 800d014:	2300      	movs	r3, #0
 800d016:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d018:	683b      	ldr	r3, [r7, #0]
 800d01a:	f383 8811 	msr	BASEPRI, r3
}
 800d01e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d020:	bf00      	nop
 800d022:	3708      	adds	r7, #8
 800d024:	46bd      	mov	sp, r7
 800d026:	bd80      	pop	{r7, pc}
 800d028:	e000ed04 	.word	0xe000ed04

0800d02c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d02c:	b480      	push	{r7}
 800d02e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d030:	4b0b      	ldr	r3, [pc, #44]	; (800d060 <vPortSetupTimerInterrupt+0x34>)
 800d032:	2200      	movs	r2, #0
 800d034:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d036:	4b0b      	ldr	r3, [pc, #44]	; (800d064 <vPortSetupTimerInterrupt+0x38>)
 800d038:	2200      	movs	r2, #0
 800d03a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d03c:	4b0a      	ldr	r3, [pc, #40]	; (800d068 <vPortSetupTimerInterrupt+0x3c>)
 800d03e:	681b      	ldr	r3, [r3, #0]
 800d040:	4a0a      	ldr	r2, [pc, #40]	; (800d06c <vPortSetupTimerInterrupt+0x40>)
 800d042:	fba2 2303 	umull	r2, r3, r2, r3
 800d046:	099b      	lsrs	r3, r3, #6
 800d048:	4a09      	ldr	r2, [pc, #36]	; (800d070 <vPortSetupTimerInterrupt+0x44>)
 800d04a:	3b01      	subs	r3, #1
 800d04c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d04e:	4b04      	ldr	r3, [pc, #16]	; (800d060 <vPortSetupTimerInterrupt+0x34>)
 800d050:	2207      	movs	r2, #7
 800d052:	601a      	str	r2, [r3, #0]
}
 800d054:	bf00      	nop
 800d056:	46bd      	mov	sp, r7
 800d058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d05c:	4770      	bx	lr
 800d05e:	bf00      	nop
 800d060:	e000e010 	.word	0xe000e010
 800d064:	e000e018 	.word	0xe000e018
 800d068:	20000000 	.word	0x20000000
 800d06c:	10624dd3 	.word	0x10624dd3
 800d070:	e000e014 	.word	0xe000e014

0800d074 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d074:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800d084 <vPortEnableVFP+0x10>
 800d078:	6801      	ldr	r1, [r0, #0]
 800d07a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800d07e:	6001      	str	r1, [r0, #0]
 800d080:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d082:	bf00      	nop
 800d084:	e000ed88 	.word	0xe000ed88

0800d088 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d088:	b480      	push	{r7}
 800d08a:	b085      	sub	sp, #20
 800d08c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d08e:	f3ef 8305 	mrs	r3, IPSR
 800d092:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d094:	68fb      	ldr	r3, [r7, #12]
 800d096:	2b0f      	cmp	r3, #15
 800d098:	d914      	bls.n	800d0c4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d09a:	4a17      	ldr	r2, [pc, #92]	; (800d0f8 <vPortValidateInterruptPriority+0x70>)
 800d09c:	68fb      	ldr	r3, [r7, #12]
 800d09e:	4413      	add	r3, r2
 800d0a0:	781b      	ldrb	r3, [r3, #0]
 800d0a2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d0a4:	4b15      	ldr	r3, [pc, #84]	; (800d0fc <vPortValidateInterruptPriority+0x74>)
 800d0a6:	781b      	ldrb	r3, [r3, #0]
 800d0a8:	7afa      	ldrb	r2, [r7, #11]
 800d0aa:	429a      	cmp	r2, r3
 800d0ac:	d20a      	bcs.n	800d0c4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800d0ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0b2:	f383 8811 	msr	BASEPRI, r3
 800d0b6:	f3bf 8f6f 	isb	sy
 800d0ba:	f3bf 8f4f 	dsb	sy
 800d0be:	607b      	str	r3, [r7, #4]
}
 800d0c0:	bf00      	nop
 800d0c2:	e7fe      	b.n	800d0c2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d0c4:	4b0e      	ldr	r3, [pc, #56]	; (800d100 <vPortValidateInterruptPriority+0x78>)
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800d0cc:	4b0d      	ldr	r3, [pc, #52]	; (800d104 <vPortValidateInterruptPriority+0x7c>)
 800d0ce:	681b      	ldr	r3, [r3, #0]
 800d0d0:	429a      	cmp	r2, r3
 800d0d2:	d90a      	bls.n	800d0ea <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800d0d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0d8:	f383 8811 	msr	BASEPRI, r3
 800d0dc:	f3bf 8f6f 	isb	sy
 800d0e0:	f3bf 8f4f 	dsb	sy
 800d0e4:	603b      	str	r3, [r7, #0]
}
 800d0e6:	bf00      	nop
 800d0e8:	e7fe      	b.n	800d0e8 <vPortValidateInterruptPriority+0x60>
	}
 800d0ea:	bf00      	nop
 800d0ec:	3714      	adds	r7, #20
 800d0ee:	46bd      	mov	sp, r7
 800d0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0f4:	4770      	bx	lr
 800d0f6:	bf00      	nop
 800d0f8:	e000e3f0 	.word	0xe000e3f0
 800d0fc:	200011d0 	.word	0x200011d0
 800d100:	e000ed0c 	.word	0xe000ed0c
 800d104:	200011d4 	.word	0x200011d4

0800d108 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d108:	b580      	push	{r7, lr}
 800d10a:	b08a      	sub	sp, #40	; 0x28
 800d10c:	af00      	add	r7, sp, #0
 800d10e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d110:	2300      	movs	r3, #0
 800d112:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d114:	f7fe fc7e 	bl	800ba14 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d118:	4b5b      	ldr	r3, [pc, #364]	; (800d288 <pvPortMalloc+0x180>)
 800d11a:	681b      	ldr	r3, [r3, #0]
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d101      	bne.n	800d124 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d120:	f000 f920 	bl	800d364 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d124:	4b59      	ldr	r3, [pc, #356]	; (800d28c <pvPortMalloc+0x184>)
 800d126:	681a      	ldr	r2, [r3, #0]
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	4013      	ands	r3, r2
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	f040 8093 	bne.w	800d258 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	2b00      	cmp	r3, #0
 800d136:	d01d      	beq.n	800d174 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800d138:	2208      	movs	r2, #8
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	4413      	add	r3, r2
 800d13e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	f003 0307 	and.w	r3, r3, #7
 800d146:	2b00      	cmp	r3, #0
 800d148:	d014      	beq.n	800d174 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	f023 0307 	bic.w	r3, r3, #7
 800d150:	3308      	adds	r3, #8
 800d152:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	f003 0307 	and.w	r3, r3, #7
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	d00a      	beq.n	800d174 <pvPortMalloc+0x6c>
	__asm volatile
 800d15e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d162:	f383 8811 	msr	BASEPRI, r3
 800d166:	f3bf 8f6f 	isb	sy
 800d16a:	f3bf 8f4f 	dsb	sy
 800d16e:	617b      	str	r3, [r7, #20]
}
 800d170:	bf00      	nop
 800d172:	e7fe      	b.n	800d172 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	2b00      	cmp	r3, #0
 800d178:	d06e      	beq.n	800d258 <pvPortMalloc+0x150>
 800d17a:	4b45      	ldr	r3, [pc, #276]	; (800d290 <pvPortMalloc+0x188>)
 800d17c:	681b      	ldr	r3, [r3, #0]
 800d17e:	687a      	ldr	r2, [r7, #4]
 800d180:	429a      	cmp	r2, r3
 800d182:	d869      	bhi.n	800d258 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d184:	4b43      	ldr	r3, [pc, #268]	; (800d294 <pvPortMalloc+0x18c>)
 800d186:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d188:	4b42      	ldr	r3, [pc, #264]	; (800d294 <pvPortMalloc+0x18c>)
 800d18a:	681b      	ldr	r3, [r3, #0]
 800d18c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d18e:	e004      	b.n	800d19a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800d190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d192:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d19a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d19c:	685b      	ldr	r3, [r3, #4]
 800d19e:	687a      	ldr	r2, [r7, #4]
 800d1a0:	429a      	cmp	r2, r3
 800d1a2:	d903      	bls.n	800d1ac <pvPortMalloc+0xa4>
 800d1a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1a6:	681b      	ldr	r3, [r3, #0]
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	d1f1      	bne.n	800d190 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d1ac:	4b36      	ldr	r3, [pc, #216]	; (800d288 <pvPortMalloc+0x180>)
 800d1ae:	681b      	ldr	r3, [r3, #0]
 800d1b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d1b2:	429a      	cmp	r2, r3
 800d1b4:	d050      	beq.n	800d258 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d1b6:	6a3b      	ldr	r3, [r7, #32]
 800d1b8:	681b      	ldr	r3, [r3, #0]
 800d1ba:	2208      	movs	r2, #8
 800d1bc:	4413      	add	r3, r2
 800d1be:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d1c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1c2:	681a      	ldr	r2, [r3, #0]
 800d1c4:	6a3b      	ldr	r3, [r7, #32]
 800d1c6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d1c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1ca:	685a      	ldr	r2, [r3, #4]
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	1ad2      	subs	r2, r2, r3
 800d1d0:	2308      	movs	r3, #8
 800d1d2:	005b      	lsls	r3, r3, #1
 800d1d4:	429a      	cmp	r2, r3
 800d1d6:	d91f      	bls.n	800d218 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d1d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	4413      	add	r3, r2
 800d1de:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d1e0:	69bb      	ldr	r3, [r7, #24]
 800d1e2:	f003 0307 	and.w	r3, r3, #7
 800d1e6:	2b00      	cmp	r3, #0
 800d1e8:	d00a      	beq.n	800d200 <pvPortMalloc+0xf8>
	__asm volatile
 800d1ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1ee:	f383 8811 	msr	BASEPRI, r3
 800d1f2:	f3bf 8f6f 	isb	sy
 800d1f6:	f3bf 8f4f 	dsb	sy
 800d1fa:	613b      	str	r3, [r7, #16]
}
 800d1fc:	bf00      	nop
 800d1fe:	e7fe      	b.n	800d1fe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d202:	685a      	ldr	r2, [r3, #4]
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	1ad2      	subs	r2, r2, r3
 800d208:	69bb      	ldr	r3, [r7, #24]
 800d20a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d20c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d20e:	687a      	ldr	r2, [r7, #4]
 800d210:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d212:	69b8      	ldr	r0, [r7, #24]
 800d214:	f000 f908 	bl	800d428 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d218:	4b1d      	ldr	r3, [pc, #116]	; (800d290 <pvPortMalloc+0x188>)
 800d21a:	681a      	ldr	r2, [r3, #0]
 800d21c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d21e:	685b      	ldr	r3, [r3, #4]
 800d220:	1ad3      	subs	r3, r2, r3
 800d222:	4a1b      	ldr	r2, [pc, #108]	; (800d290 <pvPortMalloc+0x188>)
 800d224:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d226:	4b1a      	ldr	r3, [pc, #104]	; (800d290 <pvPortMalloc+0x188>)
 800d228:	681a      	ldr	r2, [r3, #0]
 800d22a:	4b1b      	ldr	r3, [pc, #108]	; (800d298 <pvPortMalloc+0x190>)
 800d22c:	681b      	ldr	r3, [r3, #0]
 800d22e:	429a      	cmp	r2, r3
 800d230:	d203      	bcs.n	800d23a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d232:	4b17      	ldr	r3, [pc, #92]	; (800d290 <pvPortMalloc+0x188>)
 800d234:	681b      	ldr	r3, [r3, #0]
 800d236:	4a18      	ldr	r2, [pc, #96]	; (800d298 <pvPortMalloc+0x190>)
 800d238:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d23a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d23c:	685a      	ldr	r2, [r3, #4]
 800d23e:	4b13      	ldr	r3, [pc, #76]	; (800d28c <pvPortMalloc+0x184>)
 800d240:	681b      	ldr	r3, [r3, #0]
 800d242:	431a      	orrs	r2, r3
 800d244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d246:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d24a:	2200      	movs	r2, #0
 800d24c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800d24e:	4b13      	ldr	r3, [pc, #76]	; (800d29c <pvPortMalloc+0x194>)
 800d250:	681b      	ldr	r3, [r3, #0]
 800d252:	3301      	adds	r3, #1
 800d254:	4a11      	ldr	r2, [pc, #68]	; (800d29c <pvPortMalloc+0x194>)
 800d256:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d258:	f7fe fbea 	bl	800ba30 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d25c:	69fb      	ldr	r3, [r7, #28]
 800d25e:	f003 0307 	and.w	r3, r3, #7
 800d262:	2b00      	cmp	r3, #0
 800d264:	d00a      	beq.n	800d27c <pvPortMalloc+0x174>
	__asm volatile
 800d266:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d26a:	f383 8811 	msr	BASEPRI, r3
 800d26e:	f3bf 8f6f 	isb	sy
 800d272:	f3bf 8f4f 	dsb	sy
 800d276:	60fb      	str	r3, [r7, #12]
}
 800d278:	bf00      	nop
 800d27a:	e7fe      	b.n	800d27a <pvPortMalloc+0x172>
	return pvReturn;
 800d27c:	69fb      	ldr	r3, [r7, #28]
}
 800d27e:	4618      	mov	r0, r3
 800d280:	3728      	adds	r7, #40	; 0x28
 800d282:	46bd      	mov	sp, r7
 800d284:	bd80      	pop	{r7, pc}
 800d286:	bf00      	nop
 800d288:	20001d98 	.word	0x20001d98
 800d28c:	20001dac 	.word	0x20001dac
 800d290:	20001d9c 	.word	0x20001d9c
 800d294:	20001d90 	.word	0x20001d90
 800d298:	20001da0 	.word	0x20001da0
 800d29c:	20001da4 	.word	0x20001da4

0800d2a0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d2a0:	b580      	push	{r7, lr}
 800d2a2:	b086      	sub	sp, #24
 800d2a4:	af00      	add	r7, sp, #0
 800d2a6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	d04d      	beq.n	800d34e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d2b2:	2308      	movs	r3, #8
 800d2b4:	425b      	negs	r3, r3
 800d2b6:	697a      	ldr	r2, [r7, #20]
 800d2b8:	4413      	add	r3, r2
 800d2ba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d2bc:	697b      	ldr	r3, [r7, #20]
 800d2be:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d2c0:	693b      	ldr	r3, [r7, #16]
 800d2c2:	685a      	ldr	r2, [r3, #4]
 800d2c4:	4b24      	ldr	r3, [pc, #144]	; (800d358 <vPortFree+0xb8>)
 800d2c6:	681b      	ldr	r3, [r3, #0]
 800d2c8:	4013      	ands	r3, r2
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	d10a      	bne.n	800d2e4 <vPortFree+0x44>
	__asm volatile
 800d2ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2d2:	f383 8811 	msr	BASEPRI, r3
 800d2d6:	f3bf 8f6f 	isb	sy
 800d2da:	f3bf 8f4f 	dsb	sy
 800d2de:	60fb      	str	r3, [r7, #12]
}
 800d2e0:	bf00      	nop
 800d2e2:	e7fe      	b.n	800d2e2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d2e4:	693b      	ldr	r3, [r7, #16]
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	d00a      	beq.n	800d302 <vPortFree+0x62>
	__asm volatile
 800d2ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2f0:	f383 8811 	msr	BASEPRI, r3
 800d2f4:	f3bf 8f6f 	isb	sy
 800d2f8:	f3bf 8f4f 	dsb	sy
 800d2fc:	60bb      	str	r3, [r7, #8]
}
 800d2fe:	bf00      	nop
 800d300:	e7fe      	b.n	800d300 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d302:	693b      	ldr	r3, [r7, #16]
 800d304:	685a      	ldr	r2, [r3, #4]
 800d306:	4b14      	ldr	r3, [pc, #80]	; (800d358 <vPortFree+0xb8>)
 800d308:	681b      	ldr	r3, [r3, #0]
 800d30a:	4013      	ands	r3, r2
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	d01e      	beq.n	800d34e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d310:	693b      	ldr	r3, [r7, #16]
 800d312:	681b      	ldr	r3, [r3, #0]
 800d314:	2b00      	cmp	r3, #0
 800d316:	d11a      	bne.n	800d34e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d318:	693b      	ldr	r3, [r7, #16]
 800d31a:	685a      	ldr	r2, [r3, #4]
 800d31c:	4b0e      	ldr	r3, [pc, #56]	; (800d358 <vPortFree+0xb8>)
 800d31e:	681b      	ldr	r3, [r3, #0]
 800d320:	43db      	mvns	r3, r3
 800d322:	401a      	ands	r2, r3
 800d324:	693b      	ldr	r3, [r7, #16]
 800d326:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d328:	f7fe fb74 	bl	800ba14 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d32c:	693b      	ldr	r3, [r7, #16]
 800d32e:	685a      	ldr	r2, [r3, #4]
 800d330:	4b0a      	ldr	r3, [pc, #40]	; (800d35c <vPortFree+0xbc>)
 800d332:	681b      	ldr	r3, [r3, #0]
 800d334:	4413      	add	r3, r2
 800d336:	4a09      	ldr	r2, [pc, #36]	; (800d35c <vPortFree+0xbc>)
 800d338:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d33a:	6938      	ldr	r0, [r7, #16]
 800d33c:	f000 f874 	bl	800d428 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800d340:	4b07      	ldr	r3, [pc, #28]	; (800d360 <vPortFree+0xc0>)
 800d342:	681b      	ldr	r3, [r3, #0]
 800d344:	3301      	adds	r3, #1
 800d346:	4a06      	ldr	r2, [pc, #24]	; (800d360 <vPortFree+0xc0>)
 800d348:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800d34a:	f7fe fb71 	bl	800ba30 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d34e:	bf00      	nop
 800d350:	3718      	adds	r7, #24
 800d352:	46bd      	mov	sp, r7
 800d354:	bd80      	pop	{r7, pc}
 800d356:	bf00      	nop
 800d358:	20001dac 	.word	0x20001dac
 800d35c:	20001d9c 	.word	0x20001d9c
 800d360:	20001da8 	.word	0x20001da8

0800d364 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d364:	b480      	push	{r7}
 800d366:	b085      	sub	sp, #20
 800d368:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d36a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800d36e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d370:	4b27      	ldr	r3, [pc, #156]	; (800d410 <prvHeapInit+0xac>)
 800d372:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d374:	68fb      	ldr	r3, [r7, #12]
 800d376:	f003 0307 	and.w	r3, r3, #7
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	d00c      	beq.n	800d398 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d37e:	68fb      	ldr	r3, [r7, #12]
 800d380:	3307      	adds	r3, #7
 800d382:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d384:	68fb      	ldr	r3, [r7, #12]
 800d386:	f023 0307 	bic.w	r3, r3, #7
 800d38a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d38c:	68ba      	ldr	r2, [r7, #8]
 800d38e:	68fb      	ldr	r3, [r7, #12]
 800d390:	1ad3      	subs	r3, r2, r3
 800d392:	4a1f      	ldr	r2, [pc, #124]	; (800d410 <prvHeapInit+0xac>)
 800d394:	4413      	add	r3, r2
 800d396:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d398:	68fb      	ldr	r3, [r7, #12]
 800d39a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d39c:	4a1d      	ldr	r2, [pc, #116]	; (800d414 <prvHeapInit+0xb0>)
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d3a2:	4b1c      	ldr	r3, [pc, #112]	; (800d414 <prvHeapInit+0xb0>)
 800d3a4:	2200      	movs	r2, #0
 800d3a6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	68ba      	ldr	r2, [r7, #8]
 800d3ac:	4413      	add	r3, r2
 800d3ae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d3b0:	2208      	movs	r2, #8
 800d3b2:	68fb      	ldr	r3, [r7, #12]
 800d3b4:	1a9b      	subs	r3, r3, r2
 800d3b6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d3b8:	68fb      	ldr	r3, [r7, #12]
 800d3ba:	f023 0307 	bic.w	r3, r3, #7
 800d3be:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d3c0:	68fb      	ldr	r3, [r7, #12]
 800d3c2:	4a15      	ldr	r2, [pc, #84]	; (800d418 <prvHeapInit+0xb4>)
 800d3c4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d3c6:	4b14      	ldr	r3, [pc, #80]	; (800d418 <prvHeapInit+0xb4>)
 800d3c8:	681b      	ldr	r3, [r3, #0]
 800d3ca:	2200      	movs	r2, #0
 800d3cc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d3ce:	4b12      	ldr	r3, [pc, #72]	; (800d418 <prvHeapInit+0xb4>)
 800d3d0:	681b      	ldr	r3, [r3, #0]
 800d3d2:	2200      	movs	r2, #0
 800d3d4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d3da:	683b      	ldr	r3, [r7, #0]
 800d3dc:	68fa      	ldr	r2, [r7, #12]
 800d3de:	1ad2      	subs	r2, r2, r3
 800d3e0:	683b      	ldr	r3, [r7, #0]
 800d3e2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d3e4:	4b0c      	ldr	r3, [pc, #48]	; (800d418 <prvHeapInit+0xb4>)
 800d3e6:	681a      	ldr	r2, [r3, #0]
 800d3e8:	683b      	ldr	r3, [r7, #0]
 800d3ea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d3ec:	683b      	ldr	r3, [r7, #0]
 800d3ee:	685b      	ldr	r3, [r3, #4]
 800d3f0:	4a0a      	ldr	r2, [pc, #40]	; (800d41c <prvHeapInit+0xb8>)
 800d3f2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d3f4:	683b      	ldr	r3, [r7, #0]
 800d3f6:	685b      	ldr	r3, [r3, #4]
 800d3f8:	4a09      	ldr	r2, [pc, #36]	; (800d420 <prvHeapInit+0xbc>)
 800d3fa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d3fc:	4b09      	ldr	r3, [pc, #36]	; (800d424 <prvHeapInit+0xc0>)
 800d3fe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d402:	601a      	str	r2, [r3, #0]
}
 800d404:	bf00      	nop
 800d406:	3714      	adds	r7, #20
 800d408:	46bd      	mov	sp, r7
 800d40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d40e:	4770      	bx	lr
 800d410:	200011d8 	.word	0x200011d8
 800d414:	20001d90 	.word	0x20001d90
 800d418:	20001d98 	.word	0x20001d98
 800d41c:	20001da0 	.word	0x20001da0
 800d420:	20001d9c 	.word	0x20001d9c
 800d424:	20001dac 	.word	0x20001dac

0800d428 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d428:	b480      	push	{r7}
 800d42a:	b085      	sub	sp, #20
 800d42c:	af00      	add	r7, sp, #0
 800d42e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d430:	4b28      	ldr	r3, [pc, #160]	; (800d4d4 <prvInsertBlockIntoFreeList+0xac>)
 800d432:	60fb      	str	r3, [r7, #12]
 800d434:	e002      	b.n	800d43c <prvInsertBlockIntoFreeList+0x14>
 800d436:	68fb      	ldr	r3, [r7, #12]
 800d438:	681b      	ldr	r3, [r3, #0]
 800d43a:	60fb      	str	r3, [r7, #12]
 800d43c:	68fb      	ldr	r3, [r7, #12]
 800d43e:	681b      	ldr	r3, [r3, #0]
 800d440:	687a      	ldr	r2, [r7, #4]
 800d442:	429a      	cmp	r2, r3
 800d444:	d8f7      	bhi.n	800d436 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d446:	68fb      	ldr	r3, [r7, #12]
 800d448:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d44a:	68fb      	ldr	r3, [r7, #12]
 800d44c:	685b      	ldr	r3, [r3, #4]
 800d44e:	68ba      	ldr	r2, [r7, #8]
 800d450:	4413      	add	r3, r2
 800d452:	687a      	ldr	r2, [r7, #4]
 800d454:	429a      	cmp	r2, r3
 800d456:	d108      	bne.n	800d46a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d458:	68fb      	ldr	r3, [r7, #12]
 800d45a:	685a      	ldr	r2, [r3, #4]
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	685b      	ldr	r3, [r3, #4]
 800d460:	441a      	add	r2, r3
 800d462:	68fb      	ldr	r3, [r7, #12]
 800d464:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d466:	68fb      	ldr	r3, [r7, #12]
 800d468:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	685b      	ldr	r3, [r3, #4]
 800d472:	68ba      	ldr	r2, [r7, #8]
 800d474:	441a      	add	r2, r3
 800d476:	68fb      	ldr	r3, [r7, #12]
 800d478:	681b      	ldr	r3, [r3, #0]
 800d47a:	429a      	cmp	r2, r3
 800d47c:	d118      	bne.n	800d4b0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d47e:	68fb      	ldr	r3, [r7, #12]
 800d480:	681a      	ldr	r2, [r3, #0]
 800d482:	4b15      	ldr	r3, [pc, #84]	; (800d4d8 <prvInsertBlockIntoFreeList+0xb0>)
 800d484:	681b      	ldr	r3, [r3, #0]
 800d486:	429a      	cmp	r2, r3
 800d488:	d00d      	beq.n	800d4a6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	685a      	ldr	r2, [r3, #4]
 800d48e:	68fb      	ldr	r3, [r7, #12]
 800d490:	681b      	ldr	r3, [r3, #0]
 800d492:	685b      	ldr	r3, [r3, #4]
 800d494:	441a      	add	r2, r3
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d49a:	68fb      	ldr	r3, [r7, #12]
 800d49c:	681b      	ldr	r3, [r3, #0]
 800d49e:	681a      	ldr	r2, [r3, #0]
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	601a      	str	r2, [r3, #0]
 800d4a4:	e008      	b.n	800d4b8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d4a6:	4b0c      	ldr	r3, [pc, #48]	; (800d4d8 <prvInsertBlockIntoFreeList+0xb0>)
 800d4a8:	681a      	ldr	r2, [r3, #0]
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	601a      	str	r2, [r3, #0]
 800d4ae:	e003      	b.n	800d4b8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d4b0:	68fb      	ldr	r3, [r7, #12]
 800d4b2:	681a      	ldr	r2, [r3, #0]
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d4b8:	68fa      	ldr	r2, [r7, #12]
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	429a      	cmp	r2, r3
 800d4be:	d002      	beq.n	800d4c6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d4c0:	68fb      	ldr	r3, [r7, #12]
 800d4c2:	687a      	ldr	r2, [r7, #4]
 800d4c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d4c6:	bf00      	nop
 800d4c8:	3714      	adds	r7, #20
 800d4ca:	46bd      	mov	sp, r7
 800d4cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4d0:	4770      	bx	lr
 800d4d2:	bf00      	nop
 800d4d4:	20001d90 	.word	0x20001d90
 800d4d8:	20001d98 	.word	0x20001d98

0800d4dc <__libc_init_array>:
 800d4dc:	b570      	push	{r4, r5, r6, lr}
 800d4de:	4d0d      	ldr	r5, [pc, #52]	; (800d514 <__libc_init_array+0x38>)
 800d4e0:	4c0d      	ldr	r4, [pc, #52]	; (800d518 <__libc_init_array+0x3c>)
 800d4e2:	1b64      	subs	r4, r4, r5
 800d4e4:	10a4      	asrs	r4, r4, #2
 800d4e6:	2600      	movs	r6, #0
 800d4e8:	42a6      	cmp	r6, r4
 800d4ea:	d109      	bne.n	800d500 <__libc_init_array+0x24>
 800d4ec:	4d0b      	ldr	r5, [pc, #44]	; (800d51c <__libc_init_array+0x40>)
 800d4ee:	4c0c      	ldr	r4, [pc, #48]	; (800d520 <__libc_init_array+0x44>)
 800d4f0:	f000 f8f2 	bl	800d6d8 <_init>
 800d4f4:	1b64      	subs	r4, r4, r5
 800d4f6:	10a4      	asrs	r4, r4, #2
 800d4f8:	2600      	movs	r6, #0
 800d4fa:	42a6      	cmp	r6, r4
 800d4fc:	d105      	bne.n	800d50a <__libc_init_array+0x2e>
 800d4fe:	bd70      	pop	{r4, r5, r6, pc}
 800d500:	f855 3b04 	ldr.w	r3, [r5], #4
 800d504:	4798      	blx	r3
 800d506:	3601      	adds	r6, #1
 800d508:	e7ee      	b.n	800d4e8 <__libc_init_array+0xc>
 800d50a:	f855 3b04 	ldr.w	r3, [r5], #4
 800d50e:	4798      	blx	r3
 800d510:	3601      	adds	r6, #1
 800d512:	e7f2      	b.n	800d4fa <__libc_init_array+0x1e>
 800d514:	0800d87c 	.word	0x0800d87c
 800d518:	0800d87c 	.word	0x0800d87c
 800d51c:	0800d87c 	.word	0x0800d87c
 800d520:	0800d880 	.word	0x0800d880

0800d524 <__retarget_lock_acquire_recursive>:
 800d524:	4770      	bx	lr

0800d526 <__retarget_lock_release_recursive>:
 800d526:	4770      	bx	lr

0800d528 <memcpy>:
 800d528:	440a      	add	r2, r1
 800d52a:	4291      	cmp	r1, r2
 800d52c:	f100 33ff 	add.w	r3, r0, #4294967295
 800d530:	d100      	bne.n	800d534 <memcpy+0xc>
 800d532:	4770      	bx	lr
 800d534:	b510      	push	{r4, lr}
 800d536:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d53a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d53e:	4291      	cmp	r1, r2
 800d540:	d1f9      	bne.n	800d536 <memcpy+0xe>
 800d542:	bd10      	pop	{r4, pc}

0800d544 <memset>:
 800d544:	4402      	add	r2, r0
 800d546:	4603      	mov	r3, r0
 800d548:	4293      	cmp	r3, r2
 800d54a:	d100      	bne.n	800d54e <memset+0xa>
 800d54c:	4770      	bx	lr
 800d54e:	f803 1b01 	strb.w	r1, [r3], #1
 800d552:	e7f9      	b.n	800d548 <memset+0x4>

0800d554 <cleanup_glue>:
 800d554:	b538      	push	{r3, r4, r5, lr}
 800d556:	460c      	mov	r4, r1
 800d558:	6809      	ldr	r1, [r1, #0]
 800d55a:	4605      	mov	r5, r0
 800d55c:	b109      	cbz	r1, 800d562 <cleanup_glue+0xe>
 800d55e:	f7ff fff9 	bl	800d554 <cleanup_glue>
 800d562:	4621      	mov	r1, r4
 800d564:	4628      	mov	r0, r5
 800d566:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d56a:	f000 b869 	b.w	800d640 <_free_r>
	...

0800d570 <_reclaim_reent>:
 800d570:	4b2c      	ldr	r3, [pc, #176]	; (800d624 <_reclaim_reent+0xb4>)
 800d572:	681b      	ldr	r3, [r3, #0]
 800d574:	4283      	cmp	r3, r0
 800d576:	b570      	push	{r4, r5, r6, lr}
 800d578:	4604      	mov	r4, r0
 800d57a:	d051      	beq.n	800d620 <_reclaim_reent+0xb0>
 800d57c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800d57e:	b143      	cbz	r3, 800d592 <_reclaim_reent+0x22>
 800d580:	68db      	ldr	r3, [r3, #12]
 800d582:	2b00      	cmp	r3, #0
 800d584:	d14a      	bne.n	800d61c <_reclaim_reent+0xac>
 800d586:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d588:	6819      	ldr	r1, [r3, #0]
 800d58a:	b111      	cbz	r1, 800d592 <_reclaim_reent+0x22>
 800d58c:	4620      	mov	r0, r4
 800d58e:	f000 f857 	bl	800d640 <_free_r>
 800d592:	6961      	ldr	r1, [r4, #20]
 800d594:	b111      	cbz	r1, 800d59c <_reclaim_reent+0x2c>
 800d596:	4620      	mov	r0, r4
 800d598:	f000 f852 	bl	800d640 <_free_r>
 800d59c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800d59e:	b111      	cbz	r1, 800d5a6 <_reclaim_reent+0x36>
 800d5a0:	4620      	mov	r0, r4
 800d5a2:	f000 f84d 	bl	800d640 <_free_r>
 800d5a6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800d5a8:	b111      	cbz	r1, 800d5b0 <_reclaim_reent+0x40>
 800d5aa:	4620      	mov	r0, r4
 800d5ac:	f000 f848 	bl	800d640 <_free_r>
 800d5b0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800d5b2:	b111      	cbz	r1, 800d5ba <_reclaim_reent+0x4a>
 800d5b4:	4620      	mov	r0, r4
 800d5b6:	f000 f843 	bl	800d640 <_free_r>
 800d5ba:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800d5bc:	b111      	cbz	r1, 800d5c4 <_reclaim_reent+0x54>
 800d5be:	4620      	mov	r0, r4
 800d5c0:	f000 f83e 	bl	800d640 <_free_r>
 800d5c4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800d5c6:	b111      	cbz	r1, 800d5ce <_reclaim_reent+0x5e>
 800d5c8:	4620      	mov	r0, r4
 800d5ca:	f000 f839 	bl	800d640 <_free_r>
 800d5ce:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800d5d0:	b111      	cbz	r1, 800d5d8 <_reclaim_reent+0x68>
 800d5d2:	4620      	mov	r0, r4
 800d5d4:	f000 f834 	bl	800d640 <_free_r>
 800d5d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d5da:	b111      	cbz	r1, 800d5e2 <_reclaim_reent+0x72>
 800d5dc:	4620      	mov	r0, r4
 800d5de:	f000 f82f 	bl	800d640 <_free_r>
 800d5e2:	69a3      	ldr	r3, [r4, #24]
 800d5e4:	b1e3      	cbz	r3, 800d620 <_reclaim_reent+0xb0>
 800d5e6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800d5e8:	4620      	mov	r0, r4
 800d5ea:	4798      	blx	r3
 800d5ec:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800d5ee:	b1b9      	cbz	r1, 800d620 <_reclaim_reent+0xb0>
 800d5f0:	4620      	mov	r0, r4
 800d5f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d5f6:	f7ff bfad 	b.w	800d554 <cleanup_glue>
 800d5fa:	5949      	ldr	r1, [r1, r5]
 800d5fc:	b941      	cbnz	r1, 800d610 <_reclaim_reent+0xa0>
 800d5fe:	3504      	adds	r5, #4
 800d600:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d602:	2d80      	cmp	r5, #128	; 0x80
 800d604:	68d9      	ldr	r1, [r3, #12]
 800d606:	d1f8      	bne.n	800d5fa <_reclaim_reent+0x8a>
 800d608:	4620      	mov	r0, r4
 800d60a:	f000 f819 	bl	800d640 <_free_r>
 800d60e:	e7ba      	b.n	800d586 <_reclaim_reent+0x16>
 800d610:	680e      	ldr	r6, [r1, #0]
 800d612:	4620      	mov	r0, r4
 800d614:	f000 f814 	bl	800d640 <_free_r>
 800d618:	4631      	mov	r1, r6
 800d61a:	e7ef      	b.n	800d5fc <_reclaim_reent+0x8c>
 800d61c:	2500      	movs	r5, #0
 800d61e:	e7ef      	b.n	800d600 <_reclaim_reent+0x90>
 800d620:	bd70      	pop	{r4, r5, r6, pc}
 800d622:	bf00      	nop
 800d624:	20000010 	.word	0x20000010

0800d628 <__malloc_lock>:
 800d628:	4801      	ldr	r0, [pc, #4]	; (800d630 <__malloc_lock+0x8>)
 800d62a:	f7ff bf7b 	b.w	800d524 <__retarget_lock_acquire_recursive>
 800d62e:	bf00      	nop
 800d630:	20001db0 	.word	0x20001db0

0800d634 <__malloc_unlock>:
 800d634:	4801      	ldr	r0, [pc, #4]	; (800d63c <__malloc_unlock+0x8>)
 800d636:	f7ff bf76 	b.w	800d526 <__retarget_lock_release_recursive>
 800d63a:	bf00      	nop
 800d63c:	20001db0 	.word	0x20001db0

0800d640 <_free_r>:
 800d640:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d642:	2900      	cmp	r1, #0
 800d644:	d044      	beq.n	800d6d0 <_free_r+0x90>
 800d646:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d64a:	9001      	str	r0, [sp, #4]
 800d64c:	2b00      	cmp	r3, #0
 800d64e:	f1a1 0404 	sub.w	r4, r1, #4
 800d652:	bfb8      	it	lt
 800d654:	18e4      	addlt	r4, r4, r3
 800d656:	f7ff ffe7 	bl	800d628 <__malloc_lock>
 800d65a:	4a1e      	ldr	r2, [pc, #120]	; (800d6d4 <_free_r+0x94>)
 800d65c:	9801      	ldr	r0, [sp, #4]
 800d65e:	6813      	ldr	r3, [r2, #0]
 800d660:	b933      	cbnz	r3, 800d670 <_free_r+0x30>
 800d662:	6063      	str	r3, [r4, #4]
 800d664:	6014      	str	r4, [r2, #0]
 800d666:	b003      	add	sp, #12
 800d668:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d66c:	f7ff bfe2 	b.w	800d634 <__malloc_unlock>
 800d670:	42a3      	cmp	r3, r4
 800d672:	d908      	bls.n	800d686 <_free_r+0x46>
 800d674:	6825      	ldr	r5, [r4, #0]
 800d676:	1961      	adds	r1, r4, r5
 800d678:	428b      	cmp	r3, r1
 800d67a:	bf01      	itttt	eq
 800d67c:	6819      	ldreq	r1, [r3, #0]
 800d67e:	685b      	ldreq	r3, [r3, #4]
 800d680:	1949      	addeq	r1, r1, r5
 800d682:	6021      	streq	r1, [r4, #0]
 800d684:	e7ed      	b.n	800d662 <_free_r+0x22>
 800d686:	461a      	mov	r2, r3
 800d688:	685b      	ldr	r3, [r3, #4]
 800d68a:	b10b      	cbz	r3, 800d690 <_free_r+0x50>
 800d68c:	42a3      	cmp	r3, r4
 800d68e:	d9fa      	bls.n	800d686 <_free_r+0x46>
 800d690:	6811      	ldr	r1, [r2, #0]
 800d692:	1855      	adds	r5, r2, r1
 800d694:	42a5      	cmp	r5, r4
 800d696:	d10b      	bne.n	800d6b0 <_free_r+0x70>
 800d698:	6824      	ldr	r4, [r4, #0]
 800d69a:	4421      	add	r1, r4
 800d69c:	1854      	adds	r4, r2, r1
 800d69e:	42a3      	cmp	r3, r4
 800d6a0:	6011      	str	r1, [r2, #0]
 800d6a2:	d1e0      	bne.n	800d666 <_free_r+0x26>
 800d6a4:	681c      	ldr	r4, [r3, #0]
 800d6a6:	685b      	ldr	r3, [r3, #4]
 800d6a8:	6053      	str	r3, [r2, #4]
 800d6aa:	4421      	add	r1, r4
 800d6ac:	6011      	str	r1, [r2, #0]
 800d6ae:	e7da      	b.n	800d666 <_free_r+0x26>
 800d6b0:	d902      	bls.n	800d6b8 <_free_r+0x78>
 800d6b2:	230c      	movs	r3, #12
 800d6b4:	6003      	str	r3, [r0, #0]
 800d6b6:	e7d6      	b.n	800d666 <_free_r+0x26>
 800d6b8:	6825      	ldr	r5, [r4, #0]
 800d6ba:	1961      	adds	r1, r4, r5
 800d6bc:	428b      	cmp	r3, r1
 800d6be:	bf04      	itt	eq
 800d6c0:	6819      	ldreq	r1, [r3, #0]
 800d6c2:	685b      	ldreq	r3, [r3, #4]
 800d6c4:	6063      	str	r3, [r4, #4]
 800d6c6:	bf04      	itt	eq
 800d6c8:	1949      	addeq	r1, r1, r5
 800d6ca:	6021      	streq	r1, [r4, #0]
 800d6cc:	6054      	str	r4, [r2, #4]
 800d6ce:	e7ca      	b.n	800d666 <_free_r+0x26>
 800d6d0:	b003      	add	sp, #12
 800d6d2:	bd30      	pop	{r4, r5, pc}
 800d6d4:	20001db4 	.word	0x20001db4

0800d6d8 <_init>:
 800d6d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d6da:	bf00      	nop
 800d6dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d6de:	bc08      	pop	{r3}
 800d6e0:	469e      	mov	lr, r3
 800d6e2:	4770      	bx	lr

0800d6e4 <_fini>:
 800d6e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d6e6:	bf00      	nop
 800d6e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d6ea:	bc08      	pop	{r3}
 800d6ec:	469e      	mov	lr, r3
 800d6ee:	4770      	bx	lr
