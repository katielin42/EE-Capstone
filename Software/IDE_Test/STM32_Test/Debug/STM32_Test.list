
STM32_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cfa0  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000018c  0800d160  0800d160  0001d160  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d2ec  0800d2ec  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  0800d2ec  0800d2ec  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d2ec  0800d2ec  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d2ec  0800d2ec  0001d2ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d2f0  0800d2f0  0001d2f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800d2f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001d30  20000074  0800d368  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000c04  20001da4  0800d368  00021da4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00026d1d  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000050d2  00000000  00000000  00046dc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001f80  00000000  00000000  0004be98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001d58  00000000  00000000  0004de18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003733f  00000000  00000000  0004fb70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000241b2  00000000  00000000  00086eaf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0014a29c  00000000  00000000  000ab061  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001f52fd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008778  00000000  00000000  001f5350  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000074 	.word	0x20000074
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800d148 	.word	0x0800d148

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000078 	.word	0x20000078
 80001fc:	0800d148 	.word	0x0800d148

08000200 <ADC_Init>:
  .stack_size = 128 * 4,
  .priority = (osPriority_t) osPriorityNormal,
};

//initialize ADC thread
void ADC_Init(void) {
 8000200:	b580      	push	{r7, lr}
 8000202:	af00      	add	r7, sp, #0
	ADC_semHandle = osSemaphoreNew(1, 1, &ADC_sem_attributes);
 8000204:	4a08      	ldr	r2, [pc, #32]	; (8000228 <ADC_Init+0x28>)
 8000206:	2101      	movs	r1, #1
 8000208:	2001      	movs	r0, #1
 800020a:	f009 fb49 	bl	80098a0 <osSemaphoreNew>
 800020e:	4603      	mov	r3, r0
 8000210:	4a06      	ldr	r2, [pc, #24]	; (800022c <ADC_Init+0x2c>)
 8000212:	6013      	str	r3, [r2, #0]
	thr_1 = osThreadNew(ADC_collect, &hadc1, &thr_1_attributes);
 8000214:	4a06      	ldr	r2, [pc, #24]	; (8000230 <ADC_Init+0x30>)
 8000216:	4907      	ldr	r1, [pc, #28]	; (8000234 <ADC_Init+0x34>)
 8000218:	4807      	ldr	r0, [pc, #28]	; (8000238 <ADC_Init+0x38>)
 800021a:	f009 fa0e 	bl	800963a <osThreadNew>
 800021e:	4603      	mov	r3, r0
 8000220:	4a06      	ldr	r2, [pc, #24]	; (800023c <ADC_Init+0x3c>)
 8000222:	6013      	str	r3, [r2, #0]

}
 8000224:	bf00      	nop
 8000226:	bd80      	pop	{r7, pc}
 8000228:	0800d1b0 	.word	0x0800d1b0
 800022c:	200000ac 	.word	0x200000ac
 8000230:	0800d1c0 	.word	0x0800d1c0
 8000234:	20000130 	.word	0x20000130
 8000238:	080002b5 	.word	0x080002b5
 800023c:	20000100 	.word	0x20000100

08000240 <HAL_ADC_ConvCpltCallback>:

//since ADC 1 has 3 pins we are getting data from, our adc buffer raw has space for 9 values
//aka 3x of adc pins.
//We average out the 3 ADC values for each pin
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){
 8000240:	b580      	push	{r7, lr}
 8000242:	b084      	sub	sp, #16
 8000244:	af00      	add	r7, sp, #0
 8000246:	6078      	str	r0, [r7, #4]
	// ADC averaging
	for(int i = 0 ; i < 3; i++) {
 8000248:	2300      	movs	r3, #0
 800024a:	60fb      	str	r3, [r7, #12]
 800024c:	e01d      	b.n	800028a <HAL_ADC_ConvCpltCallback+0x4a>
		ADC_buffer_processed[i] = (ADC_buffer_raw[0 + i] + ADC_buffer_raw[3 + i] + ADC_buffer_raw[6 + i])/3;
 800024e:	4a15      	ldr	r2, [pc, #84]	; (80002a4 <HAL_ADC_ConvCpltCallback+0x64>)
 8000250:	68fb      	ldr	r3, [r7, #12]
 8000252:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000256:	4619      	mov	r1, r3
 8000258:	68fb      	ldr	r3, [r7, #12]
 800025a:	3303      	adds	r3, #3
 800025c:	4a11      	ldr	r2, [pc, #68]	; (80002a4 <HAL_ADC_ConvCpltCallback+0x64>)
 800025e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000262:	440b      	add	r3, r1
 8000264:	68fa      	ldr	r2, [r7, #12]
 8000266:	3206      	adds	r2, #6
 8000268:	490e      	ldr	r1, [pc, #56]	; (80002a4 <HAL_ADC_ConvCpltCallback+0x64>)
 800026a:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 800026e:	4413      	add	r3, r2
 8000270:	4a0d      	ldr	r2, [pc, #52]	; (80002a8 <HAL_ADC_ConvCpltCallback+0x68>)
 8000272:	fb82 1203 	smull	r1, r2, r2, r3
 8000276:	17db      	asrs	r3, r3, #31
 8000278:	1ad3      	subs	r3, r2, r3
 800027a:	b299      	uxth	r1, r3
 800027c:	4a0b      	ldr	r2, [pc, #44]	; (80002ac <HAL_ADC_ConvCpltCallback+0x6c>)
 800027e:	68fb      	ldr	r3, [r7, #12]
 8000280:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int i = 0 ; i < 3; i++) {
 8000284:	68fb      	ldr	r3, [r7, #12]
 8000286:	3301      	adds	r3, #1
 8000288:	60fb      	str	r3, [r7, #12]
 800028a:	68fb      	ldr	r3, [r7, #12]
 800028c:	2b02      	cmp	r3, #2
 800028e:	ddde      	ble.n	800024e <HAL_ADC_ConvCpltCallback+0xe>
	}
	osSemaphoreRelease(ADC_semHandle);
 8000290:	4b07      	ldr	r3, [pc, #28]	; (80002b0 <HAL_ADC_ConvCpltCallback+0x70>)
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	4618      	mov	r0, r3
 8000296:	f009 fbdf 	bl	8009a58 <osSemaphoreRelease>
}
 800029a:	bf00      	nop
 800029c:	3710      	adds	r7, #16
 800029e:	46bd      	mov	sp, r7
 80002a0:	bd80      	pop	{r7, pc}
 80002a2:	bf00      	nop
 80002a4:	20000090 	.word	0x20000090
 80002a8:	55555556 	.word	0x55555556
 80002ac:	200000a4 	.word	0x200000a4
 80002b0:	200000ac 	.word	0x200000ac

080002b4 <ADC_collect>:

//collect raw adc data through the DMA
void ADC_collect(void *argument)
{
 80002b4:	b580      	push	{r7, lr}
 80002b6:	b084      	sub	sp, #16
 80002b8:	af00      	add	r7, sp, #0
 80002ba:	6078      	str	r0, [r7, #4]
	ADC_HandleTypeDef *hadc = argument;
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
	HAL_ADC_Start_DMA(hadc, (uint32_t*)ADC_buffer_raw, 9);
 80002c0:	2209      	movs	r2, #9
 80002c2:	4907      	ldr	r1, [pc, #28]	; (80002e0 <ADC_collect+0x2c>)
 80002c4:	68f8      	ldr	r0, [r7, #12]
 80002c6:	f001 fb79 	bl	80019bc <HAL_ADC_Start_DMA>
  for(;;)
  {
	  osSemaphoreAcquire(ADC_semHandle, osWaitForever);
 80002ca:	4b06      	ldr	r3, [pc, #24]	; (80002e4 <ADC_collect+0x30>)
 80002cc:	681b      	ldr	r3, [r3, #0]
 80002ce:	f04f 31ff 	mov.w	r1, #4294967295
 80002d2:	4618      	mov	r0, r3
 80002d4:	f009 fb6e 	bl	80099b4 <osSemaphoreAcquire>
	  // process adc buffer good

    osDelay(1);
 80002d8:	2001      	movs	r0, #1
 80002da:	f009 fa40 	bl	800975e <osDelay>
	  osSemaphoreAcquire(ADC_semHandle, osWaitForever);
 80002de:	e7f4      	b.n	80002ca <ADC_collect+0x16>
 80002e0:	20000090 	.word	0x20000090
 80002e4:	200000ac 	.word	0x200000ac

080002e8 <can_Init>:
        reversed_num = (reversed_num << 4) + (hex_num & 0xF);
        hex_num >>= 4;
    }
    return reversed_num;
}
void can_Init(void) {
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b08a      	sub	sp, #40	; 0x28
 80002ec:	af00      	add	r7, sp, #0

	CAN_FilterTypeDef  sFilterConfig;

	txCAN.IDE = CAN_ID_EXT;
 80002ee:	4b17      	ldr	r3, [pc, #92]	; (800034c <can_Init+0x64>)
 80002f0:	2204      	movs	r2, #4
 80002f2:	609a      	str	r2, [r3, #8]
	txCAN.RTR = CAN_RTR_DATA;
 80002f4:	4b15      	ldr	r3, [pc, #84]	; (800034c <can_Init+0x64>)
 80002f6:	2200      	movs	r2, #0
 80002f8:	60da      	str	r2, [r3, #12]
	txCAN.TransmitGlobalTime = DISABLE;
 80002fa:	4b14      	ldr	r3, [pc, #80]	; (800034c <can_Init+0x64>)
 80002fc:	2200      	movs	r2, #0
 80002fe:	751a      	strb	r2, [r3, #20]

	sFilterConfig.FilterBank = 0;
 8000300:	2300      	movs	r3, #0
 8000302:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000304:	2300      	movs	r3, #0
 8000306:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000308:	2301      	movs	r3, #1
 800030a:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterIdHigh = 0x0000;
 800030c:	2300      	movs	r3, #0
 800030e:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIdLow = 0x0000;
 8000310:	2300      	movs	r3, #0
 8000312:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterMaskIdHigh = 0x0000;
 8000314:	2300      	movs	r3, #0
 8000316:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterMaskIdLow = 0x0000;
 8000318:	2300      	movs	r3, #0
 800031a:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 800031c:	2300      	movs	r3, #0
 800031e:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterActivation = ENABLE;
 8000320:	2301      	movs	r3, #1
 8000322:	623b      	str	r3, [r7, #32]
	sFilterConfig.SlaveStartFilterBank = 14;
 8000324:	230e      	movs	r3, #14
 8000326:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 8000328:	463b      	mov	r3, r7
 800032a:	4619      	mov	r1, r3
 800032c:	4808      	ldr	r0, [pc, #32]	; (8000350 <can_Init+0x68>)
 800032e:	f002 fbde 	bl	8002aee <HAL_CAN_ConfigFilter>
 8000332:	4603      	mov	r3, r0
 8000334:	2b00      	cmp	r3, #0
 8000336:	d001      	beq.n	800033c <can_Init+0x54>
	{
	    /* Filter configuration Error */
	  Error_Handler();
 8000338:	f000 fcdc 	bl	8000cf4 <Error_Handler>
	}
	HAL_CAN_Start(&hcan1);
 800033c:	4804      	ldr	r0, [pc, #16]	; (8000350 <can_Init+0x68>)
 800033e:	f002 fca0 	bl	8002c82 <HAL_CAN_Start>
}
 8000342:	bf00      	nop
 8000344:	3728      	adds	r7, #40	; 0x28
 8000346:	46bd      	mov	sp, r7
 8000348:	bd80      	pop	{r7, pc}
 800034a:	bf00      	nop
 800034c:	20000104 	.word	0x20000104
 8000350:	200001f8 	.word	0x200001f8

08000354 <canSend>:
void canSend(void) {
 8000354:	b580      	push	{r7, lr}
 8000356:	af00      	add	r7, sp, #0
	txCAN.ExtId = txAddress;
 8000358:	4b0c      	ldr	r3, [pc, #48]	; (800038c <canSend+0x38>)
 800035a:	22c0      	movs	r2, #192	; 0xc0
 800035c:	605a      	str	r2, [r3, #4]
	txCAN.DLC = 2;
 800035e:	4b0b      	ldr	r3, [pc, #44]	; (800038c <canSend+0x38>)
 8000360:	2202      	movs	r2, #2
 8000362:	611a      	str	r2, [r3, #16]
	txData[0] = motorTorqueLowFault;
 8000364:	4b0a      	ldr	r3, [pc, #40]	; (8000390 <canSend+0x3c>)
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	b2da      	uxtb	r2, r3
 800036a:	4b0a      	ldr	r3, [pc, #40]	; (8000394 <canSend+0x40>)
 800036c:	701a      	strb	r2, [r3, #0]
	txData[1] = motorTorqueHighFault;
 800036e:	4b0a      	ldr	r3, [pc, #40]	; (8000398 <canSend+0x44>)
 8000370:	681b      	ldr	r3, [r3, #0]
 8000372:	b2da      	uxtb	r2, r3
 8000374:	4b07      	ldr	r3, [pc, #28]	; (8000394 <canSend+0x40>)
 8000376:	705a      	strb	r2, [r3, #1]
	while(1) {
		HAL_CAN_AddTxMessage(&hcan1, &txCAN, txData, &txMail);
 8000378:	4b08      	ldr	r3, [pc, #32]	; (800039c <canSend+0x48>)
 800037a:	4a06      	ldr	r2, [pc, #24]	; (8000394 <canSend+0x40>)
 800037c:	4903      	ldr	r1, [pc, #12]	; (800038c <canSend+0x38>)
 800037e:	4808      	ldr	r0, [pc, #32]	; (80003a0 <canSend+0x4c>)
 8000380:	f002 fcc3 	bl	8002d0a <HAL_CAN_AddTxMessage>
		osDelay(50);
 8000384:	2032      	movs	r0, #50	; 0x32
 8000386:	f009 f9ea 	bl	800975e <osDelay>
		HAL_CAN_AddTxMessage(&hcan1, &txCAN, txData, &txMail);
 800038a:	e7f5      	b.n	8000378 <canSend+0x24>
 800038c:	20000104 	.word	0x20000104
 8000390:	2000012c 	.word	0x2000012c
 8000394:	20000120 	.word	0x20000120
 8000398:	20000128 	.word	0x20000128
 800039c:	2000011c 	.word	0x2000011c
 80003a0:	200001f8 	.word	0x200001f8

080003a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003a8:	f000 ff71 	bl	800128e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003ac:	f000 f83c 	bl	8000428 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003b0:	f000 f990 	bl	80006d4 <MX_GPIO_Init>
  MX_DMA_Init();
 80003b4:	f000 f964 	bl	8000680 <MX_DMA_Init>
  MX_SDMMC1_SD_Init();
 80003b8:	f000 f940 	bl	800063c <MX_SDMMC1_SD_Init>
  MX_CAN1_Init();
 80003bc:	f000 f908 	bl	80005d0 <MX_CAN1_Init>
  MX_ADC1_Init();
 80003c0:	f000 f880 	bl	80004c4 <MX_ADC1_Init>
  MX_FATFS_Init();
 80003c4:	f008 fdb8 	bl	8008f38 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80003c8:	f009 f8b6 	bl	8009538 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of myMutex01 */
  myMutex01Handle = osMutexNew(&myMutex01_attributes);
 80003cc:	480f      	ldr	r0, [pc, #60]	; (800040c <main+0x68>)
 80003ce:	f009 f9e1 	bl	8009794 <osMutexNew>
 80003d2:	4603      	mov	r3, r0
 80003d4:	4a0e      	ldr	r2, [pc, #56]	; (8000410 <main+0x6c>)
 80003d6:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of myQueue01 */
  myQueue01Handle = osMessageQueueNew (16, sizeof(uint16_t), &myQueue01_attributes);
 80003d8:	4a0e      	ldr	r2, [pc, #56]	; (8000414 <main+0x70>)
 80003da:	2102      	movs	r1, #2
 80003dc:	2010      	movs	r0, #16
 80003de:	f009 fb7f 	bl	8009ae0 <osMessageQueueNew>
 80003e2:	4603      	mov	r3, r0
 80003e4:	4a0c      	ldr	r2, [pc, #48]	; (8000418 <main+0x74>)
 80003e6:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80003e8:	4a0c      	ldr	r2, [pc, #48]	; (800041c <main+0x78>)
 80003ea:	2100      	movs	r1, #0
 80003ec:	480c      	ldr	r0, [pc, #48]	; (8000420 <main+0x7c>)
 80003ee:	f009 f924 	bl	800963a <osThreadNew>
 80003f2:	4603      	mov	r3, r0
 80003f4:	4a0b      	ldr	r2, [pc, #44]	; (8000424 <main+0x80>)
 80003f6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  ADC_Init();
 80003f8:	f7ff ff02 	bl	8000200 <ADC_Init>
  can_Init();
 80003fc:	f7ff ff74 	bl	80002e8 <can_Init>
  canSend();
 8000400:	f7ff ffa8 	bl	8000354 <canSend>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000404:	f009 f8de 	bl	80095c4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000408:	e7fe      	b.n	8000408 <main+0x64>
 800040a:	bf00      	nop
 800040c:	0800d220 	.word	0x0800d220
 8000410:	20000318 	.word	0x20000318
 8000414:	0800d208 	.word	0x0800d208
 8000418:	200002a4 	.word	0x200002a4
 800041c:	0800d1e4 	.word	0x0800d1e4
 8000420:	08000cc1 	.word	0x08000cc1
 8000424:	200002a0 	.word	0x200002a0

08000428 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	b096      	sub	sp, #88	; 0x58
 800042c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800042e:	f107 0314 	add.w	r3, r7, #20
 8000432:	2244      	movs	r2, #68	; 0x44
 8000434:	2100      	movs	r1, #0
 8000436:	4618      	mov	r0, r3
 8000438:	f00c fdbc 	bl	800cfb4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800043c:	463b      	mov	r3, r7
 800043e:	2200      	movs	r2, #0
 8000440:	601a      	str	r2, [r3, #0]
 8000442:	605a      	str	r2, [r3, #4]
 8000444:	609a      	str	r2, [r3, #8]
 8000446:	60da      	str	r2, [r3, #12]
 8000448:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 800044a:	2000      	movs	r0, #0
 800044c:	f003 fa64 	bl	8003918 <HAL_PWREx_ControlVoltageScaling>
 8000450:	4603      	mov	r3, r0
 8000452:	2b00      	cmp	r3, #0
 8000454:	d001      	beq.n	800045a <SystemClock_Config+0x32>
  {
    Error_Handler();
 8000456:	f000 fc4d 	bl	8000cf4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800045a:	2301      	movs	r3, #1
 800045c:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800045e:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000462:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000464:	2302      	movs	r3, #2
 8000466:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000468:	2303      	movs	r3, #3
 800046a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 2;
 800046c:	2302      	movs	r3, #2
 800046e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 30;
 8000470:	231e      	movs	r3, #30
 8000472:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000474:	2302      	movs	r3, #2
 8000476:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000478:	2302      	movs	r3, #2
 800047a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800047c:	2302      	movs	r3, #2
 800047e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000480:	f107 0314 	add.w	r3, r7, #20
 8000484:	4618      	mov	r0, r3
 8000486:	f003 fafb 	bl	8003a80 <HAL_RCC_OscConfig>
 800048a:	4603      	mov	r3, r0
 800048c:	2b00      	cmp	r3, #0
 800048e:	d001      	beq.n	8000494 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 8000490:	f000 fc30 	bl	8000cf4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000494:	230f      	movs	r3, #15
 8000496:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000498:	2303      	movs	r3, #3
 800049a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800049c:	2300      	movs	r3, #0
 800049e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004a0:	2300      	movs	r3, #0
 80004a2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004a4:	2300      	movs	r3, #0
 80004a6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80004a8:	463b      	mov	r3, r7
 80004aa:	2105      	movs	r1, #5
 80004ac:	4618      	mov	r0, r3
 80004ae:	f003 ff01 	bl	80042b4 <HAL_RCC_ClockConfig>
 80004b2:	4603      	mov	r3, r0
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	d001      	beq.n	80004bc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80004b8:	f000 fc1c 	bl	8000cf4 <Error_Handler>
  }
}
 80004bc:	bf00      	nop
 80004be:	3758      	adds	r7, #88	; 0x58
 80004c0:	46bd      	mov	sp, r7
 80004c2:	bd80      	pop	{r7, pc}

080004c4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b086      	sub	sp, #24
 80004c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80004ca:	463b      	mov	r3, r7
 80004cc:	2200      	movs	r2, #0
 80004ce:	601a      	str	r2, [r3, #0]
 80004d0:	605a      	str	r2, [r3, #4]
 80004d2:	609a      	str	r2, [r3, #8]
 80004d4:	60da      	str	r2, [r3, #12]
 80004d6:	611a      	str	r2, [r3, #16]
 80004d8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80004da:	4b38      	ldr	r3, [pc, #224]	; (80005bc <MX_ADC1_Init+0xf8>)
 80004dc:	4a38      	ldr	r2, [pc, #224]	; (80005c0 <MX_ADC1_Init+0xfc>)
 80004de:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80004e0:	4b36      	ldr	r3, [pc, #216]	; (80005bc <MX_ADC1_Init+0xf8>)
 80004e2:	2200      	movs	r2, #0
 80004e4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80004e6:	4b35      	ldr	r3, [pc, #212]	; (80005bc <MX_ADC1_Init+0xf8>)
 80004e8:	2200      	movs	r2, #0
 80004ea:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80004ec:	4b33      	ldr	r3, [pc, #204]	; (80005bc <MX_ADC1_Init+0xf8>)
 80004ee:	2200      	movs	r2, #0
 80004f0:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80004f2:	4b32      	ldr	r3, [pc, #200]	; (80005bc <MX_ADC1_Init+0xf8>)
 80004f4:	2201      	movs	r2, #1
 80004f6:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80004f8:	4b30      	ldr	r3, [pc, #192]	; (80005bc <MX_ADC1_Init+0xf8>)
 80004fa:	2204      	movs	r2, #4
 80004fc:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80004fe:	4b2f      	ldr	r3, [pc, #188]	; (80005bc <MX_ADC1_Init+0xf8>)
 8000500:	2200      	movs	r2, #0
 8000502:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000504:	4b2d      	ldr	r3, [pc, #180]	; (80005bc <MX_ADC1_Init+0xf8>)
 8000506:	2200      	movs	r2, #0
 8000508:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 3;
 800050a:	4b2c      	ldr	r3, [pc, #176]	; (80005bc <MX_ADC1_Init+0xf8>)
 800050c:	2203      	movs	r2, #3
 800050e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000510:	4b2a      	ldr	r3, [pc, #168]	; (80005bc <MX_ADC1_Init+0xf8>)
 8000512:	2200      	movs	r2, #0
 8000514:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000518:	4b28      	ldr	r3, [pc, #160]	; (80005bc <MX_ADC1_Init+0xf8>)
 800051a:	2200      	movs	r2, #0
 800051c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800051e:	4b27      	ldr	r3, [pc, #156]	; (80005bc <MX_ADC1_Init+0xf8>)
 8000520:	2200      	movs	r2, #0
 8000522:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000524:	4b25      	ldr	r3, [pc, #148]	; (80005bc <MX_ADC1_Init+0xf8>)
 8000526:	2201      	movs	r2, #1
 8000528:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800052c:	4b23      	ldr	r3, [pc, #140]	; (80005bc <MX_ADC1_Init+0xf8>)
 800052e:	2200      	movs	r2, #0
 8000530:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000532:	4b22      	ldr	r3, [pc, #136]	; (80005bc <MX_ADC1_Init+0xf8>)
 8000534:	2200      	movs	r2, #0
 8000536:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.DFSDMConfig = ADC_DFSDM_MODE_ENABLE;
 800053a:	4b20      	ldr	r3, [pc, #128]	; (80005bc <MX_ADC1_Init+0xf8>)
 800053c:	2204      	movs	r2, #4
 800053e:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000540:	481e      	ldr	r0, [pc, #120]	; (80005bc <MX_ADC1_Init+0xf8>)
 8000542:	f001 f8ef 	bl	8001724 <HAL_ADC_Init>
 8000546:	4603      	mov	r3, r0
 8000548:	2b00      	cmp	r3, #0
 800054a:	d001      	beq.n	8000550 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 800054c:	f000 fbd2 	bl	8000cf4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000550:	4b1c      	ldr	r3, [pc, #112]	; (80005c4 <MX_ADC1_Init+0x100>)
 8000552:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000554:	2306      	movs	r3, #6
 8000556:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000558:	2300      	movs	r3, #0
 800055a:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800055c:	237f      	movs	r3, #127	; 0x7f
 800055e:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000560:	2304      	movs	r3, #4
 8000562:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000564:	2300      	movs	r3, #0
 8000566:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000568:	463b      	mov	r3, r7
 800056a:	4619      	mov	r1, r3
 800056c:	4813      	ldr	r0, [pc, #76]	; (80005bc <MX_ADC1_Init+0xf8>)
 800056e:	f001 fc7b 	bl	8001e68 <HAL_ADC_ConfigChannel>
 8000572:	4603      	mov	r3, r0
 8000574:	2b00      	cmp	r3, #0
 8000576:	d001      	beq.n	800057c <MX_ADC1_Init+0xb8>
  {
    Error_Handler();
 8000578:	f000 fbbc 	bl	8000cf4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800057c:	4b12      	ldr	r3, [pc, #72]	; (80005c8 <MX_ADC1_Init+0x104>)
 800057e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000580:	230c      	movs	r3, #12
 8000582:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000584:	463b      	mov	r3, r7
 8000586:	4619      	mov	r1, r3
 8000588:	480c      	ldr	r0, [pc, #48]	; (80005bc <MX_ADC1_Init+0xf8>)
 800058a:	f001 fc6d 	bl	8001e68 <HAL_ADC_ConfigChannel>
 800058e:	4603      	mov	r3, r0
 8000590:	2b00      	cmp	r3, #0
 8000592:	d001      	beq.n	8000598 <MX_ADC1_Init+0xd4>
  {
    Error_Handler();
 8000594:	f000 fbae 	bl	8000cf4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000598:	4b0c      	ldr	r3, [pc, #48]	; (80005cc <MX_ADC1_Init+0x108>)
 800059a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800059c:	2312      	movs	r3, #18
 800059e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005a0:	463b      	mov	r3, r7
 80005a2:	4619      	mov	r1, r3
 80005a4:	4805      	ldr	r0, [pc, #20]	; (80005bc <MX_ADC1_Init+0xf8>)
 80005a6:	f001 fc5f 	bl	8001e68 <HAL_ADC_ConfigChannel>
 80005aa:	4603      	mov	r3, r0
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d001      	beq.n	80005b4 <MX_ADC1_Init+0xf0>
  {
    Error_Handler();
 80005b0:	f000 fba0 	bl	8000cf4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80005b4:	bf00      	nop
 80005b6:	3718      	adds	r7, #24
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}
 80005bc:	20000130 	.word	0x20000130
 80005c0:	50040000 	.word	0x50040000
 80005c4:	14f00020 	.word	0x14f00020
 80005c8:	19200040 	.word	0x19200040
 80005cc:	1d500080 	.word	0x1d500080

080005d0 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80005d4:	4b17      	ldr	r3, [pc, #92]	; (8000634 <MX_CAN1_Init+0x64>)
 80005d6:	4a18      	ldr	r2, [pc, #96]	; (8000638 <MX_CAN1_Init+0x68>)
 80005d8:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 24;
 80005da:	4b16      	ldr	r3, [pc, #88]	; (8000634 <MX_CAN1_Init+0x64>)
 80005dc:	2218      	movs	r2, #24
 80005de:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80005e0:	4b14      	ldr	r3, [pc, #80]	; (8000634 <MX_CAN1_Init+0x64>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80005e6:	4b13      	ldr	r3, [pc, #76]	; (8000634 <MX_CAN1_Init+0x64>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_8TQ;
 80005ec:	4b11      	ldr	r3, [pc, #68]	; (8000634 <MX_CAN1_Init+0x64>)
 80005ee:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 80005f2:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80005f4:	4b0f      	ldr	r3, [pc, #60]	; (8000634 <MX_CAN1_Init+0x64>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80005fa:	4b0e      	ldr	r3, [pc, #56]	; (8000634 <MX_CAN1_Init+0x64>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000600:	4b0c      	ldr	r3, [pc, #48]	; (8000634 <MX_CAN1_Init+0x64>)
 8000602:	2200      	movs	r2, #0
 8000604:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000606:	4b0b      	ldr	r3, [pc, #44]	; (8000634 <MX_CAN1_Init+0x64>)
 8000608:	2200      	movs	r2, #0
 800060a:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800060c:	4b09      	ldr	r3, [pc, #36]	; (8000634 <MX_CAN1_Init+0x64>)
 800060e:	2200      	movs	r2, #0
 8000610:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000612:	4b08      	ldr	r3, [pc, #32]	; (8000634 <MX_CAN1_Init+0x64>)
 8000614:	2200      	movs	r2, #0
 8000616:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000618:	4b06      	ldr	r3, [pc, #24]	; (8000634 <MX_CAN1_Init+0x64>)
 800061a:	2200      	movs	r2, #0
 800061c:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800061e:	4805      	ldr	r0, [pc, #20]	; (8000634 <MX_CAN1_Init+0x64>)
 8000620:	f002 f96a 	bl	80028f8 <HAL_CAN_Init>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d001      	beq.n	800062e <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 800062a:	f000 fb63 	bl	8000cf4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 800062e:	bf00      	nop
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	200001f8 	.word	0x200001f8
 8000638:	40006400 	.word	0x40006400

0800063c <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 800063c:	b480      	push	{r7}
 800063e:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000640:	4b0d      	ldr	r3, [pc, #52]	; (8000678 <MX_SDMMC1_SD_Init+0x3c>)
 8000642:	4a0e      	ldr	r2, [pc, #56]	; (800067c <MX_SDMMC1_SD_Init+0x40>)
 8000644:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000646:	4b0c      	ldr	r3, [pc, #48]	; (8000678 <MX_SDMMC1_SD_Init+0x3c>)
 8000648:	2200      	movs	r2, #0
 800064a:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800064c:	4b0a      	ldr	r3, [pc, #40]	; (8000678 <MX_SDMMC1_SD_Init+0x3c>)
 800064e:	2200      	movs	r2, #0
 8000650:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8000652:	4b09      	ldr	r3, [pc, #36]	; (8000678 <MX_SDMMC1_SD_Init+0x3c>)
 8000654:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000658:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800065a:	4b07      	ldr	r3, [pc, #28]	; (8000678 <MX_SDMMC1_SD_Init+0x3c>)
 800065c:	2200      	movs	r2, #0
 800065e:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 8000660:	4b05      	ldr	r3, [pc, #20]	; (8000678 <MX_SDMMC1_SD_Init+0x3c>)
 8000662:	2200      	movs	r2, #0
 8000664:	615a      	str	r2, [r3, #20]
  hsd1.Init.Transceiver = SDMMC_TRANSCEIVER_DISABLE;
 8000666:	4b04      	ldr	r3, [pc, #16]	; (8000678 <MX_SDMMC1_SD_Init+0x3c>)
 8000668:	2200      	movs	r2, #0
 800066a:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 800066c:	bf00      	nop
 800066e:	46bd      	mov	sp, r7
 8000670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop
 8000678:	20000220 	.word	0x20000220
 800067c:	50062400 	.word	0x50062400

08000680 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000686:	4b12      	ldr	r3, [pc, #72]	; (80006d0 <MX_DMA_Init+0x50>)
 8000688:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800068a:	4a11      	ldr	r2, [pc, #68]	; (80006d0 <MX_DMA_Init+0x50>)
 800068c:	f043 0304 	orr.w	r3, r3, #4
 8000690:	6493      	str	r3, [r2, #72]	; 0x48
 8000692:	4b0f      	ldr	r3, [pc, #60]	; (80006d0 <MX_DMA_Init+0x50>)
 8000694:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000696:	f003 0304 	and.w	r3, r3, #4
 800069a:	607b      	str	r3, [r7, #4]
 800069c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800069e:	4b0c      	ldr	r3, [pc, #48]	; (80006d0 <MX_DMA_Init+0x50>)
 80006a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80006a2:	4a0b      	ldr	r2, [pc, #44]	; (80006d0 <MX_DMA_Init+0x50>)
 80006a4:	f043 0301 	orr.w	r3, r3, #1
 80006a8:	6493      	str	r3, [r2, #72]	; 0x48
 80006aa:	4b09      	ldr	r3, [pc, #36]	; (80006d0 <MX_DMA_Init+0x50>)
 80006ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80006ae:	f003 0301 	and.w	r3, r3, #1
 80006b2:	603b      	str	r3, [r7, #0]
 80006b4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 80006b6:	2200      	movs	r2, #0
 80006b8:	2105      	movs	r1, #5
 80006ba:	200b      	movs	r0, #11
 80006bc:	f002 fcae 	bl	800301c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80006c0:	200b      	movs	r0, #11
 80006c2:	f002 fcc7 	bl	8003054 <HAL_NVIC_EnableIRQ>

}
 80006c6:	bf00      	nop
 80006c8:	3708      	adds	r7, #8
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	40021000 	.word	0x40021000

080006d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b08e      	sub	sp, #56	; 0x38
 80006d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006de:	2200      	movs	r2, #0
 80006e0:	601a      	str	r2, [r3, #0]
 80006e2:	605a      	str	r2, [r3, #4]
 80006e4:	609a      	str	r2, [r3, #8]
 80006e6:	60da      	str	r2, [r3, #12]
 80006e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80006ea:	4bb2      	ldr	r3, [pc, #712]	; (80009b4 <MX_GPIO_Init+0x2e0>)
 80006ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ee:	4ab1      	ldr	r2, [pc, #708]	; (80009b4 <MX_GPIO_Init+0x2e0>)
 80006f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006f6:	4baf      	ldr	r3, [pc, #700]	; (80009b4 <MX_GPIO_Init+0x2e0>)
 80006f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80006fe:	623b      	str	r3, [r7, #32]
 8000700:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000702:	4bac      	ldr	r3, [pc, #688]	; (80009b4 <MX_GPIO_Init+0x2e0>)
 8000704:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000706:	4aab      	ldr	r2, [pc, #684]	; (80009b4 <MX_GPIO_Init+0x2e0>)
 8000708:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800070c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800070e:	4ba9      	ldr	r3, [pc, #676]	; (80009b4 <MX_GPIO_Init+0x2e0>)
 8000710:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000712:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000716:	61fb      	str	r3, [r7, #28]
 8000718:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800071a:	4ba6      	ldr	r3, [pc, #664]	; (80009b4 <MX_GPIO_Init+0x2e0>)
 800071c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800071e:	4aa5      	ldr	r2, [pc, #660]	; (80009b4 <MX_GPIO_Init+0x2e0>)
 8000720:	f043 0310 	orr.w	r3, r3, #16
 8000724:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000726:	4ba3      	ldr	r3, [pc, #652]	; (80009b4 <MX_GPIO_Init+0x2e0>)
 8000728:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800072a:	f003 0310 	and.w	r3, r3, #16
 800072e:	61bb      	str	r3, [r7, #24]
 8000730:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000732:	4ba0      	ldr	r3, [pc, #640]	; (80009b4 <MX_GPIO_Init+0x2e0>)
 8000734:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000736:	4a9f      	ldr	r2, [pc, #636]	; (80009b4 <MX_GPIO_Init+0x2e0>)
 8000738:	f043 0302 	orr.w	r3, r3, #2
 800073c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800073e:	4b9d      	ldr	r3, [pc, #628]	; (80009b4 <MX_GPIO_Init+0x2e0>)
 8000740:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000742:	f003 0302 	and.w	r3, r3, #2
 8000746:	617b      	str	r3, [r7, #20]
 8000748:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800074a:	4b9a      	ldr	r3, [pc, #616]	; (80009b4 <MX_GPIO_Init+0x2e0>)
 800074c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800074e:	4a99      	ldr	r2, [pc, #612]	; (80009b4 <MX_GPIO_Init+0x2e0>)
 8000750:	f043 0301 	orr.w	r3, r3, #1
 8000754:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000756:	4b97      	ldr	r3, [pc, #604]	; (80009b4 <MX_GPIO_Init+0x2e0>)
 8000758:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800075a:	f003 0301 	and.w	r3, r3, #1
 800075e:	613b      	str	r3, [r7, #16]
 8000760:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000762:	4b94      	ldr	r3, [pc, #592]	; (80009b4 <MX_GPIO_Init+0x2e0>)
 8000764:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000766:	4a93      	ldr	r2, [pc, #588]	; (80009b4 <MX_GPIO_Init+0x2e0>)
 8000768:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800076c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800076e:	4b91      	ldr	r3, [pc, #580]	; (80009b4 <MX_GPIO_Init+0x2e0>)
 8000770:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000772:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000776:	60fb      	str	r3, [r7, #12]
 8000778:	68fb      	ldr	r3, [r7, #12]
  HAL_PWREx_EnableVddIO2();
 800077a:	f003 f971 	bl	8003a60 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800077e:	4b8d      	ldr	r3, [pc, #564]	; (80009b4 <MX_GPIO_Init+0x2e0>)
 8000780:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000782:	4a8c      	ldr	r2, [pc, #560]	; (80009b4 <MX_GPIO_Init+0x2e0>)
 8000784:	f043 0308 	orr.w	r3, r3, #8
 8000788:	64d3      	str	r3, [r2, #76]	; 0x4c
 800078a:	4b8a      	ldr	r3, [pc, #552]	; (80009b4 <MX_GPIO_Init+0x2e0>)
 800078c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800078e:	f003 0308 	and.w	r3, r3, #8
 8000792:	60bb      	str	r3, [r7, #8]
 8000794:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000796:	4b87      	ldr	r3, [pc, #540]	; (80009b4 <MX_GPIO_Init+0x2e0>)
 8000798:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800079a:	4a86      	ldr	r2, [pc, #536]	; (80009b4 <MX_GPIO_Init+0x2e0>)
 800079c:	f043 0304 	orr.w	r3, r3, #4
 80007a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007a2:	4b84      	ldr	r3, [pc, #528]	; (80009b4 <MX_GPIO_Init+0x2e0>)
 80007a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007a6:	f003 0304 	and.w	r3, r3, #4
 80007aa:	607b      	str	r3, [r7, #4]
 80007ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007ae:	4b81      	ldr	r3, [pc, #516]	; (80009b4 <MX_GPIO_Init+0x2e0>)
 80007b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007b2:	4a80      	ldr	r2, [pc, #512]	; (80009b4 <MX_GPIO_Init+0x2e0>)
 80007b4:	f043 0320 	orr.w	r3, r3, #32
 80007b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007ba:	4b7e      	ldr	r3, [pc, #504]	; (80009b4 <MX_GPIO_Init+0x2e0>)
 80007bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007be:	f003 0320 	and.w	r3, r3, #32
 80007c2:	603b      	str	r3, [r7, #0]
 80007c4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, MIC_VDD_Pin|DSI_SPI_USART_CS_Pin|LED_GREEN_Pin, GPIO_PIN_RESET);
 80007c6:	2200      	movs	r2, #0
 80007c8:	f244 0114 	movw	r1, #16404	; 0x4014
 80007cc:	487a      	ldr	r0, [pc, #488]	; (80009b8 <MX_GPIO_Init+0x2e4>)
 80007ce:	f003 f86b 	bl	80038a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(JOY_SEL_GPIO_Port, JOY_SEL_Pin, GPIO_PIN_RESET);
 80007d2:	2200      	movs	r2, #0
 80007d4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007d8:	4878      	ldr	r0, [pc, #480]	; (80009bc <MX_GPIO_Init+0x2e8>)
 80007da:	f003 f865 	bl	80038a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_RESET);
 80007de:	2200      	movs	r2, #0
 80007e0:	2140      	movs	r1, #64	; 0x40
 80007e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007e6:	f003 f85f 	bl	80038a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MFX_WAKEUP_GPIO_Port, MFX_WAKEUP_Pin, GPIO_PIN_RESET);
 80007ea:	2200      	movs	r2, #0
 80007ec:	2104      	movs	r1, #4
 80007ee:	4874      	ldr	r0, [pc, #464]	; (80009c0 <MX_GPIO_Init+0x2ec>)
 80007f0:	f003 f85a 	bl	80038a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OCTOSPIM_P2_IO1_Pin OCTOSPIM_P2_CLK_Pin OCTOSPIM_P2_IO0_Pin */
  GPIO_InitStruct.Pin = OCTOSPIM_P2_IO1_Pin|OCTOSPIM_P2_CLK_Pin|OCTOSPIM_P2_IO0_Pin;
 80007f4:	f44f 6344 	mov.w	r3, #3136	; 0xc40
 80007f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007fa:	2302      	movs	r3, #2
 80007fc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fe:	2300      	movs	r3, #0
 8000800:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000802:	2303      	movs	r3, #3
 8000804:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPIM_P2;
 8000806:	2305      	movs	r3, #5
 8000808:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800080a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800080e:	4619      	mov	r1, r3
 8000810:	486c      	ldr	r0, [pc, #432]	; (80009c4 <MX_GPIO_Init+0x2f0>)
 8000812:	f002 fe9f 	bl	8003554 <HAL_GPIO_Init>

  /*Configure GPIO pins : MIC_VDD_Pin DSI_SPI_USART_CS_Pin LED_GREEN_Pin */
  GPIO_InitStruct.Pin = MIC_VDD_Pin|DSI_SPI_USART_CS_Pin|LED_GREEN_Pin;
 8000816:	f244 0314 	movw	r3, #16404	; 0x4014
 800081a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800081c:	2301      	movs	r3, #1
 800081e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000820:	2300      	movs	r3, #0
 8000822:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000824:	2300      	movs	r3, #0
 8000826:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000828:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800082c:	4619      	mov	r1, r3
 800082e:	4862      	ldr	r0, [pc, #392]	; (80009b8 <MX_GPIO_Init+0x2e4>)
 8000830:	f002 fe90 	bl	8003554 <HAL_GPIO_Init>

  /*Configure GPIO pins : PSRAM_NBL0_Pin PSRAM_NBL1_Pin PSRAM_A20_Pin PSRAM_A19_Pin
                           D7_Pin D6_Pin D12_Pin D5_Pin
                           D11_Pin D4_Pin D10_Pin D9_Pin
                           D8_Pin */
  GPIO_InitStruct.Pin = PSRAM_NBL0_Pin|PSRAM_NBL1_Pin|PSRAM_A20_Pin|PSRAM_A19_Pin
 8000834:	f64f 739b 	movw	r3, #65435	; 0xff9b
 8000838:	627b      	str	r3, [r7, #36]	; 0x24
                          |D7_Pin|D6_Pin|D12_Pin|D5_Pin
                          |D11_Pin|D4_Pin|D10_Pin|D9_Pin
                          |D8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800083a:	2302      	movs	r3, #2
 800083c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083e:	2300      	movs	r3, #0
 8000840:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000842:	2303      	movs	r3, #3
 8000844:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000846:	230c      	movs	r3, #12
 8000848:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800084a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800084e:	4619      	mov	r1, r3
 8000850:	485d      	ldr	r0, [pc, #372]	; (80009c8 <MX_GPIO_Init+0x2f4>)
 8000852:	f002 fe7f 	bl	8003554 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8000856:	2310      	movs	r3, #16
 8000858:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800085a:	2302      	movs	r3, #2
 800085c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085e:	2300      	movs	r3, #0
 8000860:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000862:	2300      	movs	r3, #0
 8000864:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000866:	2302      	movs	r3, #2
 8000868:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 800086a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800086e:	4619      	mov	r1, r3
 8000870:	4853      	ldr	r0, [pc, #332]	; (80009c0 <MX_GPIO_Init+0x2ec>)
 8000872:	f002 fe6f 	bl	8003554 <HAL_GPIO_Init>

  /*Configure GPIO pin : USART3_RTS_Pin */
  GPIO_InitStruct.Pin = USART3_RTS_Pin;
 8000876:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800087a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800087c:	2302      	movs	r3, #2
 800087e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000880:	2300      	movs	r3, #0
 8000882:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000884:	2303      	movs	r3, #3
 8000886:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000888:	2307      	movs	r3, #7
 800088a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USART3_RTS_GPIO_Port, &GPIO_InitStruct);
 800088c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000890:	4619      	mov	r1, r3
 8000892:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000896:	f002 fe5d 	bl	8003554 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_10_Pin */
  GPIO_InitStruct.Pin = ARD_10_Pin;
 800089a:	2301      	movs	r3, #1
 800089c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800089e:	2302      	movs	r3, #2
 80008a0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a2:	2300      	movs	r3, #0
 80008a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008a6:	2303      	movs	r3, #3
 80008a8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008aa:	2305      	movs	r3, #5
 80008ac:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_10_GPIO_Port, &GPIO_InitStruct);
 80008ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008b2:	4619      	mov	r1, r3
 80008b4:	4843      	ldr	r0, [pc, #268]	; (80009c4 <MX_GPIO_Init+0x2f0>)
 80008b6:	f002 fe4d 	bl	8003554 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D7_Pin DCMI_D5_Pin DCMI_VSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_D7_Pin|DCMI_D5_Pin|DCMI_VSYNC_Pin;
 80008ba:	23b0      	movs	r3, #176	; 0xb0
 80008bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008be:	2302      	movs	r3, #2
 80008c0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c2:	2300      	movs	r3, #0
 80008c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c6:	2300      	movs	r3, #0
 80008c8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 80008ca:	230a      	movs	r3, #10
 80008cc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80008ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008d2:	4619      	mov	r1, r3
 80008d4:	483b      	ldr	r0, [pc, #236]	; (80009c4 <MX_GPIO_Init+0x2f0>)
 80008d6:	f002 fe3d 	bl	8003554 <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI1_SDB_Pin SAI1_FSA_Pin */
  GPIO_InitStruct.Pin = SAI1_SDB_Pin|SAI1_FSA_Pin;
 80008da:	f44f 7308 	mov.w	r3, #544	; 0x220
 80008de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e0:	2302      	movs	r3, #2
 80008e2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e4:	2300      	movs	r3, #0
 80008e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e8:	2300      	movs	r3, #0
 80008ea:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 80008ec:	230d      	movs	r3, #13
 80008ee:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008f4:	4619      	mov	r1, r3
 80008f6:	4832      	ldr	r0, [pc, #200]	; (80009c0 <MX_GPIO_Init+0x2ec>)
 80008f8:	f002 fe2c 	bl	8003554 <HAL_GPIO_Init>

  /*Configure GPIO pins : OCTOSPIM_P2_IO6_Pin OCTOSPIM_P2_DQS_Pin OCTOSPIM_P2_IO7_Pin OCTOSPIM_P2_CS_Pin */
  GPIO_InitStruct.Pin = OCTOSPIM_P2_IO6_Pin|OCTOSPIM_P2_DQS_Pin|OCTOSPIM_P2_IO7_Pin|OCTOSPIM_P2_CS_Pin;
 80008fc:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 8000900:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000902:	2302      	movs	r3, #2
 8000904:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000906:	2300      	movs	r3, #0
 8000908:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800090a:	2303      	movs	r3, #3
 800090c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPIM_P2;
 800090e:	2305      	movs	r3, #5
 8000910:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000912:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000916:	4619      	mov	r1, r3
 8000918:	482c      	ldr	r0, [pc, #176]	; (80009cc <MX_GPIO_Init+0x2f8>)
 800091a:	f002 fe1b 	bl	8003554 <HAL_GPIO_Init>

  /*Configure GPIO pins : D2_Pin PSRAM_OE_Pin D3_Pin PSRAM_WE_Pin
                           PSRAM_WAIT_Pin PSRAM_CLK_Pin PSRAM_NE1_Pin PSRAM_A18_Pin
                           D1_Pin D0_Pin PSRAM_A17_Pin PSRAM_A16_Pin
                           D15_Pin D14_Pin D13_Pin */
  GPIO_InitStruct.Pin = D2_Pin|PSRAM_OE_Pin|D3_Pin|PSRAM_WE_Pin
 800091e:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 8000922:	627b      	str	r3, [r7, #36]	; 0x24
                          |PSRAM_WAIT_Pin|PSRAM_CLK_Pin|PSRAM_NE1_Pin|PSRAM_A18_Pin
                          |D1_Pin|D0_Pin|PSRAM_A17_Pin|PSRAM_A16_Pin
                          |D15_Pin|D14_Pin|D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000924:	2302      	movs	r3, #2
 8000926:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000928:	2300      	movs	r3, #0
 800092a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800092c:	2303      	movs	r3, #3
 800092e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000930:	230c      	movs	r3, #12
 8000932:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000934:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000938:	4619      	mov	r1, r3
 800093a:	4825      	ldr	r0, [pc, #148]	; (80009d0 <MX_GPIO_Init+0x2fc>)
 800093c:	f002 fe0a 	bl	8003554 <HAL_GPIO_Init>

  /*Configure GPIO pin : MFX_IRQ_OUT_Pin */
  GPIO_InitStruct.Pin = MFX_IRQ_OUT_Pin;
 8000940:	2302      	movs	r3, #2
 8000942:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000944:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000948:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094a:	2300      	movs	r3, #0
 800094c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(MFX_IRQ_OUT_GPIO_Port, &GPIO_InitStruct);
 800094e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000952:	4619      	mov	r1, r3
 8000954:	481b      	ldr	r0, [pc, #108]	; (80009c4 <MX_GPIO_Init+0x2f0>)
 8000956:	f002 fdfd 	bl	8003554 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D3_Pin DCMI_PIXCLK_Pin DCMI_D2_Pin */
  GPIO_InitStruct.Pin = DCMI_D3_Pin|DCMI_PIXCLK_Pin|DCMI_D2_Pin;
 800095a:	f44f 53c1 	mov.w	r3, #6176	; 0x1820
 800095e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000960:	2302      	movs	r3, #2
 8000962:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000964:	2300      	movs	r3, #0
 8000966:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000968:	2300      	movs	r3, #0
 800096a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 800096c:	230a      	movs	r3, #10
 800096e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000970:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000974:	4619      	mov	r1, r3
 8000976:	4810      	ldr	r0, [pc, #64]	; (80009b8 <MX_GPIO_Init+0x2e4>)
 8000978:	f002 fdec 	bl	8003554 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C1_SCL_Pin */
  GPIO_InitStruct.Pin = I2C1_SCL_Pin;
 800097c:	2340      	movs	r3, #64	; 0x40
 800097e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000980:	2312      	movs	r3, #18
 8000982:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000984:	2301      	movs	r3, #1
 8000986:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000988:	2303      	movs	r3, #3
 800098a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800098c:	2304      	movs	r3, #4
 800098e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(I2C1_SCL_GPIO_Port, &GPIO_InitStruct);
 8000990:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000994:	4619      	mov	r1, r3
 8000996:	480a      	ldr	r0, [pc, #40]	; (80009c0 <MX_GPIO_Init+0x2ec>)
 8000998:	f002 fddc 	bl	8003554 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D9_Pin;
 800099c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a2:	2302      	movs	r3, #2
 80009a4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a6:	2300      	movs	r3, #0
 80009a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009aa:	2300      	movs	r3, #0
 80009ac:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80009ae:	2303      	movs	r3, #3
 80009b0:	e010      	b.n	80009d4 <MX_GPIO_Init+0x300>
 80009b2:	bf00      	nop
 80009b4:	40021000 	.word	0x40021000
 80009b8:	48001c00 	.word	0x48001c00
 80009bc:	48000800 	.word	0x48000800
 80009c0:	48000400 	.word	0x48000400
 80009c4:	48002000 	.word	0x48002000
 80009c8:	48001000 	.word	0x48001000
 80009cc:	48001800 	.word	0x48001800
 80009d0:	48000c00 	.word	0x48000c00
 80009d4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D9_GPIO_Port, &GPIO_InitStruct);
 80009d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009da:	4619      	mov	r1, r3
 80009dc:	48b2      	ldr	r0, [pc, #712]	; (8000ca8 <MX_GPIO_Init+0x5d4>)
 80009de:	f002 fdb9 	bl	8003554 <HAL_GPIO_Init>

  /*Configure GPIO pins : OCTOPSIM_P2_IO4_Pin OCTOSPIM_P2_IO5_Pin OCTOSPI_P2_IO3_Pin */
  GPIO_InitStruct.Pin = OCTOPSIM_P2_IO4_Pin|OCTOSPIM_P2_IO5_Pin|OCTOSPI_P2_IO3_Pin;
 80009e2:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80009e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009e8:	2302      	movs	r3, #2
 80009ea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ec:	2300      	movs	r3, #0
 80009ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009f0:	2303      	movs	r3, #3
 80009f2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPIM_P2;
 80009f4:	2305      	movs	r3, #5
 80009f6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80009f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009fc:	4619      	mov	r1, r3
 80009fe:	48aa      	ldr	r0, [pc, #680]	; (8000ca8 <MX_GPIO_Init+0x5d4>)
 8000a00:	f002 fda8 	bl	8003554 <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI1_MCKA_Pin SAI1_SDA_Pin SAI1_SCKA_Pin */
  GPIO_InitStruct.Pin = SAI1_MCKA_Pin|SAI1_SDA_Pin|SAI1_SCKA_Pin;
 8000a04:	2364      	movs	r3, #100	; 0x64
 8000a06:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a08:	2302      	movs	r3, #2
 8000a0a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a10:	2300      	movs	r3, #0
 8000a12:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8000a14:	230d      	movs	r3, #13
 8000a16:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	48a3      	ldr	r0, [pc, #652]	; (8000cac <MX_GPIO_Init+0x5d8>)
 8000a20:	f002 fd98 	bl	8003554 <HAL_GPIO_Init>

  /*Configure GPIO pin : PSRAM_ADV_Pin */
  GPIO_InitStruct.Pin = PSRAM_ADV_Pin;
 8000a24:	2380      	movs	r3, #128	; 0x80
 8000a26:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a28:	2302      	movs	r3, #2
 8000a2a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a30:	2303      	movs	r3, #3
 8000a32:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000a34:	230c      	movs	r3, #12
 8000a36:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(PSRAM_ADV_GPIO_Port, &GPIO_InitStruct);
 8000a38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	489c      	ldr	r0, [pc, #624]	; (8000cb0 <MX_GPIO_Init+0x5dc>)
 8000a40:	f002 fd88 	bl	8003554 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTGFS_ID_Pin */
  GPIO_InitStruct.Pin = USB_OTGFS_ID_Pin;
 8000a44:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a48:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a4a:	2302      	movs	r3, #2
 8000a4c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a52:	2303      	movs	r3, #3
 8000a54:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000a56:	230a      	movs	r3, #10
 8000a58:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_OTGFS_ID_GPIO_Port, &GPIO_InitStruct);
 8000a5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a5e:	4619      	mov	r1, r3
 8000a60:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a64:	f002 fd76 	bl	8003554 <HAL_GPIO_Init>

  /*Configure GPIO pin : JOY_SEL_Pin */
  GPIO_InitStruct.Pin = JOY_SEL_Pin;
 8000a68:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a6c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a6e:	2301      	movs	r3, #1
 8000a70:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a72:	2300      	movs	r3, #0
 8000a74:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a76:	2300      	movs	r3, #0
 8000a78:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(JOY_SEL_GPIO_Port, &GPIO_InitStruct);
 8000a7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a7e:	4619      	mov	r1, r3
 8000a80:	488c      	ldr	r0, [pc, #560]	; (8000cb4 <MX_GPIO_Init+0x5e0>)
 8000a82:	f002 fd67 	bl	8003554 <HAL_GPIO_Init>

  /*Configure GPIO pins : PSRAM_A2_Pin PSRAM_A1_Pin PSRAM_A0_Pin PSRAM_A3_Pin
                           PSRAM_A4_Pin PSRAM_A5_Pin PSRAM_A9_Pin PSRAM_A8_Pin
                           PSRAM_A7_Pin PSRAM_A6_Pin */
  GPIO_InitStruct.Pin = PSRAM_A2_Pin|PSRAM_A1_Pin|PSRAM_A0_Pin|PSRAM_A3_Pin
 8000a86:	f24f 033f 	movw	r3, #61503	; 0xf03f
 8000a8a:	627b      	str	r3, [r7, #36]	; 0x24
                          |PSRAM_A4_Pin|PSRAM_A5_Pin|PSRAM_A9_Pin|PSRAM_A8_Pin
                          |PSRAM_A7_Pin|PSRAM_A6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a8c:	2302      	movs	r3, #2
 8000a8e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a90:	2300      	movs	r3, #0
 8000a92:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a94:	2303      	movs	r3, #3
 8000a96:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000a98:	230c      	movs	r3, #12
 8000a9a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000a9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4885      	ldr	r0, [pc, #532]	; (8000cb8 <MX_GPIO_Init+0x5e4>)
 8000aa4:	f002 fd56 	bl	8003554 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_14_Pin ARD_15_Pin */
  GPIO_InitStruct.Pin = ARD_14_Pin|ARD_15_Pin;
 8000aa8:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000aac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000aae:	2312      	movs	r3, #18
 8000ab0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ab6:	2303      	movs	r3, #3
 8000ab8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000aba:	2304      	movs	r3, #4
 8000abc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000abe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	487d      	ldr	r0, [pc, #500]	; (8000cbc <MX_GPIO_Init+0x5e8>)
 8000ac6:	f002 fd45 	bl	8003554 <HAL_GPIO_Init>

  /*Configure GPIO pin : STMOD_INT_Pin */
  GPIO_InitStruct.Pin = STMOD_INT_Pin;
 8000aca:	2340      	movs	r3, #64	; 0x40
 8000acc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ace:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000ad2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(STMOD_INT_GPIO_Port, &GPIO_InitStruct);
 8000ad8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000adc:	4619      	mov	r1, r3
 8000ade:	4875      	ldr	r0, [pc, #468]	; (8000cb4 <MX_GPIO_Init+0x5e0>)
 8000ae0:	f002 fd38 	bl	8003554 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C1_SDA_Pin */
  GPIO_InitStruct.Pin = I2C1_SDA_Pin;
 8000ae4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ae8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000aea:	2312      	movs	r3, #18
 8000aec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000aee:	2301      	movs	r3, #1
 8000af0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000af2:	2303      	movs	r3, #3
 8000af4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000af6:	2304      	movs	r3, #4
 8000af8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(I2C1_SDA_GPIO_Port, &GPIO_InitStruct);
 8000afa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000afe:	4619      	mov	r1, r3
 8000b00:	486e      	ldr	r0, [pc, #440]	; (8000cbc <MX_GPIO_Init+0x5e8>)
 8000b02:	f002 fd27 	bl	8003554 <HAL_GPIO_Init>

  /*Configure GPIO pins : PSRAM_A14_Pin PSRAM_A13_Pin PSRAM_A15_Pin PSRAM_A11_Pin
                           PSRAM_A12_Pin PSRAM_A10_Pin */
  GPIO_InitStruct.Pin = PSRAM_A14_Pin|PSRAM_A13_Pin|PSRAM_A15_Pin|PSRAM_A11_Pin
 8000b06:	233f      	movs	r3, #63	; 0x3f
 8000b08:	627b      	str	r3, [r7, #36]	; 0x24
                          |PSRAM_A12_Pin|PSRAM_A10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b0a:	2302      	movs	r3, #2
 8000b0c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b12:	2303      	movs	r3, #3
 8000b14:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000b16:	230c      	movs	r3, #12
 8000b18:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b1e:	4619      	mov	r1, r3
 8000b20:	4866      	ldr	r0, [pc, #408]	; (8000cbc <MX_GPIO_Init+0x5e8>)
 8000b22:	f002 fd17 	bl	8003554 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000b26:	2380      	movs	r3, #128	; 0x80
 8000b28:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000b2e:	2302      	movs	r3, #2
 8000b30:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b36:	4619      	mov	r1, r3
 8000b38:	485e      	ldr	r0, [pc, #376]	; (8000cb4 <MX_GPIO_Init+0x5e0>)
 8000b3a:	f002 fd0b 	bl	8003554 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART3_RX_Pin USART3_TX_Pin */
  GPIO_InitStruct.Pin = USART3_RX_Pin|USART3_TX_Pin;
 8000b3e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000b42:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b44:	2302      	movs	r3, #2
 8000b46:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b4c:	2303      	movs	r3, #3
 8000b4e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000b50:	2307      	movs	r3, #7
 8000b52:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b58:	4619      	mov	r1, r3
 8000b5a:	4855      	ldr	r0, [pc, #340]	; (8000cb0 <MX_GPIO_Init+0x5dc>)
 8000b5c:	f002 fcfa 	bl	8003554 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D0_Pin ARD_D1_Pin */
  GPIO_InitStruct.Pin = ARD_D0_Pin|ARD_D1_Pin;
 8000b60:	2303      	movs	r3, #3
 8000b62:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b64:	2302      	movs	r3, #2
 8000b66:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b6c:	2303      	movs	r3, #3
 8000b6e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000b70:	2308      	movs	r3, #8
 8000b72:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b78:	4619      	mov	r1, r3
 8000b7a:	484e      	ldr	r0, [pc, #312]	; (8000cb4 <MX_GPIO_Init+0x5e0>)
 8000b7c:	f002 fcea 	bl	8003554 <HAL_GPIO_Init>

  /*Configure GPIO pin : DF_CKOUT_Pin */
  GPIO_InitStruct.Pin = DF_CKOUT_Pin;
 8000b80:	2304      	movs	r3, #4
 8000b82:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b84:	2302      	movs	r3, #2
 8000b86:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000b90:	2306      	movs	r3, #6
 8000b92:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(DF_CKOUT_GPIO_Port, &GPIO_InitStruct);
 8000b94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b98:	4619      	mov	r1, r3
 8000b9a:	4846      	ldr	r0, [pc, #280]	; (8000cb4 <MX_GPIO_Init+0x5e0>)
 8000b9c:	f002 fcda 	bl	8003554 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000ba0:	2320      	movs	r3, #32
 8000ba2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bb6:	f002 fccd 	bl	8003554 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_CS_Pin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin;
 8000bba:	2340      	movs	r3, #64	; 0x40
 8000bbc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bbe:	2301      	movs	r3, #1
 8000bc0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 8000bca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bce:	4619      	mov	r1, r3
 8000bd0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bd4:	f002 fcbe 	bl	8003554 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI_MOSI_Pin SPI2_MISO_Pin SPI2_CLK_Pin */
  GPIO_InitStruct.Pin = SPI_MOSI_Pin|SPI2_MISO_Pin|SPI2_CLK_Pin;
 8000bd8:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000bdc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bde:	2302      	movs	r3, #2
 8000be0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be2:	2300      	movs	r3, #0
 8000be4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000be6:	2303      	movs	r3, #3
 8000be8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000bea:	2305      	movs	r3, #5
 8000bec:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	482e      	ldr	r0, [pc, #184]	; (8000cb0 <MX_GPIO_Init+0x5dc>)
 8000bf6:	f002 fcad 	bl	8003554 <HAL_GPIO_Init>

  /*Configure GPIO pin : USART2_RX_Pin */
  GPIO_InitStruct.Pin = USART2_RX_Pin;
 8000bfa:	2308      	movs	r3, #8
 8000bfc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bfe:	2302      	movs	r3, #2
 8000c00:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c02:	2300      	movs	r3, #0
 8000c04:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c06:	2303      	movs	r3, #3
 8000c08:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c0a:	2307      	movs	r3, #7
 8000c0c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USART2_RX_GPIO_Port, &GPIO_InitStruct);
 8000c0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c12:	4619      	mov	r1, r3
 8000c14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c18:	f002 fc9c 	bl	8003554 <HAL_GPIO_Init>

  /*Configure GPIO pin : DSI_TE_Pin */
  GPIO_InitStruct.Pin = DSI_TE_Pin;
 8000c1c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000c20:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c22:	2302      	movs	r3, #2
 8000c24:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c26:	2300      	movs	r3, #0
 8000c28:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_DSI;
 8000c2e:	230b      	movs	r3, #11
 8000c30:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(DSI_TE_GPIO_Port, &GPIO_InitStruct);
 8000c32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c36:	4619      	mov	r1, r3
 8000c38:	481f      	ldr	r0, [pc, #124]	; (8000cb8 <MX_GPIO_Init+0x5e4>)
 8000c3a:	f002 fc8b 	bl	8003554 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_HSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin;
 8000c3e:	2310      	movs	r3, #16
 8000c40:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c42:	2302      	movs	r3, #2
 8000c44:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c46:	2300      	movs	r3, #0
 8000c48:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 8000c4e:	230a      	movs	r3, #10
 8000c50:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(DCMI_HSYNC_GPIO_Port, &GPIO_InitStruct);
 8000c52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c56:	4619      	mov	r1, r3
 8000c58:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c5c:	f002 fc7a 	bl	8003554 <HAL_GPIO_Init>

  /*Configure GPIO pin : MFX_WAKEUP_Pin */
  GPIO_InitStruct.Pin = MFX_WAKEUP_Pin;
 8000c60:	2304      	movs	r3, #4
 8000c62:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c64:	2301      	movs	r3, #1
 8000c66:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(MFX_WAKEUP_GPIO_Port, &GPIO_InitStruct);
 8000c70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c74:	4619      	mov	r1, r3
 8000c76:	480e      	ldr	r0, [pc, #56]	; (8000cb0 <MX_GPIO_Init+0x5dc>)
 8000c78:	f002 fc6c 	bl	8003554 <HAL_GPIO_Init>

  /*Configure GPIO pin : DFDATIN1_Pin */
  GPIO_InitStruct.Pin = DFDATIN1_Pin;
 8000c7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c80:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c82:	2302      	movs	r3, #2
 8000c84:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c86:	2300      	movs	r3, #0
 8000c88:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000c8e:	2306      	movs	r3, #6
 8000c90:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(DFDATIN1_GPIO_Port, &GPIO_InitStruct);
 8000c92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c96:	4619      	mov	r1, r3
 8000c98:	4805      	ldr	r0, [pc, #20]	; (8000cb0 <MX_GPIO_Init+0x5dc>)
 8000c9a:	f002 fc5b 	bl	8003554 <HAL_GPIO_Init>

}
 8000c9e:	bf00      	nop
 8000ca0:	3738      	adds	r7, #56	; 0x38
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	48001c00 	.word	0x48001c00
 8000cac:	48001000 	.word	0x48001000
 8000cb0:	48000400 	.word	0x48000400
 8000cb4:	48000800 	.word	0x48000800
 8000cb8:	48001400 	.word	0x48001400
 8000cbc:	48001800 	.word	0x48001800

08000cc0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b082      	sub	sp, #8
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  for(;;)
  {
    osDelay(1);
 8000cc8:	2001      	movs	r0, #1
 8000cca:	f008 fd48 	bl	800975e <osDelay>
 8000cce:	e7fb      	b.n	8000cc8 <StartDefaultTask+0x8>

08000cd0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b082      	sub	sp, #8
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4a04      	ldr	r2, [pc, #16]	; (8000cf0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000cde:	4293      	cmp	r3, r2
 8000ce0:	d101      	bne.n	8000ce6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000ce2:	f000 faed 	bl	80012c0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ce6:	bf00      	nop
 8000ce8:	3708      	adds	r7, #8
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	40001000 	.word	0x40001000

08000cf4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cf8:	b672      	cpsid	i
}
 8000cfa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cfc:	e7fe      	b.n	8000cfc <Error_Handler+0x8>
	...

08000d00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d06:	4b11      	ldr	r3, [pc, #68]	; (8000d4c <HAL_MspInit+0x4c>)
 8000d08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d0a:	4a10      	ldr	r2, [pc, #64]	; (8000d4c <HAL_MspInit+0x4c>)
 8000d0c:	f043 0301 	orr.w	r3, r3, #1
 8000d10:	6613      	str	r3, [r2, #96]	; 0x60
 8000d12:	4b0e      	ldr	r3, [pc, #56]	; (8000d4c <HAL_MspInit+0x4c>)
 8000d14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d16:	f003 0301 	and.w	r3, r3, #1
 8000d1a:	607b      	str	r3, [r7, #4]
 8000d1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d1e:	4b0b      	ldr	r3, [pc, #44]	; (8000d4c <HAL_MspInit+0x4c>)
 8000d20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d22:	4a0a      	ldr	r2, [pc, #40]	; (8000d4c <HAL_MspInit+0x4c>)
 8000d24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d28:	6593      	str	r3, [r2, #88]	; 0x58
 8000d2a:	4b08      	ldr	r3, [pc, #32]	; (8000d4c <HAL_MspInit+0x4c>)
 8000d2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d32:	603b      	str	r3, [r7, #0]
 8000d34:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d36:	2200      	movs	r2, #0
 8000d38:	210f      	movs	r1, #15
 8000d3a:	f06f 0001 	mvn.w	r0, #1
 8000d3e:	f002 f96d 	bl	800301c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d42:	bf00      	nop
 8000d44:	3708      	adds	r7, #8
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	40021000 	.word	0x40021000

08000d50 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b0b2      	sub	sp, #200	; 0xc8
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d58:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	601a      	str	r2, [r3, #0]
 8000d60:	605a      	str	r2, [r3, #4]
 8000d62:	609a      	str	r2, [r3, #8]
 8000d64:	60da      	str	r2, [r3, #12]
 8000d66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d68:	f107 0318 	add.w	r3, r7, #24
 8000d6c:	229c      	movs	r2, #156	; 0x9c
 8000d6e:	2100      	movs	r1, #0
 8000d70:	4618      	mov	r0, r3
 8000d72:	f00c f91f 	bl	800cfb4 <memset>
  if(hadc->Instance==ADC1)
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	4a5c      	ldr	r2, [pc, #368]	; (8000eec <HAL_ADC_MspInit+0x19c>)
 8000d7c:	4293      	cmp	r3, r2
 8000d7e:	f040 80b1 	bne.w	8000ee4 <HAL_ADC_MspInit+0x194>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000d82:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000d86:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000d88:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000d8c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 8000d90:	2303      	movs	r3, #3
 8000d92:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 2;
 8000d94:	2302      	movs	r3, #2
 8000d96:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8000d98:	2308      	movs	r3, #8
 8000d9a:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8000d9c:	2302      	movs	r3, #2
 8000d9e:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000da0:	2302      	movs	r3, #2
 8000da2:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000da4:	2302      	movs	r3, #2
 8000da6:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000da8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000dac:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000dae:	f107 0318 	add.w	r3, r7, #24
 8000db2:	4618      	mov	r0, r3
 8000db4:	f003 fd6a 	bl	800488c <HAL_RCCEx_PeriphCLKConfig>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d001      	beq.n	8000dc2 <HAL_ADC_MspInit+0x72>
    {
      Error_Handler();
 8000dbe:	f7ff ff99 	bl	8000cf4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000dc2:	4b4b      	ldr	r3, [pc, #300]	; (8000ef0 <HAL_ADC_MspInit+0x1a0>)
 8000dc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dc6:	4a4a      	ldr	r2, [pc, #296]	; (8000ef0 <HAL_ADC_MspInit+0x1a0>)
 8000dc8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000dcc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dce:	4b48      	ldr	r3, [pc, #288]	; (8000ef0 <HAL_ADC_MspInit+0x1a0>)
 8000dd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dd2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000dd6:	617b      	str	r3, [r7, #20]
 8000dd8:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dda:	4b45      	ldr	r3, [pc, #276]	; (8000ef0 <HAL_ADC_MspInit+0x1a0>)
 8000ddc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dde:	4a44      	ldr	r2, [pc, #272]	; (8000ef0 <HAL_ADC_MspInit+0x1a0>)
 8000de0:	f043 0304 	orr.w	r3, r3, #4
 8000de4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000de6:	4b42      	ldr	r3, [pc, #264]	; (8000ef0 <HAL_ADC_MspInit+0x1a0>)
 8000de8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dea:	f003 0304 	and.w	r3, r3, #4
 8000dee:	613b      	str	r3, [r7, #16]
 8000df0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000df2:	4b3f      	ldr	r3, [pc, #252]	; (8000ef0 <HAL_ADC_MspInit+0x1a0>)
 8000df4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000df6:	4a3e      	ldr	r2, [pc, #248]	; (8000ef0 <HAL_ADC_MspInit+0x1a0>)
 8000df8:	f043 0301 	orr.w	r3, r3, #1
 8000dfc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dfe:	4b3c      	ldr	r3, [pc, #240]	; (8000ef0 <HAL_ADC_MspInit+0x1a0>)
 8000e00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e02:	f003 0301 	and.w	r3, r3, #1
 8000e06:	60fb      	str	r3, [r7, #12]
 8000e08:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e0a:	4b39      	ldr	r3, [pc, #228]	; (8000ef0 <HAL_ADC_MspInit+0x1a0>)
 8000e0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e0e:	4a38      	ldr	r2, [pc, #224]	; (8000ef0 <HAL_ADC_MspInit+0x1a0>)
 8000e10:	f043 0302 	orr.w	r3, r3, #2
 8000e14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e16:	4b36      	ldr	r3, [pc, #216]	; (8000ef0 <HAL_ADC_MspInit+0x1a0>)
 8000e18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e1a:	f003 0302 	and.w	r3, r3, #2
 8000e1e:	60bb      	str	r3, [r7, #8]
 8000e20:	68bb      	ldr	r3, [r7, #8]
    PA1     ------> ADC1_IN6
    PA7     ------> ADC1_IN12
    PA2     ------> ADC1_IN7
    PB0     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = ARD_A2_Pin|ARD_A1_Pin;
 8000e22:	2318      	movs	r3, #24
 8000e24:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000e28:	230b      	movs	r3, #11
 8000e2a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e34:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000e38:	4619      	mov	r1, r3
 8000e3a:	482e      	ldr	r0, [pc, #184]	; (8000ef4 <HAL_ADC_MspInit+0x1a4>)
 8000e3c:	f002 fb8a 	bl	8003554 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|ARD_A0_Pin|GPIO_PIN_2;
 8000e40:	2387      	movs	r3, #135	; 0x87
 8000e42:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000e46:	230b      	movs	r3, #11
 8000e48:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e52:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000e56:	4619      	mov	r1, r3
 8000e58:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e5c:	f002 fb7a 	bl	8003554 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_A3_Pin;
 8000e60:	2301      	movs	r3, #1
 8000e62:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000e66:	230b      	movs	r3, #11
 8000e68:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(ARD_A3_GPIO_Port, &GPIO_InitStruct);
 8000e72:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000e76:	4619      	mov	r1, r3
 8000e78:	481f      	ldr	r0, [pc, #124]	; (8000ef8 <HAL_ADC_MspInit+0x1a8>)
 8000e7a:	f002 fb6b 	bl	8003554 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000e7e:	4b1f      	ldr	r3, [pc, #124]	; (8000efc <HAL_ADC_MspInit+0x1ac>)
 8000e80:	4a1f      	ldr	r2, [pc, #124]	; (8000f00 <HAL_ADC_MspInit+0x1b0>)
 8000e82:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000e84:	4b1d      	ldr	r3, [pc, #116]	; (8000efc <HAL_ADC_MspInit+0x1ac>)
 8000e86:	2205      	movs	r2, #5
 8000e88:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e8a:	4b1c      	ldr	r3, [pc, #112]	; (8000efc <HAL_ADC_MspInit+0x1ac>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e90:	4b1a      	ldr	r3, [pc, #104]	; (8000efc <HAL_ADC_MspInit+0x1ac>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000e96:	4b19      	ldr	r3, [pc, #100]	; (8000efc <HAL_ADC_MspInit+0x1ac>)
 8000e98:	2280      	movs	r2, #128	; 0x80
 8000e9a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000e9c:	4b17      	ldr	r3, [pc, #92]	; (8000efc <HAL_ADC_MspInit+0x1ac>)
 8000e9e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ea2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000ea4:	4b15      	ldr	r3, [pc, #84]	; (8000efc <HAL_ADC_MspInit+0x1ac>)
 8000ea6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000eaa:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000eac:	4b13      	ldr	r3, [pc, #76]	; (8000efc <HAL_ADC_MspInit+0x1ac>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000eb2:	4b12      	ldr	r3, [pc, #72]	; (8000efc <HAL_ADC_MspInit+0x1ac>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000eb8:	4810      	ldr	r0, [pc, #64]	; (8000efc <HAL_ADC_MspInit+0x1ac>)
 8000eba:	f002 f8d9 	bl	8003070 <HAL_DMA_Init>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d001      	beq.n	8000ec8 <HAL_ADC_MspInit+0x178>
    {
      Error_Handler();
 8000ec4:	f7ff ff16 	bl	8000cf4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	4a0c      	ldr	r2, [pc, #48]	; (8000efc <HAL_ADC_MspInit+0x1ac>)
 8000ecc:	651a      	str	r2, [r3, #80]	; 0x50
 8000ece:	4a0b      	ldr	r2, [pc, #44]	; (8000efc <HAL_ADC_MspInit+0x1ac>)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 5, 0);
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	2105      	movs	r1, #5
 8000ed8:	2012      	movs	r0, #18
 8000eda:	f002 f89f 	bl	800301c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8000ede:	2012      	movs	r0, #18
 8000ee0:	f002 f8b8 	bl	8003054 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000ee4:	bf00      	nop
 8000ee6:	37c8      	adds	r7, #200	; 0xc8
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	50040000 	.word	0x50040000
 8000ef0:	40021000 	.word	0x40021000
 8000ef4:	48000800 	.word	0x48000800
 8000ef8:	48000400 	.word	0x48000400
 8000efc:	20000198 	.word	0x20000198
 8000f00:	40020008 	.word	0x40020008

08000f04 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b08a      	sub	sp, #40	; 0x28
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f0c:	f107 0314 	add.w	r3, r7, #20
 8000f10:	2200      	movs	r2, #0
 8000f12:	601a      	str	r2, [r3, #0]
 8000f14:	605a      	str	r2, [r3, #4]
 8000f16:	609a      	str	r2, [r3, #8]
 8000f18:	60da      	str	r2, [r3, #12]
 8000f1a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4a18      	ldr	r2, [pc, #96]	; (8000f84 <HAL_CAN_MspInit+0x80>)
 8000f22:	4293      	cmp	r3, r2
 8000f24:	d129      	bne.n	8000f7a <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000f26:	4b18      	ldr	r3, [pc, #96]	; (8000f88 <HAL_CAN_MspInit+0x84>)
 8000f28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f2a:	4a17      	ldr	r2, [pc, #92]	; (8000f88 <HAL_CAN_MspInit+0x84>)
 8000f2c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f30:	6593      	str	r3, [r2, #88]	; 0x58
 8000f32:	4b15      	ldr	r3, [pc, #84]	; (8000f88 <HAL_CAN_MspInit+0x84>)
 8000f34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f3a:	613b      	str	r3, [r7, #16]
 8000f3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f3e:	4b12      	ldr	r3, [pc, #72]	; (8000f88 <HAL_CAN_MspInit+0x84>)
 8000f40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f42:	4a11      	ldr	r2, [pc, #68]	; (8000f88 <HAL_CAN_MspInit+0x84>)
 8000f44:	f043 0301 	orr.w	r3, r3, #1
 8000f48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f4a:	4b0f      	ldr	r3, [pc, #60]	; (8000f88 <HAL_CAN_MspInit+0x84>)
 8000f4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f4e:	f003 0301 	and.w	r3, r3, #1
 8000f52:	60fb      	str	r3, [r7, #12]
 8000f54:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA12     ------> CAN1_TX
    PA11     ------> CAN1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11;
 8000f56:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000f5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f5c:	2302      	movs	r3, #2
 8000f5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f60:	2300      	movs	r3, #0
 8000f62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f64:	2303      	movs	r3, #3
 8000f66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000f68:	2309      	movs	r3, #9
 8000f6a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f6c:	f107 0314 	add.w	r3, r7, #20
 8000f70:	4619      	mov	r1, r3
 8000f72:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f76:	f002 faed 	bl	8003554 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000f7a:	bf00      	nop
 8000f7c:	3728      	adds	r7, #40	; 0x28
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	40006400 	.word	0x40006400
 8000f88:	40021000 	.word	0x40021000

08000f8c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b0b2      	sub	sp, #200	; 0xc8
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f94:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000f98:	2200      	movs	r2, #0
 8000f9a:	601a      	str	r2, [r3, #0]
 8000f9c:	605a      	str	r2, [r3, #4]
 8000f9e:	609a      	str	r2, [r3, #8]
 8000fa0:	60da      	str	r2, [r3, #12]
 8000fa2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fa4:	f107 0318 	add.w	r3, r7, #24
 8000fa8:	229c      	movs	r2, #156	; 0x9c
 8000faa:	2100      	movs	r1, #0
 8000fac:	4618      	mov	r0, r3
 8000fae:	f00c f801 	bl	800cfb4 <memset>
  if(hsd->Instance==SDMMC1)
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	4a38      	ldr	r2, [pc, #224]	; (8001098 <HAL_SD_MspInit+0x10c>)
 8000fb8:	4293      	cmp	r3, r2
 8000fba:	d169      	bne.n	8001090 <HAL_SD_MspInit+0x104>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1;
 8000fbc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000fc0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_PLLP;
 8000fc2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000fc6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 8000fca:	2303      	movs	r3, #3
 8000fcc:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fce:	f107 0318 	add.w	r3, r7, #24
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f003 fc5a 	bl	800488c <HAL_RCCEx_PeriphCLKConfig>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d001      	beq.n	8000fe2 <HAL_SD_MspInit+0x56>
    {
      Error_Handler();
 8000fde:	f7ff fe89 	bl	8000cf4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8000fe2:	4b2e      	ldr	r3, [pc, #184]	; (800109c <HAL_SD_MspInit+0x110>)
 8000fe4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fe6:	4a2d      	ldr	r2, [pc, #180]	; (800109c <HAL_SD_MspInit+0x110>)
 8000fe8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000fec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fee:	4b2b      	ldr	r3, [pc, #172]	; (800109c <HAL_SD_MspInit+0x110>)
 8000ff0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ff2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000ff6:	617b      	str	r3, [r7, #20]
 8000ff8:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ffa:	4b28      	ldr	r3, [pc, #160]	; (800109c <HAL_SD_MspInit+0x110>)
 8000ffc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ffe:	4a27      	ldr	r2, [pc, #156]	; (800109c <HAL_SD_MspInit+0x110>)
 8001000:	f043 0308 	orr.w	r3, r3, #8
 8001004:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001006:	4b25      	ldr	r3, [pc, #148]	; (800109c <HAL_SD_MspInit+0x110>)
 8001008:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800100a:	f003 0308 	and.w	r3, r3, #8
 800100e:	613b      	str	r3, [r7, #16]
 8001010:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001012:	4b22      	ldr	r3, [pc, #136]	; (800109c <HAL_SD_MspInit+0x110>)
 8001014:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001016:	4a21      	ldr	r2, [pc, #132]	; (800109c <HAL_SD_MspInit+0x110>)
 8001018:	f043 0304 	orr.w	r3, r3, #4
 800101c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800101e:	4b1f      	ldr	r3, [pc, #124]	; (800109c <HAL_SD_MspInit+0x110>)
 8001020:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001022:	f003 0304 	and.w	r3, r3, #4
 8001026:	60fb      	str	r3, [r7, #12]
 8001028:	68fb      	ldr	r3, [r7, #12]
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PC8     ------> SDMMC1_D0
    PC9     ------> SDMMC1_D1
    */
    GPIO_InitStruct.Pin = uSD_CMD_Pin;
 800102a:	2304      	movs	r3, #4
 800102c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001030:	2302      	movs	r3, #2
 8001032:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001036:	2300      	movs	r3, #0
 8001038:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800103c:	2303      	movs	r3, #3
 800103e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001042:	230c      	movs	r3, #12
 8001044:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(uSD_CMD_GPIO_Port, &GPIO_InitStruct);
 8001048:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800104c:	4619      	mov	r1, r3
 800104e:	4814      	ldr	r0, [pc, #80]	; (80010a0 <HAL_SD_MspInit+0x114>)
 8001050:	f002 fa80 	bl	8003554 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = uSD_D2_Pin|uSD_D3_Pin|uSD_CLK_Pin|uSD_D0_Pin
 8001054:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001058:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
                          |uSD_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800105c:	2302      	movs	r3, #2
 800105e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001062:	2300      	movs	r3, #0
 8001064:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001068:	2303      	movs	r3, #3
 800106a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800106e:	230c      	movs	r3, #12
 8001070:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001074:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001078:	4619      	mov	r1, r3
 800107a:	480a      	ldr	r0, [pc, #40]	; (80010a4 <HAL_SD_MspInit+0x118>)
 800107c:	f002 fa6a 	bl	8003554 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 5, 0);
 8001080:	2200      	movs	r2, #0
 8001082:	2105      	movs	r1, #5
 8001084:	2031      	movs	r0, #49	; 0x31
 8001086:	f001 ffc9 	bl	800301c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 800108a:	2031      	movs	r0, #49	; 0x31
 800108c:	f001 ffe2 	bl	8003054 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8001090:	bf00      	nop
 8001092:	37c8      	adds	r7, #200	; 0xc8
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	50062400 	.word	0x50062400
 800109c:	40021000 	.word	0x40021000
 80010a0:	48000c00 	.word	0x48000c00
 80010a4:	48000800 	.word	0x48000800

080010a8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b08e      	sub	sp, #56	; 0x38
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80010b0:	2300      	movs	r3, #0
 80010b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80010b6:	4b34      	ldr	r3, [pc, #208]	; (8001188 <HAL_InitTick+0xe0>)
 80010b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010ba:	4a33      	ldr	r2, [pc, #204]	; (8001188 <HAL_InitTick+0xe0>)
 80010bc:	f043 0310 	orr.w	r3, r3, #16
 80010c0:	6593      	str	r3, [r2, #88]	; 0x58
 80010c2:	4b31      	ldr	r3, [pc, #196]	; (8001188 <HAL_InitTick+0xe0>)
 80010c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010c6:	f003 0310 	and.w	r3, r3, #16
 80010ca:	60fb      	str	r3, [r7, #12]
 80010cc:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80010ce:	f107 0210 	add.w	r2, r7, #16
 80010d2:	f107 0314 	add.w	r3, r7, #20
 80010d6:	4611      	mov	r1, r2
 80010d8:	4618      	mov	r0, r3
 80010da:	f003 fae7 	bl	80046ac <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80010de:	6a3b      	ldr	r3, [r7, #32]
 80010e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80010e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d103      	bne.n	80010f0 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80010e8:	f003 fab4 	bl	8004654 <HAL_RCC_GetPCLK1Freq>
 80010ec:	6378      	str	r0, [r7, #52]	; 0x34
 80010ee:	e004      	b.n	80010fa <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80010f0:	f003 fab0 	bl	8004654 <HAL_RCC_GetPCLK1Freq>
 80010f4:	4603      	mov	r3, r0
 80010f6:	005b      	lsls	r3, r3, #1
 80010f8:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80010fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010fc:	4a23      	ldr	r2, [pc, #140]	; (800118c <HAL_InitTick+0xe4>)
 80010fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001102:	0c9b      	lsrs	r3, r3, #18
 8001104:	3b01      	subs	r3, #1
 8001106:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001108:	4b21      	ldr	r3, [pc, #132]	; (8001190 <HAL_InitTick+0xe8>)
 800110a:	4a22      	ldr	r2, [pc, #136]	; (8001194 <HAL_InitTick+0xec>)
 800110c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800110e:	4b20      	ldr	r3, [pc, #128]	; (8001190 <HAL_InitTick+0xe8>)
 8001110:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001114:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001116:	4a1e      	ldr	r2, [pc, #120]	; (8001190 <HAL_InitTick+0xe8>)
 8001118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800111a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800111c:	4b1c      	ldr	r3, [pc, #112]	; (8001190 <HAL_InitTick+0xe8>)
 800111e:	2200      	movs	r2, #0
 8001120:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001122:	4b1b      	ldr	r3, [pc, #108]	; (8001190 <HAL_InitTick+0xe8>)
 8001124:	2200      	movs	r2, #0
 8001126:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001128:	4b19      	ldr	r3, [pc, #100]	; (8001190 <HAL_InitTick+0xe8>)
 800112a:	2200      	movs	r2, #0
 800112c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800112e:	4818      	ldr	r0, [pc, #96]	; (8001190 <HAL_InitTick+0xe8>)
 8001130:	f006 fe4b 	bl	8007dca <HAL_TIM_Base_Init>
 8001134:	4603      	mov	r3, r0
 8001136:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800113a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800113e:	2b00      	cmp	r3, #0
 8001140:	d11b      	bne.n	800117a <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001142:	4813      	ldr	r0, [pc, #76]	; (8001190 <HAL_InitTick+0xe8>)
 8001144:	f006 fea2 	bl	8007e8c <HAL_TIM_Base_Start_IT>
 8001148:	4603      	mov	r3, r0
 800114a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800114e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001152:	2b00      	cmp	r3, #0
 8001154:	d111      	bne.n	800117a <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001156:	2036      	movs	r0, #54	; 0x36
 8001158:	f001 ff7c 	bl	8003054 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	2b0f      	cmp	r3, #15
 8001160:	d808      	bhi.n	8001174 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001162:	2200      	movs	r2, #0
 8001164:	6879      	ldr	r1, [r7, #4]
 8001166:	2036      	movs	r0, #54	; 0x36
 8001168:	f001 ff58 	bl	800301c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800116c:	4a0a      	ldr	r2, [pc, #40]	; (8001198 <HAL_InitTick+0xf0>)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	6013      	str	r3, [r2, #0]
 8001172:	e002      	b.n	800117a <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8001174:	2301      	movs	r3, #1
 8001176:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800117a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800117e:	4618      	mov	r0, r3
 8001180:	3738      	adds	r7, #56	; 0x38
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	40021000 	.word	0x40021000
 800118c:	431bde83 	.word	0x431bde83
 8001190:	2000036c 	.word	0x2000036c
 8001194:	40001000 	.word	0x40001000
 8001198:	20000004 	.word	0x20000004

0800119c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011a0:	e7fe      	b.n	80011a0 <NMI_Handler+0x4>

080011a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011a2:	b480      	push	{r7}
 80011a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011a6:	e7fe      	b.n	80011a6 <HardFault_Handler+0x4>

080011a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011ac:	e7fe      	b.n	80011ac <MemManage_Handler+0x4>

080011ae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011ae:	b480      	push	{r7}
 80011b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011b2:	e7fe      	b.n	80011b2 <BusFault_Handler+0x4>

080011b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011b8:	e7fe      	b.n	80011b8 <UsageFault_Handler+0x4>

080011ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011ba:	b480      	push	{r7}
 80011bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011be:	bf00      	nop
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr

080011c8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80011cc:	4802      	ldr	r0, [pc, #8]	; (80011d8 <DMA1_Channel1_IRQHandler+0x10>)
 80011ce:	f002 f872 	bl	80032b6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80011d2:	bf00      	nop
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	20000198 	.word	0x20000198

080011dc <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80011e0:	4802      	ldr	r0, [pc, #8]	; (80011ec <ADC1_IRQHandler+0x10>)
 80011e2:	f000 fc6f 	bl	8001ac4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 80011e6:	bf00      	nop
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	20000130 	.word	0x20000130

080011f0 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 80011f4:	4802      	ldr	r0, [pc, #8]	; (8001200 <SDMMC1_IRQHandler+0x10>)
 80011f6:	f005 fb6b 	bl	80068d0 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 80011fa:	bf00      	nop
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	20000220 	.word	0x20000220

08001204 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001208:	4802      	ldr	r0, [pc, #8]	; (8001214 <TIM6_DAC_IRQHandler+0x10>)
 800120a:	f006 feaf 	bl	8007f6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800120e:	bf00      	nop
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	2000036c 	.word	0x2000036c

08001218 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800121c:	4b06      	ldr	r3, [pc, #24]	; (8001238 <SystemInit+0x20>)
 800121e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001222:	4a05      	ldr	r2, [pc, #20]	; (8001238 <SystemInit+0x20>)
 8001224:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001228:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800122c:	bf00      	nop
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr
 8001236:	bf00      	nop
 8001238:	e000ed00 	.word	0xe000ed00

0800123c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800123c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001274 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001240:	f7ff ffea 	bl	8001218 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001244:	480c      	ldr	r0, [pc, #48]	; (8001278 <LoopForever+0x6>)
  ldr r1, =_edata
 8001246:	490d      	ldr	r1, [pc, #52]	; (800127c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001248:	4a0d      	ldr	r2, [pc, #52]	; (8001280 <LoopForever+0xe>)
  movs r3, #0
 800124a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800124c:	e002      	b.n	8001254 <LoopCopyDataInit>

0800124e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800124e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001250:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001252:	3304      	adds	r3, #4

08001254 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001254:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001256:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001258:	d3f9      	bcc.n	800124e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800125a:	4a0a      	ldr	r2, [pc, #40]	; (8001284 <LoopForever+0x12>)
  ldr r4, =_ebss
 800125c:	4c0a      	ldr	r4, [pc, #40]	; (8001288 <LoopForever+0x16>)
  movs r3, #0
 800125e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001260:	e001      	b.n	8001266 <LoopFillZerobss>

08001262 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001262:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001264:	3204      	adds	r2, #4

08001266 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001266:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001268:	d3fb      	bcc.n	8001262 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800126a:	f00b fe6f 	bl	800cf4c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800126e:	f7ff f899 	bl	80003a4 <main>

08001272 <LoopForever>:

LoopForever:
    b LoopForever
 8001272:	e7fe      	b.n	8001272 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001274:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001278:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800127c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001280:	0800d2f4 	.word	0x0800d2f4
  ldr r2, =_sbss
 8001284:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001288:	20001da4 	.word	0x20001da4

0800128c <CAN1_RX0_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800128c:	e7fe      	b.n	800128c <CAN1_RX0_IRQHandler>

0800128e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800128e:	b580      	push	{r7, lr}
 8001290:	b082      	sub	sp, #8
 8001292:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001294:	2300      	movs	r3, #0
 8001296:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001298:	2003      	movs	r0, #3
 800129a:	f001 feb4 	bl	8003006 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800129e:	200f      	movs	r0, #15
 80012a0:	f7ff ff02 	bl	80010a8 <HAL_InitTick>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d002      	beq.n	80012b0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80012aa:	2301      	movs	r3, #1
 80012ac:	71fb      	strb	r3, [r7, #7]
 80012ae:	e001      	b.n	80012b4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80012b0:	f7ff fd26 	bl	8000d00 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80012b4:	79fb      	ldrb	r3, [r7, #7]
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	3708      	adds	r7, #8
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
	...

080012c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80012c4:	4b06      	ldr	r3, [pc, #24]	; (80012e0 <HAL_IncTick+0x20>)
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	461a      	mov	r2, r3
 80012ca:	4b06      	ldr	r3, [pc, #24]	; (80012e4 <HAL_IncTick+0x24>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4413      	add	r3, r2
 80012d0:	4a04      	ldr	r2, [pc, #16]	; (80012e4 <HAL_IncTick+0x24>)
 80012d2:	6013      	str	r3, [r2, #0]
}
 80012d4:	bf00      	nop
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop
 80012e0:	20000008 	.word	0x20000008
 80012e4:	200003b8 	.word	0x200003b8

080012e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
  return uwTick;
 80012ec:	4b03      	ldr	r3, [pc, #12]	; (80012fc <HAL_GetTick+0x14>)
 80012ee:	681b      	ldr	r3, [r3, #0]
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr
 80012fa:	bf00      	nop
 80012fc:	200003b8 	.word	0x200003b8

08001300 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b084      	sub	sp, #16
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001308:	f7ff ffee 	bl	80012e8 <HAL_GetTick>
 800130c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001318:	d005      	beq.n	8001326 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800131a:	4b0a      	ldr	r3, [pc, #40]	; (8001344 <HAL_Delay+0x44>)
 800131c:	781b      	ldrb	r3, [r3, #0]
 800131e:	461a      	mov	r2, r3
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	4413      	add	r3, r2
 8001324:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001326:	bf00      	nop
 8001328:	f7ff ffde 	bl	80012e8 <HAL_GetTick>
 800132c:	4602      	mov	r2, r0
 800132e:	68bb      	ldr	r3, [r7, #8]
 8001330:	1ad3      	subs	r3, r2, r3
 8001332:	68fa      	ldr	r2, [r7, #12]
 8001334:	429a      	cmp	r2, r3
 8001336:	d8f7      	bhi.n	8001328 <HAL_Delay+0x28>
  {
  }
}
 8001338:	bf00      	nop
 800133a:	bf00      	nop
 800133c:	3710      	adds	r7, #16
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	20000008 	.word	0x20000008

08001348 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001348:	b480      	push	{r7}
 800134a:	b083      	sub	sp, #12
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
 8001350:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	689b      	ldr	r3, [r3, #8]
 8001356:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	431a      	orrs	r2, r3
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	609a      	str	r2, [r3, #8]
}
 8001362:	bf00      	nop
 8001364:	370c      	adds	r7, #12
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr

0800136e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800136e:	b480      	push	{r7}
 8001370:	b083      	sub	sp, #12
 8001372:	af00      	add	r7, sp, #0
 8001374:	6078      	str	r0, [r7, #4]
 8001376:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	689b      	ldr	r3, [r3, #8]
 800137c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	431a      	orrs	r2, r3
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	609a      	str	r2, [r3, #8]
}
 8001388:	bf00      	nop
 800138a:	370c      	adds	r7, #12
 800138c:	46bd      	mov	sp, r7
 800138e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001392:	4770      	bx	lr

08001394 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001394:	b480      	push	{r7}
 8001396:	b083      	sub	sp, #12
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	689b      	ldr	r3, [r3, #8]
 80013a0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	370c      	adds	r7, #12
 80013a8:	46bd      	mov	sp, r7
 80013aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ae:	4770      	bx	lr

080013b0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b087      	sub	sp, #28
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	60f8      	str	r0, [r7, #12]
 80013b8:	60b9      	str	r1, [r7, #8]
 80013ba:	607a      	str	r2, [r7, #4]
 80013bc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	3360      	adds	r3, #96	; 0x60
 80013c2:	461a      	mov	r2, r3
 80013c4:	68bb      	ldr	r3, [r7, #8]
 80013c6:	009b      	lsls	r3, r3, #2
 80013c8:	4413      	add	r3, r2
 80013ca:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80013cc:	697b      	ldr	r3, [r7, #20]
 80013ce:	681a      	ldr	r2, [r3, #0]
 80013d0:	4b08      	ldr	r3, [pc, #32]	; (80013f4 <LL_ADC_SetOffset+0x44>)
 80013d2:	4013      	ands	r3, r2
 80013d4:	687a      	ldr	r2, [r7, #4]
 80013d6:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80013da:	683a      	ldr	r2, [r7, #0]
 80013dc:	430a      	orrs	r2, r1
 80013de:	4313      	orrs	r3, r2
 80013e0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80013e8:	bf00      	nop
 80013ea:	371c      	adds	r7, #28
 80013ec:	46bd      	mov	sp, r7
 80013ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f2:	4770      	bx	lr
 80013f4:	03fff000 	.word	0x03fff000

080013f8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b085      	sub	sp, #20
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
 8001400:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	3360      	adds	r3, #96	; 0x60
 8001406:	461a      	mov	r2, r3
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	009b      	lsls	r3, r3, #2
 800140c:	4413      	add	r3, r2
 800140e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001418:	4618      	mov	r0, r3
 800141a:	3714      	adds	r7, #20
 800141c:	46bd      	mov	sp, r7
 800141e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001422:	4770      	bx	lr

08001424 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001424:	b480      	push	{r7}
 8001426:	b087      	sub	sp, #28
 8001428:	af00      	add	r7, sp, #0
 800142a:	60f8      	str	r0, [r7, #12]
 800142c:	60b9      	str	r1, [r7, #8]
 800142e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	3360      	adds	r3, #96	; 0x60
 8001434:	461a      	mov	r2, r3
 8001436:	68bb      	ldr	r3, [r7, #8]
 8001438:	009b      	lsls	r3, r3, #2
 800143a:	4413      	add	r3, r2
 800143c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800143e:	697b      	ldr	r3, [r7, #20]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	431a      	orrs	r2, r3
 800144a:	697b      	ldr	r3, [r7, #20]
 800144c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800144e:	bf00      	nop
 8001450:	371c      	adds	r7, #28
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr

0800145a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800145a:	b480      	push	{r7}
 800145c:	b083      	sub	sp, #12
 800145e:	af00      	add	r7, sp, #0
 8001460:	6078      	str	r0, [r7, #4]
 8001462:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	695b      	ldr	r3, [r3, #20]
 8001468:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	431a      	orrs	r2, r3
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	615a      	str	r2, [r3, #20]
}
 8001474:	bf00      	nop
 8001476:	370c      	adds	r7, #12
 8001478:	46bd      	mov	sp, r7
 800147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147e:	4770      	bx	lr

08001480 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001480:	b480      	push	{r7}
 8001482:	b083      	sub	sp, #12
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	68db      	ldr	r3, [r3, #12]
 800148c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001490:	2b00      	cmp	r3, #0
 8001492:	d101      	bne.n	8001498 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001494:	2301      	movs	r3, #1
 8001496:	e000      	b.n	800149a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001498:	2300      	movs	r3, #0
}
 800149a:	4618      	mov	r0, r3
 800149c:	370c      	adds	r7, #12
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr

080014a6 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80014a6:	b480      	push	{r7}
 80014a8:	b087      	sub	sp, #28
 80014aa:	af00      	add	r7, sp, #0
 80014ac:	60f8      	str	r0, [r7, #12]
 80014ae:	60b9      	str	r1, [r7, #8]
 80014b0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	3330      	adds	r3, #48	; 0x30
 80014b6:	461a      	mov	r2, r3
 80014b8:	68bb      	ldr	r3, [r7, #8]
 80014ba:	0a1b      	lsrs	r3, r3, #8
 80014bc:	009b      	lsls	r3, r3, #2
 80014be:	f003 030c 	and.w	r3, r3, #12
 80014c2:	4413      	add	r3, r2
 80014c4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80014c6:	697b      	ldr	r3, [r7, #20]
 80014c8:	681a      	ldr	r2, [r3, #0]
 80014ca:	68bb      	ldr	r3, [r7, #8]
 80014cc:	f003 031f 	and.w	r3, r3, #31
 80014d0:	211f      	movs	r1, #31
 80014d2:	fa01 f303 	lsl.w	r3, r1, r3
 80014d6:	43db      	mvns	r3, r3
 80014d8:	401a      	ands	r2, r3
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	0e9b      	lsrs	r3, r3, #26
 80014de:	f003 011f 	and.w	r1, r3, #31
 80014e2:	68bb      	ldr	r3, [r7, #8]
 80014e4:	f003 031f 	and.w	r3, r3, #31
 80014e8:	fa01 f303 	lsl.w	r3, r1, r3
 80014ec:	431a      	orrs	r2, r3
 80014ee:	697b      	ldr	r3, [r7, #20]
 80014f0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80014f2:	bf00      	nop
 80014f4:	371c      	adds	r7, #28
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr

080014fe <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80014fe:	b480      	push	{r7}
 8001500:	b083      	sub	sp, #12
 8001502:	af00      	add	r7, sp, #0
 8001504:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800150a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d101      	bne.n	8001516 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001512:	2301      	movs	r3, #1
 8001514:	e000      	b.n	8001518 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8001516:	2300      	movs	r3, #0
}
 8001518:	4618      	mov	r0, r3
 800151a:	370c      	adds	r7, #12
 800151c:	46bd      	mov	sp, r7
 800151e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001522:	4770      	bx	lr

08001524 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001524:	b480      	push	{r7}
 8001526:	b087      	sub	sp, #28
 8001528:	af00      	add	r7, sp, #0
 800152a:	60f8      	str	r0, [r7, #12]
 800152c:	60b9      	str	r1, [r7, #8]
 800152e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	3314      	adds	r3, #20
 8001534:	461a      	mov	r2, r3
 8001536:	68bb      	ldr	r3, [r7, #8]
 8001538:	0e5b      	lsrs	r3, r3, #25
 800153a:	009b      	lsls	r3, r3, #2
 800153c:	f003 0304 	and.w	r3, r3, #4
 8001540:	4413      	add	r3, r2
 8001542:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	681a      	ldr	r2, [r3, #0]
 8001548:	68bb      	ldr	r3, [r7, #8]
 800154a:	0d1b      	lsrs	r3, r3, #20
 800154c:	f003 031f 	and.w	r3, r3, #31
 8001550:	2107      	movs	r1, #7
 8001552:	fa01 f303 	lsl.w	r3, r1, r3
 8001556:	43db      	mvns	r3, r3
 8001558:	401a      	ands	r2, r3
 800155a:	68bb      	ldr	r3, [r7, #8]
 800155c:	0d1b      	lsrs	r3, r3, #20
 800155e:	f003 031f 	and.w	r3, r3, #31
 8001562:	6879      	ldr	r1, [r7, #4]
 8001564:	fa01 f303 	lsl.w	r3, r1, r3
 8001568:	431a      	orrs	r2, r3
 800156a:	697b      	ldr	r3, [r7, #20]
 800156c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800156e:	bf00      	nop
 8001570:	371c      	adds	r7, #28
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr
	...

0800157c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800157c:	b480      	push	{r7}
 800157e:	b085      	sub	sp, #20
 8001580:	af00      	add	r7, sp, #0
 8001582:	60f8      	str	r0, [r7, #12]
 8001584:	60b9      	str	r1, [r7, #8]
 8001586:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800158e:	68bb      	ldr	r3, [r7, #8]
 8001590:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001594:	43db      	mvns	r3, r3
 8001596:	401a      	ands	r2, r3
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	f003 0318 	and.w	r3, r3, #24
 800159e:	4908      	ldr	r1, [pc, #32]	; (80015c0 <LL_ADC_SetChannelSingleDiff+0x44>)
 80015a0:	40d9      	lsrs	r1, r3
 80015a2:	68bb      	ldr	r3, [r7, #8]
 80015a4:	400b      	ands	r3, r1
 80015a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80015aa:	431a      	orrs	r2, r3
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80015b2:	bf00      	nop
 80015b4:	3714      	adds	r7, #20
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr
 80015be:	bf00      	nop
 80015c0:	0007ffff 	.word	0x0007ffff

080015c4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b083      	sub	sp, #12
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	689b      	ldr	r3, [r3, #8]
 80015d0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80015d4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80015d8:	687a      	ldr	r2, [r7, #4]
 80015da:	6093      	str	r3, [r2, #8]
}
 80015dc:	bf00      	nop
 80015de:	370c      	adds	r7, #12
 80015e0:	46bd      	mov	sp, r7
 80015e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e6:	4770      	bx	lr

080015e8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b083      	sub	sp, #12
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	689b      	ldr	r3, [r3, #8]
 80015f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80015f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80015fc:	d101      	bne.n	8001602 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80015fe:	2301      	movs	r3, #1
 8001600:	e000      	b.n	8001604 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001602:	2300      	movs	r3, #0
}
 8001604:	4618      	mov	r0, r3
 8001606:	370c      	adds	r7, #12
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr

08001610 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001610:	b480      	push	{r7}
 8001612:	b083      	sub	sp, #12
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	689b      	ldr	r3, [r3, #8]
 800161c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001620:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001624:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800162c:	bf00      	nop
 800162e:	370c      	adds	r7, #12
 8001630:	46bd      	mov	sp, r7
 8001632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001636:	4770      	bx	lr

08001638 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001638:	b480      	push	{r7}
 800163a:	b083      	sub	sp, #12
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	689b      	ldr	r3, [r3, #8]
 8001644:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001648:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800164c:	d101      	bne.n	8001652 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800164e:	2301      	movs	r3, #1
 8001650:	e000      	b.n	8001654 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001652:	2300      	movs	r3, #0
}
 8001654:	4618      	mov	r0, r3
 8001656:	370c      	adds	r7, #12
 8001658:	46bd      	mov	sp, r7
 800165a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165e:	4770      	bx	lr

08001660 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001660:	b480      	push	{r7}
 8001662:	b083      	sub	sp, #12
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	689b      	ldr	r3, [r3, #8]
 800166c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001670:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001674:	f043 0201 	orr.w	r2, r3, #1
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800167c:	bf00      	nop
 800167e:	370c      	adds	r7, #12
 8001680:	46bd      	mov	sp, r7
 8001682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001686:	4770      	bx	lr

08001688 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001688:	b480      	push	{r7}
 800168a:	b083      	sub	sp, #12
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	689b      	ldr	r3, [r3, #8]
 8001694:	f003 0301 	and.w	r3, r3, #1
 8001698:	2b01      	cmp	r3, #1
 800169a:	d101      	bne.n	80016a0 <LL_ADC_IsEnabled+0x18>
 800169c:	2301      	movs	r3, #1
 800169e:	e000      	b.n	80016a2 <LL_ADC_IsEnabled+0x1a>
 80016a0:	2300      	movs	r3, #0
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	370c      	adds	r7, #12
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr

080016ae <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80016ae:	b480      	push	{r7}
 80016b0:	b083      	sub	sp, #12
 80016b2:	af00      	add	r7, sp, #0
 80016b4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	689b      	ldr	r3, [r3, #8]
 80016ba:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80016be:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80016c2:	f043 0204 	orr.w	r2, r3, #4
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80016ca:	bf00      	nop
 80016cc:	370c      	adds	r7, #12
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr

080016d6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80016d6:	b480      	push	{r7}
 80016d8:	b083      	sub	sp, #12
 80016da:	af00      	add	r7, sp, #0
 80016dc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	689b      	ldr	r3, [r3, #8]
 80016e2:	f003 0304 	and.w	r3, r3, #4
 80016e6:	2b04      	cmp	r3, #4
 80016e8:	d101      	bne.n	80016ee <LL_ADC_REG_IsConversionOngoing+0x18>
 80016ea:	2301      	movs	r3, #1
 80016ec:	e000      	b.n	80016f0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80016ee:	2300      	movs	r3, #0
}
 80016f0:	4618      	mov	r0, r3
 80016f2:	370c      	adds	r7, #12
 80016f4:	46bd      	mov	sp, r7
 80016f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fa:	4770      	bx	lr

080016fc <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b083      	sub	sp, #12
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	689b      	ldr	r3, [r3, #8]
 8001708:	f003 0308 	and.w	r3, r3, #8
 800170c:	2b08      	cmp	r3, #8
 800170e:	d101      	bne.n	8001714 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001710:	2301      	movs	r3, #1
 8001712:	e000      	b.n	8001716 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001714:	2300      	movs	r3, #0
}
 8001716:	4618      	mov	r0, r3
 8001718:	370c      	adds	r7, #12
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr
	...

08001724 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b088      	sub	sp, #32
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800172c:	2300      	movs	r3, #0
 800172e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001730:	2300      	movs	r3, #0
 8001732:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d101      	bne.n	800173e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800173a:	2301      	movs	r3, #1
 800173c:	e12f      	b.n	800199e <HAL_ADC_Init+0x27a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	691b      	ldr	r3, [r3, #16]
 8001742:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001748:	2b00      	cmp	r3, #0
 800174a:	d109      	bne.n	8001760 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800174c:	6878      	ldr	r0, [r7, #4]
 800174e:	f7ff faff 	bl	8000d50 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2200      	movs	r2, #0
 8001756:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2200      	movs	r2, #0
 800175c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4618      	mov	r0, r3
 8001766:	f7ff ff3f 	bl	80015e8 <LL_ADC_IsDeepPowerDownEnabled>
 800176a:	4603      	mov	r3, r0
 800176c:	2b00      	cmp	r3, #0
 800176e:	d004      	beq.n	800177a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4618      	mov	r0, r3
 8001776:	f7ff ff25 	bl	80015c4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4618      	mov	r0, r3
 8001780:	f7ff ff5a 	bl	8001638 <LL_ADC_IsInternalRegulatorEnabled>
 8001784:	4603      	mov	r3, r0
 8001786:	2b00      	cmp	r3, #0
 8001788:	d115      	bne.n	80017b6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4618      	mov	r0, r3
 8001790:	f7ff ff3e 	bl	8001610 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001794:	4b84      	ldr	r3, [pc, #528]	; (80019a8 <HAL_ADC_Init+0x284>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	099b      	lsrs	r3, r3, #6
 800179a:	4a84      	ldr	r2, [pc, #528]	; (80019ac <HAL_ADC_Init+0x288>)
 800179c:	fba2 2303 	umull	r2, r3, r2, r3
 80017a0:	099b      	lsrs	r3, r3, #6
 80017a2:	3301      	adds	r3, #1
 80017a4:	005b      	lsls	r3, r3, #1
 80017a6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80017a8:	e002      	b.n	80017b0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80017aa:	68bb      	ldr	r3, [r7, #8]
 80017ac:	3b01      	subs	r3, #1
 80017ae:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80017b0:	68bb      	ldr	r3, [r7, #8]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d1f9      	bne.n	80017aa <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4618      	mov	r0, r3
 80017bc:	f7ff ff3c 	bl	8001638 <LL_ADC_IsInternalRegulatorEnabled>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d10d      	bne.n	80017e2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017ca:	f043 0210 	orr.w	r2, r3, #16
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017d6:	f043 0201 	orr.w	r2, r3, #1
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80017de:	2301      	movs	r3, #1
 80017e0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4618      	mov	r0, r3
 80017e8:	f7ff ff75 	bl	80016d6 <LL_ADC_REG_IsConversionOngoing>
 80017ec:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017f2:	f003 0310 	and.w	r3, r3, #16
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	f040 80c8 	bne.w	800198c <HAL_ADC_Init+0x268>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	f040 80c4 	bne.w	800198c <HAL_ADC_Init+0x268>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001808:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800180c:	f043 0202 	orr.w	r2, r3, #2
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4618      	mov	r0, r3
 800181a:	f7ff ff35 	bl	8001688 <LL_ADC_IsEnabled>
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	d10b      	bne.n	800183c <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001824:	4862      	ldr	r0, [pc, #392]	; (80019b0 <HAL_ADC_Init+0x28c>)
 8001826:	f7ff ff2f 	bl	8001688 <LL_ADC_IsEnabled>
 800182a:	4603      	mov	r3, r0
 800182c:	2b00      	cmp	r3, #0
 800182e:	d105      	bne.n	800183c <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	4619      	mov	r1, r3
 8001836:	485f      	ldr	r0, [pc, #380]	; (80019b4 <HAL_ADC_Init+0x290>)
 8001838:	f7ff fd86 	bl	8001348 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	7e5b      	ldrb	r3, [r3, #25]
 8001840:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001846:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 800184c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001852:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	f893 3020 	ldrb.w	r3, [r3, #32]
 800185a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800185c:	4313      	orrs	r3, r2
 800185e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001866:	2b01      	cmp	r3, #1
 8001868:	d106      	bne.n	8001878 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800186e:	3b01      	subs	r3, #1
 8001870:	045b      	lsls	r3, r3, #17
 8001872:	69ba      	ldr	r2, [r7, #24]
 8001874:	4313      	orrs	r3, r2
 8001876:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800187c:	2b00      	cmp	r3, #0
 800187e:	d009      	beq.n	8001894 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001884:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800188c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800188e:	69ba      	ldr	r2, [r7, #24]
 8001890:	4313      	orrs	r3, r2
 8001892:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	68da      	ldr	r2, [r3, #12]
 800189a:	4b47      	ldr	r3, [pc, #284]	; (80019b8 <HAL_ADC_Init+0x294>)
 800189c:	4013      	ands	r3, r2
 800189e:	687a      	ldr	r2, [r7, #4]
 80018a0:	6812      	ldr	r2, [r2, #0]
 80018a2:	69b9      	ldr	r1, [r7, #24]
 80018a4:	430b      	orrs	r3, r1
 80018a6:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4618      	mov	r0, r3
 80018ae:	f7ff ff12 	bl	80016d6 <LL_ADC_REG_IsConversionOngoing>
 80018b2:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4618      	mov	r0, r3
 80018ba:	f7ff ff1f 	bl	80016fc <LL_ADC_INJ_IsConversionOngoing>
 80018be:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80018c0:	693b      	ldr	r3, [r7, #16]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d140      	bne.n	8001948 <HAL_ADC_Init+0x224>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d13d      	bne.n	8001948 <HAL_ADC_Init+0x224>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	7e1b      	ldrb	r3, [r3, #24]
 80018d4:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80018d6:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80018de:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80018e0:	4313      	orrs	r3, r2
 80018e2:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	68db      	ldr	r3, [r3, #12]
 80018ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80018ee:	f023 0306 	bic.w	r3, r3, #6
 80018f2:	687a      	ldr	r2, [r7, #4]
 80018f4:	6812      	ldr	r2, [r2, #0]
 80018f6:	69b9      	ldr	r1, [r7, #24]
 80018f8:	430b      	orrs	r3, r1
 80018fa:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001902:	2b01      	cmp	r3, #1
 8001904:	d118      	bne.n	8001938 <HAL_ADC_Init+0x214>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	691b      	ldr	r3, [r3, #16]
 800190c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001910:	f023 0304 	bic.w	r3, r3, #4
 8001914:	687a      	ldr	r2, [r7, #4]
 8001916:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001918:	687a      	ldr	r2, [r7, #4]
 800191a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800191c:	4311      	orrs	r1, r2
 800191e:	687a      	ldr	r2, [r7, #4]
 8001920:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001922:	4311      	orrs	r1, r2
 8001924:	687a      	ldr	r2, [r7, #4]
 8001926:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001928:	430a      	orrs	r2, r1
 800192a:	431a      	orrs	r2, r3
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f042 0201 	orr.w	r2, r2, #1
 8001934:	611a      	str	r2, [r3, #16]
 8001936:	e007      	b.n	8001948 <HAL_ADC_Init+0x224>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	691a      	ldr	r2, [r3, #16]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f022 0201 	bic.w	r2, r2, #1
 8001946:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	691b      	ldr	r3, [r3, #16]
 800194c:	2b01      	cmp	r3, #1
 800194e:	d10c      	bne.n	800196a <HAL_ADC_Init+0x246>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001956:	f023 010f 	bic.w	r1, r3, #15
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	69db      	ldr	r3, [r3, #28]
 800195e:	1e5a      	subs	r2, r3, #1
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	430a      	orrs	r2, r1
 8001966:	631a      	str	r2, [r3, #48]	; 0x30
 8001968:	e007      	b.n	800197a <HAL_ADC_Init+0x256>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f022 020f 	bic.w	r2, r2, #15
 8001978:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800197e:	f023 0303 	bic.w	r3, r3, #3
 8001982:	f043 0201 	orr.w	r2, r3, #1
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	659a      	str	r2, [r3, #88]	; 0x58
 800198a:	e007      	b.n	800199c <HAL_ADC_Init+0x278>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001990:	f043 0210 	orr.w	r2, r3, #16
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001998:	2301      	movs	r3, #1
 800199a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800199c:	7ffb      	ldrb	r3, [r7, #31]
}
 800199e:	4618      	mov	r0, r3
 80019a0:	3720      	adds	r7, #32
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	20000000 	.word	0x20000000
 80019ac:	053e2d63 	.word	0x053e2d63
 80019b0:	50040000 	.word	0x50040000
 80019b4:	50040300 	.word	0x50040300
 80019b8:	fff0c007 	.word	0xfff0c007

080019bc <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b086      	sub	sp, #24
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	60f8      	str	r0, [r7, #12]
 80019c4:	60b9      	str	r1, [r7, #8]
 80019c6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4618      	mov	r0, r3
 80019ce:	f7ff fe82 	bl	80016d6 <LL_ADC_REG_IsConversionOngoing>
 80019d2:	4603      	mov	r3, r0
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d167      	bne.n	8001aa8 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80019de:	2b01      	cmp	r3, #1
 80019e0:	d101      	bne.n	80019e6 <HAL_ADC_Start_DMA+0x2a>
 80019e2:	2302      	movs	r3, #2
 80019e4:	e063      	b.n	8001aae <HAL_ADC_Start_DMA+0xf2>
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	2201      	movs	r2, #1
 80019ea:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80019ee:	68f8      	ldr	r0, [r7, #12]
 80019f0:	f000 fe36 	bl	8002660 <ADC_Enable>
 80019f4:	4603      	mov	r3, r0
 80019f6:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80019f8:	7dfb      	ldrb	r3, [r7, #23]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d14f      	bne.n	8001a9e <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a02:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001a06:	f023 0301 	bic.w	r3, r3, #1
 8001a0a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	659a      	str	r2, [r3, #88]	; 0x58
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a16:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d006      	beq.n	8001a2c <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a22:	f023 0206 	bic.w	r2, r3, #6
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	65da      	str	r2, [r3, #92]	; 0x5c
 8001a2a:	e002      	b.n	8001a32 <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	2200      	movs	r2, #0
 8001a30:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a36:	4a20      	ldr	r2, [pc, #128]	; (8001ab8 <HAL_ADC_Start_DMA+0xfc>)
 8001a38:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a3e:	4a1f      	ldr	r2, [pc, #124]	; (8001abc <HAL_ADC_Start_DMA+0x100>)
 8001a40:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a46:	4a1e      	ldr	r2, [pc, #120]	; (8001ac0 <HAL_ADC_Start_DMA+0x104>)
 8001a48:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	221c      	movs	r2, #28
 8001a50:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	2200      	movs	r2, #0
 8001a56:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	685a      	ldr	r2, [r3, #4]
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f042 0210 	orr.w	r2, r2, #16
 8001a68:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	68da      	ldr	r2, [r3, #12]
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f042 0201 	orr.w	r2, r2, #1
 8001a78:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	3340      	adds	r3, #64	; 0x40
 8001a84:	4619      	mov	r1, r3
 8001a86:	68ba      	ldr	r2, [r7, #8]
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	f001 fb99 	bl	80031c0 <HAL_DMA_Start_IT>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4618      	mov	r0, r3
 8001a98:	f7ff fe09 	bl	80016ae <LL_ADC_REG_StartConversion>
 8001a9c:	e006      	b.n	8001aac <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8001aa6:	e001      	b.n	8001aac <HAL_ADC_Start_DMA+0xf0>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001aa8:	2302      	movs	r3, #2
 8001aaa:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001aac:	7dfb      	ldrb	r3, [r7, #23]
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	3718      	adds	r7, #24
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	0800276d 	.word	0x0800276d
 8001abc:	08002845 	.word	0x08002845
 8001ac0:	08002861 	.word	0x08002861

08001ac4 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b088      	sub	sp, #32
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8001acc:	2300      	movs	r3, #0
 8001ace:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001ae0:	69bb      	ldr	r3, [r7, #24]
 8001ae2:	f003 0302 	and.w	r3, r3, #2
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d017      	beq.n	8001b1a <HAL_ADC_IRQHandler+0x56>
 8001aea:	697b      	ldr	r3, [r7, #20]
 8001aec:	f003 0302 	and.w	r3, r3, #2
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d012      	beq.n	8001b1a <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001af8:	f003 0310 	and.w	r3, r3, #16
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d105      	bne.n	8001b0c <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b04:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	659a      	str	r2, [r3, #88]	; 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001b0c:	6878      	ldr	r0, [r7, #4]
 8001b0e:	f000 fee9 	bl	80028e4 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	2202      	movs	r2, #2
 8001b18:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001b1a:	69bb      	ldr	r3, [r7, #24]
 8001b1c:	f003 0304 	and.w	r3, r3, #4
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d004      	beq.n	8001b2e <HAL_ADC_IRQHandler+0x6a>
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	f003 0304 	and.w	r3, r3, #4
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d109      	bne.n	8001b42 <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001b2e:	69bb      	ldr	r3, [r7, #24]
 8001b30:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d05e      	beq.n	8001bf6 <HAL_ADC_IRQHandler+0x132>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	f003 0308 	and.w	r3, r3, #8
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d059      	beq.n	8001bf6 <HAL_ADC_IRQHandler+0x132>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b46:	f003 0310 	and.w	r3, r3, #16
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d105      	bne.n	8001b5a <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b52:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f7ff fc8e 	bl	8001480 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001b64:	4603      	mov	r3, r0
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d03e      	beq.n	8001be8 <HAL_ADC_IRQHandler+0x124>
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
      }
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	68db      	ldr	r3, [r3, #12]
 8001b70:	613b      	str	r3, [r7, #16]
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d135      	bne.n	8001be8 <HAL_ADC_IRQHandler+0x124>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f003 0308 	and.w	r3, r3, #8
 8001b86:	2b08      	cmp	r3, #8
 8001b88:	d12e      	bne.n	8001be8 <HAL_ADC_IRQHandler+0x124>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f7ff fda1 	bl	80016d6 <LL_ADC_REG_IsConversionOngoing>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d11a      	bne.n	8001bd0 <HAL_ADC_IRQHandler+0x10c>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	685a      	ldr	r2, [r3, #4]
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f022 020c 	bic.w	r2, r2, #12
 8001ba8:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	659a      	str	r2, [r3, #88]	; 0x58

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d112      	bne.n	8001be8 <HAL_ADC_IRQHandler+0x124>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bc6:	f043 0201 	orr.w	r2, r3, #1
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	659a      	str	r2, [r3, #88]	; 0x58
 8001bce:	e00b      	b.n	8001be8 <HAL_ADC_IRQHandler+0x124>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bd4:	f043 0210 	orr.w	r2, r3, #16
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001be0:	f043 0201 	orr.w	r2, r3, #1
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	65da      	str	r2, [r3, #92]	; 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001be8:	6878      	ldr	r0, [r7, #4]
 8001bea:	f7fe fb29 	bl	8000240 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	220c      	movs	r2, #12
 8001bf4:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001bf6:	69bb      	ldr	r3, [r7, #24]
 8001bf8:	f003 0320 	and.w	r3, r3, #32
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d004      	beq.n	8001c0a <HAL_ADC_IRQHandler+0x146>
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	f003 0320 	and.w	r3, r3, #32
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d109      	bne.n	8001c1e <HAL_ADC_IRQHandler+0x15a>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001c0a:	69bb      	ldr	r3, [r7, #24]
 8001c0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d072      	beq.n	8001cfa <HAL_ADC_IRQHandler+0x236>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d06d      	beq.n	8001cfa <HAL_ADC_IRQHandler+0x236>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c22:	f003 0310 	and.w	r3, r3, #16
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d105      	bne.n	8001c36 <HAL_ADC_IRQHandler+0x172>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c2e:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f7ff fc5f 	bl	80014fe <LL_ADC_INJ_IsTriggerSourceSWStart>
 8001c40:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4618      	mov	r0, r3
 8001c48:	f7ff fc1a 	bl	8001480 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001c4c:	60b8      	str	r0, [r7, #8]
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
    }
#else
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	68db      	ldr	r3, [r3, #12]
 8001c54:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d047      	beq.n	8001cec <HAL_ADC_IRQHandler+0x228>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8001c5c:	693b      	ldr	r3, [r7, #16]
 8001c5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d007      	beq.n	8001c76 <HAL_ADC_IRQHandler+0x1b2>
 8001c66:	68bb      	ldr	r3, [r7, #8]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d03f      	beq.n	8001cec <HAL_ADC_IRQHandler+0x228>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8001c6c:	693b      	ldr	r3, [r7, #16]
 8001c6e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d13a      	bne.n	8001cec <HAL_ADC_IRQHandler+0x228>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c80:	2b40      	cmp	r3, #64	; 0x40
 8001c82:	d133      	bne.n	8001cec <HAL_ADC_IRQHandler+0x228>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d12e      	bne.n	8001cec <HAL_ADC_IRQHandler+0x228>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4618      	mov	r0, r3
 8001c94:	f7ff fd32 	bl	80016fc <LL_ADC_INJ_IsConversionOngoing>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d11a      	bne.n	8001cd4 <HAL_ADC_IRQHandler+0x210>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	685a      	ldr	r2, [r3, #4]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001cac:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cb2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	659a      	str	r2, [r3, #88]	; 0x58

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d112      	bne.n	8001cec <HAL_ADC_IRQHandler+0x228>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cca:	f043 0201 	orr.w	r2, r3, #1
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	659a      	str	r2, [r3, #88]	; 0x58
 8001cd2:	e00b      	b.n	8001cec <HAL_ADC_IRQHandler+0x228>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cd8:	f043 0210 	orr.w	r2, r3, #16
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	659a      	str	r2, [r3, #88]	; 0x58

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ce4:	f043 0201 	orr.w	r2, r3, #1
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	65da      	str	r2, [r3, #92]	; 0x5c
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001cec:	6878      	ldr	r0, [r7, #4]
 8001cee:	f000 fdd1 	bl	8002894 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	2260      	movs	r2, #96	; 0x60
 8001cf8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8001cfa:	69bb      	ldr	r3, [r7, #24]
 8001cfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d011      	beq.n	8001d28 <HAL_ADC_IRQHandler+0x264>
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d00c      	beq.n	8001d28 <HAL_ADC_IRQHandler+0x264>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d12:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001d1a:	6878      	ldr	r0, [r7, #4]
 8001d1c:	f000 f890 	bl	8001e40 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	2280      	movs	r2, #128	; 0x80
 8001d26:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8001d28:	69bb      	ldr	r3, [r7, #24]
 8001d2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d012      	beq.n	8001d58 <HAL_ADC_IRQHandler+0x294>
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d00d      	beq.n	8001d58 <HAL_ADC_IRQHandler+0x294>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d40:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001d48:	6878      	ldr	r0, [r7, #4]
 8001d4a:	f000 fdb7 	bl	80028bc <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d56:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8001d58:	69bb      	ldr	r3, [r7, #24]
 8001d5a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d012      	beq.n	8001d88 <HAL_ADC_IRQHandler+0x2c4>
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d00d      	beq.n	8001d88 <HAL_ADC_IRQHandler+0x2c4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d70:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001d78:	6878      	ldr	r0, [r7, #4]
 8001d7a:	f000 fda9 	bl	80028d0 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d86:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8001d88:	69bb      	ldr	r3, [r7, #24]
 8001d8a:	f003 0310 	and.w	r3, r3, #16
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d02a      	beq.n	8001de8 <HAL_ADC_IRQHandler+0x324>
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	f003 0310 	and.w	r3, r3, #16
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d025      	beq.n	8001de8 <HAL_ADC_IRQHandler+0x324>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d102      	bne.n	8001daa <HAL_ADC_IRQHandler+0x2e6>
    {
      overrun_error = 1UL;
 8001da4:	2301      	movs	r3, #1
 8001da6:	61fb      	str	r3, [r7, #28]
 8001da8:	e008      	b.n	8001dbc <HAL_ADC_IRQHandler+0x2f8>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	68db      	ldr	r3, [r3, #12]
 8001db0:	f003 0301 	and.w	r3, r3, #1
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d001      	beq.n	8001dbc <HAL_ADC_IRQHandler+0x2f8>
        {
          overrun_error = 1UL;
 8001db8:	2301      	movs	r3, #1
 8001dba:	61fb      	str	r3, [r7, #28]
        }
      }
    }

    if (overrun_error == 1UL)
 8001dbc:	69fb      	ldr	r3, [r7, #28]
 8001dbe:	2b01      	cmp	r3, #1
 8001dc0:	d10e      	bne.n	8001de0 <HAL_ADC_IRQHandler+0x31c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dc6:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dd2:	f043 0202 	orr.w	r2, r3, #2
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	65da      	str	r2, [r3, #92]	; 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001dda:	6878      	ldr	r0, [r7, #4]
 8001ddc:	f000 f83a 	bl	8001e54 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	2210      	movs	r2, #16
 8001de6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8001de8:	69bb      	ldr	r3, [r7, #24]
 8001dea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d018      	beq.n	8001e24 <HAL_ADC_IRQHandler+0x360>
 8001df2:	697b      	ldr	r3, [r7, #20]
 8001df4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d013      	beq.n	8001e24 <HAL_ADC_IRQHandler+0x360>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e00:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e0c:	f043 0208 	orr.w	r2, r3, #8
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e1c:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8001e1e:	6878      	ldr	r0, [r7, #4]
 8001e20:	f000 fd42 	bl	80028a8 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8001e24:	bf00      	nop
 8001e26:	3720      	adds	r7, #32
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}

08001e2c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b083      	sub	sp, #12
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001e34:	bf00      	nop
 8001e36:	370c      	adds	r7, #12
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3e:	4770      	bx	lr

08001e40 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b083      	sub	sp, #12
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001e48:	bf00      	nop
 8001e4a:	370c      	adds	r7, #12
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e52:	4770      	bx	lr

08001e54 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b083      	sub	sp, #12
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001e5c:	bf00      	nop
 8001e5e:	370c      	adds	r7, #12
 8001e60:	46bd      	mov	sp, r7
 8001e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e66:	4770      	bx	lr

08001e68 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b0b6      	sub	sp, #216	; 0xd8
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
 8001e70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e72:	2300      	movs	r3, #0
 8001e74:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001e82:	2b01      	cmp	r3, #1
 8001e84:	d101      	bne.n	8001e8a <HAL_ADC_ConfigChannel+0x22>
 8001e86:	2302      	movs	r3, #2
 8001e88:	e3d5      	b.n	8002636 <HAL_ADC_ConfigChannel+0x7ce>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4618      	mov	r0, r3
 8001e98:	f7ff fc1d 	bl	80016d6 <LL_ADC_REG_IsConversionOngoing>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	f040 83ba 	bne.w	8002618 <HAL_ADC_ConfigChannel+0x7b0>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	2b05      	cmp	r3, #5
 8001eaa:	d824      	bhi.n	8001ef6 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	3b02      	subs	r3, #2
 8001eb2:	2b03      	cmp	r3, #3
 8001eb4:	d81b      	bhi.n	8001eee <HAL_ADC_ConfigChannel+0x86>
 8001eb6:	a201      	add	r2, pc, #4	; (adr r2, 8001ebc <HAL_ADC_ConfigChannel+0x54>)
 8001eb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ebc:	08001ecd 	.word	0x08001ecd
 8001ec0:	08001ed5 	.word	0x08001ed5
 8001ec4:	08001edd 	.word	0x08001edd
 8001ec8:	08001ee5 	.word	0x08001ee5
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	220c      	movs	r2, #12
 8001ed0:	605a      	str	r2, [r3, #4]
          break;
 8001ed2:	e011      	b.n	8001ef8 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	2212      	movs	r2, #18
 8001ed8:	605a      	str	r2, [r3, #4]
          break;
 8001eda:	e00d      	b.n	8001ef8 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	2218      	movs	r2, #24
 8001ee0:	605a      	str	r2, [r3, #4]
          break;
 8001ee2:	e009      	b.n	8001ef8 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001eea:	605a      	str	r2, [r3, #4]
          break;
 8001eec:	e004      	b.n	8001ef8 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	2206      	movs	r2, #6
 8001ef2:	605a      	str	r2, [r3, #4]
          break;
 8001ef4:	e000      	b.n	8001ef8 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8001ef6:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6818      	ldr	r0, [r3, #0]
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	6859      	ldr	r1, [r3, #4]
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	461a      	mov	r2, r3
 8001f06:	f7ff face 	bl	80014a6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f7ff fbe1 	bl	80016d6 <LL_ADC_REG_IsConversionOngoing>
 8001f14:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f7ff fbed 	bl	80016fc <LL_ADC_INJ_IsConversionOngoing>
 8001f22:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001f26:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	f040 81c1 	bne.w	80022b2 <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001f30:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	f040 81bc 	bne.w	80022b2 <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001f42:	d10f      	bne.n	8001f64 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6818      	ldr	r0, [r3, #0]
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	4619      	mov	r1, r3
 8001f50:	f7ff fae8 	bl	8001524 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f7ff fa7c 	bl	800145a <LL_ADC_SetSamplingTimeCommonConfig>
 8001f62:	e00e      	b.n	8001f82 <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6818      	ldr	r0, [r3, #0]
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	6819      	ldr	r1, [r3, #0]
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	461a      	mov	r2, r3
 8001f72:	f7ff fad7 	bl	8001524 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	2100      	movs	r1, #0
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f7ff fa6c 	bl	800145a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	695a      	ldr	r2, [r3, #20]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	68db      	ldr	r3, [r3, #12]
 8001f8c:	08db      	lsrs	r3, r3, #3
 8001f8e:	f003 0303 	and.w	r3, r3, #3
 8001f92:	005b      	lsls	r3, r3, #1
 8001f94:	fa02 f303 	lsl.w	r3, r2, r3
 8001f98:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	691b      	ldr	r3, [r3, #16]
 8001fa0:	2b04      	cmp	r3, #4
 8001fa2:	d00a      	beq.n	8001fba <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6818      	ldr	r0, [r3, #0]
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	6919      	ldr	r1, [r3, #16]
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	681a      	ldr	r2, [r3, #0]
 8001fb0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001fb4:	f7ff f9fc 	bl	80013b0 <LL_ADC_SetOffset>
 8001fb8:	e17b      	b.n	80022b2 <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	2100      	movs	r1, #0
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f7ff fa19 	bl	80013f8 <LL_ADC_GetOffsetChannel>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d10a      	bne.n	8001fe6 <HAL_ADC_ConfigChannel+0x17e>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	2100      	movs	r1, #0
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f7ff fa0e 	bl	80013f8 <LL_ADC_GetOffsetChannel>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	0e9b      	lsrs	r3, r3, #26
 8001fe0:	f003 021f 	and.w	r2, r3, #31
 8001fe4:	e01e      	b.n	8002024 <HAL_ADC_ConfigChannel+0x1bc>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	2100      	movs	r1, #0
 8001fec:	4618      	mov	r0, r3
 8001fee:	f7ff fa03 	bl	80013f8 <LL_ADC_GetOffsetChannel>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ff8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001ffc:	fa93 f3a3 	rbit	r3, r3
 8002000:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002004:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002008:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800200c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002010:	2b00      	cmp	r3, #0
 8002012:	d101      	bne.n	8002018 <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 8002014:	2320      	movs	r3, #32
 8002016:	e004      	b.n	8002022 <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 8002018:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800201c:	fab3 f383 	clz	r3, r3
 8002020:	b2db      	uxtb	r3, r3
 8002022:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800202c:	2b00      	cmp	r3, #0
 800202e:	d105      	bne.n	800203c <HAL_ADC_ConfigChannel+0x1d4>
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	0e9b      	lsrs	r3, r3, #26
 8002036:	f003 031f 	and.w	r3, r3, #31
 800203a:	e018      	b.n	800206e <HAL_ADC_ConfigChannel+0x206>
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002044:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002048:	fa93 f3a3 	rbit	r3, r3
 800204c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002050:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002054:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002058:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800205c:	2b00      	cmp	r3, #0
 800205e:	d101      	bne.n	8002064 <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 8002060:	2320      	movs	r3, #32
 8002062:	e004      	b.n	800206e <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 8002064:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002068:	fab3 f383 	clz	r3, r3
 800206c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800206e:	429a      	cmp	r2, r3
 8002070:	d106      	bne.n	8002080 <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	2200      	movs	r2, #0
 8002078:	2100      	movs	r1, #0
 800207a:	4618      	mov	r0, r3
 800207c:	f7ff f9d2 	bl	8001424 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	2101      	movs	r1, #1
 8002086:	4618      	mov	r0, r3
 8002088:	f7ff f9b6 	bl	80013f8 <LL_ADC_GetOffsetChannel>
 800208c:	4603      	mov	r3, r0
 800208e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002092:	2b00      	cmp	r3, #0
 8002094:	d10a      	bne.n	80020ac <HAL_ADC_ConfigChannel+0x244>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	2101      	movs	r1, #1
 800209c:	4618      	mov	r0, r3
 800209e:	f7ff f9ab 	bl	80013f8 <LL_ADC_GetOffsetChannel>
 80020a2:	4603      	mov	r3, r0
 80020a4:	0e9b      	lsrs	r3, r3, #26
 80020a6:	f003 021f 	and.w	r2, r3, #31
 80020aa:	e01e      	b.n	80020ea <HAL_ADC_ConfigChannel+0x282>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	2101      	movs	r1, #1
 80020b2:	4618      	mov	r0, r3
 80020b4:	f7ff f9a0 	bl	80013f8 <LL_ADC_GetOffsetChannel>
 80020b8:	4603      	mov	r3, r0
 80020ba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020be:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80020c2:	fa93 f3a3 	rbit	r3, r3
 80020c6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80020ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80020ce:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80020d2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d101      	bne.n	80020de <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 80020da:	2320      	movs	r3, #32
 80020dc:	e004      	b.n	80020e8 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 80020de:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80020e2:	fab3 f383 	clz	r3, r3
 80020e6:	b2db      	uxtb	r3, r3
 80020e8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d105      	bne.n	8002102 <HAL_ADC_ConfigChannel+0x29a>
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	0e9b      	lsrs	r3, r3, #26
 80020fc:	f003 031f 	and.w	r3, r3, #31
 8002100:	e018      	b.n	8002134 <HAL_ADC_ConfigChannel+0x2cc>
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800210a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800210e:	fa93 f3a3 	rbit	r3, r3
 8002112:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002116:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800211a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800211e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002122:	2b00      	cmp	r3, #0
 8002124:	d101      	bne.n	800212a <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 8002126:	2320      	movs	r3, #32
 8002128:	e004      	b.n	8002134 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 800212a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800212e:	fab3 f383 	clz	r3, r3
 8002132:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002134:	429a      	cmp	r2, r3
 8002136:	d106      	bne.n	8002146 <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	2200      	movs	r2, #0
 800213e:	2101      	movs	r1, #1
 8002140:	4618      	mov	r0, r3
 8002142:	f7ff f96f 	bl	8001424 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	2102      	movs	r1, #2
 800214c:	4618      	mov	r0, r3
 800214e:	f7ff f953 	bl	80013f8 <LL_ADC_GetOffsetChannel>
 8002152:	4603      	mov	r3, r0
 8002154:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002158:	2b00      	cmp	r3, #0
 800215a:	d10a      	bne.n	8002172 <HAL_ADC_ConfigChannel+0x30a>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	2102      	movs	r1, #2
 8002162:	4618      	mov	r0, r3
 8002164:	f7ff f948 	bl	80013f8 <LL_ADC_GetOffsetChannel>
 8002168:	4603      	mov	r3, r0
 800216a:	0e9b      	lsrs	r3, r3, #26
 800216c:	f003 021f 	and.w	r2, r3, #31
 8002170:	e01e      	b.n	80021b0 <HAL_ADC_ConfigChannel+0x348>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	2102      	movs	r1, #2
 8002178:	4618      	mov	r0, r3
 800217a:	f7ff f93d 	bl	80013f8 <LL_ADC_GetOffsetChannel>
 800217e:	4603      	mov	r3, r0
 8002180:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002184:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002188:	fa93 f3a3 	rbit	r3, r3
 800218c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002190:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002194:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002198:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800219c:	2b00      	cmp	r3, #0
 800219e:	d101      	bne.n	80021a4 <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 80021a0:	2320      	movs	r3, #32
 80021a2:	e004      	b.n	80021ae <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 80021a4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80021a8:	fab3 f383 	clz	r3, r3
 80021ac:	b2db      	uxtb	r3, r3
 80021ae:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d105      	bne.n	80021c8 <HAL_ADC_ConfigChannel+0x360>
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	0e9b      	lsrs	r3, r3, #26
 80021c2:	f003 031f 	and.w	r3, r3, #31
 80021c6:	e016      	b.n	80021f6 <HAL_ADC_ConfigChannel+0x38e>
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021d0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80021d4:	fa93 f3a3 	rbit	r3, r3
 80021d8:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80021da:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80021dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80021e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d101      	bne.n	80021ec <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 80021e8:	2320      	movs	r3, #32
 80021ea:	e004      	b.n	80021f6 <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 80021ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80021f0:	fab3 f383 	clz	r3, r3
 80021f4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80021f6:	429a      	cmp	r2, r3
 80021f8:	d106      	bne.n	8002208 <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	2200      	movs	r2, #0
 8002200:	2102      	movs	r1, #2
 8002202:	4618      	mov	r0, r3
 8002204:	f7ff f90e 	bl	8001424 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	2103      	movs	r1, #3
 800220e:	4618      	mov	r0, r3
 8002210:	f7ff f8f2 	bl	80013f8 <LL_ADC_GetOffsetChannel>
 8002214:	4603      	mov	r3, r0
 8002216:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800221a:	2b00      	cmp	r3, #0
 800221c:	d10a      	bne.n	8002234 <HAL_ADC_ConfigChannel+0x3cc>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	2103      	movs	r1, #3
 8002224:	4618      	mov	r0, r3
 8002226:	f7ff f8e7 	bl	80013f8 <LL_ADC_GetOffsetChannel>
 800222a:	4603      	mov	r3, r0
 800222c:	0e9b      	lsrs	r3, r3, #26
 800222e:	f003 021f 	and.w	r2, r3, #31
 8002232:	e017      	b.n	8002264 <HAL_ADC_ConfigChannel+0x3fc>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	2103      	movs	r1, #3
 800223a:	4618      	mov	r0, r3
 800223c:	f7ff f8dc 	bl	80013f8 <LL_ADC_GetOffsetChannel>
 8002240:	4603      	mov	r3, r0
 8002242:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002244:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002246:	fa93 f3a3 	rbit	r3, r3
 800224a:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800224c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800224e:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002250:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002252:	2b00      	cmp	r3, #0
 8002254:	d101      	bne.n	800225a <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 8002256:	2320      	movs	r3, #32
 8002258:	e003      	b.n	8002262 <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 800225a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800225c:	fab3 f383 	clz	r3, r3
 8002260:	b2db      	uxtb	r3, r3
 8002262:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800226c:	2b00      	cmp	r3, #0
 800226e:	d105      	bne.n	800227c <HAL_ADC_ConfigChannel+0x414>
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	0e9b      	lsrs	r3, r3, #26
 8002276:	f003 031f 	and.w	r3, r3, #31
 800227a:	e011      	b.n	80022a0 <HAL_ADC_ConfigChannel+0x438>
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002282:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002284:	fa93 f3a3 	rbit	r3, r3
 8002288:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800228a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800228c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800228e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002290:	2b00      	cmp	r3, #0
 8002292:	d101      	bne.n	8002298 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8002294:	2320      	movs	r3, #32
 8002296:	e003      	b.n	80022a0 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8002298:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800229a:	fab3 f383 	clz	r3, r3
 800229e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80022a0:	429a      	cmp	r2, r3
 80022a2:	d106      	bne.n	80022b2 <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	2200      	movs	r2, #0
 80022aa:	2103      	movs	r1, #3
 80022ac:	4618      	mov	r0, r3
 80022ae:	f7ff f8b9 	bl	8001424 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4618      	mov	r0, r3
 80022b8:	f7ff f9e6 	bl	8001688 <LL_ADC_IsEnabled>
 80022bc:	4603      	mov	r3, r0
 80022be:	2b00      	cmp	r3, #0
 80022c0:	f040 8140 	bne.w	8002544 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6818      	ldr	r0, [r3, #0]
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	6819      	ldr	r1, [r3, #0]
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	68db      	ldr	r3, [r3, #12]
 80022d0:	461a      	mov	r2, r3
 80022d2:	f7ff f953 	bl	800157c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	68db      	ldr	r3, [r3, #12]
 80022da:	4a8f      	ldr	r2, [pc, #572]	; (8002518 <HAL_ADC_ConfigChannel+0x6b0>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	f040 8131 	bne.w	8002544 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d10b      	bne.n	800230a <HAL_ADC_ConfigChannel+0x4a2>
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	0e9b      	lsrs	r3, r3, #26
 80022f8:	3301      	adds	r3, #1
 80022fa:	f003 031f 	and.w	r3, r3, #31
 80022fe:	2b09      	cmp	r3, #9
 8002300:	bf94      	ite	ls
 8002302:	2301      	movls	r3, #1
 8002304:	2300      	movhi	r3, #0
 8002306:	b2db      	uxtb	r3, r3
 8002308:	e019      	b.n	800233e <HAL_ADC_ConfigChannel+0x4d6>
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002310:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002312:	fa93 f3a3 	rbit	r3, r3
 8002316:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002318:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800231a:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800231c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800231e:	2b00      	cmp	r3, #0
 8002320:	d101      	bne.n	8002326 <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 8002322:	2320      	movs	r3, #32
 8002324:	e003      	b.n	800232e <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 8002326:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002328:	fab3 f383 	clz	r3, r3
 800232c:	b2db      	uxtb	r3, r3
 800232e:	3301      	adds	r3, #1
 8002330:	f003 031f 	and.w	r3, r3, #31
 8002334:	2b09      	cmp	r3, #9
 8002336:	bf94      	ite	ls
 8002338:	2301      	movls	r3, #1
 800233a:	2300      	movhi	r3, #0
 800233c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800233e:	2b00      	cmp	r3, #0
 8002340:	d079      	beq.n	8002436 <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800234a:	2b00      	cmp	r3, #0
 800234c:	d107      	bne.n	800235e <HAL_ADC_ConfigChannel+0x4f6>
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	0e9b      	lsrs	r3, r3, #26
 8002354:	3301      	adds	r3, #1
 8002356:	069b      	lsls	r3, r3, #26
 8002358:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800235c:	e015      	b.n	800238a <HAL_ADC_ConfigChannel+0x522>
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002364:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002366:	fa93 f3a3 	rbit	r3, r3
 800236a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800236c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800236e:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002370:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002372:	2b00      	cmp	r3, #0
 8002374:	d101      	bne.n	800237a <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 8002376:	2320      	movs	r3, #32
 8002378:	e003      	b.n	8002382 <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 800237a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800237c:	fab3 f383 	clz	r3, r3
 8002380:	b2db      	uxtb	r3, r3
 8002382:	3301      	adds	r3, #1
 8002384:	069b      	lsls	r3, r3, #26
 8002386:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002392:	2b00      	cmp	r3, #0
 8002394:	d109      	bne.n	80023aa <HAL_ADC_ConfigChannel+0x542>
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	0e9b      	lsrs	r3, r3, #26
 800239c:	3301      	adds	r3, #1
 800239e:	f003 031f 	and.w	r3, r3, #31
 80023a2:	2101      	movs	r1, #1
 80023a4:	fa01 f303 	lsl.w	r3, r1, r3
 80023a8:	e017      	b.n	80023da <HAL_ADC_ConfigChannel+0x572>
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023b2:	fa93 f3a3 	rbit	r3, r3
 80023b6:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80023b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80023ba:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80023bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d101      	bne.n	80023c6 <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 80023c2:	2320      	movs	r3, #32
 80023c4:	e003      	b.n	80023ce <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 80023c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023c8:	fab3 f383 	clz	r3, r3
 80023cc:	b2db      	uxtb	r3, r3
 80023ce:	3301      	adds	r3, #1
 80023d0:	f003 031f 	and.w	r3, r3, #31
 80023d4:	2101      	movs	r1, #1
 80023d6:	fa01 f303 	lsl.w	r3, r1, r3
 80023da:	ea42 0103 	orr.w	r1, r2, r3
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d10a      	bne.n	8002400 <HAL_ADC_ConfigChannel+0x598>
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	0e9b      	lsrs	r3, r3, #26
 80023f0:	3301      	adds	r3, #1
 80023f2:	f003 021f 	and.w	r2, r3, #31
 80023f6:	4613      	mov	r3, r2
 80023f8:	005b      	lsls	r3, r3, #1
 80023fa:	4413      	add	r3, r2
 80023fc:	051b      	lsls	r3, r3, #20
 80023fe:	e018      	b.n	8002432 <HAL_ADC_ConfigChannel+0x5ca>
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002406:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002408:	fa93 f3a3 	rbit	r3, r3
 800240c:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800240e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002410:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002412:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002414:	2b00      	cmp	r3, #0
 8002416:	d101      	bne.n	800241c <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 8002418:	2320      	movs	r3, #32
 800241a:	e003      	b.n	8002424 <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 800241c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800241e:	fab3 f383 	clz	r3, r3
 8002422:	b2db      	uxtb	r3, r3
 8002424:	3301      	adds	r3, #1
 8002426:	f003 021f 	and.w	r2, r3, #31
 800242a:	4613      	mov	r3, r2
 800242c:	005b      	lsls	r3, r3, #1
 800242e:	4413      	add	r3, r2
 8002430:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002432:	430b      	orrs	r3, r1
 8002434:	e081      	b.n	800253a <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800243e:	2b00      	cmp	r3, #0
 8002440:	d107      	bne.n	8002452 <HAL_ADC_ConfigChannel+0x5ea>
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	0e9b      	lsrs	r3, r3, #26
 8002448:	3301      	adds	r3, #1
 800244a:	069b      	lsls	r3, r3, #26
 800244c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002450:	e015      	b.n	800247e <HAL_ADC_ConfigChannel+0x616>
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800245a:	fa93 f3a3 	rbit	r3, r3
 800245e:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002462:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002466:	2b00      	cmp	r3, #0
 8002468:	d101      	bne.n	800246e <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 800246a:	2320      	movs	r3, #32
 800246c:	e003      	b.n	8002476 <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 800246e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002470:	fab3 f383 	clz	r3, r3
 8002474:	b2db      	uxtb	r3, r3
 8002476:	3301      	adds	r3, #1
 8002478:	069b      	lsls	r3, r3, #26
 800247a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002486:	2b00      	cmp	r3, #0
 8002488:	d109      	bne.n	800249e <HAL_ADC_ConfigChannel+0x636>
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	0e9b      	lsrs	r3, r3, #26
 8002490:	3301      	adds	r3, #1
 8002492:	f003 031f 	and.w	r3, r3, #31
 8002496:	2101      	movs	r1, #1
 8002498:	fa01 f303 	lsl.w	r3, r1, r3
 800249c:	e017      	b.n	80024ce <HAL_ADC_ConfigChannel+0x666>
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024a4:	6a3b      	ldr	r3, [r7, #32]
 80024a6:	fa93 f3a3 	rbit	r3, r3
 80024aa:	61fb      	str	r3, [r7, #28]
  return result;
 80024ac:	69fb      	ldr	r3, [r7, #28]
 80024ae:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80024b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d101      	bne.n	80024ba <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 80024b6:	2320      	movs	r3, #32
 80024b8:	e003      	b.n	80024c2 <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 80024ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024bc:	fab3 f383 	clz	r3, r3
 80024c0:	b2db      	uxtb	r3, r3
 80024c2:	3301      	adds	r3, #1
 80024c4:	f003 031f 	and.w	r3, r3, #31
 80024c8:	2101      	movs	r1, #1
 80024ca:	fa01 f303 	lsl.w	r3, r1, r3
 80024ce:	ea42 0103 	orr.w	r1, r2, r3
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d10d      	bne.n	80024fa <HAL_ADC_ConfigChannel+0x692>
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	0e9b      	lsrs	r3, r3, #26
 80024e4:	3301      	adds	r3, #1
 80024e6:	f003 021f 	and.w	r2, r3, #31
 80024ea:	4613      	mov	r3, r2
 80024ec:	005b      	lsls	r3, r3, #1
 80024ee:	4413      	add	r3, r2
 80024f0:	3b1e      	subs	r3, #30
 80024f2:	051b      	lsls	r3, r3, #20
 80024f4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80024f8:	e01e      	b.n	8002538 <HAL_ADC_ConfigChannel+0x6d0>
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002500:	697b      	ldr	r3, [r7, #20]
 8002502:	fa93 f3a3 	rbit	r3, r3
 8002506:	613b      	str	r3, [r7, #16]
  return result;
 8002508:	693b      	ldr	r3, [r7, #16]
 800250a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800250c:	69bb      	ldr	r3, [r7, #24]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d104      	bne.n	800251c <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8002512:	2320      	movs	r3, #32
 8002514:	e006      	b.n	8002524 <HAL_ADC_ConfigChannel+0x6bc>
 8002516:	bf00      	nop
 8002518:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800251c:	69bb      	ldr	r3, [r7, #24]
 800251e:	fab3 f383 	clz	r3, r3
 8002522:	b2db      	uxtb	r3, r3
 8002524:	3301      	adds	r3, #1
 8002526:	f003 021f 	and.w	r2, r3, #31
 800252a:	4613      	mov	r3, r2
 800252c:	005b      	lsls	r3, r3, #1
 800252e:	4413      	add	r3, r2
 8002530:	3b1e      	subs	r3, #30
 8002532:	051b      	lsls	r3, r3, #20
 8002534:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002538:	430b      	orrs	r3, r1
 800253a:	683a      	ldr	r2, [r7, #0]
 800253c:	6892      	ldr	r2, [r2, #8]
 800253e:	4619      	mov	r1, r3
 8002540:	f7fe fff0 	bl	8001524 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	681a      	ldr	r2, [r3, #0]
 8002548:	4b3d      	ldr	r3, [pc, #244]	; (8002640 <HAL_ADC_ConfigChannel+0x7d8>)
 800254a:	4013      	ands	r3, r2
 800254c:	2b00      	cmp	r3, #0
 800254e:	d06c      	beq.n	800262a <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002550:	483c      	ldr	r0, [pc, #240]	; (8002644 <HAL_ADC_ConfigChannel+0x7dc>)
 8002552:	f7fe ff1f 	bl	8001394 <LL_ADC_GetCommonPathInternalCh>
 8002556:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a3a      	ldr	r2, [pc, #232]	; (8002648 <HAL_ADC_ConfigChannel+0x7e0>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d127      	bne.n	80025b4 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002564:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002568:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800256c:	2b00      	cmp	r3, #0
 800256e:	d121      	bne.n	80025b4 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a35      	ldr	r2, [pc, #212]	; (800264c <HAL_ADC_ConfigChannel+0x7e4>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d157      	bne.n	800262a <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800257a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800257e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002582:	4619      	mov	r1, r3
 8002584:	482f      	ldr	r0, [pc, #188]	; (8002644 <HAL_ADC_ConfigChannel+0x7dc>)
 8002586:	f7fe fef2 	bl	800136e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800258a:	4b31      	ldr	r3, [pc, #196]	; (8002650 <HAL_ADC_ConfigChannel+0x7e8>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	099b      	lsrs	r3, r3, #6
 8002590:	4a30      	ldr	r2, [pc, #192]	; (8002654 <HAL_ADC_ConfigChannel+0x7ec>)
 8002592:	fba2 2303 	umull	r2, r3, r2, r3
 8002596:	099b      	lsrs	r3, r3, #6
 8002598:	1c5a      	adds	r2, r3, #1
 800259a:	4613      	mov	r3, r2
 800259c:	005b      	lsls	r3, r3, #1
 800259e:	4413      	add	r3, r2
 80025a0:	009b      	lsls	r3, r3, #2
 80025a2:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80025a4:	e002      	b.n	80025ac <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	3b01      	subs	r3, #1
 80025aa:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d1f9      	bne.n	80025a6 <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80025b2:	e03a      	b.n	800262a <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a27      	ldr	r2, [pc, #156]	; (8002658 <HAL_ADC_ConfigChannel+0x7f0>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d113      	bne.n	80025e6 <HAL_ADC_ConfigChannel+0x77e>
 80025be:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80025c2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d10d      	bne.n	80025e6 <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a1f      	ldr	r2, [pc, #124]	; (800264c <HAL_ADC_ConfigChannel+0x7e4>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d12a      	bne.n	800262a <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80025d4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80025d8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80025dc:	4619      	mov	r1, r3
 80025de:	4819      	ldr	r0, [pc, #100]	; (8002644 <HAL_ADC_ConfigChannel+0x7dc>)
 80025e0:	f7fe fec5 	bl	800136e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80025e4:	e021      	b.n	800262a <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a1c      	ldr	r2, [pc, #112]	; (800265c <HAL_ADC_ConfigChannel+0x7f4>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d11c      	bne.n	800262a <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80025f0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80025f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d116      	bne.n	800262a <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a12      	ldr	r2, [pc, #72]	; (800264c <HAL_ADC_ConfigChannel+0x7e4>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d111      	bne.n	800262a <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002606:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800260a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800260e:	4619      	mov	r1, r3
 8002610:	480c      	ldr	r0, [pc, #48]	; (8002644 <HAL_ADC_ConfigChannel+0x7dc>)
 8002612:	f7fe feac 	bl	800136e <LL_ADC_SetCommonPathInternalCh>
 8002616:	e008      	b.n	800262a <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800261c:	f043 0220 	orr.w	r2, r3, #32
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002624:	2301      	movs	r3, #1
 8002626:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2200      	movs	r2, #0
 800262e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8002632:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002636:	4618      	mov	r0, r3
 8002638:	37d8      	adds	r7, #216	; 0xd8
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}
 800263e:	bf00      	nop
 8002640:	80080000 	.word	0x80080000
 8002644:	50040300 	.word	0x50040300
 8002648:	c7520000 	.word	0xc7520000
 800264c:	50040000 	.word	0x50040000
 8002650:	20000000 	.word	0x20000000
 8002654:	053e2d63 	.word	0x053e2d63
 8002658:	cb840000 	.word	0xcb840000
 800265c:	80000001 	.word	0x80000001

08002660 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b084      	sub	sp, #16
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002668:	2300      	movs	r3, #0
 800266a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4618      	mov	r0, r3
 8002672:	f7ff f809 	bl	8001688 <LL_ADC_IsEnabled>
 8002676:	4603      	mov	r3, r0
 8002678:	2b00      	cmp	r3, #0
 800267a:	d169      	bne.n	8002750 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	689a      	ldr	r2, [r3, #8]
 8002682:	4b36      	ldr	r3, [pc, #216]	; (800275c <ADC_Enable+0xfc>)
 8002684:	4013      	ands	r3, r2
 8002686:	2b00      	cmp	r3, #0
 8002688:	d00d      	beq.n	80026a6 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800268e:	f043 0210 	orr.w	r2, r3, #16
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800269a:	f043 0201 	orr.w	r2, r3, #1
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
 80026a4:	e055      	b.n	8002752 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4618      	mov	r0, r3
 80026ac:	f7fe ffd8 	bl	8001660 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80026b0:	482b      	ldr	r0, [pc, #172]	; (8002760 <ADC_Enable+0x100>)
 80026b2:	f7fe fe6f 	bl	8001394 <LL_ADC_GetCommonPathInternalCh>
 80026b6:	4603      	mov	r3, r0
 80026b8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d013      	beq.n	80026e8 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80026c0:	4b28      	ldr	r3, [pc, #160]	; (8002764 <ADC_Enable+0x104>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	099b      	lsrs	r3, r3, #6
 80026c6:	4a28      	ldr	r2, [pc, #160]	; (8002768 <ADC_Enable+0x108>)
 80026c8:	fba2 2303 	umull	r2, r3, r2, r3
 80026cc:	099b      	lsrs	r3, r3, #6
 80026ce:	1c5a      	adds	r2, r3, #1
 80026d0:	4613      	mov	r3, r2
 80026d2:	005b      	lsls	r3, r3, #1
 80026d4:	4413      	add	r3, r2
 80026d6:	009b      	lsls	r3, r3, #2
 80026d8:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80026da:	e002      	b.n	80026e2 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	3b01      	subs	r3, #1
 80026e0:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80026e2:	68bb      	ldr	r3, [r7, #8]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d1f9      	bne.n	80026dc <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80026e8:	f7fe fdfe 	bl	80012e8 <HAL_GetTick>
 80026ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80026ee:	e028      	b.n	8002742 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4618      	mov	r0, r3
 80026f6:	f7fe ffc7 	bl	8001688 <LL_ADC_IsEnabled>
 80026fa:	4603      	mov	r3, r0
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d104      	bne.n	800270a <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4618      	mov	r0, r3
 8002706:	f7fe ffab 	bl	8001660 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800270a:	f7fe fded 	bl	80012e8 <HAL_GetTick>
 800270e:	4602      	mov	r2, r0
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	1ad3      	subs	r3, r2, r3
 8002714:	2b02      	cmp	r3, #2
 8002716:	d914      	bls.n	8002742 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 0301 	and.w	r3, r3, #1
 8002722:	2b01      	cmp	r3, #1
 8002724:	d00d      	beq.n	8002742 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800272a:	f043 0210 	orr.w	r2, r3, #16
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002736:	f043 0201 	orr.w	r2, r3, #1
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	e007      	b.n	8002752 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f003 0301 	and.w	r3, r3, #1
 800274c:	2b01      	cmp	r3, #1
 800274e:	d1cf      	bne.n	80026f0 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002750:	2300      	movs	r3, #0
}
 8002752:	4618      	mov	r0, r3
 8002754:	3710      	adds	r7, #16
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}
 800275a:	bf00      	nop
 800275c:	8000003f 	.word	0x8000003f
 8002760:	50040300 	.word	0x50040300
 8002764:	20000000 	.word	0x20000000
 8002768:	053e2d63 	.word	0x053e2d63

0800276c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b084      	sub	sp, #16
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002778:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800277e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002782:	2b00      	cmp	r3, #0
 8002784:	d14b      	bne.n	800281e <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800278a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	659a      	str	r2, [r3, #88]	; 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f003 0308 	and.w	r3, r3, #8
 800279c:	2b00      	cmp	r3, #0
 800279e:	d021      	beq.n	80027e4 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4618      	mov	r0, r3
 80027a6:	f7fe fe6b 	bl	8001480 <LL_ADC_REG_IsTriggerSourceSWStart>
 80027aa:	4603      	mov	r3, r0
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d032      	beq.n	8002816 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	68db      	ldr	r3, [r3, #12]
 80027b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d12b      	bne.n	8002816 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027c2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	659a      	str	r2, [r3, #88]	; 0x58
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d11f      	bne.n	8002816 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027da:	f043 0201 	orr.w	r2, r3, #1
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	659a      	str	r2, [r3, #88]	; 0x58
 80027e2:	e018      	b.n	8002816 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	68db      	ldr	r3, [r3, #12]
 80027ea:	f003 0302 	and.w	r3, r3, #2
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d111      	bne.n	8002816 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027f6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	659a      	str	r2, [r3, #88]	; 0x58
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002802:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002806:	2b00      	cmp	r3, #0
 8002808:	d105      	bne.n	8002816 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800280e:	f043 0201 	orr.w	r2, r3, #1
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	659a      	str	r2, [r3, #88]	; 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002816:	68f8      	ldr	r0, [r7, #12]
 8002818:	f7fd fd12 	bl	8000240 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800281c:	e00e      	b.n	800283c <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002822:	f003 0310 	and.w	r3, r3, #16
 8002826:	2b00      	cmp	r3, #0
 8002828:	d003      	beq.n	8002832 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800282a:	68f8      	ldr	r0, [r7, #12]
 800282c:	f7ff fb12 	bl	8001e54 <HAL_ADC_ErrorCallback>
}
 8002830:	e004      	b.n	800283c <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002836:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002838:	6878      	ldr	r0, [r7, #4]
 800283a:	4798      	blx	r3
}
 800283c:	bf00      	nop
 800283e:	3710      	adds	r7, #16
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}

08002844 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b084      	sub	sp, #16
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002850:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002852:	68f8      	ldr	r0, [r7, #12]
 8002854:	f7ff faea 	bl	8001e2c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002858:	bf00      	nop
 800285a:	3710      	adds	r7, #16
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}

08002860 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b084      	sub	sp, #16
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800286c:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002872:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800287e:	f043 0204 	orr.w	r2, r3, #4
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002886:	68f8      	ldr	r0, [r7, #12]
 8002888:	f7ff fae4 	bl	8001e54 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800288c:	bf00      	nop
 800288e:	3710      	adds	r7, #16
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}

08002894 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002894:	b480      	push	{r7}
 8002896:	b083      	sub	sp, #12
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 800289c:	bf00      	nop
 800289e:	370c      	adds	r7, #12
 80028a0:	46bd      	mov	sp, r7
 80028a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a6:	4770      	bx	lr

080028a8 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b083      	sub	sp, #12
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80028b0:	bf00      	nop
 80028b2:	370c      	adds	r7, #12
 80028b4:	46bd      	mov	sp, r7
 80028b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ba:	4770      	bx	lr

080028bc <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80028bc:	b480      	push	{r7}
 80028be:	b083      	sub	sp, #12
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80028c4:	bf00      	nop
 80028c6:	370c      	adds	r7, #12
 80028c8:	46bd      	mov	sp, r7
 80028ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ce:	4770      	bx	lr

080028d0 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b083      	sub	sp, #12
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80028d8:	bf00      	nop
 80028da:	370c      	adds	r7, #12
 80028dc:	46bd      	mov	sp, r7
 80028de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e2:	4770      	bx	lr

080028e4 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b083      	sub	sp, #12
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80028ec:	bf00      	nop
 80028ee:	370c      	adds	r7, #12
 80028f0:	46bd      	mov	sp, r7
 80028f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f6:	4770      	bx	lr

080028f8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b084      	sub	sp, #16
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d101      	bne.n	800290a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	e0ed      	b.n	8002ae6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002910:	b2db      	uxtb	r3, r3
 8002912:	2b00      	cmp	r3, #0
 8002914:	d102      	bne.n	800291c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002916:	6878      	ldr	r0, [r7, #4]
 8002918:	f7fe faf4 	bl	8000f04 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	681a      	ldr	r2, [r3, #0]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f042 0201 	orr.w	r2, r2, #1
 800292a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800292c:	f7fe fcdc 	bl	80012e8 <HAL_GetTick>
 8002930:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002932:	e012      	b.n	800295a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002934:	f7fe fcd8 	bl	80012e8 <HAL_GetTick>
 8002938:	4602      	mov	r2, r0
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	1ad3      	subs	r3, r2, r3
 800293e:	2b0a      	cmp	r3, #10
 8002940:	d90b      	bls.n	800295a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002946:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2205      	movs	r2, #5
 8002952:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002956:	2301      	movs	r3, #1
 8002958:	e0c5      	b.n	8002ae6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	f003 0301 	and.w	r3, r3, #1
 8002964:	2b00      	cmp	r3, #0
 8002966:	d0e5      	beq.n	8002934 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	681a      	ldr	r2, [r3, #0]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f022 0202 	bic.w	r2, r2, #2
 8002976:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002978:	f7fe fcb6 	bl	80012e8 <HAL_GetTick>
 800297c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800297e:	e012      	b.n	80029a6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002980:	f7fe fcb2 	bl	80012e8 <HAL_GetTick>
 8002984:	4602      	mov	r2, r0
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	1ad3      	subs	r3, r2, r3
 800298a:	2b0a      	cmp	r3, #10
 800298c:	d90b      	bls.n	80029a6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002992:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2205      	movs	r2, #5
 800299e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	e09f      	b.n	8002ae6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	f003 0302 	and.w	r3, r3, #2
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d1e5      	bne.n	8002980 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	7e1b      	ldrb	r3, [r3, #24]
 80029b8:	2b01      	cmp	r3, #1
 80029ba:	d108      	bne.n	80029ce <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80029ca:	601a      	str	r2, [r3, #0]
 80029cc:	e007      	b.n	80029de <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	681a      	ldr	r2, [r3, #0]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80029dc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	7e5b      	ldrb	r3, [r3, #25]
 80029e2:	2b01      	cmp	r3, #1
 80029e4:	d108      	bne.n	80029f8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	681a      	ldr	r2, [r3, #0]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80029f4:	601a      	str	r2, [r3, #0]
 80029f6:	e007      	b.n	8002a08 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	681a      	ldr	r2, [r3, #0]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a06:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	7e9b      	ldrb	r3, [r3, #26]
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	d108      	bne.n	8002a22 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	681a      	ldr	r2, [r3, #0]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f042 0220 	orr.w	r2, r2, #32
 8002a1e:	601a      	str	r2, [r3, #0]
 8002a20:	e007      	b.n	8002a32 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	681a      	ldr	r2, [r3, #0]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f022 0220 	bic.w	r2, r2, #32
 8002a30:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	7edb      	ldrb	r3, [r3, #27]
 8002a36:	2b01      	cmp	r3, #1
 8002a38:	d108      	bne.n	8002a4c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	681a      	ldr	r2, [r3, #0]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f022 0210 	bic.w	r2, r2, #16
 8002a48:	601a      	str	r2, [r3, #0]
 8002a4a:	e007      	b.n	8002a5c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	681a      	ldr	r2, [r3, #0]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f042 0210 	orr.w	r2, r2, #16
 8002a5a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	7f1b      	ldrb	r3, [r3, #28]
 8002a60:	2b01      	cmp	r3, #1
 8002a62:	d108      	bne.n	8002a76 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	681a      	ldr	r2, [r3, #0]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f042 0208 	orr.w	r2, r2, #8
 8002a72:	601a      	str	r2, [r3, #0]
 8002a74:	e007      	b.n	8002a86 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	681a      	ldr	r2, [r3, #0]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f022 0208 	bic.w	r2, r2, #8
 8002a84:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	7f5b      	ldrb	r3, [r3, #29]
 8002a8a:	2b01      	cmp	r3, #1
 8002a8c:	d108      	bne.n	8002aa0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f042 0204 	orr.w	r2, r2, #4
 8002a9c:	601a      	str	r2, [r3, #0]
 8002a9e:	e007      	b.n	8002ab0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	681a      	ldr	r2, [r3, #0]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f022 0204 	bic.w	r2, r2, #4
 8002aae:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	689a      	ldr	r2, [r3, #8]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	68db      	ldr	r3, [r3, #12]
 8002ab8:	431a      	orrs	r2, r3
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	691b      	ldr	r3, [r3, #16]
 8002abe:	431a      	orrs	r2, r3
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	695b      	ldr	r3, [r3, #20]
 8002ac4:	ea42 0103 	orr.w	r1, r2, r3
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	1e5a      	subs	r2, r3, #1
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	430a      	orrs	r2, r1
 8002ad4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2201      	movs	r2, #1
 8002ae0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002ae4:	2300      	movs	r3, #0
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	3710      	adds	r7, #16
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}

08002aee <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8002aee:	b480      	push	{r7}
 8002af0:	b087      	sub	sp, #28
 8002af2:	af00      	add	r7, sp, #0
 8002af4:	6078      	str	r0, [r7, #4]
 8002af6:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b04:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002b06:	7cfb      	ldrb	r3, [r7, #19]
 8002b08:	2b01      	cmp	r3, #1
 8002b0a:	d003      	beq.n	8002b14 <HAL_CAN_ConfigFilter+0x26>
 8002b0c:	7cfb      	ldrb	r3, [r7, #19]
 8002b0e:	2b02      	cmp	r3, #2
 8002b10:	f040 80aa 	bne.w	8002c68 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002b1a:	f043 0201 	orr.w	r2, r3, #1
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	695b      	ldr	r3, [r3, #20]
 8002b28:	f003 031f 	and.w	r3, r3, #31
 8002b2c:	2201      	movs	r2, #1
 8002b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b32:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	43db      	mvns	r3, r3
 8002b3e:	401a      	ands	r2, r3
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	69db      	ldr	r3, [r3, #28]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d123      	bne.n	8002b96 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	43db      	mvns	r3, r3
 8002b58:	401a      	ands	r2, r3
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	68db      	ldr	r3, [r3, #12]
 8002b64:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002b6c:	683a      	ldr	r2, [r7, #0]
 8002b6e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002b70:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	3248      	adds	r2, #72	; 0x48
 8002b76:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	689b      	ldr	r3, [r3, #8]
 8002b7e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002b8a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002b8c:	6979      	ldr	r1, [r7, #20]
 8002b8e:	3348      	adds	r3, #72	; 0x48
 8002b90:	00db      	lsls	r3, r3, #3
 8002b92:	440b      	add	r3, r1
 8002b94:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	69db      	ldr	r3, [r3, #28]
 8002b9a:	2b01      	cmp	r3, #1
 8002b9c:	d122      	bne.n	8002be4 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	431a      	orrs	r2, r3
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002bba:	683a      	ldr	r2, [r7, #0]
 8002bbc:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002bbe:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	3248      	adds	r2, #72	; 0x48
 8002bc4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	689b      	ldr	r3, [r3, #8]
 8002bcc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	68db      	ldr	r3, [r3, #12]
 8002bd2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002bd8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002bda:	6979      	ldr	r1, [r7, #20]
 8002bdc:	3348      	adds	r3, #72	; 0x48
 8002bde:	00db      	lsls	r3, r3, #3
 8002be0:	440b      	add	r3, r1
 8002be2:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	699b      	ldr	r3, [r3, #24]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d109      	bne.n	8002c00 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	43db      	mvns	r3, r3
 8002bf6:	401a      	ands	r2, r3
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002bfe:	e007      	b.n	8002c10 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002c00:	697b      	ldr	r3, [r7, #20]
 8002c02:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	431a      	orrs	r2, r3
 8002c0a:	697b      	ldr	r3, [r7, #20]
 8002c0c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	691b      	ldr	r3, [r3, #16]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d109      	bne.n	8002c2c <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	43db      	mvns	r3, r3
 8002c22:	401a      	ands	r2, r3
 8002c24:	697b      	ldr	r3, [r7, #20]
 8002c26:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8002c2a:	e007      	b.n	8002c3c <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	431a      	orrs	r2, r3
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	6a1b      	ldr	r3, [r3, #32]
 8002c40:	2b01      	cmp	r3, #1
 8002c42:	d107      	bne.n	8002c54 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	431a      	orrs	r2, r3
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002c5a:	f023 0201 	bic.w	r2, r3, #1
 8002c5e:	697b      	ldr	r3, [r7, #20]
 8002c60:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002c64:	2300      	movs	r3, #0
 8002c66:	e006      	b.n	8002c76 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c6c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002c74:	2301      	movs	r3, #1
  }
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	371c      	adds	r7, #28
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c80:	4770      	bx	lr

08002c82 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002c82:	b580      	push	{r7, lr}
 8002c84:	b084      	sub	sp, #16
 8002c86:	af00      	add	r7, sp, #0
 8002c88:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c90:	b2db      	uxtb	r3, r3
 8002c92:	2b01      	cmp	r3, #1
 8002c94:	d12e      	bne.n	8002cf4 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2202      	movs	r2, #2
 8002c9a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	681a      	ldr	r2, [r3, #0]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f022 0201 	bic.w	r2, r2, #1
 8002cac:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002cae:	f7fe fb1b 	bl	80012e8 <HAL_GetTick>
 8002cb2:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002cb4:	e012      	b.n	8002cdc <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002cb6:	f7fe fb17 	bl	80012e8 <HAL_GetTick>
 8002cba:	4602      	mov	r2, r0
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	1ad3      	subs	r3, r2, r3
 8002cc0:	2b0a      	cmp	r3, #10
 8002cc2:	d90b      	bls.n	8002cdc <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc8:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2205      	movs	r2, #5
 8002cd4:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	e012      	b.n	8002d02 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	f003 0301 	and.w	r3, r3, #1
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d1e5      	bne.n	8002cb6 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2200      	movs	r2, #0
 8002cee:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	e006      	b.n	8002d02 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf8:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002d00:	2301      	movs	r3, #1
  }
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	3710      	adds	r7, #16
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}

08002d0a <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8002d0a:	b480      	push	{r7}
 8002d0c:	b089      	sub	sp, #36	; 0x24
 8002d0e:	af00      	add	r7, sp, #0
 8002d10:	60f8      	str	r0, [r7, #12]
 8002d12:	60b9      	str	r1, [r7, #8]
 8002d14:	607a      	str	r2, [r7, #4]
 8002d16:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d1e:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002d28:	7ffb      	ldrb	r3, [r7, #31]
 8002d2a:	2b01      	cmp	r3, #1
 8002d2c:	d003      	beq.n	8002d36 <HAL_CAN_AddTxMessage+0x2c>
 8002d2e:	7ffb      	ldrb	r3, [r7, #31]
 8002d30:	2b02      	cmp	r3, #2
 8002d32:	f040 80ad 	bne.w	8002e90 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002d36:	69bb      	ldr	r3, [r7, #24]
 8002d38:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d10a      	bne.n	8002d56 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002d40:	69bb      	ldr	r3, [r7, #24]
 8002d42:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d105      	bne.n	8002d56 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002d4a:	69bb      	ldr	r3, [r7, #24]
 8002d4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	f000 8095 	beq.w	8002e80 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002d56:	69bb      	ldr	r3, [r7, #24]
 8002d58:	0e1b      	lsrs	r3, r3, #24
 8002d5a:	f003 0303 	and.w	r3, r3, #3
 8002d5e:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002d60:	2201      	movs	r2, #1
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	409a      	lsls	r2, r3
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002d6a:	68bb      	ldr	r3, [r7, #8]
 8002d6c:	689b      	ldr	r3, [r3, #8]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d10d      	bne.n	8002d8e <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002d72:	68bb      	ldr	r3, [r7, #8]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002d7c:	68f9      	ldr	r1, [r7, #12]
 8002d7e:	6809      	ldr	r1, [r1, #0]
 8002d80:	431a      	orrs	r2, r3
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	3318      	adds	r3, #24
 8002d86:	011b      	lsls	r3, r3, #4
 8002d88:	440b      	add	r3, r1
 8002d8a:	601a      	str	r2, [r3, #0]
 8002d8c:	e00f      	b.n	8002dae <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002d8e:	68bb      	ldr	r3, [r7, #8]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002d98:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002d9e:	68f9      	ldr	r1, [r7, #12]
 8002da0:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002da2:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	3318      	adds	r3, #24
 8002da8:	011b      	lsls	r3, r3, #4
 8002daa:	440b      	add	r3, r1
 8002dac:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	6819      	ldr	r1, [r3, #0]
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	691a      	ldr	r2, [r3, #16]
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	3318      	adds	r3, #24
 8002dba:	011b      	lsls	r3, r3, #4
 8002dbc:	440b      	add	r3, r1
 8002dbe:	3304      	adds	r3, #4
 8002dc0:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	7d1b      	ldrb	r3, [r3, #20]
 8002dc6:	2b01      	cmp	r3, #1
 8002dc8:	d111      	bne.n	8002dee <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681a      	ldr	r2, [r3, #0]
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	3318      	adds	r3, #24
 8002dd2:	011b      	lsls	r3, r3, #4
 8002dd4:	4413      	add	r3, r2
 8002dd6:	3304      	adds	r3, #4
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	68fa      	ldr	r2, [r7, #12]
 8002ddc:	6811      	ldr	r1, [r2, #0]
 8002dde:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	3318      	adds	r3, #24
 8002de6:	011b      	lsls	r3, r3, #4
 8002de8:	440b      	add	r3, r1
 8002dea:	3304      	adds	r3, #4
 8002dec:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	3307      	adds	r3, #7
 8002df2:	781b      	ldrb	r3, [r3, #0]
 8002df4:	061a      	lsls	r2, r3, #24
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	3306      	adds	r3, #6
 8002dfa:	781b      	ldrb	r3, [r3, #0]
 8002dfc:	041b      	lsls	r3, r3, #16
 8002dfe:	431a      	orrs	r2, r3
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	3305      	adds	r3, #5
 8002e04:	781b      	ldrb	r3, [r3, #0]
 8002e06:	021b      	lsls	r3, r3, #8
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	687a      	ldr	r2, [r7, #4]
 8002e0c:	3204      	adds	r2, #4
 8002e0e:	7812      	ldrb	r2, [r2, #0]
 8002e10:	4610      	mov	r0, r2
 8002e12:	68fa      	ldr	r2, [r7, #12]
 8002e14:	6811      	ldr	r1, [r2, #0]
 8002e16:	ea43 0200 	orr.w	r2, r3, r0
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	011b      	lsls	r3, r3, #4
 8002e1e:	440b      	add	r3, r1
 8002e20:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8002e24:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	3303      	adds	r3, #3
 8002e2a:	781b      	ldrb	r3, [r3, #0]
 8002e2c:	061a      	lsls	r2, r3, #24
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	3302      	adds	r3, #2
 8002e32:	781b      	ldrb	r3, [r3, #0]
 8002e34:	041b      	lsls	r3, r3, #16
 8002e36:	431a      	orrs	r2, r3
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	3301      	adds	r3, #1
 8002e3c:	781b      	ldrb	r3, [r3, #0]
 8002e3e:	021b      	lsls	r3, r3, #8
 8002e40:	4313      	orrs	r3, r2
 8002e42:	687a      	ldr	r2, [r7, #4]
 8002e44:	7812      	ldrb	r2, [r2, #0]
 8002e46:	4610      	mov	r0, r2
 8002e48:	68fa      	ldr	r2, [r7, #12]
 8002e4a:	6811      	ldr	r1, [r2, #0]
 8002e4c:	ea43 0200 	orr.w	r2, r3, r0
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	011b      	lsls	r3, r3, #4
 8002e54:	440b      	add	r3, r1
 8002e56:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002e5a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681a      	ldr	r2, [r3, #0]
 8002e60:	697b      	ldr	r3, [r7, #20]
 8002e62:	3318      	adds	r3, #24
 8002e64:	011b      	lsls	r3, r3, #4
 8002e66:	4413      	add	r3, r2
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	68fa      	ldr	r2, [r7, #12]
 8002e6c:	6811      	ldr	r1, [r2, #0]
 8002e6e:	f043 0201 	orr.w	r2, r3, #1
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	3318      	adds	r3, #24
 8002e76:	011b      	lsls	r3, r3, #4
 8002e78:	440b      	add	r3, r1
 8002e7a:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	e00e      	b.n	8002e9e <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e84:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	e006      	b.n	8002e9e <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e94:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002e9c:	2301      	movs	r3, #1
  }
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	3724      	adds	r7, #36	; 0x24
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea8:	4770      	bx	lr
	...

08002eac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002eac:	b480      	push	{r7}
 8002eae:	b085      	sub	sp, #20
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	f003 0307 	and.w	r3, r3, #7
 8002eba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ebc:	4b0c      	ldr	r3, [pc, #48]	; (8002ef0 <__NVIC_SetPriorityGrouping+0x44>)
 8002ebe:	68db      	ldr	r3, [r3, #12]
 8002ec0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ec2:	68ba      	ldr	r2, [r7, #8]
 8002ec4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ec8:	4013      	ands	r3, r2
 8002eca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ed4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ed8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002edc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ede:	4a04      	ldr	r2, [pc, #16]	; (8002ef0 <__NVIC_SetPriorityGrouping+0x44>)
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	60d3      	str	r3, [r2, #12]
}
 8002ee4:	bf00      	nop
 8002ee6:	3714      	adds	r7, #20
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eee:	4770      	bx	lr
 8002ef0:	e000ed00 	.word	0xe000ed00

08002ef4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ef8:	4b04      	ldr	r3, [pc, #16]	; (8002f0c <__NVIC_GetPriorityGrouping+0x18>)
 8002efa:	68db      	ldr	r3, [r3, #12]
 8002efc:	0a1b      	lsrs	r3, r3, #8
 8002efe:	f003 0307 	and.w	r3, r3, #7
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	46bd      	mov	sp, r7
 8002f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0a:	4770      	bx	lr
 8002f0c:	e000ed00 	.word	0xe000ed00

08002f10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f10:	b480      	push	{r7}
 8002f12:	b083      	sub	sp, #12
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	4603      	mov	r3, r0
 8002f18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	db0b      	blt.n	8002f3a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f22:	79fb      	ldrb	r3, [r7, #7]
 8002f24:	f003 021f 	and.w	r2, r3, #31
 8002f28:	4907      	ldr	r1, [pc, #28]	; (8002f48 <__NVIC_EnableIRQ+0x38>)
 8002f2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f2e:	095b      	lsrs	r3, r3, #5
 8002f30:	2001      	movs	r0, #1
 8002f32:	fa00 f202 	lsl.w	r2, r0, r2
 8002f36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002f3a:	bf00      	nop
 8002f3c:	370c      	adds	r7, #12
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f44:	4770      	bx	lr
 8002f46:	bf00      	nop
 8002f48:	e000e100 	.word	0xe000e100

08002f4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	b083      	sub	sp, #12
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	4603      	mov	r3, r0
 8002f54:	6039      	str	r1, [r7, #0]
 8002f56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	db0a      	blt.n	8002f76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	b2da      	uxtb	r2, r3
 8002f64:	490c      	ldr	r1, [pc, #48]	; (8002f98 <__NVIC_SetPriority+0x4c>)
 8002f66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f6a:	0112      	lsls	r2, r2, #4
 8002f6c:	b2d2      	uxtb	r2, r2
 8002f6e:	440b      	add	r3, r1
 8002f70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f74:	e00a      	b.n	8002f8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	b2da      	uxtb	r2, r3
 8002f7a:	4908      	ldr	r1, [pc, #32]	; (8002f9c <__NVIC_SetPriority+0x50>)
 8002f7c:	79fb      	ldrb	r3, [r7, #7]
 8002f7e:	f003 030f 	and.w	r3, r3, #15
 8002f82:	3b04      	subs	r3, #4
 8002f84:	0112      	lsls	r2, r2, #4
 8002f86:	b2d2      	uxtb	r2, r2
 8002f88:	440b      	add	r3, r1
 8002f8a:	761a      	strb	r2, [r3, #24]
}
 8002f8c:	bf00      	nop
 8002f8e:	370c      	adds	r7, #12
 8002f90:	46bd      	mov	sp, r7
 8002f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f96:	4770      	bx	lr
 8002f98:	e000e100 	.word	0xe000e100
 8002f9c:	e000ed00 	.word	0xe000ed00

08002fa0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b089      	sub	sp, #36	; 0x24
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	60f8      	str	r0, [r7, #12]
 8002fa8:	60b9      	str	r1, [r7, #8]
 8002faa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	f003 0307 	and.w	r3, r3, #7
 8002fb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002fb4:	69fb      	ldr	r3, [r7, #28]
 8002fb6:	f1c3 0307 	rsb	r3, r3, #7
 8002fba:	2b04      	cmp	r3, #4
 8002fbc:	bf28      	it	cs
 8002fbe:	2304      	movcs	r3, #4
 8002fc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002fc2:	69fb      	ldr	r3, [r7, #28]
 8002fc4:	3304      	adds	r3, #4
 8002fc6:	2b06      	cmp	r3, #6
 8002fc8:	d902      	bls.n	8002fd0 <NVIC_EncodePriority+0x30>
 8002fca:	69fb      	ldr	r3, [r7, #28]
 8002fcc:	3b03      	subs	r3, #3
 8002fce:	e000      	b.n	8002fd2 <NVIC_EncodePriority+0x32>
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fd4:	f04f 32ff 	mov.w	r2, #4294967295
 8002fd8:	69bb      	ldr	r3, [r7, #24]
 8002fda:	fa02 f303 	lsl.w	r3, r2, r3
 8002fde:	43da      	mvns	r2, r3
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	401a      	ands	r2, r3
 8002fe4:	697b      	ldr	r3, [r7, #20]
 8002fe6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002fe8:	f04f 31ff 	mov.w	r1, #4294967295
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	fa01 f303 	lsl.w	r3, r1, r3
 8002ff2:	43d9      	mvns	r1, r3
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ff8:	4313      	orrs	r3, r2
         );
}
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	3724      	adds	r7, #36	; 0x24
 8002ffe:	46bd      	mov	sp, r7
 8003000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003004:	4770      	bx	lr

08003006 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003006:	b580      	push	{r7, lr}
 8003008:	b082      	sub	sp, #8
 800300a:	af00      	add	r7, sp, #0
 800300c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800300e:	6878      	ldr	r0, [r7, #4]
 8003010:	f7ff ff4c 	bl	8002eac <__NVIC_SetPriorityGrouping>
}
 8003014:	bf00      	nop
 8003016:	3708      	adds	r7, #8
 8003018:	46bd      	mov	sp, r7
 800301a:	bd80      	pop	{r7, pc}

0800301c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b086      	sub	sp, #24
 8003020:	af00      	add	r7, sp, #0
 8003022:	4603      	mov	r3, r0
 8003024:	60b9      	str	r1, [r7, #8]
 8003026:	607a      	str	r2, [r7, #4]
 8003028:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800302a:	2300      	movs	r3, #0
 800302c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800302e:	f7ff ff61 	bl	8002ef4 <__NVIC_GetPriorityGrouping>
 8003032:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003034:	687a      	ldr	r2, [r7, #4]
 8003036:	68b9      	ldr	r1, [r7, #8]
 8003038:	6978      	ldr	r0, [r7, #20]
 800303a:	f7ff ffb1 	bl	8002fa0 <NVIC_EncodePriority>
 800303e:	4602      	mov	r2, r0
 8003040:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003044:	4611      	mov	r1, r2
 8003046:	4618      	mov	r0, r3
 8003048:	f7ff ff80 	bl	8002f4c <__NVIC_SetPriority>
}
 800304c:	bf00      	nop
 800304e:	3718      	adds	r7, #24
 8003050:	46bd      	mov	sp, r7
 8003052:	bd80      	pop	{r7, pc}

08003054 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b082      	sub	sp, #8
 8003058:	af00      	add	r7, sp, #0
 800305a:	4603      	mov	r3, r0
 800305c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800305e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003062:	4618      	mov	r0, r3
 8003064:	f7ff ff54 	bl	8002f10 <__NVIC_EnableIRQ>
}
 8003068:	bf00      	nop
 800306a:	3708      	adds	r7, #8
 800306c:	46bd      	mov	sp, r7
 800306e:	bd80      	pop	{r7, pc}

08003070 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b084      	sub	sp, #16
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d101      	bne.n	8003082 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800307e:	2301      	movs	r3, #1
 8003080:	e08d      	b.n	800319e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	461a      	mov	r2, r3
 8003088:	4b47      	ldr	r3, [pc, #284]	; (80031a8 <HAL_DMA_Init+0x138>)
 800308a:	429a      	cmp	r2, r3
 800308c:	d80f      	bhi.n	80030ae <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	461a      	mov	r2, r3
 8003094:	4b45      	ldr	r3, [pc, #276]	; (80031ac <HAL_DMA_Init+0x13c>)
 8003096:	4413      	add	r3, r2
 8003098:	4a45      	ldr	r2, [pc, #276]	; (80031b0 <HAL_DMA_Init+0x140>)
 800309a:	fba2 2303 	umull	r2, r3, r2, r3
 800309e:	091b      	lsrs	r3, r3, #4
 80030a0:	009a      	lsls	r2, r3, #2
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	4a42      	ldr	r2, [pc, #264]	; (80031b4 <HAL_DMA_Init+0x144>)
 80030aa:	641a      	str	r2, [r3, #64]	; 0x40
 80030ac:	e00e      	b.n	80030cc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	461a      	mov	r2, r3
 80030b4:	4b40      	ldr	r3, [pc, #256]	; (80031b8 <HAL_DMA_Init+0x148>)
 80030b6:	4413      	add	r3, r2
 80030b8:	4a3d      	ldr	r2, [pc, #244]	; (80031b0 <HAL_DMA_Init+0x140>)
 80030ba:	fba2 2303 	umull	r2, r3, r2, r3
 80030be:	091b      	lsrs	r3, r3, #4
 80030c0:	009a      	lsls	r2, r3, #2
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	4a3c      	ldr	r2, [pc, #240]	; (80031bc <HAL_DMA_Init+0x14c>)
 80030ca:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2202      	movs	r2, #2
 80030d0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80030e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030e6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80030f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	691b      	ldr	r3, [r3, #16]
 80030f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	699b      	ldr	r3, [r3, #24]
 8003102:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003108:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6a1b      	ldr	r3, [r3, #32]
 800310e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003110:	68fa      	ldr	r2, [r7, #12]
 8003112:	4313      	orrs	r3, r2
 8003114:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	68fa      	ldr	r2, [r7, #12]
 800311c:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800311e:	6878      	ldr	r0, [r7, #4]
 8003120:	f000 f9b6 	bl	8003490 <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800312c:	d102      	bne.n	8003134 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2200      	movs	r2, #0
 8003132:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	685a      	ldr	r2, [r3, #4]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800313c:	b2d2      	uxtb	r2, r2
 800313e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003144:	687a      	ldr	r2, [r7, #4]
 8003146:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003148:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d010      	beq.n	8003174 <HAL_DMA_Init+0x104>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	2b04      	cmp	r3, #4
 8003158:	d80c      	bhi.n	8003174 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800315a:	6878      	ldr	r0, [r7, #4]
 800315c:	f000 f9d6 	bl	800350c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003164:	2200      	movs	r2, #0
 8003166:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800316c:	687a      	ldr	r2, [r7, #4]
 800316e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003170:	605a      	str	r2, [r3, #4]
 8003172:	e008      	b.n	8003186 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2200      	movs	r2, #0
 8003178:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2200      	movs	r2, #0
 800317e:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2200      	movs	r2, #0
 8003184:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2200      	movs	r2, #0
 800318a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2201      	movs	r2, #1
 8003190:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2200      	movs	r2, #0
 8003198:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800319c:	2300      	movs	r3, #0
}
 800319e:	4618      	mov	r0, r3
 80031a0:	3710      	adds	r7, #16
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}
 80031a6:	bf00      	nop
 80031a8:	40020407 	.word	0x40020407
 80031ac:	bffdfff8 	.word	0xbffdfff8
 80031b0:	cccccccd 	.word	0xcccccccd
 80031b4:	40020000 	.word	0x40020000
 80031b8:	bffdfbf8 	.word	0xbffdfbf8
 80031bc:	40020400 	.word	0x40020400

080031c0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b086      	sub	sp, #24
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	60f8      	str	r0, [r7, #12]
 80031c8:	60b9      	str	r1, [r7, #8]
 80031ca:	607a      	str	r2, [r7, #4]
 80031cc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80031ce:	2300      	movs	r3, #0
 80031d0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80031d8:	2b01      	cmp	r3, #1
 80031da:	d101      	bne.n	80031e0 <HAL_DMA_Start_IT+0x20>
 80031dc:	2302      	movs	r3, #2
 80031de:	e066      	b.n	80032ae <HAL_DMA_Start_IT+0xee>
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	2201      	movs	r2, #1
 80031e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80031ee:	b2db      	uxtb	r3, r3
 80031f0:	2b01      	cmp	r3, #1
 80031f2:	d155      	bne.n	80032a0 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	2202      	movs	r2, #2
 80031f8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	2200      	movs	r2, #0
 8003200:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	681a      	ldr	r2, [r3, #0]
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f022 0201 	bic.w	r2, r2, #1
 8003210:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	687a      	ldr	r2, [r7, #4]
 8003216:	68b9      	ldr	r1, [r7, #8]
 8003218:	68f8      	ldr	r0, [r7, #12]
 800321a:	f000 f8fb 	bl	8003414 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003222:	2b00      	cmp	r3, #0
 8003224:	d008      	beq.n	8003238 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	681a      	ldr	r2, [r3, #0]
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f042 020e 	orr.w	r2, r2, #14
 8003234:	601a      	str	r2, [r3, #0]
 8003236:	e00f      	b.n	8003258 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	681a      	ldr	r2, [r3, #0]
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f022 0204 	bic.w	r2, r2, #4
 8003246:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	681a      	ldr	r2, [r3, #0]
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f042 020a 	orr.w	r2, r2, #10
 8003256:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003262:	2b00      	cmp	r3, #0
 8003264:	d007      	beq.n	8003276 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800326a:	681a      	ldr	r2, [r3, #0]
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003270:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003274:	601a      	str	r2, [r3, #0]
    }

    if(hdma->DMAmuxRequestGen != 0U)
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800327a:	2b00      	cmp	r3, #0
 800327c:	d007      	beq.n	800328e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003282:	681a      	ldr	r2, [r3, #0]
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003288:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800328c:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	681a      	ldr	r2, [r3, #0]
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f042 0201 	orr.w	r2, r2, #1
 800329c:	601a      	str	r2, [r3, #0]
 800329e:	e005      	b.n	80032ac <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	2200      	movs	r2, #0
 80032a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80032a8:	2302      	movs	r3, #2
 80032aa:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80032ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	3718      	adds	r7, #24
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}

080032b6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80032b6:	b580      	push	{r7, lr}
 80032b8:	b084      	sub	sp, #16
 80032ba:	af00      	add	r7, sp, #0
 80032bc:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032d2:	f003 031c 	and.w	r3, r3, #28
 80032d6:	2204      	movs	r2, #4
 80032d8:	409a      	lsls	r2, r3
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	4013      	ands	r3, r2
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d026      	beq.n	8003330 <HAL_DMA_IRQHandler+0x7a>
 80032e2:	68bb      	ldr	r3, [r7, #8]
 80032e4:	f003 0304 	and.w	r3, r3, #4
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d021      	beq.n	8003330 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f003 0320 	and.w	r3, r3, #32
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d107      	bne.n	800330a <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	681a      	ldr	r2, [r3, #0]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f022 0204 	bic.w	r2, r2, #4
 8003308:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800330e:	f003 021c 	and.w	r2, r3, #28
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003316:	2104      	movs	r1, #4
 8003318:	fa01 f202 	lsl.w	r2, r1, r2
 800331c:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003322:	2b00      	cmp	r3, #0
 8003324:	d071      	beq.n	800340a <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800332a:	6878      	ldr	r0, [r7, #4]
 800332c:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 800332e:	e06c      	b.n	800340a <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003334:	f003 031c 	and.w	r3, r3, #28
 8003338:	2202      	movs	r2, #2
 800333a:	409a      	lsls	r2, r3
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	4013      	ands	r3, r2
 8003340:	2b00      	cmp	r3, #0
 8003342:	d02e      	beq.n	80033a2 <HAL_DMA_IRQHandler+0xec>
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	f003 0302 	and.w	r3, r3, #2
 800334a:	2b00      	cmp	r3, #0
 800334c:	d029      	beq.n	80033a2 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f003 0320 	and.w	r3, r3, #32
 8003358:	2b00      	cmp	r3, #0
 800335a:	d10b      	bne.n	8003374 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	681a      	ldr	r2, [r3, #0]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f022 020a 	bic.w	r2, r2, #10
 800336a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2201      	movs	r2, #1
 8003370:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003378:	f003 021c 	and.w	r2, r3, #28
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003380:	2102      	movs	r1, #2
 8003382:	fa01 f202 	lsl.w	r2, r1, r2
 8003386:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2200      	movs	r2, #0
 800338c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003394:	2b00      	cmp	r3, #0
 8003396:	d038      	beq.n	800340a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800339c:	6878      	ldr	r0, [r7, #4]
 800339e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80033a0:	e033      	b.n	800340a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033a6:	f003 031c 	and.w	r3, r3, #28
 80033aa:	2208      	movs	r2, #8
 80033ac:	409a      	lsls	r2, r3
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	4013      	ands	r3, r2
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d02a      	beq.n	800340c <HAL_DMA_IRQHandler+0x156>
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	f003 0308 	and.w	r3, r3, #8
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d025      	beq.n	800340c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	681a      	ldr	r2, [r3, #0]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f022 020e 	bic.w	r2, r2, #14
 80033ce:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033d4:	f003 021c 	and.w	r2, r3, #28
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033dc:	2101      	movs	r1, #1
 80033de:	fa01 f202 	lsl.w	r2, r1, r2
 80033e2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2201      	movs	r2, #1
 80033e8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2201      	movs	r2, #1
 80033ee:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2200      	movs	r2, #0
 80033f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d004      	beq.n	800340c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003406:	6878      	ldr	r0, [r7, #4]
 8003408:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800340a:	bf00      	nop
 800340c:	bf00      	nop
}
 800340e:	3710      	adds	r7, #16
 8003410:	46bd      	mov	sp, r7
 8003412:	bd80      	pop	{r7, pc}

08003414 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003414:	b480      	push	{r7}
 8003416:	b085      	sub	sp, #20
 8003418:	af00      	add	r7, sp, #0
 800341a:	60f8      	str	r0, [r7, #12]
 800341c:	60b9      	str	r1, [r7, #8]
 800341e:	607a      	str	r2, [r7, #4]
 8003420:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003426:	68fa      	ldr	r2, [r7, #12]
 8003428:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800342a:	605a      	str	r2, [r3, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003430:	2b00      	cmp	r3, #0
 8003432:	d004      	beq.n	800343e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003438:	68fa      	ldr	r2, [r7, #12]
 800343a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800343c:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003442:	f003 021c 	and.w	r2, r3, #28
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800344a:	2101      	movs	r1, #1
 800344c:	fa01 f202 	lsl.w	r2, r1, r2
 8003450:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	683a      	ldr	r2, [r7, #0]
 8003458:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	689b      	ldr	r3, [r3, #8]
 800345e:	2b10      	cmp	r3, #16
 8003460:	d108      	bne.n	8003474 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	687a      	ldr	r2, [r7, #4]
 8003468:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	68ba      	ldr	r2, [r7, #8]
 8003470:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003472:	e007      	b.n	8003484 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	68ba      	ldr	r2, [r7, #8]
 800347a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	687a      	ldr	r2, [r7, #4]
 8003482:	60da      	str	r2, [r3, #12]
}
 8003484:	bf00      	nop
 8003486:	3714      	adds	r7, #20
 8003488:	46bd      	mov	sp, r7
 800348a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348e:	4770      	bx	lr

08003490 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003490:	b480      	push	{r7}
 8003492:	b085      	sub	sp, #20
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	461a      	mov	r2, r3
 800349e:	4b17      	ldr	r3, [pc, #92]	; (80034fc <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80034a0:	429a      	cmp	r2, r3
 80034a2:	d80a      	bhi.n	80034ba <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034a8:	089b      	lsrs	r3, r3, #2
 80034aa:	009b      	lsls	r3, r3, #2
 80034ac:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80034b0:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 80034b4:	687a      	ldr	r2, [r7, #4]
 80034b6:	6493      	str	r3, [r2, #72]	; 0x48
 80034b8:	e007      	b.n	80034ca <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034be:	089b      	lsrs	r3, r3, #2
 80034c0:	009a      	lsls	r2, r3, #2
 80034c2:	4b0f      	ldr	r3, [pc, #60]	; (8003500 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80034c4:	4413      	add	r3, r2
 80034c6:	687a      	ldr	r2, [r7, #4]
 80034c8:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	b2db      	uxtb	r3, r3
 80034d0:	3b08      	subs	r3, #8
 80034d2:	4a0c      	ldr	r2, [pc, #48]	; (8003504 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80034d4:	fba2 2303 	umull	r2, r3, r2, r3
 80034d8:	091b      	lsrs	r3, r3, #4
 80034da:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	4a0a      	ldr	r2, [pc, #40]	; (8003508 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80034e0:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	f003 031f 	and.w	r3, r3, #31
 80034e8:	2201      	movs	r2, #1
 80034ea:	409a      	lsls	r2, r3
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	651a      	str	r2, [r3, #80]	; 0x50
}
 80034f0:	bf00      	nop
 80034f2:	3714      	adds	r7, #20
 80034f4:	46bd      	mov	sp, r7
 80034f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fa:	4770      	bx	lr
 80034fc:	40020407 	.word	0x40020407
 8003500:	4002081c 	.word	0x4002081c
 8003504:	cccccccd 	.word	0xcccccccd
 8003508:	40020880 	.word	0x40020880

0800350c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800350c:	b480      	push	{r7}
 800350e:	b085      	sub	sp, #20
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	b2db      	uxtb	r3, r3
 800351a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800351c:	68fa      	ldr	r2, [r7, #12]
 800351e:	4b0b      	ldr	r3, [pc, #44]	; (800354c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003520:	4413      	add	r3, r2
 8003522:	009b      	lsls	r3, r3, #2
 8003524:	461a      	mov	r2, r3
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	4a08      	ldr	r2, [pc, #32]	; (8003550 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800352e:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	3b01      	subs	r3, #1
 8003534:	f003 0303 	and.w	r3, r3, #3
 8003538:	2201      	movs	r2, #1
 800353a:	409a      	lsls	r2, r3
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003540:	bf00      	nop
 8003542:	3714      	adds	r7, #20
 8003544:	46bd      	mov	sp, r7
 8003546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354a:	4770      	bx	lr
 800354c:	1000823f 	.word	0x1000823f
 8003550:	40020940 	.word	0x40020940

08003554 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003554:	b480      	push	{r7}
 8003556:	b087      	sub	sp, #28
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
 800355c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800355e:	2300      	movs	r3, #0
 8003560:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003562:	e166      	b.n	8003832 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	681a      	ldr	r2, [r3, #0]
 8003568:	2101      	movs	r1, #1
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	fa01 f303 	lsl.w	r3, r1, r3
 8003570:	4013      	ands	r3, r2
 8003572:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	2b00      	cmp	r3, #0
 8003578:	f000 8158 	beq.w	800382c <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	f003 0303 	and.w	r3, r3, #3
 8003584:	2b01      	cmp	r3, #1
 8003586:	d005      	beq.n	8003594 <HAL_GPIO_Init+0x40>
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	f003 0303 	and.w	r3, r3, #3
 8003590:	2b02      	cmp	r3, #2
 8003592:	d130      	bne.n	80035f6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	689b      	ldr	r3, [r3, #8]
 8003598:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	005b      	lsls	r3, r3, #1
 800359e:	2203      	movs	r2, #3
 80035a0:	fa02 f303 	lsl.w	r3, r2, r3
 80035a4:	43db      	mvns	r3, r3
 80035a6:	693a      	ldr	r2, [r7, #16]
 80035a8:	4013      	ands	r3, r2
 80035aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	68da      	ldr	r2, [r3, #12]
 80035b0:	697b      	ldr	r3, [r7, #20]
 80035b2:	005b      	lsls	r3, r3, #1
 80035b4:	fa02 f303 	lsl.w	r3, r2, r3
 80035b8:	693a      	ldr	r2, [r7, #16]
 80035ba:	4313      	orrs	r3, r2
 80035bc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	693a      	ldr	r2, [r7, #16]
 80035c2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80035ca:	2201      	movs	r2, #1
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	fa02 f303 	lsl.w	r3, r2, r3
 80035d2:	43db      	mvns	r3, r3
 80035d4:	693a      	ldr	r2, [r7, #16]
 80035d6:	4013      	ands	r3, r2
 80035d8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	091b      	lsrs	r3, r3, #4
 80035e0:	f003 0201 	and.w	r2, r3, #1
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	fa02 f303 	lsl.w	r3, r2, r3
 80035ea:	693a      	ldr	r2, [r7, #16]
 80035ec:	4313      	orrs	r3, r2
 80035ee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	693a      	ldr	r2, [r7, #16]
 80035f4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	f003 0303 	and.w	r3, r3, #3
 80035fe:	2b03      	cmp	r3, #3
 8003600:	d017      	beq.n	8003632 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	68db      	ldr	r3, [r3, #12]
 8003606:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003608:	697b      	ldr	r3, [r7, #20]
 800360a:	005b      	lsls	r3, r3, #1
 800360c:	2203      	movs	r2, #3
 800360e:	fa02 f303 	lsl.w	r3, r2, r3
 8003612:	43db      	mvns	r3, r3
 8003614:	693a      	ldr	r2, [r7, #16]
 8003616:	4013      	ands	r3, r2
 8003618:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	689a      	ldr	r2, [r3, #8]
 800361e:	697b      	ldr	r3, [r7, #20]
 8003620:	005b      	lsls	r3, r3, #1
 8003622:	fa02 f303 	lsl.w	r3, r2, r3
 8003626:	693a      	ldr	r2, [r7, #16]
 8003628:	4313      	orrs	r3, r2
 800362a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	693a      	ldr	r2, [r7, #16]
 8003630:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	f003 0303 	and.w	r3, r3, #3
 800363a:	2b02      	cmp	r3, #2
 800363c:	d123      	bne.n	8003686 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800363e:	697b      	ldr	r3, [r7, #20]
 8003640:	08da      	lsrs	r2, r3, #3
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	3208      	adds	r2, #8
 8003646:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800364a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	f003 0307 	and.w	r3, r3, #7
 8003652:	009b      	lsls	r3, r3, #2
 8003654:	220f      	movs	r2, #15
 8003656:	fa02 f303 	lsl.w	r3, r2, r3
 800365a:	43db      	mvns	r3, r3
 800365c:	693a      	ldr	r2, [r7, #16]
 800365e:	4013      	ands	r3, r2
 8003660:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	691a      	ldr	r2, [r3, #16]
 8003666:	697b      	ldr	r3, [r7, #20]
 8003668:	f003 0307 	and.w	r3, r3, #7
 800366c:	009b      	lsls	r3, r3, #2
 800366e:	fa02 f303 	lsl.w	r3, r2, r3
 8003672:	693a      	ldr	r2, [r7, #16]
 8003674:	4313      	orrs	r3, r2
 8003676:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003678:	697b      	ldr	r3, [r7, #20]
 800367a:	08da      	lsrs	r2, r3, #3
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	3208      	adds	r2, #8
 8003680:	6939      	ldr	r1, [r7, #16]
 8003682:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800368c:	697b      	ldr	r3, [r7, #20]
 800368e:	005b      	lsls	r3, r3, #1
 8003690:	2203      	movs	r2, #3
 8003692:	fa02 f303 	lsl.w	r3, r2, r3
 8003696:	43db      	mvns	r3, r3
 8003698:	693a      	ldr	r2, [r7, #16]
 800369a:	4013      	ands	r3, r2
 800369c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	f003 0203 	and.w	r2, r3, #3
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	005b      	lsls	r3, r3, #1
 80036aa:	fa02 f303 	lsl.w	r3, r2, r3
 80036ae:	693a      	ldr	r2, [r7, #16]
 80036b0:	4313      	orrs	r3, r2
 80036b2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	693a      	ldr	r2, [r7, #16]
 80036b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	f000 80b2 	beq.w	800382c <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036c8:	4b61      	ldr	r3, [pc, #388]	; (8003850 <HAL_GPIO_Init+0x2fc>)
 80036ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036cc:	4a60      	ldr	r2, [pc, #384]	; (8003850 <HAL_GPIO_Init+0x2fc>)
 80036ce:	f043 0301 	orr.w	r3, r3, #1
 80036d2:	6613      	str	r3, [r2, #96]	; 0x60
 80036d4:	4b5e      	ldr	r3, [pc, #376]	; (8003850 <HAL_GPIO_Init+0x2fc>)
 80036d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036d8:	f003 0301 	and.w	r3, r3, #1
 80036dc:	60bb      	str	r3, [r7, #8]
 80036de:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80036e0:	4a5c      	ldr	r2, [pc, #368]	; (8003854 <HAL_GPIO_Init+0x300>)
 80036e2:	697b      	ldr	r3, [r7, #20]
 80036e4:	089b      	lsrs	r3, r3, #2
 80036e6:	3302      	adds	r3, #2
 80036e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036ec:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	f003 0303 	and.w	r3, r3, #3
 80036f4:	009b      	lsls	r3, r3, #2
 80036f6:	220f      	movs	r2, #15
 80036f8:	fa02 f303 	lsl.w	r3, r2, r3
 80036fc:	43db      	mvns	r3, r3
 80036fe:	693a      	ldr	r2, [r7, #16]
 8003700:	4013      	ands	r3, r2
 8003702:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800370a:	d02b      	beq.n	8003764 <HAL_GPIO_Init+0x210>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	4a52      	ldr	r2, [pc, #328]	; (8003858 <HAL_GPIO_Init+0x304>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d025      	beq.n	8003760 <HAL_GPIO_Init+0x20c>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	4a51      	ldr	r2, [pc, #324]	; (800385c <HAL_GPIO_Init+0x308>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d01f      	beq.n	800375c <HAL_GPIO_Init+0x208>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	4a50      	ldr	r2, [pc, #320]	; (8003860 <HAL_GPIO_Init+0x30c>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d019      	beq.n	8003758 <HAL_GPIO_Init+0x204>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	4a4f      	ldr	r2, [pc, #316]	; (8003864 <HAL_GPIO_Init+0x310>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d013      	beq.n	8003754 <HAL_GPIO_Init+0x200>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	4a4e      	ldr	r2, [pc, #312]	; (8003868 <HAL_GPIO_Init+0x314>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d00d      	beq.n	8003750 <HAL_GPIO_Init+0x1fc>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	4a4d      	ldr	r2, [pc, #308]	; (800386c <HAL_GPIO_Init+0x318>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d007      	beq.n	800374c <HAL_GPIO_Init+0x1f8>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	4a4c      	ldr	r2, [pc, #304]	; (8003870 <HAL_GPIO_Init+0x31c>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d101      	bne.n	8003748 <HAL_GPIO_Init+0x1f4>
 8003744:	2307      	movs	r3, #7
 8003746:	e00e      	b.n	8003766 <HAL_GPIO_Init+0x212>
 8003748:	2308      	movs	r3, #8
 800374a:	e00c      	b.n	8003766 <HAL_GPIO_Init+0x212>
 800374c:	2306      	movs	r3, #6
 800374e:	e00a      	b.n	8003766 <HAL_GPIO_Init+0x212>
 8003750:	2305      	movs	r3, #5
 8003752:	e008      	b.n	8003766 <HAL_GPIO_Init+0x212>
 8003754:	2304      	movs	r3, #4
 8003756:	e006      	b.n	8003766 <HAL_GPIO_Init+0x212>
 8003758:	2303      	movs	r3, #3
 800375a:	e004      	b.n	8003766 <HAL_GPIO_Init+0x212>
 800375c:	2302      	movs	r3, #2
 800375e:	e002      	b.n	8003766 <HAL_GPIO_Init+0x212>
 8003760:	2301      	movs	r3, #1
 8003762:	e000      	b.n	8003766 <HAL_GPIO_Init+0x212>
 8003764:	2300      	movs	r3, #0
 8003766:	697a      	ldr	r2, [r7, #20]
 8003768:	f002 0203 	and.w	r2, r2, #3
 800376c:	0092      	lsls	r2, r2, #2
 800376e:	4093      	lsls	r3, r2
 8003770:	693a      	ldr	r2, [r7, #16]
 8003772:	4313      	orrs	r3, r2
 8003774:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003776:	4937      	ldr	r1, [pc, #220]	; (8003854 <HAL_GPIO_Init+0x300>)
 8003778:	697b      	ldr	r3, [r7, #20]
 800377a:	089b      	lsrs	r3, r3, #2
 800377c:	3302      	adds	r3, #2
 800377e:	693a      	ldr	r2, [r7, #16]
 8003780:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003784:	4b3b      	ldr	r3, [pc, #236]	; (8003874 <HAL_GPIO_Init+0x320>)
 8003786:	689b      	ldr	r3, [r3, #8]
 8003788:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	43db      	mvns	r3, r3
 800378e:	693a      	ldr	r2, [r7, #16]
 8003790:	4013      	ands	r3, r2
 8003792:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800379c:	2b00      	cmp	r3, #0
 800379e:	d003      	beq.n	80037a8 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80037a0:	693a      	ldr	r2, [r7, #16]
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	4313      	orrs	r3, r2
 80037a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80037a8:	4a32      	ldr	r2, [pc, #200]	; (8003874 <HAL_GPIO_Init+0x320>)
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80037ae:	4b31      	ldr	r3, [pc, #196]	; (8003874 <HAL_GPIO_Init+0x320>)
 80037b0:	68db      	ldr	r3, [r3, #12]
 80037b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	43db      	mvns	r3, r3
 80037b8:	693a      	ldr	r2, [r7, #16]
 80037ba:	4013      	ands	r3, r2
 80037bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d003      	beq.n	80037d2 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80037ca:	693a      	ldr	r2, [r7, #16]
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	4313      	orrs	r3, r2
 80037d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80037d2:	4a28      	ldr	r2, [pc, #160]	; (8003874 <HAL_GPIO_Init+0x320>)
 80037d4:	693b      	ldr	r3, [r7, #16]
 80037d6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80037d8:	4b26      	ldr	r3, [pc, #152]	; (8003874 <HAL_GPIO_Init+0x320>)
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	43db      	mvns	r3, r3
 80037e2:	693a      	ldr	r2, [r7, #16]
 80037e4:	4013      	ands	r3, r2
 80037e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d003      	beq.n	80037fc <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80037f4:	693a      	ldr	r2, [r7, #16]
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	4313      	orrs	r3, r2
 80037fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80037fc:	4a1d      	ldr	r2, [pc, #116]	; (8003874 <HAL_GPIO_Init+0x320>)
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003802:	4b1c      	ldr	r3, [pc, #112]	; (8003874 <HAL_GPIO_Init+0x320>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	43db      	mvns	r3, r3
 800380c:	693a      	ldr	r2, [r7, #16]
 800380e:	4013      	ands	r3, r2
 8003810:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800381a:	2b00      	cmp	r3, #0
 800381c:	d003      	beq.n	8003826 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800381e:	693a      	ldr	r2, [r7, #16]
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	4313      	orrs	r3, r2
 8003824:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003826:	4a13      	ldr	r2, [pc, #76]	; (8003874 <HAL_GPIO_Init+0x320>)
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800382c:	697b      	ldr	r3, [r7, #20]
 800382e:	3301      	adds	r3, #1
 8003830:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	681a      	ldr	r2, [r3, #0]
 8003836:	697b      	ldr	r3, [r7, #20]
 8003838:	fa22 f303 	lsr.w	r3, r2, r3
 800383c:	2b00      	cmp	r3, #0
 800383e:	f47f ae91 	bne.w	8003564 <HAL_GPIO_Init+0x10>
  }
}
 8003842:	bf00      	nop
 8003844:	bf00      	nop
 8003846:	371c      	adds	r7, #28
 8003848:	46bd      	mov	sp, r7
 800384a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384e:	4770      	bx	lr
 8003850:	40021000 	.word	0x40021000
 8003854:	40010000 	.word	0x40010000
 8003858:	48000400 	.word	0x48000400
 800385c:	48000800 	.word	0x48000800
 8003860:	48000c00 	.word	0x48000c00
 8003864:	48001000 	.word	0x48001000
 8003868:	48001400 	.word	0x48001400
 800386c:	48001800 	.word	0x48001800
 8003870:	48001c00 	.word	0x48001c00
 8003874:	40010400 	.word	0x40010400

08003878 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003878:	b480      	push	{r7}
 800387a:	b085      	sub	sp, #20
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
 8003880:	460b      	mov	r3, r1
 8003882:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	691a      	ldr	r2, [r3, #16]
 8003888:	887b      	ldrh	r3, [r7, #2]
 800388a:	4013      	ands	r3, r2
 800388c:	2b00      	cmp	r3, #0
 800388e:	d002      	beq.n	8003896 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003890:	2301      	movs	r3, #1
 8003892:	73fb      	strb	r3, [r7, #15]
 8003894:	e001      	b.n	800389a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003896:	2300      	movs	r3, #0
 8003898:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800389a:	7bfb      	ldrb	r3, [r7, #15]
}
 800389c:	4618      	mov	r0, r3
 800389e:	3714      	adds	r7, #20
 80038a0:	46bd      	mov	sp, r7
 80038a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a6:	4770      	bx	lr

080038a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80038a8:	b480      	push	{r7}
 80038aa:	b083      	sub	sp, #12
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
 80038b0:	460b      	mov	r3, r1
 80038b2:	807b      	strh	r3, [r7, #2]
 80038b4:	4613      	mov	r3, r2
 80038b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80038b8:	787b      	ldrb	r3, [r7, #1]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d003      	beq.n	80038c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80038be:	887a      	ldrh	r2, [r7, #2]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80038c4:	e002      	b.n	80038cc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80038c6:	887a      	ldrh	r2, [r7, #2]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	629a      	str	r2, [r3, #40]	; 0x28
}
 80038cc:	bf00      	nop
 80038ce:	370c      	adds	r7, #12
 80038d0:	46bd      	mov	sp, r7
 80038d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d6:	4770      	bx	lr

080038d8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80038d8:	b480      	push	{r7}
 80038da:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80038dc:	4b0d      	ldr	r3, [pc, #52]	; (8003914 <HAL_PWREx_GetVoltageRange+0x3c>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80038e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038e8:	d102      	bne.n	80038f0 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80038ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80038ee:	e00b      	b.n	8003908 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80038f0:	4b08      	ldr	r3, [pc, #32]	; (8003914 <HAL_PWREx_GetVoltageRange+0x3c>)
 80038f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80038f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038fe:	d102      	bne.n	8003906 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8003900:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003904:	e000      	b.n	8003908 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8003906:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8003908:	4618      	mov	r0, r3
 800390a:	46bd      	mov	sp, r7
 800390c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003910:	4770      	bx	lr
 8003912:	bf00      	nop
 8003914:	40007000 	.word	0x40007000

08003918 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003918:	b480      	push	{r7}
 800391a:	b085      	sub	sp, #20
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d141      	bne.n	80039aa <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003926:	4b4b      	ldr	r3, [pc, #300]	; (8003a54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800392e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003932:	d131      	bne.n	8003998 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003934:	4b47      	ldr	r3, [pc, #284]	; (8003a54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003936:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800393a:	4a46      	ldr	r2, [pc, #280]	; (8003a54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800393c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003940:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003944:	4b43      	ldr	r3, [pc, #268]	; (8003a54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800394c:	4a41      	ldr	r2, [pc, #260]	; (8003a54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800394e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003952:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003954:	4b40      	ldr	r3, [pc, #256]	; (8003a58 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	2232      	movs	r2, #50	; 0x32
 800395a:	fb02 f303 	mul.w	r3, r2, r3
 800395e:	4a3f      	ldr	r2, [pc, #252]	; (8003a5c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003960:	fba2 2303 	umull	r2, r3, r2, r3
 8003964:	0c9b      	lsrs	r3, r3, #18
 8003966:	3301      	adds	r3, #1
 8003968:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800396a:	e002      	b.n	8003972 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	3b01      	subs	r3, #1
 8003970:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003972:	4b38      	ldr	r3, [pc, #224]	; (8003a54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003974:	695b      	ldr	r3, [r3, #20]
 8003976:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800397a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800397e:	d102      	bne.n	8003986 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d1f2      	bne.n	800396c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003986:	4b33      	ldr	r3, [pc, #204]	; (8003a54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003988:	695b      	ldr	r3, [r3, #20]
 800398a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800398e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003992:	d158      	bne.n	8003a46 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003994:	2303      	movs	r3, #3
 8003996:	e057      	b.n	8003a48 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003998:	4b2e      	ldr	r3, [pc, #184]	; (8003a54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800399a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800399e:	4a2d      	ldr	r2, [pc, #180]	; (8003a54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80039a4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80039a8:	e04d      	b.n	8003a46 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039b0:	d141      	bne.n	8003a36 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80039b2:	4b28      	ldr	r3, [pc, #160]	; (8003a54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80039ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039be:	d131      	bne.n	8003a24 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80039c0:	4b24      	ldr	r3, [pc, #144]	; (8003a54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80039c6:	4a23      	ldr	r2, [pc, #140]	; (8003a54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039cc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80039d0:	4b20      	ldr	r3, [pc, #128]	; (8003a54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80039d8:	4a1e      	ldr	r2, [pc, #120]	; (8003a54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80039de:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80039e0:	4b1d      	ldr	r3, [pc, #116]	; (8003a58 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	2232      	movs	r2, #50	; 0x32
 80039e6:	fb02 f303 	mul.w	r3, r2, r3
 80039ea:	4a1c      	ldr	r2, [pc, #112]	; (8003a5c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80039ec:	fba2 2303 	umull	r2, r3, r2, r3
 80039f0:	0c9b      	lsrs	r3, r3, #18
 80039f2:	3301      	adds	r3, #1
 80039f4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80039f6:	e002      	b.n	80039fe <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	3b01      	subs	r3, #1
 80039fc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80039fe:	4b15      	ldr	r3, [pc, #84]	; (8003a54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a00:	695b      	ldr	r3, [r3, #20]
 8003a02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a0a:	d102      	bne.n	8003a12 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d1f2      	bne.n	80039f8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003a12:	4b10      	ldr	r3, [pc, #64]	; (8003a54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a14:	695b      	ldr	r3, [r3, #20]
 8003a16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a1e:	d112      	bne.n	8003a46 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003a20:	2303      	movs	r3, #3
 8003a22:	e011      	b.n	8003a48 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003a24:	4b0b      	ldr	r3, [pc, #44]	; (8003a54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a2a:	4a0a      	ldr	r2, [pc, #40]	; (8003a54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a30:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003a34:	e007      	b.n	8003a46 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003a36:	4b07      	ldr	r3, [pc, #28]	; (8003a54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003a3e:	4a05      	ldr	r2, [pc, #20]	; (8003a54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a40:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003a44:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003a46:	2300      	movs	r3, #0
}
 8003a48:	4618      	mov	r0, r3
 8003a4a:	3714      	adds	r7, #20
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a52:	4770      	bx	lr
 8003a54:	40007000 	.word	0x40007000
 8003a58:	20000000 	.word	0x20000000
 8003a5c:	431bde83 	.word	0x431bde83

08003a60 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8003a60:	b480      	push	{r7}
 8003a62:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8003a64:	4b05      	ldr	r3, [pc, #20]	; (8003a7c <HAL_PWREx_EnableVddIO2+0x1c>)
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	4a04      	ldr	r2, [pc, #16]	; (8003a7c <HAL_PWREx_EnableVddIO2+0x1c>)
 8003a6a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003a6e:	6053      	str	r3, [r2, #4]
}
 8003a70:	bf00      	nop
 8003a72:	46bd      	mov	sp, r7
 8003a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a78:	4770      	bx	lr
 8003a7a:	bf00      	nop
 8003a7c:	40007000 	.word	0x40007000

08003a80 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b088      	sub	sp, #32
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d102      	bne.n	8003a94 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	f000 bc08 	b.w	80042a4 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a94:	4b96      	ldr	r3, [pc, #600]	; (8003cf0 <HAL_RCC_OscConfig+0x270>)
 8003a96:	689b      	ldr	r3, [r3, #8]
 8003a98:	f003 030c 	and.w	r3, r3, #12
 8003a9c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003a9e:	4b94      	ldr	r3, [pc, #592]	; (8003cf0 <HAL_RCC_OscConfig+0x270>)
 8003aa0:	68db      	ldr	r3, [r3, #12]
 8003aa2:	f003 0303 	and.w	r3, r3, #3
 8003aa6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f003 0310 	and.w	r3, r3, #16
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	f000 80e4 	beq.w	8003c7e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003ab6:	69bb      	ldr	r3, [r7, #24]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d007      	beq.n	8003acc <HAL_RCC_OscConfig+0x4c>
 8003abc:	69bb      	ldr	r3, [r7, #24]
 8003abe:	2b0c      	cmp	r3, #12
 8003ac0:	f040 808b 	bne.w	8003bda <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003ac4:	697b      	ldr	r3, [r7, #20]
 8003ac6:	2b01      	cmp	r3, #1
 8003ac8:	f040 8087 	bne.w	8003bda <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003acc:	4b88      	ldr	r3, [pc, #544]	; (8003cf0 <HAL_RCC_OscConfig+0x270>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f003 0302 	and.w	r3, r3, #2
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d005      	beq.n	8003ae4 <HAL_RCC_OscConfig+0x64>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	699b      	ldr	r3, [r3, #24]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d101      	bne.n	8003ae4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	e3df      	b.n	80042a4 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6a1a      	ldr	r2, [r3, #32]
 8003ae8:	4b81      	ldr	r3, [pc, #516]	; (8003cf0 <HAL_RCC_OscConfig+0x270>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f003 0308 	and.w	r3, r3, #8
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d004      	beq.n	8003afe <HAL_RCC_OscConfig+0x7e>
 8003af4:	4b7e      	ldr	r3, [pc, #504]	; (8003cf0 <HAL_RCC_OscConfig+0x270>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003afc:	e005      	b.n	8003b0a <HAL_RCC_OscConfig+0x8a>
 8003afe:	4b7c      	ldr	r3, [pc, #496]	; (8003cf0 <HAL_RCC_OscConfig+0x270>)
 8003b00:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b04:	091b      	lsrs	r3, r3, #4
 8003b06:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d223      	bcs.n	8003b56 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6a1b      	ldr	r3, [r3, #32]
 8003b12:	4618      	mov	r0, r3
 8003b14:	f000 fdfc 	bl	8004710 <RCC_SetFlashLatencyFromMSIRange>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d001      	beq.n	8003b22 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	e3c0      	b.n	80042a4 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003b22:	4b73      	ldr	r3, [pc, #460]	; (8003cf0 <HAL_RCC_OscConfig+0x270>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a72      	ldr	r2, [pc, #456]	; (8003cf0 <HAL_RCC_OscConfig+0x270>)
 8003b28:	f043 0308 	orr.w	r3, r3, #8
 8003b2c:	6013      	str	r3, [r2, #0]
 8003b2e:	4b70      	ldr	r3, [pc, #448]	; (8003cf0 <HAL_RCC_OscConfig+0x270>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6a1b      	ldr	r3, [r3, #32]
 8003b3a:	496d      	ldr	r1, [pc, #436]	; (8003cf0 <HAL_RCC_OscConfig+0x270>)
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003b40:	4b6b      	ldr	r3, [pc, #428]	; (8003cf0 <HAL_RCC_OscConfig+0x270>)
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	69db      	ldr	r3, [r3, #28]
 8003b4c:	021b      	lsls	r3, r3, #8
 8003b4e:	4968      	ldr	r1, [pc, #416]	; (8003cf0 <HAL_RCC_OscConfig+0x270>)
 8003b50:	4313      	orrs	r3, r2
 8003b52:	604b      	str	r3, [r1, #4]
 8003b54:	e025      	b.n	8003ba2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003b56:	4b66      	ldr	r3, [pc, #408]	; (8003cf0 <HAL_RCC_OscConfig+0x270>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a65      	ldr	r2, [pc, #404]	; (8003cf0 <HAL_RCC_OscConfig+0x270>)
 8003b5c:	f043 0308 	orr.w	r3, r3, #8
 8003b60:	6013      	str	r3, [r2, #0]
 8003b62:	4b63      	ldr	r3, [pc, #396]	; (8003cf0 <HAL_RCC_OscConfig+0x270>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6a1b      	ldr	r3, [r3, #32]
 8003b6e:	4960      	ldr	r1, [pc, #384]	; (8003cf0 <HAL_RCC_OscConfig+0x270>)
 8003b70:	4313      	orrs	r3, r2
 8003b72:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003b74:	4b5e      	ldr	r3, [pc, #376]	; (8003cf0 <HAL_RCC_OscConfig+0x270>)
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	69db      	ldr	r3, [r3, #28]
 8003b80:	021b      	lsls	r3, r3, #8
 8003b82:	495b      	ldr	r1, [pc, #364]	; (8003cf0 <HAL_RCC_OscConfig+0x270>)
 8003b84:	4313      	orrs	r3, r2
 8003b86:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003b88:	69bb      	ldr	r3, [r7, #24]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d109      	bne.n	8003ba2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6a1b      	ldr	r3, [r3, #32]
 8003b92:	4618      	mov	r0, r3
 8003b94:	f000 fdbc 	bl	8004710 <RCC_SetFlashLatencyFromMSIRange>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d001      	beq.n	8003ba2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e380      	b.n	80042a4 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003ba2:	f000 fcc1 	bl	8004528 <HAL_RCC_GetSysClockFreq>
 8003ba6:	4602      	mov	r2, r0
 8003ba8:	4b51      	ldr	r3, [pc, #324]	; (8003cf0 <HAL_RCC_OscConfig+0x270>)
 8003baa:	689b      	ldr	r3, [r3, #8]
 8003bac:	091b      	lsrs	r3, r3, #4
 8003bae:	f003 030f 	and.w	r3, r3, #15
 8003bb2:	4950      	ldr	r1, [pc, #320]	; (8003cf4 <HAL_RCC_OscConfig+0x274>)
 8003bb4:	5ccb      	ldrb	r3, [r1, r3]
 8003bb6:	f003 031f 	and.w	r3, r3, #31
 8003bba:	fa22 f303 	lsr.w	r3, r2, r3
 8003bbe:	4a4e      	ldr	r2, [pc, #312]	; (8003cf8 <HAL_RCC_OscConfig+0x278>)
 8003bc0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003bc2:	4b4e      	ldr	r3, [pc, #312]	; (8003cfc <HAL_RCC_OscConfig+0x27c>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	f7fd fa6e 	bl	80010a8 <HAL_InitTick>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003bd0:	7bfb      	ldrb	r3, [r7, #15]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d052      	beq.n	8003c7c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003bd6:	7bfb      	ldrb	r3, [r7, #15]
 8003bd8:	e364      	b.n	80042a4 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	699b      	ldr	r3, [r3, #24]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d032      	beq.n	8003c48 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003be2:	4b43      	ldr	r3, [pc, #268]	; (8003cf0 <HAL_RCC_OscConfig+0x270>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a42      	ldr	r2, [pc, #264]	; (8003cf0 <HAL_RCC_OscConfig+0x270>)
 8003be8:	f043 0301 	orr.w	r3, r3, #1
 8003bec:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003bee:	f7fd fb7b 	bl	80012e8 <HAL_GetTick>
 8003bf2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003bf4:	e008      	b.n	8003c08 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003bf6:	f7fd fb77 	bl	80012e8 <HAL_GetTick>
 8003bfa:	4602      	mov	r2, r0
 8003bfc:	693b      	ldr	r3, [r7, #16]
 8003bfe:	1ad3      	subs	r3, r2, r3
 8003c00:	2b02      	cmp	r3, #2
 8003c02:	d901      	bls.n	8003c08 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003c04:	2303      	movs	r3, #3
 8003c06:	e34d      	b.n	80042a4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003c08:	4b39      	ldr	r3, [pc, #228]	; (8003cf0 <HAL_RCC_OscConfig+0x270>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f003 0302 	and.w	r3, r3, #2
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d0f0      	beq.n	8003bf6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003c14:	4b36      	ldr	r3, [pc, #216]	; (8003cf0 <HAL_RCC_OscConfig+0x270>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a35      	ldr	r2, [pc, #212]	; (8003cf0 <HAL_RCC_OscConfig+0x270>)
 8003c1a:	f043 0308 	orr.w	r3, r3, #8
 8003c1e:	6013      	str	r3, [r2, #0]
 8003c20:	4b33      	ldr	r3, [pc, #204]	; (8003cf0 <HAL_RCC_OscConfig+0x270>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6a1b      	ldr	r3, [r3, #32]
 8003c2c:	4930      	ldr	r1, [pc, #192]	; (8003cf0 <HAL_RCC_OscConfig+0x270>)
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003c32:	4b2f      	ldr	r3, [pc, #188]	; (8003cf0 <HAL_RCC_OscConfig+0x270>)
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	69db      	ldr	r3, [r3, #28]
 8003c3e:	021b      	lsls	r3, r3, #8
 8003c40:	492b      	ldr	r1, [pc, #172]	; (8003cf0 <HAL_RCC_OscConfig+0x270>)
 8003c42:	4313      	orrs	r3, r2
 8003c44:	604b      	str	r3, [r1, #4]
 8003c46:	e01a      	b.n	8003c7e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003c48:	4b29      	ldr	r3, [pc, #164]	; (8003cf0 <HAL_RCC_OscConfig+0x270>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a28      	ldr	r2, [pc, #160]	; (8003cf0 <HAL_RCC_OscConfig+0x270>)
 8003c4e:	f023 0301 	bic.w	r3, r3, #1
 8003c52:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003c54:	f7fd fb48 	bl	80012e8 <HAL_GetTick>
 8003c58:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003c5a:	e008      	b.n	8003c6e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003c5c:	f7fd fb44 	bl	80012e8 <HAL_GetTick>
 8003c60:	4602      	mov	r2, r0
 8003c62:	693b      	ldr	r3, [r7, #16]
 8003c64:	1ad3      	subs	r3, r2, r3
 8003c66:	2b02      	cmp	r3, #2
 8003c68:	d901      	bls.n	8003c6e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003c6a:	2303      	movs	r3, #3
 8003c6c:	e31a      	b.n	80042a4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003c6e:	4b20      	ldr	r3, [pc, #128]	; (8003cf0 <HAL_RCC_OscConfig+0x270>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f003 0302 	and.w	r3, r3, #2
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d1f0      	bne.n	8003c5c <HAL_RCC_OscConfig+0x1dc>
 8003c7a:	e000      	b.n	8003c7e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003c7c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f003 0301 	and.w	r3, r3, #1
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d073      	beq.n	8003d72 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003c8a:	69bb      	ldr	r3, [r7, #24]
 8003c8c:	2b08      	cmp	r3, #8
 8003c8e:	d005      	beq.n	8003c9c <HAL_RCC_OscConfig+0x21c>
 8003c90:	69bb      	ldr	r3, [r7, #24]
 8003c92:	2b0c      	cmp	r3, #12
 8003c94:	d10e      	bne.n	8003cb4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	2b03      	cmp	r3, #3
 8003c9a:	d10b      	bne.n	8003cb4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c9c:	4b14      	ldr	r3, [pc, #80]	; (8003cf0 <HAL_RCC_OscConfig+0x270>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d063      	beq.n	8003d70 <HAL_RCC_OscConfig+0x2f0>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d15f      	bne.n	8003d70 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	e2f7      	b.n	80042a4 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cbc:	d106      	bne.n	8003ccc <HAL_RCC_OscConfig+0x24c>
 8003cbe:	4b0c      	ldr	r3, [pc, #48]	; (8003cf0 <HAL_RCC_OscConfig+0x270>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a0b      	ldr	r2, [pc, #44]	; (8003cf0 <HAL_RCC_OscConfig+0x270>)
 8003cc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cc8:	6013      	str	r3, [r2, #0]
 8003cca:	e025      	b.n	8003d18 <HAL_RCC_OscConfig+0x298>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003cd4:	d114      	bne.n	8003d00 <HAL_RCC_OscConfig+0x280>
 8003cd6:	4b06      	ldr	r3, [pc, #24]	; (8003cf0 <HAL_RCC_OscConfig+0x270>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4a05      	ldr	r2, [pc, #20]	; (8003cf0 <HAL_RCC_OscConfig+0x270>)
 8003cdc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ce0:	6013      	str	r3, [r2, #0]
 8003ce2:	4b03      	ldr	r3, [pc, #12]	; (8003cf0 <HAL_RCC_OscConfig+0x270>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4a02      	ldr	r2, [pc, #8]	; (8003cf0 <HAL_RCC_OscConfig+0x270>)
 8003ce8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cec:	6013      	str	r3, [r2, #0]
 8003cee:	e013      	b.n	8003d18 <HAL_RCC_OscConfig+0x298>
 8003cf0:	40021000 	.word	0x40021000
 8003cf4:	0800d230 	.word	0x0800d230
 8003cf8:	20000000 	.word	0x20000000
 8003cfc:	20000004 	.word	0x20000004
 8003d00:	4ba0      	ldr	r3, [pc, #640]	; (8003f84 <HAL_RCC_OscConfig+0x504>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a9f      	ldr	r2, [pc, #636]	; (8003f84 <HAL_RCC_OscConfig+0x504>)
 8003d06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d0a:	6013      	str	r3, [r2, #0]
 8003d0c:	4b9d      	ldr	r3, [pc, #628]	; (8003f84 <HAL_RCC_OscConfig+0x504>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a9c      	ldr	r2, [pc, #624]	; (8003f84 <HAL_RCC_OscConfig+0x504>)
 8003d12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d013      	beq.n	8003d48 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d20:	f7fd fae2 	bl	80012e8 <HAL_GetTick>
 8003d24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003d26:	e008      	b.n	8003d3a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d28:	f7fd fade 	bl	80012e8 <HAL_GetTick>
 8003d2c:	4602      	mov	r2, r0
 8003d2e:	693b      	ldr	r3, [r7, #16]
 8003d30:	1ad3      	subs	r3, r2, r3
 8003d32:	2b64      	cmp	r3, #100	; 0x64
 8003d34:	d901      	bls.n	8003d3a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003d36:	2303      	movs	r3, #3
 8003d38:	e2b4      	b.n	80042a4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003d3a:	4b92      	ldr	r3, [pc, #584]	; (8003f84 <HAL_RCC_OscConfig+0x504>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d0f0      	beq.n	8003d28 <HAL_RCC_OscConfig+0x2a8>
 8003d46:	e014      	b.n	8003d72 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d48:	f7fd face 	bl	80012e8 <HAL_GetTick>
 8003d4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003d4e:	e008      	b.n	8003d62 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d50:	f7fd faca 	bl	80012e8 <HAL_GetTick>
 8003d54:	4602      	mov	r2, r0
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	1ad3      	subs	r3, r2, r3
 8003d5a:	2b64      	cmp	r3, #100	; 0x64
 8003d5c:	d901      	bls.n	8003d62 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003d5e:	2303      	movs	r3, #3
 8003d60:	e2a0      	b.n	80042a4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003d62:	4b88      	ldr	r3, [pc, #544]	; (8003f84 <HAL_RCC_OscConfig+0x504>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d1f0      	bne.n	8003d50 <HAL_RCC_OscConfig+0x2d0>
 8003d6e:	e000      	b.n	8003d72 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f003 0302 	and.w	r3, r3, #2
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d060      	beq.n	8003e40 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003d7e:	69bb      	ldr	r3, [r7, #24]
 8003d80:	2b04      	cmp	r3, #4
 8003d82:	d005      	beq.n	8003d90 <HAL_RCC_OscConfig+0x310>
 8003d84:	69bb      	ldr	r3, [r7, #24]
 8003d86:	2b0c      	cmp	r3, #12
 8003d88:	d119      	bne.n	8003dbe <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003d8a:	697b      	ldr	r3, [r7, #20]
 8003d8c:	2b02      	cmp	r3, #2
 8003d8e:	d116      	bne.n	8003dbe <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003d90:	4b7c      	ldr	r3, [pc, #496]	; (8003f84 <HAL_RCC_OscConfig+0x504>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d005      	beq.n	8003da8 <HAL_RCC_OscConfig+0x328>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	68db      	ldr	r3, [r3, #12]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d101      	bne.n	8003da8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003da4:	2301      	movs	r3, #1
 8003da6:	e27d      	b.n	80042a4 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003da8:	4b76      	ldr	r3, [pc, #472]	; (8003f84 <HAL_RCC_OscConfig+0x504>)
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	691b      	ldr	r3, [r3, #16]
 8003db4:	061b      	lsls	r3, r3, #24
 8003db6:	4973      	ldr	r1, [pc, #460]	; (8003f84 <HAL_RCC_OscConfig+0x504>)
 8003db8:	4313      	orrs	r3, r2
 8003dba:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003dbc:	e040      	b.n	8003e40 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	68db      	ldr	r3, [r3, #12]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d023      	beq.n	8003e0e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003dc6:	4b6f      	ldr	r3, [pc, #444]	; (8003f84 <HAL_RCC_OscConfig+0x504>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4a6e      	ldr	r2, [pc, #440]	; (8003f84 <HAL_RCC_OscConfig+0x504>)
 8003dcc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dd0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dd2:	f7fd fa89 	bl	80012e8 <HAL_GetTick>
 8003dd6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003dd8:	e008      	b.n	8003dec <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003dda:	f7fd fa85 	bl	80012e8 <HAL_GetTick>
 8003dde:	4602      	mov	r2, r0
 8003de0:	693b      	ldr	r3, [r7, #16]
 8003de2:	1ad3      	subs	r3, r2, r3
 8003de4:	2b02      	cmp	r3, #2
 8003de6:	d901      	bls.n	8003dec <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003de8:	2303      	movs	r3, #3
 8003dea:	e25b      	b.n	80042a4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003dec:	4b65      	ldr	r3, [pc, #404]	; (8003f84 <HAL_RCC_OscConfig+0x504>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d0f0      	beq.n	8003dda <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003df8:	4b62      	ldr	r3, [pc, #392]	; (8003f84 <HAL_RCC_OscConfig+0x504>)
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	691b      	ldr	r3, [r3, #16]
 8003e04:	061b      	lsls	r3, r3, #24
 8003e06:	495f      	ldr	r1, [pc, #380]	; (8003f84 <HAL_RCC_OscConfig+0x504>)
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	604b      	str	r3, [r1, #4]
 8003e0c:	e018      	b.n	8003e40 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e0e:	4b5d      	ldr	r3, [pc, #372]	; (8003f84 <HAL_RCC_OscConfig+0x504>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4a5c      	ldr	r2, [pc, #368]	; (8003f84 <HAL_RCC_OscConfig+0x504>)
 8003e14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e18:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e1a:	f7fd fa65 	bl	80012e8 <HAL_GetTick>
 8003e1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003e20:	e008      	b.n	8003e34 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e22:	f7fd fa61 	bl	80012e8 <HAL_GetTick>
 8003e26:	4602      	mov	r2, r0
 8003e28:	693b      	ldr	r3, [r7, #16]
 8003e2a:	1ad3      	subs	r3, r2, r3
 8003e2c:	2b02      	cmp	r3, #2
 8003e2e:	d901      	bls.n	8003e34 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003e30:	2303      	movs	r3, #3
 8003e32:	e237      	b.n	80042a4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003e34:	4b53      	ldr	r3, [pc, #332]	; (8003f84 <HAL_RCC_OscConfig+0x504>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d1f0      	bne.n	8003e22 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f003 0308 	and.w	r3, r3, #8
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d03c      	beq.n	8003ec6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	695b      	ldr	r3, [r3, #20]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d01c      	beq.n	8003e8e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e54:	4b4b      	ldr	r3, [pc, #300]	; (8003f84 <HAL_RCC_OscConfig+0x504>)
 8003e56:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e5a:	4a4a      	ldr	r2, [pc, #296]	; (8003f84 <HAL_RCC_OscConfig+0x504>)
 8003e5c:	f043 0301 	orr.w	r3, r3, #1
 8003e60:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e64:	f7fd fa40 	bl	80012e8 <HAL_GetTick>
 8003e68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003e6a:	e008      	b.n	8003e7e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e6c:	f7fd fa3c 	bl	80012e8 <HAL_GetTick>
 8003e70:	4602      	mov	r2, r0
 8003e72:	693b      	ldr	r3, [r7, #16]
 8003e74:	1ad3      	subs	r3, r2, r3
 8003e76:	2b02      	cmp	r3, #2
 8003e78:	d901      	bls.n	8003e7e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003e7a:	2303      	movs	r3, #3
 8003e7c:	e212      	b.n	80042a4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003e7e:	4b41      	ldr	r3, [pc, #260]	; (8003f84 <HAL_RCC_OscConfig+0x504>)
 8003e80:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e84:	f003 0302 	and.w	r3, r3, #2
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d0ef      	beq.n	8003e6c <HAL_RCC_OscConfig+0x3ec>
 8003e8c:	e01b      	b.n	8003ec6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e8e:	4b3d      	ldr	r3, [pc, #244]	; (8003f84 <HAL_RCC_OscConfig+0x504>)
 8003e90:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e94:	4a3b      	ldr	r2, [pc, #236]	; (8003f84 <HAL_RCC_OscConfig+0x504>)
 8003e96:	f023 0301 	bic.w	r3, r3, #1
 8003e9a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e9e:	f7fd fa23 	bl	80012e8 <HAL_GetTick>
 8003ea2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003ea4:	e008      	b.n	8003eb8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ea6:	f7fd fa1f 	bl	80012e8 <HAL_GetTick>
 8003eaa:	4602      	mov	r2, r0
 8003eac:	693b      	ldr	r3, [r7, #16]
 8003eae:	1ad3      	subs	r3, r2, r3
 8003eb0:	2b02      	cmp	r3, #2
 8003eb2:	d901      	bls.n	8003eb8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003eb4:	2303      	movs	r3, #3
 8003eb6:	e1f5      	b.n	80042a4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003eb8:	4b32      	ldr	r3, [pc, #200]	; (8003f84 <HAL_RCC_OscConfig+0x504>)
 8003eba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ebe:	f003 0302 	and.w	r3, r3, #2
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d1ef      	bne.n	8003ea6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f003 0304 	and.w	r3, r3, #4
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	f000 80a6 	beq.w	8004020 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003ed8:	4b2a      	ldr	r3, [pc, #168]	; (8003f84 <HAL_RCC_OscConfig+0x504>)
 8003eda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003edc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d10d      	bne.n	8003f00 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ee4:	4b27      	ldr	r3, [pc, #156]	; (8003f84 <HAL_RCC_OscConfig+0x504>)
 8003ee6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ee8:	4a26      	ldr	r2, [pc, #152]	; (8003f84 <HAL_RCC_OscConfig+0x504>)
 8003eea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003eee:	6593      	str	r3, [r2, #88]	; 0x58
 8003ef0:	4b24      	ldr	r3, [pc, #144]	; (8003f84 <HAL_RCC_OscConfig+0x504>)
 8003ef2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ef4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ef8:	60bb      	str	r3, [r7, #8]
 8003efa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003efc:	2301      	movs	r3, #1
 8003efe:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f00:	4b21      	ldr	r3, [pc, #132]	; (8003f88 <HAL_RCC_OscConfig+0x508>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d118      	bne.n	8003f3e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003f0c:	4b1e      	ldr	r3, [pc, #120]	; (8003f88 <HAL_RCC_OscConfig+0x508>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a1d      	ldr	r2, [pc, #116]	; (8003f88 <HAL_RCC_OscConfig+0x508>)
 8003f12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f16:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f18:	f7fd f9e6 	bl	80012e8 <HAL_GetTick>
 8003f1c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f1e:	e008      	b.n	8003f32 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f20:	f7fd f9e2 	bl	80012e8 <HAL_GetTick>
 8003f24:	4602      	mov	r2, r0
 8003f26:	693b      	ldr	r3, [r7, #16]
 8003f28:	1ad3      	subs	r3, r2, r3
 8003f2a:	2b02      	cmp	r3, #2
 8003f2c:	d901      	bls.n	8003f32 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003f2e:	2303      	movs	r3, #3
 8003f30:	e1b8      	b.n	80042a4 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f32:	4b15      	ldr	r3, [pc, #84]	; (8003f88 <HAL_RCC_OscConfig+0x508>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d0f0      	beq.n	8003f20 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	689b      	ldr	r3, [r3, #8]
 8003f42:	2b01      	cmp	r3, #1
 8003f44:	d108      	bne.n	8003f58 <HAL_RCC_OscConfig+0x4d8>
 8003f46:	4b0f      	ldr	r3, [pc, #60]	; (8003f84 <HAL_RCC_OscConfig+0x504>)
 8003f48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f4c:	4a0d      	ldr	r2, [pc, #52]	; (8003f84 <HAL_RCC_OscConfig+0x504>)
 8003f4e:	f043 0301 	orr.w	r3, r3, #1
 8003f52:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003f56:	e029      	b.n	8003fac <HAL_RCC_OscConfig+0x52c>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	689b      	ldr	r3, [r3, #8]
 8003f5c:	2b05      	cmp	r3, #5
 8003f5e:	d115      	bne.n	8003f8c <HAL_RCC_OscConfig+0x50c>
 8003f60:	4b08      	ldr	r3, [pc, #32]	; (8003f84 <HAL_RCC_OscConfig+0x504>)
 8003f62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f66:	4a07      	ldr	r2, [pc, #28]	; (8003f84 <HAL_RCC_OscConfig+0x504>)
 8003f68:	f043 0304 	orr.w	r3, r3, #4
 8003f6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003f70:	4b04      	ldr	r3, [pc, #16]	; (8003f84 <HAL_RCC_OscConfig+0x504>)
 8003f72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f76:	4a03      	ldr	r2, [pc, #12]	; (8003f84 <HAL_RCC_OscConfig+0x504>)
 8003f78:	f043 0301 	orr.w	r3, r3, #1
 8003f7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003f80:	e014      	b.n	8003fac <HAL_RCC_OscConfig+0x52c>
 8003f82:	bf00      	nop
 8003f84:	40021000 	.word	0x40021000
 8003f88:	40007000 	.word	0x40007000
 8003f8c:	4b9d      	ldr	r3, [pc, #628]	; (8004204 <HAL_RCC_OscConfig+0x784>)
 8003f8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f92:	4a9c      	ldr	r2, [pc, #624]	; (8004204 <HAL_RCC_OscConfig+0x784>)
 8003f94:	f023 0301 	bic.w	r3, r3, #1
 8003f98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003f9c:	4b99      	ldr	r3, [pc, #612]	; (8004204 <HAL_RCC_OscConfig+0x784>)
 8003f9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fa2:	4a98      	ldr	r2, [pc, #608]	; (8004204 <HAL_RCC_OscConfig+0x784>)
 8003fa4:	f023 0304 	bic.w	r3, r3, #4
 8003fa8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	689b      	ldr	r3, [r3, #8]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d016      	beq.n	8003fe2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fb4:	f7fd f998 	bl	80012e8 <HAL_GetTick>
 8003fb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003fba:	e00a      	b.n	8003fd2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fbc:	f7fd f994 	bl	80012e8 <HAL_GetTick>
 8003fc0:	4602      	mov	r2, r0
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	1ad3      	subs	r3, r2, r3
 8003fc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d901      	bls.n	8003fd2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003fce:	2303      	movs	r3, #3
 8003fd0:	e168      	b.n	80042a4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003fd2:	4b8c      	ldr	r3, [pc, #560]	; (8004204 <HAL_RCC_OscConfig+0x784>)
 8003fd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fd8:	f003 0302 	and.w	r3, r3, #2
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d0ed      	beq.n	8003fbc <HAL_RCC_OscConfig+0x53c>
 8003fe0:	e015      	b.n	800400e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fe2:	f7fd f981 	bl	80012e8 <HAL_GetTick>
 8003fe6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003fe8:	e00a      	b.n	8004000 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fea:	f7fd f97d 	bl	80012e8 <HAL_GetTick>
 8003fee:	4602      	mov	r2, r0
 8003ff0:	693b      	ldr	r3, [r7, #16]
 8003ff2:	1ad3      	subs	r3, r2, r3
 8003ff4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d901      	bls.n	8004000 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003ffc:	2303      	movs	r3, #3
 8003ffe:	e151      	b.n	80042a4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004000:	4b80      	ldr	r3, [pc, #512]	; (8004204 <HAL_RCC_OscConfig+0x784>)
 8004002:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004006:	f003 0302 	and.w	r3, r3, #2
 800400a:	2b00      	cmp	r3, #0
 800400c:	d1ed      	bne.n	8003fea <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800400e:	7ffb      	ldrb	r3, [r7, #31]
 8004010:	2b01      	cmp	r3, #1
 8004012:	d105      	bne.n	8004020 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004014:	4b7b      	ldr	r3, [pc, #492]	; (8004204 <HAL_RCC_OscConfig+0x784>)
 8004016:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004018:	4a7a      	ldr	r2, [pc, #488]	; (8004204 <HAL_RCC_OscConfig+0x784>)
 800401a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800401e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f003 0320 	and.w	r3, r3, #32
 8004028:	2b00      	cmp	r3, #0
 800402a:	d03c      	beq.n	80040a6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004030:	2b00      	cmp	r3, #0
 8004032:	d01c      	beq.n	800406e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004034:	4b73      	ldr	r3, [pc, #460]	; (8004204 <HAL_RCC_OscConfig+0x784>)
 8004036:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800403a:	4a72      	ldr	r2, [pc, #456]	; (8004204 <HAL_RCC_OscConfig+0x784>)
 800403c:	f043 0301 	orr.w	r3, r3, #1
 8004040:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004044:	f7fd f950 	bl	80012e8 <HAL_GetTick>
 8004048:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800404a:	e008      	b.n	800405e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800404c:	f7fd f94c 	bl	80012e8 <HAL_GetTick>
 8004050:	4602      	mov	r2, r0
 8004052:	693b      	ldr	r3, [r7, #16]
 8004054:	1ad3      	subs	r3, r2, r3
 8004056:	2b02      	cmp	r3, #2
 8004058:	d901      	bls.n	800405e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800405a:	2303      	movs	r3, #3
 800405c:	e122      	b.n	80042a4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800405e:	4b69      	ldr	r3, [pc, #420]	; (8004204 <HAL_RCC_OscConfig+0x784>)
 8004060:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004064:	f003 0302 	and.w	r3, r3, #2
 8004068:	2b00      	cmp	r3, #0
 800406a:	d0ef      	beq.n	800404c <HAL_RCC_OscConfig+0x5cc>
 800406c:	e01b      	b.n	80040a6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800406e:	4b65      	ldr	r3, [pc, #404]	; (8004204 <HAL_RCC_OscConfig+0x784>)
 8004070:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004074:	4a63      	ldr	r2, [pc, #396]	; (8004204 <HAL_RCC_OscConfig+0x784>)
 8004076:	f023 0301 	bic.w	r3, r3, #1
 800407a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800407e:	f7fd f933 	bl	80012e8 <HAL_GetTick>
 8004082:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004084:	e008      	b.n	8004098 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004086:	f7fd f92f 	bl	80012e8 <HAL_GetTick>
 800408a:	4602      	mov	r2, r0
 800408c:	693b      	ldr	r3, [r7, #16]
 800408e:	1ad3      	subs	r3, r2, r3
 8004090:	2b02      	cmp	r3, #2
 8004092:	d901      	bls.n	8004098 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004094:	2303      	movs	r3, #3
 8004096:	e105      	b.n	80042a4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004098:	4b5a      	ldr	r3, [pc, #360]	; (8004204 <HAL_RCC_OscConfig+0x784>)
 800409a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800409e:	f003 0302 	and.w	r3, r3, #2
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d1ef      	bne.n	8004086 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	f000 80f9 	beq.w	80042a2 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040b4:	2b02      	cmp	r3, #2
 80040b6:	f040 80cf 	bne.w	8004258 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80040ba:	4b52      	ldr	r3, [pc, #328]	; (8004204 <HAL_RCC_OscConfig+0x784>)
 80040bc:	68db      	ldr	r3, [r3, #12]
 80040be:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80040c0:	697b      	ldr	r3, [r7, #20]
 80040c2:	f003 0203 	and.w	r2, r3, #3
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ca:	429a      	cmp	r2, r3
 80040cc:	d12c      	bne.n	8004128 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040d8:	3b01      	subs	r3, #1
 80040da:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80040dc:	429a      	cmp	r2, r3
 80040de:	d123      	bne.n	8004128 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80040e0:	697b      	ldr	r3, [r7, #20]
 80040e2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040ea:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80040ec:	429a      	cmp	r2, r3
 80040ee:	d11b      	bne.n	8004128 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80040f0:	697b      	ldr	r3, [r7, #20]
 80040f2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040fa:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80040fc:	429a      	cmp	r2, r3
 80040fe:	d113      	bne.n	8004128 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800410a:	085b      	lsrs	r3, r3, #1
 800410c:	3b01      	subs	r3, #1
 800410e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004110:	429a      	cmp	r2, r3
 8004112:	d109      	bne.n	8004128 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004114:	697b      	ldr	r3, [r7, #20]
 8004116:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800411e:	085b      	lsrs	r3, r3, #1
 8004120:	3b01      	subs	r3, #1
 8004122:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004124:	429a      	cmp	r2, r3
 8004126:	d071      	beq.n	800420c <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004128:	69bb      	ldr	r3, [r7, #24]
 800412a:	2b0c      	cmp	r3, #12
 800412c:	d068      	beq.n	8004200 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800412e:	4b35      	ldr	r3, [pc, #212]	; (8004204 <HAL_RCC_OscConfig+0x784>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004136:	2b00      	cmp	r3, #0
 8004138:	d105      	bne.n	8004146 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800413a:	4b32      	ldr	r3, [pc, #200]	; (8004204 <HAL_RCC_OscConfig+0x784>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004142:	2b00      	cmp	r3, #0
 8004144:	d001      	beq.n	800414a <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8004146:	2301      	movs	r3, #1
 8004148:	e0ac      	b.n	80042a4 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800414a:	4b2e      	ldr	r3, [pc, #184]	; (8004204 <HAL_RCC_OscConfig+0x784>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4a2d      	ldr	r2, [pc, #180]	; (8004204 <HAL_RCC_OscConfig+0x784>)
 8004150:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004154:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004156:	f7fd f8c7 	bl	80012e8 <HAL_GetTick>
 800415a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800415c:	e008      	b.n	8004170 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800415e:	f7fd f8c3 	bl	80012e8 <HAL_GetTick>
 8004162:	4602      	mov	r2, r0
 8004164:	693b      	ldr	r3, [r7, #16]
 8004166:	1ad3      	subs	r3, r2, r3
 8004168:	2b02      	cmp	r3, #2
 800416a:	d901      	bls.n	8004170 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 800416c:	2303      	movs	r3, #3
 800416e:	e099      	b.n	80042a4 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004170:	4b24      	ldr	r3, [pc, #144]	; (8004204 <HAL_RCC_OscConfig+0x784>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004178:	2b00      	cmp	r3, #0
 800417a:	d1f0      	bne.n	800415e <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800417c:	4b21      	ldr	r3, [pc, #132]	; (8004204 <HAL_RCC_OscConfig+0x784>)
 800417e:	68da      	ldr	r2, [r3, #12]
 8004180:	4b21      	ldr	r3, [pc, #132]	; (8004208 <HAL_RCC_OscConfig+0x788>)
 8004182:	4013      	ands	r3, r2
 8004184:	687a      	ldr	r2, [r7, #4]
 8004186:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004188:	687a      	ldr	r2, [r7, #4]
 800418a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800418c:	3a01      	subs	r2, #1
 800418e:	0112      	lsls	r2, r2, #4
 8004190:	4311      	orrs	r1, r2
 8004192:	687a      	ldr	r2, [r7, #4]
 8004194:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004196:	0212      	lsls	r2, r2, #8
 8004198:	4311      	orrs	r1, r2
 800419a:	687a      	ldr	r2, [r7, #4]
 800419c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800419e:	0852      	lsrs	r2, r2, #1
 80041a0:	3a01      	subs	r2, #1
 80041a2:	0552      	lsls	r2, r2, #21
 80041a4:	4311      	orrs	r1, r2
 80041a6:	687a      	ldr	r2, [r7, #4]
 80041a8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80041aa:	0852      	lsrs	r2, r2, #1
 80041ac:	3a01      	subs	r2, #1
 80041ae:	0652      	lsls	r2, r2, #25
 80041b0:	4311      	orrs	r1, r2
 80041b2:	687a      	ldr	r2, [r7, #4]
 80041b4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80041b6:	06d2      	lsls	r2, r2, #27
 80041b8:	430a      	orrs	r2, r1
 80041ba:	4912      	ldr	r1, [pc, #72]	; (8004204 <HAL_RCC_OscConfig+0x784>)
 80041bc:	4313      	orrs	r3, r2
 80041be:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80041c0:	4b10      	ldr	r3, [pc, #64]	; (8004204 <HAL_RCC_OscConfig+0x784>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4a0f      	ldr	r2, [pc, #60]	; (8004204 <HAL_RCC_OscConfig+0x784>)
 80041c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80041ca:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80041cc:	4b0d      	ldr	r3, [pc, #52]	; (8004204 <HAL_RCC_OscConfig+0x784>)
 80041ce:	68db      	ldr	r3, [r3, #12]
 80041d0:	4a0c      	ldr	r2, [pc, #48]	; (8004204 <HAL_RCC_OscConfig+0x784>)
 80041d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80041d6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80041d8:	f7fd f886 	bl	80012e8 <HAL_GetTick>
 80041dc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80041de:	e008      	b.n	80041f2 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041e0:	f7fd f882 	bl	80012e8 <HAL_GetTick>
 80041e4:	4602      	mov	r2, r0
 80041e6:	693b      	ldr	r3, [r7, #16]
 80041e8:	1ad3      	subs	r3, r2, r3
 80041ea:	2b02      	cmp	r3, #2
 80041ec:	d901      	bls.n	80041f2 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80041ee:	2303      	movs	r3, #3
 80041f0:	e058      	b.n	80042a4 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80041f2:	4b04      	ldr	r3, [pc, #16]	; (8004204 <HAL_RCC_OscConfig+0x784>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d0f0      	beq.n	80041e0 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80041fe:	e050      	b.n	80042a2 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004200:	2301      	movs	r3, #1
 8004202:	e04f      	b.n	80042a4 <HAL_RCC_OscConfig+0x824>
 8004204:	40021000 	.word	0x40021000
 8004208:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800420c:	4b27      	ldr	r3, [pc, #156]	; (80042ac <HAL_RCC_OscConfig+0x82c>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004214:	2b00      	cmp	r3, #0
 8004216:	d144      	bne.n	80042a2 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004218:	4b24      	ldr	r3, [pc, #144]	; (80042ac <HAL_RCC_OscConfig+0x82c>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a23      	ldr	r2, [pc, #140]	; (80042ac <HAL_RCC_OscConfig+0x82c>)
 800421e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004222:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004224:	4b21      	ldr	r3, [pc, #132]	; (80042ac <HAL_RCC_OscConfig+0x82c>)
 8004226:	68db      	ldr	r3, [r3, #12]
 8004228:	4a20      	ldr	r2, [pc, #128]	; (80042ac <HAL_RCC_OscConfig+0x82c>)
 800422a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800422e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004230:	f7fd f85a 	bl	80012e8 <HAL_GetTick>
 8004234:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004236:	e008      	b.n	800424a <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004238:	f7fd f856 	bl	80012e8 <HAL_GetTick>
 800423c:	4602      	mov	r2, r0
 800423e:	693b      	ldr	r3, [r7, #16]
 8004240:	1ad3      	subs	r3, r2, r3
 8004242:	2b02      	cmp	r3, #2
 8004244:	d901      	bls.n	800424a <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8004246:	2303      	movs	r3, #3
 8004248:	e02c      	b.n	80042a4 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800424a:	4b18      	ldr	r3, [pc, #96]	; (80042ac <HAL_RCC_OscConfig+0x82c>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004252:	2b00      	cmp	r3, #0
 8004254:	d0f0      	beq.n	8004238 <HAL_RCC_OscConfig+0x7b8>
 8004256:	e024      	b.n	80042a2 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004258:	69bb      	ldr	r3, [r7, #24]
 800425a:	2b0c      	cmp	r3, #12
 800425c:	d01f      	beq.n	800429e <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800425e:	4b13      	ldr	r3, [pc, #76]	; (80042ac <HAL_RCC_OscConfig+0x82c>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4a12      	ldr	r2, [pc, #72]	; (80042ac <HAL_RCC_OscConfig+0x82c>)
 8004264:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004268:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800426a:	f7fd f83d 	bl	80012e8 <HAL_GetTick>
 800426e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004270:	e008      	b.n	8004284 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004272:	f7fd f839 	bl	80012e8 <HAL_GetTick>
 8004276:	4602      	mov	r2, r0
 8004278:	693b      	ldr	r3, [r7, #16]
 800427a:	1ad3      	subs	r3, r2, r3
 800427c:	2b02      	cmp	r3, #2
 800427e:	d901      	bls.n	8004284 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8004280:	2303      	movs	r3, #3
 8004282:	e00f      	b.n	80042a4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004284:	4b09      	ldr	r3, [pc, #36]	; (80042ac <HAL_RCC_OscConfig+0x82c>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800428c:	2b00      	cmp	r3, #0
 800428e:	d1f0      	bne.n	8004272 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004290:	4b06      	ldr	r3, [pc, #24]	; (80042ac <HAL_RCC_OscConfig+0x82c>)
 8004292:	68da      	ldr	r2, [r3, #12]
 8004294:	4905      	ldr	r1, [pc, #20]	; (80042ac <HAL_RCC_OscConfig+0x82c>)
 8004296:	4b06      	ldr	r3, [pc, #24]	; (80042b0 <HAL_RCC_OscConfig+0x830>)
 8004298:	4013      	ands	r3, r2
 800429a:	60cb      	str	r3, [r1, #12]
 800429c:	e001      	b.n	80042a2 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800429e:	2301      	movs	r3, #1
 80042a0:	e000      	b.n	80042a4 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 80042a2:	2300      	movs	r3, #0
}
 80042a4:	4618      	mov	r0, r3
 80042a6:	3720      	adds	r7, #32
 80042a8:	46bd      	mov	sp, r7
 80042aa:	bd80      	pop	{r7, pc}
 80042ac:	40021000 	.word	0x40021000
 80042b0:	feeefffc 	.word	0xfeeefffc

080042b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b086      	sub	sp, #24
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
 80042bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80042be:	2300      	movs	r3, #0
 80042c0:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d101      	bne.n	80042cc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80042c8:	2301      	movs	r3, #1
 80042ca:	e11d      	b.n	8004508 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80042cc:	4b90      	ldr	r3, [pc, #576]	; (8004510 <HAL_RCC_ClockConfig+0x25c>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f003 030f 	and.w	r3, r3, #15
 80042d4:	683a      	ldr	r2, [r7, #0]
 80042d6:	429a      	cmp	r2, r3
 80042d8:	d910      	bls.n	80042fc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042da:	4b8d      	ldr	r3, [pc, #564]	; (8004510 <HAL_RCC_ClockConfig+0x25c>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f023 020f 	bic.w	r2, r3, #15
 80042e2:	498b      	ldr	r1, [pc, #556]	; (8004510 <HAL_RCC_ClockConfig+0x25c>)
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	4313      	orrs	r3, r2
 80042e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042ea:	4b89      	ldr	r3, [pc, #548]	; (8004510 <HAL_RCC_ClockConfig+0x25c>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f003 030f 	and.w	r3, r3, #15
 80042f2:	683a      	ldr	r2, [r7, #0]
 80042f4:	429a      	cmp	r2, r3
 80042f6:	d001      	beq.n	80042fc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80042f8:	2301      	movs	r3, #1
 80042fa:	e105      	b.n	8004508 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f003 0302 	and.w	r3, r3, #2
 8004304:	2b00      	cmp	r3, #0
 8004306:	d010      	beq.n	800432a <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	689a      	ldr	r2, [r3, #8]
 800430c:	4b81      	ldr	r3, [pc, #516]	; (8004514 <HAL_RCC_ClockConfig+0x260>)
 800430e:	689b      	ldr	r3, [r3, #8]
 8004310:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004314:	429a      	cmp	r2, r3
 8004316:	d908      	bls.n	800432a <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004318:	4b7e      	ldr	r3, [pc, #504]	; (8004514 <HAL_RCC_ClockConfig+0x260>)
 800431a:	689b      	ldr	r3, [r3, #8]
 800431c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	689b      	ldr	r3, [r3, #8]
 8004324:	497b      	ldr	r1, [pc, #492]	; (8004514 <HAL_RCC_ClockConfig+0x260>)
 8004326:	4313      	orrs	r3, r2
 8004328:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f003 0301 	and.w	r3, r3, #1
 8004332:	2b00      	cmp	r3, #0
 8004334:	d079      	beq.n	800442a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	2b03      	cmp	r3, #3
 800433c:	d11e      	bne.n	800437c <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800433e:	4b75      	ldr	r3, [pc, #468]	; (8004514 <HAL_RCC_ClockConfig+0x260>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004346:	2b00      	cmp	r3, #0
 8004348:	d101      	bne.n	800434e <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 800434a:	2301      	movs	r3, #1
 800434c:	e0dc      	b.n	8004508 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800434e:	f000 fa39 	bl	80047c4 <RCC_GetSysClockFreqFromPLLSource>
 8004352:	4603      	mov	r3, r0
 8004354:	4a70      	ldr	r2, [pc, #448]	; (8004518 <HAL_RCC_ClockConfig+0x264>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d946      	bls.n	80043e8 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800435a:	4b6e      	ldr	r3, [pc, #440]	; (8004514 <HAL_RCC_ClockConfig+0x260>)
 800435c:	689b      	ldr	r3, [r3, #8]
 800435e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004362:	2b00      	cmp	r3, #0
 8004364:	d140      	bne.n	80043e8 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004366:	4b6b      	ldr	r3, [pc, #428]	; (8004514 <HAL_RCC_ClockConfig+0x260>)
 8004368:	689b      	ldr	r3, [r3, #8]
 800436a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800436e:	4a69      	ldr	r2, [pc, #420]	; (8004514 <HAL_RCC_ClockConfig+0x260>)
 8004370:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004374:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004376:	2380      	movs	r3, #128	; 0x80
 8004378:	617b      	str	r3, [r7, #20]
 800437a:	e035      	b.n	80043e8 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	2b02      	cmp	r3, #2
 8004382:	d107      	bne.n	8004394 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004384:	4b63      	ldr	r3, [pc, #396]	; (8004514 <HAL_RCC_ClockConfig+0x260>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800438c:	2b00      	cmp	r3, #0
 800438e:	d115      	bne.n	80043bc <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004390:	2301      	movs	r3, #1
 8004392:	e0b9      	b.n	8004508 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d107      	bne.n	80043ac <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800439c:	4b5d      	ldr	r3, [pc, #372]	; (8004514 <HAL_RCC_ClockConfig+0x260>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f003 0302 	and.w	r3, r3, #2
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d109      	bne.n	80043bc <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80043a8:	2301      	movs	r3, #1
 80043aa:	e0ad      	b.n	8004508 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80043ac:	4b59      	ldr	r3, [pc, #356]	; (8004514 <HAL_RCC_ClockConfig+0x260>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d101      	bne.n	80043bc <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80043b8:	2301      	movs	r3, #1
 80043ba:	e0a5      	b.n	8004508 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80043bc:	f000 f8b4 	bl	8004528 <HAL_RCC_GetSysClockFreq>
 80043c0:	4603      	mov	r3, r0
 80043c2:	4a55      	ldr	r2, [pc, #340]	; (8004518 <HAL_RCC_ClockConfig+0x264>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d90f      	bls.n	80043e8 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80043c8:	4b52      	ldr	r3, [pc, #328]	; (8004514 <HAL_RCC_ClockConfig+0x260>)
 80043ca:	689b      	ldr	r3, [r3, #8]
 80043cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d109      	bne.n	80043e8 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80043d4:	4b4f      	ldr	r3, [pc, #316]	; (8004514 <HAL_RCC_ClockConfig+0x260>)
 80043d6:	689b      	ldr	r3, [r3, #8]
 80043d8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80043dc:	4a4d      	ldr	r2, [pc, #308]	; (8004514 <HAL_RCC_ClockConfig+0x260>)
 80043de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043e2:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80043e4:	2380      	movs	r3, #128	; 0x80
 80043e6:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80043e8:	4b4a      	ldr	r3, [pc, #296]	; (8004514 <HAL_RCC_ClockConfig+0x260>)
 80043ea:	689b      	ldr	r3, [r3, #8]
 80043ec:	f023 0203 	bic.w	r2, r3, #3
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	4947      	ldr	r1, [pc, #284]	; (8004514 <HAL_RCC_ClockConfig+0x260>)
 80043f6:	4313      	orrs	r3, r2
 80043f8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043fa:	f7fc ff75 	bl	80012e8 <HAL_GetTick>
 80043fe:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004400:	e00a      	b.n	8004418 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004402:	f7fc ff71 	bl	80012e8 <HAL_GetTick>
 8004406:	4602      	mov	r2, r0
 8004408:	693b      	ldr	r3, [r7, #16]
 800440a:	1ad3      	subs	r3, r2, r3
 800440c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004410:	4293      	cmp	r3, r2
 8004412:	d901      	bls.n	8004418 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8004414:	2303      	movs	r3, #3
 8004416:	e077      	b.n	8004508 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004418:	4b3e      	ldr	r3, [pc, #248]	; (8004514 <HAL_RCC_ClockConfig+0x260>)
 800441a:	689b      	ldr	r3, [r3, #8]
 800441c:	f003 020c 	and.w	r2, r3, #12
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	009b      	lsls	r3, r3, #2
 8004426:	429a      	cmp	r2, r3
 8004428:	d1eb      	bne.n	8004402 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 800442a:	697b      	ldr	r3, [r7, #20]
 800442c:	2b80      	cmp	r3, #128	; 0x80
 800442e:	d105      	bne.n	800443c <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004430:	4b38      	ldr	r3, [pc, #224]	; (8004514 <HAL_RCC_ClockConfig+0x260>)
 8004432:	689b      	ldr	r3, [r3, #8]
 8004434:	4a37      	ldr	r2, [pc, #220]	; (8004514 <HAL_RCC_ClockConfig+0x260>)
 8004436:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800443a:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f003 0302 	and.w	r3, r3, #2
 8004444:	2b00      	cmp	r3, #0
 8004446:	d010      	beq.n	800446a <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	689a      	ldr	r2, [r3, #8]
 800444c:	4b31      	ldr	r3, [pc, #196]	; (8004514 <HAL_RCC_ClockConfig+0x260>)
 800444e:	689b      	ldr	r3, [r3, #8]
 8004450:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004454:	429a      	cmp	r2, r3
 8004456:	d208      	bcs.n	800446a <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004458:	4b2e      	ldr	r3, [pc, #184]	; (8004514 <HAL_RCC_ClockConfig+0x260>)
 800445a:	689b      	ldr	r3, [r3, #8]
 800445c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	689b      	ldr	r3, [r3, #8]
 8004464:	492b      	ldr	r1, [pc, #172]	; (8004514 <HAL_RCC_ClockConfig+0x260>)
 8004466:	4313      	orrs	r3, r2
 8004468:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800446a:	4b29      	ldr	r3, [pc, #164]	; (8004510 <HAL_RCC_ClockConfig+0x25c>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f003 030f 	and.w	r3, r3, #15
 8004472:	683a      	ldr	r2, [r7, #0]
 8004474:	429a      	cmp	r2, r3
 8004476:	d210      	bcs.n	800449a <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004478:	4b25      	ldr	r3, [pc, #148]	; (8004510 <HAL_RCC_ClockConfig+0x25c>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f023 020f 	bic.w	r2, r3, #15
 8004480:	4923      	ldr	r1, [pc, #140]	; (8004510 <HAL_RCC_ClockConfig+0x25c>)
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	4313      	orrs	r3, r2
 8004486:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004488:	4b21      	ldr	r3, [pc, #132]	; (8004510 <HAL_RCC_ClockConfig+0x25c>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f003 030f 	and.w	r3, r3, #15
 8004490:	683a      	ldr	r2, [r7, #0]
 8004492:	429a      	cmp	r2, r3
 8004494:	d001      	beq.n	800449a <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8004496:	2301      	movs	r3, #1
 8004498:	e036      	b.n	8004508 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f003 0304 	and.w	r3, r3, #4
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d008      	beq.n	80044b8 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80044a6:	4b1b      	ldr	r3, [pc, #108]	; (8004514 <HAL_RCC_ClockConfig+0x260>)
 80044a8:	689b      	ldr	r3, [r3, #8]
 80044aa:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	68db      	ldr	r3, [r3, #12]
 80044b2:	4918      	ldr	r1, [pc, #96]	; (8004514 <HAL_RCC_ClockConfig+0x260>)
 80044b4:	4313      	orrs	r3, r2
 80044b6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f003 0308 	and.w	r3, r3, #8
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d009      	beq.n	80044d8 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80044c4:	4b13      	ldr	r3, [pc, #76]	; (8004514 <HAL_RCC_ClockConfig+0x260>)
 80044c6:	689b      	ldr	r3, [r3, #8]
 80044c8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	691b      	ldr	r3, [r3, #16]
 80044d0:	00db      	lsls	r3, r3, #3
 80044d2:	4910      	ldr	r1, [pc, #64]	; (8004514 <HAL_RCC_ClockConfig+0x260>)
 80044d4:	4313      	orrs	r3, r2
 80044d6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80044d8:	f000 f826 	bl	8004528 <HAL_RCC_GetSysClockFreq>
 80044dc:	4602      	mov	r2, r0
 80044de:	4b0d      	ldr	r3, [pc, #52]	; (8004514 <HAL_RCC_ClockConfig+0x260>)
 80044e0:	689b      	ldr	r3, [r3, #8]
 80044e2:	091b      	lsrs	r3, r3, #4
 80044e4:	f003 030f 	and.w	r3, r3, #15
 80044e8:	490c      	ldr	r1, [pc, #48]	; (800451c <HAL_RCC_ClockConfig+0x268>)
 80044ea:	5ccb      	ldrb	r3, [r1, r3]
 80044ec:	f003 031f 	and.w	r3, r3, #31
 80044f0:	fa22 f303 	lsr.w	r3, r2, r3
 80044f4:	4a0a      	ldr	r2, [pc, #40]	; (8004520 <HAL_RCC_ClockConfig+0x26c>)
 80044f6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80044f8:	4b0a      	ldr	r3, [pc, #40]	; (8004524 <HAL_RCC_ClockConfig+0x270>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4618      	mov	r0, r3
 80044fe:	f7fc fdd3 	bl	80010a8 <HAL_InitTick>
 8004502:	4603      	mov	r3, r0
 8004504:	73fb      	strb	r3, [r7, #15]

  return status;
 8004506:	7bfb      	ldrb	r3, [r7, #15]
}
 8004508:	4618      	mov	r0, r3
 800450a:	3718      	adds	r7, #24
 800450c:	46bd      	mov	sp, r7
 800450e:	bd80      	pop	{r7, pc}
 8004510:	40022000 	.word	0x40022000
 8004514:	40021000 	.word	0x40021000
 8004518:	04c4b400 	.word	0x04c4b400
 800451c:	0800d230 	.word	0x0800d230
 8004520:	20000000 	.word	0x20000000
 8004524:	20000004 	.word	0x20000004

08004528 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004528:	b480      	push	{r7}
 800452a:	b089      	sub	sp, #36	; 0x24
 800452c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800452e:	2300      	movs	r3, #0
 8004530:	61fb      	str	r3, [r7, #28]
 8004532:	2300      	movs	r3, #0
 8004534:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004536:	4b3e      	ldr	r3, [pc, #248]	; (8004630 <HAL_RCC_GetSysClockFreq+0x108>)
 8004538:	689b      	ldr	r3, [r3, #8]
 800453a:	f003 030c 	and.w	r3, r3, #12
 800453e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004540:	4b3b      	ldr	r3, [pc, #236]	; (8004630 <HAL_RCC_GetSysClockFreq+0x108>)
 8004542:	68db      	ldr	r3, [r3, #12]
 8004544:	f003 0303 	and.w	r3, r3, #3
 8004548:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800454a:	693b      	ldr	r3, [r7, #16]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d005      	beq.n	800455c <HAL_RCC_GetSysClockFreq+0x34>
 8004550:	693b      	ldr	r3, [r7, #16]
 8004552:	2b0c      	cmp	r3, #12
 8004554:	d121      	bne.n	800459a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	2b01      	cmp	r3, #1
 800455a:	d11e      	bne.n	800459a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800455c:	4b34      	ldr	r3, [pc, #208]	; (8004630 <HAL_RCC_GetSysClockFreq+0x108>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f003 0308 	and.w	r3, r3, #8
 8004564:	2b00      	cmp	r3, #0
 8004566:	d107      	bne.n	8004578 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004568:	4b31      	ldr	r3, [pc, #196]	; (8004630 <HAL_RCC_GetSysClockFreq+0x108>)
 800456a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800456e:	0a1b      	lsrs	r3, r3, #8
 8004570:	f003 030f 	and.w	r3, r3, #15
 8004574:	61fb      	str	r3, [r7, #28]
 8004576:	e005      	b.n	8004584 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004578:	4b2d      	ldr	r3, [pc, #180]	; (8004630 <HAL_RCC_GetSysClockFreq+0x108>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	091b      	lsrs	r3, r3, #4
 800457e:	f003 030f 	and.w	r3, r3, #15
 8004582:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004584:	4a2b      	ldr	r2, [pc, #172]	; (8004634 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004586:	69fb      	ldr	r3, [r7, #28]
 8004588:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800458c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800458e:	693b      	ldr	r3, [r7, #16]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d10d      	bne.n	80045b0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004594:	69fb      	ldr	r3, [r7, #28]
 8004596:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004598:	e00a      	b.n	80045b0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800459a:	693b      	ldr	r3, [r7, #16]
 800459c:	2b04      	cmp	r3, #4
 800459e:	d102      	bne.n	80045a6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80045a0:	4b25      	ldr	r3, [pc, #148]	; (8004638 <HAL_RCC_GetSysClockFreq+0x110>)
 80045a2:	61bb      	str	r3, [r7, #24]
 80045a4:	e004      	b.n	80045b0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80045a6:	693b      	ldr	r3, [r7, #16]
 80045a8:	2b08      	cmp	r3, #8
 80045aa:	d101      	bne.n	80045b0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80045ac:	4b22      	ldr	r3, [pc, #136]	; (8004638 <HAL_RCC_GetSysClockFreq+0x110>)
 80045ae:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80045b0:	693b      	ldr	r3, [r7, #16]
 80045b2:	2b0c      	cmp	r3, #12
 80045b4:	d134      	bne.n	8004620 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80045b6:	4b1e      	ldr	r3, [pc, #120]	; (8004630 <HAL_RCC_GetSysClockFreq+0x108>)
 80045b8:	68db      	ldr	r3, [r3, #12]
 80045ba:	f003 0303 	and.w	r3, r3, #3
 80045be:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	2b02      	cmp	r3, #2
 80045c4:	d003      	beq.n	80045ce <HAL_RCC_GetSysClockFreq+0xa6>
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	2b03      	cmp	r3, #3
 80045ca:	d003      	beq.n	80045d4 <HAL_RCC_GetSysClockFreq+0xac>
 80045cc:	e005      	b.n	80045da <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80045ce:	4b1a      	ldr	r3, [pc, #104]	; (8004638 <HAL_RCC_GetSysClockFreq+0x110>)
 80045d0:	617b      	str	r3, [r7, #20]
      break;
 80045d2:	e005      	b.n	80045e0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80045d4:	4b18      	ldr	r3, [pc, #96]	; (8004638 <HAL_RCC_GetSysClockFreq+0x110>)
 80045d6:	617b      	str	r3, [r7, #20]
      break;
 80045d8:	e002      	b.n	80045e0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80045da:	69fb      	ldr	r3, [r7, #28]
 80045dc:	617b      	str	r3, [r7, #20]
      break;
 80045de:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80045e0:	4b13      	ldr	r3, [pc, #76]	; (8004630 <HAL_RCC_GetSysClockFreq+0x108>)
 80045e2:	68db      	ldr	r3, [r3, #12]
 80045e4:	091b      	lsrs	r3, r3, #4
 80045e6:	f003 030f 	and.w	r3, r3, #15
 80045ea:	3301      	adds	r3, #1
 80045ec:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80045ee:	4b10      	ldr	r3, [pc, #64]	; (8004630 <HAL_RCC_GetSysClockFreq+0x108>)
 80045f0:	68db      	ldr	r3, [r3, #12]
 80045f2:	0a1b      	lsrs	r3, r3, #8
 80045f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80045f8:	697a      	ldr	r2, [r7, #20]
 80045fa:	fb03 f202 	mul.w	r2, r3, r2
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	fbb2 f3f3 	udiv	r3, r2, r3
 8004604:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004606:	4b0a      	ldr	r3, [pc, #40]	; (8004630 <HAL_RCC_GetSysClockFreq+0x108>)
 8004608:	68db      	ldr	r3, [r3, #12]
 800460a:	0e5b      	lsrs	r3, r3, #25
 800460c:	f003 0303 	and.w	r3, r3, #3
 8004610:	3301      	adds	r3, #1
 8004612:	005b      	lsls	r3, r3, #1
 8004614:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004616:	697a      	ldr	r2, [r7, #20]
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	fbb2 f3f3 	udiv	r3, r2, r3
 800461e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004620:	69bb      	ldr	r3, [r7, #24]
}
 8004622:	4618      	mov	r0, r3
 8004624:	3724      	adds	r7, #36	; 0x24
 8004626:	46bd      	mov	sp, r7
 8004628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462c:	4770      	bx	lr
 800462e:	bf00      	nop
 8004630:	40021000 	.word	0x40021000
 8004634:	0800d248 	.word	0x0800d248
 8004638:	00f42400 	.word	0x00f42400

0800463c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800463c:	b480      	push	{r7}
 800463e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004640:	4b03      	ldr	r3, [pc, #12]	; (8004650 <HAL_RCC_GetHCLKFreq+0x14>)
 8004642:	681b      	ldr	r3, [r3, #0]
}
 8004644:	4618      	mov	r0, r3
 8004646:	46bd      	mov	sp, r7
 8004648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464c:	4770      	bx	lr
 800464e:	bf00      	nop
 8004650:	20000000 	.word	0x20000000

08004654 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004658:	f7ff fff0 	bl	800463c <HAL_RCC_GetHCLKFreq>
 800465c:	4602      	mov	r2, r0
 800465e:	4b06      	ldr	r3, [pc, #24]	; (8004678 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004660:	689b      	ldr	r3, [r3, #8]
 8004662:	0a1b      	lsrs	r3, r3, #8
 8004664:	f003 0307 	and.w	r3, r3, #7
 8004668:	4904      	ldr	r1, [pc, #16]	; (800467c <HAL_RCC_GetPCLK1Freq+0x28>)
 800466a:	5ccb      	ldrb	r3, [r1, r3]
 800466c:	f003 031f 	and.w	r3, r3, #31
 8004670:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004674:	4618      	mov	r0, r3
 8004676:	bd80      	pop	{r7, pc}
 8004678:	40021000 	.word	0x40021000
 800467c:	0800d240 	.word	0x0800d240

08004680 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004684:	f7ff ffda 	bl	800463c <HAL_RCC_GetHCLKFreq>
 8004688:	4602      	mov	r2, r0
 800468a:	4b06      	ldr	r3, [pc, #24]	; (80046a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800468c:	689b      	ldr	r3, [r3, #8]
 800468e:	0adb      	lsrs	r3, r3, #11
 8004690:	f003 0307 	and.w	r3, r3, #7
 8004694:	4904      	ldr	r1, [pc, #16]	; (80046a8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004696:	5ccb      	ldrb	r3, [r1, r3]
 8004698:	f003 031f 	and.w	r3, r3, #31
 800469c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046a0:	4618      	mov	r0, r3
 80046a2:	bd80      	pop	{r7, pc}
 80046a4:	40021000 	.word	0x40021000
 80046a8:	0800d240 	.word	0x0800d240

080046ac <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80046ac:	b480      	push	{r7}
 80046ae:	b083      	sub	sp, #12
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
 80046b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	220f      	movs	r2, #15
 80046ba:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80046bc:	4b12      	ldr	r3, [pc, #72]	; (8004708 <HAL_RCC_GetClockConfig+0x5c>)
 80046be:	689b      	ldr	r3, [r3, #8]
 80046c0:	f003 0203 	and.w	r2, r3, #3
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80046c8:	4b0f      	ldr	r3, [pc, #60]	; (8004708 <HAL_RCC_GetClockConfig+0x5c>)
 80046ca:	689b      	ldr	r3, [r3, #8]
 80046cc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80046d4:	4b0c      	ldr	r3, [pc, #48]	; (8004708 <HAL_RCC_GetClockConfig+0x5c>)
 80046d6:	689b      	ldr	r3, [r3, #8]
 80046d8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80046e0:	4b09      	ldr	r3, [pc, #36]	; (8004708 <HAL_RCC_GetClockConfig+0x5c>)
 80046e2:	689b      	ldr	r3, [r3, #8]
 80046e4:	08db      	lsrs	r3, r3, #3
 80046e6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80046ee:	4b07      	ldr	r3, [pc, #28]	; (800470c <HAL_RCC_GetClockConfig+0x60>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f003 020f 	and.w	r2, r3, #15
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	601a      	str	r2, [r3, #0]
}
 80046fa:	bf00      	nop
 80046fc:	370c      	adds	r7, #12
 80046fe:	46bd      	mov	sp, r7
 8004700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004704:	4770      	bx	lr
 8004706:	bf00      	nop
 8004708:	40021000 	.word	0x40021000
 800470c:	40022000 	.word	0x40022000

08004710 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b086      	sub	sp, #24
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004718:	2300      	movs	r3, #0
 800471a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800471c:	4b27      	ldr	r3, [pc, #156]	; (80047bc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800471e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004720:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004724:	2b00      	cmp	r3, #0
 8004726:	d003      	beq.n	8004730 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004728:	f7ff f8d6 	bl	80038d8 <HAL_PWREx_GetVoltageRange>
 800472c:	6178      	str	r0, [r7, #20]
 800472e:	e014      	b.n	800475a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004730:	4b22      	ldr	r3, [pc, #136]	; (80047bc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004732:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004734:	4a21      	ldr	r2, [pc, #132]	; (80047bc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004736:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800473a:	6593      	str	r3, [r2, #88]	; 0x58
 800473c:	4b1f      	ldr	r3, [pc, #124]	; (80047bc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800473e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004740:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004744:	60fb      	str	r3, [r7, #12]
 8004746:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004748:	f7ff f8c6 	bl	80038d8 <HAL_PWREx_GetVoltageRange>
 800474c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800474e:	4b1b      	ldr	r3, [pc, #108]	; (80047bc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004750:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004752:	4a1a      	ldr	r2, [pc, #104]	; (80047bc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004754:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004758:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800475a:	697b      	ldr	r3, [r7, #20]
 800475c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004760:	d10b      	bne.n	800477a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2b80      	cmp	r3, #128	; 0x80
 8004766:	d913      	bls.n	8004790 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2ba0      	cmp	r3, #160	; 0xa0
 800476c:	d902      	bls.n	8004774 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800476e:	2302      	movs	r3, #2
 8004770:	613b      	str	r3, [r7, #16]
 8004772:	e00d      	b.n	8004790 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004774:	2301      	movs	r3, #1
 8004776:	613b      	str	r3, [r7, #16]
 8004778:	e00a      	b.n	8004790 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2b7f      	cmp	r3, #127	; 0x7f
 800477e:	d902      	bls.n	8004786 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8004780:	2302      	movs	r3, #2
 8004782:	613b      	str	r3, [r7, #16]
 8004784:	e004      	b.n	8004790 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2b70      	cmp	r3, #112	; 0x70
 800478a:	d101      	bne.n	8004790 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800478c:	2301      	movs	r3, #1
 800478e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004790:	4b0b      	ldr	r3, [pc, #44]	; (80047c0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f023 020f 	bic.w	r2, r3, #15
 8004798:	4909      	ldr	r1, [pc, #36]	; (80047c0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800479a:	693b      	ldr	r3, [r7, #16]
 800479c:	4313      	orrs	r3, r2
 800479e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80047a0:	4b07      	ldr	r3, [pc, #28]	; (80047c0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f003 030f 	and.w	r3, r3, #15
 80047a8:	693a      	ldr	r2, [r7, #16]
 80047aa:	429a      	cmp	r2, r3
 80047ac:	d001      	beq.n	80047b2 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 80047ae:	2301      	movs	r3, #1
 80047b0:	e000      	b.n	80047b4 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 80047b2:	2300      	movs	r3, #0
}
 80047b4:	4618      	mov	r0, r3
 80047b6:	3718      	adds	r7, #24
 80047b8:	46bd      	mov	sp, r7
 80047ba:	bd80      	pop	{r7, pc}
 80047bc:	40021000 	.word	0x40021000
 80047c0:	40022000 	.word	0x40022000

080047c4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80047c4:	b480      	push	{r7}
 80047c6:	b087      	sub	sp, #28
 80047c8:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80047ca:	4b2d      	ldr	r3, [pc, #180]	; (8004880 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80047cc:	68db      	ldr	r3, [r3, #12]
 80047ce:	f003 0303 	and.w	r3, r3, #3
 80047d2:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	2b03      	cmp	r3, #3
 80047d8:	d00b      	beq.n	80047f2 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	2b03      	cmp	r3, #3
 80047de:	d825      	bhi.n	800482c <RCC_GetSysClockFreqFromPLLSource+0x68>
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	2b01      	cmp	r3, #1
 80047e4:	d008      	beq.n	80047f8 <RCC_GetSysClockFreqFromPLLSource+0x34>
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	2b02      	cmp	r3, #2
 80047ea:	d11f      	bne.n	800482c <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 80047ec:	4b25      	ldr	r3, [pc, #148]	; (8004884 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80047ee:	613b      	str	r3, [r7, #16]
    break;
 80047f0:	e01f      	b.n	8004832 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 80047f2:	4b24      	ldr	r3, [pc, #144]	; (8004884 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80047f4:	613b      	str	r3, [r7, #16]
    break;
 80047f6:	e01c      	b.n	8004832 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80047f8:	4b21      	ldr	r3, [pc, #132]	; (8004880 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f003 0308 	and.w	r3, r3, #8
 8004800:	2b00      	cmp	r3, #0
 8004802:	d107      	bne.n	8004814 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004804:	4b1e      	ldr	r3, [pc, #120]	; (8004880 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004806:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800480a:	0a1b      	lsrs	r3, r3, #8
 800480c:	f003 030f 	and.w	r3, r3, #15
 8004810:	617b      	str	r3, [r7, #20]
 8004812:	e005      	b.n	8004820 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004814:	4b1a      	ldr	r3, [pc, #104]	; (8004880 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	091b      	lsrs	r3, r3, #4
 800481a:	f003 030f 	and.w	r3, r3, #15
 800481e:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8004820:	4a19      	ldr	r2, [pc, #100]	; (8004888 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8004822:	697b      	ldr	r3, [r7, #20]
 8004824:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004828:	613b      	str	r3, [r7, #16]
    break;
 800482a:	e002      	b.n	8004832 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 800482c:	2300      	movs	r3, #0
 800482e:	613b      	str	r3, [r7, #16]
    break;
 8004830:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004832:	4b13      	ldr	r3, [pc, #76]	; (8004880 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004834:	68db      	ldr	r3, [r3, #12]
 8004836:	091b      	lsrs	r3, r3, #4
 8004838:	f003 030f 	and.w	r3, r3, #15
 800483c:	3301      	adds	r3, #1
 800483e:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004840:	4b0f      	ldr	r3, [pc, #60]	; (8004880 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004842:	68db      	ldr	r3, [r3, #12]
 8004844:	0a1b      	lsrs	r3, r3, #8
 8004846:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800484a:	693a      	ldr	r2, [r7, #16]
 800484c:	fb03 f202 	mul.w	r2, r3, r2
 8004850:	68bb      	ldr	r3, [r7, #8]
 8004852:	fbb2 f3f3 	udiv	r3, r2, r3
 8004856:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004858:	4b09      	ldr	r3, [pc, #36]	; (8004880 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800485a:	68db      	ldr	r3, [r3, #12]
 800485c:	0e5b      	lsrs	r3, r3, #25
 800485e:	f003 0303 	and.w	r3, r3, #3
 8004862:	3301      	adds	r3, #1
 8004864:	005b      	lsls	r3, r3, #1
 8004866:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8004868:	693a      	ldr	r2, [r7, #16]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004870:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8004872:	683b      	ldr	r3, [r7, #0]
}
 8004874:	4618      	mov	r0, r3
 8004876:	371c      	adds	r7, #28
 8004878:	46bd      	mov	sp, r7
 800487a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487e:	4770      	bx	lr
 8004880:	40021000 	.word	0x40021000
 8004884:	00f42400 	.word	0x00f42400
 8004888:	0800d248 	.word	0x0800d248

0800488c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b086      	sub	sp, #24
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004894:	2300      	movs	r3, #0
 8004896:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004898:	2300      	movs	r3, #0
 800489a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d040      	beq.n	800492a <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80048ac:	2b80      	cmp	r3, #128	; 0x80
 80048ae:	d02a      	beq.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80048b0:	2b80      	cmp	r3, #128	; 0x80
 80048b2:	d825      	bhi.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80048b4:	2b60      	cmp	r3, #96	; 0x60
 80048b6:	d026      	beq.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80048b8:	2b60      	cmp	r3, #96	; 0x60
 80048ba:	d821      	bhi.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80048bc:	2b40      	cmp	r3, #64	; 0x40
 80048be:	d006      	beq.n	80048ce <HAL_RCCEx_PeriphCLKConfig+0x42>
 80048c0:	2b40      	cmp	r3, #64	; 0x40
 80048c2:	d81d      	bhi.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d009      	beq.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0x50>
 80048c8:	2b20      	cmp	r3, #32
 80048ca:	d010      	beq.n	80048ee <HAL_RCCEx_PeriphCLKConfig+0x62>
 80048cc:	e018      	b.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80048ce:	4b89      	ldr	r3, [pc, #548]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80048d0:	68db      	ldr	r3, [r3, #12]
 80048d2:	4a88      	ldr	r2, [pc, #544]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80048d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048d8:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80048da:	e015      	b.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	3304      	adds	r3, #4
 80048e0:	2100      	movs	r1, #0
 80048e2:	4618      	mov	r0, r3
 80048e4:	f001 fa82 	bl	8005dec <RCCEx_PLLSAI1_Config>
 80048e8:	4603      	mov	r3, r0
 80048ea:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80048ec:	e00c      	b.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	3320      	adds	r3, #32
 80048f2:	2100      	movs	r1, #0
 80048f4:	4618      	mov	r0, r3
 80048f6:	f001 fb6d 	bl	8005fd4 <RCCEx_PLLSAI2_Config>
 80048fa:	4603      	mov	r3, r0
 80048fc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80048fe:	e003      	b.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004900:	2301      	movs	r3, #1
 8004902:	74fb      	strb	r3, [r7, #19]
      break;
 8004904:	e000      	b.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8004906:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004908:	7cfb      	ldrb	r3, [r7, #19]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d10b      	bne.n	8004926 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800490e:	4b79      	ldr	r3, [pc, #484]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004910:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004914:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800491c:	4975      	ldr	r1, [pc, #468]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800491e:	4313      	orrs	r3, r2
 8004920:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004924:	e001      	b.n	800492a <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004926:	7cfb      	ldrb	r3, [r7, #19]
 8004928:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004932:	2b00      	cmp	r3, #0
 8004934:	d047      	beq.n	80049c6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800493a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800493e:	d030      	beq.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004940:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004944:	d82a      	bhi.n	800499c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004946:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800494a:	d02a      	beq.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0x116>
 800494c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004950:	d824      	bhi.n	800499c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004952:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004956:	d008      	beq.n	800496a <HAL_RCCEx_PeriphCLKConfig+0xde>
 8004958:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800495c:	d81e      	bhi.n	800499c <HAL_RCCEx_PeriphCLKConfig+0x110>
 800495e:	2b00      	cmp	r3, #0
 8004960:	d00a      	beq.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8004962:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004966:	d010      	beq.n	800498a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004968:	e018      	b.n	800499c <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800496a:	4b62      	ldr	r3, [pc, #392]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800496c:	68db      	ldr	r3, [r3, #12]
 800496e:	4a61      	ldr	r2, [pc, #388]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004970:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004974:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004976:	e015      	b.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	3304      	adds	r3, #4
 800497c:	2100      	movs	r1, #0
 800497e:	4618      	mov	r0, r3
 8004980:	f001 fa34 	bl	8005dec <RCCEx_PLLSAI1_Config>
 8004984:	4603      	mov	r3, r0
 8004986:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004988:	e00c      	b.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	3320      	adds	r3, #32
 800498e:	2100      	movs	r1, #0
 8004990:	4618      	mov	r0, r3
 8004992:	f001 fb1f 	bl	8005fd4 <RCCEx_PLLSAI2_Config>
 8004996:	4603      	mov	r3, r0
 8004998:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800499a:	e003      	b.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800499c:	2301      	movs	r3, #1
 800499e:	74fb      	strb	r3, [r7, #19]
      break;
 80049a0:	e000      	b.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 80049a2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80049a4:	7cfb      	ldrb	r3, [r7, #19]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d10b      	bne.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80049aa:	4b52      	ldr	r3, [pc, #328]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80049ac:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80049b0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049b8:	494e      	ldr	r1, [pc, #312]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80049ba:	4313      	orrs	r3, r2
 80049bc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80049c0:	e001      	b.n	80049c6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049c2:	7cfb      	ldrb	r3, [r7, #19]
 80049c4:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	f000 809f 	beq.w	8004b12 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 80049d4:	2300      	movs	r3, #0
 80049d6:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80049d8:	4b46      	ldr	r3, [pc, #280]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80049da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d101      	bne.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 80049e4:	2301      	movs	r3, #1
 80049e6:	e000      	b.n	80049ea <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80049e8:	2300      	movs	r3, #0
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d00d      	beq.n	8004a0a <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80049ee:	4b41      	ldr	r3, [pc, #260]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80049f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049f2:	4a40      	ldr	r2, [pc, #256]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80049f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049f8:	6593      	str	r3, [r2, #88]	; 0x58
 80049fa:	4b3e      	ldr	r3, [pc, #248]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80049fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a02:	60bb      	str	r3, [r7, #8]
 8004a04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a06:	2301      	movs	r3, #1
 8004a08:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004a0a:	4b3b      	ldr	r3, [pc, #236]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4a3a      	ldr	r2, [pc, #232]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004a10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a14:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004a16:	f7fc fc67 	bl	80012e8 <HAL_GetTick>
 8004a1a:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004a1c:	e009      	b.n	8004a32 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a1e:	f7fc fc63 	bl	80012e8 <HAL_GetTick>
 8004a22:	4602      	mov	r2, r0
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	1ad3      	subs	r3, r2, r3
 8004a28:	2b02      	cmp	r3, #2
 8004a2a:	d902      	bls.n	8004a32 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8004a2c:	2303      	movs	r3, #3
 8004a2e:	74fb      	strb	r3, [r7, #19]
        break;
 8004a30:	e005      	b.n	8004a3e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004a32:	4b31      	ldr	r3, [pc, #196]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d0ef      	beq.n	8004a1e <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8004a3e:	7cfb      	ldrb	r3, [r7, #19]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d15b      	bne.n	8004afc <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004a44:	4b2b      	ldr	r3, [pc, #172]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004a46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a4e:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004a50:	697b      	ldr	r3, [r7, #20]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d01f      	beq.n	8004a96 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004a5c:	697a      	ldr	r2, [r7, #20]
 8004a5e:	429a      	cmp	r2, r3
 8004a60:	d019      	beq.n	8004a96 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004a62:	4b24      	ldr	r3, [pc, #144]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004a64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a6c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004a6e:	4b21      	ldr	r3, [pc, #132]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004a70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a74:	4a1f      	ldr	r2, [pc, #124]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004a76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a7a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004a7e:	4b1d      	ldr	r3, [pc, #116]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004a80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a84:	4a1b      	ldr	r2, [pc, #108]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004a86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a8a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004a8e:	4a19      	ldr	r2, [pc, #100]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004a90:	697b      	ldr	r3, [r7, #20]
 8004a92:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004a96:	697b      	ldr	r3, [r7, #20]
 8004a98:	f003 0301 	and.w	r3, r3, #1
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d016      	beq.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004aa0:	f7fc fc22 	bl	80012e8 <HAL_GetTick>
 8004aa4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004aa6:	e00b      	b.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004aa8:	f7fc fc1e 	bl	80012e8 <HAL_GetTick>
 8004aac:	4602      	mov	r2, r0
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	1ad3      	subs	r3, r2, r3
 8004ab2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d902      	bls.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8004aba:	2303      	movs	r3, #3
 8004abc:	74fb      	strb	r3, [r7, #19]
            break;
 8004abe:	e006      	b.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ac0:	4b0c      	ldr	r3, [pc, #48]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004ac2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ac6:	f003 0302 	and.w	r3, r3, #2
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d0ec      	beq.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8004ace:	7cfb      	ldrb	r3, [r7, #19]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d10c      	bne.n	8004aee <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004ad4:	4b07      	ldr	r3, [pc, #28]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004ad6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ada:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004ae4:	4903      	ldr	r1, [pc, #12]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004aec:	e008      	b.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004aee:	7cfb      	ldrb	r3, [r7, #19]
 8004af0:	74bb      	strb	r3, [r7, #18]
 8004af2:	e005      	b.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8004af4:	40021000 	.word	0x40021000
 8004af8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004afc:	7cfb      	ldrb	r3, [r7, #19]
 8004afe:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004b00:	7c7b      	ldrb	r3, [r7, #17]
 8004b02:	2b01      	cmp	r3, #1
 8004b04:	d105      	bne.n	8004b12 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b06:	4ba0      	ldr	r3, [pc, #640]	; (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004b08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b0a:	4a9f      	ldr	r2, [pc, #636]	; (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004b0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b10:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f003 0301 	and.w	r3, r3, #1
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d00a      	beq.n	8004b34 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004b1e:	4b9a      	ldr	r3, [pc, #616]	; (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004b20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b24:	f023 0203 	bic.w	r2, r3, #3
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b2c:	4996      	ldr	r1, [pc, #600]	; (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004b2e:	4313      	orrs	r3, r2
 8004b30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f003 0302 	and.w	r3, r3, #2
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d00a      	beq.n	8004b56 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004b40:	4b91      	ldr	r3, [pc, #580]	; (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004b42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b46:	f023 020c 	bic.w	r2, r3, #12
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b4e:	498e      	ldr	r1, [pc, #568]	; (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004b50:	4313      	orrs	r3, r2
 8004b52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f003 0304 	and.w	r3, r3, #4
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d00a      	beq.n	8004b78 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004b62:	4b89      	ldr	r3, [pc, #548]	; (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004b64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b68:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b70:	4985      	ldr	r1, [pc, #532]	; (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004b72:	4313      	orrs	r3, r2
 8004b74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f003 0308 	and.w	r3, r3, #8
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d00a      	beq.n	8004b9a <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004b84:	4b80      	ldr	r3, [pc, #512]	; (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004b86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b8a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b92:	497d      	ldr	r1, [pc, #500]	; (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004b94:	4313      	orrs	r3, r2
 8004b96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f003 0310 	and.w	r3, r3, #16
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d00a      	beq.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004ba6:	4b78      	ldr	r3, [pc, #480]	; (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ba8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bb4:	4974      	ldr	r1, [pc, #464]	; (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f003 0320 	and.w	r3, r3, #32
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d00a      	beq.n	8004bde <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004bc8:	4b6f      	ldr	r3, [pc, #444]	; (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004bca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bce:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bd6:	496c      	ldr	r1, [pc, #432]	; (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004bd8:	4313      	orrs	r3, r2
 8004bda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d00a      	beq.n	8004c00 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004bea:	4b67      	ldr	r3, [pc, #412]	; (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004bec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bf0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004bf8:	4963      	ldr	r1, [pc, #396]	; (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004bfa:	4313      	orrs	r3, r2
 8004bfc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d00a      	beq.n	8004c22 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004c0c:	4b5e      	ldr	r3, [pc, #376]	; (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c12:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004c1a:	495b      	ldr	r1, [pc, #364]	; (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c1c:	4313      	orrs	r3, r2
 8004c1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d00a      	beq.n	8004c44 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004c2e:	4b56      	ldr	r3, [pc, #344]	; (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c34:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c3c:	4952      	ldr	r1, [pc, #328]	; (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d00a      	beq.n	8004c66 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004c50:	4b4d      	ldr	r3, [pc, #308]	; (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c56:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c5e:	494a      	ldr	r1, [pc, #296]	; (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c60:	4313      	orrs	r3, r2
 8004c62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d00a      	beq.n	8004c88 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004c72:	4b45      	ldr	r3, [pc, #276]	; (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c78:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c80:	4941      	ldr	r1, [pc, #260]	; (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c82:	4313      	orrs	r3, r2
 8004c84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d00a      	beq.n	8004caa <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004c94:	4b3c      	ldr	r3, [pc, #240]	; (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c96:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004c9a:	f023 0203 	bic.w	r2, r3, #3
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ca2:	4939      	ldr	r1, [pc, #228]	; (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ca4:	4313      	orrs	r3, r2
 8004ca6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d028      	beq.n	8004d08 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004cb6:	4b34      	ldr	r3, [pc, #208]	; (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004cb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cbc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cc4:	4930      	ldr	r1, [pc, #192]	; (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004cc6:	4313      	orrs	r3, r2
 8004cc8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cd0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004cd4:	d106      	bne.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004cd6:	4b2c      	ldr	r3, [pc, #176]	; (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004cd8:	68db      	ldr	r3, [r3, #12]
 8004cda:	4a2b      	ldr	r2, [pc, #172]	; (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004cdc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004ce0:	60d3      	str	r3, [r2, #12]
 8004ce2:	e011      	b.n	8004d08 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ce8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004cec:	d10c      	bne.n	8004d08 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	3304      	adds	r3, #4
 8004cf2:	2101      	movs	r1, #1
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	f001 f879 	bl	8005dec <RCCEx_PLLSAI1_Config>
 8004cfa:	4603      	mov	r3, r0
 8004cfc:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004cfe:	7cfb      	ldrb	r3, [r7, #19]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d001      	beq.n	8004d08 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8004d04:	7cfb      	ldrb	r3, [r7, #19]
 8004d06:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d04d      	beq.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004d18:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004d1c:	d108      	bne.n	8004d30 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8004d1e:	4b1a      	ldr	r3, [pc, #104]	; (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d20:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004d24:	4a18      	ldr	r2, [pc, #96]	; (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d26:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004d2a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8004d2e:	e012      	b.n	8004d56 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8004d30:	4b15      	ldr	r3, [pc, #84]	; (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d32:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004d36:	4a14      	ldr	r2, [pc, #80]	; (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d38:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004d3c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8004d40:	4b11      	ldr	r3, [pc, #68]	; (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d46:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004d4e:	490e      	ldr	r1, [pc, #56]	; (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d50:	4313      	orrs	r3, r2
 8004d52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004d5a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004d5e:	d106      	bne.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004d60:	4b09      	ldr	r3, [pc, #36]	; (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d62:	68db      	ldr	r3, [r3, #12]
 8004d64:	4a08      	ldr	r2, [pc, #32]	; (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d66:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004d6a:	60d3      	str	r3, [r2, #12]
 8004d6c:	e020      	b.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004d72:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004d76:	d109      	bne.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004d78:	4b03      	ldr	r3, [pc, #12]	; (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d7a:	68db      	ldr	r3, [r3, #12]
 8004d7c:	4a02      	ldr	r2, [pc, #8]	; (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d82:	60d3      	str	r3, [r2, #12]
 8004d84:	e014      	b.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8004d86:	bf00      	nop
 8004d88:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004d90:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004d94:	d10c      	bne.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	3304      	adds	r3, #4
 8004d9a:	2101      	movs	r1, #1
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	f001 f825 	bl	8005dec <RCCEx_PLLSAI1_Config>
 8004da2:	4603      	mov	r3, r0
 8004da4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004da6:	7cfb      	ldrb	r3, [r7, #19]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d001      	beq.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8004dac:	7cfb      	ldrb	r3, [r7, #19]
 8004dae:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d028      	beq.n	8004e0e <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004dbc:	4b7a      	ldr	r3, [pc, #488]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004dbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dc2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004dca:	4977      	ldr	r1, [pc, #476]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004dd6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004dda:	d106      	bne.n	8004dea <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ddc:	4b72      	ldr	r3, [pc, #456]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004dde:	68db      	ldr	r3, [r3, #12]
 8004de0:	4a71      	ldr	r2, [pc, #452]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004de2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004de6:	60d3      	str	r3, [r2, #12]
 8004de8:	e011      	b.n	8004e0e <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004dee:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004df2:	d10c      	bne.n	8004e0e <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	3304      	adds	r3, #4
 8004df8:	2101      	movs	r1, #1
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	f000 fff6 	bl	8005dec <RCCEx_PLLSAI1_Config>
 8004e00:	4603      	mov	r3, r0
 8004e02:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004e04:	7cfb      	ldrb	r3, [r7, #19]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d001      	beq.n	8004e0e <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8004e0a:	7cfb      	ldrb	r3, [r7, #19]
 8004e0c:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d01e      	beq.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004e1a:	4b63      	ldr	r3, [pc, #396]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004e1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e20:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e2a:	495f      	ldr	r1, [pc, #380]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004e2c:	4313      	orrs	r3, r2
 8004e2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e38:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004e3c:	d10c      	bne.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	3304      	adds	r3, #4
 8004e42:	2102      	movs	r1, #2
 8004e44:	4618      	mov	r0, r3
 8004e46:	f000 ffd1 	bl	8005dec <RCCEx_PLLSAI1_Config>
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004e4e:	7cfb      	ldrb	r3, [r7, #19]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d001      	beq.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8004e54:	7cfb      	ldrb	r3, [r7, #19]
 8004e56:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d00b      	beq.n	8004e7c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004e64:	4b50      	ldr	r3, [pc, #320]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004e66:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004e6a:	f023 0204 	bic.w	r2, r3, #4
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e74:	494c      	ldr	r1, [pc, #304]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004e76:	4313      	orrs	r3, r2
 8004e78:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d00b      	beq.n	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004e88:	4b47      	ldr	r3, [pc, #284]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004e8a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004e8e:	f023 0218 	bic.w	r2, r3, #24
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e98:	4943      	ldr	r1, [pc, #268]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DFSDM1_Filter0 */

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d035      	beq.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0x68c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004eac:	4b3e      	ldr	r3, [pc, #248]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4a3d      	ldr	r2, [pc, #244]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004eb2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004eb6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004eb8:	f7fc fa16 	bl	80012e8 <HAL_GetTick>
 8004ebc:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004ebe:	e009      	b.n	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004ec0:	f7fc fa12 	bl	80012e8 <HAL_GetTick>
 8004ec4:	4602      	mov	r2, r0
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	1ad3      	subs	r3, r2, r3
 8004eca:	2b02      	cmp	r3, #2
 8004ecc:	d902      	bls.n	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        ret = HAL_TIMEOUT;
 8004ece:	2303      	movs	r3, #3
 8004ed0:	74fb      	strb	r3, [r7, #19]
        break;
 8004ed2:	e005      	b.n	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x654>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004ed4:	4b34      	ldr	r3, [pc, #208]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d1ef      	bne.n	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x634>
      }
    }

    if(ret == HAL_OK)
 8004ee0:	7cfb      	ldrb	r3, [r7, #19]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d113      	bne.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0x682>
    {
      /* Configure the LTDC clock source */
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 8004ee6:	4b30      	ldr	r3, [pc, #192]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004ee8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004eec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ef6:	492c      	ldr	r1, [pc, #176]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	3320      	adds	r3, #32
 8004f02:	2102      	movs	r1, #2
 8004f04:	4618      	mov	r0, r3
 8004f06:	f001 f865 	bl	8005fd4 <RCCEx_PLLSAI2_Config>
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	74fb      	strb	r3, [r7, #19]
    }

    if(ret != HAL_OK)
 8004f0e:	7cfb      	ldrb	r3, [r7, #19]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d001      	beq.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* set overall return value */
      status = ret;
 8004f14:	7cfb      	ldrb	r3, [r7, #19]
 8004f16:	74bb      	strb	r3, [r7, #18]
#endif /* LTDC */

#if defined(DSI)

  /*-------------------------- DSI clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d01e      	beq.n	8004f62 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DSICLKSOURCE(PeriphClkInit->DsiClockSelection));

    /* Configure the DSI clock source */
    __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8004f24:	4b20      	ldr	r3, [pc, #128]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004f26:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004f2a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f34:	491c      	ldr	r1, [pc, #112]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004f36:	4313      	orrs	r3, r2
 8004f38:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLLSAI2)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f46:	d10c      	bne.n	8004f62 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
    {
      /* PLLSAI2 input clock, parameters M, N & Q configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_Q_UPDATE);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	3320      	adds	r3, #32
 8004f4c:	2101      	movs	r1, #1
 8004f4e:	4618      	mov	r0, r3
 8004f50:	f001 f840 	bl	8005fd4 <RCCEx_PLLSAI2_Config>
 8004f54:	4603      	mov	r3, r0
 8004f56:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004f58:	7cfb      	ldrb	r3, [r7, #19]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d001      	beq.n	8004f62 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
      {
        /* set overall return value */
        status = ret;
 8004f5e:	7cfb      	ldrb	r3, [r7, #19]
 8004f60:	74bb      	strb	r3, [r7, #18]
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d017      	beq.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0x712>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004f6e:	4b0e      	ldr	r3, [pc, #56]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004f70:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004f74:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f7e:	490a      	ldr	r1, [pc, #40]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004f80:	4313      	orrs	r3, r2
 8004f82:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f8c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004f90:	d105      	bne.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0x712>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f92:	4b05      	ldr	r3, [pc, #20]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004f94:	68db      	ldr	r3, [r3, #12]
 8004f96:	4a04      	ldr	r2, [pc, #16]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004f98:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f9c:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004f9e:	7cbb      	ldrb	r3, [r7, #18]
}
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	3718      	adds	r7, #24
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	bd80      	pop	{r7, pc}
 8004fa8:	40021000 	.word	0x40021000

08004fac <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b088      	sub	sp, #32
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004fbe:	d13e      	bne.n	800503e <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8004fc0:	4bb6      	ldr	r3, [pc, #728]	; (800529c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004fc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fca:	60fb      	str	r3, [r7, #12]

    switch(srcclk)
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004fd2:	d028      	beq.n	8005026 <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004fda:	f200 86f2 	bhi.w	8005dc2 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004fe4:	d005      	beq.n	8004ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004fec:	d00e      	beq.n	800500c <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 8004fee:	f000 bee8 	b.w	8005dc2 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004ff2:	4baa      	ldr	r3, [pc, #680]	; (800529c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004ff4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ff8:	f003 0302 	and.w	r3, r3, #2
 8004ffc:	2b02      	cmp	r3, #2
 8004ffe:	f040 86e2 	bne.w	8005dc6 <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
        frequency = LSE_VALUE;
 8005002:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005006:	61fb      	str	r3, [r7, #28]
      break;
 8005008:	f000 bedd 	b.w	8005dc6 <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800500c:	4ba3      	ldr	r3, [pc, #652]	; (800529c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800500e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005012:	f003 0302 	and.w	r3, r3, #2
 8005016:	2b02      	cmp	r3, #2
 8005018:	f040 86d7 	bne.w	8005dca <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
          frequency = LSI_VALUE;
 800501c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8005020:	61fb      	str	r3, [r7, #28]
      break;
 8005022:	f000 bed2 	b.w	8005dca <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005026:	4b9d      	ldr	r3, [pc, #628]	; (800529c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800502e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005032:	f040 86cc 	bne.w	8005dce <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
        frequency = HSE_VALUE / 32U;
 8005036:	4b9a      	ldr	r3, [pc, #616]	; (80052a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8005038:	61fb      	str	r3, [r7, #28]
      break;
 800503a:	f000 bec8 	b.w	8005dce <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800503e:	4b97      	ldr	r3, [pc, #604]	; (800529c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005040:	68db      	ldr	r3, [r3, #12]
 8005042:	f003 0303 	and.w	r3, r3, #3
 8005046:	613b      	str	r3, [r7, #16]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 8005048:	693b      	ldr	r3, [r7, #16]
 800504a:	2b03      	cmp	r3, #3
 800504c:	d036      	beq.n	80050bc <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800504e:	693b      	ldr	r3, [r7, #16]
 8005050:	2b03      	cmp	r3, #3
 8005052:	d840      	bhi.n	80050d6 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 8005054:	693b      	ldr	r3, [r7, #16]
 8005056:	2b01      	cmp	r3, #1
 8005058:	d003      	beq.n	8005062 <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 800505a:	693b      	ldr	r3, [r7, #16]
 800505c:	2b02      	cmp	r3, #2
 800505e:	d020      	beq.n	80050a2 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8005060:	e039      	b.n	80050d6 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8005062:	4b8e      	ldr	r3, [pc, #568]	; (800529c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f003 0302 	and.w	r3, r3, #2
 800506a:	2b02      	cmp	r3, #2
 800506c:	d116      	bne.n	800509c <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800506e:	4b8b      	ldr	r3, [pc, #556]	; (800529c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f003 0308 	and.w	r3, r3, #8
 8005076:	2b00      	cmp	r3, #0
 8005078:	d005      	beq.n	8005086 <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 800507a:	4b88      	ldr	r3, [pc, #544]	; (800529c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	091b      	lsrs	r3, r3, #4
 8005080:	f003 030f 	and.w	r3, r3, #15
 8005084:	e005      	b.n	8005092 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 8005086:	4b85      	ldr	r3, [pc, #532]	; (800529c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005088:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800508c:	0a1b      	lsrs	r3, r3, #8
 800508e:	f003 030f 	and.w	r3, r3, #15
 8005092:	4a84      	ldr	r2, [pc, #528]	; (80052a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005094:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005098:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 800509a:	e01f      	b.n	80050dc <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 800509c:	2300      	movs	r3, #0
 800509e:	61bb      	str	r3, [r7, #24]
      break;
 80050a0:	e01c      	b.n	80050dc <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80050a2:	4b7e      	ldr	r3, [pc, #504]	; (800529c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050ae:	d102      	bne.n	80050b6 <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 80050b0:	4b7d      	ldr	r3, [pc, #500]	; (80052a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 80050b2:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80050b4:	e012      	b.n	80050dc <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 80050b6:	2300      	movs	r3, #0
 80050b8:	61bb      	str	r3, [r7, #24]
      break;
 80050ba:	e00f      	b.n	80050dc <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80050bc:	4b77      	ldr	r3, [pc, #476]	; (800529c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050c4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80050c8:	d102      	bne.n	80050d0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 80050ca:	4b77      	ldr	r3, [pc, #476]	; (80052a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 80050cc:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80050ce:	e005      	b.n	80050dc <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 80050d0:	2300      	movs	r3, #0
 80050d2:	61bb      	str	r3, [r7, #24]
      break;
 80050d4:	e002      	b.n	80050dc <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 80050d6:	2300      	movs	r3, #0
 80050d8:	61bb      	str	r3, [r7, #24]
      break;
 80050da:	bf00      	nop
    }

    switch(PeriphClk)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80050e2:	f000 8604 	beq.w	8005cee <HAL_RCCEx_GetPeriphCLKFreq+0xd42>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80050ec:	f200 8671 	bhi.w	8005dd2 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80050f6:	f000 8467 	beq.w	80059c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005100:	f200 8667 	bhi.w	8005dd2 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800510a:	f000 852f 	beq.w	8005b6c <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005114:	f200 865d 	bhi.w	8005dd2 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800511e:	f000 8185 	beq.w	800542c <HAL_RCCEx_GetPeriphCLKFreq+0x480>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005128:	f200 8653 	bhi.w	8005dd2 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005132:	f000 80cb 	beq.w	80052cc <HAL_RCCEx_GetPeriphCLKFreq+0x320>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800513c:	f200 8649 	bhi.w	8005dd2 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005146:	f000 842e 	beq.w	80059a6 <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005150:	f200 863f 	bhi.w	8005dd2 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800515a:	f000 83e2 	beq.w	8005922 <HAL_RCCEx_GetPeriphCLKFreq+0x976>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005164:	f200 8635 	bhi.w	8005dd2 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800516e:	f000 80ad 	beq.w	80052cc <HAL_RCCEx_GetPeriphCLKFreq+0x320>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005178:	f200 862b 	bhi.w	8005dd2 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005182:	f000 809b 	beq.w	80052bc <HAL_RCCEx_GetPeriphCLKFreq+0x310>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800518c:	f200 8621 	bhi.w	8005dd2 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005196:	f000 8089 	beq.w	80052ac <HAL_RCCEx_GetPeriphCLKFreq+0x300>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80051a0:	f200 8617 	bhi.w	8005dd2 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051aa:	f000 8552 	beq.w	8005c52 <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051b4:	f200 860d 	bhi.w	8005dd2 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80051be:	f000 84fe 	beq.w	8005bbe <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80051c8:	f200 8603 	bhi.w	8005dd2 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051d2:	f000 849f 	beq.w	8005b14 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051dc:	f200 85f9 	bhi.w	8005dd2 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2b80      	cmp	r3, #128	; 0x80
 80051e4:	f000 846a 	beq.w	8005abc <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2b80      	cmp	r3, #128	; 0x80
 80051ec:	f200 85f1 	bhi.w	8005dd2 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2b20      	cmp	r3, #32
 80051f4:	d84c      	bhi.n	8005290 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	f000 85ea 	beq.w	8005dd2 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	3b01      	subs	r3, #1
 8005202:	2b1f      	cmp	r3, #31
 8005204:	f200 85e5 	bhi.w	8005dd2 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8005208:	a201      	add	r2, pc, #4	; (adr r2, 8005210 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 800520a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800520e:	bf00      	nop
 8005210:	08005621 	.word	0x08005621
 8005214:	0800568f 	.word	0x0800568f
 8005218:	08005dd3 	.word	0x08005dd3
 800521c:	08005723 	.word	0x08005723
 8005220:	08005dd3 	.word	0x08005dd3
 8005224:	08005dd3 	.word	0x08005dd3
 8005228:	08005dd3 	.word	0x08005dd3
 800522c:	0800579b 	.word	0x0800579b
 8005230:	08005dd3 	.word	0x08005dd3
 8005234:	08005dd3 	.word	0x08005dd3
 8005238:	08005dd3 	.word	0x08005dd3
 800523c:	08005dd3 	.word	0x08005dd3
 8005240:	08005dd3 	.word	0x08005dd3
 8005244:	08005dd3 	.word	0x08005dd3
 8005248:	08005dd3 	.word	0x08005dd3
 800524c:	0800581f 	.word	0x0800581f
 8005250:	08005dd3 	.word	0x08005dd3
 8005254:	08005dd3 	.word	0x08005dd3
 8005258:	08005dd3 	.word	0x08005dd3
 800525c:	08005dd3 	.word	0x08005dd3
 8005260:	08005dd3 	.word	0x08005dd3
 8005264:	08005dd3 	.word	0x08005dd3
 8005268:	08005dd3 	.word	0x08005dd3
 800526c:	08005dd3 	.word	0x08005dd3
 8005270:	08005dd3 	.word	0x08005dd3
 8005274:	08005dd3 	.word	0x08005dd3
 8005278:	08005dd3 	.word	0x08005dd3
 800527c:	08005dd3 	.word	0x08005dd3
 8005280:	08005dd3 	.word	0x08005dd3
 8005284:	08005dd3 	.word	0x08005dd3
 8005288:	08005dd3 	.word	0x08005dd3
 800528c:	080058a1 	.word	0x080058a1
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2b40      	cmp	r3, #64	; 0x40
 8005294:	f000 83e6 	beq.w	8005a64 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 8005298:	f000 bd9b 	b.w	8005dd2 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 800529c:	40021000 	.word	0x40021000
 80052a0:	0007a120 	.word	0x0007a120
 80052a4:	0800d248 	.word	0x0800d248
 80052a8:	00f42400 	.word	0x00f42400
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 80052ac:	69b9      	ldr	r1, [r7, #24]
 80052ae:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80052b2:	f000 ff83 	bl	80061bc <RCCEx_GetSAIxPeriphCLKFreq>
 80052b6:	61f8      	str	r0, [r7, #28]
      break;
 80052b8:	f000 bd8e 	b.w	8005dd8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 80052bc:	69b9      	ldr	r1, [r7, #24]
 80052be:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80052c2:	f000 ff7b 	bl	80061bc <RCCEx_GetSAIxPeriphCLKFreq>
 80052c6:	61f8      	str	r0, [r7, #28]
      break;
 80052c8:	f000 bd86 	b.w	8005dd8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 80052cc:	4b9a      	ldr	r3, [pc, #616]	; (8005538 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80052ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052d2:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 80052d6:	60fb      	str	r3, [r7, #12]
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80052de:	d015      	beq.n	800530c <HAL_RCCEx_GetPeriphCLKFreq+0x360>
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80052e6:	f200 8092 	bhi.w	800540e <HAL_RCCEx_GetPeriphCLKFreq+0x462>
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80052f0:	d029      	beq.n	8005346 <HAL_RCCEx_GetPeriphCLKFreq+0x39a>
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80052f8:	f200 8089 	bhi.w	800540e <HAL_RCCEx_GetPeriphCLKFreq+0x462>
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d07b      	beq.n	80053fa <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005308:	d04a      	beq.n	80053a0 <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
          break;
 800530a:	e080      	b.n	800540e <HAL_RCCEx_GetPeriphCLKFreq+0x462>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800530c:	4b8a      	ldr	r3, [pc, #552]	; (8005538 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f003 0302 	and.w	r3, r3, #2
 8005314:	2b02      	cmp	r3, #2
 8005316:	d17d      	bne.n	8005414 <HAL_RCCEx_GetPeriphCLKFreq+0x468>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8005318:	4b87      	ldr	r3, [pc, #540]	; (8005538 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f003 0308 	and.w	r3, r3, #8
 8005320:	2b00      	cmp	r3, #0
 8005322:	d005      	beq.n	8005330 <HAL_RCCEx_GetPeriphCLKFreq+0x384>
 8005324:	4b84      	ldr	r3, [pc, #528]	; (8005538 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	091b      	lsrs	r3, r3, #4
 800532a:	f003 030f 	and.w	r3, r3, #15
 800532e:	e005      	b.n	800533c <HAL_RCCEx_GetPeriphCLKFreq+0x390>
 8005330:	4b81      	ldr	r3, [pc, #516]	; (8005538 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005332:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005336:	0a1b      	lsrs	r3, r3, #8
 8005338:	f003 030f 	and.w	r3, r3, #15
 800533c:	4a7f      	ldr	r2, [pc, #508]	; (800553c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800533e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005342:	61fb      	str	r3, [r7, #28]
          break;
 8005344:	e066      	b.n	8005414 <HAL_RCCEx_GetPeriphCLKFreq+0x468>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8005346:	4b7c      	ldr	r3, [pc, #496]	; (8005538 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800534e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005352:	d162      	bne.n	800541a <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8005354:	4b78      	ldr	r3, [pc, #480]	; (8005538 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005356:	68db      	ldr	r3, [r3, #12]
 8005358:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800535c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005360:	d15b      	bne.n	800541a <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8005362:	4b75      	ldr	r3, [pc, #468]	; (8005538 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005364:	68db      	ldr	r3, [r3, #12]
 8005366:	0a1b      	lsrs	r3, r3, #8
 8005368:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800536c:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800536e:	69bb      	ldr	r3, [r7, #24]
 8005370:	68ba      	ldr	r2, [r7, #8]
 8005372:	fb03 f202 	mul.w	r2, r3, r2
 8005376:	4b70      	ldr	r3, [pc, #448]	; (8005538 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005378:	68db      	ldr	r3, [r3, #12]
 800537a:	091b      	lsrs	r3, r3, #4
 800537c:	f003 030f 	and.w	r3, r3, #15
 8005380:	3301      	adds	r3, #1
 8005382:	fbb2 f3f3 	udiv	r3, r2, r3
 8005386:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8005388:	4b6b      	ldr	r3, [pc, #428]	; (8005538 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800538a:	68db      	ldr	r3, [r3, #12]
 800538c:	0d5b      	lsrs	r3, r3, #21
 800538e:	f003 0303 	and.w	r3, r3, #3
 8005392:	3301      	adds	r3, #1
 8005394:	005b      	lsls	r3, r3, #1
 8005396:	69ba      	ldr	r2, [r7, #24]
 8005398:	fbb2 f3f3 	udiv	r3, r2, r3
 800539c:	61fb      	str	r3, [r7, #28]
          break;
 800539e:	e03c      	b.n	800541a <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 80053a0:	4b65      	ldr	r3, [pc, #404]	; (8005538 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80053a8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80053ac:	d138      	bne.n	8005420 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 80053ae:	4b62      	ldr	r3, [pc, #392]	; (8005538 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80053b0:	691b      	ldr	r3, [r3, #16]
 80053b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80053b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80053ba:	d131      	bne.n	8005420 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80053bc:	4b5e      	ldr	r3, [pc, #376]	; (8005538 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80053be:	691b      	ldr	r3, [r3, #16]
 80053c0:	0a1b      	lsrs	r3, r3, #8
 80053c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80053c6:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 80053c8:	69bb      	ldr	r3, [r7, #24]
 80053ca:	68ba      	ldr	r2, [r7, #8]
 80053cc:	fb03 f202 	mul.w	r2, r3, r2
 80053d0:	4b59      	ldr	r3, [pc, #356]	; (8005538 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80053d2:	691b      	ldr	r3, [r3, #16]
 80053d4:	091b      	lsrs	r3, r3, #4
 80053d6:	f003 030f 	and.w	r3, r3, #15
 80053da:	3301      	adds	r3, #1
 80053dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80053e0:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 80053e2:	4b55      	ldr	r3, [pc, #340]	; (8005538 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80053e4:	691b      	ldr	r3, [r3, #16]
 80053e6:	0d5b      	lsrs	r3, r3, #21
 80053e8:	f003 0303 	and.w	r3, r3, #3
 80053ec:	3301      	adds	r3, #1
 80053ee:	005b      	lsls	r3, r3, #1
 80053f0:	69ba      	ldr	r2, [r7, #24]
 80053f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80053f6:	61fb      	str	r3, [r7, #28]
          break;
 80053f8:	e012      	b.n	8005420 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 80053fa:	4b4f      	ldr	r3, [pc, #316]	; (8005538 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80053fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005400:	f003 0302 	and.w	r3, r3, #2
 8005404:	2b02      	cmp	r3, #2
 8005406:	d10e      	bne.n	8005426 <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
            frequency = HSI48_VALUE;
 8005408:	4b4d      	ldr	r3, [pc, #308]	; (8005540 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800540a:	61fb      	str	r3, [r7, #28]
          break;
 800540c:	e00b      	b.n	8005426 <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
          break;
 800540e:	bf00      	nop
 8005410:	f000 bce2 	b.w	8005dd8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005414:	bf00      	nop
 8005416:	f000 bcdf 	b.w	8005dd8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800541a:	bf00      	nop
 800541c:	f000 bcdc 	b.w	8005dd8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005420:	bf00      	nop
 8005422:	f000 bcd9 	b.w	8005dd8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005426:	bf00      	nop
        break;
 8005428:	f000 bcd6 	b.w	8005dd8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      if(HAL_IS_BIT_SET(RCC->CCIPR2, RCC_CCIPR2_SDMMCSEL))  /* PLL "P" ? */
 800542c:	4b42      	ldr	r3, [pc, #264]	; (8005538 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800542e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005432:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005436:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800543a:	d13d      	bne.n	80054b8 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 800543c:	4b3e      	ldr	r3, [pc, #248]	; (8005538 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005444:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005448:	f040 84c5 	bne.w	8005dd6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLPEN))
 800544c:	4b3a      	ldr	r3, [pc, #232]	; (8005538 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800544e:	68db      	ldr	r3, [r3, #12]
 8005450:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005454:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005458:	f040 84bd 	bne.w	8005dd6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800545c:	4b36      	ldr	r3, [pc, #216]	; (8005538 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800545e:	68db      	ldr	r3, [r3, #12]
 8005460:	0a1b      	lsrs	r3, r3, #8
 8005462:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005466:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005468:	69bb      	ldr	r3, [r7, #24]
 800546a:	68ba      	ldr	r2, [r7, #8]
 800546c:	fb03 f202 	mul.w	r2, r3, r2
 8005470:	4b31      	ldr	r3, [pc, #196]	; (8005538 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005472:	68db      	ldr	r3, [r3, #12]
 8005474:	091b      	lsrs	r3, r3, #4
 8005476:	f003 030f 	and.w	r3, r3, #15
 800547a:	3301      	adds	r3, #1
 800547c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005480:	61bb      	str	r3, [r7, #24]
            pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 8005482:	4b2d      	ldr	r3, [pc, #180]	; (8005538 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005484:	68db      	ldr	r3, [r3, #12]
 8005486:	0edb      	lsrs	r3, r3, #27
 8005488:	f003 031f 	and.w	r3, r3, #31
 800548c:	617b      	str	r3, [r7, #20]
            if(pllp == 0U)
 800548e:	697b      	ldr	r3, [r7, #20]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d10a      	bne.n	80054aa <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
              if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8005494:	4b28      	ldr	r3, [pc, #160]	; (8005538 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005496:	68db      	ldr	r3, [r3, #12]
 8005498:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800549c:	2b00      	cmp	r3, #0
 800549e:	d002      	beq.n	80054a6 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
                pllp = 17U;
 80054a0:	2311      	movs	r3, #17
 80054a2:	617b      	str	r3, [r7, #20]
 80054a4:	e001      	b.n	80054aa <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
                pllp = 7U;
 80054a6:	2307      	movs	r3, #7
 80054a8:	617b      	str	r3, [r7, #20]
            frequency = (pllvco / pllp);
 80054aa:	69ba      	ldr	r2, [r7, #24]
 80054ac:	697b      	ldr	r3, [r7, #20]
 80054ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80054b2:	61fb      	str	r3, [r7, #28]
      break;
 80054b4:	f000 bc8f 	b.w	8005dd6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 80054b8:	4b1f      	ldr	r3, [pc, #124]	; (8005538 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80054ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054be:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 80054c2:	60fb      	str	r3, [r7, #12]
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80054ca:	d016      	beq.n	80054fa <HAL_RCCEx_GetPeriphCLKFreq+0x54e>
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80054d2:	f200 809b 	bhi.w	800560c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80054dc:	d032      	beq.n	8005544 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80054e4:	f200 8092 	bhi.w	800560c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	f000 8084 	beq.w	80055f8 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80054f6:	d052      	beq.n	800559e <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
          break;
 80054f8:	e088      	b.n	800560c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80054fa:	4b0f      	ldr	r3, [pc, #60]	; (8005538 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f003 0302 	and.w	r3, r3, #2
 8005502:	2b02      	cmp	r3, #2
 8005504:	f040 8084 	bne.w	8005610 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8005508:	4b0b      	ldr	r3, [pc, #44]	; (8005538 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f003 0308 	and.w	r3, r3, #8
 8005510:	2b00      	cmp	r3, #0
 8005512:	d005      	beq.n	8005520 <HAL_RCCEx_GetPeriphCLKFreq+0x574>
 8005514:	4b08      	ldr	r3, [pc, #32]	; (8005538 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	091b      	lsrs	r3, r3, #4
 800551a:	f003 030f 	and.w	r3, r3, #15
 800551e:	e005      	b.n	800552c <HAL_RCCEx_GetPeriphCLKFreq+0x580>
 8005520:	4b05      	ldr	r3, [pc, #20]	; (8005538 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005522:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005526:	0a1b      	lsrs	r3, r3, #8
 8005528:	f003 030f 	and.w	r3, r3, #15
 800552c:	4a03      	ldr	r2, [pc, #12]	; (800553c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800552e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005532:	61fb      	str	r3, [r7, #28]
          break;
 8005534:	e06c      	b.n	8005610 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 8005536:	bf00      	nop
 8005538:	40021000 	.word	0x40021000
 800553c:	0800d248 	.word	0x0800d248
 8005540:	02dc6c00 	.word	0x02dc6c00
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8005544:	4ba5      	ldr	r3, [pc, #660]	; (80057dc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800554c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005550:	d160      	bne.n	8005614 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8005552:	4ba2      	ldr	r3, [pc, #648]	; (80057dc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005554:	68db      	ldr	r3, [r3, #12]
 8005556:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800555a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800555e:	d159      	bne.n	8005614 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8005560:	4b9e      	ldr	r3, [pc, #632]	; (80057dc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005562:	68db      	ldr	r3, [r3, #12]
 8005564:	0a1b      	lsrs	r3, r3, #8
 8005566:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800556a:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800556c:	69bb      	ldr	r3, [r7, #24]
 800556e:	68ba      	ldr	r2, [r7, #8]
 8005570:	fb03 f202 	mul.w	r2, r3, r2
 8005574:	4b99      	ldr	r3, [pc, #612]	; (80057dc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005576:	68db      	ldr	r3, [r3, #12]
 8005578:	091b      	lsrs	r3, r3, #4
 800557a:	f003 030f 	and.w	r3, r3, #15
 800557e:	3301      	adds	r3, #1
 8005580:	fbb2 f3f3 	udiv	r3, r2, r3
 8005584:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8005586:	4b95      	ldr	r3, [pc, #596]	; (80057dc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005588:	68db      	ldr	r3, [r3, #12]
 800558a:	0d5b      	lsrs	r3, r3, #21
 800558c:	f003 0303 	and.w	r3, r3, #3
 8005590:	3301      	adds	r3, #1
 8005592:	005b      	lsls	r3, r3, #1
 8005594:	69ba      	ldr	r2, [r7, #24]
 8005596:	fbb2 f3f3 	udiv	r3, r2, r3
 800559a:	61fb      	str	r3, [r7, #28]
          break;
 800559c:	e03a      	b.n	8005614 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 800559e:	4b8f      	ldr	r3, [pc, #572]	; (80057dc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80055a6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80055aa:	d135      	bne.n	8005618 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 80055ac:	4b8b      	ldr	r3, [pc, #556]	; (80057dc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80055ae:	691b      	ldr	r3, [r3, #16]
 80055b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80055b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80055b8:	d12e      	bne.n	8005618 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80055ba:	4b88      	ldr	r3, [pc, #544]	; (80057dc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80055bc:	691b      	ldr	r3, [r3, #16]
 80055be:	0a1b      	lsrs	r3, r3, #8
 80055c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80055c4:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 80055c6:	69bb      	ldr	r3, [r7, #24]
 80055c8:	68ba      	ldr	r2, [r7, #8]
 80055ca:	fb03 f202 	mul.w	r2, r3, r2
 80055ce:	4b83      	ldr	r3, [pc, #524]	; (80057dc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80055d0:	691b      	ldr	r3, [r3, #16]
 80055d2:	091b      	lsrs	r3, r3, #4
 80055d4:	f003 030f 	and.w	r3, r3, #15
 80055d8:	3301      	adds	r3, #1
 80055da:	fbb2 f3f3 	udiv	r3, r2, r3
 80055de:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 80055e0:	4b7e      	ldr	r3, [pc, #504]	; (80057dc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80055e2:	691b      	ldr	r3, [r3, #16]
 80055e4:	0d5b      	lsrs	r3, r3, #21
 80055e6:	f003 0303 	and.w	r3, r3, #3
 80055ea:	3301      	adds	r3, #1
 80055ec:	005b      	lsls	r3, r3, #1
 80055ee:	69ba      	ldr	r2, [r7, #24]
 80055f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80055f4:	61fb      	str	r3, [r7, #28]
          break;
 80055f6:	e00f      	b.n	8005618 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 80055f8:	4b78      	ldr	r3, [pc, #480]	; (80057dc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80055fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80055fe:	f003 0302 	and.w	r3, r3, #2
 8005602:	2b02      	cmp	r3, #2
 8005604:	d10a      	bne.n	800561c <HAL_RCCEx_GetPeriphCLKFreq+0x670>
            frequency = HSI48_VALUE;
 8005606:	4b76      	ldr	r3, [pc, #472]	; (80057e0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005608:	61fb      	str	r3, [r7, #28]
          break;
 800560a:	e007      	b.n	800561c <HAL_RCCEx_GetPeriphCLKFreq+0x670>
          break;
 800560c:	bf00      	nop
 800560e:	e3e2      	b.n	8005dd6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          break;
 8005610:	bf00      	nop
 8005612:	e3e0      	b.n	8005dd6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          break;
 8005614:	bf00      	nop
 8005616:	e3de      	b.n	8005dd6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          break;
 8005618:	bf00      	nop
 800561a:	e3dc      	b.n	8005dd6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          break;
 800561c:	bf00      	nop
      break;
 800561e:	e3da      	b.n	8005dd6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8005620:	4b6e      	ldr	r3, [pc, #440]	; (80057dc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005622:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005626:	f003 0303 	and.w	r3, r3, #3
 800562a:	60fb      	str	r3, [r7, #12]
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	2b03      	cmp	r3, #3
 8005630:	d827      	bhi.n	8005682 <HAL_RCCEx_GetPeriphCLKFreq+0x6d6>
 8005632:	a201      	add	r2, pc, #4	; (adr r2, 8005638 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>)
 8005634:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005638:	08005649 	.word	0x08005649
 800563c:	08005651 	.word	0x08005651
 8005640:	08005659 	.word	0x08005659
 8005644:	0800566d 	.word	0x0800566d
          frequency = HAL_RCC_GetPCLK2Freq();
 8005648:	f7ff f81a 	bl	8004680 <HAL_RCC_GetPCLK2Freq>
 800564c:	61f8      	str	r0, [r7, #28]
          break;
 800564e:	e01d      	b.n	800568c <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
          frequency = HAL_RCC_GetSysClockFreq();
 8005650:	f7fe ff6a 	bl	8004528 <HAL_RCC_GetSysClockFreq>
 8005654:	61f8      	str	r0, [r7, #28]
          break;
 8005656:	e019      	b.n	800568c <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005658:	4b60      	ldr	r3, [pc, #384]	; (80057dc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005660:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005664:	d10f      	bne.n	8005686 <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
            frequency = HSI_VALUE;
 8005666:	4b5f      	ldr	r3, [pc, #380]	; (80057e4 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8005668:	61fb      	str	r3, [r7, #28]
          break;
 800566a:	e00c      	b.n	8005686 <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800566c:	4b5b      	ldr	r3, [pc, #364]	; (80057dc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800566e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005672:	f003 0302 	and.w	r3, r3, #2
 8005676:	2b02      	cmp	r3, #2
 8005678:	d107      	bne.n	800568a <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
            frequency = LSE_VALUE;
 800567a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800567e:	61fb      	str	r3, [r7, #28]
          break;
 8005680:	e003      	b.n	800568a <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
          break;
 8005682:	bf00      	nop
 8005684:	e3a8      	b.n	8005dd8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005686:	bf00      	nop
 8005688:	e3a6      	b.n	8005dd8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800568a:	bf00      	nop
        break;
 800568c:	e3a4      	b.n	8005dd8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800568e:	4b53      	ldr	r3, [pc, #332]	; (80057dc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005690:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005694:	f003 030c 	and.w	r3, r3, #12
 8005698:	60fb      	str	r3, [r7, #12]
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	2b0c      	cmp	r3, #12
 800569e:	d83a      	bhi.n	8005716 <HAL_RCCEx_GetPeriphCLKFreq+0x76a>
 80056a0:	a201      	add	r2, pc, #4	; (adr r2, 80056a8 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>)
 80056a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056a6:	bf00      	nop
 80056a8:	080056dd 	.word	0x080056dd
 80056ac:	08005717 	.word	0x08005717
 80056b0:	08005717 	.word	0x08005717
 80056b4:	08005717 	.word	0x08005717
 80056b8:	080056e5 	.word	0x080056e5
 80056bc:	08005717 	.word	0x08005717
 80056c0:	08005717 	.word	0x08005717
 80056c4:	08005717 	.word	0x08005717
 80056c8:	080056ed 	.word	0x080056ed
 80056cc:	08005717 	.word	0x08005717
 80056d0:	08005717 	.word	0x08005717
 80056d4:	08005717 	.word	0x08005717
 80056d8:	08005701 	.word	0x08005701
          frequency = HAL_RCC_GetPCLK1Freq();
 80056dc:	f7fe ffba 	bl	8004654 <HAL_RCC_GetPCLK1Freq>
 80056e0:	61f8      	str	r0, [r7, #28]
          break;
 80056e2:	e01d      	b.n	8005720 <HAL_RCCEx_GetPeriphCLKFreq+0x774>
          frequency = HAL_RCC_GetSysClockFreq();
 80056e4:	f7fe ff20 	bl	8004528 <HAL_RCC_GetSysClockFreq>
 80056e8:	61f8      	str	r0, [r7, #28]
          break;
 80056ea:	e019      	b.n	8005720 <HAL_RCCEx_GetPeriphCLKFreq+0x774>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80056ec:	4b3b      	ldr	r3, [pc, #236]	; (80057dc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056f8:	d10f      	bne.n	800571a <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
            frequency = HSI_VALUE;
 80056fa:	4b3a      	ldr	r3, [pc, #232]	; (80057e4 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 80056fc:	61fb      	str	r3, [r7, #28]
          break;
 80056fe:	e00c      	b.n	800571a <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005700:	4b36      	ldr	r3, [pc, #216]	; (80057dc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005702:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005706:	f003 0302 	and.w	r3, r3, #2
 800570a:	2b02      	cmp	r3, #2
 800570c:	d107      	bne.n	800571e <HAL_RCCEx_GetPeriphCLKFreq+0x772>
            frequency = LSE_VALUE;
 800570e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005712:	61fb      	str	r3, [r7, #28]
          break;
 8005714:	e003      	b.n	800571e <HAL_RCCEx_GetPeriphCLKFreq+0x772>
          break;
 8005716:	bf00      	nop
 8005718:	e35e      	b.n	8005dd8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800571a:	bf00      	nop
 800571c:	e35c      	b.n	8005dd8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800571e:	bf00      	nop
        break;
 8005720:	e35a      	b.n	8005dd8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8005722:	4b2e      	ldr	r3, [pc, #184]	; (80057dc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005724:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005728:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800572c:	60fb      	str	r3, [r7, #12]
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	2b30      	cmp	r3, #48	; 0x30
 8005732:	d021      	beq.n	8005778 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	2b30      	cmp	r3, #48	; 0x30
 8005738:	d829      	bhi.n	800578e <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	2b20      	cmp	r3, #32
 800573e:	d011      	beq.n	8005764 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	2b20      	cmp	r3, #32
 8005744:	d823      	bhi.n	800578e <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d003      	beq.n	8005754 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	2b10      	cmp	r3, #16
 8005750:	d004      	beq.n	800575c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>
          break;
 8005752:	e01c      	b.n	800578e <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005754:	f7fe ff7e 	bl	8004654 <HAL_RCC_GetPCLK1Freq>
 8005758:	61f8      	str	r0, [r7, #28]
          break;
 800575a:	e01d      	b.n	8005798 <HAL_RCCEx_GetPeriphCLKFreq+0x7ec>
          frequency = HAL_RCC_GetSysClockFreq();
 800575c:	f7fe fee4 	bl	8004528 <HAL_RCC_GetSysClockFreq>
 8005760:	61f8      	str	r0, [r7, #28]
          break;
 8005762:	e019      	b.n	8005798 <HAL_RCCEx_GetPeriphCLKFreq+0x7ec>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005764:	4b1d      	ldr	r3, [pc, #116]	; (80057dc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800576c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005770:	d10f      	bne.n	8005792 <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
            frequency = HSI_VALUE;
 8005772:	4b1c      	ldr	r3, [pc, #112]	; (80057e4 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8005774:	61fb      	str	r3, [r7, #28]
          break;
 8005776:	e00c      	b.n	8005792 <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005778:	4b18      	ldr	r3, [pc, #96]	; (80057dc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800577a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800577e:	f003 0302 	and.w	r3, r3, #2
 8005782:	2b02      	cmp	r3, #2
 8005784:	d107      	bne.n	8005796 <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
            frequency = LSE_VALUE;
 8005786:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800578a:	61fb      	str	r3, [r7, #28]
          break;
 800578c:	e003      	b.n	8005796 <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
          break;
 800578e:	bf00      	nop
 8005790:	e322      	b.n	8005dd8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005792:	bf00      	nop
 8005794:	e320      	b.n	8005dd8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005796:	bf00      	nop
        break;
 8005798:	e31e      	b.n	8005dd8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800579a:	4b10      	ldr	r3, [pc, #64]	; (80057dc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800579c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057a0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80057a4:	60fb      	str	r3, [r7, #12]
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	2bc0      	cmp	r3, #192	; 0xc0
 80057aa:	d027      	beq.n	80057fc <HAL_RCCEx_GetPeriphCLKFreq+0x850>
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	2bc0      	cmp	r3, #192	; 0xc0
 80057b0:	d82f      	bhi.n	8005812 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	2b80      	cmp	r3, #128	; 0x80
 80057b6:	d017      	beq.n	80057e8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	2b80      	cmp	r3, #128	; 0x80
 80057bc:	d829      	bhi.n	8005812 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d003      	beq.n	80057cc <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	2b40      	cmp	r3, #64	; 0x40
 80057c8:	d004      	beq.n	80057d4 <HAL_RCCEx_GetPeriphCLKFreq+0x828>
          break;
 80057ca:	e022      	b.n	8005812 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
          frequency = HAL_RCC_GetPCLK1Freq();
 80057cc:	f7fe ff42 	bl	8004654 <HAL_RCC_GetPCLK1Freq>
 80057d0:	61f8      	str	r0, [r7, #28]
          break;
 80057d2:	e023      	b.n	800581c <HAL_RCCEx_GetPeriphCLKFreq+0x870>
          frequency = HAL_RCC_GetSysClockFreq();
 80057d4:	f7fe fea8 	bl	8004528 <HAL_RCC_GetSysClockFreq>
 80057d8:	61f8      	str	r0, [r7, #28]
          break;
 80057da:	e01f      	b.n	800581c <HAL_RCCEx_GetPeriphCLKFreq+0x870>
 80057dc:	40021000 	.word	0x40021000
 80057e0:	02dc6c00 	.word	0x02dc6c00
 80057e4:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80057e8:	4b9b      	ldr	r3, [pc, #620]	; (8005a58 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057f4:	d10f      	bne.n	8005816 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
            frequency = HSI_VALUE;
 80057f6:	4b99      	ldr	r3, [pc, #612]	; (8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80057f8:	61fb      	str	r3, [r7, #28]
          break;
 80057fa:	e00c      	b.n	8005816 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80057fc:	4b96      	ldr	r3, [pc, #600]	; (8005a58 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80057fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005802:	f003 0302 	and.w	r3, r3, #2
 8005806:	2b02      	cmp	r3, #2
 8005808:	d107      	bne.n	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
            frequency = LSE_VALUE;
 800580a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800580e:	61fb      	str	r3, [r7, #28]
          break;
 8005810:	e003      	b.n	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
          break;
 8005812:	bf00      	nop
 8005814:	e2e0      	b.n	8005dd8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005816:	bf00      	nop
 8005818:	e2de      	b.n	8005dd8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800581a:	bf00      	nop
        break;
 800581c:	e2dc      	b.n	8005dd8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800581e:	4b8e      	ldr	r3, [pc, #568]	; (8005a58 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8005820:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005824:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005828:	60fb      	str	r3, [r7, #12]
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005830:	d025      	beq.n	800587e <HAL_RCCEx_GetPeriphCLKFreq+0x8d2>
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005838:	d82c      	bhi.n	8005894 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005840:	d013      	beq.n	800586a <HAL_RCCEx_GetPeriphCLKFreq+0x8be>
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005848:	d824      	bhi.n	8005894 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d004      	beq.n	800585a <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005856:	d004      	beq.n	8005862 <HAL_RCCEx_GetPeriphCLKFreq+0x8b6>
          break;
 8005858:	e01c      	b.n	8005894 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
          frequency = HAL_RCC_GetPCLK1Freq();
 800585a:	f7fe fefb 	bl	8004654 <HAL_RCC_GetPCLK1Freq>
 800585e:	61f8      	str	r0, [r7, #28]
          break;
 8005860:	e01d      	b.n	800589e <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
          frequency = HAL_RCC_GetSysClockFreq();
 8005862:	f7fe fe61 	bl	8004528 <HAL_RCC_GetSysClockFreq>
 8005866:	61f8      	str	r0, [r7, #28]
          break;
 8005868:	e019      	b.n	800589e <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800586a:	4b7b      	ldr	r3, [pc, #492]	; (8005a58 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005872:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005876:	d10f      	bne.n	8005898 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
            frequency = HSI_VALUE;
 8005878:	4b78      	ldr	r3, [pc, #480]	; (8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800587a:	61fb      	str	r3, [r7, #28]
          break;
 800587c:	e00c      	b.n	8005898 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800587e:	4b76      	ldr	r3, [pc, #472]	; (8005a58 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8005880:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005884:	f003 0302 	and.w	r3, r3, #2
 8005888:	2b02      	cmp	r3, #2
 800588a:	d107      	bne.n	800589c <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
            frequency = LSE_VALUE;
 800588c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005890:	61fb      	str	r3, [r7, #28]
          break;
 8005892:	e003      	b.n	800589c <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          break;
 8005894:	bf00      	nop
 8005896:	e29f      	b.n	8005dd8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005898:	bf00      	nop
 800589a:	e29d      	b.n	8005dd8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800589c:	bf00      	nop
        break;
 800589e:	e29b      	b.n	8005dd8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 80058a0:	4b6d      	ldr	r3, [pc, #436]	; (8005a58 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80058a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058a6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80058aa:	60fb      	str	r3, [r7, #12]
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80058b2:	d025      	beq.n	8005900 <HAL_RCCEx_GetPeriphCLKFreq+0x954>
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80058ba:	d82c      	bhi.n	8005916 <HAL_RCCEx_GetPeriphCLKFreq+0x96a>
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80058c2:	d013      	beq.n	80058ec <HAL_RCCEx_GetPeriphCLKFreq+0x940>
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80058ca:	d824      	bhi.n	8005916 <HAL_RCCEx_GetPeriphCLKFreq+0x96a>
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d004      	beq.n	80058dc <HAL_RCCEx_GetPeriphCLKFreq+0x930>
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058d8:	d004      	beq.n	80058e4 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
          break;
 80058da:	e01c      	b.n	8005916 <HAL_RCCEx_GetPeriphCLKFreq+0x96a>
          frequency = HAL_RCC_GetPCLK1Freq();
 80058dc:	f7fe feba 	bl	8004654 <HAL_RCC_GetPCLK1Freq>
 80058e0:	61f8      	str	r0, [r7, #28]
          break;
 80058e2:	e01d      	b.n	8005920 <HAL_RCCEx_GetPeriphCLKFreq+0x974>
          frequency = HAL_RCC_GetSysClockFreq();
 80058e4:	f7fe fe20 	bl	8004528 <HAL_RCC_GetSysClockFreq>
 80058e8:	61f8      	str	r0, [r7, #28]
          break;
 80058ea:	e019      	b.n	8005920 <HAL_RCCEx_GetPeriphCLKFreq+0x974>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80058ec:	4b5a      	ldr	r3, [pc, #360]	; (8005a58 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058f8:	d10f      	bne.n	800591a <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
            frequency = HSI_VALUE;
 80058fa:	4b58      	ldr	r3, [pc, #352]	; (8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80058fc:	61fb      	str	r3, [r7, #28]
          break;
 80058fe:	e00c      	b.n	800591a <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005900:	4b55      	ldr	r3, [pc, #340]	; (8005a58 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8005902:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005906:	f003 0302 	and.w	r3, r3, #2
 800590a:	2b02      	cmp	r3, #2
 800590c:	d107      	bne.n	800591e <HAL_RCCEx_GetPeriphCLKFreq+0x972>
            frequency = LSE_VALUE;
 800590e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005912:	61fb      	str	r3, [r7, #28]
          break;
 8005914:	e003      	b.n	800591e <HAL_RCCEx_GetPeriphCLKFreq+0x972>
          break;
 8005916:	bf00      	nop
 8005918:	e25e      	b.n	8005dd8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800591a:	bf00      	nop
 800591c:	e25c      	b.n	8005dd8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800591e:	bf00      	nop
        break;
 8005920:	e25a      	b.n	8005dd8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8005922:	4b4d      	ldr	r3, [pc, #308]	; (8005a58 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8005924:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005928:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800592c:	60fb      	str	r3, [r7, #12]
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005934:	d007      	beq.n	8005946 <HAL_RCCEx_GetPeriphCLKFreq+0x99a>
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800593c:	d12f      	bne.n	800599e <HAL_RCCEx_GetPeriphCLKFreq+0x9f2>
          frequency = HAL_RCC_GetSysClockFreq();
 800593e:	f7fe fdf3 	bl	8004528 <HAL_RCC_GetSysClockFreq>
 8005942:	61f8      	str	r0, [r7, #28]
          break;
 8005944:	e02e      	b.n	80059a4 <HAL_RCCEx_GetPeriphCLKFreq+0x9f8>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 8005946:	4b44      	ldr	r3, [pc, #272]	; (8005a58 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800594e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005952:	d126      	bne.n	80059a2 <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
 8005954:	4b40      	ldr	r3, [pc, #256]	; (8005a58 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8005956:	691b      	ldr	r3, [r3, #16]
 8005958:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800595c:	2b00      	cmp	r3, #0
 800595e:	d020      	beq.n	80059a2 <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8005960:	4b3d      	ldr	r3, [pc, #244]	; (8005a58 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8005962:	691b      	ldr	r3, [r3, #16]
 8005964:	0a1b      	lsrs	r3, r3, #8
 8005966:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800596a:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 800596c:	69bb      	ldr	r3, [r7, #24]
 800596e:	68ba      	ldr	r2, [r7, #8]
 8005970:	fb03 f202 	mul.w	r2, r3, r2
 8005974:	4b38      	ldr	r3, [pc, #224]	; (8005a58 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8005976:	691b      	ldr	r3, [r3, #16]
 8005978:	091b      	lsrs	r3, r3, #4
 800597a:	f003 030f 	and.w	r3, r3, #15
 800597e:	3301      	adds	r3, #1
 8005980:	fbb2 f3f3 	udiv	r3, r2, r3
 8005984:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 8005986:	4b34      	ldr	r3, [pc, #208]	; (8005a58 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8005988:	691b      	ldr	r3, [r3, #16]
 800598a:	0e5b      	lsrs	r3, r3, #25
 800598c:	f003 0303 	and.w	r3, r3, #3
 8005990:	3301      	adds	r3, #1
 8005992:	005b      	lsls	r3, r3, #1
 8005994:	69ba      	ldr	r2, [r7, #24]
 8005996:	fbb2 f3f3 	udiv	r3, r2, r3
 800599a:	61fb      	str	r3, [r7, #28]
          break;
 800599c:	e001      	b.n	80059a2 <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
          break;
 800599e:	bf00      	nop
 80059a0:	e21a      	b.n	8005dd8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80059a2:	bf00      	nop
        break;
 80059a4:	e218      	b.n	8005dd8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 80059a6:	4b2c      	ldr	r3, [pc, #176]	; (8005a58 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80059a8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80059ac:	f003 0304 	and.w	r3, r3, #4
 80059b0:	60fb      	str	r3, [r7, #12]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d103      	bne.n	80059c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa14>
          frequency = HAL_RCC_GetPCLK2Freq();
 80059b8:	f7fe fe62 	bl	8004680 <HAL_RCC_GetPCLK2Freq>
 80059bc:	61f8      	str	r0, [r7, #28]
        break;
 80059be:	e20b      	b.n	8005dd8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          frequency = HAL_RCC_GetSysClockFreq();
 80059c0:	f7fe fdb2 	bl	8004528 <HAL_RCC_GetSysClockFreq>
 80059c4:	61f8      	str	r0, [r7, #28]
        break;
 80059c6:	e207      	b.n	8005dd8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
 80059c8:	4b23      	ldr	r3, [pc, #140]	; (8005a58 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80059ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80059ce:	f003 0318 	and.w	r3, r3, #24
 80059d2:	60fb      	str	r3, [r7, #12]
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	2b10      	cmp	r3, #16
 80059d8:	d010      	beq.n	80059fc <HAL_RCCEx_GetPeriphCLKFreq+0xa50>
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	2b10      	cmp	r3, #16
 80059de:	d834      	bhi.n	8005a4a <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d003      	beq.n	80059ee <HAL_RCCEx_GetPeriphCLKFreq+0xa42>
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	2b08      	cmp	r3, #8
 80059ea:	d024      	beq.n	8005a36 <HAL_RCCEx_GetPeriphCLKFreq+0xa8a>
          break;
 80059ec:	e02d      	b.n	8005a4a <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
          frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 80059ee:	69b9      	ldr	r1, [r7, #24]
 80059f0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80059f4:	f000 fbe2 	bl	80061bc <RCCEx_GetSAIxPeriphCLKFreq>
 80059f8:	61f8      	str	r0, [r7, #28]
          break;
 80059fa:	e02b      	b.n	8005a54 <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80059fc:	4b16      	ldr	r3, [pc, #88]	; (8005a58 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f003 0302 	and.w	r3, r3, #2
 8005a04:	2b02      	cmp	r3, #2
 8005a06:	d122      	bne.n	8005a4e <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8005a08:	4b13      	ldr	r3, [pc, #76]	; (8005a58 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f003 0308 	and.w	r3, r3, #8
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d005      	beq.n	8005a20 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
 8005a14:	4b10      	ldr	r3, [pc, #64]	; (8005a58 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	091b      	lsrs	r3, r3, #4
 8005a1a:	f003 030f 	and.w	r3, r3, #15
 8005a1e:	e005      	b.n	8005a2c <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 8005a20:	4b0d      	ldr	r3, [pc, #52]	; (8005a58 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8005a22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005a26:	0a1b      	lsrs	r3, r3, #8
 8005a28:	f003 030f 	and.w	r3, r3, #15
 8005a2c:	4a0c      	ldr	r2, [pc, #48]	; (8005a60 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8005a2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a32:	61fb      	str	r3, [r7, #28]
          break;
 8005a34:	e00b      	b.n	8005a4e <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005a36:	4b08      	ldr	r3, [pc, #32]	; (8005a58 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a42:	d106      	bne.n	8005a52 <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
            frequency = HSI_VALUE;
 8005a44:	4b05      	ldr	r3, [pc, #20]	; (8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005a46:	61fb      	str	r3, [r7, #28]
          break;
 8005a48:	e003      	b.n	8005a52 <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
          break;
 8005a4a:	bf00      	nop
 8005a4c:	e1c4      	b.n	8005dd8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005a4e:	bf00      	nop
 8005a50:	e1c2      	b.n	8005dd8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005a52:	bf00      	nop
        break;
 8005a54:	e1c0      	b.n	8005dd8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
 8005a56:	bf00      	nop
 8005a58:	40021000 	.word	0x40021000
 8005a5c:	00f42400 	.word	0x00f42400
 8005a60:	0800d248 	.word	0x0800d248
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8005a64:	4b96      	ldr	r3, [pc, #600]	; (8005cc0 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8005a66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a6a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005a6e:	60fb      	str	r3, [r7, #12]
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a76:	d013      	beq.n	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a7e:	d819      	bhi.n	8005ab4 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d004      	beq.n	8005a90 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a8c:	d004      	beq.n	8005a98 <HAL_RCCEx_GetPeriphCLKFreq+0xaec>
          break;
 8005a8e:	e011      	b.n	8005ab4 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005a90:	f7fe fde0 	bl	8004654 <HAL_RCC_GetPCLK1Freq>
 8005a94:	61f8      	str	r0, [r7, #28]
          break;
 8005a96:	e010      	b.n	8005aba <HAL_RCCEx_GetPeriphCLKFreq+0xb0e>
          frequency = HAL_RCC_GetSysClockFreq();
 8005a98:	f7fe fd46 	bl	8004528 <HAL_RCC_GetSysClockFreq>
 8005a9c:	61f8      	str	r0, [r7, #28]
          break;
 8005a9e:	e00c      	b.n	8005aba <HAL_RCCEx_GetPeriphCLKFreq+0xb0e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005aa0:	4b87      	ldr	r3, [pc, #540]	; (8005cc0 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005aa8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005aac:	d104      	bne.n	8005ab8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
            frequency = HSI_VALUE;
 8005aae:	4b85      	ldr	r3, [pc, #532]	; (8005cc4 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005ab0:	61fb      	str	r3, [r7, #28]
          break;
 8005ab2:	e001      	b.n	8005ab8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
          break;
 8005ab4:	bf00      	nop
 8005ab6:	e18f      	b.n	8005dd8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005ab8:	bf00      	nop
        break;
 8005aba:	e18d      	b.n	8005dd8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8005abc:	4b80      	ldr	r3, [pc, #512]	; (8005cc0 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8005abe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ac2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005ac6:	60fb      	str	r3, [r7, #12]
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ace:	d013      	beq.n	8005af8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ad6:	d819      	bhi.n	8005b0c <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d004      	beq.n	8005ae8 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005ae4:	d004      	beq.n	8005af0 <HAL_RCCEx_GetPeriphCLKFreq+0xb44>
          break;
 8005ae6:	e011      	b.n	8005b0c <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005ae8:	f7fe fdb4 	bl	8004654 <HAL_RCC_GetPCLK1Freq>
 8005aec:	61f8      	str	r0, [r7, #28]
          break;
 8005aee:	e010      	b.n	8005b12 <HAL_RCCEx_GetPeriphCLKFreq+0xb66>
          frequency = HAL_RCC_GetSysClockFreq();
 8005af0:	f7fe fd1a 	bl	8004528 <HAL_RCC_GetSysClockFreq>
 8005af4:	61f8      	str	r0, [r7, #28]
          break;
 8005af6:	e00c      	b.n	8005b12 <HAL_RCCEx_GetPeriphCLKFreq+0xb66>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005af8:	4b71      	ldr	r3, [pc, #452]	; (8005cc0 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b04:	d104      	bne.n	8005b10 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
            frequency = HSI_VALUE;
 8005b06:	4b6f      	ldr	r3, [pc, #444]	; (8005cc4 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005b08:	61fb      	str	r3, [r7, #28]
          break;
 8005b0a:	e001      	b.n	8005b10 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
          break;
 8005b0c:	bf00      	nop
 8005b0e:	e163      	b.n	8005dd8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005b10:	bf00      	nop
        break;
 8005b12:	e161      	b.n	8005dd8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8005b14:	4b6a      	ldr	r3, [pc, #424]	; (8005cc0 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8005b16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b1a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005b1e:	60fb      	str	r3, [r7, #12]
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005b26:	d013      	beq.n	8005b50 <HAL_RCCEx_GetPeriphCLKFreq+0xba4>
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005b2e:	d819      	bhi.n	8005b64 <HAL_RCCEx_GetPeriphCLKFreq+0xbb8>
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d004      	beq.n	8005b40 <HAL_RCCEx_GetPeriphCLKFreq+0xb94>
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b3c:	d004      	beq.n	8005b48 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>
          break;
 8005b3e:	e011      	b.n	8005b64 <HAL_RCCEx_GetPeriphCLKFreq+0xbb8>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005b40:	f7fe fd88 	bl	8004654 <HAL_RCC_GetPCLK1Freq>
 8005b44:	61f8      	str	r0, [r7, #28]
          break;
 8005b46:	e010      	b.n	8005b6a <HAL_RCCEx_GetPeriphCLKFreq+0xbbe>
          frequency = HAL_RCC_GetSysClockFreq();
 8005b48:	f7fe fcee 	bl	8004528 <HAL_RCC_GetSysClockFreq>
 8005b4c:	61f8      	str	r0, [r7, #28]
          break;
 8005b4e:	e00c      	b.n	8005b6a <HAL_RCCEx_GetPeriphCLKFreq+0xbbe>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005b50:	4b5b      	ldr	r3, [pc, #364]	; (8005cc0 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b5c:	d104      	bne.n	8005b68 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
            frequency = HSI_VALUE;
 8005b5e:	4b59      	ldr	r3, [pc, #356]	; (8005cc4 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005b60:	61fb      	str	r3, [r7, #28]
          break;
 8005b62:	e001      	b.n	8005b68 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
          break;
 8005b64:	bf00      	nop
 8005b66:	e137      	b.n	8005dd8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005b68:	bf00      	nop
        break;
 8005b6a:	e135      	b.n	8005dd8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8005b6c:	4b54      	ldr	r3, [pc, #336]	; (8005cc0 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8005b6e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005b72:	f003 0303 	and.w	r3, r3, #3
 8005b76:	60fb      	str	r3, [r7, #12]
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	2b02      	cmp	r3, #2
 8005b7c:	d011      	beq.n	8005ba2 <HAL_RCCEx_GetPeriphCLKFreq+0xbf6>
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	2b02      	cmp	r3, #2
 8005b82:	d818      	bhi.n	8005bb6 <HAL_RCCEx_GetPeriphCLKFreq+0xc0a>
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d003      	beq.n	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0xbe6>
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	2b01      	cmp	r3, #1
 8005b8e:	d004      	beq.n	8005b9a <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
          break;
 8005b90:	e011      	b.n	8005bb6 <HAL_RCCEx_GetPeriphCLKFreq+0xc0a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005b92:	f7fe fd5f 	bl	8004654 <HAL_RCC_GetPCLK1Freq>
 8005b96:	61f8      	str	r0, [r7, #28]
          break;
 8005b98:	e010      	b.n	8005bbc <HAL_RCCEx_GetPeriphCLKFreq+0xc10>
          frequency = HAL_RCC_GetSysClockFreq();
 8005b9a:	f7fe fcc5 	bl	8004528 <HAL_RCC_GetSysClockFreq>
 8005b9e:	61f8      	str	r0, [r7, #28]
          break;
 8005ba0:	e00c      	b.n	8005bbc <HAL_RCCEx_GetPeriphCLKFreq+0xc10>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005ba2:	4b47      	ldr	r3, [pc, #284]	; (8005cc0 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005baa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005bae:	d104      	bne.n	8005bba <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
            frequency = HSI_VALUE;
 8005bb0:	4b44      	ldr	r3, [pc, #272]	; (8005cc4 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005bb2:	61fb      	str	r3, [r7, #28]
          break;
 8005bb4:	e001      	b.n	8005bba <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
          break;
 8005bb6:	bf00      	nop
 8005bb8:	e10e      	b.n	8005dd8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005bba:	bf00      	nop
        break;
 8005bbc:	e10c      	b.n	8005dd8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8005bbe:	4b40      	ldr	r3, [pc, #256]	; (8005cc0 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8005bc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bc4:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8005bc8:	60fb      	str	r3, [r7, #12]
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005bd0:	d02c      	beq.n	8005c2c <HAL_RCCEx_GetPeriphCLKFreq+0xc80>
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005bd8:	d833      	bhi.n	8005c42 <HAL_RCCEx_GetPeriphCLKFreq+0xc96>
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005be0:	d01a      	beq.n	8005c18 <HAL_RCCEx_GetPeriphCLKFreq+0xc6c>
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005be8:	d82b      	bhi.n	8005c42 <HAL_RCCEx_GetPeriphCLKFreq+0xc96>
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d004      	beq.n	8005bfa <HAL_RCCEx_GetPeriphCLKFreq+0xc4e>
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005bf6:	d004      	beq.n	8005c02 <HAL_RCCEx_GetPeriphCLKFreq+0xc56>
          break;
 8005bf8:	e023      	b.n	8005c42 <HAL_RCCEx_GetPeriphCLKFreq+0xc96>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005bfa:	f7fe fd2b 	bl	8004654 <HAL_RCC_GetPCLK1Freq>
 8005bfe:	61f8      	str	r0, [r7, #28]
          break;
 8005c00:	e026      	b.n	8005c50 <HAL_RCCEx_GetPeriphCLKFreq+0xca4>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8005c02:	4b2f      	ldr	r3, [pc, #188]	; (8005cc0 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8005c04:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c08:	f003 0302 	and.w	r3, r3, #2
 8005c0c:	2b02      	cmp	r3, #2
 8005c0e:	d11a      	bne.n	8005c46 <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
              frequency = LSI_VALUE;
 8005c10:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8005c14:	61fb      	str	r3, [r7, #28]
          break;
 8005c16:	e016      	b.n	8005c46 <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005c18:	4b29      	ldr	r3, [pc, #164]	; (8005cc0 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c24:	d111      	bne.n	8005c4a <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
            frequency = HSI_VALUE;
 8005c26:	4b27      	ldr	r3, [pc, #156]	; (8005cc4 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005c28:	61fb      	str	r3, [r7, #28]
          break;
 8005c2a:	e00e      	b.n	8005c4a <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005c2c:	4b24      	ldr	r3, [pc, #144]	; (8005cc0 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8005c2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c32:	f003 0302 	and.w	r3, r3, #2
 8005c36:	2b02      	cmp	r3, #2
 8005c38:	d109      	bne.n	8005c4e <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
            frequency = LSE_VALUE;
 8005c3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c3e:	61fb      	str	r3, [r7, #28]
          break;
 8005c40:	e005      	b.n	8005c4e <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
          break;
 8005c42:	bf00      	nop
 8005c44:	e0c8      	b.n	8005dd8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005c46:	bf00      	nop
 8005c48:	e0c6      	b.n	8005dd8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005c4a:	bf00      	nop
 8005c4c:	e0c4      	b.n	8005dd8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005c4e:	bf00      	nop
        break;
 8005c50:	e0c2      	b.n	8005dd8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8005c52:	4b1b      	ldr	r3, [pc, #108]	; (8005cc0 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8005c54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c58:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005c5c:	60fb      	str	r3, [r7, #12]
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005c64:	d030      	beq.n	8005cc8 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005c6c:	d837      	bhi.n	8005cde <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005c74:	d01a      	beq.n	8005cac <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005c7c:	d82f      	bhi.n	8005cde <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d004      	beq.n	8005c8e <HAL_RCCEx_GetPeriphCLKFreq+0xce2>
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c8a:	d004      	beq.n	8005c96 <HAL_RCCEx_GetPeriphCLKFreq+0xcea>
          break;
 8005c8c:	e027      	b.n	8005cde <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005c8e:	f7fe fce1 	bl	8004654 <HAL_RCC_GetPCLK1Freq>
 8005c92:	61f8      	str	r0, [r7, #28]
          break;
 8005c94:	e02a      	b.n	8005cec <HAL_RCCEx_GetPeriphCLKFreq+0xd40>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8005c96:	4b0a      	ldr	r3, [pc, #40]	; (8005cc0 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8005c98:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c9c:	f003 0302 	and.w	r3, r3, #2
 8005ca0:	2b02      	cmp	r3, #2
 8005ca2:	d11e      	bne.n	8005ce2 <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
              frequency = LSI_VALUE;
 8005ca4:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8005ca8:	61fb      	str	r3, [r7, #28]
          break;
 8005caa:	e01a      	b.n	8005ce2 <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005cac:	4b04      	ldr	r3, [pc, #16]	; (8005cc0 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005cb4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005cb8:	d115      	bne.n	8005ce6 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
            frequency = HSI_VALUE;
 8005cba:	4b02      	ldr	r3, [pc, #8]	; (8005cc4 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005cbc:	61fb      	str	r3, [r7, #28]
          break;
 8005cbe:	e012      	b.n	8005ce6 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
 8005cc0:	40021000 	.word	0x40021000
 8005cc4:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005cc8:	4b46      	ldr	r3, [pc, #280]	; (8005de4 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8005cca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cce:	f003 0302 	and.w	r3, r3, #2
 8005cd2:	2b02      	cmp	r3, #2
 8005cd4:	d109      	bne.n	8005cea <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
            frequency = LSE_VALUE;
 8005cd6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005cda:	61fb      	str	r3, [r7, #28]
          break;
 8005cdc:	e005      	b.n	8005cea <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
          break;
 8005cde:	bf00      	nop
 8005ce0:	e07a      	b.n	8005dd8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005ce2:	bf00      	nop
 8005ce4:	e078      	b.n	8005dd8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005ce6:	bf00      	nop
 8005ce8:	e076      	b.n	8005dd8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005cea:	bf00      	nop
        break;
 8005cec:	e074      	b.n	8005dd8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8005cee:	4b3d      	ldr	r3, [pc, #244]	; (8005de4 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8005cf0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005cf4:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005cf8:	60fb      	str	r3, [r7, #12]
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005d00:	d02c      	beq.n	8005d5c <HAL_RCCEx_GetPeriphCLKFreq+0xdb0>
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005d08:	d855      	bhi.n	8005db6 <HAL_RCCEx_GetPeriphCLKFreq+0xe0a>
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d004      	beq.n	8005d1a <HAL_RCCEx_GetPeriphCLKFreq+0xd6e>
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005d16:	d004      	beq.n	8005d22 <HAL_RCCEx_GetPeriphCLKFreq+0xd76>
          break;
 8005d18:	e04d      	b.n	8005db6 <HAL_RCCEx_GetPeriphCLKFreq+0xe0a>
          frequency = HAL_RCC_GetSysClockFreq();
 8005d1a:	f7fe fc05 	bl	8004528 <HAL_RCC_GetSysClockFreq>
 8005d1e:	61f8      	str	r0, [r7, #28]
          break;
 8005d20:	e04e      	b.n	8005dc0 <HAL_RCCEx_GetPeriphCLKFreq+0xe14>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8005d22:	4b30      	ldr	r3, [pc, #192]	; (8005de4 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f003 0302 	and.w	r3, r3, #2
 8005d2a:	2b02      	cmp	r3, #2
 8005d2c:	d145      	bne.n	8005dba <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8005d2e:	4b2d      	ldr	r3, [pc, #180]	; (8005de4 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f003 0308 	and.w	r3, r3, #8
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d005      	beq.n	8005d46 <HAL_RCCEx_GetPeriphCLKFreq+0xd9a>
 8005d3a:	4b2a      	ldr	r3, [pc, #168]	; (8005de4 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	091b      	lsrs	r3, r3, #4
 8005d40:	f003 030f 	and.w	r3, r3, #15
 8005d44:	e005      	b.n	8005d52 <HAL_RCCEx_GetPeriphCLKFreq+0xda6>
 8005d46:	4b27      	ldr	r3, [pc, #156]	; (8005de4 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8005d48:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005d4c:	0a1b      	lsrs	r3, r3, #8
 8005d4e:	f003 030f 	and.w	r3, r3, #15
 8005d52:	4a25      	ldr	r2, [pc, #148]	; (8005de8 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8005d54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d58:	61fb      	str	r3, [r7, #28]
          break;
 8005d5a:	e02e      	b.n	8005dba <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8005d5c:	4b21      	ldr	r3, [pc, #132]	; (8005de4 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d64:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005d68:	d129      	bne.n	8005dbe <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8005d6a:	4b1e      	ldr	r3, [pc, #120]	; (8005de4 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8005d6c:	68db      	ldr	r3, [r3, #12]
 8005d6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005d72:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005d76:	d122      	bne.n	8005dbe <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8005d78:	4b1a      	ldr	r3, [pc, #104]	; (8005de4 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8005d7a:	68db      	ldr	r3, [r3, #12]
 8005d7c:	0a1b      	lsrs	r3, r3, #8
 8005d7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d82:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005d84:	69bb      	ldr	r3, [r7, #24]
 8005d86:	68ba      	ldr	r2, [r7, #8]
 8005d88:	fb03 f202 	mul.w	r2, r3, r2
 8005d8c:	4b15      	ldr	r3, [pc, #84]	; (8005de4 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8005d8e:	68db      	ldr	r3, [r3, #12]
 8005d90:	091b      	lsrs	r3, r3, #4
 8005d92:	f003 030f 	and.w	r3, r3, #15
 8005d96:	3301      	adds	r3, #1
 8005d98:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d9c:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8005d9e:	4b11      	ldr	r3, [pc, #68]	; (8005de4 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8005da0:	68db      	ldr	r3, [r3, #12]
 8005da2:	0d5b      	lsrs	r3, r3, #21
 8005da4:	f003 0303 	and.w	r3, r3, #3
 8005da8:	3301      	adds	r3, #1
 8005daa:	005b      	lsls	r3, r3, #1
 8005dac:	69ba      	ldr	r2, [r7, #24]
 8005dae:	fbb2 f3f3 	udiv	r3, r2, r3
 8005db2:	61fb      	str	r3, [r7, #28]
          break;
 8005db4:	e003      	b.n	8005dbe <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
          break;
 8005db6:	bf00      	nop
 8005db8:	e00e      	b.n	8005dd8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005dba:	bf00      	nop
 8005dbc:	e00c      	b.n	8005dd8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005dbe:	bf00      	nop
        break;
 8005dc0:	e00a      	b.n	8005dd8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 8005dc2:	bf00      	nop
 8005dc4:	e008      	b.n	8005dd8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 8005dc6:	bf00      	nop
 8005dc8:	e006      	b.n	8005dd8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 8005dca:	bf00      	nop
 8005dcc:	e004      	b.n	8005dd8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 8005dce:	bf00      	nop
 8005dd0:	e002      	b.n	8005dd8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 8005dd2:	bf00      	nop
 8005dd4:	e000      	b.n	8005dd8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 8005dd6:	bf00      	nop
    }
  }

  return(frequency);
 8005dd8:	69fb      	ldr	r3, [r7, #28]
}
 8005dda:	4618      	mov	r0, r3
 8005ddc:	3720      	adds	r7, #32
 8005dde:	46bd      	mov	sp, r7
 8005de0:	bd80      	pop	{r7, pc}
 8005de2:	bf00      	nop
 8005de4:	40021000 	.word	0x40021000
 8005de8:	0800d248 	.word	0x0800d248

08005dec <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b084      	sub	sp, #16
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
 8005df4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005df6:	2300      	movs	r3, #0
 8005df8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005dfa:	4b72      	ldr	r3, [pc, #456]	; (8005fc4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005dfc:	68db      	ldr	r3, [r3, #12]
 8005dfe:	f003 0303 	and.w	r3, r3, #3
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d00e      	beq.n	8005e24 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005e06:	4b6f      	ldr	r3, [pc, #444]	; (8005fc4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005e08:	68db      	ldr	r3, [r3, #12]
 8005e0a:	f003 0203 	and.w	r2, r3, #3
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	429a      	cmp	r2, r3
 8005e14:	d103      	bne.n	8005e1e <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
       ||
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d142      	bne.n	8005ea4 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8005e1e:	2301      	movs	r3, #1
 8005e20:	73fb      	strb	r3, [r7, #15]
 8005e22:	e03f      	b.n	8005ea4 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	2b03      	cmp	r3, #3
 8005e2a:	d018      	beq.n	8005e5e <RCCEx_PLLSAI1_Config+0x72>
 8005e2c:	2b03      	cmp	r3, #3
 8005e2e:	d825      	bhi.n	8005e7c <RCCEx_PLLSAI1_Config+0x90>
 8005e30:	2b01      	cmp	r3, #1
 8005e32:	d002      	beq.n	8005e3a <RCCEx_PLLSAI1_Config+0x4e>
 8005e34:	2b02      	cmp	r3, #2
 8005e36:	d009      	beq.n	8005e4c <RCCEx_PLLSAI1_Config+0x60>
 8005e38:	e020      	b.n	8005e7c <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005e3a:	4b62      	ldr	r3, [pc, #392]	; (8005fc4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f003 0302 	and.w	r3, r3, #2
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d11d      	bne.n	8005e82 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8005e46:	2301      	movs	r3, #1
 8005e48:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005e4a:	e01a      	b.n	8005e82 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005e4c:	4b5d      	ldr	r3, [pc, #372]	; (8005fc4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d116      	bne.n	8005e86 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8005e58:	2301      	movs	r3, #1
 8005e5a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005e5c:	e013      	b.n	8005e86 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005e5e:	4b59      	ldr	r3, [pc, #356]	; (8005fc4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d10f      	bne.n	8005e8a <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005e6a:	4b56      	ldr	r3, [pc, #344]	; (8005fc4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d109      	bne.n	8005e8a <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8005e76:	2301      	movs	r3, #1
 8005e78:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005e7a:	e006      	b.n	8005e8a <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8005e7c:	2301      	movs	r3, #1
 8005e7e:	73fb      	strb	r3, [r7, #15]
      break;
 8005e80:	e004      	b.n	8005e8c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005e82:	bf00      	nop
 8005e84:	e002      	b.n	8005e8c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005e86:	bf00      	nop
 8005e88:	e000      	b.n	8005e8c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005e8a:	bf00      	nop
    }

    if(status == HAL_OK)
 8005e8c:	7bfb      	ldrb	r3, [r7, #15]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d108      	bne.n	8005ea4 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8005e92:	4b4c      	ldr	r3, [pc, #304]	; (8005fc4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005e94:	68db      	ldr	r3, [r3, #12]
 8005e96:	f023 0203 	bic.w	r2, r3, #3
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	4949      	ldr	r1, [pc, #292]	; (8005fc4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005ea0:	4313      	orrs	r3, r2
 8005ea2:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8005ea4:	7bfb      	ldrb	r3, [r7, #15]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	f040 8086 	bne.w	8005fb8 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005eac:	4b45      	ldr	r3, [pc, #276]	; (8005fc4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	4a44      	ldr	r2, [pc, #272]	; (8005fc4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005eb2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005eb6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005eb8:	f7fb fa16 	bl	80012e8 <HAL_GetTick>
 8005ebc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005ebe:	e009      	b.n	8005ed4 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005ec0:	f7fb fa12 	bl	80012e8 <HAL_GetTick>
 8005ec4:	4602      	mov	r2, r0
 8005ec6:	68bb      	ldr	r3, [r7, #8]
 8005ec8:	1ad3      	subs	r3, r2, r3
 8005eca:	2b02      	cmp	r3, #2
 8005ecc:	d902      	bls.n	8005ed4 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8005ece:	2303      	movs	r3, #3
 8005ed0:	73fb      	strb	r3, [r7, #15]
        break;
 8005ed2:	e005      	b.n	8005ee0 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005ed4:	4b3b      	ldr	r3, [pc, #236]	; (8005fc4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d1ef      	bne.n	8005ec0 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8005ee0:	7bfb      	ldrb	r3, [r7, #15]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d168      	bne.n	8005fb8 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d113      	bne.n	8005f14 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005eec:	4b35      	ldr	r3, [pc, #212]	; (8005fc4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005eee:	691a      	ldr	r2, [r3, #16]
 8005ef0:	4b35      	ldr	r3, [pc, #212]	; (8005fc8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005ef2:	4013      	ands	r3, r2
 8005ef4:	687a      	ldr	r2, [r7, #4]
 8005ef6:	6892      	ldr	r2, [r2, #8]
 8005ef8:	0211      	lsls	r1, r2, #8
 8005efa:	687a      	ldr	r2, [r7, #4]
 8005efc:	68d2      	ldr	r2, [r2, #12]
 8005efe:	06d2      	lsls	r2, r2, #27
 8005f00:	4311      	orrs	r1, r2
 8005f02:	687a      	ldr	r2, [r7, #4]
 8005f04:	6852      	ldr	r2, [r2, #4]
 8005f06:	3a01      	subs	r2, #1
 8005f08:	0112      	lsls	r2, r2, #4
 8005f0a:	430a      	orrs	r2, r1
 8005f0c:	492d      	ldr	r1, [pc, #180]	; (8005fc4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005f0e:	4313      	orrs	r3, r2
 8005f10:	610b      	str	r3, [r1, #16]
 8005f12:	e02d      	b.n	8005f70 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	2b01      	cmp	r3, #1
 8005f18:	d115      	bne.n	8005f46 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005f1a:	4b2a      	ldr	r3, [pc, #168]	; (8005fc4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005f1c:	691a      	ldr	r2, [r3, #16]
 8005f1e:	4b2b      	ldr	r3, [pc, #172]	; (8005fcc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005f20:	4013      	ands	r3, r2
 8005f22:	687a      	ldr	r2, [r7, #4]
 8005f24:	6892      	ldr	r2, [r2, #8]
 8005f26:	0211      	lsls	r1, r2, #8
 8005f28:	687a      	ldr	r2, [r7, #4]
 8005f2a:	6912      	ldr	r2, [r2, #16]
 8005f2c:	0852      	lsrs	r2, r2, #1
 8005f2e:	3a01      	subs	r2, #1
 8005f30:	0552      	lsls	r2, r2, #21
 8005f32:	4311      	orrs	r1, r2
 8005f34:	687a      	ldr	r2, [r7, #4]
 8005f36:	6852      	ldr	r2, [r2, #4]
 8005f38:	3a01      	subs	r2, #1
 8005f3a:	0112      	lsls	r2, r2, #4
 8005f3c:	430a      	orrs	r2, r1
 8005f3e:	4921      	ldr	r1, [pc, #132]	; (8005fc4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005f40:	4313      	orrs	r3, r2
 8005f42:	610b      	str	r3, [r1, #16]
 8005f44:	e014      	b.n	8005f70 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005f46:	4b1f      	ldr	r3, [pc, #124]	; (8005fc4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005f48:	691a      	ldr	r2, [r3, #16]
 8005f4a:	4b21      	ldr	r3, [pc, #132]	; (8005fd0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005f4c:	4013      	ands	r3, r2
 8005f4e:	687a      	ldr	r2, [r7, #4]
 8005f50:	6892      	ldr	r2, [r2, #8]
 8005f52:	0211      	lsls	r1, r2, #8
 8005f54:	687a      	ldr	r2, [r7, #4]
 8005f56:	6952      	ldr	r2, [r2, #20]
 8005f58:	0852      	lsrs	r2, r2, #1
 8005f5a:	3a01      	subs	r2, #1
 8005f5c:	0652      	lsls	r2, r2, #25
 8005f5e:	4311      	orrs	r1, r2
 8005f60:	687a      	ldr	r2, [r7, #4]
 8005f62:	6852      	ldr	r2, [r2, #4]
 8005f64:	3a01      	subs	r2, #1
 8005f66:	0112      	lsls	r2, r2, #4
 8005f68:	430a      	orrs	r2, r1
 8005f6a:	4916      	ldr	r1, [pc, #88]	; (8005fc4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005f6c:	4313      	orrs	r3, r2
 8005f6e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005f70:	4b14      	ldr	r3, [pc, #80]	; (8005fc4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	4a13      	ldr	r2, [pc, #76]	; (8005fc4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005f76:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005f7a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f7c:	f7fb f9b4 	bl	80012e8 <HAL_GetTick>
 8005f80:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005f82:	e009      	b.n	8005f98 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005f84:	f7fb f9b0 	bl	80012e8 <HAL_GetTick>
 8005f88:	4602      	mov	r2, r0
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	1ad3      	subs	r3, r2, r3
 8005f8e:	2b02      	cmp	r3, #2
 8005f90:	d902      	bls.n	8005f98 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8005f92:	2303      	movs	r3, #3
 8005f94:	73fb      	strb	r3, [r7, #15]
          break;
 8005f96:	e005      	b.n	8005fa4 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005f98:	4b0a      	ldr	r3, [pc, #40]	; (8005fc4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d0ef      	beq.n	8005f84 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8005fa4:	7bfb      	ldrb	r3, [r7, #15]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d106      	bne.n	8005fb8 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005faa:	4b06      	ldr	r3, [pc, #24]	; (8005fc4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005fac:	691a      	ldr	r2, [r3, #16]
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	699b      	ldr	r3, [r3, #24]
 8005fb2:	4904      	ldr	r1, [pc, #16]	; (8005fc4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005fb4:	4313      	orrs	r3, r2
 8005fb6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005fb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fba:	4618      	mov	r0, r3
 8005fbc:	3710      	adds	r7, #16
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	bd80      	pop	{r7, pc}
 8005fc2:	bf00      	nop
 8005fc4:	40021000 	.word	0x40021000
 8005fc8:	07ff800f 	.word	0x07ff800f
 8005fcc:	ff9f800f 	.word	0xff9f800f
 8005fd0:	f9ff800f 	.word	0xf9ff800f

08005fd4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b084      	sub	sp, #16
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
 8005fdc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005fde:	2300      	movs	r3, #0
 8005fe0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005fe2:	4b72      	ldr	r3, [pc, #456]	; (80061ac <RCCEx_PLLSAI2_Config+0x1d8>)
 8005fe4:	68db      	ldr	r3, [r3, #12]
 8005fe6:	f003 0303 	and.w	r3, r3, #3
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d00e      	beq.n	800600c <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005fee:	4b6f      	ldr	r3, [pc, #444]	; (80061ac <RCCEx_PLLSAI2_Config+0x1d8>)
 8005ff0:	68db      	ldr	r3, [r3, #12]
 8005ff2:	f003 0203 	and.w	r2, r3, #3
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	429a      	cmp	r2, r3
 8005ffc:	d103      	bne.n	8006006 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
       ||
 8006002:	2b00      	cmp	r3, #0
 8006004:	d142      	bne.n	800608c <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8006006:	2301      	movs	r3, #1
 8006008:	73fb      	strb	r3, [r7, #15]
 800600a:	e03f      	b.n	800608c <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	2b03      	cmp	r3, #3
 8006012:	d018      	beq.n	8006046 <RCCEx_PLLSAI2_Config+0x72>
 8006014:	2b03      	cmp	r3, #3
 8006016:	d825      	bhi.n	8006064 <RCCEx_PLLSAI2_Config+0x90>
 8006018:	2b01      	cmp	r3, #1
 800601a:	d002      	beq.n	8006022 <RCCEx_PLLSAI2_Config+0x4e>
 800601c:	2b02      	cmp	r3, #2
 800601e:	d009      	beq.n	8006034 <RCCEx_PLLSAI2_Config+0x60>
 8006020:	e020      	b.n	8006064 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006022:	4b62      	ldr	r3, [pc, #392]	; (80061ac <RCCEx_PLLSAI2_Config+0x1d8>)
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f003 0302 	and.w	r3, r3, #2
 800602a:	2b00      	cmp	r3, #0
 800602c:	d11d      	bne.n	800606a <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 800602e:	2301      	movs	r3, #1
 8006030:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006032:	e01a      	b.n	800606a <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006034:	4b5d      	ldr	r3, [pc, #372]	; (80061ac <RCCEx_PLLSAI2_Config+0x1d8>)
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800603c:	2b00      	cmp	r3, #0
 800603e:	d116      	bne.n	800606e <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8006040:	2301      	movs	r3, #1
 8006042:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006044:	e013      	b.n	800606e <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006046:	4b59      	ldr	r3, [pc, #356]	; (80061ac <RCCEx_PLLSAI2_Config+0x1d8>)
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800604e:	2b00      	cmp	r3, #0
 8006050:	d10f      	bne.n	8006072 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006052:	4b56      	ldr	r3, [pc, #344]	; (80061ac <RCCEx_PLLSAI2_Config+0x1d8>)
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800605a:	2b00      	cmp	r3, #0
 800605c:	d109      	bne.n	8006072 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 800605e:	2301      	movs	r3, #1
 8006060:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006062:	e006      	b.n	8006072 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8006064:	2301      	movs	r3, #1
 8006066:	73fb      	strb	r3, [r7, #15]
      break;
 8006068:	e004      	b.n	8006074 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800606a:	bf00      	nop
 800606c:	e002      	b.n	8006074 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800606e:	bf00      	nop
 8006070:	e000      	b.n	8006074 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8006072:	bf00      	nop
    }

    if(status == HAL_OK)
 8006074:	7bfb      	ldrb	r3, [r7, #15]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d108      	bne.n	800608c <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 800607a:	4b4c      	ldr	r3, [pc, #304]	; (80061ac <RCCEx_PLLSAI2_Config+0x1d8>)
 800607c:	68db      	ldr	r3, [r3, #12]
 800607e:	f023 0203 	bic.w	r2, r3, #3
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	4949      	ldr	r1, [pc, #292]	; (80061ac <RCCEx_PLLSAI2_Config+0x1d8>)
 8006088:	4313      	orrs	r3, r2
 800608a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800608c:	7bfb      	ldrb	r3, [r7, #15]
 800608e:	2b00      	cmp	r3, #0
 8006090:	f040 8086 	bne.w	80061a0 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006094:	4b45      	ldr	r3, [pc, #276]	; (80061ac <RCCEx_PLLSAI2_Config+0x1d8>)
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	4a44      	ldr	r2, [pc, #272]	; (80061ac <RCCEx_PLLSAI2_Config+0x1d8>)
 800609a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800609e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80060a0:	f7fb f922 	bl	80012e8 <HAL_GetTick>
 80060a4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80060a6:	e009      	b.n	80060bc <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80060a8:	f7fb f91e 	bl	80012e8 <HAL_GetTick>
 80060ac:	4602      	mov	r2, r0
 80060ae:	68bb      	ldr	r3, [r7, #8]
 80060b0:	1ad3      	subs	r3, r2, r3
 80060b2:	2b02      	cmp	r3, #2
 80060b4:	d902      	bls.n	80060bc <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80060b6:	2303      	movs	r3, #3
 80060b8:	73fb      	strb	r3, [r7, #15]
        break;
 80060ba:	e005      	b.n	80060c8 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80060bc:	4b3b      	ldr	r3, [pc, #236]	; (80061ac <RCCEx_PLLSAI2_Config+0x1d8>)
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d1ef      	bne.n	80060a8 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80060c8:	7bfb      	ldrb	r3, [r7, #15]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d168      	bne.n	80061a0 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d113      	bne.n	80060fc <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80060d4:	4b35      	ldr	r3, [pc, #212]	; (80061ac <RCCEx_PLLSAI2_Config+0x1d8>)
 80060d6:	695a      	ldr	r2, [r3, #20]
 80060d8:	4b35      	ldr	r3, [pc, #212]	; (80061b0 <RCCEx_PLLSAI2_Config+0x1dc>)
 80060da:	4013      	ands	r3, r2
 80060dc:	687a      	ldr	r2, [r7, #4]
 80060de:	6892      	ldr	r2, [r2, #8]
 80060e0:	0211      	lsls	r1, r2, #8
 80060e2:	687a      	ldr	r2, [r7, #4]
 80060e4:	68d2      	ldr	r2, [r2, #12]
 80060e6:	06d2      	lsls	r2, r2, #27
 80060e8:	4311      	orrs	r1, r2
 80060ea:	687a      	ldr	r2, [r7, #4]
 80060ec:	6852      	ldr	r2, [r2, #4]
 80060ee:	3a01      	subs	r2, #1
 80060f0:	0112      	lsls	r2, r2, #4
 80060f2:	430a      	orrs	r2, r1
 80060f4:	492d      	ldr	r1, [pc, #180]	; (80061ac <RCCEx_PLLSAI2_Config+0x1d8>)
 80060f6:	4313      	orrs	r3, r2
 80060f8:	614b      	str	r3, [r1, #20]
 80060fa:	e02d      	b.n	8006158 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	2b01      	cmp	r3, #1
 8006100:	d115      	bne.n	800612e <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006102:	4b2a      	ldr	r3, [pc, #168]	; (80061ac <RCCEx_PLLSAI2_Config+0x1d8>)
 8006104:	695a      	ldr	r2, [r3, #20]
 8006106:	4b2b      	ldr	r3, [pc, #172]	; (80061b4 <RCCEx_PLLSAI2_Config+0x1e0>)
 8006108:	4013      	ands	r3, r2
 800610a:	687a      	ldr	r2, [r7, #4]
 800610c:	6892      	ldr	r2, [r2, #8]
 800610e:	0211      	lsls	r1, r2, #8
 8006110:	687a      	ldr	r2, [r7, #4]
 8006112:	6912      	ldr	r2, [r2, #16]
 8006114:	0852      	lsrs	r2, r2, #1
 8006116:	3a01      	subs	r2, #1
 8006118:	0552      	lsls	r2, r2, #21
 800611a:	4311      	orrs	r1, r2
 800611c:	687a      	ldr	r2, [r7, #4]
 800611e:	6852      	ldr	r2, [r2, #4]
 8006120:	3a01      	subs	r2, #1
 8006122:	0112      	lsls	r2, r2, #4
 8006124:	430a      	orrs	r2, r1
 8006126:	4921      	ldr	r1, [pc, #132]	; (80061ac <RCCEx_PLLSAI2_Config+0x1d8>)
 8006128:	4313      	orrs	r3, r2
 800612a:	614b      	str	r3, [r1, #20]
 800612c:	e014      	b.n	8006158 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800612e:	4b1f      	ldr	r3, [pc, #124]	; (80061ac <RCCEx_PLLSAI2_Config+0x1d8>)
 8006130:	695a      	ldr	r2, [r3, #20]
 8006132:	4b21      	ldr	r3, [pc, #132]	; (80061b8 <RCCEx_PLLSAI2_Config+0x1e4>)
 8006134:	4013      	ands	r3, r2
 8006136:	687a      	ldr	r2, [r7, #4]
 8006138:	6892      	ldr	r2, [r2, #8]
 800613a:	0211      	lsls	r1, r2, #8
 800613c:	687a      	ldr	r2, [r7, #4]
 800613e:	6952      	ldr	r2, [r2, #20]
 8006140:	0852      	lsrs	r2, r2, #1
 8006142:	3a01      	subs	r2, #1
 8006144:	0652      	lsls	r2, r2, #25
 8006146:	4311      	orrs	r1, r2
 8006148:	687a      	ldr	r2, [r7, #4]
 800614a:	6852      	ldr	r2, [r2, #4]
 800614c:	3a01      	subs	r2, #1
 800614e:	0112      	lsls	r2, r2, #4
 8006150:	430a      	orrs	r2, r1
 8006152:	4916      	ldr	r1, [pc, #88]	; (80061ac <RCCEx_PLLSAI2_Config+0x1d8>)
 8006154:	4313      	orrs	r3, r2
 8006156:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006158:	4b14      	ldr	r3, [pc, #80]	; (80061ac <RCCEx_PLLSAI2_Config+0x1d8>)
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	4a13      	ldr	r2, [pc, #76]	; (80061ac <RCCEx_PLLSAI2_Config+0x1d8>)
 800615e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006162:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006164:	f7fb f8c0 	bl	80012e8 <HAL_GetTick>
 8006168:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800616a:	e009      	b.n	8006180 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800616c:	f7fb f8bc 	bl	80012e8 <HAL_GetTick>
 8006170:	4602      	mov	r2, r0
 8006172:	68bb      	ldr	r3, [r7, #8]
 8006174:	1ad3      	subs	r3, r2, r3
 8006176:	2b02      	cmp	r3, #2
 8006178:	d902      	bls.n	8006180 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800617a:	2303      	movs	r3, #3
 800617c:	73fb      	strb	r3, [r7, #15]
          break;
 800617e:	e005      	b.n	800618c <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006180:	4b0a      	ldr	r3, [pc, #40]	; (80061ac <RCCEx_PLLSAI2_Config+0x1d8>)
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006188:	2b00      	cmp	r3, #0
 800618a:	d0ef      	beq.n	800616c <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800618c:	7bfb      	ldrb	r3, [r7, #15]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d106      	bne.n	80061a0 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8006192:	4b06      	ldr	r3, [pc, #24]	; (80061ac <RCCEx_PLLSAI2_Config+0x1d8>)
 8006194:	695a      	ldr	r2, [r3, #20]
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	699b      	ldr	r3, [r3, #24]
 800619a:	4904      	ldr	r1, [pc, #16]	; (80061ac <RCCEx_PLLSAI2_Config+0x1d8>)
 800619c:	4313      	orrs	r3, r2
 800619e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80061a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80061a2:	4618      	mov	r0, r3
 80061a4:	3710      	adds	r7, #16
 80061a6:	46bd      	mov	sp, r7
 80061a8:	bd80      	pop	{r7, pc}
 80061aa:	bf00      	nop
 80061ac:	40021000 	.word	0x40021000
 80061b0:	07ff800f 	.word	0x07ff800f
 80061b4:	ff9f800f 	.word	0xff9f800f
 80061b8:	f9ff800f 	.word	0xf9ff800f

080061bc <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 80061bc:	b480      	push	{r7}
 80061be:	b089      	sub	sp, #36	; 0x24
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
 80061c4:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 80061c6:	2300      	movs	r3, #0
 80061c8:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 80061ca:	2300      	movs	r3, #0
 80061cc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 80061ce:	2300      	movs	r3, #0
 80061d0:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80061d8:	d10b      	bne.n	80061f2 <RCCEx_GetSAIxPeriphCLKFreq+0x36>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 80061da:	4b7e      	ldr	r3, [pc, #504]	; (80063d4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80061dc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80061e0:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 80061e4:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 80061e6:	69bb      	ldr	r3, [r7, #24]
 80061e8:	2b60      	cmp	r3, #96	; 0x60
 80061ea:	d112      	bne.n	8006212 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80061ec:	4b7a      	ldr	r3, [pc, #488]	; (80063d8 <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 80061ee:	61fb      	str	r3, [r7, #28]
 80061f0:	e00f      	b.n	8006212 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061f8:	d10b      	bne.n	8006212 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 80061fa:	4b76      	ldr	r3, [pc, #472]	; (80063d4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80061fc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006200:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006204:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 8006206:	69bb      	ldr	r3, [r7, #24]
 8006208:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800620c:	d101      	bne.n	8006212 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 800620e:	4b72      	ldr	r3, [pc, #456]	; (80063d8 <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 8006210:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 8006212:	69fb      	ldr	r3, [r7, #28]
 8006214:	2b00      	cmp	r3, #0
 8006216:	f040 80d6 	bne.w	80063c6 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
  {
    pllvco = InputFrequency;
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 800621e:	69bb      	ldr	r3, [r7, #24]
 8006220:	2b40      	cmp	r3, #64	; 0x40
 8006222:	d003      	beq.n	800622c <RCCEx_GetSAIxPeriphCLKFreq+0x70>
 8006224:	69bb      	ldr	r3, [r7, #24]
 8006226:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800622a:	d13b      	bne.n	80062a4 <RCCEx_GetSAIxPeriphCLKFreq+0xe8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800622c:	4b69      	ldr	r3, [pc, #420]	; (80063d4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006234:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006238:	f040 80c4 	bne.w	80063c4 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
 800623c:	4b65      	ldr	r3, [pc, #404]	; (80063d4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800623e:	68db      	ldr	r3, [r3, #12]
 8006240:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006244:	2b00      	cmp	r3, #0
 8006246:	f000 80bd 	beq.w	80063c4 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800624a:	4b62      	ldr	r3, [pc, #392]	; (80063d4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800624c:	68db      	ldr	r3, [r3, #12]
 800624e:	091b      	lsrs	r3, r3, #4
 8006250:	f003 030f 	and.w	r3, r3, #15
 8006254:	3301      	adds	r3, #1
 8006256:	693a      	ldr	r2, [r7, #16]
 8006258:	fbb2 f3f3 	udiv	r3, r2, r3
 800625c:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800625e:	4b5d      	ldr	r3, [pc, #372]	; (80063d4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006260:	68db      	ldr	r3, [r3, #12]
 8006262:	0a1b      	lsrs	r3, r3, #8
 8006264:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006268:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 800626a:	4b5a      	ldr	r3, [pc, #360]	; (80063d4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800626c:	68db      	ldr	r3, [r3, #12]
 800626e:	0edb      	lsrs	r3, r3, #27
 8006270:	f003 031f 	and.w	r3, r3, #31
 8006274:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8006276:	697b      	ldr	r3, [r7, #20]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d10a      	bne.n	8006292 <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 800627c:	4b55      	ldr	r3, [pc, #340]	; (80063d4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800627e:	68db      	ldr	r3, [r3, #12]
 8006280:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006284:	2b00      	cmp	r3, #0
 8006286:	d002      	beq.n	800628e <RCCEx_GetSAIxPeriphCLKFreq+0xd2>
          {
            pllp = 17U;
 8006288:	2311      	movs	r3, #17
 800628a:	617b      	str	r3, [r7, #20]
 800628c:	e001      	b.n	8006292 <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
          }
          else
          {
            pllp = 7U;
 800628e:	2307      	movs	r3, #7
 8006290:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8006292:	693b      	ldr	r3, [r7, #16]
 8006294:	68fa      	ldr	r2, [r7, #12]
 8006296:	fb03 f202 	mul.w	r2, r3, r2
 800629a:	697b      	ldr	r3, [r7, #20]
 800629c:	fbb2 f3f3 	udiv	r3, r2, r3
 80062a0:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 80062a2:	e08f      	b.n	80063c4 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 80062a4:	69bb      	ldr	r3, [r7, #24]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d13a      	bne.n	8006320 <RCCEx_GetSAIxPeriphCLKFreq+0x164>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 80062aa:	4b4a      	ldr	r3, [pc, #296]	; (80063d4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80062b2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80062b6:	f040 8086 	bne.w	80063c6 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 80062ba:	4b46      	ldr	r3, [pc, #280]	; (80063d4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80062bc:	691b      	ldr	r3, [r3, #16]
 80062be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d07f      	beq.n	80063c6 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 80062c6:	4b43      	ldr	r3, [pc, #268]	; (80063d4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80062c8:	691b      	ldr	r3, [r3, #16]
 80062ca:	091b      	lsrs	r3, r3, #4
 80062cc:	f003 030f 	and.w	r3, r3, #15
 80062d0:	3301      	adds	r3, #1
 80062d2:	693a      	ldr	r2, [r7, #16]
 80062d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80062d8:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80062da:	4b3e      	ldr	r3, [pc, #248]	; (80063d4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80062dc:	691b      	ldr	r3, [r3, #16]
 80062de:	0a1b      	lsrs	r3, r3, #8
 80062e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80062e4:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 80062e6:	4b3b      	ldr	r3, [pc, #236]	; (80063d4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80062e8:	691b      	ldr	r3, [r3, #16]
 80062ea:	0edb      	lsrs	r3, r3, #27
 80062ec:	f003 031f 	and.w	r3, r3, #31
 80062f0:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 80062f2:	697b      	ldr	r3, [r7, #20]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d10a      	bne.n	800630e <RCCEx_GetSAIxPeriphCLKFreq+0x152>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 80062f8:	4b36      	ldr	r3, [pc, #216]	; (80063d4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80062fa:	691b      	ldr	r3, [r3, #16]
 80062fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006300:	2b00      	cmp	r3, #0
 8006302:	d002      	beq.n	800630a <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
          {
            pllp = 17U;
 8006304:	2311      	movs	r3, #17
 8006306:	617b      	str	r3, [r7, #20]
 8006308:	e001      	b.n	800630e <RCCEx_GetSAIxPeriphCLKFreq+0x152>
          }
          else
          {
            pllp = 7U;
 800630a:	2307      	movs	r3, #7
 800630c:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800630e:	693b      	ldr	r3, [r7, #16]
 8006310:	68fa      	ldr	r2, [r7, #12]
 8006312:	fb03 f202 	mul.w	r2, r3, r2
 8006316:	697b      	ldr	r3, [r7, #20]
 8006318:	fbb2 f3f3 	udiv	r3, r2, r3
 800631c:	61fb      	str	r3, [r7, #28]
 800631e:	e052      	b.n	80063c6 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      }
    }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    else if((srcclk == RCC_SAI1CLKSOURCE_HSI) || (srcclk == RCC_SAI2CLKSOURCE_HSI))
 8006320:	69bb      	ldr	r3, [r7, #24]
 8006322:	2b80      	cmp	r3, #128	; 0x80
 8006324:	d003      	beq.n	800632e <RCCEx_GetSAIxPeriphCLKFreq+0x172>
 8006326:	69bb      	ldr	r3, [r7, #24]
 8006328:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800632c:	d109      	bne.n	8006342 <RCCEx_GetSAIxPeriphCLKFreq+0x186>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800632e:	4b29      	ldr	r3, [pc, #164]	; (80063d4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006336:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800633a:	d144      	bne.n	80063c6 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
        frequency = HSI_VALUE;
 800633c:	4b27      	ldr	r3, [pc, #156]	; (80063dc <RCCEx_GetSAIxPeriphCLKFreq+0x220>)
 800633e:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006340:	e041      	b.n	80063c6 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 8006342:	69bb      	ldr	r3, [r7, #24]
 8006344:	2b20      	cmp	r3, #32
 8006346:	d003      	beq.n	8006350 <RCCEx_GetSAIxPeriphCLKFreq+0x194>
 8006348:	69bb      	ldr	r3, [r7, #24]
 800634a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800634e:	d13a      	bne.n	80063c6 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 8006350:	4b20      	ldr	r3, [pc, #128]	; (80063d4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006358:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800635c:	d133      	bne.n	80063c6 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 800635e:	4b1d      	ldr	r3, [pc, #116]	; (80063d4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006360:	695b      	ldr	r3, [r3, #20]
 8006362:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006366:	2b00      	cmp	r3, #0
 8006368:	d02d      	beq.n	80063c6 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
 800636a:	4b1a      	ldr	r3, [pc, #104]	; (80063d4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800636c:	695b      	ldr	r3, [r3, #20]
 800636e:	091b      	lsrs	r3, r3, #4
 8006370:	f003 030f 	and.w	r3, r3, #15
 8006374:	3301      	adds	r3, #1
 8006376:	693a      	ldr	r2, [r7, #16]
 8006378:	fbb2 f3f3 	udiv	r3, r2, r3
 800637c:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 800637e:	4b15      	ldr	r3, [pc, #84]	; (80063d4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006380:	695b      	ldr	r3, [r3, #20]
 8006382:	0a1b      	lsrs	r3, r3, #8
 8006384:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006388:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
 800638a:	4b12      	ldr	r3, [pc, #72]	; (80063d4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800638c:	695b      	ldr	r3, [r3, #20]
 800638e:	0edb      	lsrs	r3, r3, #27
 8006390:	f003 031f 	and.w	r3, r3, #31
 8006394:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8006396:	697b      	ldr	r3, [r7, #20]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d10a      	bne.n	80063b2 <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 800639c:	4b0d      	ldr	r3, [pc, #52]	; (80063d4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800639e:	695b      	ldr	r3, [r3, #20]
 80063a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d002      	beq.n	80063ae <RCCEx_GetSAIxPeriphCLKFreq+0x1f2>
          {
            pllp = 17U;
 80063a8:	2311      	movs	r3, #17
 80063aa:	617b      	str	r3, [r7, #20]
 80063ac:	e001      	b.n	80063b2 <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
          }
          else
          {
            pllp = 7U;
 80063ae:	2307      	movs	r3, #7
 80063b0:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 80063b2:	693b      	ldr	r3, [r7, #16]
 80063b4:	68fa      	ldr	r2, [r7, #12]
 80063b6:	fb03 f202 	mul.w	r2, r3, r2
 80063ba:	697b      	ldr	r3, [r7, #20]
 80063bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80063c0:	61fb      	str	r3, [r7, #28]
 80063c2:	e000      	b.n	80063c6 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 80063c4:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 80063c6:	69fb      	ldr	r3, [r7, #28]
}
 80063c8:	4618      	mov	r0, r3
 80063ca:	3724      	adds	r7, #36	; 0x24
 80063cc:	46bd      	mov	sp, r7
 80063ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d2:	4770      	bx	lr
 80063d4:	40021000 	.word	0x40021000
 80063d8:	001fff68 	.word	0x001fff68
 80063dc:	00f42400 	.word	0x00f42400

080063e0 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b08a      	sub	sp, #40	; 0x28
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;
#endif

  /* Check the SD handle allocation */
  if(hsd == NULL)
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d101      	bne.n	80063f2 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80063ee:	2301      	movs	r3, #1
 80063f0:	e078      	b.n	80064e4 <HAL_SD_Init+0x104>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80063f8:	b2db      	uxtb	r3, r3
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d105      	bne.n	800640a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	2200      	movs	r2, #0
 8006402:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8006404:	6878      	ldr	r0, [r7, #4]
 8006406:	f7fa fdc1 	bl	8000f8c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	2203      	movs	r2, #3
 800640e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8006412:	6878      	ldr	r0, [r7, #4]
 8006414:	f000 f86a 	bl	80064ec <HAL_SD_InitCard>
 8006418:	4603      	mov	r3, r0
 800641a:	2b00      	cmp	r3, #0
 800641c:	d001      	beq.n	8006422 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800641e:	2301      	movs	r3, #1
 8006420:	e060      	b.n	80064e4 <HAL_SD_Init+0x104>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8006422:	f107 0308 	add.w	r3, r7, #8
 8006426:	4619      	mov	r1, r3
 8006428:	6878      	ldr	r0, [r7, #4]
 800642a:	f000 fdb5 	bl	8006f98 <HAL_SD_GetCardStatus>
 800642e:	4603      	mov	r3, r0
 8006430:	2b00      	cmp	r3, #0
 8006432:	d001      	beq.n	8006438 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 8006434:	2301      	movs	r3, #1
 8006436:	e055      	b.n	80064e4 <HAL_SD_Init+0x104>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8006438:	7e3b      	ldrb	r3, [r7, #24]
 800643a:	b2db      	uxtb	r3, r3
 800643c:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800643e:	7e7b      	ldrb	r3, [r7, #25]
 8006440:	b2db      	uxtb	r3, r3
 8006442:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006448:	2b01      	cmp	r3, #1
 800644a:	d10a      	bne.n	8006462 <HAL_SD_Init+0x82>
 800644c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800644e:	2b00      	cmp	r3, #0
 8006450:	d102      	bne.n	8006458 <HAL_SD_Init+0x78>
 8006452:	6a3b      	ldr	r3, [r7, #32]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d004      	beq.n	8006462 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800645e:	65da      	str	r2, [r3, #92]	; 0x5c
 8006460:	e00b      	b.n	800647a <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006466:	2b01      	cmp	r3, #1
 8006468:	d104      	bne.n	8006474 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006470:	65da      	str	r2, [r3, #92]	; 0x5c
 8006472:	e002      	b.n	800647a <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2200      	movs	r2, #0
 8006478:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }
  /* Configure the bus wide */
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	68db      	ldr	r3, [r3, #12]
 800647e:	4619      	mov	r1, r3
 8006480:	6878      	ldr	r0, [r7, #4]
 8006482:	f000 fe6b 	bl	800715c <HAL_SD_ConfigWideBusOperation>
 8006486:	4603      	mov	r3, r0
 8006488:	2b00      	cmp	r3, #0
 800648a:	d001      	beq.n	8006490 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 800648c:	2301      	movs	r3, #1
 800648e:	e029      	b.n	80064e4 <HAL_SD_Init+0x104>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8006490:	f7fa ff2a 	bl	80012e8 <HAL_GetTick>
 8006494:	61f8      	str	r0, [r7, #28]
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8006496:	e014      	b.n	80064c2 <HAL_SD_Init+0xe2>
  {
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
 8006498:	f7fa ff26 	bl	80012e8 <HAL_GetTick>
 800649c:	4602      	mov	r2, r0
 800649e:	69fb      	ldr	r3, [r7, #28]
 80064a0:	1ad3      	subs	r3, r2, r3
 80064a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064a6:	d10c      	bne.n	80064c2 <HAL_SD_Init+0xe2>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80064ae:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2201      	movs	r2, #1
 80064b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2200      	movs	r2, #0
 80064bc:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 80064be:	2303      	movs	r3, #3
 80064c0:	e010      	b.n	80064e4 <HAL_SD_Init+0x104>
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 80064c2:	6878      	ldr	r0, [r7, #4]
 80064c4:	f000 ff5e 	bl	8007384 <HAL_SD_GetCardState>
 80064c8:	4603      	mov	r3, r0
 80064ca:	2b04      	cmp	r3, #4
 80064cc:	d1e4      	bne.n	8006498 <HAL_SD_Init+0xb8>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	2200      	movs	r2, #0
 80064d2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2200      	movs	r2, #0
 80064d8:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2201      	movs	r2, #1
 80064de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80064e2:	2300      	movs	r3, #0
}
 80064e4:	4618      	mov	r0, r3
 80064e6:	3728      	adds	r7, #40	; 0x28
 80064e8:	46bd      	mov	sp, r7
 80064ea:	bd80      	pop	{r7, pc}

080064ec <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80064ec:	b5b0      	push	{r4, r5, r7, lr}
 80064ee:	b08e      	sub	sp, #56	; 0x38
 80064f0:	af04      	add	r7, sp, #16
 80064f2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80064f4:	2300      	movs	r3, #0
 80064f6:	60bb      	str	r3, [r7, #8]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80064f8:	2300      	movs	r3, #0
 80064fa:	60fb      	str	r3, [r7, #12]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80064fc:	2300      	movs	r3, #0
 80064fe:	613b      	str	r3, [r7, #16]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8006500:	2300      	movs	r3, #0
 8006502:	617b      	str	r3, [r7, #20]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 8006504:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8006508:	f7fe fd50 	bl	8004fac <HAL_RCCEx_GetPeriphCLKFreq>
 800650c:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 800650e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006510:	2b00      	cmp	r3, #0
 8006512:	d109      	bne.n	8006528 <HAL_SD_InitCard+0x3c>
  {
      hsd->State = HAL_SD_STATE_READY;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2201      	movs	r2, #1
 8006518:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006522:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8006524:	2301      	movs	r3, #1
 8006526:	e079      	b.n	800661c <HAL_SD_InitCard+0x130>
  }
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockDiv = ((sdmmc_clk / SD_INIT_FREQ) - 2U);
#else
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8006528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800652a:	0a1b      	lsrs	r3, r3, #8
 800652c:	4a3d      	ldr	r2, [pc, #244]	; (8006624 <HAL_SD_InitCard+0x138>)
 800652e:	fba2 2303 	umull	r2, r3, r2, r3
 8006532:	091b      	lsrs	r3, r3, #4
 8006534:	61bb      	str	r3, [r7, #24]
#endif

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  Init.Transceiver = hsd->Init.Transceiver;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	699b      	ldr	r3, [r3, #24]
 800653a:	61fb      	str	r3, [r7, #28]
  if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	699b      	ldr	r3, [r3, #24]
 8006540:	2b01      	cmp	r3, #1
 8006542:	d107      	bne.n	8006554 <HAL_SD_InitCard+0x68>
  {
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	681a      	ldr	r2, [r3, #0]
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f042 0210 	orr.w	r2, r2, #16
 8006552:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681d      	ldr	r5, [r3, #0]
 8006558:	466c      	mov	r4, sp
 800655a:	f107 0314 	add.w	r3, r7, #20
 800655e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006562:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006566:	f107 0308 	add.w	r3, r7, #8
 800656a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800656c:	4628      	mov	r0, r5
 800656e:	f001 fefd 	bl	800836c <SDMMC_Init>
  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	4618      	mov	r0, r3
 8006578:	f001 ff40 	bl	80083fc <SDMMC_PowerState_ON>
  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  sdmmc_clk = sdmmc_clk/(Init.ClockDiv + 2U);
#else
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
 800657c:	69bb      	ldr	r3, [r7, #24]
 800657e:	005b      	lsls	r3, r3, #1
 8006580:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006582:	fbb2 f3f3 	udiv	r3, r2, r3
 8006586:	627b      	str	r3, [r7, #36]	; 0x24
#endif
  HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 8006588:	4a27      	ldr	r2, [pc, #156]	; (8006628 <HAL_SD_InitCard+0x13c>)
 800658a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800658c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006590:	3301      	adds	r3, #1
 8006592:	4618      	mov	r0, r3
 8006594:	f7fa feb4 	bl	8001300 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8006598:	6878      	ldr	r0, [r7, #4]
 800659a:	f000 ffd3 	bl	8007544 <SD_PowerON>
 800659e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80065a0:	6a3b      	ldr	r3, [r7, #32]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d00b      	beq.n	80065be <HAL_SD_InitCard+0xd2>
  {
    hsd->State = HAL_SD_STATE_READY;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	2201      	movs	r2, #1
 80065aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80065b2:	6a3b      	ldr	r3, [r7, #32]
 80065b4:	431a      	orrs	r2, r3
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80065ba:	2301      	movs	r3, #1
 80065bc:	e02e      	b.n	800661c <HAL_SD_InitCard+0x130>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80065be:	6878      	ldr	r0, [r7, #4]
 80065c0:	f000 ff00 	bl	80073c4 <SD_InitCard>
 80065c4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80065c6:	6a3b      	ldr	r3, [r7, #32]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d00b      	beq.n	80065e4 <HAL_SD_InitCard+0xf8>
  {
    hsd->State = HAL_SD_STATE_READY;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2201      	movs	r2, #1
 80065d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80065d8:	6a3b      	ldr	r3, [r7, #32]
 80065da:	431a      	orrs	r2, r3
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80065e0:	2301      	movs	r3, #1
 80065e2:	e01b      	b.n	800661c <HAL_SD_InitCard+0x130>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80065ec:	4618      	mov	r0, r3
 80065ee:	f001 ff9b 	bl	8008528 <SDMMC_CmdBlockLength>
 80065f2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80065f4:	6a3b      	ldr	r3, [r7, #32]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d00f      	beq.n	800661a <HAL_SD_InitCard+0x12e>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	4a0b      	ldr	r2, [pc, #44]	; (800662c <HAL_SD_InitCard+0x140>)
 8006600:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006606:	6a3b      	ldr	r3, [r7, #32]
 8006608:	431a      	orrs	r2, r3
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	2201      	movs	r2, #1
 8006612:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006616:	2301      	movs	r3, #1
 8006618:	e000      	b.n	800661c <HAL_SD_InitCard+0x130>
  }

  return HAL_OK;
 800661a:	2300      	movs	r3, #0
}
 800661c:	4618      	mov	r0, r3
 800661e:	3728      	adds	r7, #40	; 0x28
 8006620:	46bd      	mov	sp, r7
 8006622:	bdb0      	pop	{r4, r5, r7, pc}
 8006624:	014f8b59 	.word	0x014f8b59
 8006628:	00012110 	.word	0x00012110
 800662c:	1fe00fff 	.word	0x1fe00fff

08006630 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd Block Address from where data is to be read
  * @param  NumberOfBlocks Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8006630:	b580      	push	{r7, lr}
 8006632:	b08c      	sub	sp, #48	; 0x30
 8006634:	af00      	add	r7, sp, #0
 8006636:	60f8      	str	r0, [r7, #12]
 8006638:	60b9      	str	r1, [r7, #8]
 800663a:	607a      	str	r2, [r7, #4]
 800663c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8006642:	68bb      	ldr	r3, [r7, #8]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d107      	bne.n	8006658 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800664c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006654:	2301      	movs	r3, #1
 8006656:	e08d      	b.n	8006774 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800665e:	b2db      	uxtb	r3, r3
 8006660:	2b01      	cmp	r3, #1
 8006662:	f040 8086 	bne.w	8006772 <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	2200      	movs	r2, #0
 800666a:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800666c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	441a      	add	r2, r3
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006676:	429a      	cmp	r2, r3
 8006678:	d907      	bls.n	800668a <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800667e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8006686:	2301      	movs	r3, #1
 8006688:	e074      	b.n	8006774 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	2203      	movs	r2, #3
 800668e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	2200      	movs	r2, #0
 8006698:	62da      	str	r2, [r3, #44]	; 0x2c
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
#else
      hsd->pRxBuffPtr = pData;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	68ba      	ldr	r2, [r7, #8]
 800669e:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	025a      	lsls	r2, r3, #9
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066ac:	2b01      	cmp	r3, #1
 80066ae:	d002      	beq.n	80066b6 <HAL_SD_ReadBlocks_DMA+0x86>
      {
        add *= 512U;
 80066b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066b2:	025b      	lsls	r3, r3, #9
 80066b4:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80066b6:	f04f 33ff 	mov.w	r3, #4294967295
 80066ba:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	025b      	lsls	r3, r3, #9
 80066c0:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80066c2:	2390      	movs	r3, #144	; 0x90
 80066c4:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80066c6:	2302      	movs	r3, #2
 80066c8:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80066ca:	2300      	movs	r3, #0
 80066cc:	623b      	str	r3, [r7, #32]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      config.DPSM          = SDMMC_DPSM_DISABLE;
 80066ce:	2300      	movs	r3, #0
 80066d0:	627b      	str	r3, [r7, #36]	; 0x24
#else
      config.DPSM          = SDMMC_DPSM_ENABLE;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f107 0210 	add.w	r2, r7, #16
 80066da:	4611      	mov	r1, r2
 80066dc:	4618      	mov	r0, r3
 80066de:	f001 fef7 	bl	80084d0 <SDMMC_ConfigData>

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)

      __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	68da      	ldr	r2, [r3, #12]
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80066f0:	60da      	str	r2, [r3, #12]
      hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	68ba      	ldr	r2, [r7, #8]
 80066f8:	659a      	str	r2, [r3, #88]	; 0x58
      hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	2201      	movs	r2, #1
 8006700:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	2b01      	cmp	r3, #1
 8006706:	d90a      	bls.n	800671e <HAL_SD_ReadBlocks_DMA+0xee>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	2282      	movs	r2, #130	; 0x82
 800670c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006714:	4618      	mov	r0, r3
 8006716:	f001 ff4d 	bl	80085b4 <SDMMC_CmdReadMultiBlock>
 800671a:	62f8      	str	r0, [r7, #44]	; 0x2c
 800671c:	e009      	b.n	8006732 <HAL_SD_ReadBlocks_DMA+0x102>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	2281      	movs	r2, #129	; 0x81
 8006722:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800672a:	4618      	mov	r0, r3
 800672c:	f001 ff1f 	bl	800856e <SDMMC_CmdReadSingleBlock>
 8006730:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8006732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006734:	2b00      	cmp	r3, #0
 8006736:	d012      	beq.n	800675e <HAL_SD_ReadBlocks_DMA+0x12e>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	4a0f      	ldr	r2, [pc, #60]	; (800677c <HAL_SD_ReadBlocks_DMA+0x14c>)
 800673e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006746:	431a      	orrs	r2, r3
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	2201      	movs	r2, #1
 8006750:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	2200      	movs	r2, #0
 8006758:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800675a:	2301      	movs	r3, #1
 800675c:	e00a      	b.n	8006774 <HAL_SD_ReadBlocks_DMA+0x144>
      }

      /* Enable transfer interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800676c:	63da      	str	r2, [r3, #60]	; 0x3c

      return HAL_OK;
 800676e:	2300      	movs	r3, #0
 8006770:	e000      	b.n	8006774 <HAL_SD_ReadBlocks_DMA+0x144>
    }
#endif
  }
  else
  {
    return HAL_BUSY;
 8006772:	2302      	movs	r3, #2
  }
}
 8006774:	4618      	mov	r0, r3
 8006776:	3730      	adds	r7, #48	; 0x30
 8006778:	46bd      	mov	sp, r7
 800677a:	bd80      	pop	{r7, pc}
 800677c:	1fe00fff 	.word	0x1fe00fff

08006780 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd Block Address where data will be written
  * @param  NumberOfBlocks Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8006780:	b580      	push	{r7, lr}
 8006782:	b08c      	sub	sp, #48	; 0x30
 8006784:	af00      	add	r7, sp, #0
 8006786:	60f8      	str	r0, [r7, #12]
 8006788:	60b9      	str	r1, [r7, #8]
 800678a:	607a      	str	r2, [r7, #4]
 800678c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8006792:	68bb      	ldr	r3, [r7, #8]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d107      	bne.n	80067a8 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800679c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80067a4:	2301      	movs	r3, #1
 80067a6:	e08d      	b.n	80068c4 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80067ae:	b2db      	uxtb	r3, r3
 80067b0:	2b01      	cmp	r3, #1
 80067b2:	f040 8086 	bne.w	80068c2 <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	2200      	movs	r2, #0
 80067ba:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80067bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	441a      	add	r2, r3
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067c6:	429a      	cmp	r2, r3
 80067c8:	d907      	bls.n	80067da <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067ce:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80067d6:	2301      	movs	r3, #1
 80067d8:	e074      	b.n	80068c4 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	2203      	movs	r2, #3
 80067de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	2200      	movs	r2, #0
 80067e8:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    hsd->pTxBuffPtr = pData;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	68ba      	ldr	r2, [r7, #8]
 80067ee:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	025a      	lsls	r2, r3, #9
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067fc:	2b01      	cmp	r3, #1
 80067fe:	d002      	beq.n	8006806 <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 8006800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006802:	025b      	lsls	r3, r3, #9
 8006804:	62bb      	str	r3, [r7, #40]	; 0x28
    }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006806:	f04f 33ff 	mov.w	r3, #4294967295
 800680a:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	025b      	lsls	r3, r3, #9
 8006810:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8006812:	2390      	movs	r3, #144	; 0x90
 8006814:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8006816:	2300      	movs	r3, #0
 8006818:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800681a:	2300      	movs	r3, #0
 800681c:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800681e:	2300      	movs	r3, #0
 8006820:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f107 0210 	add.w	r2, r7, #16
 800682a:	4611      	mov	r1, r2
 800682c:	4618      	mov	r0, r3
 800682e:	f001 fe4f 	bl	80084d0 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	68da      	ldr	r2, [r3, #12]
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006840:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	68ba      	ldr	r2, [r7, #8]
 8006848:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	2201      	movs	r2, #1
 8006850:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	2b01      	cmp	r3, #1
 8006856:	d90a      	bls.n	800686e <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	22a0      	movs	r2, #160	; 0xa0
 800685c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006864:	4618      	mov	r0, r3
 8006866:	f001 feeb 	bl	8008640 <SDMMC_CmdWriteMultiBlock>
 800686a:	62f8      	str	r0, [r7, #44]	; 0x2c
 800686c:	e009      	b.n	8006882 <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	2290      	movs	r2, #144	; 0x90
 8006872:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800687a:	4618      	mov	r0, r3
 800687c:	f001 febd 	bl	80085fa <SDMMC_CmdWriteSingleBlock>
 8006880:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8006882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006884:	2b00      	cmp	r3, #0
 8006886:	d012      	beq.n	80068ae <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	4a0f      	ldr	r2, [pc, #60]	; (80068cc <HAL_SD_WriteBlocks_DMA+0x14c>)
 800688e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006896:	431a      	orrs	r2, r3
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	2201      	movs	r2, #1
 80068a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	2200      	movs	r2, #0
 80068a8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80068aa:	2301      	movs	r3, #1
 80068ac:	e00a      	b.n	80068c4 <HAL_SD_WriteBlocks_DMA+0x144>

      /* Enable SD Error interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));
#else
      /* Enable transfer interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 80068bc:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

      return HAL_OK;
 80068be:	2300      	movs	r3, #0
 80068c0:	e000      	b.n	80068c4 <HAL_SD_WriteBlocks_DMA+0x144>
    }
#endif
  }
  else
  {
    return HAL_BUSY;
 80068c2:	2302      	movs	r3, #2
  }
}
 80068c4:	4618      	mov	r0, r3
 80068c6:	3730      	adds	r7, #48	; 0x30
 80068c8:	46bd      	mov	sp, r7
 80068ca:	bd80      	pop	{r7, pc}
 80068cc:	1fe00fff 	.word	0x1fe00fff

080068d0 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b084      	sub	sp, #16
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068dc:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d008      	beq.n	80068fe <HAL_SD_IRQHandler+0x2e>
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	f003 0308 	and.w	r3, r3, #8
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d003      	beq.n	80068fe <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 80068f6:	6878      	ldr	r0, [r7, #4]
 80068f8:	f001 f98e 	bl	8007c18 <SD_Read_IT>
 80068fc:	e199      	b.n	8006c32 <HAL_SD_IRQHandler+0x362>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006904:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006908:	2b00      	cmp	r3, #0
 800690a:	f000 80ae 	beq.w	8006a6a <HAL_SD_IRQHandler+0x19a>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006916:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT |\
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800691e:	687a      	ldr	r2, [r7, #4]
 8006920:	6812      	ldr	r2, [r2, #0]
 8006922:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 8006926:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800692a:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800693a:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	68da      	ldr	r2, [r3, #12]
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800694a:	60da      	str	r2, [r3, #12]
#else
    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    if((context & SD_CONTEXT_IT) != 0U)
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	f003 0308 	and.w	r3, r3, #8
 8006952:	2b00      	cmp	r3, #0
 8006954:	d038      	beq.n	80069c8 <HAL_SD_IRQHandler+0xf8>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	f003 0302 	and.w	r3, r3, #2
 800695c:	2b00      	cmp	r3, #0
 800695e:	d104      	bne.n	800696a <HAL_SD_IRQHandler+0x9a>
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	f003 0320 	and.w	r3, r3, #32
 8006966:	2b00      	cmp	r3, #0
 8006968:	d011      	beq.n	800698e <HAL_SD_IRQHandler+0xbe>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	4618      	mov	r0, r3
 8006970:	f001 fe8a 	bl	8008688 <SDMMC_CmdStopTransfer>
 8006974:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8006976:	68bb      	ldr	r3, [r7, #8]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d008      	beq.n	800698e <HAL_SD_IRQHandler+0xbe>
        {
          hsd->ErrorCode |= errorstate;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006980:	68bb      	ldr	r3, [r7, #8]
 8006982:	431a      	orrs	r2, r3
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8006988:	6878      	ldr	r0, [r7, #4]
 800698a:	f000 f957 	bl	8006c3c <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	4a90      	ldr	r2, [pc, #576]	; (8006bd4 <HAL_SD_IRQHandler+0x304>)
 8006994:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	2201      	movs	r2, #1
 800699a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	2200      	movs	r2, #0
 80069a2:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	f003 0301 	and.w	r3, r3, #1
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d104      	bne.n	80069b8 <HAL_SD_IRQHandler+0xe8>
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	f003 0302 	and.w	r3, r3, #2
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d003      	beq.n	80069c0 <HAL_SD_IRQHandler+0xf0>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 80069b8:	6878      	ldr	r0, [r7, #4]
 80069ba:	f002 fb51 	bl	8009060 <HAL_SD_RxCpltCallback>
 80069be:	e138      	b.n	8006c32 <HAL_SD_IRQHandler+0x362>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 80069c0:	6878      	ldr	r0, [r7, #4]
 80069c2:	f002 fb43 	bl	800904c <HAL_SD_TxCpltCallback>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else
  {
    /* Nothing to do */
  }
}
 80069c6:	e134      	b.n	8006c32 <HAL_SD_IRQHandler+0x362>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	f000 812f 	beq.w	8006c32 <HAL_SD_IRQHandler+0x362>
      hsd->Instance->DLEN = 0;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	2200      	movs	r2, #0
 80069da:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	2200      	movs	r2, #0
 80069e2:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	2200      	movs	r2, #0
 80069ea:	651a      	str	r2, [r3, #80]	; 0x50
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	f003 0302 	and.w	r3, r3, #2
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d104      	bne.n	8006a00 <HAL_SD_IRQHandler+0x130>
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	f003 0320 	and.w	r3, r3, #32
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d011      	beq.n	8006a24 <HAL_SD_IRQHandler+0x154>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	4618      	mov	r0, r3
 8006a06:	f001 fe3f 	bl	8008688 <SDMMC_CmdStopTransfer>
 8006a0a:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8006a0c:	68bb      	ldr	r3, [r7, #8]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d008      	beq.n	8006a24 <HAL_SD_IRQHandler+0x154>
          hsd->ErrorCode |= errorstate;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a16:	68bb      	ldr	r3, [r7, #8]
 8006a18:	431a      	orrs	r2, r3
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8006a1e:	6878      	ldr	r0, [r7, #4]
 8006a20:	f000 f90c 	bl	8006c3c <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2201      	movs	r2, #1
 8006a28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2200      	movs	r2, #0
 8006a30:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	f003 0310 	and.w	r3, r3, #16
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d104      	bne.n	8006a46 <HAL_SD_IRQHandler+0x176>
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	f003 0320 	and.w	r3, r3, #32
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d002      	beq.n	8006a4c <HAL_SD_IRQHandler+0x17c>
        HAL_SD_TxCpltCallback(hsd);
 8006a46:	6878      	ldr	r0, [r7, #4]
 8006a48:	f002 fb00 	bl	800904c <HAL_SD_TxCpltCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	f003 0301 	and.w	r3, r3, #1
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d105      	bne.n	8006a62 <HAL_SD_IRQHandler+0x192>
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	f003 0302 	and.w	r3, r3, #2
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	f000 80e8 	beq.w	8006c32 <HAL_SD_IRQHandler+0x362>
        HAL_SD_RxCpltCallback(hsd);
 8006a62:	6878      	ldr	r0, [r7, #4]
 8006a64:	f002 fafc 	bl	8009060 <HAL_SD_RxCpltCallback>
}
 8006a68:	e0e3      	b.n	8006c32 <HAL_SD_IRQHandler+0x362>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d008      	beq.n	8006a8a <HAL_SD_IRQHandler+0x1ba>
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	f003 0308 	and.w	r3, r3, #8
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d003      	beq.n	8006a8a <HAL_SD_IRQHandler+0x1ba>
    SD_Write_IT(hsd);
 8006a82:	6878      	ldr	r0, [r7, #4]
 8006a84:	f001 f919 	bl	8007cba <SD_Write_IT>
 8006a88:	e0d3      	b.n	8006c32 <HAL_SD_IRQHandler+0x362>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a90:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	f000 809f 	beq.w	8006bd8 <HAL_SD_IRQHandler+0x308>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006aa0:	f003 0302 	and.w	r3, r3, #2
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d005      	beq.n	8006ab4 <HAL_SD_IRQHandler+0x1e4>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006aac:	f043 0202 	orr.w	r2, r3, #2
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006aba:	f003 0308 	and.w	r3, r3, #8
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d005      	beq.n	8006ace <HAL_SD_IRQHandler+0x1fe>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ac6:	f043 0208 	orr.w	r2, r3, #8
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ad4:	f003 0320 	and.w	r3, r3, #32
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d005      	beq.n	8006ae8 <HAL_SD_IRQHandler+0x218>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ae0:	f043 0220 	orr.w	r2, r3, #32
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006aee:	f003 0310 	and.w	r3, r3, #16
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d005      	beq.n	8006b02 <HAL_SD_IRQHandler+0x232>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006afa:	f043 0210 	orr.w	r2, r3, #16
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	4a33      	ldr	r2, [pc, #204]	; (8006bd4 <HAL_SD_IRQHandler+0x304>)
 8006b08:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8006b18:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	68da      	ldr	r2, [r3, #12]
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b28:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006b38:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	68da      	ldr	r2, [r3, #12]
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006b48:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	4618      	mov	r0, r3
 8006b50:	f001 fd9a 	bl	8008688 <SDMMC_CmdStopTransfer>
 8006b54:	4602      	mov	r2, r0
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b5a:	431a      	orrs	r2, r3
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	68da      	ldr	r2, [r3, #12]
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006b6e:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006b78:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	f003 0308 	and.w	r3, r3, #8
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d00a      	beq.n	8006b9a <HAL_SD_IRQHandler+0x2ca>
      hsd->State = HAL_SD_STATE_READY;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2201      	movs	r2, #1
 8006b88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2200      	movs	r2, #0
 8006b90:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8006b92:	6878      	ldr	r0, [r7, #4]
 8006b94:	f000 f852 	bl	8006c3c <HAL_SD_ErrorCallback>
}
 8006b98:	e04b      	b.n	8006c32 <HAL_SD_IRQHandler+0x362>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d046      	beq.n	8006c32 <HAL_SD_IRQHandler+0x362>
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d042      	beq.n	8006c32 <HAL_SD_IRQHandler+0x362>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8006bba:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2201      	movs	r2, #1
 8006bc8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_ErrorCallback(hsd);
 8006bcc:	6878      	ldr	r0, [r7, #4]
 8006bce:	f000 f835 	bl	8006c3c <HAL_SD_ErrorCallback>
}
 8006bd2:	e02e      	b.n	8006c32 <HAL_SD_IRQHandler+0x362>
 8006bd4:	18000f3a 	.word	0x18000f3a
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d025      	beq.n	8006c32 <HAL_SD_IRQHandler+0x362>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006bee:	639a      	str	r2, [r3, #56]	; 0x38
    if(READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006bf6:	f003 0304 	and.w	r3, r3, #4
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d10c      	bne.n	8006c18 <HAL_SD_IRQHandler+0x348>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	f003 0320 	and.w	r3, r3, #32
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d003      	beq.n	8006c10 <HAL_SD_IRQHandler+0x340>
        HAL_SDEx_Write_DMADoubleBuffer1CpltCallback(hsd);
 8006c08:	6878      	ldr	r0, [r7, #4]
 8006c0a:	f001 f8d4 	bl	8007db6 <HAL_SDEx_Write_DMADoubleBuffer1CpltCallback>
}
 8006c0e:	e010      	b.n	8006c32 <HAL_SD_IRQHandler+0x362>
        HAL_SDEx_Read_DMADoubleBuffer1CpltCallback(hsd);
 8006c10:	6878      	ldr	r0, [r7, #4]
 8006c12:	f001 f8bc 	bl	8007d8e <HAL_SDEx_Read_DMADoubleBuffer1CpltCallback>
}
 8006c16:	e00c      	b.n	8006c32 <HAL_SD_IRQHandler+0x362>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	f003 0320 	and.w	r3, r3, #32
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d003      	beq.n	8006c2a <HAL_SD_IRQHandler+0x35a>
        HAL_SDEx_Write_DMADoubleBuffer0CpltCallback(hsd);
 8006c22:	6878      	ldr	r0, [r7, #4]
 8006c24:	f001 f8bd 	bl	8007da2 <HAL_SDEx_Write_DMADoubleBuffer0CpltCallback>
}
 8006c28:	e003      	b.n	8006c32 <HAL_SD_IRQHandler+0x362>
        HAL_SDEx_Read_DMADoubleBuffer0CpltCallback(hsd);
 8006c2a:	6878      	ldr	r0, [r7, #4]
 8006c2c:	f001 f8a5 	bl	8007d7a <HAL_SDEx_Read_DMADoubleBuffer0CpltCallback>
}
 8006c30:	e7ff      	b.n	8006c32 <HAL_SD_IRQHandler+0x362>
 8006c32:	bf00      	nop
 8006c34:	3710      	adds	r7, #16
 8006c36:	46bd      	mov	sp, r7
 8006c38:	bd80      	pop	{r7, pc}
 8006c3a:	bf00      	nop

08006c3c <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8006c3c:	b480      	push	{r7}
 8006c3e:	b083      	sub	sp, #12
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8006c44:	bf00      	nop
 8006c46:	370c      	adds	r7, #12
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4e:	4770      	bx	lr

08006c50 <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8006c50:	b480      	push	{r7}
 8006c52:	b083      	sub	sp, #12
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
 8006c58:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c5e:	0f9b      	lsrs	r3, r3, #30
 8006c60:	b2da      	uxtb	r2, r3
 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c6a:	0e9b      	lsrs	r3, r3, #26
 8006c6c:	b2db      	uxtb	r3, r3
 8006c6e:	f003 030f 	and.w	r3, r3, #15
 8006c72:	b2da      	uxtb	r2, r3
 8006c74:	683b      	ldr	r3, [r7, #0]
 8006c76:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c7c:	0e1b      	lsrs	r3, r3, #24
 8006c7e:	b2db      	uxtb	r3, r3
 8006c80:	f003 0303 	and.w	r3, r3, #3
 8006c84:	b2da      	uxtb	r2, r3
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c8e:	0c1b      	lsrs	r3, r3, #16
 8006c90:	b2da      	uxtb	r2, r3
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c9a:	0a1b      	lsrs	r3, r3, #8
 8006c9c:	b2da      	uxtb	r2, r3
 8006c9e:	683b      	ldr	r3, [r7, #0]
 8006ca0:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ca6:	b2da      	uxtb	r2, r3
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006cb0:	0d1b      	lsrs	r3, r3, #20
 8006cb2:	b29a      	uxth	r2, r3
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006cbc:	0c1b      	lsrs	r3, r3, #16
 8006cbe:	b2db      	uxtb	r3, r3
 8006cc0:	f003 030f 	and.w	r3, r3, #15
 8006cc4:	b2da      	uxtb	r2, r3
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006cce:	0bdb      	lsrs	r3, r3, #15
 8006cd0:	b2db      	uxtb	r3, r3
 8006cd2:	f003 0301 	and.w	r3, r3, #1
 8006cd6:	b2da      	uxtb	r2, r3
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006ce0:	0b9b      	lsrs	r3, r3, #14
 8006ce2:	b2db      	uxtb	r3, r3
 8006ce4:	f003 0301 	and.w	r3, r3, #1
 8006ce8:	b2da      	uxtb	r2, r3
 8006cea:	683b      	ldr	r3, [r7, #0]
 8006cec:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006cf2:	0b5b      	lsrs	r3, r3, #13
 8006cf4:	b2db      	uxtb	r3, r3
 8006cf6:	f003 0301 	and.w	r3, r3, #1
 8006cfa:	b2da      	uxtb	r2, r3
 8006cfc:	683b      	ldr	r3, [r7, #0]
 8006cfe:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006d04:	0b1b      	lsrs	r3, r3, #12
 8006d06:	b2db      	uxtb	r3, r3
 8006d08:	f003 0301 	and.w	r3, r3, #1
 8006d0c:	b2da      	uxtb	r2, r3
 8006d0e:	683b      	ldr	r3, [r7, #0]
 8006d10:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8006d12:	683b      	ldr	r3, [r7, #0]
 8006d14:	2200      	movs	r2, #0
 8006d16:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d163      	bne.n	8006de8 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006d24:	009a      	lsls	r2, r3, #2
 8006d26:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006d2a:	4013      	ands	r3, r2
 8006d2c:	687a      	ldr	r2, [r7, #4]
 8006d2e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006d30:	0f92      	lsrs	r2, r2, #30
 8006d32:	431a      	orrs	r2, r3
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006d3c:	0edb      	lsrs	r3, r3, #27
 8006d3e:	b2db      	uxtb	r3, r3
 8006d40:	f003 0307 	and.w	r3, r3, #7
 8006d44:	b2da      	uxtb	r2, r3
 8006d46:	683b      	ldr	r3, [r7, #0]
 8006d48:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006d4e:	0e1b      	lsrs	r3, r3, #24
 8006d50:	b2db      	uxtb	r3, r3
 8006d52:	f003 0307 	and.w	r3, r3, #7
 8006d56:	b2da      	uxtb	r2, r3
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006d60:	0d5b      	lsrs	r3, r3, #21
 8006d62:	b2db      	uxtb	r3, r3
 8006d64:	f003 0307 	and.w	r3, r3, #7
 8006d68:	b2da      	uxtb	r2, r3
 8006d6a:	683b      	ldr	r3, [r7, #0]
 8006d6c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006d72:	0c9b      	lsrs	r3, r3, #18
 8006d74:	b2db      	uxtb	r3, r3
 8006d76:	f003 0307 	and.w	r3, r3, #7
 8006d7a:	b2da      	uxtb	r2, r3
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006d84:	0bdb      	lsrs	r3, r3, #15
 8006d86:	b2db      	uxtb	r3, r3
 8006d88:	f003 0307 	and.w	r3, r3, #7
 8006d8c:	b2da      	uxtb	r2, r3
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	691b      	ldr	r3, [r3, #16]
 8006d96:	1c5a      	adds	r2, r3, #1
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	7e1b      	ldrb	r3, [r3, #24]
 8006da0:	b2db      	uxtb	r3, r3
 8006da2:	f003 0307 	and.w	r3, r3, #7
 8006da6:	3302      	adds	r3, #2
 8006da8:	2201      	movs	r2, #1
 8006daa:	fa02 f303 	lsl.w	r3, r2, r3
 8006dae:	687a      	ldr	r2, [r7, #4]
 8006db0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8006db2:	fb03 f202 	mul.w	r2, r3, r2
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8006dba:	683b      	ldr	r3, [r7, #0]
 8006dbc:	7a1b      	ldrb	r3, [r3, #8]
 8006dbe:	b2db      	uxtb	r3, r3
 8006dc0:	f003 030f 	and.w	r3, r3, #15
 8006dc4:	2201      	movs	r2, #1
 8006dc6:	409a      	lsls	r2, r3
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	651a      	str	r2, [r3, #80]	; 0x50

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006dd0:	687a      	ldr	r2, [r7, #4]
 8006dd2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8006dd4:	0a52      	lsrs	r2, r2, #9
 8006dd6:	fb03 f202 	mul.w	r2, r3, r2
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockSize = 512U;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006de4:	659a      	str	r2, [r3, #88]	; 0x58
 8006de6:	e031      	b.n	8006e4c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006dec:	2b01      	cmp	r3, #1
 8006dee:	d11d      	bne.n	8006e2c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006df4:	041b      	lsls	r3, r3, #16
 8006df6:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006dfe:	0c1b      	lsrs	r3, r3, #16
 8006e00:	431a      	orrs	r2, r3
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	691b      	ldr	r3, [r3, #16]
 8006e0a:	3301      	adds	r3, #1
 8006e0c:	029a      	lsls	r2, r3, #10
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 512U;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006e20:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	659a      	str	r2, [r3, #88]	; 0x58
 8006e2a:	e00f      	b.n	8006e4c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	4a58      	ldr	r2, [pc, #352]	; (8006f94 <HAL_SD_GetCardCSD+0x344>)
 8006e32:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e38:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	2201      	movs	r2, #1
 8006e44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006e48:	2301      	movs	r3, #1
 8006e4a:	e09d      	b.n	8006f88 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006e50:	0b9b      	lsrs	r3, r3, #14
 8006e52:	b2db      	uxtb	r3, r3
 8006e54:	f003 0301 	and.w	r3, r3, #1
 8006e58:	b2da      	uxtb	r2, r3
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006e62:	09db      	lsrs	r3, r3, #7
 8006e64:	b2db      	uxtb	r3, r3
 8006e66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e6a:	b2da      	uxtb	r2, r3
 8006e6c:	683b      	ldr	r3, [r7, #0]
 8006e6e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006e74:	b2db      	uxtb	r3, r3
 8006e76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e7a:	b2da      	uxtb	r2, r3
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e84:	0fdb      	lsrs	r3, r3, #31
 8006e86:	b2da      	uxtb	r2, r3
 8006e88:	683b      	ldr	r3, [r7, #0]
 8006e8a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e90:	0f5b      	lsrs	r3, r3, #29
 8006e92:	b2db      	uxtb	r3, r3
 8006e94:	f003 0303 	and.w	r3, r3, #3
 8006e98:	b2da      	uxtb	r2, r3
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ea2:	0e9b      	lsrs	r3, r3, #26
 8006ea4:	b2db      	uxtb	r3, r3
 8006ea6:	f003 0307 	and.w	r3, r3, #7
 8006eaa:	b2da      	uxtb	r2, r3
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006eb4:	0d9b      	lsrs	r3, r3, #22
 8006eb6:	b2db      	uxtb	r3, r3
 8006eb8:	f003 030f 	and.w	r3, r3, #15
 8006ebc:	b2da      	uxtb	r2, r3
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ec6:	0d5b      	lsrs	r3, r3, #21
 8006ec8:	b2db      	uxtb	r3, r3
 8006eca:	f003 0301 	and.w	r3, r3, #1
 8006ece:	b2da      	uxtb	r2, r3
 8006ed0:	683b      	ldr	r3, [r7, #0]
 8006ed2:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	2200      	movs	r2, #0
 8006eda:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ee2:	0c1b      	lsrs	r3, r3, #16
 8006ee4:	b2db      	uxtb	r3, r3
 8006ee6:	f003 0301 	and.w	r3, r3, #1
 8006eea:	b2da      	uxtb	r2, r3
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ef6:	0bdb      	lsrs	r3, r3, #15
 8006ef8:	b2db      	uxtb	r3, r3
 8006efa:	f003 0301 	and.w	r3, r3, #1
 8006efe:	b2da      	uxtb	r2, r3
 8006f00:	683b      	ldr	r3, [r7, #0]
 8006f02:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f0a:	0b9b      	lsrs	r3, r3, #14
 8006f0c:	b2db      	uxtb	r3, r3
 8006f0e:	f003 0301 	and.w	r3, r3, #1
 8006f12:	b2da      	uxtb	r2, r3
 8006f14:	683b      	ldr	r3, [r7, #0]
 8006f16:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f1e:	0b5b      	lsrs	r3, r3, #13
 8006f20:	b2db      	uxtb	r3, r3
 8006f22:	f003 0301 	and.w	r3, r3, #1
 8006f26:	b2da      	uxtb	r2, r3
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f32:	0b1b      	lsrs	r3, r3, #12
 8006f34:	b2db      	uxtb	r3, r3
 8006f36:	f003 0301 	and.w	r3, r3, #1
 8006f3a:	b2da      	uxtb	r2, r3
 8006f3c:	683b      	ldr	r3, [r7, #0]
 8006f3e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f46:	0a9b      	lsrs	r3, r3, #10
 8006f48:	b2db      	uxtb	r3, r3
 8006f4a:	f003 0303 	and.w	r3, r3, #3
 8006f4e:	b2da      	uxtb	r2, r3
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f5a:	0a1b      	lsrs	r3, r3, #8
 8006f5c:	b2db      	uxtb	r3, r3
 8006f5e:	f003 0303 	and.w	r3, r3, #3
 8006f62:	b2da      	uxtb	r2, r3
 8006f64:	683b      	ldr	r3, [r7, #0]
 8006f66:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f6e:	085b      	lsrs	r3, r3, #1
 8006f70:	b2db      	uxtb	r3, r3
 8006f72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f76:	b2da      	uxtb	r2, r3
 8006f78:	683b      	ldr	r3, [r7, #0]
 8006f7a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8006f7e:	683b      	ldr	r3, [r7, #0]
 8006f80:	2201      	movs	r2, #1
 8006f82:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8006f86:	2300      	movs	r3, #0
}
 8006f88:	4618      	mov	r0, r3
 8006f8a:	370c      	adds	r7, #12
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f92:	4770      	bx	lr
 8006f94:	1fe00fff 	.word	0x1fe00fff

08006f98 <HAL_SD_GetCardStatus>:
  * @param  pStatus Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	b094      	sub	sp, #80	; 0x50
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	6078      	str	r0, [r7, #4]
 8006fa0:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  errorstate = SD_SendSDStatus(hsd, sd_status);
 8006fa8:	f107 0308 	add.w	r3, r7, #8
 8006fac:	4619      	mov	r1, r3
 8006fae:	6878      	ldr	r0, [r7, #4]
 8006fb0:	f000 fbd4 	bl	800775c <SD_SendSDStatus>
 8006fb4:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 8006fb6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d011      	beq.n	8006fe0 <HAL_SD_GetCardStatus+0x48>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	4a4f      	ldr	r2, [pc, #316]	; (8007100 <HAL_SD_GetCardStatus+0x168>)
 8006fc2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006fc8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006fca:	431a      	orrs	r2, r3
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2201      	movs	r2, #1
 8006fd4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8006fd8:	2301      	movs	r3, #1
 8006fda:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8006fde:	e070      	b.n	80070c2 <HAL_SD_GetCardStatus+0x12a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8006fe0:	68bb      	ldr	r3, [r7, #8]
 8006fe2:	099b      	lsrs	r3, r3, #6
 8006fe4:	b2db      	uxtb	r3, r3
 8006fe6:	f003 0303 	and.w	r3, r3, #3
 8006fea:	b2da      	uxtb	r2, r3
 8006fec:	683b      	ldr	r3, [r7, #0]
 8006fee:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8006ff0:	68bb      	ldr	r3, [r7, #8]
 8006ff2:	095b      	lsrs	r3, r3, #5
 8006ff4:	b2db      	uxtb	r3, r3
 8006ff6:	f003 0301 	and.w	r3, r3, #1
 8006ffa:	b2da      	uxtb	r2, r3
 8006ffc:	683b      	ldr	r3, [r7, #0]
 8006ffe:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8007000:	68bb      	ldr	r3, [r7, #8]
 8007002:	0a1b      	lsrs	r3, r3, #8
 8007004:	b29b      	uxth	r3, r3
 8007006:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800700a:	b29a      	uxth	r2, r3
 800700c:	68bb      	ldr	r3, [r7, #8]
 800700e:	0e1b      	lsrs	r3, r3, #24
 8007010:	b29b      	uxth	r3, r3
 8007012:	4313      	orrs	r3, r2
 8007014:	b29a      	uxth	r2, r3
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	061a      	lsls	r2, r3, #24
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	021b      	lsls	r3, r3, #8
 8007022:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007026:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	0a1b      	lsrs	r3, r3, #8
 800702c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8007030:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	0e1b      	lsrs	r3, r3, #24
 8007036:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800703c:	693b      	ldr	r3, [r7, #16]
 800703e:	b2da      	uxtb	r2, r3
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8007044:	693b      	ldr	r3, [r7, #16]
 8007046:	0a1b      	lsrs	r3, r3, #8
 8007048:	b2da      	uxtb	r2, r3
 800704a:	683b      	ldr	r3, [r7, #0]
 800704c:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800704e:	693b      	ldr	r3, [r7, #16]
 8007050:	0d1b      	lsrs	r3, r3, #20
 8007052:	b2db      	uxtb	r3, r3
 8007054:	f003 030f 	and.w	r3, r3, #15
 8007058:	b2da      	uxtb	r2, r3
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800705e:	693b      	ldr	r3, [r7, #16]
 8007060:	0c1b      	lsrs	r3, r3, #16
 8007062:	b29b      	uxth	r3, r3
 8007064:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007068:	b29a      	uxth	r2, r3
 800706a:	697b      	ldr	r3, [r7, #20]
 800706c:	b29b      	uxth	r3, r3
 800706e:	b2db      	uxtb	r3, r3
 8007070:	b29b      	uxth	r3, r3
 8007072:	4313      	orrs	r3, r2
 8007074:	b29a      	uxth	r2, r3
 8007076:	683b      	ldr	r3, [r7, #0]
 8007078:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800707a:	697b      	ldr	r3, [r7, #20]
 800707c:	0a9b      	lsrs	r3, r3, #10
 800707e:	b2db      	uxtb	r3, r3
 8007080:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007084:	b2da      	uxtb	r2, r3
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800708a:	697b      	ldr	r3, [r7, #20]
 800708c:	0a1b      	lsrs	r3, r3, #8
 800708e:	b2db      	uxtb	r3, r3
 8007090:	f003 0303 	and.w	r3, r3, #3
 8007094:	b2da      	uxtb	r2, r3
 8007096:	683b      	ldr	r3, [r7, #0]
 8007098:	73da      	strb	r2, [r3, #15]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800709a:	697b      	ldr	r3, [r7, #20]
 800709c:	091b      	lsrs	r3, r3, #4
 800709e:	b2db      	uxtb	r3, r3
 80070a0:	f003 030f 	and.w	r3, r3, #15
 80070a4:	b2da      	uxtb	r2, r3
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 80070aa:	697b      	ldr	r3, [r7, #20]
 80070ac:	b2db      	uxtb	r3, r3
 80070ae:	f003 030f 	and.w	r3, r3, #15
 80070b2:	b2da      	uxtb	r2, r3
 80070b4:	683b      	ldr	r3, [r7, #0]
 80070b6:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 80070b8:	69bb      	ldr	r3, [r7, #24]
 80070ba:	0e1b      	lsrs	r3, r3, #24
 80070bc:	b2da      	uxtb	r2, r3
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	749a      	strb	r2, [r3, #18]
#endif
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80070ca:	4618      	mov	r0, r3
 80070cc:	f001 fa2c 	bl	8008528 <SDMMC_CmdBlockLength>
 80070d0:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 80070d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d00d      	beq.n	80070f4 <HAL_SD_GetCardStatus+0x15c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	4a08      	ldr	r2, [pc, #32]	; (8007100 <HAL_SD_GetCardStatus+0x168>)
 80070de:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80070e4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	2201      	movs	r2, #1
 80070ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 80070ee:	2301      	movs	r3, #1
 80070f0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }

  return status;
 80070f4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 80070f8:	4618      	mov	r0, r3
 80070fa:	3750      	adds	r7, #80	; 0x50
 80070fc:	46bd      	mov	sp, r7
 80070fe:	bd80      	pop	{r7, pc}
 8007100:	1fe00fff 	.word	0x1fe00fff

08007104 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8007104:	b480      	push	{r7}
 8007106:	b083      	sub	sp, #12
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
 800710c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007122:	683b      	ldr	r3, [r7, #0]
 8007124:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007132:	683b      	ldr	r3, [r7, #0]
 8007134:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007142:	683b      	ldr	r3, [r7, #0]
 8007144:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800714a:	683b      	ldr	r3, [r7, #0]
 800714c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800714e:	2300      	movs	r3, #0
}
 8007150:	4618      	mov	r0, r3
 8007152:	370c      	adds	r7, #12
 8007154:	46bd      	mov	sp, r7
 8007156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715a:	4770      	bx	lr

0800715c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800715c:	b5b0      	push	{r4, r5, r7, lr}
 800715e:	b090      	sub	sp, #64	; 0x40
 8007160:	af04      	add	r7, sp, #16
 8007162:	6078      	str	r0, [r7, #4]
 8007164:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 8007166:	2300      	movs	r3, #0
 8007168:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2203      	movs	r2, #3
 8007170:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007178:	2b03      	cmp	r3, #3
 800717a:	d02e      	beq.n	80071da <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800717c:	683b      	ldr	r3, [r7, #0]
 800717e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007182:	d106      	bne.n	8007192 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007188:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	639a      	str	r2, [r3, #56]	; 0x38
 8007190:	e029      	b.n	80071e6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8007192:	683b      	ldr	r3, [r7, #0]
 8007194:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007198:	d10a      	bne.n	80071b0 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800719a:	6878      	ldr	r0, [r7, #4]
 800719c:	f000 fbd6 	bl	800794c <SD_WideBus_Enable>
 80071a0:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80071a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071a8:	431a      	orrs	r2, r3
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	639a      	str	r2, [r3, #56]	; 0x38
 80071ae:	e01a      	b.n	80071e6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d10a      	bne.n	80071cc <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80071b6:	6878      	ldr	r0, [r7, #4]
 80071b8:	f000 fc13 	bl	80079e2 <SD_WideBus_Disable>
 80071bc:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80071c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071c4:	431a      	orrs	r2, r3
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	639a      	str	r2, [r3, #56]	; 0x38
 80071ca:	e00c      	b.n	80071e6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071d0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	639a      	str	r2, [r3, #56]	; 0x38
 80071d8:	e005      	b.n	80071e6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071de:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d007      	beq.n	80071fe <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	4a60      	ldr	r2, [pc, #384]	; (8007374 <HAL_SD_ConfigWideBusOperation+0x218>)
 80071f4:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 80071f6:	2301      	movs	r3, #1
 80071f8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80071fc:	e097      	b.n	800732e <HAL_SD_ConfigWideBusOperation+0x1d2>
  }
  else
  {
    sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 80071fe:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8007202:	f7fd fed3 	bl	8004fac <HAL_RCCEx_GetPeriphCLKFreq>
 8007206:	6278      	str	r0, [r7, #36]	; 0x24
    if (sdmmc_clk != 0U)
 8007208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800720a:	2b00      	cmp	r3, #0
 800720c:	f000 8086 	beq.w	800731c <HAL_SD_ConfigWideBusOperation+0x1c0>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	685b      	ldr	r3, [r3, #4]
 8007214:	60fb      	str	r3, [r7, #12]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
      Init.ClockBypass         = hsd->Init.ClockBypass;
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	689b      	ldr	r3, [r3, #8]
 800721a:	613b      	str	r3, [r7, #16]
      Init.BusWide             = WideMode;
 800721c:	683b      	ldr	r3, [r7, #0]
 800721e:	617b      	str	r3, [r7, #20]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	691b      	ldr	r3, [r3, #16]
 8007224:	61bb      	str	r3, [r7, #24]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	695a      	ldr	r2, [r3, #20]
 800722a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800722c:	4952      	ldr	r1, [pc, #328]	; (8007378 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800722e:	fba1 1303 	umull	r1, r3, r1, r3
 8007232:	0e1b      	lsrs	r3, r3, #24
 8007234:	429a      	cmp	r2, r3
 8007236:	d303      	bcc.n	8007240 <HAL_SD_ConfigWideBusOperation+0xe4>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	695b      	ldr	r3, [r3, #20]
 800723c:	61fb      	str	r3, [r7, #28]
 800723e:	e05a      	b.n	80072f6 <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007244:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007248:	d103      	bne.n	8007252 <HAL_SD_ConfigWideBusOperation+0xf6>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	695b      	ldr	r3, [r3, #20]
 800724e:	61fb      	str	r3, [r7, #28]
 8007250:	e051      	b.n	80072f6 <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007256:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800725a:	d126      	bne.n	80072aa <HAL_SD_ConfigWideBusOperation+0x14e>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	695b      	ldr	r3, [r3, #20]
 8007260:	2b00      	cmp	r3, #0
 8007262:	d10e      	bne.n	8007282 <HAL_SD_ConfigWideBusOperation+0x126>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 8007264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007266:	4a45      	ldr	r2, [pc, #276]	; (800737c <HAL_SD_ConfigWideBusOperation+0x220>)
 8007268:	4293      	cmp	r3, r2
 800726a:	d906      	bls.n	800727a <HAL_SD_ConfigWideBusOperation+0x11e>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800726c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800726e:	4a42      	ldr	r2, [pc, #264]	; (8007378 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8007270:	fba2 2303 	umull	r2, r3, r2, r3
 8007274:	0e5b      	lsrs	r3, r3, #25
 8007276:	61fb      	str	r3, [r7, #28]
 8007278:	e03d      	b.n	80072f6 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	695b      	ldr	r3, [r3, #20]
 800727e:	61fb      	str	r3, [r7, #28]
 8007280:	e039      	b.n	80072f6 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	695b      	ldr	r3, [r3, #20]
 8007286:	005b      	lsls	r3, r3, #1
 8007288:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800728a:	fbb2 f3f3 	udiv	r3, r2, r3
 800728e:	4a3b      	ldr	r2, [pc, #236]	; (800737c <HAL_SD_ConfigWideBusOperation+0x220>)
 8007290:	4293      	cmp	r3, r2
 8007292:	d906      	bls.n	80072a2 <HAL_SD_ConfigWideBusOperation+0x146>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8007294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007296:	4a38      	ldr	r2, [pc, #224]	; (8007378 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8007298:	fba2 2303 	umull	r2, r3, r2, r3
 800729c:	0e5b      	lsrs	r3, r3, #25
 800729e:	61fb      	str	r3, [r7, #28]
 80072a0:	e029      	b.n	80072f6 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	695b      	ldr	r3, [r3, #20]
 80072a6:	61fb      	str	r3, [r7, #28]
 80072a8:	e025      	b.n	80072f6 <HAL_SD_ConfigWideBusOperation+0x19a>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	695b      	ldr	r3, [r3, #20]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d10e      	bne.n	80072d0 <HAL_SD_ConfigWideBusOperation+0x174>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 80072b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072b4:	4a32      	ldr	r2, [pc, #200]	; (8007380 <HAL_SD_ConfigWideBusOperation+0x224>)
 80072b6:	4293      	cmp	r3, r2
 80072b8:	d906      	bls.n	80072c8 <HAL_SD_ConfigWideBusOperation+0x16c>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 80072ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072bc:	4a2e      	ldr	r2, [pc, #184]	; (8007378 <HAL_SD_ConfigWideBusOperation+0x21c>)
 80072be:	fba2 2303 	umull	r2, r3, r2, r3
 80072c2:	0e1b      	lsrs	r3, r3, #24
 80072c4:	61fb      	str	r3, [r7, #28]
 80072c6:	e016      	b.n	80072f6 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	695b      	ldr	r3, [r3, #20]
 80072cc:	61fb      	str	r3, [r7, #28]
 80072ce:	e012      	b.n	80072f6 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	695b      	ldr	r3, [r3, #20]
 80072d4:	005b      	lsls	r3, r3, #1
 80072d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80072d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80072dc:	4a28      	ldr	r2, [pc, #160]	; (8007380 <HAL_SD_ConfigWideBusOperation+0x224>)
 80072de:	4293      	cmp	r3, r2
 80072e0:	d906      	bls.n	80072f0 <HAL_SD_ConfigWideBusOperation+0x194>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 80072e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072e4:	4a24      	ldr	r2, [pc, #144]	; (8007378 <HAL_SD_ConfigWideBusOperation+0x21c>)
 80072e6:	fba2 2303 	umull	r2, r3, r2, r3
 80072ea:	0e1b      	lsrs	r3, r3, #24
 80072ec:	61fb      	str	r3, [r7, #28]
 80072ee:	e002      	b.n	80072f6 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	695b      	ldr	r3, [r3, #20]
 80072f4:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      Init.Transceiver = hsd->Init.Transceiver;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	699b      	ldr	r3, [r3, #24]
 80072fa:	623b      	str	r3, [r7, #32]
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
      }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

      (void)SDMMC_Init(hsd->Instance, Init);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681d      	ldr	r5, [r3, #0]
 8007300:	466c      	mov	r4, sp
 8007302:	f107 0318 	add.w	r3, r7, #24
 8007306:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800730a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800730e:	f107 030c 	add.w	r3, r7, #12
 8007312:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007314:	4628      	mov	r0, r5
 8007316:	f001 f829 	bl	800836c <SDMMC_Init>
 800731a:	e008      	b.n	800732e <HAL_SD_ConfigWideBusOperation+0x1d2>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007320:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	639a      	str	r2, [r3, #56]	; 0x38
      status = HAL_ERROR;
 8007328:	2301      	movs	r3, #1
 800732a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007336:	4618      	mov	r0, r3
 8007338:	f001 f8f6 	bl	8008528 <SDMMC_CmdBlockLength>
 800733c:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800733e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007340:	2b00      	cmp	r3, #0
 8007342:	d00c      	beq.n	800735e <HAL_SD_ConfigWideBusOperation+0x202>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	4a0a      	ldr	r2, [pc, #40]	; (8007374 <HAL_SD_ConfigWideBusOperation+0x218>)
 800734a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007352:	431a      	orrs	r2, r3
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8007358:	2301      	movs	r3, #1
 800735a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	2201      	movs	r2, #1
 8007362:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8007366:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800736a:	4618      	mov	r0, r3
 800736c:	3730      	adds	r7, #48	; 0x30
 800736e:	46bd      	mov	sp, r7
 8007370:	bdb0      	pop	{r4, r5, r7, pc}
 8007372:	bf00      	nop
 8007374:	1fe00fff 	.word	0x1fe00fff
 8007378:	55e63b89 	.word	0x55e63b89
 800737c:	02faf080 	.word	0x02faf080
 8007380:	017d7840 	.word	0x017d7840

08007384 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8007384:	b580      	push	{r7, lr}
 8007386:	b086      	sub	sp, #24
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800738c:	2300      	movs	r3, #0
 800738e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8007390:	f107 030c 	add.w	r3, r7, #12
 8007394:	4619      	mov	r1, r3
 8007396:	6878      	ldr	r0, [r7, #4]
 8007398:	f000 fab0 	bl	80078fc <SD_SendStatus>
 800739c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800739e:	697b      	ldr	r3, [r7, #20]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d005      	beq.n	80073b0 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80073a8:	697b      	ldr	r3, [r7, #20]
 80073aa:	431a      	orrs	r2, r3
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	0a5b      	lsrs	r3, r3, #9
 80073b4:	f003 030f 	and.w	r3, r3, #15
 80073b8:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80073ba:	693b      	ldr	r3, [r7, #16]
}
 80073bc:	4618      	mov	r0, r3
 80073be:	3718      	adds	r7, #24
 80073c0:	46bd      	mov	sp, r7
 80073c2:	bd80      	pop	{r7, pc}

080073c4 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80073c4:	b5b0      	push	{r4, r5, r7, lr}
 80073c6:	b090      	sub	sp, #64	; 0x40
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80073cc:	2301      	movs	r3, #1
 80073ce:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	4618      	mov	r0, r3
 80073d6:	f001 f823 	bl	8008420 <SDMMC_GetPowerState>
 80073da:	4603      	mov	r3, r0
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d102      	bne.n	80073e6 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80073e0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80073e4:	e0a9      	b.n	800753a <SD_InitCard+0x176>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073ea:	2b03      	cmp	r3, #3
 80073ec:	d02e      	beq.n	800744c <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	4618      	mov	r0, r3
 80073f4:	f001 fa68 	bl	80088c8 <SDMMC_CmdSendCID>
 80073f8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80073fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d001      	beq.n	8007404 <SD_InitCard+0x40>
    {
      return errorstate;
 8007400:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007402:	e09a      	b.n	800753a <SD_InitCard+0x176>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	2100      	movs	r1, #0
 800740a:	4618      	mov	r0, r3
 800740c:	f001 f84d 	bl	80084aa <SDMMC_GetResponse>
 8007410:	4602      	mov	r2, r0
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	2104      	movs	r1, #4
 800741c:	4618      	mov	r0, r3
 800741e:	f001 f844 	bl	80084aa <SDMMC_GetResponse>
 8007422:	4602      	mov	r2, r0
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	2108      	movs	r1, #8
 800742e:	4618      	mov	r0, r3
 8007430:	f001 f83b 	bl	80084aa <SDMMC_GetResponse>
 8007434:	4602      	mov	r2, r0
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	210c      	movs	r1, #12
 8007440:	4618      	mov	r0, r3
 8007442:	f001 f832 	bl	80084aa <SDMMC_GetResponse>
 8007446:	4602      	mov	r2, r0
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	67da      	str	r2, [r3, #124]	; 0x7c
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007450:	2b03      	cmp	r3, #3
 8007452:	d00d      	beq.n	8007470 <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	f107 020e 	add.w	r2, r7, #14
 800745c:	4611      	mov	r1, r2
 800745e:	4618      	mov	r0, r3
 8007460:	f001 fa71 	bl	8008946 <SDMMC_CmdSetRelAdd>
 8007464:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007466:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007468:	2b00      	cmp	r3, #0
 800746a:	d001      	beq.n	8007470 <SD_InitCard+0xac>
    {
      return errorstate;
 800746c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800746e:	e064      	b.n	800753a <SD_InitCard+0x176>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007474:	2b03      	cmp	r3, #3
 8007476:	d036      	beq.n	80074e6 <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8007478:	89fb      	ldrh	r3, [r7, #14]
 800747a:	461a      	mov	r2, r3
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	649a      	str	r2, [r3, #72]	; 0x48

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681a      	ldr	r2, [r3, #0]
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007488:	041b      	lsls	r3, r3, #16
 800748a:	4619      	mov	r1, r3
 800748c:	4610      	mov	r0, r2
 800748e:	f001 fa3a 	bl	8008906 <SDMMC_CmdSendCSD>
 8007492:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007494:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007496:	2b00      	cmp	r3, #0
 8007498:	d001      	beq.n	800749e <SD_InitCard+0xda>
    {
      return errorstate;
 800749a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800749c:	e04d      	b.n	800753a <SD_InitCard+0x176>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	2100      	movs	r1, #0
 80074a4:	4618      	mov	r0, r3
 80074a6:	f001 f800 	bl	80084aa <SDMMC_GetResponse>
 80074aa:	4602      	mov	r2, r0
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	2104      	movs	r1, #4
 80074b6:	4618      	mov	r0, r3
 80074b8:	f000 fff7 	bl	80084aa <SDMMC_GetResponse>
 80074bc:	4602      	mov	r2, r0
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	2108      	movs	r1, #8
 80074c8:	4618      	mov	r0, r3
 80074ca:	f000 ffee 	bl	80084aa <SDMMC_GetResponse>
 80074ce:	4602      	mov	r2, r0
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	210c      	movs	r1, #12
 80074da:	4618      	mov	r0, r3
 80074dc:	f000 ffe5 	bl	80084aa <SDMMC_GetResponse>
 80074e0:	4602      	mov	r2, r0
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	66da      	str	r2, [r3, #108]	; 0x6c
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	2104      	movs	r1, #4
 80074ec:	4618      	mov	r0, r3
 80074ee:	f000 ffdc 	bl	80084aa <SDMMC_GetResponse>
 80074f2:	4603      	mov	r3, r0
 80074f4:	0d1a      	lsrs	r2, r3, #20
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80074fa:	f107 0310 	add.w	r3, r7, #16
 80074fe:	4619      	mov	r1, r3
 8007500:	6878      	ldr	r0, [r7, #4]
 8007502:	f7ff fba5 	bl	8006c50 <HAL_SD_GetCardCSD>
 8007506:	4603      	mov	r3, r0
 8007508:	2b00      	cmp	r3, #0
 800750a:	d002      	beq.n	8007512 <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800750c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007510:	e013      	b.n	800753a <SD_InitCard+0x176>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	6819      	ldr	r1, [r3, #0]
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800751a:	041b      	lsls	r3, r3, #16
 800751c:	2200      	movs	r2, #0
 800751e:	461c      	mov	r4, r3
 8007520:	4615      	mov	r5, r2
 8007522:	4622      	mov	r2, r4
 8007524:	462b      	mov	r3, r5
 8007526:	4608      	mov	r0, r1
 8007528:	f001 f8e4 	bl	80086f4 <SDMMC_CmdSelDesel>
 800752c:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800752e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007530:	2b00      	cmp	r3, #0
 8007532:	d001      	beq.n	8007538 <SD_InitCard+0x174>
  {
    return errorstate;
 8007534:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007536:	e000      	b.n	800753a <SD_InitCard+0x176>
  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8007538:	2300      	movs	r3, #0
}
 800753a:	4618      	mov	r0, r3
 800753c:	3740      	adds	r7, #64	; 0x40
 800753e:	46bd      	mov	sp, r7
 8007540:	bdb0      	pop	{r4, r5, r7, pc}
	...

08007544 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8007544:	b580      	push	{r7, lr}
 8007546:	b088      	sub	sp, #32
 8007548:	af00      	add	r7, sp, #0
 800754a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800754c:	2300      	movs	r3, #0
 800754e:	60fb      	str	r3, [r7, #12]
  uint32_t response = 0U, validvoltage = 0U;
 8007550:	2300      	movs	r3, #0
 8007552:	61fb      	str	r3, [r7, #28]
 8007554:	2300      	movs	r3, #0
 8007556:	61bb      	str	r3, [r7, #24]
  uint32_t errorstate;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t tickstart = HAL_GetTick();
 8007558:	f7f9 fec6 	bl	80012e8 <HAL_GetTick>
 800755c:	6178      	str	r0, [r7, #20]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	4618      	mov	r0, r3
 8007564:	f001 f8ea 	bl	800873c <SDMMC_CmdGoIdleState>
 8007568:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 800756a:	693b      	ldr	r3, [r7, #16]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d001      	beq.n	8007574 <SD_PowerON+0x30>
  {
    return errorstate;
 8007570:	693b      	ldr	r3, [r7, #16]
 8007572:	e0ed      	b.n	8007750 <SD_PowerON+0x20c>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	4618      	mov	r0, r3
 800757a:	f001 f8fd 	bl	8008778 <SDMMC_CmdOperCond>
 800757e:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007580:	693b      	ldr	r3, [r7, #16]
 8007582:	2b00      	cmp	r3, #0
 8007584:	d00d      	beq.n	80075a2 <SD_PowerON+0x5e>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	2200      	movs	r2, #0
 800758a:	641a      	str	r2, [r3, #64]	; 0x40
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	4618      	mov	r0, r3
 8007592:	f001 f8d3 	bl	800873c <SDMMC_CmdGoIdleState>
 8007596:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007598:	693b      	ldr	r3, [r7, #16]
 800759a:	2b00      	cmp	r3, #0
 800759c:	d004      	beq.n	80075a8 <SD_PowerON+0x64>
    {
      return errorstate;
 800759e:	693b      	ldr	r3, [r7, #16]
 80075a0:	e0d6      	b.n	8007750 <SD_PowerON+0x20c>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	2201      	movs	r2, #1
 80075a6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075ac:	2b01      	cmp	r3, #1
 80075ae:	d137      	bne.n	8007620 <SD_PowerON+0xdc>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	2100      	movs	r1, #0
 80075b6:	4618      	mov	r0, r3
 80075b8:	f001 f8fe 	bl	80087b8 <SDMMC_CmdAppCommand>
 80075bc:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 80075be:	693b      	ldr	r3, [r7, #16]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d02d      	beq.n	8007620 <SD_PowerON+0xdc>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80075c4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80075c8:	e0c2      	b.n	8007750 <SD_PowerON+0x20c>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	2100      	movs	r1, #0
 80075d0:	4618      	mov	r0, r3
 80075d2:	f001 f8f1 	bl	80087b8 <SDMMC_CmdAppCommand>
 80075d6:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 80075d8:	693b      	ldr	r3, [r7, #16]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d001      	beq.n	80075e2 <SD_PowerON+0x9e>
    {
      return errorstate;
 80075de:	693b      	ldr	r3, [r7, #16]
 80075e0:	e0b6      	b.n	8007750 <SD_PowerON+0x20c>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	495c      	ldr	r1, [pc, #368]	; (8007758 <SD_PowerON+0x214>)
 80075e8:	4618      	mov	r0, r3
 80075ea:	f001 f908 	bl	80087fe <SDMMC_CmdAppOperCommand>
 80075ee:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 80075f0:	693b      	ldr	r3, [r7, #16]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d002      	beq.n	80075fc <SD_PowerON+0xb8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80075f6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80075fa:	e0a9      	b.n	8007750 <SD_PowerON+0x20c>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	2100      	movs	r1, #0
 8007602:	4618      	mov	r0, r3
 8007604:	f000 ff51 	bl	80084aa <SDMMC_GetResponse>
 8007608:	61f8      	str	r0, [r7, #28]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800760a:	69fb      	ldr	r3, [r7, #28]
 800760c:	0fdb      	lsrs	r3, r3, #31
 800760e:	2b01      	cmp	r3, #1
 8007610:	d101      	bne.n	8007616 <SD_PowerON+0xd2>
 8007612:	2301      	movs	r3, #1
 8007614:	e000      	b.n	8007618 <SD_PowerON+0xd4>
 8007616:	2300      	movs	r3, #0
 8007618:	61bb      	str	r3, [r7, #24]

    count++;
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	3301      	adds	r3, #1
 800761e:	60fb      	str	r3, [r7, #12]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8007626:	4293      	cmp	r3, r2
 8007628:	d802      	bhi.n	8007630 <SD_PowerON+0xec>
 800762a:	69bb      	ldr	r3, [r7, #24]
 800762c:	2b00      	cmp	r3, #0
 800762e:	d0cc      	beq.n	80075ca <SD_PowerON+0x86>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8007636:	4293      	cmp	r3, r2
 8007638:	d902      	bls.n	8007640 <SD_PowerON+0xfc>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800763a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800763e:	e087      	b.n	8007750 <SD_PowerON+0x20c>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8007640:	69fb      	ldr	r3, [r7, #28]
 8007642:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007646:	2b00      	cmp	r3, #0
 8007648:	d07e      	beq.n	8007748 <SD_PowerON+0x204>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	2201      	movs	r2, #1
 800764e:	63da      	str	r2, [r3, #60]	; 0x3c
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	699b      	ldr	r3, [r3, #24]
 8007654:	2b01      	cmp	r3, #1
 8007656:	d17a      	bne.n	800774e <SD_PowerON+0x20a>
    {
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 8007658:	69fb      	ldr	r3, [r7, #28]
 800765a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800765e:	2b00      	cmp	r3, #0
 8007660:	d075      	beq.n	800774e <SD_PowerON+0x20a>
      {
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007668:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Start switching procedue */
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	681a      	ldr	r2, [r3, #0]
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	f042 0208 	orr.w	r2, r2, #8
 8007678:	601a      	str	r2, [r3, #0]

        /* Send CMD11 to switch 1.8V mode */
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	4618      	mov	r0, r3
 8007680:	f001 f9c8 	bl	8008a14 <SDMMC_CmdVoltageSwitch>
 8007684:	6138      	str	r0, [r7, #16]
        if(errorstate != HAL_SD_ERROR_NONE)
 8007686:	693b      	ldr	r3, [r7, #16]
 8007688:	2b00      	cmp	r3, #0
 800768a:	d00c      	beq.n	80076a6 <SD_PowerON+0x162>
        {
          return errorstate;
 800768c:	693b      	ldr	r3, [r7, #16]
 800768e:	e05f      	b.n	8007750 <SD_PowerON+0x20c>
        }

        /* Check to CKSTOP */
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
        {
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007690:	f7f9 fe2a 	bl	80012e8 <HAL_GetTick>
 8007694:	4602      	mov	r2, r0
 8007696:	697b      	ldr	r3, [r7, #20]
 8007698:	1ad3      	subs	r3, r2, r3
 800769a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800769e:	d102      	bne.n	80076a6 <SD_PowerON+0x162>
          {
            return HAL_SD_ERROR_TIMEOUT;
 80076a0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80076a4:	e054      	b.n	8007750 <SD_PowerON+0x20c>
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076ac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80076b0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80076b4:	d1ec      	bne.n	8007690 <SD_PowerON+0x14c>
          }
        }

        /* Clear CKSTOP Flag */
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80076be:	639a      	str	r2, [r3, #56]	; 0x38

        /* Check to BusyD0 */
        if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80076ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80076ce:	d002      	beq.n	80076d6 <SD_PowerON+0x192>
        {
          /* Error when activate Voltage Switch in SDMMC Peripheral */
          return SDMMC_ERROR_UNSUPPORTED_FEATURE;
 80076d0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80076d4:	e03c      	b.n	8007750 <SD_PowerON+0x20c>
        {
          /* Enable Transceiver Switch PIN */
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->DriveTransceiver_1_8V_Callback(SET);
#else
          HAL_SDEx_DriveTransceiver_1_8V_Callback(SET);
 80076d6:	2001      	movs	r0, #1
 80076d8:	f000 fb44 	bl	8007d64 <HAL_SDEx_DriveTransceiver_1_8V_Callback>
#endif

          /* Switch ready */
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	681a      	ldr	r2, [r3, #0]
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	f042 0204 	orr.w	r2, r2, #4
 80076ea:	601a      	str	r2, [r3, #0]

          /* Check VSWEND Flag */
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 80076ec:	e00a      	b.n	8007704 <SD_PowerON+0x1c0>
          {
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80076ee:	f7f9 fdfb 	bl	80012e8 <HAL_GetTick>
 80076f2:	4602      	mov	r2, r0
 80076f4:	697b      	ldr	r3, [r7, #20]
 80076f6:	1ad3      	subs	r3, r2, r3
 80076f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076fc:	d102      	bne.n	8007704 <SD_PowerON+0x1c0>
            {
              return HAL_SD_ERROR_TIMEOUT;
 80076fe:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007702:	e025      	b.n	8007750 <SD_PowerON+0x20c>
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800770a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800770e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007712:	d1ec      	bne.n	80076ee <SD_PowerON+0x1aa>
            }
          }

          /* Clear VSWEND Flag */
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800771c:	639a      	str	r2, [r3, #56]	; 0x38

          /* Check BusyD0 status */
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007724:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007728:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800772c:	d102      	bne.n	8007734 <SD_PowerON+0x1f0>
          {
            /* Error when enabling 1.8V mode */
            return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800772e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007732:	e00d      	b.n	8007750 <SD_PowerON+0x20c>
          }
          /* Switch to 1.8V OK */

          /* Disable VSWITCH FLAG from SDMMC Peripheral */
          hsd->Instance->POWER = 0x13U;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	2213      	movs	r2, #19
 800773a:	601a      	str	r2, [r3, #0]

          /* Clean Status flags */
          hsd->Instance->ICR = 0xFFFFFFFFU;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	f04f 32ff 	mov.w	r2, #4294967295
 8007744:	639a      	str	r2, [r3, #56]	; 0x38
 8007746:	e002      	b.n	800774e <SD_PowerON+0x20a>
    }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	2200      	movs	r2, #0
 800774c:	63da      	str	r2, [r3, #60]	; 0x3c
  }


  return HAL_SD_ERROR_NONE;
 800774e:	2300      	movs	r3, #0
}
 8007750:	4618      	mov	r0, r3
 8007752:	3720      	adds	r7, #32
 8007754:	46bd      	mov	sp, r7
 8007756:	bd80      	pop	{r7, pc}
 8007758:	c1100000 	.word	0xc1100000

0800775c <SD_SendSDStatus>:
  * @param  pSDstatus Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800775c:	b580      	push	{r7, lr}
 800775e:	b08c      	sub	sp, #48	; 0x30
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]
 8007764:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8007766:	f7f9 fdbf 	bl	80012e8 <HAL_GetTick>
 800776a:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800776c:	683b      	ldr	r3, [r7, #0]
 800776e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	2100      	movs	r1, #0
 8007776:	4618      	mov	r0, r3
 8007778:	f000 fe97 	bl	80084aa <SDMMC_GetResponse>
 800777c:	4603      	mov	r3, r0
 800777e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007782:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007786:	d102      	bne.n	800778e <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007788:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800778c:	e0b0      	b.n	80078f0 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	2140      	movs	r1, #64	; 0x40
 8007794:	4618      	mov	r0, r3
 8007796:	f000 fec7 	bl	8008528 <SDMMC_CmdBlockLength>
 800779a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800779c:	6a3b      	ldr	r3, [r7, #32]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d005      	beq.n	80077ae <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 80077aa:	6a3b      	ldr	r3, [r7, #32]
 80077ac:	e0a0      	b.n	80078f0 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681a      	ldr	r2, [r3, #0]
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80077b6:	041b      	lsls	r3, r3, #16
 80077b8:	4619      	mov	r1, r3
 80077ba:	4610      	mov	r0, r2
 80077bc:	f000 fffc 	bl	80087b8 <SDMMC_CmdAppCommand>
 80077c0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80077c2:	6a3b      	ldr	r3, [r7, #32]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d005      	beq.n	80077d4 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 80077d0:	6a3b      	ldr	r3, [r7, #32]
 80077d2:	e08d      	b.n	80078f0 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80077d4:	f04f 33ff 	mov.w	r3, #4294967295
 80077d8:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 80077da:	2340      	movs	r3, #64	; 0x40
 80077dc:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 80077de:	2360      	movs	r3, #96	; 0x60
 80077e0:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80077e2:	2302      	movs	r3, #2
 80077e4:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80077e6:	2300      	movs	r3, #0
 80077e8:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80077ea:	2301      	movs	r3, #1
 80077ec:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	f107 0208 	add.w	r2, r7, #8
 80077f6:	4611      	mov	r1, r2
 80077f8:	4618      	mov	r0, r3
 80077fa:	f000 fe69 	bl	80084d0 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	4618      	mov	r0, r3
 8007804:	f001 f8e4 	bl	80089d0 <SDMMC_CmdStatusRegister>
 8007808:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800780a:	6a3b      	ldr	r3, [r7, #32]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d02b      	beq.n	8007868 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8007818:	6a3b      	ldr	r3, [r7, #32]
 800781a:	e069      	b.n	80078f0 <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
#else
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007822:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007826:	2b00      	cmp	r3, #0
 8007828:	d013      	beq.n	8007852 <SD_SendSDStatus+0xf6>
    {
      for(count = 0U; count < 8U; count++)
 800782a:	2300      	movs	r3, #0
 800782c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800782e:	e00d      	b.n	800784c <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	4618      	mov	r0, r3
 8007836:	f000 fdc3 	bl	80083c0 <SDMMC_ReadFIFO>
 800783a:	4602      	mov	r2, r0
 800783c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800783e:	601a      	str	r2, [r3, #0]
        pData++;
 8007840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007842:	3304      	adds	r3, #4
 8007844:	62bb      	str	r3, [r7, #40]	; 0x28
      for(count = 0U; count < 8U; count++)
 8007846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007848:	3301      	adds	r3, #1
 800784a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800784c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800784e:	2b07      	cmp	r3, #7
 8007850:	d9ee      	bls.n	8007830 <SD_SendSDStatus+0xd4>
      }
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007852:	f7f9 fd49 	bl	80012e8 <HAL_GetTick>
 8007856:	4602      	mov	r2, r0
 8007858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800785a:	1ad3      	subs	r3, r2, r3
 800785c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007860:	d102      	bne.n	8007868 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8007862:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007866:	e043      	b.n	80078f0 <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800786e:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8007872:	2b00      	cmp	r3, #0
 8007874:	d0d2      	beq.n	800781c <SD_SendSDStatus+0xc0>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800787c:	f003 0308 	and.w	r3, r3, #8
 8007880:	2b00      	cmp	r3, #0
 8007882:	d001      	beq.n	8007888 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8007884:	2308      	movs	r3, #8
 8007886:	e033      	b.n	80078f0 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800788e:	f003 0302 	and.w	r3, r3, #2
 8007892:	2b00      	cmp	r3, #0
 8007894:	d001      	beq.n	800789a <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8007896:	2302      	movs	r3, #2
 8007898:	e02a      	b.n	80078f0 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078a0:	f003 0320 	and.w	r3, r3, #32
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d017      	beq.n	80078d8 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 80078a8:	2320      	movs	r3, #32
 80078aa:	e021      	b.n	80078f0 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
#else
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)))
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	4618      	mov	r0, r3
 80078b2:	f000 fd85 	bl	80083c0 <SDMMC_ReadFIFO>
 80078b6:	4602      	mov	r2, r0
 80078b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078ba:	601a      	str	r2, [r3, #0]
    pData++;
 80078bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078be:	3304      	adds	r3, #4
 80078c0:	62bb      	str	r3, [r7, #40]	; 0x28

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80078c2:	f7f9 fd11 	bl	80012e8 <HAL_GetTick>
 80078c6:	4602      	mov	r2, r0
 80078c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ca:	1ad3      	subs	r3, r2, r3
 80078cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078d0:	d102      	bne.n	80078d8 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80078d2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80078d6:	e00b      	b.n	80078f0 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d1e2      	bne.n	80078ac <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	4a03      	ldr	r2, [pc, #12]	; (80078f8 <SD_SendSDStatus+0x19c>)
 80078ec:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 80078ee:	2300      	movs	r3, #0
}
 80078f0:	4618      	mov	r0, r3
 80078f2:	3730      	adds	r7, #48	; 0x30
 80078f4:	46bd      	mov	sp, r7
 80078f6:	bd80      	pop	{r7, pc}
 80078f8:	18000f3a 	.word	0x18000f3a

080078fc <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80078fc:	b580      	push	{r7, lr}
 80078fe:	b084      	sub	sp, #16
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]
 8007904:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8007906:	683b      	ldr	r3, [r7, #0]
 8007908:	2b00      	cmp	r3, #0
 800790a:	d102      	bne.n	8007912 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800790c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007910:	e018      	b.n	8007944 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681a      	ldr	r2, [r3, #0]
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800791a:	041b      	lsls	r3, r3, #16
 800791c:	4619      	mov	r1, r3
 800791e:	4610      	mov	r0, r2
 8007920:	f001 f833 	bl	800898a <SDMMC_CmdSendStatus>
 8007924:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	2b00      	cmp	r3, #0
 800792a:	d001      	beq.n	8007930 <SD_SendStatus+0x34>
  {
    return errorstate;
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	e009      	b.n	8007944 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	2100      	movs	r1, #0
 8007936:	4618      	mov	r0, r3
 8007938:	f000 fdb7 	bl	80084aa <SDMMC_GetResponse>
 800793c:	4602      	mov	r2, r0
 800793e:	683b      	ldr	r3, [r7, #0]
 8007940:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8007942:	2300      	movs	r3, #0
}
 8007944:	4618      	mov	r0, r3
 8007946:	3710      	adds	r7, #16
 8007948:	46bd      	mov	sp, r7
 800794a:	bd80      	pop	{r7, pc}

0800794c <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800794c:	b580      	push	{r7, lr}
 800794e:	b086      	sub	sp, #24
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8007954:	2300      	movs	r3, #0
 8007956:	60fb      	str	r3, [r7, #12]
 8007958:	2300      	movs	r3, #0
 800795a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	2100      	movs	r1, #0
 8007962:	4618      	mov	r0, r3
 8007964:	f000 fda1 	bl	80084aa <SDMMC_GetResponse>
 8007968:	4603      	mov	r3, r0
 800796a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800796e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007972:	d102      	bne.n	800797a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007974:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007978:	e02f      	b.n	80079da <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800797a:	f107 030c 	add.w	r3, r7, #12
 800797e:	4619      	mov	r1, r3
 8007980:	6878      	ldr	r0, [r7, #4]
 8007982:	f000 f879 	bl	8007a78 <SD_FindSCR>
 8007986:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007988:	697b      	ldr	r3, [r7, #20]
 800798a:	2b00      	cmp	r3, #0
 800798c:	d001      	beq.n	8007992 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800798e:	697b      	ldr	r3, [r7, #20]
 8007990:	e023      	b.n	80079da <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8007992:	693b      	ldr	r3, [r7, #16]
 8007994:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007998:	2b00      	cmp	r3, #0
 800799a:	d01c      	beq.n	80079d6 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681a      	ldr	r2, [r3, #0]
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80079a4:	041b      	lsls	r3, r3, #16
 80079a6:	4619      	mov	r1, r3
 80079a8:	4610      	mov	r0, r2
 80079aa:	f000 ff05 	bl	80087b8 <SDMMC_CmdAppCommand>
 80079ae:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80079b0:	697b      	ldr	r3, [r7, #20]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d001      	beq.n	80079ba <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80079b6:	697b      	ldr	r3, [r7, #20]
 80079b8:	e00f      	b.n	80079da <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	2102      	movs	r1, #2
 80079c0:	4618      	mov	r0, r3
 80079c2:	f000 ff3c 	bl	800883e <SDMMC_CmdBusWidth>
 80079c6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80079c8:	697b      	ldr	r3, [r7, #20]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d001      	beq.n	80079d2 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 80079ce:	697b      	ldr	r3, [r7, #20]
 80079d0:	e003      	b.n	80079da <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80079d2:	2300      	movs	r3, #0
 80079d4:	e001      	b.n	80079da <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80079d6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80079da:	4618      	mov	r0, r3
 80079dc:	3718      	adds	r7, #24
 80079de:	46bd      	mov	sp, r7
 80079e0:	bd80      	pop	{r7, pc}

080079e2 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 80079e2:	b580      	push	{r7, lr}
 80079e4:	b086      	sub	sp, #24
 80079e6:	af00      	add	r7, sp, #0
 80079e8:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 80079ea:	2300      	movs	r3, #0
 80079ec:	60fb      	str	r3, [r7, #12]
 80079ee:	2300      	movs	r3, #0
 80079f0:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	2100      	movs	r1, #0
 80079f8:	4618      	mov	r0, r3
 80079fa:	f000 fd56 	bl	80084aa <SDMMC_GetResponse>
 80079fe:	4603      	mov	r3, r0
 8007a00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a04:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007a08:	d102      	bne.n	8007a10 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007a0a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007a0e:	e02f      	b.n	8007a70 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8007a10:	f107 030c 	add.w	r3, r7, #12
 8007a14:	4619      	mov	r1, r3
 8007a16:	6878      	ldr	r0, [r7, #4]
 8007a18:	f000 f82e 	bl	8007a78 <SD_FindSCR>
 8007a1c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007a1e:	697b      	ldr	r3, [r7, #20]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d001      	beq.n	8007a28 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8007a24:	697b      	ldr	r3, [r7, #20]
 8007a26:	e023      	b.n	8007a70 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8007a28:	693b      	ldr	r3, [r7, #16]
 8007a2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d01c      	beq.n	8007a6c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681a      	ldr	r2, [r3, #0]
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a3a:	041b      	lsls	r3, r3, #16
 8007a3c:	4619      	mov	r1, r3
 8007a3e:	4610      	mov	r0, r2
 8007a40:	f000 feba 	bl	80087b8 <SDMMC_CmdAppCommand>
 8007a44:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007a46:	697b      	ldr	r3, [r7, #20]
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d001      	beq.n	8007a50 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8007a4c:	697b      	ldr	r3, [r7, #20]
 8007a4e:	e00f      	b.n	8007a70 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	2100      	movs	r1, #0
 8007a56:	4618      	mov	r0, r3
 8007a58:	f000 fef1 	bl	800883e <SDMMC_CmdBusWidth>
 8007a5c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007a5e:	697b      	ldr	r3, [r7, #20]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d001      	beq.n	8007a68 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8007a64:	697b      	ldr	r3, [r7, #20]
 8007a66:	e003      	b.n	8007a70 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8007a68:	2300      	movs	r3, #0
 8007a6a:	e001      	b.n	8007a70 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007a6c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8007a70:	4618      	mov	r0, r3
 8007a72:	3718      	adds	r7, #24
 8007a74:	46bd      	mov	sp, r7
 8007a76:	bd80      	pop	{r7, pc}

08007a78 <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	b08e      	sub	sp, #56	; 0x38
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	6078      	str	r0, [r7, #4]
 8007a80:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8007a82:	f7f9 fc31 	bl	80012e8 <HAL_GetTick>
 8007a86:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8007a88:	2300      	movs	r3, #0
 8007a8a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8007a8c:	2300      	movs	r3, #0
 8007a8e:	60bb      	str	r3, [r7, #8]
 8007a90:	2300      	movs	r3, #0
 8007a92:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8007a94:	683b      	ldr	r3, [r7, #0]
 8007a96:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	2108      	movs	r1, #8
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	f000 fd42 	bl	8008528 <SDMMC_CmdBlockLength>
 8007aa4:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007aa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d001      	beq.n	8007ab0 <SD_FindSCR+0x38>
  {
    return errorstate;
 8007aac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aae:	e0ad      	b.n	8007c0c <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681a      	ldr	r2, [r3, #0]
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007ab8:	041b      	lsls	r3, r3, #16
 8007aba:	4619      	mov	r1, r3
 8007abc:	4610      	mov	r0, r2
 8007abe:	f000 fe7b 	bl	80087b8 <SDMMC_CmdAppCommand>
 8007ac2:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007ac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d001      	beq.n	8007ace <SD_FindSCR+0x56>
  {
    return errorstate;
 8007aca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007acc:	e09e      	b.n	8007c0c <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007ace:	f04f 33ff 	mov.w	r3, #4294967295
 8007ad2:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8007ad4:	2308      	movs	r3, #8
 8007ad6:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8007ad8:	2330      	movs	r3, #48	; 0x30
 8007ada:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8007adc:	2302      	movs	r3, #2
 8007ade:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007ae0:	2300      	movs	r3, #0
 8007ae2:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8007ae4:	2301      	movs	r3, #1
 8007ae6:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	f107 0210 	add.w	r2, r7, #16
 8007af0:	4611      	mov	r1, r2
 8007af2:	4618      	mov	r0, r3
 8007af4:	f000 fcec 	bl	80084d0 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	4618      	mov	r0, r3
 8007afe:	f000 fec1 	bl	8008884 <SDMMC_CmdSendSCR>
 8007b02:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007b04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d027      	beq.n	8007b5a <SD_FindSCR+0xe2>
  {
    return errorstate;
 8007b0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b0c:	e07e      	b.n	8007c0c <SD_FindSCR+0x194>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
  {
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b14:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d113      	bne.n	8007b44 <SD_FindSCR+0xcc>
 8007b1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d110      	bne.n	8007b44 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	4618      	mov	r0, r3
 8007b28:	f000 fc4a 	bl	80083c0 <SDMMC_ReadFIFO>
 8007b2c:	4603      	mov	r3, r0
 8007b2e:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	4618      	mov	r0, r3
 8007b36:	f000 fc43 	bl	80083c0 <SDMMC_ReadFIFO>
 8007b3a:	4603      	mov	r3, r0
 8007b3c:	60fb      	str	r3, [r7, #12]
      index++;
 8007b3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b40:	3301      	adds	r3, #1
 8007b42:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007b44:	f7f9 fbd0 	bl	80012e8 <HAL_GetTick>
 8007b48:	4602      	mov	r2, r0
 8007b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b4c:	1ad3      	subs	r3, r2, r3
 8007b4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b52:	d102      	bne.n	8007b5a <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8007b54:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007b58:	e058      	b.n	8007c0c <SD_FindSCR+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007b60:	f240 532a 	movw	r3, #1322	; 0x52a
 8007b64:	4013      	ands	r3, r2
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d0d1      	beq.n	8007b0e <SD_FindSCR+0x96>
      return HAL_SD_ERROR_TIMEOUT;
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b70:	f003 0308 	and.w	r3, r3, #8
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d005      	beq.n	8007b84 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	2208      	movs	r2, #8
 8007b7e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8007b80:	2308      	movs	r3, #8
 8007b82:	e043      	b.n	8007c0c <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b8a:	f003 0302 	and.w	r3, r3, #2
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d005      	beq.n	8007b9e <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	2202      	movs	r2, #2
 8007b98:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8007b9a:	2302      	movs	r3, #2
 8007b9c:	e036      	b.n	8007c0c <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ba4:	f003 0320 	and.w	r3, r3, #32
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d005      	beq.n	8007bb8 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	2220      	movs	r2, #32
 8007bb2:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8007bb4:	2320      	movs	r3, #32
 8007bb6:	e029      	b.n	8007c0c <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	4a15      	ldr	r2, [pc, #84]	; (8007c14 <SD_FindSCR+0x19c>)
 8007bbe:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	061a      	lsls	r2, r3, #24
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	021b      	lsls	r3, r3, #8
 8007bc8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007bcc:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	0a1b      	lsrs	r3, r3, #8
 8007bd2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8007bd6:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	0e1b      	lsrs	r3, r3, #24
 8007bdc:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8007bde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007be0:	601a      	str	r2, [r3, #0]
    scr++;
 8007be2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007be4:	3304      	adds	r3, #4
 8007be6:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8007be8:	68bb      	ldr	r3, [r7, #8]
 8007bea:	061a      	lsls	r2, r3, #24
 8007bec:	68bb      	ldr	r3, [r7, #8]
 8007bee:	021b      	lsls	r3, r3, #8
 8007bf0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007bf4:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8007bf6:	68bb      	ldr	r3, [r7, #8]
 8007bf8:	0a1b      	lsrs	r3, r3, #8
 8007bfa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8007bfe:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8007c00:	68bb      	ldr	r3, [r7, #8]
 8007c02:	0e1b      	lsrs	r3, r3, #24
 8007c04:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8007c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c08:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8007c0a:	2300      	movs	r3, #0
}
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	3738      	adds	r7, #56	; 0x38
 8007c10:	46bd      	mov	sp, r7
 8007c12:	bd80      	pop	{r7, pc}
 8007c14:	18000f3a 	.word	0x18000f3a

08007c18 <SD_Read_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	b086      	sub	sp, #24
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c24:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c2a:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8007c2c:	693b      	ldr	r3, [r7, #16]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d03f      	beq.n	8007cb2 <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8007c32:	2300      	movs	r3, #0
 8007c34:	617b      	str	r3, [r7, #20]
 8007c36:	e033      	b.n	8007ca0 <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	f000 fbbf 	bl	80083c0 <SDMMC_ReadFIFO>
 8007c42:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8007c44:	68bb      	ldr	r3, [r7, #8]
 8007c46:	b2da      	uxtb	r2, r3
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	3301      	adds	r3, #1
 8007c50:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007c52:	693b      	ldr	r3, [r7, #16]
 8007c54:	3b01      	subs	r3, #1
 8007c56:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8007c58:	68bb      	ldr	r3, [r7, #8]
 8007c5a:	0a1b      	lsrs	r3, r3, #8
 8007c5c:	b2da      	uxtb	r2, r3
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	3301      	adds	r3, #1
 8007c66:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007c68:	693b      	ldr	r3, [r7, #16]
 8007c6a:	3b01      	subs	r3, #1
 8007c6c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8007c6e:	68bb      	ldr	r3, [r7, #8]
 8007c70:	0c1b      	lsrs	r3, r3, #16
 8007c72:	b2da      	uxtb	r2, r3
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	3301      	adds	r3, #1
 8007c7c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007c7e:	693b      	ldr	r3, [r7, #16]
 8007c80:	3b01      	subs	r3, #1
 8007c82:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8007c84:	68bb      	ldr	r3, [r7, #8]
 8007c86:	0e1b      	lsrs	r3, r3, #24
 8007c88:	b2da      	uxtb	r2, r3
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	3301      	adds	r3, #1
 8007c92:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007c94:	693b      	ldr	r3, [r7, #16]
 8007c96:	3b01      	subs	r3, #1
 8007c98:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8007c9a:	697b      	ldr	r3, [r7, #20]
 8007c9c:	3301      	adds	r3, #1
 8007c9e:	617b      	str	r3, [r7, #20]
 8007ca0:	697b      	ldr	r3, [r7, #20]
 8007ca2:	2b07      	cmp	r3, #7
 8007ca4:	d9c8      	bls.n	8007c38 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	68fa      	ldr	r2, [r7, #12]
 8007caa:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	693a      	ldr	r2, [r7, #16]
 8007cb0:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8007cb2:	bf00      	nop
 8007cb4:	3718      	adds	r7, #24
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	bd80      	pop	{r7, pc}

08007cba <SD_Write_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8007cba:	b580      	push	{r7, lr}
 8007cbc:	b086      	sub	sp, #24
 8007cbe:	af00      	add	r7, sp, #0
 8007cc0:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	6a1b      	ldr	r3, [r3, #32]
 8007cc6:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ccc:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8007cce:	693b      	ldr	r3, [r7, #16]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d043      	beq.n	8007d5c <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8007cd4:	2300      	movs	r3, #0
 8007cd6:	617b      	str	r3, [r7, #20]
 8007cd8:	e037      	b.n	8007d4a <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	781b      	ldrb	r3, [r3, #0]
 8007cde:	60bb      	str	r3, [r7, #8]
      tmp++;
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	3301      	adds	r3, #1
 8007ce4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007ce6:	693b      	ldr	r3, [r7, #16]
 8007ce8:	3b01      	subs	r3, #1
 8007cea:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	781b      	ldrb	r3, [r3, #0]
 8007cf0:	021a      	lsls	r2, r3, #8
 8007cf2:	68bb      	ldr	r3, [r7, #8]
 8007cf4:	4313      	orrs	r3, r2
 8007cf6:	60bb      	str	r3, [r7, #8]
      tmp++;
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	3301      	adds	r3, #1
 8007cfc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007cfe:	693b      	ldr	r3, [r7, #16]
 8007d00:	3b01      	subs	r3, #1
 8007d02:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	781b      	ldrb	r3, [r3, #0]
 8007d08:	041a      	lsls	r2, r3, #16
 8007d0a:	68bb      	ldr	r3, [r7, #8]
 8007d0c:	4313      	orrs	r3, r2
 8007d0e:	60bb      	str	r3, [r7, #8]
      tmp++;
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	3301      	adds	r3, #1
 8007d14:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007d16:	693b      	ldr	r3, [r7, #16]
 8007d18:	3b01      	subs	r3, #1
 8007d1a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	781b      	ldrb	r3, [r3, #0]
 8007d20:	061a      	lsls	r2, r3, #24
 8007d22:	68bb      	ldr	r3, [r7, #8]
 8007d24:	4313      	orrs	r3, r2
 8007d26:	60bb      	str	r3, [r7, #8]
      tmp++;
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	3301      	adds	r3, #1
 8007d2c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007d2e:	693b      	ldr	r3, [r7, #16]
 8007d30:	3b01      	subs	r3, #1
 8007d32:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	f107 0208 	add.w	r2, r7, #8
 8007d3c:	4611      	mov	r1, r2
 8007d3e:	4618      	mov	r0, r3
 8007d40:	f000 fb4b 	bl	80083da <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8007d44:	697b      	ldr	r3, [r7, #20]
 8007d46:	3301      	adds	r3, #1
 8007d48:	617b      	str	r3, [r7, #20]
 8007d4a:	697b      	ldr	r3, [r7, #20]
 8007d4c:	2b07      	cmp	r3, #7
 8007d4e:	d9c4      	bls.n	8007cda <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	68fa      	ldr	r2, [r7, #12]
 8007d54:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	693a      	ldr	r2, [r7, #16]
 8007d5a:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8007d5c:	bf00      	nop
 8007d5e:	3718      	adds	r7, #24
 8007d60:	46bd      	mov	sp, r7
 8007d62:	bd80      	pop	{r7, pc}

08007d64 <HAL_SDEx_DriveTransceiver_1_8V_Callback>:
  * @brief  Enable/Disable the SD Transceiver 1.8V Mode Callback.
  * @param  status Voltage Switch State
  * @retval None
  */
__weak void HAL_SDEx_DriveTransceiver_1_8V_Callback(FlagStatus status)
{
 8007d64:	b480      	push	{r7}
 8007d66:	b083      	sub	sp, #12
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	4603      	mov	r3, r0
 8007d6c:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SD_EnableTransciver could be implemented in the user file
   */
}
 8007d6e:	bf00      	nop
 8007d70:	370c      	adds	r7, #12
 8007d72:	46bd      	mov	sp, r7
 8007d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d78:	4770      	bx	lr

08007d7a <HAL_SDEx_Read_DMADoubleBuffer0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuffer0CpltCallback(SD_HandleTypeDef *hsd)
{
 8007d7a:	b480      	push	{r7}
 8007d7c:	b083      	sub	sp, #12
 8007d7e:	af00      	add	r7, sp, #0
 8007d80:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuffer0CpltCallback can be implemented in the user file
   */
}
 8007d82:	bf00      	nop
 8007d84:	370c      	adds	r7, #12
 8007d86:	46bd      	mov	sp, r7
 8007d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8c:	4770      	bx	lr

08007d8e <HAL_SDEx_Read_DMADoubleBuffer1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuffer1CpltCallback(SD_HandleTypeDef *hsd)
{
 8007d8e:	b480      	push	{r7}
 8007d90:	b083      	sub	sp, #12
 8007d92:	af00      	add	r7, sp, #0
 8007d94:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuffer1CpltCallback can be implemented in the user file
   */
}
 8007d96:	bf00      	nop
 8007d98:	370c      	adds	r7, #12
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da0:	4770      	bx	lr

08007da2 <HAL_SDEx_Write_DMADoubleBuffer0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuffer0CpltCallback(SD_HandleTypeDef *hsd)
{
 8007da2:	b480      	push	{r7}
 8007da4:	b083      	sub	sp, #12
 8007da6:	af00      	add	r7, sp, #0
 8007da8:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuffer0CpltCallback can be implemented in the user file
   */
}
 8007daa:	bf00      	nop
 8007dac:	370c      	adds	r7, #12
 8007dae:	46bd      	mov	sp, r7
 8007db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db4:	4770      	bx	lr

08007db6 <HAL_SDEx_Write_DMADoubleBuffer1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuffer1CpltCallback(SD_HandleTypeDef *hsd)
{
 8007db6:	b480      	push	{r7}
 8007db8:	b083      	sub	sp, #12
 8007dba:	af00      	add	r7, sp, #0
 8007dbc:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuffer0CpltCallback can be implemented in the user file
   */
}
 8007dbe:	bf00      	nop
 8007dc0:	370c      	adds	r7, #12
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc8:	4770      	bx	lr

08007dca <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007dca:	b580      	push	{r7, lr}
 8007dcc:	b082      	sub	sp, #8
 8007dce:	af00      	add	r7, sp, #0
 8007dd0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d101      	bne.n	8007ddc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007dd8:	2301      	movs	r3, #1
 8007dda:	e049      	b.n	8007e70 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007de2:	b2db      	uxtb	r3, r3
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d106      	bne.n	8007df6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	2200      	movs	r2, #0
 8007dec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007df0:	6878      	ldr	r0, [r7, #4]
 8007df2:	f000 f841 	bl	8007e78 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	2202      	movs	r2, #2
 8007dfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681a      	ldr	r2, [r3, #0]
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	3304      	adds	r3, #4
 8007e06:	4619      	mov	r1, r3
 8007e08:	4610      	mov	r0, r2
 8007e0a:	f000 f9f7 	bl	80081fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	2201      	movs	r2, #1
 8007e12:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	2201      	movs	r2, #1
 8007e1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	2201      	movs	r2, #1
 8007e22:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	2201      	movs	r2, #1
 8007e2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	2201      	movs	r2, #1
 8007e32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	2201      	movs	r2, #1
 8007e3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	2201      	movs	r2, #1
 8007e42:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	2201      	movs	r2, #1
 8007e4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	2201      	movs	r2, #1
 8007e52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	2201      	movs	r2, #1
 8007e5a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	2201      	movs	r2, #1
 8007e62:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	2201      	movs	r2, #1
 8007e6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007e6e:	2300      	movs	r3, #0
}
 8007e70:	4618      	mov	r0, r3
 8007e72:	3708      	adds	r7, #8
 8007e74:	46bd      	mov	sp, r7
 8007e76:	bd80      	pop	{r7, pc}

08007e78 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8007e78:	b480      	push	{r7}
 8007e7a:	b083      	sub	sp, #12
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8007e80:	bf00      	nop
 8007e82:	370c      	adds	r7, #12
 8007e84:	46bd      	mov	sp, r7
 8007e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8a:	4770      	bx	lr

08007e8c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007e8c:	b480      	push	{r7}
 8007e8e:	b085      	sub	sp, #20
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e9a:	b2db      	uxtb	r3, r3
 8007e9c:	2b01      	cmp	r3, #1
 8007e9e:	d001      	beq.n	8007ea4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007ea0:	2301      	movs	r3, #1
 8007ea2:	e04f      	b.n	8007f44 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	2202      	movs	r2, #2
 8007ea8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	68da      	ldr	r2, [r3, #12]
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	f042 0201 	orr.w	r2, r2, #1
 8007eba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	4a23      	ldr	r2, [pc, #140]	; (8007f50 <HAL_TIM_Base_Start_IT+0xc4>)
 8007ec2:	4293      	cmp	r3, r2
 8007ec4:	d01d      	beq.n	8007f02 <HAL_TIM_Base_Start_IT+0x76>
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ece:	d018      	beq.n	8007f02 <HAL_TIM_Base_Start_IT+0x76>
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	4a1f      	ldr	r2, [pc, #124]	; (8007f54 <HAL_TIM_Base_Start_IT+0xc8>)
 8007ed6:	4293      	cmp	r3, r2
 8007ed8:	d013      	beq.n	8007f02 <HAL_TIM_Base_Start_IT+0x76>
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	4a1e      	ldr	r2, [pc, #120]	; (8007f58 <HAL_TIM_Base_Start_IT+0xcc>)
 8007ee0:	4293      	cmp	r3, r2
 8007ee2:	d00e      	beq.n	8007f02 <HAL_TIM_Base_Start_IT+0x76>
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	4a1c      	ldr	r2, [pc, #112]	; (8007f5c <HAL_TIM_Base_Start_IT+0xd0>)
 8007eea:	4293      	cmp	r3, r2
 8007eec:	d009      	beq.n	8007f02 <HAL_TIM_Base_Start_IT+0x76>
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	4a1b      	ldr	r2, [pc, #108]	; (8007f60 <HAL_TIM_Base_Start_IT+0xd4>)
 8007ef4:	4293      	cmp	r3, r2
 8007ef6:	d004      	beq.n	8007f02 <HAL_TIM_Base_Start_IT+0x76>
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	4a19      	ldr	r2, [pc, #100]	; (8007f64 <HAL_TIM_Base_Start_IT+0xd8>)
 8007efe:	4293      	cmp	r3, r2
 8007f00:	d115      	bne.n	8007f2e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	689a      	ldr	r2, [r3, #8]
 8007f08:	4b17      	ldr	r3, [pc, #92]	; (8007f68 <HAL_TIM_Base_Start_IT+0xdc>)
 8007f0a:	4013      	ands	r3, r2
 8007f0c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	2b06      	cmp	r3, #6
 8007f12:	d015      	beq.n	8007f40 <HAL_TIM_Base_Start_IT+0xb4>
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f1a:	d011      	beq.n	8007f40 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	681a      	ldr	r2, [r3, #0]
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	f042 0201 	orr.w	r2, r2, #1
 8007f2a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f2c:	e008      	b.n	8007f40 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	681a      	ldr	r2, [r3, #0]
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	f042 0201 	orr.w	r2, r2, #1
 8007f3c:	601a      	str	r2, [r3, #0]
 8007f3e:	e000      	b.n	8007f42 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f40:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007f42:	2300      	movs	r3, #0
}
 8007f44:	4618      	mov	r0, r3
 8007f46:	3714      	adds	r7, #20
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4e:	4770      	bx	lr
 8007f50:	40012c00 	.word	0x40012c00
 8007f54:	40000400 	.word	0x40000400
 8007f58:	40000800 	.word	0x40000800
 8007f5c:	40000c00 	.word	0x40000c00
 8007f60:	40013400 	.word	0x40013400
 8007f64:	40014000 	.word	0x40014000
 8007f68:	00010007 	.word	0x00010007

08007f6c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	b082      	sub	sp, #8
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	691b      	ldr	r3, [r3, #16]
 8007f7a:	f003 0302 	and.w	r3, r3, #2
 8007f7e:	2b02      	cmp	r3, #2
 8007f80:	d122      	bne.n	8007fc8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	68db      	ldr	r3, [r3, #12]
 8007f88:	f003 0302 	and.w	r3, r3, #2
 8007f8c:	2b02      	cmp	r3, #2
 8007f8e:	d11b      	bne.n	8007fc8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	f06f 0202 	mvn.w	r2, #2
 8007f98:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	2201      	movs	r2, #1
 8007f9e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	699b      	ldr	r3, [r3, #24]
 8007fa6:	f003 0303 	and.w	r3, r3, #3
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d003      	beq.n	8007fb6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007fae:	6878      	ldr	r0, [r7, #4]
 8007fb0:	f000 f905 	bl	80081be <HAL_TIM_IC_CaptureCallback>
 8007fb4:	e005      	b.n	8007fc2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007fb6:	6878      	ldr	r0, [r7, #4]
 8007fb8:	f000 f8f7 	bl	80081aa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007fbc:	6878      	ldr	r0, [r7, #4]
 8007fbe:	f000 f908 	bl	80081d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	2200      	movs	r2, #0
 8007fc6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	691b      	ldr	r3, [r3, #16]
 8007fce:	f003 0304 	and.w	r3, r3, #4
 8007fd2:	2b04      	cmp	r3, #4
 8007fd4:	d122      	bne.n	800801c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	68db      	ldr	r3, [r3, #12]
 8007fdc:	f003 0304 	and.w	r3, r3, #4
 8007fe0:	2b04      	cmp	r3, #4
 8007fe2:	d11b      	bne.n	800801c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	f06f 0204 	mvn.w	r2, #4
 8007fec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	2202      	movs	r2, #2
 8007ff2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	699b      	ldr	r3, [r3, #24]
 8007ffa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d003      	beq.n	800800a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008002:	6878      	ldr	r0, [r7, #4]
 8008004:	f000 f8db 	bl	80081be <HAL_TIM_IC_CaptureCallback>
 8008008:	e005      	b.n	8008016 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800800a:	6878      	ldr	r0, [r7, #4]
 800800c:	f000 f8cd 	bl	80081aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008010:	6878      	ldr	r0, [r7, #4]
 8008012:	f000 f8de 	bl	80081d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	2200      	movs	r2, #0
 800801a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	691b      	ldr	r3, [r3, #16]
 8008022:	f003 0308 	and.w	r3, r3, #8
 8008026:	2b08      	cmp	r3, #8
 8008028:	d122      	bne.n	8008070 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	68db      	ldr	r3, [r3, #12]
 8008030:	f003 0308 	and.w	r3, r3, #8
 8008034:	2b08      	cmp	r3, #8
 8008036:	d11b      	bne.n	8008070 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	f06f 0208 	mvn.w	r2, #8
 8008040:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	2204      	movs	r2, #4
 8008046:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	69db      	ldr	r3, [r3, #28]
 800804e:	f003 0303 	and.w	r3, r3, #3
 8008052:	2b00      	cmp	r3, #0
 8008054:	d003      	beq.n	800805e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008056:	6878      	ldr	r0, [r7, #4]
 8008058:	f000 f8b1 	bl	80081be <HAL_TIM_IC_CaptureCallback>
 800805c:	e005      	b.n	800806a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800805e:	6878      	ldr	r0, [r7, #4]
 8008060:	f000 f8a3 	bl	80081aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008064:	6878      	ldr	r0, [r7, #4]
 8008066:	f000 f8b4 	bl	80081d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	2200      	movs	r2, #0
 800806e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	691b      	ldr	r3, [r3, #16]
 8008076:	f003 0310 	and.w	r3, r3, #16
 800807a:	2b10      	cmp	r3, #16
 800807c:	d122      	bne.n	80080c4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	68db      	ldr	r3, [r3, #12]
 8008084:	f003 0310 	and.w	r3, r3, #16
 8008088:	2b10      	cmp	r3, #16
 800808a:	d11b      	bne.n	80080c4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	f06f 0210 	mvn.w	r2, #16
 8008094:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	2208      	movs	r2, #8
 800809a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	69db      	ldr	r3, [r3, #28]
 80080a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d003      	beq.n	80080b2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80080aa:	6878      	ldr	r0, [r7, #4]
 80080ac:	f000 f887 	bl	80081be <HAL_TIM_IC_CaptureCallback>
 80080b0:	e005      	b.n	80080be <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80080b2:	6878      	ldr	r0, [r7, #4]
 80080b4:	f000 f879 	bl	80081aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80080b8:	6878      	ldr	r0, [r7, #4]
 80080ba:	f000 f88a 	bl	80081d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	2200      	movs	r2, #0
 80080c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	691b      	ldr	r3, [r3, #16]
 80080ca:	f003 0301 	and.w	r3, r3, #1
 80080ce:	2b01      	cmp	r3, #1
 80080d0:	d10e      	bne.n	80080f0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	68db      	ldr	r3, [r3, #12]
 80080d8:	f003 0301 	and.w	r3, r3, #1
 80080dc:	2b01      	cmp	r3, #1
 80080de:	d107      	bne.n	80080f0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	f06f 0201 	mvn.w	r2, #1
 80080e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80080ea:	6878      	ldr	r0, [r7, #4]
 80080ec:	f7f8 fdf0 	bl	8000cd0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	691b      	ldr	r3, [r3, #16]
 80080f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080fa:	2b80      	cmp	r3, #128	; 0x80
 80080fc:	d10e      	bne.n	800811c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	68db      	ldr	r3, [r3, #12]
 8008104:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008108:	2b80      	cmp	r3, #128	; 0x80
 800810a:	d107      	bne.n	800811c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008114:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008116:	6878      	ldr	r0, [r7, #4]
 8008118:	f000 f914 	bl	8008344 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	691b      	ldr	r3, [r3, #16]
 8008122:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008126:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800812a:	d10e      	bne.n	800814a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	68db      	ldr	r3, [r3, #12]
 8008132:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008136:	2b80      	cmp	r3, #128	; 0x80
 8008138:	d107      	bne.n	800814a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008142:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008144:	6878      	ldr	r0, [r7, #4]
 8008146:	f000 f907 	bl	8008358 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	691b      	ldr	r3, [r3, #16]
 8008150:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008154:	2b40      	cmp	r3, #64	; 0x40
 8008156:	d10e      	bne.n	8008176 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	68db      	ldr	r3, [r3, #12]
 800815e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008162:	2b40      	cmp	r3, #64	; 0x40
 8008164:	d107      	bne.n	8008176 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800816e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008170:	6878      	ldr	r0, [r7, #4]
 8008172:	f000 f838 	bl	80081e6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	691b      	ldr	r3, [r3, #16]
 800817c:	f003 0320 	and.w	r3, r3, #32
 8008180:	2b20      	cmp	r3, #32
 8008182:	d10e      	bne.n	80081a2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	68db      	ldr	r3, [r3, #12]
 800818a:	f003 0320 	and.w	r3, r3, #32
 800818e:	2b20      	cmp	r3, #32
 8008190:	d107      	bne.n	80081a2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	f06f 0220 	mvn.w	r2, #32
 800819a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800819c:	6878      	ldr	r0, [r7, #4]
 800819e:	f000 f8c7 	bl	8008330 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80081a2:	bf00      	nop
 80081a4:	3708      	adds	r7, #8
 80081a6:	46bd      	mov	sp, r7
 80081a8:	bd80      	pop	{r7, pc}

080081aa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80081aa:	b480      	push	{r7}
 80081ac:	b083      	sub	sp, #12
 80081ae:	af00      	add	r7, sp, #0
 80081b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80081b2:	bf00      	nop
 80081b4:	370c      	adds	r7, #12
 80081b6:	46bd      	mov	sp, r7
 80081b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081bc:	4770      	bx	lr

080081be <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80081be:	b480      	push	{r7}
 80081c0:	b083      	sub	sp, #12
 80081c2:	af00      	add	r7, sp, #0
 80081c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80081c6:	bf00      	nop
 80081c8:	370c      	adds	r7, #12
 80081ca:	46bd      	mov	sp, r7
 80081cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d0:	4770      	bx	lr

080081d2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80081d2:	b480      	push	{r7}
 80081d4:	b083      	sub	sp, #12
 80081d6:	af00      	add	r7, sp, #0
 80081d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80081da:	bf00      	nop
 80081dc:	370c      	adds	r7, #12
 80081de:	46bd      	mov	sp, r7
 80081e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e4:	4770      	bx	lr

080081e6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80081e6:	b480      	push	{r7}
 80081e8:	b083      	sub	sp, #12
 80081ea:	af00      	add	r7, sp, #0
 80081ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80081ee:	bf00      	nop
 80081f0:	370c      	adds	r7, #12
 80081f2:	46bd      	mov	sp, r7
 80081f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f8:	4770      	bx	lr
	...

080081fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80081fc:	b480      	push	{r7}
 80081fe:	b085      	sub	sp, #20
 8008200:	af00      	add	r7, sp, #0
 8008202:	6078      	str	r0, [r7, #4]
 8008204:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	4a40      	ldr	r2, [pc, #256]	; (8008310 <TIM_Base_SetConfig+0x114>)
 8008210:	4293      	cmp	r3, r2
 8008212:	d013      	beq.n	800823c <TIM_Base_SetConfig+0x40>
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800821a:	d00f      	beq.n	800823c <TIM_Base_SetConfig+0x40>
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	4a3d      	ldr	r2, [pc, #244]	; (8008314 <TIM_Base_SetConfig+0x118>)
 8008220:	4293      	cmp	r3, r2
 8008222:	d00b      	beq.n	800823c <TIM_Base_SetConfig+0x40>
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	4a3c      	ldr	r2, [pc, #240]	; (8008318 <TIM_Base_SetConfig+0x11c>)
 8008228:	4293      	cmp	r3, r2
 800822a:	d007      	beq.n	800823c <TIM_Base_SetConfig+0x40>
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	4a3b      	ldr	r2, [pc, #236]	; (800831c <TIM_Base_SetConfig+0x120>)
 8008230:	4293      	cmp	r3, r2
 8008232:	d003      	beq.n	800823c <TIM_Base_SetConfig+0x40>
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	4a3a      	ldr	r2, [pc, #232]	; (8008320 <TIM_Base_SetConfig+0x124>)
 8008238:	4293      	cmp	r3, r2
 800823a:	d108      	bne.n	800824e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008242:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008244:	683b      	ldr	r3, [r7, #0]
 8008246:	685b      	ldr	r3, [r3, #4]
 8008248:	68fa      	ldr	r2, [r7, #12]
 800824a:	4313      	orrs	r3, r2
 800824c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	4a2f      	ldr	r2, [pc, #188]	; (8008310 <TIM_Base_SetConfig+0x114>)
 8008252:	4293      	cmp	r3, r2
 8008254:	d01f      	beq.n	8008296 <TIM_Base_SetConfig+0x9a>
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800825c:	d01b      	beq.n	8008296 <TIM_Base_SetConfig+0x9a>
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	4a2c      	ldr	r2, [pc, #176]	; (8008314 <TIM_Base_SetConfig+0x118>)
 8008262:	4293      	cmp	r3, r2
 8008264:	d017      	beq.n	8008296 <TIM_Base_SetConfig+0x9a>
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	4a2b      	ldr	r2, [pc, #172]	; (8008318 <TIM_Base_SetConfig+0x11c>)
 800826a:	4293      	cmp	r3, r2
 800826c:	d013      	beq.n	8008296 <TIM_Base_SetConfig+0x9a>
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	4a2a      	ldr	r2, [pc, #168]	; (800831c <TIM_Base_SetConfig+0x120>)
 8008272:	4293      	cmp	r3, r2
 8008274:	d00f      	beq.n	8008296 <TIM_Base_SetConfig+0x9a>
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	4a29      	ldr	r2, [pc, #164]	; (8008320 <TIM_Base_SetConfig+0x124>)
 800827a:	4293      	cmp	r3, r2
 800827c:	d00b      	beq.n	8008296 <TIM_Base_SetConfig+0x9a>
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	4a28      	ldr	r2, [pc, #160]	; (8008324 <TIM_Base_SetConfig+0x128>)
 8008282:	4293      	cmp	r3, r2
 8008284:	d007      	beq.n	8008296 <TIM_Base_SetConfig+0x9a>
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	4a27      	ldr	r2, [pc, #156]	; (8008328 <TIM_Base_SetConfig+0x12c>)
 800828a:	4293      	cmp	r3, r2
 800828c:	d003      	beq.n	8008296 <TIM_Base_SetConfig+0x9a>
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	4a26      	ldr	r2, [pc, #152]	; (800832c <TIM_Base_SetConfig+0x130>)
 8008292:	4293      	cmp	r3, r2
 8008294:	d108      	bne.n	80082a8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800829c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800829e:	683b      	ldr	r3, [r7, #0]
 80082a0:	68db      	ldr	r3, [r3, #12]
 80082a2:	68fa      	ldr	r2, [r7, #12]
 80082a4:	4313      	orrs	r3, r2
 80082a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80082ae:	683b      	ldr	r3, [r7, #0]
 80082b0:	695b      	ldr	r3, [r3, #20]
 80082b2:	4313      	orrs	r3, r2
 80082b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	68fa      	ldr	r2, [r7, #12]
 80082ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80082bc:	683b      	ldr	r3, [r7, #0]
 80082be:	689a      	ldr	r2, [r3, #8]
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80082c4:	683b      	ldr	r3, [r7, #0]
 80082c6:	681a      	ldr	r2, [r3, #0]
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	4a10      	ldr	r2, [pc, #64]	; (8008310 <TIM_Base_SetConfig+0x114>)
 80082d0:	4293      	cmp	r3, r2
 80082d2:	d00f      	beq.n	80082f4 <TIM_Base_SetConfig+0xf8>
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	4a12      	ldr	r2, [pc, #72]	; (8008320 <TIM_Base_SetConfig+0x124>)
 80082d8:	4293      	cmp	r3, r2
 80082da:	d00b      	beq.n	80082f4 <TIM_Base_SetConfig+0xf8>
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	4a11      	ldr	r2, [pc, #68]	; (8008324 <TIM_Base_SetConfig+0x128>)
 80082e0:	4293      	cmp	r3, r2
 80082e2:	d007      	beq.n	80082f4 <TIM_Base_SetConfig+0xf8>
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	4a10      	ldr	r2, [pc, #64]	; (8008328 <TIM_Base_SetConfig+0x12c>)
 80082e8:	4293      	cmp	r3, r2
 80082ea:	d003      	beq.n	80082f4 <TIM_Base_SetConfig+0xf8>
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	4a0f      	ldr	r2, [pc, #60]	; (800832c <TIM_Base_SetConfig+0x130>)
 80082f0:	4293      	cmp	r3, r2
 80082f2:	d103      	bne.n	80082fc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80082f4:	683b      	ldr	r3, [r7, #0]
 80082f6:	691a      	ldr	r2, [r3, #16]
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	2201      	movs	r2, #1
 8008300:	615a      	str	r2, [r3, #20]
}
 8008302:	bf00      	nop
 8008304:	3714      	adds	r7, #20
 8008306:	46bd      	mov	sp, r7
 8008308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830c:	4770      	bx	lr
 800830e:	bf00      	nop
 8008310:	40012c00 	.word	0x40012c00
 8008314:	40000400 	.word	0x40000400
 8008318:	40000800 	.word	0x40000800
 800831c:	40000c00 	.word	0x40000c00
 8008320:	40013400 	.word	0x40013400
 8008324:	40014000 	.word	0x40014000
 8008328:	40014400 	.word	0x40014400
 800832c:	40014800 	.word	0x40014800

08008330 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008330:	b480      	push	{r7}
 8008332:	b083      	sub	sp, #12
 8008334:	af00      	add	r7, sp, #0
 8008336:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008338:	bf00      	nop
 800833a:	370c      	adds	r7, #12
 800833c:	46bd      	mov	sp, r7
 800833e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008342:	4770      	bx	lr

08008344 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008344:	b480      	push	{r7}
 8008346:	b083      	sub	sp, #12
 8008348:	af00      	add	r7, sp, #0
 800834a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800834c:	bf00      	nop
 800834e:	370c      	adds	r7, #12
 8008350:	46bd      	mov	sp, r7
 8008352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008356:	4770      	bx	lr

08008358 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008358:	b480      	push	{r7}
 800835a:	b083      	sub	sp, #12
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008360:	bf00      	nop
 8008362:	370c      	adds	r7, #12
 8008364:	46bd      	mov	sp, r7
 8008366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800836a:	4770      	bx	lr

0800836c <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800836c:	b084      	sub	sp, #16
 800836e:	b480      	push	{r7}
 8008370:	b085      	sub	sp, #20
 8008372:	af00      	add	r7, sp, #0
 8008374:	6078      	str	r0, [r7, #4]
 8008376:	f107 001c 	add.w	r0, r7, #28
 800837a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800837e:	2300      	movs	r3, #0
 8008380:	60fb      	str	r3, [r7, #12]

  /* Set SDMMC configuration parameters */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  tmpreg |= Init.ClockBypass;
#endif
  tmpreg |= (Init.ClockEdge           |\
 8008382:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 8008384:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8008386:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8008388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      |\
 800838a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800838c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             |\
 800838e:	431a      	orrs	r2, r3
             Init.ClockDiv
 8008390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl |\
 8008392:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8008394:	68fa      	ldr	r2, [r7, #12]
 8008396:	4313      	orrs	r3, r2
 8008398:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	685a      	ldr	r2, [r3, #4]
 800839e:	4b07      	ldr	r3, [pc, #28]	; (80083bc <SDMMC_Init+0x50>)
 80083a0:	4013      	ands	r3, r2
 80083a2:	68fa      	ldr	r2, [r7, #12]
 80083a4:	431a      	orrs	r2, r3
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80083aa:	2300      	movs	r3, #0
}
 80083ac:	4618      	mov	r0, r3
 80083ae:	3714      	adds	r7, #20
 80083b0:	46bd      	mov	sp, r7
 80083b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b6:	b004      	add	sp, #16
 80083b8:	4770      	bx	lr
 80083ba:	bf00      	nop
 80083bc:	ffc02c00 	.word	0xffc02c00

080083c0 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 80083c0:	b480      	push	{r7}
 80083c2:	b083      	sub	sp, #12
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80083ce:	4618      	mov	r0, r3
 80083d0:	370c      	adds	r7, #12
 80083d2:	46bd      	mov	sp, r7
 80083d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d8:	4770      	bx	lr

080083da <SDMMC_WriteFIFO>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pWriteData pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 80083da:	b480      	push	{r7}
 80083dc:	b083      	sub	sp, #12
 80083de:	af00      	add	r7, sp, #0
 80083e0:	6078      	str	r0, [r7, #4]
 80083e2:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 80083e4:	683b      	ldr	r3, [r7, #0]
 80083e6:	681a      	ldr	r2, [r3, #0]
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80083ee:	2300      	movs	r3, #0
}
 80083f0:	4618      	mov	r0, r3
 80083f2:	370c      	adds	r7, #12
 80083f4:	46bd      	mov	sp, r7
 80083f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fa:	4770      	bx	lr

080083fc <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 80083fc:	b580      	push	{r7, lr}
 80083fe:	b082      	sub	sp, #8
 8008400:	af00      	add	r7, sp, #0
 8008402:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	f043 0203 	orr.w	r2, r3, #3
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	601a      	str	r2, [r3, #0]
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8008410:	2002      	movs	r0, #2
 8008412:	f7f8 ff75 	bl	8001300 <HAL_Delay>

  return HAL_OK;
 8008416:	2300      	movs	r3, #0
}
 8008418:	4618      	mov	r0, r3
 800841a:	3708      	adds	r7, #8
 800841c:	46bd      	mov	sp, r7
 800841e:	bd80      	pop	{r7, pc}

08008420 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8008420:	b480      	push	{r7}
 8008422:	b083      	sub	sp, #12
 8008424:	af00      	add	r7, sp, #0
 8008426:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	f003 0303 	and.w	r3, r3, #3
}
 8008430:	4618      	mov	r0, r3
 8008432:	370c      	adds	r7, #12
 8008434:	46bd      	mov	sp, r7
 8008436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800843a:	4770      	bx	lr

0800843c <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800843c:	b480      	push	{r7}
 800843e:	b085      	sub	sp, #20
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]
 8008444:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8008446:	2300      	movs	r3, #0
 8008448:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800844a:	683b      	ldr	r3, [r7, #0]
 800844c:	681a      	ldr	r2, [r3, #0]
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008452:	683b      	ldr	r3, [r7, #0]
 8008454:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8008456:	683b      	ldr	r3, [r7, #0]
 8008458:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800845a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800845c:	683b      	ldr	r3, [r7, #0]
 800845e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8008460:	431a      	orrs	r2, r3
                       Command->CPSM);
 8008462:	683b      	ldr	r3, [r7, #0]
 8008464:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8008466:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008468:	68fa      	ldr	r2, [r7, #12]
 800846a:	4313      	orrs	r3, r2
 800846c:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	68da      	ldr	r2, [r3, #12]
 8008472:	4b06      	ldr	r3, [pc, #24]	; (800848c <SDMMC_SendCommand+0x50>)
 8008474:	4013      	ands	r3, r2
 8008476:	68fa      	ldr	r2, [r7, #12]
 8008478:	431a      	orrs	r2, r3
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800847e:	2300      	movs	r3, #0
}
 8008480:	4618      	mov	r0, r3
 8008482:	3714      	adds	r7, #20
 8008484:	46bd      	mov	sp, r7
 8008486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848a:	4770      	bx	lr
 800848c:	fffee0c0 	.word	0xfffee0c0

08008490 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8008490:	b480      	push	{r7}
 8008492:	b083      	sub	sp, #12
 8008494:	af00      	add	r7, sp, #0
 8008496:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	691b      	ldr	r3, [r3, #16]
 800849c:	b2db      	uxtb	r3, r3
}
 800849e:	4618      	mov	r0, r3
 80084a0:	370c      	adds	r7, #12
 80084a2:	46bd      	mov	sp, r7
 80084a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a8:	4770      	bx	lr

080084aa <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 80084aa:	b480      	push	{r7}
 80084ac:	b085      	sub	sp, #20
 80084ae:	af00      	add	r7, sp, #0
 80084b0:	6078      	str	r0, [r7, #4]
 80084b2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	3314      	adds	r3, #20
 80084b8:	461a      	mov	r2, r3
 80084ba:	683b      	ldr	r3, [r7, #0]
 80084bc:	4413      	add	r3, r2
 80084be:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	681b      	ldr	r3, [r3, #0]
}
 80084c4:	4618      	mov	r0, r3
 80084c6:	3714      	adds	r7, #20
 80084c8:	46bd      	mov	sp, r7
 80084ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ce:	4770      	bx	lr

080084d0 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 80084d0:	b480      	push	{r7}
 80084d2:	b085      	sub	sp, #20
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	6078      	str	r0, [r7, #4]
 80084d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80084da:	2300      	movs	r3, #0
 80084dc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 80084de:	683b      	ldr	r3, [r7, #0]
 80084e0:	681a      	ldr	r2, [r3, #0]
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 80084e6:	683b      	ldr	r3, [r7, #0]
 80084e8:	685a      	ldr	r2, [r3, #4]
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80084ee:	683b      	ldr	r3, [r7, #0]
 80084f0:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80084f2:	683b      	ldr	r3, [r7, #0]
 80084f4:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80084f6:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80084f8:	683b      	ldr	r3, [r7, #0]
 80084fa:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80084fc:	431a      	orrs	r2, r3
                       Data->DPSM);
 80084fe:	683b      	ldr	r3, [r7, #0]
 8008500:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8008502:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008504:	68fa      	ldr	r2, [r7, #12]
 8008506:	4313      	orrs	r3, r2
 8008508:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800850e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	431a      	orrs	r2, r3
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800851a:	2300      	movs	r3, #0

}
 800851c:	4618      	mov	r0, r3
 800851e:	3714      	adds	r7, #20
 8008520:	46bd      	mov	sp, r7
 8008522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008526:	4770      	bx	lr

08008528 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8008528:	b580      	push	{r7, lr}
 800852a:	b088      	sub	sp, #32
 800852c:	af00      	add	r7, sp, #0
 800852e:	6078      	str	r0, [r7, #4]
 8008530:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8008532:	683b      	ldr	r3, [r7, #0]
 8008534:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8008536:	2310      	movs	r3, #16
 8008538:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800853a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800853e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008540:	2300      	movs	r3, #0
 8008542:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008544:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008548:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800854a:	f107 0308 	add.w	r3, r7, #8
 800854e:	4619      	mov	r1, r3
 8008550:	6878      	ldr	r0, [r7, #4]
 8008552:	f7ff ff73 	bl	800843c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8008556:	f241 3288 	movw	r2, #5000	; 0x1388
 800855a:	2110      	movs	r1, #16
 800855c:	6878      	ldr	r0, [r7, #4]
 800855e:	f000 fa7b 	bl	8008a58 <SDMMC_GetCmdResp1>
 8008562:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008564:	69fb      	ldr	r3, [r7, #28]
}
 8008566:	4618      	mov	r0, r3
 8008568:	3720      	adds	r7, #32
 800856a:	46bd      	mov	sp, r7
 800856c:	bd80      	pop	{r7, pc}

0800856e <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800856e:	b580      	push	{r7, lr}
 8008570:	b088      	sub	sp, #32
 8008572:	af00      	add	r7, sp, #0
 8008574:	6078      	str	r0, [r7, #4]
 8008576:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8008578:	683b      	ldr	r3, [r7, #0]
 800857a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800857c:	2311      	movs	r3, #17
 800857e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008580:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008584:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008586:	2300      	movs	r3, #0
 8008588:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800858a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800858e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008590:	f107 0308 	add.w	r3, r7, #8
 8008594:	4619      	mov	r1, r3
 8008596:	6878      	ldr	r0, [r7, #4]
 8008598:	f7ff ff50 	bl	800843c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800859c:	f241 3288 	movw	r2, #5000	; 0x1388
 80085a0:	2111      	movs	r1, #17
 80085a2:	6878      	ldr	r0, [r7, #4]
 80085a4:	f000 fa58 	bl	8008a58 <SDMMC_GetCmdResp1>
 80085a8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80085aa:	69fb      	ldr	r3, [r7, #28]
}
 80085ac:	4618      	mov	r0, r3
 80085ae:	3720      	adds	r7, #32
 80085b0:	46bd      	mov	sp, r7
 80085b2:	bd80      	pop	{r7, pc}

080085b4 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80085b4:	b580      	push	{r7, lr}
 80085b6:	b088      	sub	sp, #32
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	6078      	str	r0, [r7, #4]
 80085bc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80085be:	683b      	ldr	r3, [r7, #0]
 80085c0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80085c2:	2312      	movs	r3, #18
 80085c4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80085c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80085ca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80085cc:	2300      	movs	r3, #0
 80085ce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80085d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80085d4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80085d6:	f107 0308 	add.w	r3, r7, #8
 80085da:	4619      	mov	r1, r3
 80085dc:	6878      	ldr	r0, [r7, #4]
 80085de:	f7ff ff2d 	bl	800843c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80085e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80085e6:	2112      	movs	r1, #18
 80085e8:	6878      	ldr	r0, [r7, #4]
 80085ea:	f000 fa35 	bl	8008a58 <SDMMC_GetCmdResp1>
 80085ee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80085f0:	69fb      	ldr	r3, [r7, #28]
}
 80085f2:	4618      	mov	r0, r3
 80085f4:	3720      	adds	r7, #32
 80085f6:	46bd      	mov	sp, r7
 80085f8:	bd80      	pop	{r7, pc}

080085fa <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80085fa:	b580      	push	{r7, lr}
 80085fc:	b088      	sub	sp, #32
 80085fe:	af00      	add	r7, sp, #0
 8008600:	6078      	str	r0, [r7, #4]
 8008602:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8008604:	683b      	ldr	r3, [r7, #0]
 8008606:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8008608:	2318      	movs	r3, #24
 800860a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800860c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008610:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008612:	2300      	movs	r3, #0
 8008614:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008616:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800861a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800861c:	f107 0308 	add.w	r3, r7, #8
 8008620:	4619      	mov	r1, r3
 8008622:	6878      	ldr	r0, [r7, #4]
 8008624:	f7ff ff0a 	bl	800843c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8008628:	f241 3288 	movw	r2, #5000	; 0x1388
 800862c:	2118      	movs	r1, #24
 800862e:	6878      	ldr	r0, [r7, #4]
 8008630:	f000 fa12 	bl	8008a58 <SDMMC_GetCmdResp1>
 8008634:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008636:	69fb      	ldr	r3, [r7, #28]
}
 8008638:	4618      	mov	r0, r3
 800863a:	3720      	adds	r7, #32
 800863c:	46bd      	mov	sp, r7
 800863e:	bd80      	pop	{r7, pc}

08008640 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8008640:	b580      	push	{r7, lr}
 8008642:	b088      	sub	sp, #32
 8008644:	af00      	add	r7, sp, #0
 8008646:	6078      	str	r0, [r7, #4]
 8008648:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800864a:	683b      	ldr	r3, [r7, #0]
 800864c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800864e:	2319      	movs	r3, #25
 8008650:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008652:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008656:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008658:	2300      	movs	r3, #0
 800865a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800865c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008660:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008662:	f107 0308 	add.w	r3, r7, #8
 8008666:	4619      	mov	r1, r3
 8008668:	6878      	ldr	r0, [r7, #4]
 800866a:	f7ff fee7 	bl	800843c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800866e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008672:	2119      	movs	r1, #25
 8008674:	6878      	ldr	r0, [r7, #4]
 8008676:	f000 f9ef 	bl	8008a58 <SDMMC_GetCmdResp1>
 800867a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800867c:	69fb      	ldr	r3, [r7, #28]
}
 800867e:	4618      	mov	r0, r3
 8008680:	3720      	adds	r7, #32
 8008682:	46bd      	mov	sp, r7
 8008684:	bd80      	pop	{r7, pc}
	...

08008688 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8008688:	b580      	push	{r7, lr}
 800868a:	b088      	sub	sp, #32
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8008690:	2300      	movs	r3, #0
 8008692:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8008694:	230c      	movs	r3, #12
 8008696:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008698:	f44f 7380 	mov.w	r3, #256	; 0x100
 800869c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800869e:	2300      	movs	r3, #0
 80086a0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80086a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80086a6:	61bb      	str	r3, [r7, #24]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	68db      	ldr	r3, [r3, #12]
 80086ac:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	68db      	ldr	r3, [r3, #12]
 80086b8:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80086c0:	f107 0308 	add.w	r3, r7, #8
 80086c4:	4619      	mov	r1, r3
 80086c6:	6878      	ldr	r0, [r7, #4]
 80086c8:	f7ff feb8 	bl	800843c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 80086cc:	4a08      	ldr	r2, [pc, #32]	; (80086f0 <SDMMC_CmdStopTransfer+0x68>)
 80086ce:	210c      	movs	r1, #12
 80086d0:	6878      	ldr	r0, [r7, #4]
 80086d2:	f000 f9c1 	bl	8008a58 <SDMMC_GetCmdResp1>
 80086d6:	61f8      	str	r0, [r7, #28]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	68db      	ldr	r3, [r3, #12]
 80086dc:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  return errorstate;
 80086e4:	69fb      	ldr	r3, [r7, #28]
}
 80086e6:	4618      	mov	r0, r3
 80086e8:	3720      	adds	r7, #32
 80086ea:	46bd      	mov	sp, r7
 80086ec:	bd80      	pop	{r7, pc}
 80086ee:	bf00      	nop
 80086f0:	05f5e100 	.word	0x05f5e100

080086f4 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  addr Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 80086f4:	b580      	push	{r7, lr}
 80086f6:	b08a      	sub	sp, #40	; 0x28
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	60f8      	str	r0, [r7, #12]
 80086fc:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8008700:	683b      	ldr	r3, [r7, #0]
 8008702:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8008704:	2307      	movs	r3, #7
 8008706:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008708:	f44f 7380 	mov.w	r3, #256	; 0x100
 800870c:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800870e:	2300      	movs	r3, #0
 8008710:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008712:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008716:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008718:	f107 0310 	add.w	r3, r7, #16
 800871c:	4619      	mov	r1, r3
 800871e:	68f8      	ldr	r0, [r7, #12]
 8008720:	f7ff fe8c 	bl	800843c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8008724:	f241 3288 	movw	r2, #5000	; 0x1388
 8008728:	2107      	movs	r1, #7
 800872a:	68f8      	ldr	r0, [r7, #12]
 800872c:	f000 f994 	bl	8008a58 <SDMMC_GetCmdResp1>
 8008730:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8008732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008734:	4618      	mov	r0, r3
 8008736:	3728      	adds	r7, #40	; 0x28
 8008738:	46bd      	mov	sp, r7
 800873a:	bd80      	pop	{r7, pc}

0800873c <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800873c:	b580      	push	{r7, lr}
 800873e:	b088      	sub	sp, #32
 8008740:	af00      	add	r7, sp, #0
 8008742:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8008744:	2300      	movs	r3, #0
 8008746:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8008748:	2300      	movs	r3, #0
 800874a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800874c:	2300      	movs	r3, #0
 800874e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008750:	2300      	movs	r3, #0
 8008752:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008754:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008758:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800875a:	f107 0308 	add.w	r3, r7, #8
 800875e:	4619      	mov	r1, r3
 8008760:	6878      	ldr	r0, [r7, #4]
 8008762:	f7ff fe6b 	bl	800843c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8008766:	6878      	ldr	r0, [r7, #4]
 8008768:	f000 fbb8 	bl	8008edc <SDMMC_GetCmdError>
 800876c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800876e:	69fb      	ldr	r3, [r7, #28]
}
 8008770:	4618      	mov	r0, r3
 8008772:	3720      	adds	r7, #32
 8008774:	46bd      	mov	sp, r7
 8008776:	bd80      	pop	{r7, pc}

08008778 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8008778:	b580      	push	{r7, lr}
 800877a:	b088      	sub	sp, #32
 800877c:	af00      	add	r7, sp, #0
 800877e:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8008780:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8008784:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8008786:	2308      	movs	r3, #8
 8008788:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800878a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800878e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008790:	2300      	movs	r3, #0
 8008792:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008794:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008798:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800879a:	f107 0308 	add.w	r3, r7, #8
 800879e:	4619      	mov	r1, r3
 80087a0:	6878      	ldr	r0, [r7, #4]
 80087a2:	f7ff fe4b 	bl	800843c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 80087a6:	6878      	ldr	r0, [r7, #4]
 80087a8:	f000 fb4a 	bl	8008e40 <SDMMC_GetCmdResp7>
 80087ac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80087ae:	69fb      	ldr	r3, [r7, #28]
}
 80087b0:	4618      	mov	r0, r3
 80087b2:	3720      	adds	r7, #32
 80087b4:	46bd      	mov	sp, r7
 80087b6:	bd80      	pop	{r7, pc}

080087b8 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80087b8:	b580      	push	{r7, lr}
 80087ba:	b088      	sub	sp, #32
 80087bc:	af00      	add	r7, sp, #0
 80087be:	6078      	str	r0, [r7, #4]
 80087c0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80087c2:	683b      	ldr	r3, [r7, #0]
 80087c4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80087c6:	2337      	movs	r3, #55	; 0x37
 80087c8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80087ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80087ce:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80087d0:	2300      	movs	r3, #0
 80087d2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80087d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80087d8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80087da:	f107 0308 	add.w	r3, r7, #8
 80087de:	4619      	mov	r1, r3
 80087e0:	6878      	ldr	r0, [r7, #4]
 80087e2:	f7ff fe2b 	bl	800843c <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 80087e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80087ea:	2137      	movs	r1, #55	; 0x37
 80087ec:	6878      	ldr	r0, [r7, #4]
 80087ee:	f000 f933 	bl	8008a58 <SDMMC_GetCmdResp1>
 80087f2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80087f4:	69fb      	ldr	r3, [r7, #28]
}
 80087f6:	4618      	mov	r0, r3
 80087f8:	3720      	adds	r7, #32
 80087fa:	46bd      	mov	sp, r7
 80087fc:	bd80      	pop	{r7, pc}

080087fe <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80087fe:	b580      	push	{r7, lr}
 8008800:	b088      	sub	sp, #32
 8008802:	af00      	add	r7, sp, #0
 8008804:	6078      	str	r0, [r7, #4]
 8008806:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  sdmmc_cmdinit.Argument         = Argument;
 8008808:	683b      	ldr	r3, [r7, #0]
 800880a:	60bb      	str	r3, [r7, #8]
#else
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800880c:	2329      	movs	r3, #41	; 0x29
 800880e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008810:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008814:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008816:	2300      	movs	r3, #0
 8008818:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800881a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800881e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008820:	f107 0308 	add.w	r3, r7, #8
 8008824:	4619      	mov	r1, r3
 8008826:	6878      	ldr	r0, [r7, #4]
 8008828:	f7ff fe08 	bl	800843c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800882c:	6878      	ldr	r0, [r7, #4]
 800882e:	f000 fa4f 	bl	8008cd0 <SDMMC_GetCmdResp3>
 8008832:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008834:	69fb      	ldr	r3, [r7, #28]
}
 8008836:	4618      	mov	r0, r3
 8008838:	3720      	adds	r7, #32
 800883a:	46bd      	mov	sp, r7
 800883c:	bd80      	pop	{r7, pc}

0800883e <SDMMC_CmdBusWidth>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  BusWidth BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800883e:	b580      	push	{r7, lr}
 8008840:	b088      	sub	sp, #32
 8008842:	af00      	add	r7, sp, #0
 8008844:	6078      	str	r0, [r7, #4]
 8008846:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8008848:	683b      	ldr	r3, [r7, #0]
 800884a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800884c:	2306      	movs	r3, #6
 800884e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008850:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008854:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008856:	2300      	movs	r3, #0
 8008858:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800885a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800885e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008860:	f107 0308 	add.w	r3, r7, #8
 8008864:	4619      	mov	r1, r3
 8008866:	6878      	ldr	r0, [r7, #4]
 8008868:	f7ff fde8 	bl	800843c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800886c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008870:	2106      	movs	r1, #6
 8008872:	6878      	ldr	r0, [r7, #4]
 8008874:	f000 f8f0 	bl	8008a58 <SDMMC_GetCmdResp1>
 8008878:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800887a:	69fb      	ldr	r3, [r7, #28]
}
 800887c:	4618      	mov	r0, r3
 800887e:	3720      	adds	r7, #32
 8008880:	46bd      	mov	sp, r7
 8008882:	bd80      	pop	{r7, pc}

08008884 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8008884:	b580      	push	{r7, lr}
 8008886:	b088      	sub	sp, #32
 8008888:	af00      	add	r7, sp, #0
 800888a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800888c:	2300      	movs	r3, #0
 800888e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8008890:	2333      	movs	r3, #51	; 0x33
 8008892:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008894:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008898:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800889a:	2300      	movs	r3, #0
 800889c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800889e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80088a2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80088a4:	f107 0308 	add.w	r3, r7, #8
 80088a8:	4619      	mov	r1, r3
 80088aa:	6878      	ldr	r0, [r7, #4]
 80088ac:	f7ff fdc6 	bl	800843c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 80088b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80088b4:	2133      	movs	r1, #51	; 0x33
 80088b6:	6878      	ldr	r0, [r7, #4]
 80088b8:	f000 f8ce 	bl	8008a58 <SDMMC_GetCmdResp1>
 80088bc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80088be:	69fb      	ldr	r3, [r7, #28]
}
 80088c0:	4618      	mov	r0, r3
 80088c2:	3720      	adds	r7, #32
 80088c4:	46bd      	mov	sp, r7
 80088c6:	bd80      	pop	{r7, pc}

080088c8 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 80088c8:	b580      	push	{r7, lr}
 80088ca:	b088      	sub	sp, #32
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80088d0:	2300      	movs	r3, #0
 80088d2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80088d4:	2302      	movs	r3, #2
 80088d6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80088d8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80088dc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80088de:	2300      	movs	r3, #0
 80088e0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80088e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80088e6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80088e8:	f107 0308 	add.w	r3, r7, #8
 80088ec:	4619      	mov	r1, r3
 80088ee:	6878      	ldr	r0, [r7, #4]
 80088f0:	f7ff fda4 	bl	800843c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80088f4:	6878      	ldr	r0, [r7, #4]
 80088f6:	f000 f9a1 	bl	8008c3c <SDMMC_GetCmdResp2>
 80088fa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80088fc:	69fb      	ldr	r3, [r7, #28]
}
 80088fe:	4618      	mov	r0, r3
 8008900:	3720      	adds	r7, #32
 8008902:	46bd      	mov	sp, r7
 8008904:	bd80      	pop	{r7, pc}

08008906 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008906:	b580      	push	{r7, lr}
 8008908:	b088      	sub	sp, #32
 800890a:	af00      	add	r7, sp, #0
 800890c:	6078      	str	r0, [r7, #4]
 800890e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8008910:	683b      	ldr	r3, [r7, #0]
 8008912:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8008914:	2309      	movs	r3, #9
 8008916:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8008918:	f44f 7340 	mov.w	r3, #768	; 0x300
 800891c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800891e:	2300      	movs	r3, #0
 8008920:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008922:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008926:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008928:	f107 0308 	add.w	r3, r7, #8
 800892c:	4619      	mov	r1, r3
 800892e:	6878      	ldr	r0, [r7, #4]
 8008930:	f7ff fd84 	bl	800843c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8008934:	6878      	ldr	r0, [r7, #4]
 8008936:	f000 f981 	bl	8008c3c <SDMMC_GetCmdResp2>
 800893a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800893c:	69fb      	ldr	r3, [r7, #28]
}
 800893e:	4618      	mov	r0, r3
 8008940:	3720      	adds	r7, #32
 8008942:	46bd      	mov	sp, r7
 8008944:	bd80      	pop	{r7, pc}

08008946 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pRCA Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8008946:	b580      	push	{r7, lr}
 8008948:	b088      	sub	sp, #32
 800894a:	af00      	add	r7, sp, #0
 800894c:	6078      	str	r0, [r7, #4]
 800894e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8008950:	2300      	movs	r3, #0
 8008952:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8008954:	2303      	movs	r3, #3
 8008956:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008958:	f44f 7380 	mov.w	r3, #256	; 0x100
 800895c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800895e:	2300      	movs	r3, #0
 8008960:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008962:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008966:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008968:	f107 0308 	add.w	r3, r7, #8
 800896c:	4619      	mov	r1, r3
 800896e:	6878      	ldr	r0, [r7, #4]
 8008970:	f7ff fd64 	bl	800843c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8008974:	683a      	ldr	r2, [r7, #0]
 8008976:	2103      	movs	r1, #3
 8008978:	6878      	ldr	r0, [r7, #4]
 800897a:	f000 f9e9 	bl	8008d50 <SDMMC_GetCmdResp6>
 800897e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008980:	69fb      	ldr	r3, [r7, #28]
}
 8008982:	4618      	mov	r0, r3
 8008984:	3720      	adds	r7, #32
 8008986:	46bd      	mov	sp, r7
 8008988:	bd80      	pop	{r7, pc}

0800898a <SDMMC_CmdSendStatus>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800898a:	b580      	push	{r7, lr}
 800898c:	b088      	sub	sp, #32
 800898e:	af00      	add	r7, sp, #0
 8008990:	6078      	str	r0, [r7, #4]
 8008992:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8008994:	683b      	ldr	r3, [r7, #0]
 8008996:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8008998:	230d      	movs	r3, #13
 800899a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800899c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80089a0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80089a2:	2300      	movs	r3, #0
 80089a4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80089a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80089aa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80089ac:	f107 0308 	add.w	r3, r7, #8
 80089b0:	4619      	mov	r1, r3
 80089b2:	6878      	ldr	r0, [r7, #4]
 80089b4:	f7ff fd42 	bl	800843c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 80089b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80089bc:	210d      	movs	r1, #13
 80089be:	6878      	ldr	r0, [r7, #4]
 80089c0:	f000 f84a 	bl	8008a58 <SDMMC_GetCmdResp1>
 80089c4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80089c6:	69fb      	ldr	r3, [r7, #28]
}
 80089c8:	4618      	mov	r0, r3
 80089ca:	3720      	adds	r7, #32
 80089cc:	46bd      	mov	sp, r7
 80089ce:	bd80      	pop	{r7, pc}

080089d0 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 80089d0:	b580      	push	{r7, lr}
 80089d2:	b088      	sub	sp, #32
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 80089d8:	2300      	movs	r3, #0
 80089da:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 80089dc:	230d      	movs	r3, #13
 80089de:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80089e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80089e4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80089e6:	2300      	movs	r3, #0
 80089e8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80089ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80089ee:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80089f0:	f107 0308 	add.w	r3, r7, #8
 80089f4:	4619      	mov	r1, r3
 80089f6:	6878      	ldr	r0, [r7, #4]
 80089f8:	f7ff fd20 	bl	800843c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 80089fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8008a00:	210d      	movs	r1, #13
 8008a02:	6878      	ldr	r0, [r7, #4]
 8008a04:	f000 f828 	bl	8008a58 <SDMMC_GetCmdResp1>
 8008a08:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008a0a:	69fb      	ldr	r3, [r7, #28]
}
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	3720      	adds	r7, #32
 8008a10:	46bd      	mov	sp, r7
 8008a12:	bd80      	pop	{r7, pc}

08008a14 <SDMMC_CmdVoltageSwitch>:
  *         condition register (OCR)
  * @param  None
  * @retval HAL status
  */
uint32_t SDMMC_CmdVoltageSwitch(SDMMC_TypeDef *SDMMCx)
{
 8008a14:	b580      	push	{r7, lr}
 8008a16:	b088      	sub	sp, #32
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0x00000000;
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 8008a20:	230b      	movs	r3, #11
 8008a22:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008a24:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008a28:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008a2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008a32:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008a34:	f107 0308 	add.w	r3, r7, #8
 8008a38:	4619      	mov	r1, r3
 8008a3a:	6878      	ldr	r0, [r7, #4]
 8008a3c:	f7ff fcfe 	bl	800843c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 8008a40:	f241 3288 	movw	r2, #5000	; 0x1388
 8008a44:	210b      	movs	r1, #11
 8008a46:	6878      	ldr	r0, [r7, #4]
 8008a48:	f000 f806 	bl	8008a58 <SDMMC_GetCmdResp1>
 8008a4c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008a4e:	69fb      	ldr	r3, [r7, #28]
}
 8008a50:	4618      	mov	r0, r3
 8008a52:	3720      	adds	r7, #32
 8008a54:	46bd      	mov	sp, r7
 8008a56:	bd80      	pop	{r7, pc}

08008a58 <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8008a58:	b580      	push	{r7, lr}
 8008a5a:	b088      	sub	sp, #32
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	60f8      	str	r0, [r7, #12]
 8008a60:	460b      	mov	r3, r1
 8008a62:	607a      	str	r2, [r7, #4]
 8008a64:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8008a66:	4b70      	ldr	r3, [pc, #448]	; (8008c28 <SDMMC_GetCmdResp1+0x1d0>)
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	4a70      	ldr	r2, [pc, #448]	; (8008c2c <SDMMC_GetCmdResp1+0x1d4>)
 8008a6c:	fba2 2303 	umull	r2, r3, r2, r3
 8008a70:	0a5a      	lsrs	r2, r3, #9
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	fb02 f303 	mul.w	r3, r2, r3
 8008a78:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8008a7a:	69fb      	ldr	r3, [r7, #28]
 8008a7c:	1e5a      	subs	r2, r3, #1
 8008a7e:	61fa      	str	r2, [r7, #28]
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d102      	bne.n	8008a8a <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008a84:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008a88:	e0c9      	b.n	8008c1e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a8e:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8008a90:	69ba      	ldr	r2, [r7, #24]
 8008a92:	4b67      	ldr	r3, [pc, #412]	; (8008c30 <SDMMC_GetCmdResp1+0x1d8>)
 8008a94:	4013      	ands	r3, r2
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d0ef      	beq.n	8008a7a <SDMMC_GetCmdResp1+0x22>
 8008a9a:	69bb      	ldr	r3, [r7, #24]
 8008a9c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d1ea      	bne.n	8008a7a <SDMMC_GetCmdResp1+0x22>
#else
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008aa8:	f003 0304 	and.w	r3, r3, #4
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d004      	beq.n	8008aba <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	2204      	movs	r2, #4
 8008ab4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008ab6:	2304      	movs	r3, #4
 8008ab8:	e0b1      	b.n	8008c1e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008abe:	f003 0301 	and.w	r3, r3, #1
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d004      	beq.n	8008ad0 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	2201      	movs	r2, #1
 8008aca:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008acc:	2301      	movs	r3, #1
 8008ace:	e0a6      	b.n	8008c1e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	4a58      	ldr	r2, [pc, #352]	; (8008c34 <SDMMC_GetCmdResp1+0x1dc>)
 8008ad4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8008ad6:	68f8      	ldr	r0, [r7, #12]
 8008ad8:	f7ff fcda 	bl	8008490 <SDMMC_GetCommandResponse>
 8008adc:	4603      	mov	r3, r0
 8008ade:	461a      	mov	r2, r3
 8008ae0:	7afb      	ldrb	r3, [r7, #11]
 8008ae2:	4293      	cmp	r3, r2
 8008ae4:	d001      	beq.n	8008aea <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008ae6:	2301      	movs	r3, #1
 8008ae8:	e099      	b.n	8008c1e <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8008aea:	2100      	movs	r1, #0
 8008aec:	68f8      	ldr	r0, [r7, #12]
 8008aee:	f7ff fcdc 	bl	80084aa <SDMMC_GetResponse>
 8008af2:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8008af4:	697a      	ldr	r2, [r7, #20]
 8008af6:	4b50      	ldr	r3, [pc, #320]	; (8008c38 <SDMMC_GetCmdResp1+0x1e0>)
 8008af8:	4013      	ands	r3, r2
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d101      	bne.n	8008b02 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8008afe:	2300      	movs	r3, #0
 8008b00:	e08d      	b.n	8008c1e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8008b02:	697b      	ldr	r3, [r7, #20]
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	da02      	bge.n	8008b0e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8008b08:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008b0c:	e087      	b.n	8008c1e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8008b0e:	697b      	ldr	r3, [r7, #20]
 8008b10:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d001      	beq.n	8008b1c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8008b18:	2340      	movs	r3, #64	; 0x40
 8008b1a:	e080      	b.n	8008c1e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8008b1c:	697b      	ldr	r3, [r7, #20]
 8008b1e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d001      	beq.n	8008b2a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8008b26:	2380      	movs	r3, #128	; 0x80
 8008b28:	e079      	b.n	8008c1e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8008b2a:	697b      	ldr	r3, [r7, #20]
 8008b2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d002      	beq.n	8008b3a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8008b34:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008b38:	e071      	b.n	8008c1e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8008b3a:	697b      	ldr	r3, [r7, #20]
 8008b3c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d002      	beq.n	8008b4a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8008b44:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008b48:	e069      	b.n	8008c1e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8008b4a:	697b      	ldr	r3, [r7, #20]
 8008b4c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d002      	beq.n	8008b5a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8008b54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008b58:	e061      	b.n	8008c1e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8008b5a:	697b      	ldr	r3, [r7, #20]
 8008b5c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d002      	beq.n	8008b6a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8008b64:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008b68:	e059      	b.n	8008c1e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8008b6a:	697b      	ldr	r3, [r7, #20]
 8008b6c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d002      	beq.n	8008b7a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8008b74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008b78:	e051      	b.n	8008c1e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8008b7a:	697b      	ldr	r3, [r7, #20]
 8008b7c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d002      	beq.n	8008b8a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8008b84:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008b88:	e049      	b.n	8008c1e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8008b8a:	697b      	ldr	r3, [r7, #20]
 8008b8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d002      	beq.n	8008b9a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8008b94:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008b98:	e041      	b.n	8008c1e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8008b9a:	697b      	ldr	r3, [r7, #20]
 8008b9c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d002      	beq.n	8008baa <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8008ba4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008ba8:	e039      	b.n	8008c1e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8008baa:	697b      	ldr	r3, [r7, #20]
 8008bac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d002      	beq.n	8008bba <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8008bb4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008bb8:	e031      	b.n	8008c1e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8008bba:	697b      	ldr	r3, [r7, #20]
 8008bbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d002      	beq.n	8008bca <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8008bc4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008bc8:	e029      	b.n	8008c1e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8008bca:	697b      	ldr	r3, [r7, #20]
 8008bcc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d002      	beq.n	8008bda <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8008bd4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008bd8:	e021      	b.n	8008c1e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8008bda:	697b      	ldr	r3, [r7, #20]
 8008bdc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d002      	beq.n	8008bea <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8008be4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008be8:	e019      	b.n	8008c1e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8008bea:	697b      	ldr	r3, [r7, #20]
 8008bec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d002      	beq.n	8008bfa <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8008bf4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008bf8:	e011      	b.n	8008c1e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8008bfa:	697b      	ldr	r3, [r7, #20]
 8008bfc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d002      	beq.n	8008c0a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8008c04:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8008c08:	e009      	b.n	8008c1e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8008c0a:	697b      	ldr	r3, [r7, #20]
 8008c0c:	f003 0308 	and.w	r3, r3, #8
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d002      	beq.n	8008c1a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8008c14:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8008c18:	e001      	b.n	8008c1e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8008c1a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8008c1e:	4618      	mov	r0, r3
 8008c20:	3720      	adds	r7, #32
 8008c22:	46bd      	mov	sp, r7
 8008c24:	bd80      	pop	{r7, pc}
 8008c26:	bf00      	nop
 8008c28:	20000000 	.word	0x20000000
 8008c2c:	10624dd3 	.word	0x10624dd3
 8008c30:	00200045 	.word	0x00200045
 8008c34:	002000c5 	.word	0x002000c5
 8008c38:	fdffe008 	.word	0xfdffe008

08008c3c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8008c3c:	b480      	push	{r7}
 8008c3e:	b085      	sub	sp, #20
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008c44:	4b1f      	ldr	r3, [pc, #124]	; (8008cc4 <SDMMC_GetCmdResp2+0x88>)
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	4a1f      	ldr	r2, [pc, #124]	; (8008cc8 <SDMMC_GetCmdResp2+0x8c>)
 8008c4a:	fba2 2303 	umull	r2, r3, r2, r3
 8008c4e:	0a5b      	lsrs	r3, r3, #9
 8008c50:	f241 3288 	movw	r2, #5000	; 0x1388
 8008c54:	fb02 f303 	mul.w	r3, r2, r3
 8008c58:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	1e5a      	subs	r2, r3, #1
 8008c5e:	60fa      	str	r2, [r7, #12]
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d102      	bne.n	8008c6a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008c64:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008c68:	e026      	b.n	8008cb8 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c6e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008c70:	68bb      	ldr	r3, [r7, #8]
 8008c72:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d0ef      	beq.n	8008c5a <SDMMC_GetCmdResp2+0x1e>
 8008c7a:	68bb      	ldr	r3, [r7, #8]
 8008c7c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d1ea      	bne.n	8008c5a <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c88:	f003 0304 	and.w	r3, r3, #4
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d004      	beq.n	8008c9a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	2204      	movs	r2, #4
 8008c94:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008c96:	2304      	movs	r3, #4
 8008c98:	e00e      	b.n	8008cb8 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c9e:	f003 0301 	and.w	r3, r3, #1
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d004      	beq.n	8008cb0 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	2201      	movs	r2, #1
 8008caa:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008cac:	2301      	movs	r3, #1
 8008cae:	e003      	b.n	8008cb8 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	4a06      	ldr	r2, [pc, #24]	; (8008ccc <SDMMC_GetCmdResp2+0x90>)
 8008cb4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8008cb6:	2300      	movs	r3, #0
}
 8008cb8:	4618      	mov	r0, r3
 8008cba:	3714      	adds	r7, #20
 8008cbc:	46bd      	mov	sp, r7
 8008cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc2:	4770      	bx	lr
 8008cc4:	20000000 	.word	0x20000000
 8008cc8:	10624dd3 	.word	0x10624dd3
 8008ccc:	002000c5 	.word	0x002000c5

08008cd0 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8008cd0:	b480      	push	{r7}
 8008cd2:	b085      	sub	sp, #20
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008cd8:	4b1a      	ldr	r3, [pc, #104]	; (8008d44 <SDMMC_GetCmdResp3+0x74>)
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	4a1a      	ldr	r2, [pc, #104]	; (8008d48 <SDMMC_GetCmdResp3+0x78>)
 8008cde:	fba2 2303 	umull	r2, r3, r2, r3
 8008ce2:	0a5b      	lsrs	r3, r3, #9
 8008ce4:	f241 3288 	movw	r2, #5000	; 0x1388
 8008ce8:	fb02 f303 	mul.w	r3, r2, r3
 8008cec:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	1e5a      	subs	r2, r3, #1
 8008cf2:	60fa      	str	r2, [r7, #12]
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d102      	bne.n	8008cfe <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008cf8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008cfc:	e01b      	b.n	8008d36 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d02:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008d04:	68bb      	ldr	r3, [r7, #8]
 8008d06:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d0ef      	beq.n	8008cee <SDMMC_GetCmdResp3+0x1e>
 8008d0e:	68bb      	ldr	r3, [r7, #8]
 8008d10:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d1ea      	bne.n	8008cee <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d1c:	f003 0304 	and.w	r3, r3, #4
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d004      	beq.n	8008d2e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	2204      	movs	r2, #4
 8008d28:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008d2a:	2304      	movs	r3, #4
 8008d2c:	e003      	b.n	8008d36 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	4a06      	ldr	r2, [pc, #24]	; (8008d4c <SDMMC_GetCmdResp3+0x7c>)
 8008d32:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8008d34:	2300      	movs	r3, #0
}
 8008d36:	4618      	mov	r0, r3
 8008d38:	3714      	adds	r7, #20
 8008d3a:	46bd      	mov	sp, r7
 8008d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d40:	4770      	bx	lr
 8008d42:	bf00      	nop
 8008d44:	20000000 	.word	0x20000000
 8008d48:	10624dd3 	.word	0x10624dd3
 8008d4c:	002000c5 	.word	0x002000c5

08008d50 <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8008d50:	b580      	push	{r7, lr}
 8008d52:	b088      	sub	sp, #32
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	60f8      	str	r0, [r7, #12]
 8008d58:	460b      	mov	r3, r1
 8008d5a:	607a      	str	r2, [r7, #4]
 8008d5c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008d5e:	4b35      	ldr	r3, [pc, #212]	; (8008e34 <SDMMC_GetCmdResp6+0xe4>)
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	4a35      	ldr	r2, [pc, #212]	; (8008e38 <SDMMC_GetCmdResp6+0xe8>)
 8008d64:	fba2 2303 	umull	r2, r3, r2, r3
 8008d68:	0a5b      	lsrs	r3, r3, #9
 8008d6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d6e:	fb02 f303 	mul.w	r3, r2, r3
 8008d72:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8008d74:	69fb      	ldr	r3, [r7, #28]
 8008d76:	1e5a      	subs	r2, r3, #1
 8008d78:	61fa      	str	r2, [r7, #28]
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d102      	bne.n	8008d84 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008d7e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008d82:	e052      	b.n	8008e2a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d88:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008d8a:	69bb      	ldr	r3, [r7, #24]
 8008d8c:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d0ef      	beq.n	8008d74 <SDMMC_GetCmdResp6+0x24>
 8008d94:	69bb      	ldr	r3, [r7, #24]
 8008d96:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d1ea      	bne.n	8008d74 <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008da2:	f003 0304 	and.w	r3, r3, #4
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d004      	beq.n	8008db4 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	2204      	movs	r2, #4
 8008dae:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008db0:	2304      	movs	r3, #4
 8008db2:	e03a      	b.n	8008e2a <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008db8:	f003 0301 	and.w	r3, r3, #1
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d004      	beq.n	8008dca <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	2201      	movs	r2, #1
 8008dc4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008dc6:	2301      	movs	r3, #1
 8008dc8:	e02f      	b.n	8008e2a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8008dca:	68f8      	ldr	r0, [r7, #12]
 8008dcc:	f7ff fb60 	bl	8008490 <SDMMC_GetCommandResponse>
 8008dd0:	4603      	mov	r3, r0
 8008dd2:	461a      	mov	r2, r3
 8008dd4:	7afb      	ldrb	r3, [r7, #11]
 8008dd6:	4293      	cmp	r3, r2
 8008dd8:	d001      	beq.n	8008dde <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008dda:	2301      	movs	r3, #1
 8008ddc:	e025      	b.n	8008e2a <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	4a16      	ldr	r2, [pc, #88]	; (8008e3c <SDMMC_GetCmdResp6+0xec>)
 8008de2:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8008de4:	2100      	movs	r1, #0
 8008de6:	68f8      	ldr	r0, [r7, #12]
 8008de8:	f7ff fb5f 	bl	80084aa <SDMMC_GetResponse>
 8008dec:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8008dee:	697b      	ldr	r3, [r7, #20]
 8008df0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d106      	bne.n	8008e06 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8008df8:	697b      	ldr	r3, [r7, #20]
 8008dfa:	0c1b      	lsrs	r3, r3, #16
 8008dfc:	b29a      	uxth	r2, r3
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 8008e02:	2300      	movs	r3, #0
 8008e04:	e011      	b.n	8008e2a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8008e06:	697b      	ldr	r3, [r7, #20]
 8008e08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d002      	beq.n	8008e16 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8008e10:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008e14:	e009      	b.n	8008e2a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8008e16:	697b      	ldr	r3, [r7, #20]
 8008e18:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d002      	beq.n	8008e26 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8008e20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008e24:	e001      	b.n	8008e2a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8008e26:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	3720      	adds	r7, #32
 8008e2e:	46bd      	mov	sp, r7
 8008e30:	bd80      	pop	{r7, pc}
 8008e32:	bf00      	nop
 8008e34:	20000000 	.word	0x20000000
 8008e38:	10624dd3 	.word	0x10624dd3
 8008e3c:	002000c5 	.word	0x002000c5

08008e40 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8008e40:	b480      	push	{r7}
 8008e42:	b085      	sub	sp, #20
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008e48:	4b22      	ldr	r3, [pc, #136]	; (8008ed4 <SDMMC_GetCmdResp7+0x94>)
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	4a22      	ldr	r2, [pc, #136]	; (8008ed8 <SDMMC_GetCmdResp7+0x98>)
 8008e4e:	fba2 2303 	umull	r2, r3, r2, r3
 8008e52:	0a5b      	lsrs	r3, r3, #9
 8008e54:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e58:	fb02 f303 	mul.w	r3, r2, r3
 8008e5c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	1e5a      	subs	r2, r3, #1
 8008e62:	60fa      	str	r2, [r7, #12]
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d102      	bne.n	8008e6e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008e68:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008e6c:	e02c      	b.n	8008ec8 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e72:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008e74:	68bb      	ldr	r3, [r7, #8]
 8008e76:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d0ef      	beq.n	8008e5e <SDMMC_GetCmdResp7+0x1e>
 8008e7e:	68bb      	ldr	r3, [r7, #8]
 8008e80:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d1ea      	bne.n	8008e5e <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e8c:	f003 0304 	and.w	r3, r3, #4
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d004      	beq.n	8008e9e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	2204      	movs	r2, #4
 8008e98:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008e9a:	2304      	movs	r3, #4
 8008e9c:	e014      	b.n	8008ec8 <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ea2:	f003 0301 	and.w	r3, r3, #1
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d004      	beq.n	8008eb4 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	2201      	movs	r2, #1
 8008eae:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008eb0:	2301      	movs	r3, #1
 8008eb2:	e009      	b.n	8008ec8 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008eb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d002      	beq.n	8008ec6 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	2240      	movs	r2, #64	; 0x40
 8008ec4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8008ec6:	2300      	movs	r3, #0

}
 8008ec8:	4618      	mov	r0, r3
 8008eca:	3714      	adds	r7, #20
 8008ecc:	46bd      	mov	sp, r7
 8008ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed2:	4770      	bx	lr
 8008ed4:	20000000 	.word	0x20000000
 8008ed8:	10624dd3 	.word	0x10624dd3

08008edc <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8008edc:	b480      	push	{r7}
 8008ede:	b085      	sub	sp, #20
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008ee4:	4b11      	ldr	r3, [pc, #68]	; (8008f2c <SDMMC_GetCmdError+0x50>)
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	4a11      	ldr	r2, [pc, #68]	; (8008f30 <SDMMC_GetCmdError+0x54>)
 8008eea:	fba2 2303 	umull	r2, r3, r2, r3
 8008eee:	0a5b      	lsrs	r3, r3, #9
 8008ef0:	f241 3288 	movw	r2, #5000	; 0x1388
 8008ef4:	fb02 f303 	mul.w	r3, r2, r3
 8008ef8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	1e5a      	subs	r2, r3, #1
 8008efe:	60fa      	str	r2, [r7, #12]
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d102      	bne.n	8008f0a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008f04:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008f08:	e009      	b.n	8008f1e <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d0f1      	beq.n	8008efa <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	4a06      	ldr	r2, [pc, #24]	; (8008f34 <SDMMC_GetCmdError+0x58>)
 8008f1a:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 8008f1c:	2300      	movs	r3, #0
}
 8008f1e:	4618      	mov	r0, r3
 8008f20:	3714      	adds	r7, #20
 8008f22:	46bd      	mov	sp, r7
 8008f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f28:	4770      	bx	lr
 8008f2a:	bf00      	nop
 8008f2c:	20000000 	.word	0x20000000
 8008f30:	10624dd3 	.word	0x10624dd3
 8008f34:	002000c5 	.word	0x002000c5

08008f38 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8008f38:	b580      	push	{r7, lr}
 8008f3a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8008f3c:	4904      	ldr	r1, [pc, #16]	; (8008f50 <MX_FATFS_Init+0x18>)
 8008f3e:	4805      	ldr	r0, [pc, #20]	; (8008f54 <MX_FATFS_Init+0x1c>)
 8008f40:	f000 faa6 	bl	8009490 <FATFS_LinkDriver>
 8008f44:	4603      	mov	r3, r0
 8008f46:	461a      	mov	r2, r3
 8008f48:	4b03      	ldr	r3, [pc, #12]	; (8008f58 <MX_FATFS_Init+0x20>)
 8008f4a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8008f4c:	bf00      	nop
 8008f4e:	bd80      	pop	{r7, pc}
 8008f50:	200003c0 	.word	0x200003c0
 8008f54:	0800d278 	.word	0x0800d278
 8008f58:	200003bc 	.word	0x200003bc

08008f5c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8008f5c:	b580      	push	{r7, lr}
 8008f5e:	b082      	sub	sp, #8
 8008f60:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8008f62:	2300      	movs	r3, #0
 8008f64:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8008f66:	f000 f885 	bl	8009074 <BSP_SD_IsDetected>
 8008f6a:	4603      	mov	r3, r0
 8008f6c:	2b01      	cmp	r3, #1
 8008f6e:	d001      	beq.n	8008f74 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8008f70:	2302      	movs	r3, #2
 8008f72:	e012      	b.n	8008f9a <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8008f74:	480b      	ldr	r0, [pc, #44]	; (8008fa4 <BSP_SD_Init+0x48>)
 8008f76:	f7fd fa33 	bl	80063e0 <HAL_SD_Init>
 8008f7a:	4603      	mov	r3, r0
 8008f7c:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8008f7e:	79fb      	ldrb	r3, [r7, #7]
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d109      	bne.n	8008f98 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8008f84:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8008f88:	4806      	ldr	r0, [pc, #24]	; (8008fa4 <BSP_SD_Init+0x48>)
 8008f8a:	f7fe f8e7 	bl	800715c <HAL_SD_ConfigWideBusOperation>
 8008f8e:	4603      	mov	r3, r0
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d001      	beq.n	8008f98 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8008f94:	2301      	movs	r3, #1
 8008f96:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8008f98:	79fb      	ldrb	r3, [r7, #7]
}
 8008f9a:	4618      	mov	r0, r3
 8008f9c:	3708      	adds	r7, #8
 8008f9e:	46bd      	mov	sp, r7
 8008fa0:	bd80      	pop	{r7, pc}
 8008fa2:	bf00      	nop
 8008fa4:	20000220 	.word	0x20000220

08008fa8 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8008fa8:	b580      	push	{r7, lr}
 8008faa:	b086      	sub	sp, #24
 8008fac:	af00      	add	r7, sp, #0
 8008fae:	60f8      	str	r0, [r7, #12]
 8008fb0:	60b9      	str	r1, [r7, #8]
 8008fb2:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8008fb4:	2300      	movs	r3, #0
 8008fb6:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	68ba      	ldr	r2, [r7, #8]
 8008fbc:	68f9      	ldr	r1, [r7, #12]
 8008fbe:	4806      	ldr	r0, [pc, #24]	; (8008fd8 <BSP_SD_ReadBlocks_DMA+0x30>)
 8008fc0:	f7fd fb36 	bl	8006630 <HAL_SD_ReadBlocks_DMA>
 8008fc4:	4603      	mov	r3, r0
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d001      	beq.n	8008fce <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8008fca:	2301      	movs	r3, #1
 8008fcc:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8008fce:	7dfb      	ldrb	r3, [r7, #23]
}
 8008fd0:	4618      	mov	r0, r3
 8008fd2:	3718      	adds	r7, #24
 8008fd4:	46bd      	mov	sp, r7
 8008fd6:	bd80      	pop	{r7, pc}
 8008fd8:	20000220 	.word	0x20000220

08008fdc <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8008fdc:	b580      	push	{r7, lr}
 8008fde:	b086      	sub	sp, #24
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	60f8      	str	r0, [r7, #12]
 8008fe4:	60b9      	str	r1, [r7, #8]
 8008fe6:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8008fe8:	2300      	movs	r3, #0
 8008fea:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	68ba      	ldr	r2, [r7, #8]
 8008ff0:	68f9      	ldr	r1, [r7, #12]
 8008ff2:	4806      	ldr	r0, [pc, #24]	; (800900c <BSP_SD_WriteBlocks_DMA+0x30>)
 8008ff4:	f7fd fbc4 	bl	8006780 <HAL_SD_WriteBlocks_DMA>
 8008ff8:	4603      	mov	r3, r0
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d001      	beq.n	8009002 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8008ffe:	2301      	movs	r3, #1
 8009000:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8009002:	7dfb      	ldrb	r3, [r7, #23]
}
 8009004:	4618      	mov	r0, r3
 8009006:	3718      	adds	r7, #24
 8009008:	46bd      	mov	sp, r7
 800900a:	bd80      	pop	{r7, pc}
 800900c:	20000220 	.word	0x20000220

08009010 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8009010:	b580      	push	{r7, lr}
 8009012:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8009014:	4805      	ldr	r0, [pc, #20]	; (800902c <BSP_SD_GetCardState+0x1c>)
 8009016:	f7fe f9b5 	bl	8007384 <HAL_SD_GetCardState>
 800901a:	4603      	mov	r3, r0
 800901c:	2b04      	cmp	r3, #4
 800901e:	bf14      	ite	ne
 8009020:	2301      	movne	r3, #1
 8009022:	2300      	moveq	r3, #0
 8009024:	b2db      	uxtb	r3, r3
}
 8009026:	4618      	mov	r0, r3
 8009028:	bd80      	pop	{r7, pc}
 800902a:	bf00      	nop
 800902c:	20000220 	.word	0x20000220

08009030 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(BSP_SD_CardInfo *CardInfo)
{
 8009030:	b580      	push	{r7, lr}
 8009032:	b082      	sub	sp, #8
 8009034:	af00      	add	r7, sp, #0
 8009036:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8009038:	6879      	ldr	r1, [r7, #4]
 800903a:	4803      	ldr	r0, [pc, #12]	; (8009048 <BSP_SD_GetCardInfo+0x18>)
 800903c:	f7fe f862 	bl	8007104 <HAL_SD_GetCardInfo>
}
 8009040:	bf00      	nop
 8009042:	3708      	adds	r7, #8
 8009044:	46bd      	mov	sp, r7
 8009046:	bd80      	pop	{r7, pc}
 8009048:	20000220 	.word	0x20000220

0800904c <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800904c:	b580      	push	{r7, lr}
 800904e:	b082      	sub	sp, #8
 8009050:	af00      	add	r7, sp, #0
 8009052:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8009054:	f000 f9ac 	bl	80093b0 <BSP_SD_WriteCpltCallback>
}
 8009058:	bf00      	nop
 800905a:	3708      	adds	r7, #8
 800905c:	46bd      	mov	sp, r7
 800905e:	bd80      	pop	{r7, pc}

08009060 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8009060:	b580      	push	{r7, lr}
 8009062:	b082      	sub	sp, #8
 8009064:	af00      	add	r7, sp, #0
 8009066:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8009068:	f000 f9b4 	bl	80093d4 <BSP_SD_ReadCpltCallback>
}
 800906c:	bf00      	nop
 800906e:	3708      	adds	r7, #8
 8009070:	46bd      	mov	sp, r7
 8009072:	bd80      	pop	{r7, pc}

08009074 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8009074:	b580      	push	{r7, lr}
 8009076:	b082      	sub	sp, #8
 8009078:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800907a:	2301      	movs	r3, #1
 800907c:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800907e:	f000 f80b 	bl	8009098 <BSP_PlatformIsDetected>
 8009082:	4603      	mov	r3, r0
 8009084:	2b00      	cmp	r3, #0
 8009086:	d101      	bne.n	800908c <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8009088:	2300      	movs	r3, #0
 800908a:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800908c:	79fb      	ldrb	r3, [r7, #7]
 800908e:	b2db      	uxtb	r3, r3
}
 8009090:	4618      	mov	r0, r3
 8009092:	3708      	adds	r7, #8
 8009094:	46bd      	mov	sp, r7
 8009096:	bd80      	pop	{r7, pc}

08009098 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8009098:	b580      	push	{r7, lr}
 800909a:	b082      	sub	sp, #8
 800909c:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800909e:	2301      	movs	r3, #1
 80090a0:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 80090a2:	2180      	movs	r1, #128	; 0x80
 80090a4:	4806      	ldr	r0, [pc, #24]	; (80090c0 <BSP_PlatformIsDetected+0x28>)
 80090a6:	f7fa fbe7 	bl	8003878 <HAL_GPIO_ReadPin>
 80090aa:	4603      	mov	r3, r0
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d001      	beq.n	80090b4 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 80090b0:	2300      	movs	r3, #0
 80090b2:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 80090b4:	79fb      	ldrb	r3, [r7, #7]
}
 80090b6:	4618      	mov	r0, r3
 80090b8:	3708      	adds	r7, #8
 80090ba:	46bd      	mov	sp, r7
 80090bc:	bd80      	pop	{r7, pc}
 80090be:	bf00      	nop
 80090c0:	48000800 	.word	0x48000800

080090c4 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 80090c4:	b580      	push	{r7, lr}
 80090c6:	b084      	sub	sp, #16
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	6078      	str	r0, [r7, #4]
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
  while( osKernelSysTick() - timer < timeout)
#else
  timer = osKernelGetTickCount();
 80090cc:	f000 faa0 	bl	8009610 <osKernelGetTickCount>
 80090d0:	60f8      	str	r0, [r7, #12]
  while( osKernelGetTickCount() - timer < timeout)
 80090d2:	e006      	b.n	80090e2 <SD_CheckStatusWithTimeout+0x1e>
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80090d4:	f7ff ff9c 	bl	8009010 <BSP_SD_GetCardState>
 80090d8:	4603      	mov	r3, r0
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d101      	bne.n	80090e2 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 80090de:	2300      	movs	r3, #0
 80090e0:	e009      	b.n	80090f6 <SD_CheckStatusWithTimeout+0x32>
  while( osKernelGetTickCount() - timer < timeout)
 80090e2:	f000 fa95 	bl	8009610 <osKernelGetTickCount>
 80090e6:	4602      	mov	r2, r0
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	1ad3      	subs	r3, r2, r3
 80090ec:	687a      	ldr	r2, [r7, #4]
 80090ee:	429a      	cmp	r2, r3
 80090f0:	d8f0      	bhi.n	80090d4 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 80090f2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80090f6:	4618      	mov	r0, r3
 80090f8:	3710      	adds	r7, #16
 80090fa:	46bd      	mov	sp, r7
 80090fc:	bd80      	pop	{r7, pc}
	...

08009100 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8009100:	b580      	push	{r7, lr}
 8009102:	b082      	sub	sp, #8
 8009104:	af00      	add	r7, sp, #0
 8009106:	4603      	mov	r3, r0
 8009108:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800910a:	4b0b      	ldr	r3, [pc, #44]	; (8009138 <SD_CheckStatus+0x38>)
 800910c:	2201      	movs	r2, #1
 800910e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8009110:	f7ff ff7e 	bl	8009010 <BSP_SD_GetCardState>
 8009114:	4603      	mov	r3, r0
 8009116:	2b00      	cmp	r3, #0
 8009118:	d107      	bne.n	800912a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800911a:	4b07      	ldr	r3, [pc, #28]	; (8009138 <SD_CheckStatus+0x38>)
 800911c:	781b      	ldrb	r3, [r3, #0]
 800911e:	b2db      	uxtb	r3, r3
 8009120:	f023 0301 	bic.w	r3, r3, #1
 8009124:	b2da      	uxtb	r2, r3
 8009126:	4b04      	ldr	r3, [pc, #16]	; (8009138 <SD_CheckStatus+0x38>)
 8009128:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800912a:	4b03      	ldr	r3, [pc, #12]	; (8009138 <SD_CheckStatus+0x38>)
 800912c:	781b      	ldrb	r3, [r3, #0]
 800912e:	b2db      	uxtb	r3, r3
}
 8009130:	4618      	mov	r0, r3
 8009132:	3708      	adds	r7, #8
 8009134:	46bd      	mov	sp, r7
 8009136:	bd80      	pop	{r7, pc}
 8009138:	20000009 	.word	0x20000009

0800913c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800913c:	b580      	push	{r7, lr}
 800913e:	b082      	sub	sp, #8
 8009140:	af00      	add	r7, sp, #0
 8009142:	4603      	mov	r3, r0
 8009144:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8009146:	4b1c      	ldr	r3, [pc, #112]	; (80091b8 <SD_initialize+0x7c>)
 8009148:	2201      	movs	r2, #1
 800914a:	701a      	strb	r2, [r3, #0]
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
#else
  if(osKernelGetState() == osKernelRunning)
 800914c:	f000 fa18 	bl	8009580 <osKernelGetState>
 8009150:	4603      	mov	r3, r0
 8009152:	2b02      	cmp	r3, #2
 8009154:	d129      	bne.n	80091aa <SD_initialize+0x6e>
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 8009156:	f7ff ff01 	bl	8008f5c <BSP_SD_Init>
 800915a:	4603      	mov	r3, r0
 800915c:	2b00      	cmp	r3, #0
 800915e:	d107      	bne.n	8009170 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 8009160:	79fb      	ldrb	r3, [r7, #7]
 8009162:	4618      	mov	r0, r3
 8009164:	f7ff ffcc 	bl	8009100 <SD_CheckStatus>
 8009168:	4603      	mov	r3, r0
 800916a:	461a      	mov	r2, r3
 800916c:	4b12      	ldr	r3, [pc, #72]	; (80091b8 <SD_initialize+0x7c>)
 800916e:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 8009170:	4b11      	ldr	r3, [pc, #68]	; (80091b8 <SD_initialize+0x7c>)
 8009172:	781b      	ldrb	r3, [r3, #0]
 8009174:	b2db      	uxtb	r3, r3
 8009176:	2b01      	cmp	r3, #1
 8009178:	d017      	beq.n	80091aa <SD_initialize+0x6e>
    {
      if (SDQueueID == NULL)
 800917a:	4b10      	ldr	r3, [pc, #64]	; (80091bc <SD_initialize+0x80>)
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	2b00      	cmp	r3, #0
 8009180:	d107      	bne.n	8009192 <SD_initialize+0x56>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
 8009182:	2200      	movs	r2, #0
 8009184:	2102      	movs	r1, #2
 8009186:	200a      	movs	r0, #10
 8009188:	f000 fcaa 	bl	8009ae0 <osMessageQueueNew>
 800918c:	4603      	mov	r3, r0
 800918e:	4a0b      	ldr	r2, [pc, #44]	; (80091bc <SD_initialize+0x80>)
 8009190:	6013      	str	r3, [r2, #0]
#endif
      }

      if (SDQueueID == NULL)
 8009192:	4b0a      	ldr	r3, [pc, #40]	; (80091bc <SD_initialize+0x80>)
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	2b00      	cmp	r3, #0
 8009198:	d107      	bne.n	80091aa <SD_initialize+0x6e>
      {
        Stat |= STA_NOINIT;
 800919a:	4b07      	ldr	r3, [pc, #28]	; (80091b8 <SD_initialize+0x7c>)
 800919c:	781b      	ldrb	r3, [r3, #0]
 800919e:	b2db      	uxtb	r3, r3
 80091a0:	f043 0301 	orr.w	r3, r3, #1
 80091a4:	b2da      	uxtb	r2, r3
 80091a6:	4b04      	ldr	r3, [pc, #16]	; (80091b8 <SD_initialize+0x7c>)
 80091a8:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 80091aa:	4b03      	ldr	r3, [pc, #12]	; (80091b8 <SD_initialize+0x7c>)
 80091ac:	781b      	ldrb	r3, [r3, #0]
 80091ae:	b2db      	uxtb	r3, r3
}
 80091b0:	4618      	mov	r0, r3
 80091b2:	3708      	adds	r7, #8
 80091b4:	46bd      	mov	sp, r7
 80091b6:	bd80      	pop	{r7, pc}
 80091b8:	20000009 	.word	0x20000009
 80091bc:	200003c4 	.word	0x200003c4

080091c0 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80091c0:	b580      	push	{r7, lr}
 80091c2:	b082      	sub	sp, #8
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	4603      	mov	r3, r0
 80091c8:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80091ca:	79fb      	ldrb	r3, [r7, #7]
 80091cc:	4618      	mov	r0, r3
 80091ce:	f7ff ff97 	bl	8009100 <SD_CheckStatus>
 80091d2:	4603      	mov	r3, r0
}
 80091d4:	4618      	mov	r0, r3
 80091d6:	3708      	adds	r7, #8
 80091d8:	46bd      	mov	sp, r7
 80091da:	bd80      	pop	{r7, pc}

080091dc <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80091dc:	b580      	push	{r7, lr}
 80091de:	b088      	sub	sp, #32
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	60b9      	str	r1, [r7, #8]
 80091e4:	607a      	str	r2, [r7, #4]
 80091e6:	603b      	str	r3, [r7, #0]
 80091e8:	4603      	mov	r3, r0
 80091ea:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 80091ec:	2301      	movs	r3, #1
 80091ee:	77fb      	strb	r3, [r7, #31]
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80091f0:	f247 5030 	movw	r0, #30000	; 0x7530
 80091f4:	f7ff ff66 	bl	80090c4 <SD_CheckStatusWithTimeout>
 80091f8:	4603      	mov	r3, r0
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	da01      	bge.n	8009202 <SD_read+0x26>
  {
    return res;
 80091fe:	7ffb      	ldrb	r3, [r7, #31]
 8009200:	e02f      	b.n	8009262 <SD_read+0x86>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 8009202:	683a      	ldr	r2, [r7, #0]
 8009204:	6879      	ldr	r1, [r7, #4]
 8009206:	68b8      	ldr	r0, [r7, #8]
 8009208:	f7ff fece 	bl	8008fa8 <BSP_SD_ReadBlocks_DMA>
 800920c:	4603      	mov	r3, r0
 800920e:	77bb      	strb	r3, [r7, #30]

    if (ret == MSD_OK) {
 8009210:	7fbb      	ldrb	r3, [r7, #30]
 8009212:	2b00      	cmp	r3, #0
 8009214:	d124      	bne.n	8009260 <SD_read+0x84>
      {
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
#else
          status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 8009216:	4b15      	ldr	r3, [pc, #84]	; (800926c <SD_read+0x90>)
 8009218:	6818      	ldr	r0, [r3, #0]
 800921a:	f107 0112 	add.w	r1, r7, #18
 800921e:	f247 5330 	movw	r3, #30000	; 0x7530
 8009222:	2200      	movs	r2, #0
 8009224:	f000 fd30 	bl	8009c88 <osMessageQueueGet>
 8009228:	61b8      	str	r0, [r7, #24]
          if ((status == osOK) && (event == READ_CPLT_MSG))
 800922a:	69bb      	ldr	r3, [r7, #24]
 800922c:	2b00      	cmp	r3, #0
 800922e:	d117      	bne.n	8009260 <SD_read+0x84>
 8009230:	8a7b      	ldrh	r3, [r7, #18]
 8009232:	2b01      	cmp	r3, #1
 8009234:	d114      	bne.n	8009260 <SD_read+0x84>
          {
            timer = osKernelGetTickCount();
 8009236:	f000 f9eb 	bl	8009610 <osKernelGetTickCount>
 800923a:	6178      	str	r0, [r7, #20]
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 800923c:	e007      	b.n	800924e <SD_read+0x72>
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800923e:	f7ff fee7 	bl	8009010 <BSP_SD_GetCardState>
 8009242:	4603      	mov	r3, r0
 8009244:	2b00      	cmp	r3, #0
 8009246:	d102      	bne.n	800924e <SD_read+0x72>
              {
                res = RES_OK;
 8009248:	2300      	movs	r3, #0
 800924a:	77fb      	strb	r3, [r7, #31]
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 800924c:	e008      	b.n	8009260 <SD_read+0x84>
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 800924e:	f000 f9df 	bl	8009610 <osKernelGetTickCount>
 8009252:	4602      	mov	r2, r0
 8009254:	697b      	ldr	r3, [r7, #20]
 8009256:	1ad3      	subs	r3, r2, r3
 8009258:	f247 522f 	movw	r2, #29999	; 0x752f
 800925c:	4293      	cmp	r3, r2
 800925e:	d9ee      	bls.n	800923e <SD_read+0x62>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 8009260:	7ffb      	ldrb	r3, [r7, #31]
}
 8009262:	4618      	mov	r0, r3
 8009264:	3720      	adds	r7, #32
 8009266:	46bd      	mov	sp, r7
 8009268:	bd80      	pop	{r7, pc}
 800926a:	bf00      	nop
 800926c:	200003c4 	.word	0x200003c4

08009270 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8009270:	b580      	push	{r7, lr}
 8009272:	b088      	sub	sp, #32
 8009274:	af00      	add	r7, sp, #0
 8009276:	60b9      	str	r1, [r7, #8]
 8009278:	607a      	str	r2, [r7, #4]
 800927a:	603b      	str	r3, [r7, #0]
 800927c:	4603      	mov	r3, r0
 800927e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8009280:	2301      	movs	r3, #1
 8009282:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8009284:	f247 5030 	movw	r0, #30000	; 0x7530
 8009288:	f7ff ff1c 	bl	80090c4 <SD_CheckStatusWithTimeout>
 800928c:	4603      	mov	r3, r0
 800928e:	2b00      	cmp	r3, #0
 8009290:	da01      	bge.n	8009296 <SD_write+0x26>
  {
    return res;
 8009292:	7ffb      	ldrb	r3, [r7, #31]
 8009294:	e02d      	b.n	80092f2 <SD_write+0x82>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8009296:	683a      	ldr	r2, [r7, #0]
 8009298:	6879      	ldr	r1, [r7, #4]
 800929a:	68b8      	ldr	r0, [r7, #8]
 800929c:	f7ff fe9e 	bl	8008fdc <BSP_SD_WriteBlocks_DMA>
 80092a0:	4603      	mov	r3, r0
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d124      	bne.n	80092f0 <SD_write+0x80>
    if (event.status == osEventMessage)
    {
      if (event.value.v == WRITE_CPLT_MSG)
      {
#else
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 80092a6:	4b15      	ldr	r3, [pc, #84]	; (80092fc <SD_write+0x8c>)
 80092a8:	6818      	ldr	r0, [r3, #0]
 80092aa:	f107 0112 	add.w	r1, r7, #18
 80092ae:	f247 5330 	movw	r3, #30000	; 0x7530
 80092b2:	2200      	movs	r2, #0
 80092b4:	f000 fce8 	bl	8009c88 <osMessageQueueGet>
 80092b8:	61b8      	str	r0, [r7, #24]
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
 80092ba:	69bb      	ldr	r3, [r7, #24]
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d117      	bne.n	80092f0 <SD_write+0x80>
 80092c0:	8a7b      	ldrh	r3, [r7, #18]
 80092c2:	2b02      	cmp	r3, #2
 80092c4:	d114      	bne.n	80092f0 <SD_write+0x80>
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
#else
        timer = osKernelGetTickCount();
 80092c6:	f000 f9a3 	bl	8009610 <osKernelGetTickCount>
 80092ca:	6178      	str	r0, [r7, #20]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 80092cc:	e007      	b.n	80092de <SD_write+0x6e>
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80092ce:	f7ff fe9f 	bl	8009010 <BSP_SD_GetCardState>
 80092d2:	4603      	mov	r3, r0
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d102      	bne.n	80092de <SD_write+0x6e>
          {
            res = RES_OK;
 80092d8:	2300      	movs	r3, #0
 80092da:	77fb      	strb	r3, [r7, #31]
            break;
 80092dc:	e008      	b.n	80092f0 <SD_write+0x80>
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 80092de:	f000 f997 	bl	8009610 <osKernelGetTickCount>
 80092e2:	4602      	mov	r2, r0
 80092e4:	697b      	ldr	r3, [r7, #20]
 80092e6:	1ad3      	subs	r3, r2, r3
 80092e8:	f247 522f 	movw	r2, #29999	; 0x752f
 80092ec:	4293      	cmp	r3, r2
 80092ee:	d9ee      	bls.n	80092ce <SD_write+0x5e>
    }

  }
#endif

  return res;
 80092f0:	7ffb      	ldrb	r3, [r7, #31]
}
 80092f2:	4618      	mov	r0, r3
 80092f4:	3720      	adds	r7, #32
 80092f6:	46bd      	mov	sp, r7
 80092f8:	bd80      	pop	{r7, pc}
 80092fa:	bf00      	nop
 80092fc:	200003c4 	.word	0x200003c4

08009300 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8009300:	b580      	push	{r7, lr}
 8009302:	b08c      	sub	sp, #48	; 0x30
 8009304:	af00      	add	r7, sp, #0
 8009306:	4603      	mov	r3, r0
 8009308:	603a      	str	r2, [r7, #0]
 800930a:	71fb      	strb	r3, [r7, #7]
 800930c:	460b      	mov	r3, r1
 800930e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8009310:	2301      	movs	r3, #1
 8009312:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8009316:	4b25      	ldr	r3, [pc, #148]	; (80093ac <SD_ioctl+0xac>)
 8009318:	781b      	ldrb	r3, [r3, #0]
 800931a:	b2db      	uxtb	r3, r3
 800931c:	f003 0301 	and.w	r3, r3, #1
 8009320:	2b00      	cmp	r3, #0
 8009322:	d001      	beq.n	8009328 <SD_ioctl+0x28>
 8009324:	2303      	movs	r3, #3
 8009326:	e03c      	b.n	80093a2 <SD_ioctl+0xa2>

  switch (cmd)
 8009328:	79bb      	ldrb	r3, [r7, #6]
 800932a:	2b03      	cmp	r3, #3
 800932c:	d834      	bhi.n	8009398 <SD_ioctl+0x98>
 800932e:	a201      	add	r2, pc, #4	; (adr r2, 8009334 <SD_ioctl+0x34>)
 8009330:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009334:	08009345 	.word	0x08009345
 8009338:	0800934d 	.word	0x0800934d
 800933c:	08009365 	.word	0x08009365
 8009340:	0800937f 	.word	0x0800937f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8009344:	2300      	movs	r3, #0
 8009346:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800934a:	e028      	b.n	800939e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800934c:	f107 0308 	add.w	r3, r7, #8
 8009350:	4618      	mov	r0, r3
 8009352:	f7ff fe6d 	bl	8009030 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8009356:	6a3a      	ldr	r2, [r7, #32]
 8009358:	683b      	ldr	r3, [r7, #0]
 800935a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800935c:	2300      	movs	r3, #0
 800935e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009362:	e01c      	b.n	800939e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8009364:	f107 0308 	add.w	r3, r7, #8
 8009368:	4618      	mov	r0, r3
 800936a:	f7ff fe61 	bl	8009030 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800936e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009370:	b29a      	uxth	r2, r3
 8009372:	683b      	ldr	r3, [r7, #0]
 8009374:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8009376:	2300      	movs	r3, #0
 8009378:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800937c:	e00f      	b.n	800939e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800937e:	f107 0308 	add.w	r3, r7, #8
 8009382:	4618      	mov	r0, r3
 8009384:	f7ff fe54 	bl	8009030 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8009388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800938a:	0a5a      	lsrs	r2, r3, #9
 800938c:	683b      	ldr	r3, [r7, #0]
 800938e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8009390:	2300      	movs	r3, #0
 8009392:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009396:	e002      	b.n	800939e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8009398:	2304      	movs	r3, #4
 800939a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800939e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80093a2:	4618      	mov	r0, r3
 80093a4:	3730      	adds	r7, #48	; 0x30
 80093a6:	46bd      	mov	sp, r7
 80093a8:	bd80      	pop	{r7, pc}
 80093aa:	bf00      	nop
 80093ac:	20000009 	.word	0x20000009

080093b0 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 80093b0:	b580      	push	{r7, lr}
 80093b2:	b082      	sub	sp, #8
 80093b4:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
#else
   const uint16_t msg = WRITE_CPLT_MSG;
 80093b6:	2302      	movs	r3, #2
 80093b8:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 80093ba:	4b05      	ldr	r3, [pc, #20]	; (80093d0 <BSP_SD_WriteCpltCallback+0x20>)
 80093bc:	6818      	ldr	r0, [r3, #0]
 80093be:	1db9      	adds	r1, r7, #6
 80093c0:	2300      	movs	r3, #0
 80093c2:	2200      	movs	r2, #0
 80093c4:	f000 fc00 	bl	8009bc8 <osMessageQueuePut>
#endif
}
 80093c8:	bf00      	nop
 80093ca:	3708      	adds	r7, #8
 80093cc:	46bd      	mov	sp, r7
 80093ce:	bd80      	pop	{r7, pc}
 80093d0:	200003c4 	.word	0x200003c4

080093d4 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 80093d4:	b580      	push	{r7, lr}
 80093d6:	b082      	sub	sp, #8
 80093d8:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
#else
   const uint16_t msg = READ_CPLT_MSG;
 80093da:	2301      	movs	r3, #1
 80093dc:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 80093de:	4b05      	ldr	r3, [pc, #20]	; (80093f4 <BSP_SD_ReadCpltCallback+0x20>)
 80093e0:	6818      	ldr	r0, [r3, #0]
 80093e2:	1db9      	adds	r1, r7, #6
 80093e4:	2300      	movs	r3, #0
 80093e6:	2200      	movs	r2, #0
 80093e8:	f000 fbee 	bl	8009bc8 <osMessageQueuePut>
#endif
}
 80093ec:	bf00      	nop
 80093ee:	3708      	adds	r7, #8
 80093f0:	46bd      	mov	sp, r7
 80093f2:	bd80      	pop	{r7, pc}
 80093f4:	200003c4 	.word	0x200003c4

080093f8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80093f8:	b480      	push	{r7}
 80093fa:	b087      	sub	sp, #28
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	60f8      	str	r0, [r7, #12]
 8009400:	60b9      	str	r1, [r7, #8]
 8009402:	4613      	mov	r3, r2
 8009404:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8009406:	2301      	movs	r3, #1
 8009408:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800940a:	2300      	movs	r3, #0
 800940c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800940e:	4b1f      	ldr	r3, [pc, #124]	; (800948c <FATFS_LinkDriverEx+0x94>)
 8009410:	7a5b      	ldrb	r3, [r3, #9]
 8009412:	b2db      	uxtb	r3, r3
 8009414:	2b00      	cmp	r3, #0
 8009416:	d131      	bne.n	800947c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8009418:	4b1c      	ldr	r3, [pc, #112]	; (800948c <FATFS_LinkDriverEx+0x94>)
 800941a:	7a5b      	ldrb	r3, [r3, #9]
 800941c:	b2db      	uxtb	r3, r3
 800941e:	461a      	mov	r2, r3
 8009420:	4b1a      	ldr	r3, [pc, #104]	; (800948c <FATFS_LinkDriverEx+0x94>)
 8009422:	2100      	movs	r1, #0
 8009424:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8009426:	4b19      	ldr	r3, [pc, #100]	; (800948c <FATFS_LinkDriverEx+0x94>)
 8009428:	7a5b      	ldrb	r3, [r3, #9]
 800942a:	b2db      	uxtb	r3, r3
 800942c:	4a17      	ldr	r2, [pc, #92]	; (800948c <FATFS_LinkDriverEx+0x94>)
 800942e:	009b      	lsls	r3, r3, #2
 8009430:	4413      	add	r3, r2
 8009432:	68fa      	ldr	r2, [r7, #12]
 8009434:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8009436:	4b15      	ldr	r3, [pc, #84]	; (800948c <FATFS_LinkDriverEx+0x94>)
 8009438:	7a5b      	ldrb	r3, [r3, #9]
 800943a:	b2db      	uxtb	r3, r3
 800943c:	461a      	mov	r2, r3
 800943e:	4b13      	ldr	r3, [pc, #76]	; (800948c <FATFS_LinkDriverEx+0x94>)
 8009440:	4413      	add	r3, r2
 8009442:	79fa      	ldrb	r2, [r7, #7]
 8009444:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8009446:	4b11      	ldr	r3, [pc, #68]	; (800948c <FATFS_LinkDriverEx+0x94>)
 8009448:	7a5b      	ldrb	r3, [r3, #9]
 800944a:	b2db      	uxtb	r3, r3
 800944c:	1c5a      	adds	r2, r3, #1
 800944e:	b2d1      	uxtb	r1, r2
 8009450:	4a0e      	ldr	r2, [pc, #56]	; (800948c <FATFS_LinkDriverEx+0x94>)
 8009452:	7251      	strb	r1, [r2, #9]
 8009454:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8009456:	7dbb      	ldrb	r3, [r7, #22]
 8009458:	3330      	adds	r3, #48	; 0x30
 800945a:	b2da      	uxtb	r2, r3
 800945c:	68bb      	ldr	r3, [r7, #8]
 800945e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8009460:	68bb      	ldr	r3, [r7, #8]
 8009462:	3301      	adds	r3, #1
 8009464:	223a      	movs	r2, #58	; 0x3a
 8009466:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8009468:	68bb      	ldr	r3, [r7, #8]
 800946a:	3302      	adds	r3, #2
 800946c:	222f      	movs	r2, #47	; 0x2f
 800946e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8009470:	68bb      	ldr	r3, [r7, #8]
 8009472:	3303      	adds	r3, #3
 8009474:	2200      	movs	r2, #0
 8009476:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8009478:	2300      	movs	r3, #0
 800947a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800947c:	7dfb      	ldrb	r3, [r7, #23]
}
 800947e:	4618      	mov	r0, r3
 8009480:	371c      	adds	r7, #28
 8009482:	46bd      	mov	sp, r7
 8009484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009488:	4770      	bx	lr
 800948a:	bf00      	nop
 800948c:	200003c8 	.word	0x200003c8

08009490 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8009490:	b580      	push	{r7, lr}
 8009492:	b082      	sub	sp, #8
 8009494:	af00      	add	r7, sp, #0
 8009496:	6078      	str	r0, [r7, #4]
 8009498:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800949a:	2200      	movs	r2, #0
 800949c:	6839      	ldr	r1, [r7, #0]
 800949e:	6878      	ldr	r0, [r7, #4]
 80094a0:	f7ff ffaa 	bl	80093f8 <FATFS_LinkDriverEx>
 80094a4:	4603      	mov	r3, r0
}
 80094a6:	4618      	mov	r0, r3
 80094a8:	3708      	adds	r7, #8
 80094aa:	46bd      	mov	sp, r7
 80094ac:	bd80      	pop	{r7, pc}
	...

080094b0 <__NVIC_SetPriority>:
{
 80094b0:	b480      	push	{r7}
 80094b2:	b083      	sub	sp, #12
 80094b4:	af00      	add	r7, sp, #0
 80094b6:	4603      	mov	r3, r0
 80094b8:	6039      	str	r1, [r7, #0]
 80094ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80094bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	db0a      	blt.n	80094da <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80094c4:	683b      	ldr	r3, [r7, #0]
 80094c6:	b2da      	uxtb	r2, r3
 80094c8:	490c      	ldr	r1, [pc, #48]	; (80094fc <__NVIC_SetPriority+0x4c>)
 80094ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80094ce:	0112      	lsls	r2, r2, #4
 80094d0:	b2d2      	uxtb	r2, r2
 80094d2:	440b      	add	r3, r1
 80094d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80094d8:	e00a      	b.n	80094f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80094da:	683b      	ldr	r3, [r7, #0]
 80094dc:	b2da      	uxtb	r2, r3
 80094de:	4908      	ldr	r1, [pc, #32]	; (8009500 <__NVIC_SetPriority+0x50>)
 80094e0:	79fb      	ldrb	r3, [r7, #7]
 80094e2:	f003 030f 	and.w	r3, r3, #15
 80094e6:	3b04      	subs	r3, #4
 80094e8:	0112      	lsls	r2, r2, #4
 80094ea:	b2d2      	uxtb	r2, r2
 80094ec:	440b      	add	r3, r1
 80094ee:	761a      	strb	r2, [r3, #24]
}
 80094f0:	bf00      	nop
 80094f2:	370c      	adds	r7, #12
 80094f4:	46bd      	mov	sp, r7
 80094f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094fa:	4770      	bx	lr
 80094fc:	e000e100 	.word	0xe000e100
 8009500:	e000ed00 	.word	0xe000ed00

08009504 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8009504:	b580      	push	{r7, lr}
 8009506:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8009508:	4b05      	ldr	r3, [pc, #20]	; (8009520 <SysTick_Handler+0x1c>)
 800950a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800950c:	f002 fbb6 	bl	800bc7c <xTaskGetSchedulerState>
 8009510:	4603      	mov	r3, r0
 8009512:	2b01      	cmp	r3, #1
 8009514:	d001      	beq.n	800951a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8009516:	f003 fa9f 	bl	800ca58 <xPortSysTickHandler>
  }
}
 800951a:	bf00      	nop
 800951c:	bd80      	pop	{r7, pc}
 800951e:	bf00      	nop
 8009520:	e000e010 	.word	0xe000e010

08009524 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009524:	b580      	push	{r7, lr}
 8009526:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8009528:	2100      	movs	r1, #0
 800952a:	f06f 0004 	mvn.w	r0, #4
 800952e:	f7ff ffbf 	bl	80094b0 <__NVIC_SetPriority>
#endif
}
 8009532:	bf00      	nop
 8009534:	bd80      	pop	{r7, pc}
	...

08009538 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009538:	b480      	push	{r7}
 800953a:	b083      	sub	sp, #12
 800953c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800953e:	f3ef 8305 	mrs	r3, IPSR
 8009542:	603b      	str	r3, [r7, #0]
  return(result);
 8009544:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009546:	2b00      	cmp	r3, #0
 8009548:	d003      	beq.n	8009552 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800954a:	f06f 0305 	mvn.w	r3, #5
 800954e:	607b      	str	r3, [r7, #4]
 8009550:	e00c      	b.n	800956c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8009552:	4b0a      	ldr	r3, [pc, #40]	; (800957c <osKernelInitialize+0x44>)
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	2b00      	cmp	r3, #0
 8009558:	d105      	bne.n	8009566 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800955a:	4b08      	ldr	r3, [pc, #32]	; (800957c <osKernelInitialize+0x44>)
 800955c:	2201      	movs	r2, #1
 800955e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009560:	2300      	movs	r3, #0
 8009562:	607b      	str	r3, [r7, #4]
 8009564:	e002      	b.n	800956c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8009566:	f04f 33ff 	mov.w	r3, #4294967295
 800956a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800956c:	687b      	ldr	r3, [r7, #4]
}
 800956e:	4618      	mov	r0, r3
 8009570:	370c      	adds	r7, #12
 8009572:	46bd      	mov	sp, r7
 8009574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009578:	4770      	bx	lr
 800957a:	bf00      	nop
 800957c:	200003d4 	.word	0x200003d4

08009580 <osKernelGetState>:
  }

  return (osOK);
}

osKernelState_t osKernelGetState (void) {
 8009580:	b580      	push	{r7, lr}
 8009582:	b082      	sub	sp, #8
 8009584:	af00      	add	r7, sp, #0
  osKernelState_t state;

  switch (xTaskGetSchedulerState()) {
 8009586:	f002 fb79 	bl	800bc7c <xTaskGetSchedulerState>
 800958a:	4603      	mov	r3, r0
 800958c:	2b00      	cmp	r3, #0
 800958e:	d004      	beq.n	800959a <osKernelGetState+0x1a>
 8009590:	2b02      	cmp	r3, #2
 8009592:	d105      	bne.n	80095a0 <osKernelGetState+0x20>
    case taskSCHEDULER_RUNNING:
      state = osKernelRunning;
 8009594:	2302      	movs	r3, #2
 8009596:	607b      	str	r3, [r7, #4]
      break;
 8009598:	e00c      	b.n	80095b4 <osKernelGetState+0x34>

    case taskSCHEDULER_SUSPENDED:
      state = osKernelLocked;
 800959a:	2303      	movs	r3, #3
 800959c:	607b      	str	r3, [r7, #4]
      break;
 800959e:	e009      	b.n	80095b4 <osKernelGetState+0x34>

    case taskSCHEDULER_NOT_STARTED:
    default:
      if (KernelState == osKernelReady) {
 80095a0:	4b07      	ldr	r3, [pc, #28]	; (80095c0 <osKernelGetState+0x40>)
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	2b01      	cmp	r3, #1
 80095a6:	d102      	bne.n	80095ae <osKernelGetState+0x2e>
        state = osKernelReady;
 80095a8:	2301      	movs	r3, #1
 80095aa:	607b      	str	r3, [r7, #4]
      } else {
        state = osKernelInactive;
      }
      break;
 80095ac:	e001      	b.n	80095b2 <osKernelGetState+0x32>
        state = osKernelInactive;
 80095ae:	2300      	movs	r3, #0
 80095b0:	607b      	str	r3, [r7, #4]
      break;
 80095b2:	bf00      	nop
  }

  return (state);
 80095b4:	687b      	ldr	r3, [r7, #4]
}
 80095b6:	4618      	mov	r0, r3
 80095b8:	3708      	adds	r7, #8
 80095ba:	46bd      	mov	sp, r7
 80095bc:	bd80      	pop	{r7, pc}
 80095be:	bf00      	nop
 80095c0:	200003d4 	.word	0x200003d4

080095c4 <osKernelStart>:

osStatus_t osKernelStart (void) {
 80095c4:	b580      	push	{r7, lr}
 80095c6:	b082      	sub	sp, #8
 80095c8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80095ca:	f3ef 8305 	mrs	r3, IPSR
 80095ce:	603b      	str	r3, [r7, #0]
  return(result);
 80095d0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d003      	beq.n	80095de <osKernelStart+0x1a>
    stat = osErrorISR;
 80095d6:	f06f 0305 	mvn.w	r3, #5
 80095da:	607b      	str	r3, [r7, #4]
 80095dc:	e010      	b.n	8009600 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80095de:	4b0b      	ldr	r3, [pc, #44]	; (800960c <osKernelStart+0x48>)
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	2b01      	cmp	r3, #1
 80095e4:	d109      	bne.n	80095fa <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80095e6:	f7ff ff9d 	bl	8009524 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80095ea:	4b08      	ldr	r3, [pc, #32]	; (800960c <osKernelStart+0x48>)
 80095ec:	2202      	movs	r2, #2
 80095ee:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80095f0:	f001 fed6 	bl	800b3a0 <vTaskStartScheduler>
      stat = osOK;
 80095f4:	2300      	movs	r3, #0
 80095f6:	607b      	str	r3, [r7, #4]
 80095f8:	e002      	b.n	8009600 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80095fa:	f04f 33ff 	mov.w	r3, #4294967295
 80095fe:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009600:	687b      	ldr	r3, [r7, #4]
}
 8009602:	4618      	mov	r0, r3
 8009604:	3708      	adds	r7, #8
 8009606:	46bd      	mov	sp, r7
 8009608:	bd80      	pop	{r7, pc}
 800960a:	bf00      	nop
 800960c:	200003d4 	.word	0x200003d4

08009610 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8009610:	b580      	push	{r7, lr}
 8009612:	b082      	sub	sp, #8
 8009614:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009616:	f3ef 8305 	mrs	r3, IPSR
 800961a:	603b      	str	r3, [r7, #0]
  return(result);
 800961c:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 800961e:	2b00      	cmp	r3, #0
 8009620:	d003      	beq.n	800962a <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 8009622:	f001 ffe9 	bl	800b5f8 <xTaskGetTickCountFromISR>
 8009626:	6078      	str	r0, [r7, #4]
 8009628:	e002      	b.n	8009630 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 800962a:	f001 ffd5 	bl	800b5d8 <xTaskGetTickCount>
 800962e:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 8009630:	687b      	ldr	r3, [r7, #4]
}
 8009632:	4618      	mov	r0, r3
 8009634:	3708      	adds	r7, #8
 8009636:	46bd      	mov	sp, r7
 8009638:	bd80      	pop	{r7, pc}

0800963a <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800963a:	b580      	push	{r7, lr}
 800963c:	b08e      	sub	sp, #56	; 0x38
 800963e:	af04      	add	r7, sp, #16
 8009640:	60f8      	str	r0, [r7, #12]
 8009642:	60b9      	str	r1, [r7, #8]
 8009644:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009646:	2300      	movs	r3, #0
 8009648:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800964a:	f3ef 8305 	mrs	r3, IPSR
 800964e:	617b      	str	r3, [r7, #20]
  return(result);
 8009650:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8009652:	2b00      	cmp	r3, #0
 8009654:	d17e      	bne.n	8009754 <osThreadNew+0x11a>
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	2b00      	cmp	r3, #0
 800965a:	d07b      	beq.n	8009754 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800965c:	2380      	movs	r3, #128	; 0x80
 800965e:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8009660:	2318      	movs	r3, #24
 8009662:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8009664:	2300      	movs	r3, #0
 8009666:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8009668:	f04f 33ff 	mov.w	r3, #4294967295
 800966c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	2b00      	cmp	r3, #0
 8009672:	d045      	beq.n	8009700 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	2b00      	cmp	r3, #0
 800967a:	d002      	beq.n	8009682 <osThreadNew+0x48>
        name = attr->name;
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	699b      	ldr	r3, [r3, #24]
 8009686:	2b00      	cmp	r3, #0
 8009688:	d002      	beq.n	8009690 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	699b      	ldr	r3, [r3, #24]
 800968e:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009690:	69fb      	ldr	r3, [r7, #28]
 8009692:	2b00      	cmp	r3, #0
 8009694:	d008      	beq.n	80096a8 <osThreadNew+0x6e>
 8009696:	69fb      	ldr	r3, [r7, #28]
 8009698:	2b38      	cmp	r3, #56	; 0x38
 800969a:	d805      	bhi.n	80096a8 <osThreadNew+0x6e>
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	685b      	ldr	r3, [r3, #4]
 80096a0:	f003 0301 	and.w	r3, r3, #1
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d001      	beq.n	80096ac <osThreadNew+0x72>
        return (NULL);
 80096a8:	2300      	movs	r3, #0
 80096aa:	e054      	b.n	8009756 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	695b      	ldr	r3, [r3, #20]
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d003      	beq.n	80096bc <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	695b      	ldr	r3, [r3, #20]
 80096b8:	089b      	lsrs	r3, r3, #2
 80096ba:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	689b      	ldr	r3, [r3, #8]
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d00e      	beq.n	80096e2 <osThreadNew+0xa8>
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	68db      	ldr	r3, [r3, #12]
 80096c8:	2bbb      	cmp	r3, #187	; 0xbb
 80096ca:	d90a      	bls.n	80096e2 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d006      	beq.n	80096e2 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	695b      	ldr	r3, [r3, #20]
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d002      	beq.n	80096e2 <osThreadNew+0xa8>
        mem = 1;
 80096dc:	2301      	movs	r3, #1
 80096de:	61bb      	str	r3, [r7, #24]
 80096e0:	e010      	b.n	8009704 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	689b      	ldr	r3, [r3, #8]
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d10c      	bne.n	8009704 <osThreadNew+0xca>
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	68db      	ldr	r3, [r3, #12]
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d108      	bne.n	8009704 <osThreadNew+0xca>
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	691b      	ldr	r3, [r3, #16]
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d104      	bne.n	8009704 <osThreadNew+0xca>
          mem = 0;
 80096fa:	2300      	movs	r3, #0
 80096fc:	61bb      	str	r3, [r7, #24]
 80096fe:	e001      	b.n	8009704 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8009700:	2300      	movs	r3, #0
 8009702:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009704:	69bb      	ldr	r3, [r7, #24]
 8009706:	2b01      	cmp	r3, #1
 8009708:	d110      	bne.n	800972c <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800970e:	687a      	ldr	r2, [r7, #4]
 8009710:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009712:	9202      	str	r2, [sp, #8]
 8009714:	9301      	str	r3, [sp, #4]
 8009716:	69fb      	ldr	r3, [r7, #28]
 8009718:	9300      	str	r3, [sp, #0]
 800971a:	68bb      	ldr	r3, [r7, #8]
 800971c:	6a3a      	ldr	r2, [r7, #32]
 800971e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009720:	68f8      	ldr	r0, [r7, #12]
 8009722:	f001 fc51 	bl	800afc8 <xTaskCreateStatic>
 8009726:	4603      	mov	r3, r0
 8009728:	613b      	str	r3, [r7, #16]
 800972a:	e013      	b.n	8009754 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800972c:	69bb      	ldr	r3, [r7, #24]
 800972e:	2b00      	cmp	r3, #0
 8009730:	d110      	bne.n	8009754 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009732:	6a3b      	ldr	r3, [r7, #32]
 8009734:	b29a      	uxth	r2, r3
 8009736:	f107 0310 	add.w	r3, r7, #16
 800973a:	9301      	str	r3, [sp, #4]
 800973c:	69fb      	ldr	r3, [r7, #28]
 800973e:	9300      	str	r3, [sp, #0]
 8009740:	68bb      	ldr	r3, [r7, #8]
 8009742:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009744:	68f8      	ldr	r0, [r7, #12]
 8009746:	f001 fc9c 	bl	800b082 <xTaskCreate>
 800974a:	4603      	mov	r3, r0
 800974c:	2b01      	cmp	r3, #1
 800974e:	d001      	beq.n	8009754 <osThreadNew+0x11a>
            hTask = NULL;
 8009750:	2300      	movs	r3, #0
 8009752:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009754:	693b      	ldr	r3, [r7, #16]
}
 8009756:	4618      	mov	r0, r3
 8009758:	3728      	adds	r7, #40	; 0x28
 800975a:	46bd      	mov	sp, r7
 800975c:	bd80      	pop	{r7, pc}

0800975e <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800975e:	b580      	push	{r7, lr}
 8009760:	b084      	sub	sp, #16
 8009762:	af00      	add	r7, sp, #0
 8009764:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009766:	f3ef 8305 	mrs	r3, IPSR
 800976a:	60bb      	str	r3, [r7, #8]
  return(result);
 800976c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800976e:	2b00      	cmp	r3, #0
 8009770:	d003      	beq.n	800977a <osDelay+0x1c>
    stat = osErrorISR;
 8009772:	f06f 0305 	mvn.w	r3, #5
 8009776:	60fb      	str	r3, [r7, #12]
 8009778:	e007      	b.n	800978a <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800977a:	2300      	movs	r3, #0
 800977c:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	2b00      	cmp	r3, #0
 8009782:	d002      	beq.n	800978a <osDelay+0x2c>
      vTaskDelay(ticks);
 8009784:	6878      	ldr	r0, [r7, #4]
 8009786:	f001 fdd7 	bl	800b338 <vTaskDelay>
    }
  }

  return (stat);
 800978a:	68fb      	ldr	r3, [r7, #12]
}
 800978c:	4618      	mov	r0, r3
 800978e:	3710      	adds	r7, #16
 8009790:	46bd      	mov	sp, r7
 8009792:	bd80      	pop	{r7, pc}

08009794 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8009794:	b580      	push	{r7, lr}
 8009796:	b088      	sub	sp, #32
 8009798:	af00      	add	r7, sp, #0
 800979a:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800979c:	2300      	movs	r3, #0
 800979e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80097a0:	f3ef 8305 	mrs	r3, IPSR
 80097a4:	60bb      	str	r3, [r7, #8]
  return(result);
 80097a6:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d174      	bne.n	8009896 <osMutexNew+0x102>
    if (attr != NULL) {
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d003      	beq.n	80097ba <osMutexNew+0x26>
      type = attr->attr_bits;
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	685b      	ldr	r3, [r3, #4]
 80097b6:	61bb      	str	r3, [r7, #24]
 80097b8:	e001      	b.n	80097be <osMutexNew+0x2a>
    } else {
      type = 0U;
 80097ba:	2300      	movs	r3, #0
 80097bc:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 80097be:	69bb      	ldr	r3, [r7, #24]
 80097c0:	f003 0301 	and.w	r3, r3, #1
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d002      	beq.n	80097ce <osMutexNew+0x3a>
      rmtx = 1U;
 80097c8:	2301      	movs	r3, #1
 80097ca:	617b      	str	r3, [r7, #20]
 80097cc:	e001      	b.n	80097d2 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 80097ce:	2300      	movs	r3, #0
 80097d0:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 80097d2:	69bb      	ldr	r3, [r7, #24]
 80097d4:	f003 0308 	and.w	r3, r3, #8
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d15c      	bne.n	8009896 <osMutexNew+0x102>
      mem = -1;
 80097dc:	f04f 33ff 	mov.w	r3, #4294967295
 80097e0:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d015      	beq.n	8009814 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	689b      	ldr	r3, [r3, #8]
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d006      	beq.n	80097fe <osMutexNew+0x6a>
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	68db      	ldr	r3, [r3, #12]
 80097f4:	2b4f      	cmp	r3, #79	; 0x4f
 80097f6:	d902      	bls.n	80097fe <osMutexNew+0x6a>
          mem = 1;
 80097f8:	2301      	movs	r3, #1
 80097fa:	613b      	str	r3, [r7, #16]
 80097fc:	e00c      	b.n	8009818 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	689b      	ldr	r3, [r3, #8]
 8009802:	2b00      	cmp	r3, #0
 8009804:	d108      	bne.n	8009818 <osMutexNew+0x84>
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	68db      	ldr	r3, [r3, #12]
 800980a:	2b00      	cmp	r3, #0
 800980c:	d104      	bne.n	8009818 <osMutexNew+0x84>
            mem = 0;
 800980e:	2300      	movs	r3, #0
 8009810:	613b      	str	r3, [r7, #16]
 8009812:	e001      	b.n	8009818 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8009814:	2300      	movs	r3, #0
 8009816:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8009818:	693b      	ldr	r3, [r7, #16]
 800981a:	2b01      	cmp	r3, #1
 800981c:	d112      	bne.n	8009844 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800981e:	697b      	ldr	r3, [r7, #20]
 8009820:	2b00      	cmp	r3, #0
 8009822:	d007      	beq.n	8009834 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	689b      	ldr	r3, [r3, #8]
 8009828:	4619      	mov	r1, r3
 800982a:	2004      	movs	r0, #4
 800982c:	f000 fce1 	bl	800a1f2 <xQueueCreateMutexStatic>
 8009830:	61f8      	str	r0, [r7, #28]
 8009832:	e016      	b.n	8009862 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	689b      	ldr	r3, [r3, #8]
 8009838:	4619      	mov	r1, r3
 800983a:	2001      	movs	r0, #1
 800983c:	f000 fcd9 	bl	800a1f2 <xQueueCreateMutexStatic>
 8009840:	61f8      	str	r0, [r7, #28]
 8009842:	e00e      	b.n	8009862 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8009844:	693b      	ldr	r3, [r7, #16]
 8009846:	2b00      	cmp	r3, #0
 8009848:	d10b      	bne.n	8009862 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800984a:	697b      	ldr	r3, [r7, #20]
 800984c:	2b00      	cmp	r3, #0
 800984e:	d004      	beq.n	800985a <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8009850:	2004      	movs	r0, #4
 8009852:	f000 fcb6 	bl	800a1c2 <xQueueCreateMutex>
 8009856:	61f8      	str	r0, [r7, #28]
 8009858:	e003      	b.n	8009862 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800985a:	2001      	movs	r0, #1
 800985c:	f000 fcb1 	bl	800a1c2 <xQueueCreateMutex>
 8009860:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8009862:	69fb      	ldr	r3, [r7, #28]
 8009864:	2b00      	cmp	r3, #0
 8009866:	d00c      	beq.n	8009882 <osMutexNew+0xee>
        if (attr != NULL) {
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	2b00      	cmp	r3, #0
 800986c:	d003      	beq.n	8009876 <osMutexNew+0xe2>
          name = attr->name;
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	60fb      	str	r3, [r7, #12]
 8009874:	e001      	b.n	800987a <osMutexNew+0xe6>
        } else {
          name = NULL;
 8009876:	2300      	movs	r3, #0
 8009878:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800987a:	68f9      	ldr	r1, [r7, #12]
 800987c:	69f8      	ldr	r0, [r7, #28]
 800987e:	f001 fb1b 	bl	800aeb8 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8009882:	69fb      	ldr	r3, [r7, #28]
 8009884:	2b00      	cmp	r3, #0
 8009886:	d006      	beq.n	8009896 <osMutexNew+0x102>
 8009888:	697b      	ldr	r3, [r7, #20]
 800988a:	2b00      	cmp	r3, #0
 800988c:	d003      	beq.n	8009896 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800988e:	69fb      	ldr	r3, [r7, #28]
 8009890:	f043 0301 	orr.w	r3, r3, #1
 8009894:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8009896:	69fb      	ldr	r3, [r7, #28]
}
 8009898:	4618      	mov	r0, r3
 800989a:	3720      	adds	r7, #32
 800989c:	46bd      	mov	sp, r7
 800989e:	bd80      	pop	{r7, pc}

080098a0 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80098a0:	b580      	push	{r7, lr}
 80098a2:	b08a      	sub	sp, #40	; 0x28
 80098a4:	af02      	add	r7, sp, #8
 80098a6:	60f8      	str	r0, [r7, #12]
 80098a8:	60b9      	str	r1, [r7, #8]
 80098aa:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80098ac:	2300      	movs	r3, #0
 80098ae:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80098b0:	f3ef 8305 	mrs	r3, IPSR
 80098b4:	613b      	str	r3, [r7, #16]
  return(result);
 80098b6:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d175      	bne.n	80099a8 <osSemaphoreNew+0x108>
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d072      	beq.n	80099a8 <osSemaphoreNew+0x108>
 80098c2:	68ba      	ldr	r2, [r7, #8]
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	429a      	cmp	r2, r3
 80098c8:	d86e      	bhi.n	80099a8 <osSemaphoreNew+0x108>
    mem = -1;
 80098ca:	f04f 33ff 	mov.w	r3, #4294967295
 80098ce:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d015      	beq.n	8009902 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	689b      	ldr	r3, [r3, #8]
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d006      	beq.n	80098ec <osSemaphoreNew+0x4c>
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	68db      	ldr	r3, [r3, #12]
 80098e2:	2b4f      	cmp	r3, #79	; 0x4f
 80098e4:	d902      	bls.n	80098ec <osSemaphoreNew+0x4c>
        mem = 1;
 80098e6:	2301      	movs	r3, #1
 80098e8:	61bb      	str	r3, [r7, #24]
 80098ea:	e00c      	b.n	8009906 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	689b      	ldr	r3, [r3, #8]
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d108      	bne.n	8009906 <osSemaphoreNew+0x66>
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	68db      	ldr	r3, [r3, #12]
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d104      	bne.n	8009906 <osSemaphoreNew+0x66>
          mem = 0;
 80098fc:	2300      	movs	r3, #0
 80098fe:	61bb      	str	r3, [r7, #24]
 8009900:	e001      	b.n	8009906 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8009902:	2300      	movs	r3, #0
 8009904:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8009906:	69bb      	ldr	r3, [r7, #24]
 8009908:	f1b3 3fff 	cmp.w	r3, #4294967295
 800990c:	d04c      	beq.n	80099a8 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	2b01      	cmp	r3, #1
 8009912:	d128      	bne.n	8009966 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8009914:	69bb      	ldr	r3, [r7, #24]
 8009916:	2b01      	cmp	r3, #1
 8009918:	d10a      	bne.n	8009930 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	689b      	ldr	r3, [r3, #8]
 800991e:	2203      	movs	r2, #3
 8009920:	9200      	str	r2, [sp, #0]
 8009922:	2200      	movs	r2, #0
 8009924:	2100      	movs	r1, #0
 8009926:	2001      	movs	r0, #1
 8009928:	f000 fb5c 	bl	8009fe4 <xQueueGenericCreateStatic>
 800992c:	61f8      	str	r0, [r7, #28]
 800992e:	e005      	b.n	800993c <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8009930:	2203      	movs	r2, #3
 8009932:	2100      	movs	r1, #0
 8009934:	2001      	movs	r0, #1
 8009936:	f000 fbcd 	bl	800a0d4 <xQueueGenericCreate>
 800993a:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800993c:	69fb      	ldr	r3, [r7, #28]
 800993e:	2b00      	cmp	r3, #0
 8009940:	d022      	beq.n	8009988 <osSemaphoreNew+0xe8>
 8009942:	68bb      	ldr	r3, [r7, #8]
 8009944:	2b00      	cmp	r3, #0
 8009946:	d01f      	beq.n	8009988 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8009948:	2300      	movs	r3, #0
 800994a:	2200      	movs	r2, #0
 800994c:	2100      	movs	r1, #0
 800994e:	69f8      	ldr	r0, [r7, #28]
 8009950:	f000 fcd4 	bl	800a2fc <xQueueGenericSend>
 8009954:	4603      	mov	r3, r0
 8009956:	2b01      	cmp	r3, #1
 8009958:	d016      	beq.n	8009988 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800995a:	69f8      	ldr	r0, [r7, #28]
 800995c:	f001 f960 	bl	800ac20 <vQueueDelete>
            hSemaphore = NULL;
 8009960:	2300      	movs	r3, #0
 8009962:	61fb      	str	r3, [r7, #28]
 8009964:	e010      	b.n	8009988 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8009966:	69bb      	ldr	r3, [r7, #24]
 8009968:	2b01      	cmp	r3, #1
 800996a:	d108      	bne.n	800997e <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	689b      	ldr	r3, [r3, #8]
 8009970:	461a      	mov	r2, r3
 8009972:	68b9      	ldr	r1, [r7, #8]
 8009974:	68f8      	ldr	r0, [r7, #12]
 8009976:	f000 fc57 	bl	800a228 <xQueueCreateCountingSemaphoreStatic>
 800997a:	61f8      	str	r0, [r7, #28]
 800997c:	e004      	b.n	8009988 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800997e:	68b9      	ldr	r1, [r7, #8]
 8009980:	68f8      	ldr	r0, [r7, #12]
 8009982:	f000 fc88 	bl	800a296 <xQueueCreateCountingSemaphore>
 8009986:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8009988:	69fb      	ldr	r3, [r7, #28]
 800998a:	2b00      	cmp	r3, #0
 800998c:	d00c      	beq.n	80099a8 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	2b00      	cmp	r3, #0
 8009992:	d003      	beq.n	800999c <osSemaphoreNew+0xfc>
          name = attr->name;
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	617b      	str	r3, [r7, #20]
 800999a:	e001      	b.n	80099a0 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800999c:	2300      	movs	r3, #0
 800999e:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80099a0:	6979      	ldr	r1, [r7, #20]
 80099a2:	69f8      	ldr	r0, [r7, #28]
 80099a4:	f001 fa88 	bl	800aeb8 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80099a8:	69fb      	ldr	r3, [r7, #28]
}
 80099aa:	4618      	mov	r0, r3
 80099ac:	3720      	adds	r7, #32
 80099ae:	46bd      	mov	sp, r7
 80099b0:	bd80      	pop	{r7, pc}
	...

080099b4 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80099b4:	b580      	push	{r7, lr}
 80099b6:	b086      	sub	sp, #24
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	6078      	str	r0, [r7, #4]
 80099bc:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80099c2:	2300      	movs	r3, #0
 80099c4:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80099c6:	693b      	ldr	r3, [r7, #16]
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d103      	bne.n	80099d4 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 80099cc:	f06f 0303 	mvn.w	r3, #3
 80099d0:	617b      	str	r3, [r7, #20]
 80099d2:	e039      	b.n	8009a48 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80099d4:	f3ef 8305 	mrs	r3, IPSR
 80099d8:	60fb      	str	r3, [r7, #12]
  return(result);
 80099da:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d022      	beq.n	8009a26 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 80099e0:	683b      	ldr	r3, [r7, #0]
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d003      	beq.n	80099ee <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 80099e6:	f06f 0303 	mvn.w	r3, #3
 80099ea:	617b      	str	r3, [r7, #20]
 80099ec:	e02c      	b.n	8009a48 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 80099ee:	2300      	movs	r3, #0
 80099f0:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80099f2:	f107 0308 	add.w	r3, r7, #8
 80099f6:	461a      	mov	r2, r3
 80099f8:	2100      	movs	r1, #0
 80099fa:	6938      	ldr	r0, [r7, #16]
 80099fc:	f001 f890 	bl	800ab20 <xQueueReceiveFromISR>
 8009a00:	4603      	mov	r3, r0
 8009a02:	2b01      	cmp	r3, #1
 8009a04:	d003      	beq.n	8009a0e <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8009a06:	f06f 0302 	mvn.w	r3, #2
 8009a0a:	617b      	str	r3, [r7, #20]
 8009a0c:	e01c      	b.n	8009a48 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8009a0e:	68bb      	ldr	r3, [r7, #8]
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d019      	beq.n	8009a48 <osSemaphoreAcquire+0x94>
 8009a14:	4b0f      	ldr	r3, [pc, #60]	; (8009a54 <osSemaphoreAcquire+0xa0>)
 8009a16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a1a:	601a      	str	r2, [r3, #0]
 8009a1c:	f3bf 8f4f 	dsb	sy
 8009a20:	f3bf 8f6f 	isb	sy
 8009a24:	e010      	b.n	8009a48 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8009a26:	6839      	ldr	r1, [r7, #0]
 8009a28:	6938      	ldr	r0, [r7, #16]
 8009a2a:	f000 ff6d 	bl	800a908 <xQueueSemaphoreTake>
 8009a2e:	4603      	mov	r3, r0
 8009a30:	2b01      	cmp	r3, #1
 8009a32:	d009      	beq.n	8009a48 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8009a34:	683b      	ldr	r3, [r7, #0]
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d003      	beq.n	8009a42 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8009a3a:	f06f 0301 	mvn.w	r3, #1
 8009a3e:	617b      	str	r3, [r7, #20]
 8009a40:	e002      	b.n	8009a48 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8009a42:	f06f 0302 	mvn.w	r3, #2
 8009a46:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8009a48:	697b      	ldr	r3, [r7, #20]
}
 8009a4a:	4618      	mov	r0, r3
 8009a4c:	3718      	adds	r7, #24
 8009a4e:	46bd      	mov	sp, r7
 8009a50:	bd80      	pop	{r7, pc}
 8009a52:	bf00      	nop
 8009a54:	e000ed04 	.word	0xe000ed04

08009a58 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8009a58:	b580      	push	{r7, lr}
 8009a5a:	b086      	sub	sp, #24
 8009a5c:	af00      	add	r7, sp, #0
 8009a5e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8009a64:	2300      	movs	r3, #0
 8009a66:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8009a68:	693b      	ldr	r3, [r7, #16]
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d103      	bne.n	8009a76 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8009a6e:	f06f 0303 	mvn.w	r3, #3
 8009a72:	617b      	str	r3, [r7, #20]
 8009a74:	e02c      	b.n	8009ad0 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009a76:	f3ef 8305 	mrs	r3, IPSR
 8009a7a:	60fb      	str	r3, [r7, #12]
  return(result);
 8009a7c:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d01a      	beq.n	8009ab8 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8009a82:	2300      	movs	r3, #0
 8009a84:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8009a86:	f107 0308 	add.w	r3, r7, #8
 8009a8a:	4619      	mov	r1, r3
 8009a8c:	6938      	ldr	r0, [r7, #16]
 8009a8e:	f000 fdce 	bl	800a62e <xQueueGiveFromISR>
 8009a92:	4603      	mov	r3, r0
 8009a94:	2b01      	cmp	r3, #1
 8009a96:	d003      	beq.n	8009aa0 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8009a98:	f06f 0302 	mvn.w	r3, #2
 8009a9c:	617b      	str	r3, [r7, #20]
 8009a9e:	e017      	b.n	8009ad0 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8009aa0:	68bb      	ldr	r3, [r7, #8]
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d014      	beq.n	8009ad0 <osSemaphoreRelease+0x78>
 8009aa6:	4b0d      	ldr	r3, [pc, #52]	; (8009adc <osSemaphoreRelease+0x84>)
 8009aa8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009aac:	601a      	str	r2, [r3, #0]
 8009aae:	f3bf 8f4f 	dsb	sy
 8009ab2:	f3bf 8f6f 	isb	sy
 8009ab6:	e00b      	b.n	8009ad0 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8009ab8:	2300      	movs	r3, #0
 8009aba:	2200      	movs	r2, #0
 8009abc:	2100      	movs	r1, #0
 8009abe:	6938      	ldr	r0, [r7, #16]
 8009ac0:	f000 fc1c 	bl	800a2fc <xQueueGenericSend>
 8009ac4:	4603      	mov	r3, r0
 8009ac6:	2b01      	cmp	r3, #1
 8009ac8:	d002      	beq.n	8009ad0 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8009aca:	f06f 0302 	mvn.w	r3, #2
 8009ace:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8009ad0:	697b      	ldr	r3, [r7, #20]
}
 8009ad2:	4618      	mov	r0, r3
 8009ad4:	3718      	adds	r7, #24
 8009ad6:	46bd      	mov	sp, r7
 8009ad8:	bd80      	pop	{r7, pc}
 8009ada:	bf00      	nop
 8009adc:	e000ed04 	.word	0xe000ed04

08009ae0 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8009ae0:	b580      	push	{r7, lr}
 8009ae2:	b08a      	sub	sp, #40	; 0x28
 8009ae4:	af02      	add	r7, sp, #8
 8009ae6:	60f8      	str	r0, [r7, #12]
 8009ae8:	60b9      	str	r1, [r7, #8]
 8009aea:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8009aec:	2300      	movs	r3, #0
 8009aee:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009af0:	f3ef 8305 	mrs	r3, IPSR
 8009af4:	613b      	str	r3, [r7, #16]
  return(result);
 8009af6:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d15f      	bne.n	8009bbc <osMessageQueueNew+0xdc>
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d05c      	beq.n	8009bbc <osMessageQueueNew+0xdc>
 8009b02:	68bb      	ldr	r3, [r7, #8]
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d059      	beq.n	8009bbc <osMessageQueueNew+0xdc>
    mem = -1;
 8009b08:	f04f 33ff 	mov.w	r3, #4294967295
 8009b0c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d029      	beq.n	8009b68 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	689b      	ldr	r3, [r3, #8]
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d012      	beq.n	8009b42 <osMessageQueueNew+0x62>
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	68db      	ldr	r3, [r3, #12]
 8009b20:	2b4f      	cmp	r3, #79	; 0x4f
 8009b22:	d90e      	bls.n	8009b42 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d00a      	beq.n	8009b42 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	695a      	ldr	r2, [r3, #20]
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	68b9      	ldr	r1, [r7, #8]
 8009b34:	fb01 f303 	mul.w	r3, r1, r3
 8009b38:	429a      	cmp	r2, r3
 8009b3a:	d302      	bcc.n	8009b42 <osMessageQueueNew+0x62>
        mem = 1;
 8009b3c:	2301      	movs	r3, #1
 8009b3e:	61bb      	str	r3, [r7, #24]
 8009b40:	e014      	b.n	8009b6c <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	689b      	ldr	r3, [r3, #8]
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d110      	bne.n	8009b6c <osMessageQueueNew+0x8c>
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	68db      	ldr	r3, [r3, #12]
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d10c      	bne.n	8009b6c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d108      	bne.n	8009b6c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	695b      	ldr	r3, [r3, #20]
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d104      	bne.n	8009b6c <osMessageQueueNew+0x8c>
          mem = 0;
 8009b62:	2300      	movs	r3, #0
 8009b64:	61bb      	str	r3, [r7, #24]
 8009b66:	e001      	b.n	8009b6c <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8009b68:	2300      	movs	r3, #0
 8009b6a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009b6c:	69bb      	ldr	r3, [r7, #24]
 8009b6e:	2b01      	cmp	r3, #1
 8009b70:	d10b      	bne.n	8009b8a <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	691a      	ldr	r2, [r3, #16]
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	689b      	ldr	r3, [r3, #8]
 8009b7a:	2100      	movs	r1, #0
 8009b7c:	9100      	str	r1, [sp, #0]
 8009b7e:	68b9      	ldr	r1, [r7, #8]
 8009b80:	68f8      	ldr	r0, [r7, #12]
 8009b82:	f000 fa2f 	bl	8009fe4 <xQueueGenericCreateStatic>
 8009b86:	61f8      	str	r0, [r7, #28]
 8009b88:	e008      	b.n	8009b9c <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8009b8a:	69bb      	ldr	r3, [r7, #24]
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d105      	bne.n	8009b9c <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8009b90:	2200      	movs	r2, #0
 8009b92:	68b9      	ldr	r1, [r7, #8]
 8009b94:	68f8      	ldr	r0, [r7, #12]
 8009b96:	f000 fa9d 	bl	800a0d4 <xQueueGenericCreate>
 8009b9a:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8009b9c:	69fb      	ldr	r3, [r7, #28]
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d00c      	beq.n	8009bbc <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d003      	beq.n	8009bb0 <osMessageQueueNew+0xd0>
        name = attr->name;
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	617b      	str	r3, [r7, #20]
 8009bae:	e001      	b.n	8009bb4 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8009bb0:	2300      	movs	r3, #0
 8009bb2:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8009bb4:	6979      	ldr	r1, [r7, #20]
 8009bb6:	69f8      	ldr	r0, [r7, #28]
 8009bb8:	f001 f97e 	bl	800aeb8 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8009bbc:	69fb      	ldr	r3, [r7, #28]
}
 8009bbe:	4618      	mov	r0, r3
 8009bc0:	3720      	adds	r7, #32
 8009bc2:	46bd      	mov	sp, r7
 8009bc4:	bd80      	pop	{r7, pc}
	...

08009bc8 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8009bc8:	b580      	push	{r7, lr}
 8009bca:	b088      	sub	sp, #32
 8009bcc:	af00      	add	r7, sp, #0
 8009bce:	60f8      	str	r0, [r7, #12]
 8009bd0:	60b9      	str	r1, [r7, #8]
 8009bd2:	603b      	str	r3, [r7, #0]
 8009bd4:	4613      	mov	r3, r2
 8009bd6:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8009bdc:	2300      	movs	r3, #0
 8009bde:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009be0:	f3ef 8305 	mrs	r3, IPSR
 8009be4:	617b      	str	r3, [r7, #20]
  return(result);
 8009be6:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d028      	beq.n	8009c3e <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009bec:	69bb      	ldr	r3, [r7, #24]
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d005      	beq.n	8009bfe <osMessageQueuePut+0x36>
 8009bf2:	68bb      	ldr	r3, [r7, #8]
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d002      	beq.n	8009bfe <osMessageQueuePut+0x36>
 8009bf8:	683b      	ldr	r3, [r7, #0]
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d003      	beq.n	8009c06 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8009bfe:	f06f 0303 	mvn.w	r3, #3
 8009c02:	61fb      	str	r3, [r7, #28]
 8009c04:	e038      	b.n	8009c78 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8009c06:	2300      	movs	r3, #0
 8009c08:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8009c0a:	f107 0210 	add.w	r2, r7, #16
 8009c0e:	2300      	movs	r3, #0
 8009c10:	68b9      	ldr	r1, [r7, #8]
 8009c12:	69b8      	ldr	r0, [r7, #24]
 8009c14:	f000 fc70 	bl	800a4f8 <xQueueGenericSendFromISR>
 8009c18:	4603      	mov	r3, r0
 8009c1a:	2b01      	cmp	r3, #1
 8009c1c:	d003      	beq.n	8009c26 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8009c1e:	f06f 0302 	mvn.w	r3, #2
 8009c22:	61fb      	str	r3, [r7, #28]
 8009c24:	e028      	b.n	8009c78 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8009c26:	693b      	ldr	r3, [r7, #16]
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d025      	beq.n	8009c78 <osMessageQueuePut+0xb0>
 8009c2c:	4b15      	ldr	r3, [pc, #84]	; (8009c84 <osMessageQueuePut+0xbc>)
 8009c2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c32:	601a      	str	r2, [r3, #0]
 8009c34:	f3bf 8f4f 	dsb	sy
 8009c38:	f3bf 8f6f 	isb	sy
 8009c3c:	e01c      	b.n	8009c78 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8009c3e:	69bb      	ldr	r3, [r7, #24]
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d002      	beq.n	8009c4a <osMessageQueuePut+0x82>
 8009c44:	68bb      	ldr	r3, [r7, #8]
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d103      	bne.n	8009c52 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8009c4a:	f06f 0303 	mvn.w	r3, #3
 8009c4e:	61fb      	str	r3, [r7, #28]
 8009c50:	e012      	b.n	8009c78 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8009c52:	2300      	movs	r3, #0
 8009c54:	683a      	ldr	r2, [r7, #0]
 8009c56:	68b9      	ldr	r1, [r7, #8]
 8009c58:	69b8      	ldr	r0, [r7, #24]
 8009c5a:	f000 fb4f 	bl	800a2fc <xQueueGenericSend>
 8009c5e:	4603      	mov	r3, r0
 8009c60:	2b01      	cmp	r3, #1
 8009c62:	d009      	beq.n	8009c78 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8009c64:	683b      	ldr	r3, [r7, #0]
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d003      	beq.n	8009c72 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8009c6a:	f06f 0301 	mvn.w	r3, #1
 8009c6e:	61fb      	str	r3, [r7, #28]
 8009c70:	e002      	b.n	8009c78 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8009c72:	f06f 0302 	mvn.w	r3, #2
 8009c76:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8009c78:	69fb      	ldr	r3, [r7, #28]
}
 8009c7a:	4618      	mov	r0, r3
 8009c7c:	3720      	adds	r7, #32
 8009c7e:	46bd      	mov	sp, r7
 8009c80:	bd80      	pop	{r7, pc}
 8009c82:	bf00      	nop
 8009c84:	e000ed04 	.word	0xe000ed04

08009c88 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8009c88:	b580      	push	{r7, lr}
 8009c8a:	b088      	sub	sp, #32
 8009c8c:	af00      	add	r7, sp, #0
 8009c8e:	60f8      	str	r0, [r7, #12]
 8009c90:	60b9      	str	r1, [r7, #8]
 8009c92:	607a      	str	r2, [r7, #4]
 8009c94:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8009c9a:	2300      	movs	r3, #0
 8009c9c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009c9e:	f3ef 8305 	mrs	r3, IPSR
 8009ca2:	617b      	str	r3, [r7, #20]
  return(result);
 8009ca4:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d028      	beq.n	8009cfc <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009caa:	69bb      	ldr	r3, [r7, #24]
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d005      	beq.n	8009cbc <osMessageQueueGet+0x34>
 8009cb0:	68bb      	ldr	r3, [r7, #8]
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d002      	beq.n	8009cbc <osMessageQueueGet+0x34>
 8009cb6:	683b      	ldr	r3, [r7, #0]
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d003      	beq.n	8009cc4 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8009cbc:	f06f 0303 	mvn.w	r3, #3
 8009cc0:	61fb      	str	r3, [r7, #28]
 8009cc2:	e037      	b.n	8009d34 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8009cc4:	2300      	movs	r3, #0
 8009cc6:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8009cc8:	f107 0310 	add.w	r3, r7, #16
 8009ccc:	461a      	mov	r2, r3
 8009cce:	68b9      	ldr	r1, [r7, #8]
 8009cd0:	69b8      	ldr	r0, [r7, #24]
 8009cd2:	f000 ff25 	bl	800ab20 <xQueueReceiveFromISR>
 8009cd6:	4603      	mov	r3, r0
 8009cd8:	2b01      	cmp	r3, #1
 8009cda:	d003      	beq.n	8009ce4 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8009cdc:	f06f 0302 	mvn.w	r3, #2
 8009ce0:	61fb      	str	r3, [r7, #28]
 8009ce2:	e027      	b.n	8009d34 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8009ce4:	693b      	ldr	r3, [r7, #16]
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d024      	beq.n	8009d34 <osMessageQueueGet+0xac>
 8009cea:	4b15      	ldr	r3, [pc, #84]	; (8009d40 <osMessageQueueGet+0xb8>)
 8009cec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009cf0:	601a      	str	r2, [r3, #0]
 8009cf2:	f3bf 8f4f 	dsb	sy
 8009cf6:	f3bf 8f6f 	isb	sy
 8009cfa:	e01b      	b.n	8009d34 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8009cfc:	69bb      	ldr	r3, [r7, #24]
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d002      	beq.n	8009d08 <osMessageQueueGet+0x80>
 8009d02:	68bb      	ldr	r3, [r7, #8]
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d103      	bne.n	8009d10 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8009d08:	f06f 0303 	mvn.w	r3, #3
 8009d0c:	61fb      	str	r3, [r7, #28]
 8009d0e:	e011      	b.n	8009d34 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8009d10:	683a      	ldr	r2, [r7, #0]
 8009d12:	68b9      	ldr	r1, [r7, #8]
 8009d14:	69b8      	ldr	r0, [r7, #24]
 8009d16:	f000 fd17 	bl	800a748 <xQueueReceive>
 8009d1a:	4603      	mov	r3, r0
 8009d1c:	2b01      	cmp	r3, #1
 8009d1e:	d009      	beq.n	8009d34 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8009d20:	683b      	ldr	r3, [r7, #0]
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d003      	beq.n	8009d2e <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8009d26:	f06f 0301 	mvn.w	r3, #1
 8009d2a:	61fb      	str	r3, [r7, #28]
 8009d2c:	e002      	b.n	8009d34 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8009d2e:	f06f 0302 	mvn.w	r3, #2
 8009d32:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8009d34:	69fb      	ldr	r3, [r7, #28]
}
 8009d36:	4618      	mov	r0, r3
 8009d38:	3720      	adds	r7, #32
 8009d3a:	46bd      	mov	sp, r7
 8009d3c:	bd80      	pop	{r7, pc}
 8009d3e:	bf00      	nop
 8009d40:	e000ed04 	.word	0xe000ed04

08009d44 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009d44:	b480      	push	{r7}
 8009d46:	b085      	sub	sp, #20
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	60f8      	str	r0, [r7, #12]
 8009d4c:	60b9      	str	r1, [r7, #8]
 8009d4e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	4a07      	ldr	r2, [pc, #28]	; (8009d70 <vApplicationGetIdleTaskMemory+0x2c>)
 8009d54:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009d56:	68bb      	ldr	r3, [r7, #8]
 8009d58:	4a06      	ldr	r2, [pc, #24]	; (8009d74 <vApplicationGetIdleTaskMemory+0x30>)
 8009d5a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	2280      	movs	r2, #128	; 0x80
 8009d60:	601a      	str	r2, [r3, #0]
}
 8009d62:	bf00      	nop
 8009d64:	3714      	adds	r7, #20
 8009d66:	46bd      	mov	sp, r7
 8009d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d6c:	4770      	bx	lr
 8009d6e:	bf00      	nop
 8009d70:	200003d8 	.word	0x200003d8
 8009d74:	20000494 	.word	0x20000494

08009d78 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009d78:	b480      	push	{r7}
 8009d7a:	b085      	sub	sp, #20
 8009d7c:	af00      	add	r7, sp, #0
 8009d7e:	60f8      	str	r0, [r7, #12]
 8009d80:	60b9      	str	r1, [r7, #8]
 8009d82:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	4a07      	ldr	r2, [pc, #28]	; (8009da4 <vApplicationGetTimerTaskMemory+0x2c>)
 8009d88:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009d8a:	68bb      	ldr	r3, [r7, #8]
 8009d8c:	4a06      	ldr	r2, [pc, #24]	; (8009da8 <vApplicationGetTimerTaskMemory+0x30>)
 8009d8e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009d96:	601a      	str	r2, [r3, #0]
}
 8009d98:	bf00      	nop
 8009d9a:	3714      	adds	r7, #20
 8009d9c:	46bd      	mov	sp, r7
 8009d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da2:	4770      	bx	lr
 8009da4:	20000694 	.word	0x20000694
 8009da8:	20000750 	.word	0x20000750

08009dac <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009dac:	b480      	push	{r7}
 8009dae:	b083      	sub	sp, #12
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	f103 0208 	add.w	r2, r3, #8
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	f04f 32ff 	mov.w	r2, #4294967295
 8009dc4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	f103 0208 	add.w	r2, r3, #8
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	f103 0208 	add.w	r2, r3, #8
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	2200      	movs	r2, #0
 8009dde:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009de0:	bf00      	nop
 8009de2:	370c      	adds	r7, #12
 8009de4:	46bd      	mov	sp, r7
 8009de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dea:	4770      	bx	lr

08009dec <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009dec:	b480      	push	{r7}
 8009dee:	b083      	sub	sp, #12
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	2200      	movs	r2, #0
 8009df8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009dfa:	bf00      	nop
 8009dfc:	370c      	adds	r7, #12
 8009dfe:	46bd      	mov	sp, r7
 8009e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e04:	4770      	bx	lr

08009e06 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009e06:	b480      	push	{r7}
 8009e08:	b085      	sub	sp, #20
 8009e0a:	af00      	add	r7, sp, #0
 8009e0c:	6078      	str	r0, [r7, #4]
 8009e0e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	685b      	ldr	r3, [r3, #4]
 8009e14:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009e16:	683b      	ldr	r3, [r7, #0]
 8009e18:	68fa      	ldr	r2, [r7, #12]
 8009e1a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	689a      	ldr	r2, [r3, #8]
 8009e20:	683b      	ldr	r3, [r7, #0]
 8009e22:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	689b      	ldr	r3, [r3, #8]
 8009e28:	683a      	ldr	r2, [r7, #0]
 8009e2a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	683a      	ldr	r2, [r7, #0]
 8009e30:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009e32:	683b      	ldr	r3, [r7, #0]
 8009e34:	687a      	ldr	r2, [r7, #4]
 8009e36:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	1c5a      	adds	r2, r3, #1
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	601a      	str	r2, [r3, #0]
}
 8009e42:	bf00      	nop
 8009e44:	3714      	adds	r7, #20
 8009e46:	46bd      	mov	sp, r7
 8009e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e4c:	4770      	bx	lr

08009e4e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009e4e:	b480      	push	{r7}
 8009e50:	b085      	sub	sp, #20
 8009e52:	af00      	add	r7, sp, #0
 8009e54:	6078      	str	r0, [r7, #4]
 8009e56:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009e58:	683b      	ldr	r3, [r7, #0]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009e5e:	68bb      	ldr	r3, [r7, #8]
 8009e60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e64:	d103      	bne.n	8009e6e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	691b      	ldr	r3, [r3, #16]
 8009e6a:	60fb      	str	r3, [r7, #12]
 8009e6c:	e00c      	b.n	8009e88 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	3308      	adds	r3, #8
 8009e72:	60fb      	str	r3, [r7, #12]
 8009e74:	e002      	b.n	8009e7c <vListInsert+0x2e>
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	685b      	ldr	r3, [r3, #4]
 8009e7a:	60fb      	str	r3, [r7, #12]
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	685b      	ldr	r3, [r3, #4]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	68ba      	ldr	r2, [r7, #8]
 8009e84:	429a      	cmp	r2, r3
 8009e86:	d2f6      	bcs.n	8009e76 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	685a      	ldr	r2, [r3, #4]
 8009e8c:	683b      	ldr	r3, [r7, #0]
 8009e8e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009e90:	683b      	ldr	r3, [r7, #0]
 8009e92:	685b      	ldr	r3, [r3, #4]
 8009e94:	683a      	ldr	r2, [r7, #0]
 8009e96:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009e98:	683b      	ldr	r3, [r7, #0]
 8009e9a:	68fa      	ldr	r2, [r7, #12]
 8009e9c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	683a      	ldr	r2, [r7, #0]
 8009ea2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009ea4:	683b      	ldr	r3, [r7, #0]
 8009ea6:	687a      	ldr	r2, [r7, #4]
 8009ea8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	1c5a      	adds	r2, r3, #1
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	601a      	str	r2, [r3, #0]
}
 8009eb4:	bf00      	nop
 8009eb6:	3714      	adds	r7, #20
 8009eb8:	46bd      	mov	sp, r7
 8009eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ebe:	4770      	bx	lr

08009ec0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009ec0:	b480      	push	{r7}
 8009ec2:	b085      	sub	sp, #20
 8009ec4:	af00      	add	r7, sp, #0
 8009ec6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	691b      	ldr	r3, [r3, #16]
 8009ecc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	685b      	ldr	r3, [r3, #4]
 8009ed2:	687a      	ldr	r2, [r7, #4]
 8009ed4:	6892      	ldr	r2, [r2, #8]
 8009ed6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	689b      	ldr	r3, [r3, #8]
 8009edc:	687a      	ldr	r2, [r7, #4]
 8009ede:	6852      	ldr	r2, [r2, #4]
 8009ee0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	685b      	ldr	r3, [r3, #4]
 8009ee6:	687a      	ldr	r2, [r7, #4]
 8009ee8:	429a      	cmp	r2, r3
 8009eea:	d103      	bne.n	8009ef4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	689a      	ldr	r2, [r3, #8]
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	2200      	movs	r2, #0
 8009ef8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	1e5a      	subs	r2, r3, #1
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	681b      	ldr	r3, [r3, #0]
}
 8009f08:	4618      	mov	r0, r3
 8009f0a:	3714      	adds	r7, #20
 8009f0c:	46bd      	mov	sp, r7
 8009f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f12:	4770      	bx	lr

08009f14 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009f14:	b580      	push	{r7, lr}
 8009f16:	b084      	sub	sp, #16
 8009f18:	af00      	add	r7, sp, #0
 8009f1a:	6078      	str	r0, [r7, #4]
 8009f1c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d10a      	bne.n	8009f3e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009f28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f2c:	f383 8811 	msr	BASEPRI, r3
 8009f30:	f3bf 8f6f 	isb	sy
 8009f34:	f3bf 8f4f 	dsb	sy
 8009f38:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009f3a:	bf00      	nop
 8009f3c:	e7fe      	b.n	8009f3c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009f3e:	f002 fcf9 	bl	800c934 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	681a      	ldr	r2, [r3, #0]
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f4a:	68f9      	ldr	r1, [r7, #12]
 8009f4c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009f4e:	fb01 f303 	mul.w	r3, r1, r3
 8009f52:	441a      	add	r2, r3
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	2200      	movs	r2, #0
 8009f5c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	681a      	ldr	r2, [r3, #0]
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	681a      	ldr	r2, [r3, #0]
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f6e:	3b01      	subs	r3, #1
 8009f70:	68f9      	ldr	r1, [r7, #12]
 8009f72:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009f74:	fb01 f303 	mul.w	r3, r1, r3
 8009f78:	441a      	add	r2, r3
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	22ff      	movs	r2, #255	; 0xff
 8009f82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	22ff      	movs	r2, #255	; 0xff
 8009f8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009f8e:	683b      	ldr	r3, [r7, #0]
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d114      	bne.n	8009fbe <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	691b      	ldr	r3, [r3, #16]
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d01a      	beq.n	8009fd2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	3310      	adds	r3, #16
 8009fa0:	4618      	mov	r0, r3
 8009fa2:	f001 fca9 	bl	800b8f8 <xTaskRemoveFromEventList>
 8009fa6:	4603      	mov	r3, r0
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d012      	beq.n	8009fd2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009fac:	4b0c      	ldr	r3, [pc, #48]	; (8009fe0 <xQueueGenericReset+0xcc>)
 8009fae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009fb2:	601a      	str	r2, [r3, #0]
 8009fb4:	f3bf 8f4f 	dsb	sy
 8009fb8:	f3bf 8f6f 	isb	sy
 8009fbc:	e009      	b.n	8009fd2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	3310      	adds	r3, #16
 8009fc2:	4618      	mov	r0, r3
 8009fc4:	f7ff fef2 	bl	8009dac <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	3324      	adds	r3, #36	; 0x24
 8009fcc:	4618      	mov	r0, r3
 8009fce:	f7ff feed 	bl	8009dac <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009fd2:	f002 fcdf 	bl	800c994 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009fd6:	2301      	movs	r3, #1
}
 8009fd8:	4618      	mov	r0, r3
 8009fda:	3710      	adds	r7, #16
 8009fdc:	46bd      	mov	sp, r7
 8009fde:	bd80      	pop	{r7, pc}
 8009fe0:	e000ed04 	.word	0xe000ed04

08009fe4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009fe4:	b580      	push	{r7, lr}
 8009fe6:	b08e      	sub	sp, #56	; 0x38
 8009fe8:	af02      	add	r7, sp, #8
 8009fea:	60f8      	str	r0, [r7, #12]
 8009fec:	60b9      	str	r1, [r7, #8]
 8009fee:	607a      	str	r2, [r7, #4]
 8009ff0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d10a      	bne.n	800a00e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8009ff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ffc:	f383 8811 	msr	BASEPRI, r3
 800a000:	f3bf 8f6f 	isb	sy
 800a004:	f3bf 8f4f 	dsb	sy
 800a008:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a00a:	bf00      	nop
 800a00c:	e7fe      	b.n	800a00c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a00e:	683b      	ldr	r3, [r7, #0]
 800a010:	2b00      	cmp	r3, #0
 800a012:	d10a      	bne.n	800a02a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800a014:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a018:	f383 8811 	msr	BASEPRI, r3
 800a01c:	f3bf 8f6f 	isb	sy
 800a020:	f3bf 8f4f 	dsb	sy
 800a024:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a026:	bf00      	nop
 800a028:	e7fe      	b.n	800a028 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d002      	beq.n	800a036 <xQueueGenericCreateStatic+0x52>
 800a030:	68bb      	ldr	r3, [r7, #8]
 800a032:	2b00      	cmp	r3, #0
 800a034:	d001      	beq.n	800a03a <xQueueGenericCreateStatic+0x56>
 800a036:	2301      	movs	r3, #1
 800a038:	e000      	b.n	800a03c <xQueueGenericCreateStatic+0x58>
 800a03a:	2300      	movs	r3, #0
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d10a      	bne.n	800a056 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800a040:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a044:	f383 8811 	msr	BASEPRI, r3
 800a048:	f3bf 8f6f 	isb	sy
 800a04c:	f3bf 8f4f 	dsb	sy
 800a050:	623b      	str	r3, [r7, #32]
}
 800a052:	bf00      	nop
 800a054:	e7fe      	b.n	800a054 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d102      	bne.n	800a062 <xQueueGenericCreateStatic+0x7e>
 800a05c:	68bb      	ldr	r3, [r7, #8]
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d101      	bne.n	800a066 <xQueueGenericCreateStatic+0x82>
 800a062:	2301      	movs	r3, #1
 800a064:	e000      	b.n	800a068 <xQueueGenericCreateStatic+0x84>
 800a066:	2300      	movs	r3, #0
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d10a      	bne.n	800a082 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800a06c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a070:	f383 8811 	msr	BASEPRI, r3
 800a074:	f3bf 8f6f 	isb	sy
 800a078:	f3bf 8f4f 	dsb	sy
 800a07c:	61fb      	str	r3, [r7, #28]
}
 800a07e:	bf00      	nop
 800a080:	e7fe      	b.n	800a080 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a082:	2350      	movs	r3, #80	; 0x50
 800a084:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a086:	697b      	ldr	r3, [r7, #20]
 800a088:	2b50      	cmp	r3, #80	; 0x50
 800a08a:	d00a      	beq.n	800a0a2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800a08c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a090:	f383 8811 	msr	BASEPRI, r3
 800a094:	f3bf 8f6f 	isb	sy
 800a098:	f3bf 8f4f 	dsb	sy
 800a09c:	61bb      	str	r3, [r7, #24]
}
 800a09e:	bf00      	nop
 800a0a0:	e7fe      	b.n	800a0a0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a0a2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a0a4:	683b      	ldr	r3, [r7, #0]
 800a0a6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800a0a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d00d      	beq.n	800a0ca <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a0ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0b0:	2201      	movs	r2, #1
 800a0b2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a0b6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a0ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0bc:	9300      	str	r3, [sp, #0]
 800a0be:	4613      	mov	r3, r2
 800a0c0:	687a      	ldr	r2, [r7, #4]
 800a0c2:	68b9      	ldr	r1, [r7, #8]
 800a0c4:	68f8      	ldr	r0, [r7, #12]
 800a0c6:	f000 f83f 	bl	800a148 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a0ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a0cc:	4618      	mov	r0, r3
 800a0ce:	3730      	adds	r7, #48	; 0x30
 800a0d0:	46bd      	mov	sp, r7
 800a0d2:	bd80      	pop	{r7, pc}

0800a0d4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a0d4:	b580      	push	{r7, lr}
 800a0d6:	b08a      	sub	sp, #40	; 0x28
 800a0d8:	af02      	add	r7, sp, #8
 800a0da:	60f8      	str	r0, [r7, #12]
 800a0dc:	60b9      	str	r1, [r7, #8]
 800a0de:	4613      	mov	r3, r2
 800a0e0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d10a      	bne.n	800a0fe <xQueueGenericCreate+0x2a>
	__asm volatile
 800a0e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0ec:	f383 8811 	msr	BASEPRI, r3
 800a0f0:	f3bf 8f6f 	isb	sy
 800a0f4:	f3bf 8f4f 	dsb	sy
 800a0f8:	613b      	str	r3, [r7, #16]
}
 800a0fa:	bf00      	nop
 800a0fc:	e7fe      	b.n	800a0fc <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	68ba      	ldr	r2, [r7, #8]
 800a102:	fb02 f303 	mul.w	r3, r2, r3
 800a106:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800a108:	69fb      	ldr	r3, [r7, #28]
 800a10a:	3350      	adds	r3, #80	; 0x50
 800a10c:	4618      	mov	r0, r3
 800a10e:	f002 fd33 	bl	800cb78 <pvPortMalloc>
 800a112:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a114:	69bb      	ldr	r3, [r7, #24]
 800a116:	2b00      	cmp	r3, #0
 800a118:	d011      	beq.n	800a13e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800a11a:	69bb      	ldr	r3, [r7, #24]
 800a11c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a11e:	697b      	ldr	r3, [r7, #20]
 800a120:	3350      	adds	r3, #80	; 0x50
 800a122:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a124:	69bb      	ldr	r3, [r7, #24]
 800a126:	2200      	movs	r2, #0
 800a128:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a12c:	79fa      	ldrb	r2, [r7, #7]
 800a12e:	69bb      	ldr	r3, [r7, #24]
 800a130:	9300      	str	r3, [sp, #0]
 800a132:	4613      	mov	r3, r2
 800a134:	697a      	ldr	r2, [r7, #20]
 800a136:	68b9      	ldr	r1, [r7, #8]
 800a138:	68f8      	ldr	r0, [r7, #12]
 800a13a:	f000 f805 	bl	800a148 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a13e:	69bb      	ldr	r3, [r7, #24]
	}
 800a140:	4618      	mov	r0, r3
 800a142:	3720      	adds	r7, #32
 800a144:	46bd      	mov	sp, r7
 800a146:	bd80      	pop	{r7, pc}

0800a148 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a148:	b580      	push	{r7, lr}
 800a14a:	b084      	sub	sp, #16
 800a14c:	af00      	add	r7, sp, #0
 800a14e:	60f8      	str	r0, [r7, #12]
 800a150:	60b9      	str	r1, [r7, #8]
 800a152:	607a      	str	r2, [r7, #4]
 800a154:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a156:	68bb      	ldr	r3, [r7, #8]
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d103      	bne.n	800a164 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a15c:	69bb      	ldr	r3, [r7, #24]
 800a15e:	69ba      	ldr	r2, [r7, #24]
 800a160:	601a      	str	r2, [r3, #0]
 800a162:	e002      	b.n	800a16a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a164:	69bb      	ldr	r3, [r7, #24]
 800a166:	687a      	ldr	r2, [r7, #4]
 800a168:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a16a:	69bb      	ldr	r3, [r7, #24]
 800a16c:	68fa      	ldr	r2, [r7, #12]
 800a16e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a170:	69bb      	ldr	r3, [r7, #24]
 800a172:	68ba      	ldr	r2, [r7, #8]
 800a174:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a176:	2101      	movs	r1, #1
 800a178:	69b8      	ldr	r0, [r7, #24]
 800a17a:	f7ff fecb 	bl	8009f14 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a17e:	69bb      	ldr	r3, [r7, #24]
 800a180:	78fa      	ldrb	r2, [r7, #3]
 800a182:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a186:	bf00      	nop
 800a188:	3710      	adds	r7, #16
 800a18a:	46bd      	mov	sp, r7
 800a18c:	bd80      	pop	{r7, pc}

0800a18e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800a18e:	b580      	push	{r7, lr}
 800a190:	b082      	sub	sp, #8
 800a192:	af00      	add	r7, sp, #0
 800a194:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d00e      	beq.n	800a1ba <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	2200      	movs	r2, #0
 800a1a0:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	2200      	movs	r2, #0
 800a1a6:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	2200      	movs	r2, #0
 800a1ac:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800a1ae:	2300      	movs	r3, #0
 800a1b0:	2200      	movs	r2, #0
 800a1b2:	2100      	movs	r1, #0
 800a1b4:	6878      	ldr	r0, [r7, #4]
 800a1b6:	f000 f8a1 	bl	800a2fc <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800a1ba:	bf00      	nop
 800a1bc:	3708      	adds	r7, #8
 800a1be:	46bd      	mov	sp, r7
 800a1c0:	bd80      	pop	{r7, pc}

0800a1c2 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800a1c2:	b580      	push	{r7, lr}
 800a1c4:	b086      	sub	sp, #24
 800a1c6:	af00      	add	r7, sp, #0
 800a1c8:	4603      	mov	r3, r0
 800a1ca:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800a1cc:	2301      	movs	r3, #1
 800a1ce:	617b      	str	r3, [r7, #20]
 800a1d0:	2300      	movs	r3, #0
 800a1d2:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800a1d4:	79fb      	ldrb	r3, [r7, #7]
 800a1d6:	461a      	mov	r2, r3
 800a1d8:	6939      	ldr	r1, [r7, #16]
 800a1da:	6978      	ldr	r0, [r7, #20]
 800a1dc:	f7ff ff7a 	bl	800a0d4 <xQueueGenericCreate>
 800a1e0:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800a1e2:	68f8      	ldr	r0, [r7, #12]
 800a1e4:	f7ff ffd3 	bl	800a18e <prvInitialiseMutex>

		return xNewQueue;
 800a1e8:	68fb      	ldr	r3, [r7, #12]
	}
 800a1ea:	4618      	mov	r0, r3
 800a1ec:	3718      	adds	r7, #24
 800a1ee:	46bd      	mov	sp, r7
 800a1f0:	bd80      	pop	{r7, pc}

0800a1f2 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800a1f2:	b580      	push	{r7, lr}
 800a1f4:	b088      	sub	sp, #32
 800a1f6:	af02      	add	r7, sp, #8
 800a1f8:	4603      	mov	r3, r0
 800a1fa:	6039      	str	r1, [r7, #0]
 800a1fc:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800a1fe:	2301      	movs	r3, #1
 800a200:	617b      	str	r3, [r7, #20]
 800a202:	2300      	movs	r3, #0
 800a204:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800a206:	79fb      	ldrb	r3, [r7, #7]
 800a208:	9300      	str	r3, [sp, #0]
 800a20a:	683b      	ldr	r3, [r7, #0]
 800a20c:	2200      	movs	r2, #0
 800a20e:	6939      	ldr	r1, [r7, #16]
 800a210:	6978      	ldr	r0, [r7, #20]
 800a212:	f7ff fee7 	bl	8009fe4 <xQueueGenericCreateStatic>
 800a216:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800a218:	68f8      	ldr	r0, [r7, #12]
 800a21a:	f7ff ffb8 	bl	800a18e <prvInitialiseMutex>

		return xNewQueue;
 800a21e:	68fb      	ldr	r3, [r7, #12]
	}
 800a220:	4618      	mov	r0, r3
 800a222:	3718      	adds	r7, #24
 800a224:	46bd      	mov	sp, r7
 800a226:	bd80      	pop	{r7, pc}

0800a228 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800a228:	b580      	push	{r7, lr}
 800a22a:	b08a      	sub	sp, #40	; 0x28
 800a22c:	af02      	add	r7, sp, #8
 800a22e:	60f8      	str	r0, [r7, #12]
 800a230:	60b9      	str	r1, [r7, #8]
 800a232:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	2b00      	cmp	r3, #0
 800a238:	d10a      	bne.n	800a250 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800a23a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a23e:	f383 8811 	msr	BASEPRI, r3
 800a242:	f3bf 8f6f 	isb	sy
 800a246:	f3bf 8f4f 	dsb	sy
 800a24a:	61bb      	str	r3, [r7, #24]
}
 800a24c:	bf00      	nop
 800a24e:	e7fe      	b.n	800a24e <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800a250:	68ba      	ldr	r2, [r7, #8]
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	429a      	cmp	r2, r3
 800a256:	d90a      	bls.n	800a26e <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800a258:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a25c:	f383 8811 	msr	BASEPRI, r3
 800a260:	f3bf 8f6f 	isb	sy
 800a264:	f3bf 8f4f 	dsb	sy
 800a268:	617b      	str	r3, [r7, #20]
}
 800a26a:	bf00      	nop
 800a26c:	e7fe      	b.n	800a26c <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800a26e:	2302      	movs	r3, #2
 800a270:	9300      	str	r3, [sp, #0]
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	2200      	movs	r2, #0
 800a276:	2100      	movs	r1, #0
 800a278:	68f8      	ldr	r0, [r7, #12]
 800a27a:	f7ff feb3 	bl	8009fe4 <xQueueGenericCreateStatic>
 800a27e:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800a280:	69fb      	ldr	r3, [r7, #28]
 800a282:	2b00      	cmp	r3, #0
 800a284:	d002      	beq.n	800a28c <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800a286:	69fb      	ldr	r3, [r7, #28]
 800a288:	68ba      	ldr	r2, [r7, #8]
 800a28a:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800a28c:	69fb      	ldr	r3, [r7, #28]
	}
 800a28e:	4618      	mov	r0, r3
 800a290:	3720      	adds	r7, #32
 800a292:	46bd      	mov	sp, r7
 800a294:	bd80      	pop	{r7, pc}

0800a296 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800a296:	b580      	push	{r7, lr}
 800a298:	b086      	sub	sp, #24
 800a29a:	af00      	add	r7, sp, #0
 800a29c:	6078      	str	r0, [r7, #4]
 800a29e:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d10a      	bne.n	800a2bc <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800a2a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2aa:	f383 8811 	msr	BASEPRI, r3
 800a2ae:	f3bf 8f6f 	isb	sy
 800a2b2:	f3bf 8f4f 	dsb	sy
 800a2b6:	613b      	str	r3, [r7, #16]
}
 800a2b8:	bf00      	nop
 800a2ba:	e7fe      	b.n	800a2ba <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800a2bc:	683a      	ldr	r2, [r7, #0]
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	429a      	cmp	r2, r3
 800a2c2:	d90a      	bls.n	800a2da <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800a2c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2c8:	f383 8811 	msr	BASEPRI, r3
 800a2cc:	f3bf 8f6f 	isb	sy
 800a2d0:	f3bf 8f4f 	dsb	sy
 800a2d4:	60fb      	str	r3, [r7, #12]
}
 800a2d6:	bf00      	nop
 800a2d8:	e7fe      	b.n	800a2d8 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800a2da:	2202      	movs	r2, #2
 800a2dc:	2100      	movs	r1, #0
 800a2de:	6878      	ldr	r0, [r7, #4]
 800a2e0:	f7ff fef8 	bl	800a0d4 <xQueueGenericCreate>
 800a2e4:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800a2e6:	697b      	ldr	r3, [r7, #20]
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d002      	beq.n	800a2f2 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800a2ec:	697b      	ldr	r3, [r7, #20]
 800a2ee:	683a      	ldr	r2, [r7, #0]
 800a2f0:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800a2f2:	697b      	ldr	r3, [r7, #20]
	}
 800a2f4:	4618      	mov	r0, r3
 800a2f6:	3718      	adds	r7, #24
 800a2f8:	46bd      	mov	sp, r7
 800a2fa:	bd80      	pop	{r7, pc}

0800a2fc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a2fc:	b580      	push	{r7, lr}
 800a2fe:	b08e      	sub	sp, #56	; 0x38
 800a300:	af00      	add	r7, sp, #0
 800a302:	60f8      	str	r0, [r7, #12]
 800a304:	60b9      	str	r1, [r7, #8]
 800a306:	607a      	str	r2, [r7, #4]
 800a308:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a30a:	2300      	movs	r3, #0
 800a30c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a314:	2b00      	cmp	r3, #0
 800a316:	d10a      	bne.n	800a32e <xQueueGenericSend+0x32>
	__asm volatile
 800a318:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a31c:	f383 8811 	msr	BASEPRI, r3
 800a320:	f3bf 8f6f 	isb	sy
 800a324:	f3bf 8f4f 	dsb	sy
 800a328:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a32a:	bf00      	nop
 800a32c:	e7fe      	b.n	800a32c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a32e:	68bb      	ldr	r3, [r7, #8]
 800a330:	2b00      	cmp	r3, #0
 800a332:	d103      	bne.n	800a33c <xQueueGenericSend+0x40>
 800a334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d101      	bne.n	800a340 <xQueueGenericSend+0x44>
 800a33c:	2301      	movs	r3, #1
 800a33e:	e000      	b.n	800a342 <xQueueGenericSend+0x46>
 800a340:	2300      	movs	r3, #0
 800a342:	2b00      	cmp	r3, #0
 800a344:	d10a      	bne.n	800a35c <xQueueGenericSend+0x60>
	__asm volatile
 800a346:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a34a:	f383 8811 	msr	BASEPRI, r3
 800a34e:	f3bf 8f6f 	isb	sy
 800a352:	f3bf 8f4f 	dsb	sy
 800a356:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a358:	bf00      	nop
 800a35a:	e7fe      	b.n	800a35a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a35c:	683b      	ldr	r3, [r7, #0]
 800a35e:	2b02      	cmp	r3, #2
 800a360:	d103      	bne.n	800a36a <xQueueGenericSend+0x6e>
 800a362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a364:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a366:	2b01      	cmp	r3, #1
 800a368:	d101      	bne.n	800a36e <xQueueGenericSend+0x72>
 800a36a:	2301      	movs	r3, #1
 800a36c:	e000      	b.n	800a370 <xQueueGenericSend+0x74>
 800a36e:	2300      	movs	r3, #0
 800a370:	2b00      	cmp	r3, #0
 800a372:	d10a      	bne.n	800a38a <xQueueGenericSend+0x8e>
	__asm volatile
 800a374:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a378:	f383 8811 	msr	BASEPRI, r3
 800a37c:	f3bf 8f6f 	isb	sy
 800a380:	f3bf 8f4f 	dsb	sy
 800a384:	623b      	str	r3, [r7, #32]
}
 800a386:	bf00      	nop
 800a388:	e7fe      	b.n	800a388 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a38a:	f001 fc77 	bl	800bc7c <xTaskGetSchedulerState>
 800a38e:	4603      	mov	r3, r0
 800a390:	2b00      	cmp	r3, #0
 800a392:	d102      	bne.n	800a39a <xQueueGenericSend+0x9e>
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	2b00      	cmp	r3, #0
 800a398:	d101      	bne.n	800a39e <xQueueGenericSend+0xa2>
 800a39a:	2301      	movs	r3, #1
 800a39c:	e000      	b.n	800a3a0 <xQueueGenericSend+0xa4>
 800a39e:	2300      	movs	r3, #0
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d10a      	bne.n	800a3ba <xQueueGenericSend+0xbe>
	__asm volatile
 800a3a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3a8:	f383 8811 	msr	BASEPRI, r3
 800a3ac:	f3bf 8f6f 	isb	sy
 800a3b0:	f3bf 8f4f 	dsb	sy
 800a3b4:	61fb      	str	r3, [r7, #28]
}
 800a3b6:	bf00      	nop
 800a3b8:	e7fe      	b.n	800a3b8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a3ba:	f002 fabb 	bl	800c934 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a3be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a3c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a3c6:	429a      	cmp	r2, r3
 800a3c8:	d302      	bcc.n	800a3d0 <xQueueGenericSend+0xd4>
 800a3ca:	683b      	ldr	r3, [r7, #0]
 800a3cc:	2b02      	cmp	r3, #2
 800a3ce:	d129      	bne.n	800a424 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a3d0:	683a      	ldr	r2, [r7, #0]
 800a3d2:	68b9      	ldr	r1, [r7, #8]
 800a3d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a3d6:	f000 fc5e 	bl	800ac96 <prvCopyDataToQueue>
 800a3da:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a3dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d010      	beq.n	800a406 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a3e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3e6:	3324      	adds	r3, #36	; 0x24
 800a3e8:	4618      	mov	r0, r3
 800a3ea:	f001 fa85 	bl	800b8f8 <xTaskRemoveFromEventList>
 800a3ee:	4603      	mov	r3, r0
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d013      	beq.n	800a41c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a3f4:	4b3f      	ldr	r3, [pc, #252]	; (800a4f4 <xQueueGenericSend+0x1f8>)
 800a3f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a3fa:	601a      	str	r2, [r3, #0]
 800a3fc:	f3bf 8f4f 	dsb	sy
 800a400:	f3bf 8f6f 	isb	sy
 800a404:	e00a      	b.n	800a41c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d007      	beq.n	800a41c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a40c:	4b39      	ldr	r3, [pc, #228]	; (800a4f4 <xQueueGenericSend+0x1f8>)
 800a40e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a412:	601a      	str	r2, [r3, #0]
 800a414:	f3bf 8f4f 	dsb	sy
 800a418:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a41c:	f002 faba 	bl	800c994 <vPortExitCritical>
				return pdPASS;
 800a420:	2301      	movs	r3, #1
 800a422:	e063      	b.n	800a4ec <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	2b00      	cmp	r3, #0
 800a428:	d103      	bne.n	800a432 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a42a:	f002 fab3 	bl	800c994 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a42e:	2300      	movs	r3, #0
 800a430:	e05c      	b.n	800a4ec <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a432:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a434:	2b00      	cmp	r3, #0
 800a436:	d106      	bne.n	800a446 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a438:	f107 0314 	add.w	r3, r7, #20
 800a43c:	4618      	mov	r0, r3
 800a43e:	f001 fabf 	bl	800b9c0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a442:	2301      	movs	r3, #1
 800a444:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a446:	f002 faa5 	bl	800c994 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a44a:	f001 f819 	bl	800b480 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a44e:	f002 fa71 	bl	800c934 <vPortEnterCritical>
 800a452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a454:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a458:	b25b      	sxtb	r3, r3
 800a45a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a45e:	d103      	bne.n	800a468 <xQueueGenericSend+0x16c>
 800a460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a462:	2200      	movs	r2, #0
 800a464:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a46a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a46e:	b25b      	sxtb	r3, r3
 800a470:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a474:	d103      	bne.n	800a47e <xQueueGenericSend+0x182>
 800a476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a478:	2200      	movs	r2, #0
 800a47a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a47e:	f002 fa89 	bl	800c994 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a482:	1d3a      	adds	r2, r7, #4
 800a484:	f107 0314 	add.w	r3, r7, #20
 800a488:	4611      	mov	r1, r2
 800a48a:	4618      	mov	r0, r3
 800a48c:	f001 faae 	bl	800b9ec <xTaskCheckForTimeOut>
 800a490:	4603      	mov	r3, r0
 800a492:	2b00      	cmp	r3, #0
 800a494:	d124      	bne.n	800a4e0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a496:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a498:	f000 fcf5 	bl	800ae86 <prvIsQueueFull>
 800a49c:	4603      	mov	r3, r0
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d018      	beq.n	800a4d4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a4a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4a4:	3310      	adds	r3, #16
 800a4a6:	687a      	ldr	r2, [r7, #4]
 800a4a8:	4611      	mov	r1, r2
 800a4aa:	4618      	mov	r0, r3
 800a4ac:	f001 f9d4 	bl	800b858 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a4b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a4b2:	f000 fc80 	bl	800adb6 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a4b6:	f000 fff1 	bl	800b49c <xTaskResumeAll>
 800a4ba:	4603      	mov	r3, r0
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	f47f af7c 	bne.w	800a3ba <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800a4c2:	4b0c      	ldr	r3, [pc, #48]	; (800a4f4 <xQueueGenericSend+0x1f8>)
 800a4c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a4c8:	601a      	str	r2, [r3, #0]
 800a4ca:	f3bf 8f4f 	dsb	sy
 800a4ce:	f3bf 8f6f 	isb	sy
 800a4d2:	e772      	b.n	800a3ba <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a4d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a4d6:	f000 fc6e 	bl	800adb6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a4da:	f000 ffdf 	bl	800b49c <xTaskResumeAll>
 800a4de:	e76c      	b.n	800a3ba <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a4e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a4e2:	f000 fc68 	bl	800adb6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a4e6:	f000 ffd9 	bl	800b49c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a4ea:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a4ec:	4618      	mov	r0, r3
 800a4ee:	3738      	adds	r7, #56	; 0x38
 800a4f0:	46bd      	mov	sp, r7
 800a4f2:	bd80      	pop	{r7, pc}
 800a4f4:	e000ed04 	.word	0xe000ed04

0800a4f8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a4f8:	b580      	push	{r7, lr}
 800a4fa:	b090      	sub	sp, #64	; 0x40
 800a4fc:	af00      	add	r7, sp, #0
 800a4fe:	60f8      	str	r0, [r7, #12]
 800a500:	60b9      	str	r1, [r7, #8]
 800a502:	607a      	str	r2, [r7, #4]
 800a504:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800a50a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d10a      	bne.n	800a526 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800a510:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a514:	f383 8811 	msr	BASEPRI, r3
 800a518:	f3bf 8f6f 	isb	sy
 800a51c:	f3bf 8f4f 	dsb	sy
 800a520:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a522:	bf00      	nop
 800a524:	e7fe      	b.n	800a524 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a526:	68bb      	ldr	r3, [r7, #8]
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d103      	bne.n	800a534 <xQueueGenericSendFromISR+0x3c>
 800a52c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a52e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a530:	2b00      	cmp	r3, #0
 800a532:	d101      	bne.n	800a538 <xQueueGenericSendFromISR+0x40>
 800a534:	2301      	movs	r3, #1
 800a536:	e000      	b.n	800a53a <xQueueGenericSendFromISR+0x42>
 800a538:	2300      	movs	r3, #0
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d10a      	bne.n	800a554 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800a53e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a542:	f383 8811 	msr	BASEPRI, r3
 800a546:	f3bf 8f6f 	isb	sy
 800a54a:	f3bf 8f4f 	dsb	sy
 800a54e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a550:	bf00      	nop
 800a552:	e7fe      	b.n	800a552 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a554:	683b      	ldr	r3, [r7, #0]
 800a556:	2b02      	cmp	r3, #2
 800a558:	d103      	bne.n	800a562 <xQueueGenericSendFromISR+0x6a>
 800a55a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a55c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a55e:	2b01      	cmp	r3, #1
 800a560:	d101      	bne.n	800a566 <xQueueGenericSendFromISR+0x6e>
 800a562:	2301      	movs	r3, #1
 800a564:	e000      	b.n	800a568 <xQueueGenericSendFromISR+0x70>
 800a566:	2300      	movs	r3, #0
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d10a      	bne.n	800a582 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800a56c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a570:	f383 8811 	msr	BASEPRI, r3
 800a574:	f3bf 8f6f 	isb	sy
 800a578:	f3bf 8f4f 	dsb	sy
 800a57c:	623b      	str	r3, [r7, #32]
}
 800a57e:	bf00      	nop
 800a580:	e7fe      	b.n	800a580 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a582:	f002 fab9 	bl	800caf8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a586:	f3ef 8211 	mrs	r2, BASEPRI
 800a58a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a58e:	f383 8811 	msr	BASEPRI, r3
 800a592:	f3bf 8f6f 	isb	sy
 800a596:	f3bf 8f4f 	dsb	sy
 800a59a:	61fa      	str	r2, [r7, #28]
 800a59c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a59e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a5a0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a5a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a5a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a5aa:	429a      	cmp	r2, r3
 800a5ac:	d302      	bcc.n	800a5b4 <xQueueGenericSendFromISR+0xbc>
 800a5ae:	683b      	ldr	r3, [r7, #0]
 800a5b0:	2b02      	cmp	r3, #2
 800a5b2:	d12f      	bne.n	800a614 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a5b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5b6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a5ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a5be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5c2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a5c4:	683a      	ldr	r2, [r7, #0]
 800a5c6:	68b9      	ldr	r1, [r7, #8]
 800a5c8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a5ca:	f000 fb64 	bl	800ac96 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a5ce:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800a5d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5d6:	d112      	bne.n	800a5fe <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a5d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d016      	beq.n	800a60e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a5e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5e2:	3324      	adds	r3, #36	; 0x24
 800a5e4:	4618      	mov	r0, r3
 800a5e6:	f001 f987 	bl	800b8f8 <xTaskRemoveFromEventList>
 800a5ea:	4603      	mov	r3, r0
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d00e      	beq.n	800a60e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d00b      	beq.n	800a60e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	2201      	movs	r2, #1
 800a5fa:	601a      	str	r2, [r3, #0]
 800a5fc:	e007      	b.n	800a60e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a5fe:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a602:	3301      	adds	r3, #1
 800a604:	b2db      	uxtb	r3, r3
 800a606:	b25a      	sxtb	r2, r3
 800a608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a60a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a60e:	2301      	movs	r3, #1
 800a610:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800a612:	e001      	b.n	800a618 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a614:	2300      	movs	r3, #0
 800a616:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a618:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a61a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a61c:	697b      	ldr	r3, [r7, #20]
 800a61e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a622:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a624:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a626:	4618      	mov	r0, r3
 800a628:	3740      	adds	r7, #64	; 0x40
 800a62a:	46bd      	mov	sp, r7
 800a62c:	bd80      	pop	{r7, pc}

0800a62e <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a62e:	b580      	push	{r7, lr}
 800a630:	b08e      	sub	sp, #56	; 0x38
 800a632:	af00      	add	r7, sp, #0
 800a634:	6078      	str	r0, [r7, #4]
 800a636:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800a63c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d10a      	bne.n	800a658 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800a642:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a646:	f383 8811 	msr	BASEPRI, r3
 800a64a:	f3bf 8f6f 	isb	sy
 800a64e:	f3bf 8f4f 	dsb	sy
 800a652:	623b      	str	r3, [r7, #32]
}
 800a654:	bf00      	nop
 800a656:	e7fe      	b.n	800a656 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a65a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d00a      	beq.n	800a676 <xQueueGiveFromISR+0x48>
	__asm volatile
 800a660:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a664:	f383 8811 	msr	BASEPRI, r3
 800a668:	f3bf 8f6f 	isb	sy
 800a66c:	f3bf 8f4f 	dsb	sy
 800a670:	61fb      	str	r3, [r7, #28]
}
 800a672:	bf00      	nop
 800a674:	e7fe      	b.n	800a674 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800a676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d103      	bne.n	800a686 <xQueueGiveFromISR+0x58>
 800a67e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a680:	689b      	ldr	r3, [r3, #8]
 800a682:	2b00      	cmp	r3, #0
 800a684:	d101      	bne.n	800a68a <xQueueGiveFromISR+0x5c>
 800a686:	2301      	movs	r3, #1
 800a688:	e000      	b.n	800a68c <xQueueGiveFromISR+0x5e>
 800a68a:	2300      	movs	r3, #0
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d10a      	bne.n	800a6a6 <xQueueGiveFromISR+0x78>
	__asm volatile
 800a690:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a694:	f383 8811 	msr	BASEPRI, r3
 800a698:	f3bf 8f6f 	isb	sy
 800a69c:	f3bf 8f4f 	dsb	sy
 800a6a0:	61bb      	str	r3, [r7, #24]
}
 800a6a2:	bf00      	nop
 800a6a4:	e7fe      	b.n	800a6a4 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a6a6:	f002 fa27 	bl	800caf8 <vPortValidateInterruptPriority>
	__asm volatile
 800a6aa:	f3ef 8211 	mrs	r2, BASEPRI
 800a6ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6b2:	f383 8811 	msr	BASEPRI, r3
 800a6b6:	f3bf 8f6f 	isb	sy
 800a6ba:	f3bf 8f4f 	dsb	sy
 800a6be:	617a      	str	r2, [r7, #20]
 800a6c0:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800a6c2:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a6c4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a6c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6ca:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800a6cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a6d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a6d2:	429a      	cmp	r2, r3
 800a6d4:	d22b      	bcs.n	800a72e <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a6d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a6dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a6e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6e2:	1c5a      	adds	r2, r3, #1
 800a6e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6e6:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a6e8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a6ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6f0:	d112      	bne.n	800a718 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a6f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d016      	beq.n	800a728 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a6fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6fc:	3324      	adds	r3, #36	; 0x24
 800a6fe:	4618      	mov	r0, r3
 800a700:	f001 f8fa 	bl	800b8f8 <xTaskRemoveFromEventList>
 800a704:	4603      	mov	r3, r0
 800a706:	2b00      	cmp	r3, #0
 800a708:	d00e      	beq.n	800a728 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a70a:	683b      	ldr	r3, [r7, #0]
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d00b      	beq.n	800a728 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a710:	683b      	ldr	r3, [r7, #0]
 800a712:	2201      	movs	r2, #1
 800a714:	601a      	str	r2, [r3, #0]
 800a716:	e007      	b.n	800a728 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a718:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a71c:	3301      	adds	r3, #1
 800a71e:	b2db      	uxtb	r3, r3
 800a720:	b25a      	sxtb	r2, r3
 800a722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a724:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a728:	2301      	movs	r3, #1
 800a72a:	637b      	str	r3, [r7, #52]	; 0x34
 800a72c:	e001      	b.n	800a732 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a72e:	2300      	movs	r3, #0
 800a730:	637b      	str	r3, [r7, #52]	; 0x34
 800a732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a734:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	f383 8811 	msr	BASEPRI, r3
}
 800a73c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a73e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a740:	4618      	mov	r0, r3
 800a742:	3738      	adds	r7, #56	; 0x38
 800a744:	46bd      	mov	sp, r7
 800a746:	bd80      	pop	{r7, pc}

0800a748 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a748:	b580      	push	{r7, lr}
 800a74a:	b08c      	sub	sp, #48	; 0x30
 800a74c:	af00      	add	r7, sp, #0
 800a74e:	60f8      	str	r0, [r7, #12]
 800a750:	60b9      	str	r1, [r7, #8]
 800a752:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a754:	2300      	movs	r3, #0
 800a756:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a75c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d10a      	bne.n	800a778 <xQueueReceive+0x30>
	__asm volatile
 800a762:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a766:	f383 8811 	msr	BASEPRI, r3
 800a76a:	f3bf 8f6f 	isb	sy
 800a76e:	f3bf 8f4f 	dsb	sy
 800a772:	623b      	str	r3, [r7, #32]
}
 800a774:	bf00      	nop
 800a776:	e7fe      	b.n	800a776 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a778:	68bb      	ldr	r3, [r7, #8]
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d103      	bne.n	800a786 <xQueueReceive+0x3e>
 800a77e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a782:	2b00      	cmp	r3, #0
 800a784:	d101      	bne.n	800a78a <xQueueReceive+0x42>
 800a786:	2301      	movs	r3, #1
 800a788:	e000      	b.n	800a78c <xQueueReceive+0x44>
 800a78a:	2300      	movs	r3, #0
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d10a      	bne.n	800a7a6 <xQueueReceive+0x5e>
	__asm volatile
 800a790:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a794:	f383 8811 	msr	BASEPRI, r3
 800a798:	f3bf 8f6f 	isb	sy
 800a79c:	f3bf 8f4f 	dsb	sy
 800a7a0:	61fb      	str	r3, [r7, #28]
}
 800a7a2:	bf00      	nop
 800a7a4:	e7fe      	b.n	800a7a4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a7a6:	f001 fa69 	bl	800bc7c <xTaskGetSchedulerState>
 800a7aa:	4603      	mov	r3, r0
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d102      	bne.n	800a7b6 <xQueueReceive+0x6e>
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d101      	bne.n	800a7ba <xQueueReceive+0x72>
 800a7b6:	2301      	movs	r3, #1
 800a7b8:	e000      	b.n	800a7bc <xQueueReceive+0x74>
 800a7ba:	2300      	movs	r3, #0
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d10a      	bne.n	800a7d6 <xQueueReceive+0x8e>
	__asm volatile
 800a7c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7c4:	f383 8811 	msr	BASEPRI, r3
 800a7c8:	f3bf 8f6f 	isb	sy
 800a7cc:	f3bf 8f4f 	dsb	sy
 800a7d0:	61bb      	str	r3, [r7, #24]
}
 800a7d2:	bf00      	nop
 800a7d4:	e7fe      	b.n	800a7d4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a7d6:	f002 f8ad 	bl	800c934 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a7da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7de:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a7e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d01f      	beq.n	800a826 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a7e6:	68b9      	ldr	r1, [r7, #8]
 800a7e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a7ea:	f000 fabe 	bl	800ad6a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a7ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7f0:	1e5a      	subs	r2, r3, #1
 800a7f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7f4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a7f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7f8:	691b      	ldr	r3, [r3, #16]
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d00f      	beq.n	800a81e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a7fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a800:	3310      	adds	r3, #16
 800a802:	4618      	mov	r0, r3
 800a804:	f001 f878 	bl	800b8f8 <xTaskRemoveFromEventList>
 800a808:	4603      	mov	r3, r0
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d007      	beq.n	800a81e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a80e:	4b3d      	ldr	r3, [pc, #244]	; (800a904 <xQueueReceive+0x1bc>)
 800a810:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a814:	601a      	str	r2, [r3, #0]
 800a816:	f3bf 8f4f 	dsb	sy
 800a81a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a81e:	f002 f8b9 	bl	800c994 <vPortExitCritical>
				return pdPASS;
 800a822:	2301      	movs	r3, #1
 800a824:	e069      	b.n	800a8fa <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d103      	bne.n	800a834 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a82c:	f002 f8b2 	bl	800c994 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a830:	2300      	movs	r3, #0
 800a832:	e062      	b.n	800a8fa <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a836:	2b00      	cmp	r3, #0
 800a838:	d106      	bne.n	800a848 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a83a:	f107 0310 	add.w	r3, r7, #16
 800a83e:	4618      	mov	r0, r3
 800a840:	f001 f8be 	bl	800b9c0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a844:	2301      	movs	r3, #1
 800a846:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a848:	f002 f8a4 	bl	800c994 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a84c:	f000 fe18 	bl	800b480 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a850:	f002 f870 	bl	800c934 <vPortEnterCritical>
 800a854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a856:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a85a:	b25b      	sxtb	r3, r3
 800a85c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a860:	d103      	bne.n	800a86a <xQueueReceive+0x122>
 800a862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a864:	2200      	movs	r2, #0
 800a866:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a86a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a86c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a870:	b25b      	sxtb	r3, r3
 800a872:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a876:	d103      	bne.n	800a880 <xQueueReceive+0x138>
 800a878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a87a:	2200      	movs	r2, #0
 800a87c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a880:	f002 f888 	bl	800c994 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a884:	1d3a      	adds	r2, r7, #4
 800a886:	f107 0310 	add.w	r3, r7, #16
 800a88a:	4611      	mov	r1, r2
 800a88c:	4618      	mov	r0, r3
 800a88e:	f001 f8ad 	bl	800b9ec <xTaskCheckForTimeOut>
 800a892:	4603      	mov	r3, r0
 800a894:	2b00      	cmp	r3, #0
 800a896:	d123      	bne.n	800a8e0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a898:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a89a:	f000 fade 	bl	800ae5a <prvIsQueueEmpty>
 800a89e:	4603      	mov	r3, r0
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d017      	beq.n	800a8d4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a8a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8a6:	3324      	adds	r3, #36	; 0x24
 800a8a8:	687a      	ldr	r2, [r7, #4]
 800a8aa:	4611      	mov	r1, r2
 800a8ac:	4618      	mov	r0, r3
 800a8ae:	f000 ffd3 	bl	800b858 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a8b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a8b4:	f000 fa7f 	bl	800adb6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a8b8:	f000 fdf0 	bl	800b49c <xTaskResumeAll>
 800a8bc:	4603      	mov	r3, r0
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d189      	bne.n	800a7d6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800a8c2:	4b10      	ldr	r3, [pc, #64]	; (800a904 <xQueueReceive+0x1bc>)
 800a8c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a8c8:	601a      	str	r2, [r3, #0]
 800a8ca:	f3bf 8f4f 	dsb	sy
 800a8ce:	f3bf 8f6f 	isb	sy
 800a8d2:	e780      	b.n	800a7d6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a8d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a8d6:	f000 fa6e 	bl	800adb6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a8da:	f000 fddf 	bl	800b49c <xTaskResumeAll>
 800a8de:	e77a      	b.n	800a7d6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a8e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a8e2:	f000 fa68 	bl	800adb6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a8e6:	f000 fdd9 	bl	800b49c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a8ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a8ec:	f000 fab5 	bl	800ae5a <prvIsQueueEmpty>
 800a8f0:	4603      	mov	r3, r0
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	f43f af6f 	beq.w	800a7d6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a8f8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a8fa:	4618      	mov	r0, r3
 800a8fc:	3730      	adds	r7, #48	; 0x30
 800a8fe:	46bd      	mov	sp, r7
 800a900:	bd80      	pop	{r7, pc}
 800a902:	bf00      	nop
 800a904:	e000ed04 	.word	0xe000ed04

0800a908 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800a908:	b580      	push	{r7, lr}
 800a90a:	b08e      	sub	sp, #56	; 0x38
 800a90c:	af00      	add	r7, sp, #0
 800a90e:	6078      	str	r0, [r7, #4]
 800a910:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800a912:	2300      	movs	r3, #0
 800a914:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800a91a:	2300      	movs	r3, #0
 800a91c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a91e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a920:	2b00      	cmp	r3, #0
 800a922:	d10a      	bne.n	800a93a <xQueueSemaphoreTake+0x32>
	__asm volatile
 800a924:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a928:	f383 8811 	msr	BASEPRI, r3
 800a92c:	f3bf 8f6f 	isb	sy
 800a930:	f3bf 8f4f 	dsb	sy
 800a934:	623b      	str	r3, [r7, #32]
}
 800a936:	bf00      	nop
 800a938:	e7fe      	b.n	800a938 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a93a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a93c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d00a      	beq.n	800a958 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800a942:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a946:	f383 8811 	msr	BASEPRI, r3
 800a94a:	f3bf 8f6f 	isb	sy
 800a94e:	f3bf 8f4f 	dsb	sy
 800a952:	61fb      	str	r3, [r7, #28]
}
 800a954:	bf00      	nop
 800a956:	e7fe      	b.n	800a956 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a958:	f001 f990 	bl	800bc7c <xTaskGetSchedulerState>
 800a95c:	4603      	mov	r3, r0
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d102      	bne.n	800a968 <xQueueSemaphoreTake+0x60>
 800a962:	683b      	ldr	r3, [r7, #0]
 800a964:	2b00      	cmp	r3, #0
 800a966:	d101      	bne.n	800a96c <xQueueSemaphoreTake+0x64>
 800a968:	2301      	movs	r3, #1
 800a96a:	e000      	b.n	800a96e <xQueueSemaphoreTake+0x66>
 800a96c:	2300      	movs	r3, #0
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d10a      	bne.n	800a988 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800a972:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a976:	f383 8811 	msr	BASEPRI, r3
 800a97a:	f3bf 8f6f 	isb	sy
 800a97e:	f3bf 8f4f 	dsb	sy
 800a982:	61bb      	str	r3, [r7, #24]
}
 800a984:	bf00      	nop
 800a986:	e7fe      	b.n	800a986 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a988:	f001 ffd4 	bl	800c934 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800a98c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a98e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a990:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800a992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a994:	2b00      	cmp	r3, #0
 800a996:	d024      	beq.n	800a9e2 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800a998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a99a:	1e5a      	subs	r2, r3, #1
 800a99c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a99e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a9a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d104      	bne.n	800a9b2 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800a9a8:	f001 fade 	bl	800bf68 <pvTaskIncrementMutexHeldCount>
 800a9ac:	4602      	mov	r2, r0
 800a9ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9b0:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a9b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9b4:	691b      	ldr	r3, [r3, #16]
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d00f      	beq.n	800a9da <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a9ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9bc:	3310      	adds	r3, #16
 800a9be:	4618      	mov	r0, r3
 800a9c0:	f000 ff9a 	bl	800b8f8 <xTaskRemoveFromEventList>
 800a9c4:	4603      	mov	r3, r0
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d007      	beq.n	800a9da <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a9ca:	4b54      	ldr	r3, [pc, #336]	; (800ab1c <xQueueSemaphoreTake+0x214>)
 800a9cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a9d0:	601a      	str	r2, [r3, #0]
 800a9d2:	f3bf 8f4f 	dsb	sy
 800a9d6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a9da:	f001 ffdb 	bl	800c994 <vPortExitCritical>
				return pdPASS;
 800a9de:	2301      	movs	r3, #1
 800a9e0:	e097      	b.n	800ab12 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a9e2:	683b      	ldr	r3, [r7, #0]
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d111      	bne.n	800aa0c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800a9e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d00a      	beq.n	800aa04 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800a9ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9f2:	f383 8811 	msr	BASEPRI, r3
 800a9f6:	f3bf 8f6f 	isb	sy
 800a9fa:	f3bf 8f4f 	dsb	sy
 800a9fe:	617b      	str	r3, [r7, #20]
}
 800aa00:	bf00      	nop
 800aa02:	e7fe      	b.n	800aa02 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800aa04:	f001 ffc6 	bl	800c994 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800aa08:	2300      	movs	r3, #0
 800aa0a:	e082      	b.n	800ab12 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800aa0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d106      	bne.n	800aa20 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800aa12:	f107 030c 	add.w	r3, r7, #12
 800aa16:	4618      	mov	r0, r3
 800aa18:	f000 ffd2 	bl	800b9c0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800aa1c:	2301      	movs	r3, #1
 800aa1e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800aa20:	f001 ffb8 	bl	800c994 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800aa24:	f000 fd2c 	bl	800b480 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800aa28:	f001 ff84 	bl	800c934 <vPortEnterCritical>
 800aa2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa2e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800aa32:	b25b      	sxtb	r3, r3
 800aa34:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa38:	d103      	bne.n	800aa42 <xQueueSemaphoreTake+0x13a>
 800aa3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa3c:	2200      	movs	r2, #0
 800aa3e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800aa42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa44:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aa48:	b25b      	sxtb	r3, r3
 800aa4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa4e:	d103      	bne.n	800aa58 <xQueueSemaphoreTake+0x150>
 800aa50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa52:	2200      	movs	r2, #0
 800aa54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800aa58:	f001 ff9c 	bl	800c994 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800aa5c:	463a      	mov	r2, r7
 800aa5e:	f107 030c 	add.w	r3, r7, #12
 800aa62:	4611      	mov	r1, r2
 800aa64:	4618      	mov	r0, r3
 800aa66:	f000 ffc1 	bl	800b9ec <xTaskCheckForTimeOut>
 800aa6a:	4603      	mov	r3, r0
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d132      	bne.n	800aad6 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800aa70:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800aa72:	f000 f9f2 	bl	800ae5a <prvIsQueueEmpty>
 800aa76:	4603      	mov	r3, r0
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d026      	beq.n	800aaca <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800aa7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d109      	bne.n	800aa98 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800aa84:	f001 ff56 	bl	800c934 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800aa88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa8a:	689b      	ldr	r3, [r3, #8]
 800aa8c:	4618      	mov	r0, r3
 800aa8e:	f001 f913 	bl	800bcb8 <xTaskPriorityInherit>
 800aa92:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800aa94:	f001 ff7e 	bl	800c994 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800aa98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa9a:	3324      	adds	r3, #36	; 0x24
 800aa9c:	683a      	ldr	r2, [r7, #0]
 800aa9e:	4611      	mov	r1, r2
 800aaa0:	4618      	mov	r0, r3
 800aaa2:	f000 fed9 	bl	800b858 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800aaa6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800aaa8:	f000 f985 	bl	800adb6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800aaac:	f000 fcf6 	bl	800b49c <xTaskResumeAll>
 800aab0:	4603      	mov	r3, r0
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	f47f af68 	bne.w	800a988 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800aab8:	4b18      	ldr	r3, [pc, #96]	; (800ab1c <xQueueSemaphoreTake+0x214>)
 800aaba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aabe:	601a      	str	r2, [r3, #0]
 800aac0:	f3bf 8f4f 	dsb	sy
 800aac4:	f3bf 8f6f 	isb	sy
 800aac8:	e75e      	b.n	800a988 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800aaca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800aacc:	f000 f973 	bl	800adb6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800aad0:	f000 fce4 	bl	800b49c <xTaskResumeAll>
 800aad4:	e758      	b.n	800a988 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800aad6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800aad8:	f000 f96d 	bl	800adb6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800aadc:	f000 fcde 	bl	800b49c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800aae0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800aae2:	f000 f9ba 	bl	800ae5a <prvIsQueueEmpty>
 800aae6:	4603      	mov	r3, r0
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	f43f af4d 	beq.w	800a988 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800aaee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d00d      	beq.n	800ab10 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800aaf4:	f001 ff1e 	bl	800c934 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800aaf8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800aafa:	f000 f8b4 	bl	800ac66 <prvGetDisinheritPriorityAfterTimeout>
 800aafe:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800ab00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab02:	689b      	ldr	r3, [r3, #8]
 800ab04:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ab06:	4618      	mov	r0, r3
 800ab08:	f001 f9ac 	bl	800be64 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800ab0c:	f001 ff42 	bl	800c994 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ab10:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ab12:	4618      	mov	r0, r3
 800ab14:	3738      	adds	r7, #56	; 0x38
 800ab16:	46bd      	mov	sp, r7
 800ab18:	bd80      	pop	{r7, pc}
 800ab1a:	bf00      	nop
 800ab1c:	e000ed04 	.word	0xe000ed04

0800ab20 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800ab20:	b580      	push	{r7, lr}
 800ab22:	b08e      	sub	sp, #56	; 0x38
 800ab24:	af00      	add	r7, sp, #0
 800ab26:	60f8      	str	r0, [r7, #12]
 800ab28:	60b9      	str	r1, [r7, #8]
 800ab2a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ab30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d10a      	bne.n	800ab4c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800ab36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab3a:	f383 8811 	msr	BASEPRI, r3
 800ab3e:	f3bf 8f6f 	isb	sy
 800ab42:	f3bf 8f4f 	dsb	sy
 800ab46:	623b      	str	r3, [r7, #32]
}
 800ab48:	bf00      	nop
 800ab4a:	e7fe      	b.n	800ab4a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ab4c:	68bb      	ldr	r3, [r7, #8]
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d103      	bne.n	800ab5a <xQueueReceiveFromISR+0x3a>
 800ab52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d101      	bne.n	800ab5e <xQueueReceiveFromISR+0x3e>
 800ab5a:	2301      	movs	r3, #1
 800ab5c:	e000      	b.n	800ab60 <xQueueReceiveFromISR+0x40>
 800ab5e:	2300      	movs	r3, #0
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d10a      	bne.n	800ab7a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800ab64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab68:	f383 8811 	msr	BASEPRI, r3
 800ab6c:	f3bf 8f6f 	isb	sy
 800ab70:	f3bf 8f4f 	dsb	sy
 800ab74:	61fb      	str	r3, [r7, #28]
}
 800ab76:	bf00      	nop
 800ab78:	e7fe      	b.n	800ab78 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ab7a:	f001 ffbd 	bl	800caf8 <vPortValidateInterruptPriority>
	__asm volatile
 800ab7e:	f3ef 8211 	mrs	r2, BASEPRI
 800ab82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab86:	f383 8811 	msr	BASEPRI, r3
 800ab8a:	f3bf 8f6f 	isb	sy
 800ab8e:	f3bf 8f4f 	dsb	sy
 800ab92:	61ba      	str	r2, [r7, #24]
 800ab94:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800ab96:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ab98:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ab9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab9e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800aba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d02f      	beq.n	800ac06 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800aba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aba8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800abac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800abb0:	68b9      	ldr	r1, [r7, #8]
 800abb2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800abb4:	f000 f8d9 	bl	800ad6a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800abb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abba:	1e5a      	subs	r2, r3, #1
 800abbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abbe:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800abc0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800abc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abc8:	d112      	bne.n	800abf0 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800abca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abcc:	691b      	ldr	r3, [r3, #16]
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d016      	beq.n	800ac00 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800abd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abd4:	3310      	adds	r3, #16
 800abd6:	4618      	mov	r0, r3
 800abd8:	f000 fe8e 	bl	800b8f8 <xTaskRemoveFromEventList>
 800abdc:	4603      	mov	r3, r0
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d00e      	beq.n	800ac00 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d00b      	beq.n	800ac00 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	2201      	movs	r2, #1
 800abec:	601a      	str	r2, [r3, #0]
 800abee:	e007      	b.n	800ac00 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800abf0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800abf4:	3301      	adds	r3, #1
 800abf6:	b2db      	uxtb	r3, r3
 800abf8:	b25a      	sxtb	r2, r3
 800abfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abfc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800ac00:	2301      	movs	r3, #1
 800ac02:	637b      	str	r3, [r7, #52]	; 0x34
 800ac04:	e001      	b.n	800ac0a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800ac06:	2300      	movs	r3, #0
 800ac08:	637b      	str	r3, [r7, #52]	; 0x34
 800ac0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac0c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800ac0e:	693b      	ldr	r3, [r7, #16]
 800ac10:	f383 8811 	msr	BASEPRI, r3
}
 800ac14:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ac16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800ac18:	4618      	mov	r0, r3
 800ac1a:	3738      	adds	r7, #56	; 0x38
 800ac1c:	46bd      	mov	sp, r7
 800ac1e:	bd80      	pop	{r7, pc}

0800ac20 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800ac20:	b580      	push	{r7, lr}
 800ac22:	b084      	sub	sp, #16
 800ac24:	af00      	add	r7, sp, #0
 800ac26:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d10a      	bne.n	800ac48 <vQueueDelete+0x28>
	__asm volatile
 800ac32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac36:	f383 8811 	msr	BASEPRI, r3
 800ac3a:	f3bf 8f6f 	isb	sy
 800ac3e:	f3bf 8f4f 	dsb	sy
 800ac42:	60bb      	str	r3, [r7, #8]
}
 800ac44:	bf00      	nop
 800ac46:	e7fe      	b.n	800ac46 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800ac48:	68f8      	ldr	r0, [r7, #12]
 800ac4a:	f000 f95f 	bl	800af0c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d102      	bne.n	800ac5e <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800ac58:	68f8      	ldr	r0, [r7, #12]
 800ac5a:	f002 f859 	bl	800cd10 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800ac5e:	bf00      	nop
 800ac60:	3710      	adds	r7, #16
 800ac62:	46bd      	mov	sp, r7
 800ac64:	bd80      	pop	{r7, pc}

0800ac66 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800ac66:	b480      	push	{r7}
 800ac68:	b085      	sub	sp, #20
 800ac6a:	af00      	add	r7, sp, #0
 800ac6c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d006      	beq.n	800ac84 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800ac80:	60fb      	str	r3, [r7, #12]
 800ac82:	e001      	b.n	800ac88 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800ac84:	2300      	movs	r3, #0
 800ac86:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800ac88:	68fb      	ldr	r3, [r7, #12]
	}
 800ac8a:	4618      	mov	r0, r3
 800ac8c:	3714      	adds	r7, #20
 800ac8e:	46bd      	mov	sp, r7
 800ac90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac94:	4770      	bx	lr

0800ac96 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ac96:	b580      	push	{r7, lr}
 800ac98:	b086      	sub	sp, #24
 800ac9a:	af00      	add	r7, sp, #0
 800ac9c:	60f8      	str	r0, [r7, #12]
 800ac9e:	60b9      	str	r1, [r7, #8]
 800aca0:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800aca2:	2300      	movs	r3, #0
 800aca4:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acaa:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d10d      	bne.n	800acd0 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d14d      	bne.n	800ad58 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	689b      	ldr	r3, [r3, #8]
 800acc0:	4618      	mov	r0, r3
 800acc2:	f001 f861 	bl	800bd88 <xTaskPriorityDisinherit>
 800acc6:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	2200      	movs	r2, #0
 800accc:	609a      	str	r2, [r3, #8]
 800acce:	e043      	b.n	800ad58 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d119      	bne.n	800ad0a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	6858      	ldr	r0, [r3, #4]
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acde:	461a      	mov	r2, r3
 800ace0:	68b9      	ldr	r1, [r7, #8]
 800ace2:	f002 f959 	bl	800cf98 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	685a      	ldr	r2, [r3, #4]
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acee:	441a      	add	r2, r3
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	685a      	ldr	r2, [r3, #4]
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	689b      	ldr	r3, [r3, #8]
 800acfc:	429a      	cmp	r2, r3
 800acfe:	d32b      	bcc.n	800ad58 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	681a      	ldr	r2, [r3, #0]
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	605a      	str	r2, [r3, #4]
 800ad08:	e026      	b.n	800ad58 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	68d8      	ldr	r0, [r3, #12]
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad12:	461a      	mov	r2, r3
 800ad14:	68b9      	ldr	r1, [r7, #8]
 800ad16:	f002 f93f 	bl	800cf98 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	68da      	ldr	r2, [r3, #12]
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad22:	425b      	negs	r3, r3
 800ad24:	441a      	add	r2, r3
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	68da      	ldr	r2, [r3, #12]
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	429a      	cmp	r2, r3
 800ad34:	d207      	bcs.n	800ad46 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	689a      	ldr	r2, [r3, #8]
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad3e:	425b      	negs	r3, r3
 800ad40:	441a      	add	r2, r3
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	2b02      	cmp	r3, #2
 800ad4a:	d105      	bne.n	800ad58 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ad4c:	693b      	ldr	r3, [r7, #16]
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d002      	beq.n	800ad58 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800ad52:	693b      	ldr	r3, [r7, #16]
 800ad54:	3b01      	subs	r3, #1
 800ad56:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ad58:	693b      	ldr	r3, [r7, #16]
 800ad5a:	1c5a      	adds	r2, r3, #1
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800ad60:	697b      	ldr	r3, [r7, #20]
}
 800ad62:	4618      	mov	r0, r3
 800ad64:	3718      	adds	r7, #24
 800ad66:	46bd      	mov	sp, r7
 800ad68:	bd80      	pop	{r7, pc}

0800ad6a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800ad6a:	b580      	push	{r7, lr}
 800ad6c:	b082      	sub	sp, #8
 800ad6e:	af00      	add	r7, sp, #0
 800ad70:	6078      	str	r0, [r7, #4]
 800ad72:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d018      	beq.n	800adae <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	68da      	ldr	r2, [r3, #12]
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad84:	441a      	add	r2, r3
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	68da      	ldr	r2, [r3, #12]
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	689b      	ldr	r3, [r3, #8]
 800ad92:	429a      	cmp	r2, r3
 800ad94:	d303      	bcc.n	800ad9e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	681a      	ldr	r2, [r3, #0]
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	68d9      	ldr	r1, [r3, #12]
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ada6:	461a      	mov	r2, r3
 800ada8:	6838      	ldr	r0, [r7, #0]
 800adaa:	f002 f8f5 	bl	800cf98 <memcpy>
	}
}
 800adae:	bf00      	nop
 800adb0:	3708      	adds	r7, #8
 800adb2:	46bd      	mov	sp, r7
 800adb4:	bd80      	pop	{r7, pc}

0800adb6 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800adb6:	b580      	push	{r7, lr}
 800adb8:	b084      	sub	sp, #16
 800adba:	af00      	add	r7, sp, #0
 800adbc:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800adbe:	f001 fdb9 	bl	800c934 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800adc8:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800adca:	e011      	b.n	800adf0 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800add0:	2b00      	cmp	r3, #0
 800add2:	d012      	beq.n	800adfa <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	3324      	adds	r3, #36	; 0x24
 800add8:	4618      	mov	r0, r3
 800adda:	f000 fd8d 	bl	800b8f8 <xTaskRemoveFromEventList>
 800adde:	4603      	mov	r3, r0
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d001      	beq.n	800ade8 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800ade4:	f000 fe64 	bl	800bab0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800ade8:	7bfb      	ldrb	r3, [r7, #15]
 800adea:	3b01      	subs	r3, #1
 800adec:	b2db      	uxtb	r3, r3
 800adee:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800adf0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	dce9      	bgt.n	800adcc <prvUnlockQueue+0x16>
 800adf8:	e000      	b.n	800adfc <prvUnlockQueue+0x46>
					break;
 800adfa:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	22ff      	movs	r2, #255	; 0xff
 800ae00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800ae04:	f001 fdc6 	bl	800c994 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800ae08:	f001 fd94 	bl	800c934 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ae12:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ae14:	e011      	b.n	800ae3a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	691b      	ldr	r3, [r3, #16]
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d012      	beq.n	800ae44 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	3310      	adds	r3, #16
 800ae22:	4618      	mov	r0, r3
 800ae24:	f000 fd68 	bl	800b8f8 <xTaskRemoveFromEventList>
 800ae28:	4603      	mov	r3, r0
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d001      	beq.n	800ae32 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800ae2e:	f000 fe3f 	bl	800bab0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800ae32:	7bbb      	ldrb	r3, [r7, #14]
 800ae34:	3b01      	subs	r3, #1
 800ae36:	b2db      	uxtb	r3, r3
 800ae38:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ae3a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	dce9      	bgt.n	800ae16 <prvUnlockQueue+0x60>
 800ae42:	e000      	b.n	800ae46 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800ae44:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	22ff      	movs	r2, #255	; 0xff
 800ae4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800ae4e:	f001 fda1 	bl	800c994 <vPortExitCritical>
}
 800ae52:	bf00      	nop
 800ae54:	3710      	adds	r7, #16
 800ae56:	46bd      	mov	sp, r7
 800ae58:	bd80      	pop	{r7, pc}

0800ae5a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800ae5a:	b580      	push	{r7, lr}
 800ae5c:	b084      	sub	sp, #16
 800ae5e:	af00      	add	r7, sp, #0
 800ae60:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ae62:	f001 fd67 	bl	800c934 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d102      	bne.n	800ae74 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ae6e:	2301      	movs	r3, #1
 800ae70:	60fb      	str	r3, [r7, #12]
 800ae72:	e001      	b.n	800ae78 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800ae74:	2300      	movs	r3, #0
 800ae76:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ae78:	f001 fd8c 	bl	800c994 <vPortExitCritical>

	return xReturn;
 800ae7c:	68fb      	ldr	r3, [r7, #12]
}
 800ae7e:	4618      	mov	r0, r3
 800ae80:	3710      	adds	r7, #16
 800ae82:	46bd      	mov	sp, r7
 800ae84:	bd80      	pop	{r7, pc}

0800ae86 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ae86:	b580      	push	{r7, lr}
 800ae88:	b084      	sub	sp, #16
 800ae8a:	af00      	add	r7, sp, #0
 800ae8c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ae8e:	f001 fd51 	bl	800c934 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae9a:	429a      	cmp	r2, r3
 800ae9c:	d102      	bne.n	800aea4 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ae9e:	2301      	movs	r3, #1
 800aea0:	60fb      	str	r3, [r7, #12]
 800aea2:	e001      	b.n	800aea8 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800aea4:	2300      	movs	r3, #0
 800aea6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800aea8:	f001 fd74 	bl	800c994 <vPortExitCritical>

	return xReturn;
 800aeac:	68fb      	ldr	r3, [r7, #12]
}
 800aeae:	4618      	mov	r0, r3
 800aeb0:	3710      	adds	r7, #16
 800aeb2:	46bd      	mov	sp, r7
 800aeb4:	bd80      	pop	{r7, pc}
	...

0800aeb8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800aeb8:	b480      	push	{r7}
 800aeba:	b085      	sub	sp, #20
 800aebc:	af00      	add	r7, sp, #0
 800aebe:	6078      	str	r0, [r7, #4]
 800aec0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800aec2:	2300      	movs	r3, #0
 800aec4:	60fb      	str	r3, [r7, #12]
 800aec6:	e014      	b.n	800aef2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800aec8:	4a0f      	ldr	r2, [pc, #60]	; (800af08 <vQueueAddToRegistry+0x50>)
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d10b      	bne.n	800aeec <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800aed4:	490c      	ldr	r1, [pc, #48]	; (800af08 <vQueueAddToRegistry+0x50>)
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	683a      	ldr	r2, [r7, #0]
 800aeda:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800aede:	4a0a      	ldr	r2, [pc, #40]	; (800af08 <vQueueAddToRegistry+0x50>)
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	00db      	lsls	r3, r3, #3
 800aee4:	4413      	add	r3, r2
 800aee6:	687a      	ldr	r2, [r7, #4]
 800aee8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800aeea:	e006      	b.n	800aefa <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	3301      	adds	r3, #1
 800aef0:	60fb      	str	r3, [r7, #12]
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	2b07      	cmp	r3, #7
 800aef6:	d9e7      	bls.n	800aec8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800aef8:	bf00      	nop
 800aefa:	bf00      	nop
 800aefc:	3714      	adds	r7, #20
 800aefe:	46bd      	mov	sp, r7
 800af00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af04:	4770      	bx	lr
 800af06:	bf00      	nop
 800af08:	20000b50 	.word	0x20000b50

0800af0c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800af0c:	b480      	push	{r7}
 800af0e:	b085      	sub	sp, #20
 800af10:	af00      	add	r7, sp, #0
 800af12:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800af14:	2300      	movs	r3, #0
 800af16:	60fb      	str	r3, [r7, #12]
 800af18:	e016      	b.n	800af48 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800af1a:	4a10      	ldr	r2, [pc, #64]	; (800af5c <vQueueUnregisterQueue+0x50>)
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	00db      	lsls	r3, r3, #3
 800af20:	4413      	add	r3, r2
 800af22:	685b      	ldr	r3, [r3, #4]
 800af24:	687a      	ldr	r2, [r7, #4]
 800af26:	429a      	cmp	r2, r3
 800af28:	d10b      	bne.n	800af42 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800af2a:	4a0c      	ldr	r2, [pc, #48]	; (800af5c <vQueueUnregisterQueue+0x50>)
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	2100      	movs	r1, #0
 800af30:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800af34:	4a09      	ldr	r2, [pc, #36]	; (800af5c <vQueueUnregisterQueue+0x50>)
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	00db      	lsls	r3, r3, #3
 800af3a:	4413      	add	r3, r2
 800af3c:	2200      	movs	r2, #0
 800af3e:	605a      	str	r2, [r3, #4]
				break;
 800af40:	e006      	b.n	800af50 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	3301      	adds	r3, #1
 800af46:	60fb      	str	r3, [r7, #12]
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	2b07      	cmp	r3, #7
 800af4c:	d9e5      	bls.n	800af1a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800af4e:	bf00      	nop
 800af50:	bf00      	nop
 800af52:	3714      	adds	r7, #20
 800af54:	46bd      	mov	sp, r7
 800af56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af5a:	4770      	bx	lr
 800af5c:	20000b50 	.word	0x20000b50

0800af60 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800af60:	b580      	push	{r7, lr}
 800af62:	b086      	sub	sp, #24
 800af64:	af00      	add	r7, sp, #0
 800af66:	60f8      	str	r0, [r7, #12]
 800af68:	60b9      	str	r1, [r7, #8]
 800af6a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800af70:	f001 fce0 	bl	800c934 <vPortEnterCritical>
 800af74:	697b      	ldr	r3, [r7, #20]
 800af76:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800af7a:	b25b      	sxtb	r3, r3
 800af7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af80:	d103      	bne.n	800af8a <vQueueWaitForMessageRestricted+0x2a>
 800af82:	697b      	ldr	r3, [r7, #20]
 800af84:	2200      	movs	r2, #0
 800af86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800af8a:	697b      	ldr	r3, [r7, #20]
 800af8c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800af90:	b25b      	sxtb	r3, r3
 800af92:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af96:	d103      	bne.n	800afa0 <vQueueWaitForMessageRestricted+0x40>
 800af98:	697b      	ldr	r3, [r7, #20]
 800af9a:	2200      	movs	r2, #0
 800af9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800afa0:	f001 fcf8 	bl	800c994 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800afa4:	697b      	ldr	r3, [r7, #20]
 800afa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d106      	bne.n	800afba <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800afac:	697b      	ldr	r3, [r7, #20]
 800afae:	3324      	adds	r3, #36	; 0x24
 800afb0:	687a      	ldr	r2, [r7, #4]
 800afb2:	68b9      	ldr	r1, [r7, #8]
 800afb4:	4618      	mov	r0, r3
 800afb6:	f000 fc73 	bl	800b8a0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800afba:	6978      	ldr	r0, [r7, #20]
 800afbc:	f7ff fefb 	bl	800adb6 <prvUnlockQueue>
	}
 800afc0:	bf00      	nop
 800afc2:	3718      	adds	r7, #24
 800afc4:	46bd      	mov	sp, r7
 800afc6:	bd80      	pop	{r7, pc}

0800afc8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800afc8:	b580      	push	{r7, lr}
 800afca:	b08e      	sub	sp, #56	; 0x38
 800afcc:	af04      	add	r7, sp, #16
 800afce:	60f8      	str	r0, [r7, #12]
 800afd0:	60b9      	str	r1, [r7, #8]
 800afd2:	607a      	str	r2, [r7, #4]
 800afd4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800afd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d10a      	bne.n	800aff2 <xTaskCreateStatic+0x2a>
	__asm volatile
 800afdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afe0:	f383 8811 	msr	BASEPRI, r3
 800afe4:	f3bf 8f6f 	isb	sy
 800afe8:	f3bf 8f4f 	dsb	sy
 800afec:	623b      	str	r3, [r7, #32]
}
 800afee:	bf00      	nop
 800aff0:	e7fe      	b.n	800aff0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800aff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d10a      	bne.n	800b00e <xTaskCreateStatic+0x46>
	__asm volatile
 800aff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800affc:	f383 8811 	msr	BASEPRI, r3
 800b000:	f3bf 8f6f 	isb	sy
 800b004:	f3bf 8f4f 	dsb	sy
 800b008:	61fb      	str	r3, [r7, #28]
}
 800b00a:	bf00      	nop
 800b00c:	e7fe      	b.n	800b00c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b00e:	23bc      	movs	r3, #188	; 0xbc
 800b010:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b012:	693b      	ldr	r3, [r7, #16]
 800b014:	2bbc      	cmp	r3, #188	; 0xbc
 800b016:	d00a      	beq.n	800b02e <xTaskCreateStatic+0x66>
	__asm volatile
 800b018:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b01c:	f383 8811 	msr	BASEPRI, r3
 800b020:	f3bf 8f6f 	isb	sy
 800b024:	f3bf 8f4f 	dsb	sy
 800b028:	61bb      	str	r3, [r7, #24]
}
 800b02a:	bf00      	nop
 800b02c:	e7fe      	b.n	800b02c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b02e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b032:	2b00      	cmp	r3, #0
 800b034:	d01e      	beq.n	800b074 <xTaskCreateStatic+0xac>
 800b036:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d01b      	beq.n	800b074 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b03c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b03e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b042:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b044:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b048:	2202      	movs	r2, #2
 800b04a:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b04e:	2300      	movs	r3, #0
 800b050:	9303      	str	r3, [sp, #12]
 800b052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b054:	9302      	str	r3, [sp, #8]
 800b056:	f107 0314 	add.w	r3, r7, #20
 800b05a:	9301      	str	r3, [sp, #4]
 800b05c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b05e:	9300      	str	r3, [sp, #0]
 800b060:	683b      	ldr	r3, [r7, #0]
 800b062:	687a      	ldr	r2, [r7, #4]
 800b064:	68b9      	ldr	r1, [r7, #8]
 800b066:	68f8      	ldr	r0, [r7, #12]
 800b068:	f000 f850 	bl	800b10c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b06c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b06e:	f000 f8f3 	bl	800b258 <prvAddNewTaskToReadyList>
 800b072:	e001      	b.n	800b078 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800b074:	2300      	movs	r3, #0
 800b076:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b078:	697b      	ldr	r3, [r7, #20]
	}
 800b07a:	4618      	mov	r0, r3
 800b07c:	3728      	adds	r7, #40	; 0x28
 800b07e:	46bd      	mov	sp, r7
 800b080:	bd80      	pop	{r7, pc}

0800b082 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b082:	b580      	push	{r7, lr}
 800b084:	b08c      	sub	sp, #48	; 0x30
 800b086:	af04      	add	r7, sp, #16
 800b088:	60f8      	str	r0, [r7, #12]
 800b08a:	60b9      	str	r1, [r7, #8]
 800b08c:	603b      	str	r3, [r7, #0]
 800b08e:	4613      	mov	r3, r2
 800b090:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b092:	88fb      	ldrh	r3, [r7, #6]
 800b094:	009b      	lsls	r3, r3, #2
 800b096:	4618      	mov	r0, r3
 800b098:	f001 fd6e 	bl	800cb78 <pvPortMalloc>
 800b09c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b09e:	697b      	ldr	r3, [r7, #20]
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d00e      	beq.n	800b0c2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b0a4:	20bc      	movs	r0, #188	; 0xbc
 800b0a6:	f001 fd67 	bl	800cb78 <pvPortMalloc>
 800b0aa:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b0ac:	69fb      	ldr	r3, [r7, #28]
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d003      	beq.n	800b0ba <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b0b2:	69fb      	ldr	r3, [r7, #28]
 800b0b4:	697a      	ldr	r2, [r7, #20]
 800b0b6:	631a      	str	r2, [r3, #48]	; 0x30
 800b0b8:	e005      	b.n	800b0c6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b0ba:	6978      	ldr	r0, [r7, #20]
 800b0bc:	f001 fe28 	bl	800cd10 <vPortFree>
 800b0c0:	e001      	b.n	800b0c6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b0c2:	2300      	movs	r3, #0
 800b0c4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b0c6:	69fb      	ldr	r3, [r7, #28]
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d017      	beq.n	800b0fc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b0cc:	69fb      	ldr	r3, [r7, #28]
 800b0ce:	2200      	movs	r2, #0
 800b0d0:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b0d4:	88fa      	ldrh	r2, [r7, #6]
 800b0d6:	2300      	movs	r3, #0
 800b0d8:	9303      	str	r3, [sp, #12]
 800b0da:	69fb      	ldr	r3, [r7, #28]
 800b0dc:	9302      	str	r3, [sp, #8]
 800b0de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0e0:	9301      	str	r3, [sp, #4]
 800b0e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0e4:	9300      	str	r3, [sp, #0]
 800b0e6:	683b      	ldr	r3, [r7, #0]
 800b0e8:	68b9      	ldr	r1, [r7, #8]
 800b0ea:	68f8      	ldr	r0, [r7, #12]
 800b0ec:	f000 f80e 	bl	800b10c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b0f0:	69f8      	ldr	r0, [r7, #28]
 800b0f2:	f000 f8b1 	bl	800b258 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b0f6:	2301      	movs	r3, #1
 800b0f8:	61bb      	str	r3, [r7, #24]
 800b0fa:	e002      	b.n	800b102 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b0fc:	f04f 33ff 	mov.w	r3, #4294967295
 800b100:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b102:	69bb      	ldr	r3, [r7, #24]
	}
 800b104:	4618      	mov	r0, r3
 800b106:	3720      	adds	r7, #32
 800b108:	46bd      	mov	sp, r7
 800b10a:	bd80      	pop	{r7, pc}

0800b10c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b10c:	b580      	push	{r7, lr}
 800b10e:	b088      	sub	sp, #32
 800b110:	af00      	add	r7, sp, #0
 800b112:	60f8      	str	r0, [r7, #12]
 800b114:	60b9      	str	r1, [r7, #8]
 800b116:	607a      	str	r2, [r7, #4]
 800b118:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b11a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b11c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	009b      	lsls	r3, r3, #2
 800b122:	461a      	mov	r2, r3
 800b124:	21a5      	movs	r1, #165	; 0xa5
 800b126:	f001 ff45 	bl	800cfb4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b12a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b12c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b134:	3b01      	subs	r3, #1
 800b136:	009b      	lsls	r3, r3, #2
 800b138:	4413      	add	r3, r2
 800b13a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b13c:	69bb      	ldr	r3, [r7, #24]
 800b13e:	f023 0307 	bic.w	r3, r3, #7
 800b142:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b144:	69bb      	ldr	r3, [r7, #24]
 800b146:	f003 0307 	and.w	r3, r3, #7
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d00a      	beq.n	800b164 <prvInitialiseNewTask+0x58>
	__asm volatile
 800b14e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b152:	f383 8811 	msr	BASEPRI, r3
 800b156:	f3bf 8f6f 	isb	sy
 800b15a:	f3bf 8f4f 	dsb	sy
 800b15e:	617b      	str	r3, [r7, #20]
}
 800b160:	bf00      	nop
 800b162:	e7fe      	b.n	800b162 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b164:	68bb      	ldr	r3, [r7, #8]
 800b166:	2b00      	cmp	r3, #0
 800b168:	d01f      	beq.n	800b1aa <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b16a:	2300      	movs	r3, #0
 800b16c:	61fb      	str	r3, [r7, #28]
 800b16e:	e012      	b.n	800b196 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b170:	68ba      	ldr	r2, [r7, #8]
 800b172:	69fb      	ldr	r3, [r7, #28]
 800b174:	4413      	add	r3, r2
 800b176:	7819      	ldrb	r1, [r3, #0]
 800b178:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b17a:	69fb      	ldr	r3, [r7, #28]
 800b17c:	4413      	add	r3, r2
 800b17e:	3334      	adds	r3, #52	; 0x34
 800b180:	460a      	mov	r2, r1
 800b182:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b184:	68ba      	ldr	r2, [r7, #8]
 800b186:	69fb      	ldr	r3, [r7, #28]
 800b188:	4413      	add	r3, r2
 800b18a:	781b      	ldrb	r3, [r3, #0]
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d006      	beq.n	800b19e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b190:	69fb      	ldr	r3, [r7, #28]
 800b192:	3301      	adds	r3, #1
 800b194:	61fb      	str	r3, [r7, #28]
 800b196:	69fb      	ldr	r3, [r7, #28]
 800b198:	2b0f      	cmp	r3, #15
 800b19a:	d9e9      	bls.n	800b170 <prvInitialiseNewTask+0x64>
 800b19c:	e000      	b.n	800b1a0 <prvInitialiseNewTask+0x94>
			{
				break;
 800b19e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b1a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1a2:	2200      	movs	r2, #0
 800b1a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b1a8:	e003      	b.n	800b1b2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b1aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1ac:	2200      	movs	r2, #0
 800b1ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b1b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1b4:	2b37      	cmp	r3, #55	; 0x37
 800b1b6:	d901      	bls.n	800b1bc <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b1b8:	2337      	movs	r3, #55	; 0x37
 800b1ba:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b1bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b1c0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b1c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b1c6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800b1c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1ca:	2200      	movs	r2, #0
 800b1cc:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b1ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1d0:	3304      	adds	r3, #4
 800b1d2:	4618      	mov	r0, r3
 800b1d4:	f7fe fe0a 	bl	8009dec <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b1d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1da:	3318      	adds	r3, #24
 800b1dc:	4618      	mov	r0, r3
 800b1de:	f7fe fe05 	bl	8009dec <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b1e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b1e6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b1e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1ea:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b1ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1f0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b1f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b1f6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b1f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1fa:	2200      	movs	r2, #0
 800b1fc:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b202:	2200      	movs	r2, #0
 800b204:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800b208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b20a:	3354      	adds	r3, #84	; 0x54
 800b20c:	2260      	movs	r2, #96	; 0x60
 800b20e:	2100      	movs	r1, #0
 800b210:	4618      	mov	r0, r3
 800b212:	f001 fecf 	bl	800cfb4 <memset>
 800b216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b218:	4a0c      	ldr	r2, [pc, #48]	; (800b24c <prvInitialiseNewTask+0x140>)
 800b21a:	659a      	str	r2, [r3, #88]	; 0x58
 800b21c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b21e:	4a0c      	ldr	r2, [pc, #48]	; (800b250 <prvInitialiseNewTask+0x144>)
 800b220:	65da      	str	r2, [r3, #92]	; 0x5c
 800b222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b224:	4a0b      	ldr	r2, [pc, #44]	; (800b254 <prvInitialiseNewTask+0x148>)
 800b226:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b228:	683a      	ldr	r2, [r7, #0]
 800b22a:	68f9      	ldr	r1, [r7, #12]
 800b22c:	69b8      	ldr	r0, [r7, #24]
 800b22e:	f001 fa51 	bl	800c6d4 <pxPortInitialiseStack>
 800b232:	4602      	mov	r2, r0
 800b234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b236:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b238:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d002      	beq.n	800b244 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b23e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b240:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b242:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b244:	bf00      	nop
 800b246:	3720      	adds	r7, #32
 800b248:	46bd      	mov	sp, r7
 800b24a:	bd80      	pop	{r7, pc}
 800b24c:	0800d2ac 	.word	0x0800d2ac
 800b250:	0800d2cc 	.word	0x0800d2cc
 800b254:	0800d28c 	.word	0x0800d28c

0800b258 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b258:	b580      	push	{r7, lr}
 800b25a:	b082      	sub	sp, #8
 800b25c:	af00      	add	r7, sp, #0
 800b25e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b260:	f001 fb68 	bl	800c934 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b264:	4b2d      	ldr	r3, [pc, #180]	; (800b31c <prvAddNewTaskToReadyList+0xc4>)
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	3301      	adds	r3, #1
 800b26a:	4a2c      	ldr	r2, [pc, #176]	; (800b31c <prvAddNewTaskToReadyList+0xc4>)
 800b26c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b26e:	4b2c      	ldr	r3, [pc, #176]	; (800b320 <prvAddNewTaskToReadyList+0xc8>)
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	2b00      	cmp	r3, #0
 800b274:	d109      	bne.n	800b28a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b276:	4a2a      	ldr	r2, [pc, #168]	; (800b320 <prvAddNewTaskToReadyList+0xc8>)
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b27c:	4b27      	ldr	r3, [pc, #156]	; (800b31c <prvAddNewTaskToReadyList+0xc4>)
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	2b01      	cmp	r3, #1
 800b282:	d110      	bne.n	800b2a6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b284:	f000 fc38 	bl	800baf8 <prvInitialiseTaskLists>
 800b288:	e00d      	b.n	800b2a6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b28a:	4b26      	ldr	r3, [pc, #152]	; (800b324 <prvAddNewTaskToReadyList+0xcc>)
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d109      	bne.n	800b2a6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b292:	4b23      	ldr	r3, [pc, #140]	; (800b320 <prvAddNewTaskToReadyList+0xc8>)
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b29c:	429a      	cmp	r2, r3
 800b29e:	d802      	bhi.n	800b2a6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b2a0:	4a1f      	ldr	r2, [pc, #124]	; (800b320 <prvAddNewTaskToReadyList+0xc8>)
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b2a6:	4b20      	ldr	r3, [pc, #128]	; (800b328 <prvAddNewTaskToReadyList+0xd0>)
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	3301      	adds	r3, #1
 800b2ac:	4a1e      	ldr	r2, [pc, #120]	; (800b328 <prvAddNewTaskToReadyList+0xd0>)
 800b2ae:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b2b0:	4b1d      	ldr	r3, [pc, #116]	; (800b328 <prvAddNewTaskToReadyList+0xd0>)
 800b2b2:	681a      	ldr	r2, [r3, #0]
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2bc:	4b1b      	ldr	r3, [pc, #108]	; (800b32c <prvAddNewTaskToReadyList+0xd4>)
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	429a      	cmp	r2, r3
 800b2c2:	d903      	bls.n	800b2cc <prvAddNewTaskToReadyList+0x74>
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2c8:	4a18      	ldr	r2, [pc, #96]	; (800b32c <prvAddNewTaskToReadyList+0xd4>)
 800b2ca:	6013      	str	r3, [r2, #0]
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2d0:	4613      	mov	r3, r2
 800b2d2:	009b      	lsls	r3, r3, #2
 800b2d4:	4413      	add	r3, r2
 800b2d6:	009b      	lsls	r3, r3, #2
 800b2d8:	4a15      	ldr	r2, [pc, #84]	; (800b330 <prvAddNewTaskToReadyList+0xd8>)
 800b2da:	441a      	add	r2, r3
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	3304      	adds	r3, #4
 800b2e0:	4619      	mov	r1, r3
 800b2e2:	4610      	mov	r0, r2
 800b2e4:	f7fe fd8f 	bl	8009e06 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b2e8:	f001 fb54 	bl	800c994 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b2ec:	4b0d      	ldr	r3, [pc, #52]	; (800b324 <prvAddNewTaskToReadyList+0xcc>)
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d00e      	beq.n	800b312 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b2f4:	4b0a      	ldr	r3, [pc, #40]	; (800b320 <prvAddNewTaskToReadyList+0xc8>)
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2fe:	429a      	cmp	r2, r3
 800b300:	d207      	bcs.n	800b312 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b302:	4b0c      	ldr	r3, [pc, #48]	; (800b334 <prvAddNewTaskToReadyList+0xdc>)
 800b304:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b308:	601a      	str	r2, [r3, #0]
 800b30a:	f3bf 8f4f 	dsb	sy
 800b30e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b312:	bf00      	nop
 800b314:	3708      	adds	r7, #8
 800b316:	46bd      	mov	sp, r7
 800b318:	bd80      	pop	{r7, pc}
 800b31a:	bf00      	nop
 800b31c:	20001064 	.word	0x20001064
 800b320:	20000b90 	.word	0x20000b90
 800b324:	20001070 	.word	0x20001070
 800b328:	20001080 	.word	0x20001080
 800b32c:	2000106c 	.word	0x2000106c
 800b330:	20000b94 	.word	0x20000b94
 800b334:	e000ed04 	.word	0xe000ed04

0800b338 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b338:	b580      	push	{r7, lr}
 800b33a:	b084      	sub	sp, #16
 800b33c:	af00      	add	r7, sp, #0
 800b33e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b340:	2300      	movs	r3, #0
 800b342:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	2b00      	cmp	r3, #0
 800b348:	d017      	beq.n	800b37a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b34a:	4b13      	ldr	r3, [pc, #76]	; (800b398 <vTaskDelay+0x60>)
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d00a      	beq.n	800b368 <vTaskDelay+0x30>
	__asm volatile
 800b352:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b356:	f383 8811 	msr	BASEPRI, r3
 800b35a:	f3bf 8f6f 	isb	sy
 800b35e:	f3bf 8f4f 	dsb	sy
 800b362:	60bb      	str	r3, [r7, #8]
}
 800b364:	bf00      	nop
 800b366:	e7fe      	b.n	800b366 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b368:	f000 f88a 	bl	800b480 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b36c:	2100      	movs	r1, #0
 800b36e:	6878      	ldr	r0, [r7, #4]
 800b370:	f000 fe0e 	bl	800bf90 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b374:	f000 f892 	bl	800b49c <xTaskResumeAll>
 800b378:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d107      	bne.n	800b390 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800b380:	4b06      	ldr	r3, [pc, #24]	; (800b39c <vTaskDelay+0x64>)
 800b382:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b386:	601a      	str	r2, [r3, #0]
 800b388:	f3bf 8f4f 	dsb	sy
 800b38c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b390:	bf00      	nop
 800b392:	3710      	adds	r7, #16
 800b394:	46bd      	mov	sp, r7
 800b396:	bd80      	pop	{r7, pc}
 800b398:	2000108c 	.word	0x2000108c
 800b39c:	e000ed04 	.word	0xe000ed04

0800b3a0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b3a0:	b580      	push	{r7, lr}
 800b3a2:	b08a      	sub	sp, #40	; 0x28
 800b3a4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b3a6:	2300      	movs	r3, #0
 800b3a8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b3aa:	2300      	movs	r3, #0
 800b3ac:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b3ae:	463a      	mov	r2, r7
 800b3b0:	1d39      	adds	r1, r7, #4
 800b3b2:	f107 0308 	add.w	r3, r7, #8
 800b3b6:	4618      	mov	r0, r3
 800b3b8:	f7fe fcc4 	bl	8009d44 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b3bc:	6839      	ldr	r1, [r7, #0]
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	68ba      	ldr	r2, [r7, #8]
 800b3c2:	9202      	str	r2, [sp, #8]
 800b3c4:	9301      	str	r3, [sp, #4]
 800b3c6:	2300      	movs	r3, #0
 800b3c8:	9300      	str	r3, [sp, #0]
 800b3ca:	2300      	movs	r3, #0
 800b3cc:	460a      	mov	r2, r1
 800b3ce:	4924      	ldr	r1, [pc, #144]	; (800b460 <vTaskStartScheduler+0xc0>)
 800b3d0:	4824      	ldr	r0, [pc, #144]	; (800b464 <vTaskStartScheduler+0xc4>)
 800b3d2:	f7ff fdf9 	bl	800afc8 <xTaskCreateStatic>
 800b3d6:	4603      	mov	r3, r0
 800b3d8:	4a23      	ldr	r2, [pc, #140]	; (800b468 <vTaskStartScheduler+0xc8>)
 800b3da:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b3dc:	4b22      	ldr	r3, [pc, #136]	; (800b468 <vTaskStartScheduler+0xc8>)
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d002      	beq.n	800b3ea <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b3e4:	2301      	movs	r3, #1
 800b3e6:	617b      	str	r3, [r7, #20]
 800b3e8:	e001      	b.n	800b3ee <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b3ea:	2300      	movs	r3, #0
 800b3ec:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b3ee:	697b      	ldr	r3, [r7, #20]
 800b3f0:	2b01      	cmp	r3, #1
 800b3f2:	d102      	bne.n	800b3fa <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b3f4:	f000 fe20 	bl	800c038 <xTimerCreateTimerTask>
 800b3f8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b3fa:	697b      	ldr	r3, [r7, #20]
 800b3fc:	2b01      	cmp	r3, #1
 800b3fe:	d11b      	bne.n	800b438 <vTaskStartScheduler+0x98>
	__asm volatile
 800b400:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b404:	f383 8811 	msr	BASEPRI, r3
 800b408:	f3bf 8f6f 	isb	sy
 800b40c:	f3bf 8f4f 	dsb	sy
 800b410:	613b      	str	r3, [r7, #16]
}
 800b412:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b414:	4b15      	ldr	r3, [pc, #84]	; (800b46c <vTaskStartScheduler+0xcc>)
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	3354      	adds	r3, #84	; 0x54
 800b41a:	4a15      	ldr	r2, [pc, #84]	; (800b470 <vTaskStartScheduler+0xd0>)
 800b41c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b41e:	4b15      	ldr	r3, [pc, #84]	; (800b474 <vTaskStartScheduler+0xd4>)
 800b420:	f04f 32ff 	mov.w	r2, #4294967295
 800b424:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b426:	4b14      	ldr	r3, [pc, #80]	; (800b478 <vTaskStartScheduler+0xd8>)
 800b428:	2201      	movs	r2, #1
 800b42a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b42c:	4b13      	ldr	r3, [pc, #76]	; (800b47c <vTaskStartScheduler+0xdc>)
 800b42e:	2200      	movs	r2, #0
 800b430:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b432:	f001 f9dd 	bl	800c7f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b436:	e00e      	b.n	800b456 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b438:	697b      	ldr	r3, [r7, #20]
 800b43a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b43e:	d10a      	bne.n	800b456 <vTaskStartScheduler+0xb6>
	__asm volatile
 800b440:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b444:	f383 8811 	msr	BASEPRI, r3
 800b448:	f3bf 8f6f 	isb	sy
 800b44c:	f3bf 8f4f 	dsb	sy
 800b450:	60fb      	str	r3, [r7, #12]
}
 800b452:	bf00      	nop
 800b454:	e7fe      	b.n	800b454 <vTaskStartScheduler+0xb4>
}
 800b456:	bf00      	nop
 800b458:	3718      	adds	r7, #24
 800b45a:	46bd      	mov	sp, r7
 800b45c:	bd80      	pop	{r7, pc}
 800b45e:	bf00      	nop
 800b460:	0800d198 	.word	0x0800d198
 800b464:	0800bac9 	.word	0x0800bac9
 800b468:	20001088 	.word	0x20001088
 800b46c:	20000b90 	.word	0x20000b90
 800b470:	20000010 	.word	0x20000010
 800b474:	20001084 	.word	0x20001084
 800b478:	20001070 	.word	0x20001070
 800b47c:	20001068 	.word	0x20001068

0800b480 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b480:	b480      	push	{r7}
 800b482:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b484:	4b04      	ldr	r3, [pc, #16]	; (800b498 <vTaskSuspendAll+0x18>)
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	3301      	adds	r3, #1
 800b48a:	4a03      	ldr	r2, [pc, #12]	; (800b498 <vTaskSuspendAll+0x18>)
 800b48c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b48e:	bf00      	nop
 800b490:	46bd      	mov	sp, r7
 800b492:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b496:	4770      	bx	lr
 800b498:	2000108c 	.word	0x2000108c

0800b49c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b49c:	b580      	push	{r7, lr}
 800b49e:	b084      	sub	sp, #16
 800b4a0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b4a2:	2300      	movs	r3, #0
 800b4a4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b4a6:	2300      	movs	r3, #0
 800b4a8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b4aa:	4b42      	ldr	r3, [pc, #264]	; (800b5b4 <xTaskResumeAll+0x118>)
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d10a      	bne.n	800b4c8 <xTaskResumeAll+0x2c>
	__asm volatile
 800b4b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4b6:	f383 8811 	msr	BASEPRI, r3
 800b4ba:	f3bf 8f6f 	isb	sy
 800b4be:	f3bf 8f4f 	dsb	sy
 800b4c2:	603b      	str	r3, [r7, #0]
}
 800b4c4:	bf00      	nop
 800b4c6:	e7fe      	b.n	800b4c6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b4c8:	f001 fa34 	bl	800c934 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b4cc:	4b39      	ldr	r3, [pc, #228]	; (800b5b4 <xTaskResumeAll+0x118>)
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	3b01      	subs	r3, #1
 800b4d2:	4a38      	ldr	r2, [pc, #224]	; (800b5b4 <xTaskResumeAll+0x118>)
 800b4d4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b4d6:	4b37      	ldr	r3, [pc, #220]	; (800b5b4 <xTaskResumeAll+0x118>)
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d162      	bne.n	800b5a4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b4de:	4b36      	ldr	r3, [pc, #216]	; (800b5b8 <xTaskResumeAll+0x11c>)
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d05e      	beq.n	800b5a4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b4e6:	e02f      	b.n	800b548 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b4e8:	4b34      	ldr	r3, [pc, #208]	; (800b5bc <xTaskResumeAll+0x120>)
 800b4ea:	68db      	ldr	r3, [r3, #12]
 800b4ec:	68db      	ldr	r3, [r3, #12]
 800b4ee:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	3318      	adds	r3, #24
 800b4f4:	4618      	mov	r0, r3
 800b4f6:	f7fe fce3 	bl	8009ec0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b4fa:	68fb      	ldr	r3, [r7, #12]
 800b4fc:	3304      	adds	r3, #4
 800b4fe:	4618      	mov	r0, r3
 800b500:	f7fe fcde 	bl	8009ec0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b508:	4b2d      	ldr	r3, [pc, #180]	; (800b5c0 <xTaskResumeAll+0x124>)
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	429a      	cmp	r2, r3
 800b50e:	d903      	bls.n	800b518 <xTaskResumeAll+0x7c>
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b514:	4a2a      	ldr	r2, [pc, #168]	; (800b5c0 <xTaskResumeAll+0x124>)
 800b516:	6013      	str	r3, [r2, #0]
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b51c:	4613      	mov	r3, r2
 800b51e:	009b      	lsls	r3, r3, #2
 800b520:	4413      	add	r3, r2
 800b522:	009b      	lsls	r3, r3, #2
 800b524:	4a27      	ldr	r2, [pc, #156]	; (800b5c4 <xTaskResumeAll+0x128>)
 800b526:	441a      	add	r2, r3
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	3304      	adds	r3, #4
 800b52c:	4619      	mov	r1, r3
 800b52e:	4610      	mov	r0, r2
 800b530:	f7fe fc69 	bl	8009e06 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b538:	4b23      	ldr	r3, [pc, #140]	; (800b5c8 <xTaskResumeAll+0x12c>)
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b53e:	429a      	cmp	r2, r3
 800b540:	d302      	bcc.n	800b548 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800b542:	4b22      	ldr	r3, [pc, #136]	; (800b5cc <xTaskResumeAll+0x130>)
 800b544:	2201      	movs	r2, #1
 800b546:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b548:	4b1c      	ldr	r3, [pc, #112]	; (800b5bc <xTaskResumeAll+0x120>)
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d1cb      	bne.n	800b4e8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	2b00      	cmp	r3, #0
 800b554:	d001      	beq.n	800b55a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b556:	f000 fb71 	bl	800bc3c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b55a:	4b1d      	ldr	r3, [pc, #116]	; (800b5d0 <xTaskResumeAll+0x134>)
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	2b00      	cmp	r3, #0
 800b564:	d010      	beq.n	800b588 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b566:	f000 f859 	bl	800b61c <xTaskIncrementTick>
 800b56a:	4603      	mov	r3, r0
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d002      	beq.n	800b576 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800b570:	4b16      	ldr	r3, [pc, #88]	; (800b5cc <xTaskResumeAll+0x130>)
 800b572:	2201      	movs	r2, #1
 800b574:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	3b01      	subs	r3, #1
 800b57a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d1f1      	bne.n	800b566 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800b582:	4b13      	ldr	r3, [pc, #76]	; (800b5d0 <xTaskResumeAll+0x134>)
 800b584:	2200      	movs	r2, #0
 800b586:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b588:	4b10      	ldr	r3, [pc, #64]	; (800b5cc <xTaskResumeAll+0x130>)
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d009      	beq.n	800b5a4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b590:	2301      	movs	r3, #1
 800b592:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b594:	4b0f      	ldr	r3, [pc, #60]	; (800b5d4 <xTaskResumeAll+0x138>)
 800b596:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b59a:	601a      	str	r2, [r3, #0]
 800b59c:	f3bf 8f4f 	dsb	sy
 800b5a0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b5a4:	f001 f9f6 	bl	800c994 <vPortExitCritical>

	return xAlreadyYielded;
 800b5a8:	68bb      	ldr	r3, [r7, #8]
}
 800b5aa:	4618      	mov	r0, r3
 800b5ac:	3710      	adds	r7, #16
 800b5ae:	46bd      	mov	sp, r7
 800b5b0:	bd80      	pop	{r7, pc}
 800b5b2:	bf00      	nop
 800b5b4:	2000108c 	.word	0x2000108c
 800b5b8:	20001064 	.word	0x20001064
 800b5bc:	20001024 	.word	0x20001024
 800b5c0:	2000106c 	.word	0x2000106c
 800b5c4:	20000b94 	.word	0x20000b94
 800b5c8:	20000b90 	.word	0x20000b90
 800b5cc:	20001078 	.word	0x20001078
 800b5d0:	20001074 	.word	0x20001074
 800b5d4:	e000ed04 	.word	0xe000ed04

0800b5d8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b5d8:	b480      	push	{r7}
 800b5da:	b083      	sub	sp, #12
 800b5dc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b5de:	4b05      	ldr	r3, [pc, #20]	; (800b5f4 <xTaskGetTickCount+0x1c>)
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b5e4:	687b      	ldr	r3, [r7, #4]
}
 800b5e6:	4618      	mov	r0, r3
 800b5e8:	370c      	adds	r7, #12
 800b5ea:	46bd      	mov	sp, r7
 800b5ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5f0:	4770      	bx	lr
 800b5f2:	bf00      	nop
 800b5f4:	20001068 	.word	0x20001068

0800b5f8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800b5f8:	b580      	push	{r7, lr}
 800b5fa:	b082      	sub	sp, #8
 800b5fc:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b5fe:	f001 fa7b 	bl	800caf8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800b602:	2300      	movs	r3, #0
 800b604:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800b606:	4b04      	ldr	r3, [pc, #16]	; (800b618 <xTaskGetTickCountFromISR+0x20>)
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b60c:	683b      	ldr	r3, [r7, #0]
}
 800b60e:	4618      	mov	r0, r3
 800b610:	3708      	adds	r7, #8
 800b612:	46bd      	mov	sp, r7
 800b614:	bd80      	pop	{r7, pc}
 800b616:	bf00      	nop
 800b618:	20001068 	.word	0x20001068

0800b61c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b61c:	b580      	push	{r7, lr}
 800b61e:	b086      	sub	sp, #24
 800b620:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b622:	2300      	movs	r3, #0
 800b624:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b626:	4b4f      	ldr	r3, [pc, #316]	; (800b764 <xTaskIncrementTick+0x148>)
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	f040 808f 	bne.w	800b74e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b630:	4b4d      	ldr	r3, [pc, #308]	; (800b768 <xTaskIncrementTick+0x14c>)
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	3301      	adds	r3, #1
 800b636:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b638:	4a4b      	ldr	r2, [pc, #300]	; (800b768 <xTaskIncrementTick+0x14c>)
 800b63a:	693b      	ldr	r3, [r7, #16]
 800b63c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b63e:	693b      	ldr	r3, [r7, #16]
 800b640:	2b00      	cmp	r3, #0
 800b642:	d120      	bne.n	800b686 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800b644:	4b49      	ldr	r3, [pc, #292]	; (800b76c <xTaskIncrementTick+0x150>)
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d00a      	beq.n	800b664 <xTaskIncrementTick+0x48>
	__asm volatile
 800b64e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b652:	f383 8811 	msr	BASEPRI, r3
 800b656:	f3bf 8f6f 	isb	sy
 800b65a:	f3bf 8f4f 	dsb	sy
 800b65e:	603b      	str	r3, [r7, #0]
}
 800b660:	bf00      	nop
 800b662:	e7fe      	b.n	800b662 <xTaskIncrementTick+0x46>
 800b664:	4b41      	ldr	r3, [pc, #260]	; (800b76c <xTaskIncrementTick+0x150>)
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	60fb      	str	r3, [r7, #12]
 800b66a:	4b41      	ldr	r3, [pc, #260]	; (800b770 <xTaskIncrementTick+0x154>)
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	4a3f      	ldr	r2, [pc, #252]	; (800b76c <xTaskIncrementTick+0x150>)
 800b670:	6013      	str	r3, [r2, #0]
 800b672:	4a3f      	ldr	r2, [pc, #252]	; (800b770 <xTaskIncrementTick+0x154>)
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	6013      	str	r3, [r2, #0]
 800b678:	4b3e      	ldr	r3, [pc, #248]	; (800b774 <xTaskIncrementTick+0x158>)
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	3301      	adds	r3, #1
 800b67e:	4a3d      	ldr	r2, [pc, #244]	; (800b774 <xTaskIncrementTick+0x158>)
 800b680:	6013      	str	r3, [r2, #0]
 800b682:	f000 fadb 	bl	800bc3c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b686:	4b3c      	ldr	r3, [pc, #240]	; (800b778 <xTaskIncrementTick+0x15c>)
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	693a      	ldr	r2, [r7, #16]
 800b68c:	429a      	cmp	r2, r3
 800b68e:	d349      	bcc.n	800b724 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b690:	4b36      	ldr	r3, [pc, #216]	; (800b76c <xTaskIncrementTick+0x150>)
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	2b00      	cmp	r3, #0
 800b698:	d104      	bne.n	800b6a4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b69a:	4b37      	ldr	r3, [pc, #220]	; (800b778 <xTaskIncrementTick+0x15c>)
 800b69c:	f04f 32ff 	mov.w	r2, #4294967295
 800b6a0:	601a      	str	r2, [r3, #0]
					break;
 800b6a2:	e03f      	b.n	800b724 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b6a4:	4b31      	ldr	r3, [pc, #196]	; (800b76c <xTaskIncrementTick+0x150>)
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	68db      	ldr	r3, [r3, #12]
 800b6aa:	68db      	ldr	r3, [r3, #12]
 800b6ac:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b6ae:	68bb      	ldr	r3, [r7, #8]
 800b6b0:	685b      	ldr	r3, [r3, #4]
 800b6b2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b6b4:	693a      	ldr	r2, [r7, #16]
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	429a      	cmp	r2, r3
 800b6ba:	d203      	bcs.n	800b6c4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b6bc:	4a2e      	ldr	r2, [pc, #184]	; (800b778 <xTaskIncrementTick+0x15c>)
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b6c2:	e02f      	b.n	800b724 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b6c4:	68bb      	ldr	r3, [r7, #8]
 800b6c6:	3304      	adds	r3, #4
 800b6c8:	4618      	mov	r0, r3
 800b6ca:	f7fe fbf9 	bl	8009ec0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b6ce:	68bb      	ldr	r3, [r7, #8]
 800b6d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d004      	beq.n	800b6e0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b6d6:	68bb      	ldr	r3, [r7, #8]
 800b6d8:	3318      	adds	r3, #24
 800b6da:	4618      	mov	r0, r3
 800b6dc:	f7fe fbf0 	bl	8009ec0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b6e0:	68bb      	ldr	r3, [r7, #8]
 800b6e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b6e4:	4b25      	ldr	r3, [pc, #148]	; (800b77c <xTaskIncrementTick+0x160>)
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	429a      	cmp	r2, r3
 800b6ea:	d903      	bls.n	800b6f4 <xTaskIncrementTick+0xd8>
 800b6ec:	68bb      	ldr	r3, [r7, #8]
 800b6ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6f0:	4a22      	ldr	r2, [pc, #136]	; (800b77c <xTaskIncrementTick+0x160>)
 800b6f2:	6013      	str	r3, [r2, #0]
 800b6f4:	68bb      	ldr	r3, [r7, #8]
 800b6f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b6f8:	4613      	mov	r3, r2
 800b6fa:	009b      	lsls	r3, r3, #2
 800b6fc:	4413      	add	r3, r2
 800b6fe:	009b      	lsls	r3, r3, #2
 800b700:	4a1f      	ldr	r2, [pc, #124]	; (800b780 <xTaskIncrementTick+0x164>)
 800b702:	441a      	add	r2, r3
 800b704:	68bb      	ldr	r3, [r7, #8]
 800b706:	3304      	adds	r3, #4
 800b708:	4619      	mov	r1, r3
 800b70a:	4610      	mov	r0, r2
 800b70c:	f7fe fb7b 	bl	8009e06 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b710:	68bb      	ldr	r3, [r7, #8]
 800b712:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b714:	4b1b      	ldr	r3, [pc, #108]	; (800b784 <xTaskIncrementTick+0x168>)
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b71a:	429a      	cmp	r2, r3
 800b71c:	d3b8      	bcc.n	800b690 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800b71e:	2301      	movs	r3, #1
 800b720:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b722:	e7b5      	b.n	800b690 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b724:	4b17      	ldr	r3, [pc, #92]	; (800b784 <xTaskIncrementTick+0x168>)
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b72a:	4915      	ldr	r1, [pc, #84]	; (800b780 <xTaskIncrementTick+0x164>)
 800b72c:	4613      	mov	r3, r2
 800b72e:	009b      	lsls	r3, r3, #2
 800b730:	4413      	add	r3, r2
 800b732:	009b      	lsls	r3, r3, #2
 800b734:	440b      	add	r3, r1
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	2b01      	cmp	r3, #1
 800b73a:	d901      	bls.n	800b740 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800b73c:	2301      	movs	r3, #1
 800b73e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b740:	4b11      	ldr	r3, [pc, #68]	; (800b788 <xTaskIncrementTick+0x16c>)
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	2b00      	cmp	r3, #0
 800b746:	d007      	beq.n	800b758 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800b748:	2301      	movs	r3, #1
 800b74a:	617b      	str	r3, [r7, #20]
 800b74c:	e004      	b.n	800b758 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b74e:	4b0f      	ldr	r3, [pc, #60]	; (800b78c <xTaskIncrementTick+0x170>)
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	3301      	adds	r3, #1
 800b754:	4a0d      	ldr	r2, [pc, #52]	; (800b78c <xTaskIncrementTick+0x170>)
 800b756:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b758:	697b      	ldr	r3, [r7, #20]
}
 800b75a:	4618      	mov	r0, r3
 800b75c:	3718      	adds	r7, #24
 800b75e:	46bd      	mov	sp, r7
 800b760:	bd80      	pop	{r7, pc}
 800b762:	bf00      	nop
 800b764:	2000108c 	.word	0x2000108c
 800b768:	20001068 	.word	0x20001068
 800b76c:	2000101c 	.word	0x2000101c
 800b770:	20001020 	.word	0x20001020
 800b774:	2000107c 	.word	0x2000107c
 800b778:	20001084 	.word	0x20001084
 800b77c:	2000106c 	.word	0x2000106c
 800b780:	20000b94 	.word	0x20000b94
 800b784:	20000b90 	.word	0x20000b90
 800b788:	20001078 	.word	0x20001078
 800b78c:	20001074 	.word	0x20001074

0800b790 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b790:	b480      	push	{r7}
 800b792:	b085      	sub	sp, #20
 800b794:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b796:	4b2a      	ldr	r3, [pc, #168]	; (800b840 <vTaskSwitchContext+0xb0>)
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	d003      	beq.n	800b7a6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b79e:	4b29      	ldr	r3, [pc, #164]	; (800b844 <vTaskSwitchContext+0xb4>)
 800b7a0:	2201      	movs	r2, #1
 800b7a2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b7a4:	e046      	b.n	800b834 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800b7a6:	4b27      	ldr	r3, [pc, #156]	; (800b844 <vTaskSwitchContext+0xb4>)
 800b7a8:	2200      	movs	r2, #0
 800b7aa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b7ac:	4b26      	ldr	r3, [pc, #152]	; (800b848 <vTaskSwitchContext+0xb8>)
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	60fb      	str	r3, [r7, #12]
 800b7b2:	e010      	b.n	800b7d6 <vTaskSwitchContext+0x46>
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d10a      	bne.n	800b7d0 <vTaskSwitchContext+0x40>
	__asm volatile
 800b7ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7be:	f383 8811 	msr	BASEPRI, r3
 800b7c2:	f3bf 8f6f 	isb	sy
 800b7c6:	f3bf 8f4f 	dsb	sy
 800b7ca:	607b      	str	r3, [r7, #4]
}
 800b7cc:	bf00      	nop
 800b7ce:	e7fe      	b.n	800b7ce <vTaskSwitchContext+0x3e>
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	3b01      	subs	r3, #1
 800b7d4:	60fb      	str	r3, [r7, #12]
 800b7d6:	491d      	ldr	r1, [pc, #116]	; (800b84c <vTaskSwitchContext+0xbc>)
 800b7d8:	68fa      	ldr	r2, [r7, #12]
 800b7da:	4613      	mov	r3, r2
 800b7dc:	009b      	lsls	r3, r3, #2
 800b7de:	4413      	add	r3, r2
 800b7e0:	009b      	lsls	r3, r3, #2
 800b7e2:	440b      	add	r3, r1
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d0e4      	beq.n	800b7b4 <vTaskSwitchContext+0x24>
 800b7ea:	68fa      	ldr	r2, [r7, #12]
 800b7ec:	4613      	mov	r3, r2
 800b7ee:	009b      	lsls	r3, r3, #2
 800b7f0:	4413      	add	r3, r2
 800b7f2:	009b      	lsls	r3, r3, #2
 800b7f4:	4a15      	ldr	r2, [pc, #84]	; (800b84c <vTaskSwitchContext+0xbc>)
 800b7f6:	4413      	add	r3, r2
 800b7f8:	60bb      	str	r3, [r7, #8]
 800b7fa:	68bb      	ldr	r3, [r7, #8]
 800b7fc:	685b      	ldr	r3, [r3, #4]
 800b7fe:	685a      	ldr	r2, [r3, #4]
 800b800:	68bb      	ldr	r3, [r7, #8]
 800b802:	605a      	str	r2, [r3, #4]
 800b804:	68bb      	ldr	r3, [r7, #8]
 800b806:	685a      	ldr	r2, [r3, #4]
 800b808:	68bb      	ldr	r3, [r7, #8]
 800b80a:	3308      	adds	r3, #8
 800b80c:	429a      	cmp	r2, r3
 800b80e:	d104      	bne.n	800b81a <vTaskSwitchContext+0x8a>
 800b810:	68bb      	ldr	r3, [r7, #8]
 800b812:	685b      	ldr	r3, [r3, #4]
 800b814:	685a      	ldr	r2, [r3, #4]
 800b816:	68bb      	ldr	r3, [r7, #8]
 800b818:	605a      	str	r2, [r3, #4]
 800b81a:	68bb      	ldr	r3, [r7, #8]
 800b81c:	685b      	ldr	r3, [r3, #4]
 800b81e:	68db      	ldr	r3, [r3, #12]
 800b820:	4a0b      	ldr	r2, [pc, #44]	; (800b850 <vTaskSwitchContext+0xc0>)
 800b822:	6013      	str	r3, [r2, #0]
 800b824:	4a08      	ldr	r2, [pc, #32]	; (800b848 <vTaskSwitchContext+0xb8>)
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b82a:	4b09      	ldr	r3, [pc, #36]	; (800b850 <vTaskSwitchContext+0xc0>)
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	3354      	adds	r3, #84	; 0x54
 800b830:	4a08      	ldr	r2, [pc, #32]	; (800b854 <vTaskSwitchContext+0xc4>)
 800b832:	6013      	str	r3, [r2, #0]
}
 800b834:	bf00      	nop
 800b836:	3714      	adds	r7, #20
 800b838:	46bd      	mov	sp, r7
 800b83a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b83e:	4770      	bx	lr
 800b840:	2000108c 	.word	0x2000108c
 800b844:	20001078 	.word	0x20001078
 800b848:	2000106c 	.word	0x2000106c
 800b84c:	20000b94 	.word	0x20000b94
 800b850:	20000b90 	.word	0x20000b90
 800b854:	20000010 	.word	0x20000010

0800b858 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b858:	b580      	push	{r7, lr}
 800b85a:	b084      	sub	sp, #16
 800b85c:	af00      	add	r7, sp, #0
 800b85e:	6078      	str	r0, [r7, #4]
 800b860:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	2b00      	cmp	r3, #0
 800b866:	d10a      	bne.n	800b87e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800b868:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b86c:	f383 8811 	msr	BASEPRI, r3
 800b870:	f3bf 8f6f 	isb	sy
 800b874:	f3bf 8f4f 	dsb	sy
 800b878:	60fb      	str	r3, [r7, #12]
}
 800b87a:	bf00      	nop
 800b87c:	e7fe      	b.n	800b87c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b87e:	4b07      	ldr	r3, [pc, #28]	; (800b89c <vTaskPlaceOnEventList+0x44>)
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	3318      	adds	r3, #24
 800b884:	4619      	mov	r1, r3
 800b886:	6878      	ldr	r0, [r7, #4]
 800b888:	f7fe fae1 	bl	8009e4e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b88c:	2101      	movs	r1, #1
 800b88e:	6838      	ldr	r0, [r7, #0]
 800b890:	f000 fb7e 	bl	800bf90 <prvAddCurrentTaskToDelayedList>
}
 800b894:	bf00      	nop
 800b896:	3710      	adds	r7, #16
 800b898:	46bd      	mov	sp, r7
 800b89a:	bd80      	pop	{r7, pc}
 800b89c:	20000b90 	.word	0x20000b90

0800b8a0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b8a0:	b580      	push	{r7, lr}
 800b8a2:	b086      	sub	sp, #24
 800b8a4:	af00      	add	r7, sp, #0
 800b8a6:	60f8      	str	r0, [r7, #12]
 800b8a8:	60b9      	str	r1, [r7, #8]
 800b8aa:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d10a      	bne.n	800b8c8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800b8b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8b6:	f383 8811 	msr	BASEPRI, r3
 800b8ba:	f3bf 8f6f 	isb	sy
 800b8be:	f3bf 8f4f 	dsb	sy
 800b8c2:	617b      	str	r3, [r7, #20]
}
 800b8c4:	bf00      	nop
 800b8c6:	e7fe      	b.n	800b8c6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b8c8:	4b0a      	ldr	r3, [pc, #40]	; (800b8f4 <vTaskPlaceOnEventListRestricted+0x54>)
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	3318      	adds	r3, #24
 800b8ce:	4619      	mov	r1, r3
 800b8d0:	68f8      	ldr	r0, [r7, #12]
 800b8d2:	f7fe fa98 	bl	8009e06 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d002      	beq.n	800b8e2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800b8dc:	f04f 33ff 	mov.w	r3, #4294967295
 800b8e0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b8e2:	6879      	ldr	r1, [r7, #4]
 800b8e4:	68b8      	ldr	r0, [r7, #8]
 800b8e6:	f000 fb53 	bl	800bf90 <prvAddCurrentTaskToDelayedList>
	}
 800b8ea:	bf00      	nop
 800b8ec:	3718      	adds	r7, #24
 800b8ee:	46bd      	mov	sp, r7
 800b8f0:	bd80      	pop	{r7, pc}
 800b8f2:	bf00      	nop
 800b8f4:	20000b90 	.word	0x20000b90

0800b8f8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b8f8:	b580      	push	{r7, lr}
 800b8fa:	b086      	sub	sp, #24
 800b8fc:	af00      	add	r7, sp, #0
 800b8fe:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	68db      	ldr	r3, [r3, #12]
 800b904:	68db      	ldr	r3, [r3, #12]
 800b906:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b908:	693b      	ldr	r3, [r7, #16]
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d10a      	bne.n	800b924 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800b90e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b912:	f383 8811 	msr	BASEPRI, r3
 800b916:	f3bf 8f6f 	isb	sy
 800b91a:	f3bf 8f4f 	dsb	sy
 800b91e:	60fb      	str	r3, [r7, #12]
}
 800b920:	bf00      	nop
 800b922:	e7fe      	b.n	800b922 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b924:	693b      	ldr	r3, [r7, #16]
 800b926:	3318      	adds	r3, #24
 800b928:	4618      	mov	r0, r3
 800b92a:	f7fe fac9 	bl	8009ec0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b92e:	4b1e      	ldr	r3, [pc, #120]	; (800b9a8 <xTaskRemoveFromEventList+0xb0>)
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	2b00      	cmp	r3, #0
 800b934:	d11d      	bne.n	800b972 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b936:	693b      	ldr	r3, [r7, #16]
 800b938:	3304      	adds	r3, #4
 800b93a:	4618      	mov	r0, r3
 800b93c:	f7fe fac0 	bl	8009ec0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b940:	693b      	ldr	r3, [r7, #16]
 800b942:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b944:	4b19      	ldr	r3, [pc, #100]	; (800b9ac <xTaskRemoveFromEventList+0xb4>)
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	429a      	cmp	r2, r3
 800b94a:	d903      	bls.n	800b954 <xTaskRemoveFromEventList+0x5c>
 800b94c:	693b      	ldr	r3, [r7, #16]
 800b94e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b950:	4a16      	ldr	r2, [pc, #88]	; (800b9ac <xTaskRemoveFromEventList+0xb4>)
 800b952:	6013      	str	r3, [r2, #0]
 800b954:	693b      	ldr	r3, [r7, #16]
 800b956:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b958:	4613      	mov	r3, r2
 800b95a:	009b      	lsls	r3, r3, #2
 800b95c:	4413      	add	r3, r2
 800b95e:	009b      	lsls	r3, r3, #2
 800b960:	4a13      	ldr	r2, [pc, #76]	; (800b9b0 <xTaskRemoveFromEventList+0xb8>)
 800b962:	441a      	add	r2, r3
 800b964:	693b      	ldr	r3, [r7, #16]
 800b966:	3304      	adds	r3, #4
 800b968:	4619      	mov	r1, r3
 800b96a:	4610      	mov	r0, r2
 800b96c:	f7fe fa4b 	bl	8009e06 <vListInsertEnd>
 800b970:	e005      	b.n	800b97e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b972:	693b      	ldr	r3, [r7, #16]
 800b974:	3318      	adds	r3, #24
 800b976:	4619      	mov	r1, r3
 800b978:	480e      	ldr	r0, [pc, #56]	; (800b9b4 <xTaskRemoveFromEventList+0xbc>)
 800b97a:	f7fe fa44 	bl	8009e06 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b97e:	693b      	ldr	r3, [r7, #16]
 800b980:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b982:	4b0d      	ldr	r3, [pc, #52]	; (800b9b8 <xTaskRemoveFromEventList+0xc0>)
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b988:	429a      	cmp	r2, r3
 800b98a:	d905      	bls.n	800b998 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b98c:	2301      	movs	r3, #1
 800b98e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b990:	4b0a      	ldr	r3, [pc, #40]	; (800b9bc <xTaskRemoveFromEventList+0xc4>)
 800b992:	2201      	movs	r2, #1
 800b994:	601a      	str	r2, [r3, #0]
 800b996:	e001      	b.n	800b99c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800b998:	2300      	movs	r3, #0
 800b99a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b99c:	697b      	ldr	r3, [r7, #20]
}
 800b99e:	4618      	mov	r0, r3
 800b9a0:	3718      	adds	r7, #24
 800b9a2:	46bd      	mov	sp, r7
 800b9a4:	bd80      	pop	{r7, pc}
 800b9a6:	bf00      	nop
 800b9a8:	2000108c 	.word	0x2000108c
 800b9ac:	2000106c 	.word	0x2000106c
 800b9b0:	20000b94 	.word	0x20000b94
 800b9b4:	20001024 	.word	0x20001024
 800b9b8:	20000b90 	.word	0x20000b90
 800b9bc:	20001078 	.word	0x20001078

0800b9c0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b9c0:	b480      	push	{r7}
 800b9c2:	b083      	sub	sp, #12
 800b9c4:	af00      	add	r7, sp, #0
 800b9c6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b9c8:	4b06      	ldr	r3, [pc, #24]	; (800b9e4 <vTaskInternalSetTimeOutState+0x24>)
 800b9ca:	681a      	ldr	r2, [r3, #0]
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b9d0:	4b05      	ldr	r3, [pc, #20]	; (800b9e8 <vTaskInternalSetTimeOutState+0x28>)
 800b9d2:	681a      	ldr	r2, [r3, #0]
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	605a      	str	r2, [r3, #4]
}
 800b9d8:	bf00      	nop
 800b9da:	370c      	adds	r7, #12
 800b9dc:	46bd      	mov	sp, r7
 800b9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9e2:	4770      	bx	lr
 800b9e4:	2000107c 	.word	0x2000107c
 800b9e8:	20001068 	.word	0x20001068

0800b9ec <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b9ec:	b580      	push	{r7, lr}
 800b9ee:	b088      	sub	sp, #32
 800b9f0:	af00      	add	r7, sp, #0
 800b9f2:	6078      	str	r0, [r7, #4]
 800b9f4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d10a      	bne.n	800ba12 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800b9fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba00:	f383 8811 	msr	BASEPRI, r3
 800ba04:	f3bf 8f6f 	isb	sy
 800ba08:	f3bf 8f4f 	dsb	sy
 800ba0c:	613b      	str	r3, [r7, #16]
}
 800ba0e:	bf00      	nop
 800ba10:	e7fe      	b.n	800ba10 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800ba12:	683b      	ldr	r3, [r7, #0]
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d10a      	bne.n	800ba2e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800ba18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba1c:	f383 8811 	msr	BASEPRI, r3
 800ba20:	f3bf 8f6f 	isb	sy
 800ba24:	f3bf 8f4f 	dsb	sy
 800ba28:	60fb      	str	r3, [r7, #12]
}
 800ba2a:	bf00      	nop
 800ba2c:	e7fe      	b.n	800ba2c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800ba2e:	f000 ff81 	bl	800c934 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ba32:	4b1d      	ldr	r3, [pc, #116]	; (800baa8 <xTaskCheckForTimeOut+0xbc>)
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	685b      	ldr	r3, [r3, #4]
 800ba3c:	69ba      	ldr	r2, [r7, #24]
 800ba3e:	1ad3      	subs	r3, r2, r3
 800ba40:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ba42:	683b      	ldr	r3, [r7, #0]
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba4a:	d102      	bne.n	800ba52 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800ba4c:	2300      	movs	r3, #0
 800ba4e:	61fb      	str	r3, [r7, #28]
 800ba50:	e023      	b.n	800ba9a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	681a      	ldr	r2, [r3, #0]
 800ba56:	4b15      	ldr	r3, [pc, #84]	; (800baac <xTaskCheckForTimeOut+0xc0>)
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	429a      	cmp	r2, r3
 800ba5c:	d007      	beq.n	800ba6e <xTaskCheckForTimeOut+0x82>
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	685b      	ldr	r3, [r3, #4]
 800ba62:	69ba      	ldr	r2, [r7, #24]
 800ba64:	429a      	cmp	r2, r3
 800ba66:	d302      	bcc.n	800ba6e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ba68:	2301      	movs	r3, #1
 800ba6a:	61fb      	str	r3, [r7, #28]
 800ba6c:	e015      	b.n	800ba9a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ba6e:	683b      	ldr	r3, [r7, #0]
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	697a      	ldr	r2, [r7, #20]
 800ba74:	429a      	cmp	r2, r3
 800ba76:	d20b      	bcs.n	800ba90 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800ba78:	683b      	ldr	r3, [r7, #0]
 800ba7a:	681a      	ldr	r2, [r3, #0]
 800ba7c:	697b      	ldr	r3, [r7, #20]
 800ba7e:	1ad2      	subs	r2, r2, r3
 800ba80:	683b      	ldr	r3, [r7, #0]
 800ba82:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ba84:	6878      	ldr	r0, [r7, #4]
 800ba86:	f7ff ff9b 	bl	800b9c0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800ba8a:	2300      	movs	r3, #0
 800ba8c:	61fb      	str	r3, [r7, #28]
 800ba8e:	e004      	b.n	800ba9a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800ba90:	683b      	ldr	r3, [r7, #0]
 800ba92:	2200      	movs	r2, #0
 800ba94:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800ba96:	2301      	movs	r3, #1
 800ba98:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800ba9a:	f000 ff7b 	bl	800c994 <vPortExitCritical>

	return xReturn;
 800ba9e:	69fb      	ldr	r3, [r7, #28]
}
 800baa0:	4618      	mov	r0, r3
 800baa2:	3720      	adds	r7, #32
 800baa4:	46bd      	mov	sp, r7
 800baa6:	bd80      	pop	{r7, pc}
 800baa8:	20001068 	.word	0x20001068
 800baac:	2000107c 	.word	0x2000107c

0800bab0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800bab0:	b480      	push	{r7}
 800bab2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800bab4:	4b03      	ldr	r3, [pc, #12]	; (800bac4 <vTaskMissedYield+0x14>)
 800bab6:	2201      	movs	r2, #1
 800bab8:	601a      	str	r2, [r3, #0]
}
 800baba:	bf00      	nop
 800babc:	46bd      	mov	sp, r7
 800babe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bac2:	4770      	bx	lr
 800bac4:	20001078 	.word	0x20001078

0800bac8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800bac8:	b580      	push	{r7, lr}
 800baca:	b082      	sub	sp, #8
 800bacc:	af00      	add	r7, sp, #0
 800bace:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800bad0:	f000 f852 	bl	800bb78 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800bad4:	4b06      	ldr	r3, [pc, #24]	; (800baf0 <prvIdleTask+0x28>)
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	2b01      	cmp	r3, #1
 800bada:	d9f9      	bls.n	800bad0 <prvIdleTask+0x8>
			{
				taskYIELD();
 800badc:	4b05      	ldr	r3, [pc, #20]	; (800baf4 <prvIdleTask+0x2c>)
 800bade:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bae2:	601a      	str	r2, [r3, #0]
 800bae4:	f3bf 8f4f 	dsb	sy
 800bae8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800baec:	e7f0      	b.n	800bad0 <prvIdleTask+0x8>
 800baee:	bf00      	nop
 800baf0:	20000b94 	.word	0x20000b94
 800baf4:	e000ed04 	.word	0xe000ed04

0800baf8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800baf8:	b580      	push	{r7, lr}
 800bafa:	b082      	sub	sp, #8
 800bafc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bafe:	2300      	movs	r3, #0
 800bb00:	607b      	str	r3, [r7, #4]
 800bb02:	e00c      	b.n	800bb1e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800bb04:	687a      	ldr	r2, [r7, #4]
 800bb06:	4613      	mov	r3, r2
 800bb08:	009b      	lsls	r3, r3, #2
 800bb0a:	4413      	add	r3, r2
 800bb0c:	009b      	lsls	r3, r3, #2
 800bb0e:	4a12      	ldr	r2, [pc, #72]	; (800bb58 <prvInitialiseTaskLists+0x60>)
 800bb10:	4413      	add	r3, r2
 800bb12:	4618      	mov	r0, r3
 800bb14:	f7fe f94a 	bl	8009dac <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	3301      	adds	r3, #1
 800bb1c:	607b      	str	r3, [r7, #4]
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	2b37      	cmp	r3, #55	; 0x37
 800bb22:	d9ef      	bls.n	800bb04 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800bb24:	480d      	ldr	r0, [pc, #52]	; (800bb5c <prvInitialiseTaskLists+0x64>)
 800bb26:	f7fe f941 	bl	8009dac <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800bb2a:	480d      	ldr	r0, [pc, #52]	; (800bb60 <prvInitialiseTaskLists+0x68>)
 800bb2c:	f7fe f93e 	bl	8009dac <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800bb30:	480c      	ldr	r0, [pc, #48]	; (800bb64 <prvInitialiseTaskLists+0x6c>)
 800bb32:	f7fe f93b 	bl	8009dac <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800bb36:	480c      	ldr	r0, [pc, #48]	; (800bb68 <prvInitialiseTaskLists+0x70>)
 800bb38:	f7fe f938 	bl	8009dac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800bb3c:	480b      	ldr	r0, [pc, #44]	; (800bb6c <prvInitialiseTaskLists+0x74>)
 800bb3e:	f7fe f935 	bl	8009dac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800bb42:	4b0b      	ldr	r3, [pc, #44]	; (800bb70 <prvInitialiseTaskLists+0x78>)
 800bb44:	4a05      	ldr	r2, [pc, #20]	; (800bb5c <prvInitialiseTaskLists+0x64>)
 800bb46:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800bb48:	4b0a      	ldr	r3, [pc, #40]	; (800bb74 <prvInitialiseTaskLists+0x7c>)
 800bb4a:	4a05      	ldr	r2, [pc, #20]	; (800bb60 <prvInitialiseTaskLists+0x68>)
 800bb4c:	601a      	str	r2, [r3, #0]
}
 800bb4e:	bf00      	nop
 800bb50:	3708      	adds	r7, #8
 800bb52:	46bd      	mov	sp, r7
 800bb54:	bd80      	pop	{r7, pc}
 800bb56:	bf00      	nop
 800bb58:	20000b94 	.word	0x20000b94
 800bb5c:	20000ff4 	.word	0x20000ff4
 800bb60:	20001008 	.word	0x20001008
 800bb64:	20001024 	.word	0x20001024
 800bb68:	20001038 	.word	0x20001038
 800bb6c:	20001050 	.word	0x20001050
 800bb70:	2000101c 	.word	0x2000101c
 800bb74:	20001020 	.word	0x20001020

0800bb78 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800bb78:	b580      	push	{r7, lr}
 800bb7a:	b082      	sub	sp, #8
 800bb7c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bb7e:	e019      	b.n	800bbb4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800bb80:	f000 fed8 	bl	800c934 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bb84:	4b10      	ldr	r3, [pc, #64]	; (800bbc8 <prvCheckTasksWaitingTermination+0x50>)
 800bb86:	68db      	ldr	r3, [r3, #12]
 800bb88:	68db      	ldr	r3, [r3, #12]
 800bb8a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	3304      	adds	r3, #4
 800bb90:	4618      	mov	r0, r3
 800bb92:	f7fe f995 	bl	8009ec0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800bb96:	4b0d      	ldr	r3, [pc, #52]	; (800bbcc <prvCheckTasksWaitingTermination+0x54>)
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	3b01      	subs	r3, #1
 800bb9c:	4a0b      	ldr	r2, [pc, #44]	; (800bbcc <prvCheckTasksWaitingTermination+0x54>)
 800bb9e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800bba0:	4b0b      	ldr	r3, [pc, #44]	; (800bbd0 <prvCheckTasksWaitingTermination+0x58>)
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	3b01      	subs	r3, #1
 800bba6:	4a0a      	ldr	r2, [pc, #40]	; (800bbd0 <prvCheckTasksWaitingTermination+0x58>)
 800bba8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800bbaa:	f000 fef3 	bl	800c994 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800bbae:	6878      	ldr	r0, [r7, #4]
 800bbb0:	f000 f810 	bl	800bbd4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bbb4:	4b06      	ldr	r3, [pc, #24]	; (800bbd0 <prvCheckTasksWaitingTermination+0x58>)
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d1e1      	bne.n	800bb80 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800bbbc:	bf00      	nop
 800bbbe:	bf00      	nop
 800bbc0:	3708      	adds	r7, #8
 800bbc2:	46bd      	mov	sp, r7
 800bbc4:	bd80      	pop	{r7, pc}
 800bbc6:	bf00      	nop
 800bbc8:	20001038 	.word	0x20001038
 800bbcc:	20001064 	.word	0x20001064
 800bbd0:	2000104c 	.word	0x2000104c

0800bbd4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800bbd4:	b580      	push	{r7, lr}
 800bbd6:	b084      	sub	sp, #16
 800bbd8:	af00      	add	r7, sp, #0
 800bbda:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	3354      	adds	r3, #84	; 0x54
 800bbe0:	4618      	mov	r0, r3
 800bbe2:	f001 f9fd 	bl	800cfe0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d108      	bne.n	800bc02 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bbf4:	4618      	mov	r0, r3
 800bbf6:	f001 f88b 	bl	800cd10 <vPortFree>
				vPortFree( pxTCB );
 800bbfa:	6878      	ldr	r0, [r7, #4]
 800bbfc:	f001 f888 	bl	800cd10 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800bc00:	e018      	b.n	800bc34 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800bc08:	2b01      	cmp	r3, #1
 800bc0a:	d103      	bne.n	800bc14 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800bc0c:	6878      	ldr	r0, [r7, #4]
 800bc0e:	f001 f87f 	bl	800cd10 <vPortFree>
	}
 800bc12:	e00f      	b.n	800bc34 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800bc1a:	2b02      	cmp	r3, #2
 800bc1c:	d00a      	beq.n	800bc34 <prvDeleteTCB+0x60>
	__asm volatile
 800bc1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc22:	f383 8811 	msr	BASEPRI, r3
 800bc26:	f3bf 8f6f 	isb	sy
 800bc2a:	f3bf 8f4f 	dsb	sy
 800bc2e:	60fb      	str	r3, [r7, #12]
}
 800bc30:	bf00      	nop
 800bc32:	e7fe      	b.n	800bc32 <prvDeleteTCB+0x5e>
	}
 800bc34:	bf00      	nop
 800bc36:	3710      	adds	r7, #16
 800bc38:	46bd      	mov	sp, r7
 800bc3a:	bd80      	pop	{r7, pc}

0800bc3c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800bc3c:	b480      	push	{r7}
 800bc3e:	b083      	sub	sp, #12
 800bc40:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bc42:	4b0c      	ldr	r3, [pc, #48]	; (800bc74 <prvResetNextTaskUnblockTime+0x38>)
 800bc44:	681b      	ldr	r3, [r3, #0]
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d104      	bne.n	800bc56 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800bc4c:	4b0a      	ldr	r3, [pc, #40]	; (800bc78 <prvResetNextTaskUnblockTime+0x3c>)
 800bc4e:	f04f 32ff 	mov.w	r2, #4294967295
 800bc52:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800bc54:	e008      	b.n	800bc68 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bc56:	4b07      	ldr	r3, [pc, #28]	; (800bc74 <prvResetNextTaskUnblockTime+0x38>)
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	68db      	ldr	r3, [r3, #12]
 800bc5c:	68db      	ldr	r3, [r3, #12]
 800bc5e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	685b      	ldr	r3, [r3, #4]
 800bc64:	4a04      	ldr	r2, [pc, #16]	; (800bc78 <prvResetNextTaskUnblockTime+0x3c>)
 800bc66:	6013      	str	r3, [r2, #0]
}
 800bc68:	bf00      	nop
 800bc6a:	370c      	adds	r7, #12
 800bc6c:	46bd      	mov	sp, r7
 800bc6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc72:	4770      	bx	lr
 800bc74:	2000101c 	.word	0x2000101c
 800bc78:	20001084 	.word	0x20001084

0800bc7c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800bc7c:	b480      	push	{r7}
 800bc7e:	b083      	sub	sp, #12
 800bc80:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800bc82:	4b0b      	ldr	r3, [pc, #44]	; (800bcb0 <xTaskGetSchedulerState+0x34>)
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d102      	bne.n	800bc90 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800bc8a:	2301      	movs	r3, #1
 800bc8c:	607b      	str	r3, [r7, #4]
 800bc8e:	e008      	b.n	800bca2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bc90:	4b08      	ldr	r3, [pc, #32]	; (800bcb4 <xTaskGetSchedulerState+0x38>)
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d102      	bne.n	800bc9e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800bc98:	2302      	movs	r3, #2
 800bc9a:	607b      	str	r3, [r7, #4]
 800bc9c:	e001      	b.n	800bca2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800bc9e:	2300      	movs	r3, #0
 800bca0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800bca2:	687b      	ldr	r3, [r7, #4]
	}
 800bca4:	4618      	mov	r0, r3
 800bca6:	370c      	adds	r7, #12
 800bca8:	46bd      	mov	sp, r7
 800bcaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcae:	4770      	bx	lr
 800bcb0:	20001070 	.word	0x20001070
 800bcb4:	2000108c 	.word	0x2000108c

0800bcb8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800bcb8:	b580      	push	{r7, lr}
 800bcba:	b084      	sub	sp, #16
 800bcbc:	af00      	add	r7, sp, #0
 800bcbe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800bcc4:	2300      	movs	r3, #0
 800bcc6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d051      	beq.n	800bd72 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800bcce:	68bb      	ldr	r3, [r7, #8]
 800bcd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bcd2:	4b2a      	ldr	r3, [pc, #168]	; (800bd7c <xTaskPriorityInherit+0xc4>)
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcd8:	429a      	cmp	r2, r3
 800bcda:	d241      	bcs.n	800bd60 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800bcdc:	68bb      	ldr	r3, [r7, #8]
 800bcde:	699b      	ldr	r3, [r3, #24]
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	db06      	blt.n	800bcf2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bce4:	4b25      	ldr	r3, [pc, #148]	; (800bd7c <xTaskPriorityInherit+0xc4>)
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcea:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800bcee:	68bb      	ldr	r3, [r7, #8]
 800bcf0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800bcf2:	68bb      	ldr	r3, [r7, #8]
 800bcf4:	6959      	ldr	r1, [r3, #20]
 800bcf6:	68bb      	ldr	r3, [r7, #8]
 800bcf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bcfa:	4613      	mov	r3, r2
 800bcfc:	009b      	lsls	r3, r3, #2
 800bcfe:	4413      	add	r3, r2
 800bd00:	009b      	lsls	r3, r3, #2
 800bd02:	4a1f      	ldr	r2, [pc, #124]	; (800bd80 <xTaskPriorityInherit+0xc8>)
 800bd04:	4413      	add	r3, r2
 800bd06:	4299      	cmp	r1, r3
 800bd08:	d122      	bne.n	800bd50 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bd0a:	68bb      	ldr	r3, [r7, #8]
 800bd0c:	3304      	adds	r3, #4
 800bd0e:	4618      	mov	r0, r3
 800bd10:	f7fe f8d6 	bl	8009ec0 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800bd14:	4b19      	ldr	r3, [pc, #100]	; (800bd7c <xTaskPriorityInherit+0xc4>)
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd1a:	68bb      	ldr	r3, [r7, #8]
 800bd1c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800bd1e:	68bb      	ldr	r3, [r7, #8]
 800bd20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd22:	4b18      	ldr	r3, [pc, #96]	; (800bd84 <xTaskPriorityInherit+0xcc>)
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	429a      	cmp	r2, r3
 800bd28:	d903      	bls.n	800bd32 <xTaskPriorityInherit+0x7a>
 800bd2a:	68bb      	ldr	r3, [r7, #8]
 800bd2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd2e:	4a15      	ldr	r2, [pc, #84]	; (800bd84 <xTaskPriorityInherit+0xcc>)
 800bd30:	6013      	str	r3, [r2, #0]
 800bd32:	68bb      	ldr	r3, [r7, #8]
 800bd34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd36:	4613      	mov	r3, r2
 800bd38:	009b      	lsls	r3, r3, #2
 800bd3a:	4413      	add	r3, r2
 800bd3c:	009b      	lsls	r3, r3, #2
 800bd3e:	4a10      	ldr	r2, [pc, #64]	; (800bd80 <xTaskPriorityInherit+0xc8>)
 800bd40:	441a      	add	r2, r3
 800bd42:	68bb      	ldr	r3, [r7, #8]
 800bd44:	3304      	adds	r3, #4
 800bd46:	4619      	mov	r1, r3
 800bd48:	4610      	mov	r0, r2
 800bd4a:	f7fe f85c 	bl	8009e06 <vListInsertEnd>
 800bd4e:	e004      	b.n	800bd5a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800bd50:	4b0a      	ldr	r3, [pc, #40]	; (800bd7c <xTaskPriorityInherit+0xc4>)
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd56:	68bb      	ldr	r3, [r7, #8]
 800bd58:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800bd5a:	2301      	movs	r3, #1
 800bd5c:	60fb      	str	r3, [r7, #12]
 800bd5e:	e008      	b.n	800bd72 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800bd60:	68bb      	ldr	r3, [r7, #8]
 800bd62:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bd64:	4b05      	ldr	r3, [pc, #20]	; (800bd7c <xTaskPriorityInherit+0xc4>)
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd6a:	429a      	cmp	r2, r3
 800bd6c:	d201      	bcs.n	800bd72 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800bd6e:	2301      	movs	r3, #1
 800bd70:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bd72:	68fb      	ldr	r3, [r7, #12]
	}
 800bd74:	4618      	mov	r0, r3
 800bd76:	3710      	adds	r7, #16
 800bd78:	46bd      	mov	sp, r7
 800bd7a:	bd80      	pop	{r7, pc}
 800bd7c:	20000b90 	.word	0x20000b90
 800bd80:	20000b94 	.word	0x20000b94
 800bd84:	2000106c 	.word	0x2000106c

0800bd88 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800bd88:	b580      	push	{r7, lr}
 800bd8a:	b086      	sub	sp, #24
 800bd8c:	af00      	add	r7, sp, #0
 800bd8e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800bd94:	2300      	movs	r3, #0
 800bd96:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d056      	beq.n	800be4c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800bd9e:	4b2e      	ldr	r3, [pc, #184]	; (800be58 <xTaskPriorityDisinherit+0xd0>)
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	693a      	ldr	r2, [r7, #16]
 800bda4:	429a      	cmp	r2, r3
 800bda6:	d00a      	beq.n	800bdbe <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800bda8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdac:	f383 8811 	msr	BASEPRI, r3
 800bdb0:	f3bf 8f6f 	isb	sy
 800bdb4:	f3bf 8f4f 	dsb	sy
 800bdb8:	60fb      	str	r3, [r7, #12]
}
 800bdba:	bf00      	nop
 800bdbc:	e7fe      	b.n	800bdbc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800bdbe:	693b      	ldr	r3, [r7, #16]
 800bdc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	d10a      	bne.n	800bddc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800bdc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdca:	f383 8811 	msr	BASEPRI, r3
 800bdce:	f3bf 8f6f 	isb	sy
 800bdd2:	f3bf 8f4f 	dsb	sy
 800bdd6:	60bb      	str	r3, [r7, #8]
}
 800bdd8:	bf00      	nop
 800bdda:	e7fe      	b.n	800bdda <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800bddc:	693b      	ldr	r3, [r7, #16]
 800bdde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bde0:	1e5a      	subs	r2, r3, #1
 800bde2:	693b      	ldr	r3, [r7, #16]
 800bde4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800bde6:	693b      	ldr	r3, [r7, #16]
 800bde8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bdea:	693b      	ldr	r3, [r7, #16]
 800bdec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bdee:	429a      	cmp	r2, r3
 800bdf0:	d02c      	beq.n	800be4c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800bdf2:	693b      	ldr	r3, [r7, #16]
 800bdf4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	d128      	bne.n	800be4c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bdfa:	693b      	ldr	r3, [r7, #16]
 800bdfc:	3304      	adds	r3, #4
 800bdfe:	4618      	mov	r0, r3
 800be00:	f7fe f85e 	bl	8009ec0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800be04:	693b      	ldr	r3, [r7, #16]
 800be06:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800be08:	693b      	ldr	r3, [r7, #16]
 800be0a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800be0c:	693b      	ldr	r3, [r7, #16]
 800be0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be10:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800be14:	693b      	ldr	r3, [r7, #16]
 800be16:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800be18:	693b      	ldr	r3, [r7, #16]
 800be1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be1c:	4b0f      	ldr	r3, [pc, #60]	; (800be5c <xTaskPriorityDisinherit+0xd4>)
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	429a      	cmp	r2, r3
 800be22:	d903      	bls.n	800be2c <xTaskPriorityDisinherit+0xa4>
 800be24:	693b      	ldr	r3, [r7, #16]
 800be26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be28:	4a0c      	ldr	r2, [pc, #48]	; (800be5c <xTaskPriorityDisinherit+0xd4>)
 800be2a:	6013      	str	r3, [r2, #0]
 800be2c:	693b      	ldr	r3, [r7, #16]
 800be2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be30:	4613      	mov	r3, r2
 800be32:	009b      	lsls	r3, r3, #2
 800be34:	4413      	add	r3, r2
 800be36:	009b      	lsls	r3, r3, #2
 800be38:	4a09      	ldr	r2, [pc, #36]	; (800be60 <xTaskPriorityDisinherit+0xd8>)
 800be3a:	441a      	add	r2, r3
 800be3c:	693b      	ldr	r3, [r7, #16]
 800be3e:	3304      	adds	r3, #4
 800be40:	4619      	mov	r1, r3
 800be42:	4610      	mov	r0, r2
 800be44:	f7fd ffdf 	bl	8009e06 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800be48:	2301      	movs	r3, #1
 800be4a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800be4c:	697b      	ldr	r3, [r7, #20]
	}
 800be4e:	4618      	mov	r0, r3
 800be50:	3718      	adds	r7, #24
 800be52:	46bd      	mov	sp, r7
 800be54:	bd80      	pop	{r7, pc}
 800be56:	bf00      	nop
 800be58:	20000b90 	.word	0x20000b90
 800be5c:	2000106c 	.word	0x2000106c
 800be60:	20000b94 	.word	0x20000b94

0800be64 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800be64:	b580      	push	{r7, lr}
 800be66:	b088      	sub	sp, #32
 800be68:	af00      	add	r7, sp, #0
 800be6a:	6078      	str	r0, [r7, #4]
 800be6c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800be72:	2301      	movs	r3, #1
 800be74:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d06a      	beq.n	800bf52 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800be7c:	69bb      	ldr	r3, [r7, #24]
 800be7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800be80:	2b00      	cmp	r3, #0
 800be82:	d10a      	bne.n	800be9a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800be84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be88:	f383 8811 	msr	BASEPRI, r3
 800be8c:	f3bf 8f6f 	isb	sy
 800be90:	f3bf 8f4f 	dsb	sy
 800be94:	60fb      	str	r3, [r7, #12]
}
 800be96:	bf00      	nop
 800be98:	e7fe      	b.n	800be98 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800be9a:	69bb      	ldr	r3, [r7, #24]
 800be9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800be9e:	683a      	ldr	r2, [r7, #0]
 800bea0:	429a      	cmp	r2, r3
 800bea2:	d902      	bls.n	800beaa <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800bea4:	683b      	ldr	r3, [r7, #0]
 800bea6:	61fb      	str	r3, [r7, #28]
 800bea8:	e002      	b.n	800beb0 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800beaa:	69bb      	ldr	r3, [r7, #24]
 800beac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800beae:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800beb0:	69bb      	ldr	r3, [r7, #24]
 800beb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800beb4:	69fa      	ldr	r2, [r7, #28]
 800beb6:	429a      	cmp	r2, r3
 800beb8:	d04b      	beq.n	800bf52 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800beba:	69bb      	ldr	r3, [r7, #24]
 800bebc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bebe:	697a      	ldr	r2, [r7, #20]
 800bec0:	429a      	cmp	r2, r3
 800bec2:	d146      	bne.n	800bf52 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800bec4:	4b25      	ldr	r3, [pc, #148]	; (800bf5c <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	69ba      	ldr	r2, [r7, #24]
 800beca:	429a      	cmp	r2, r3
 800becc:	d10a      	bne.n	800bee4 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800bece:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bed2:	f383 8811 	msr	BASEPRI, r3
 800bed6:	f3bf 8f6f 	isb	sy
 800beda:	f3bf 8f4f 	dsb	sy
 800bede:	60bb      	str	r3, [r7, #8]
}
 800bee0:	bf00      	nop
 800bee2:	e7fe      	b.n	800bee2 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800bee4:	69bb      	ldr	r3, [r7, #24]
 800bee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bee8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800beea:	69bb      	ldr	r3, [r7, #24]
 800beec:	69fa      	ldr	r2, [r7, #28]
 800beee:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800bef0:	69bb      	ldr	r3, [r7, #24]
 800bef2:	699b      	ldr	r3, [r3, #24]
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	db04      	blt.n	800bf02 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bef8:	69fb      	ldr	r3, [r7, #28]
 800befa:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800befe:	69bb      	ldr	r3, [r7, #24]
 800bf00:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800bf02:	69bb      	ldr	r3, [r7, #24]
 800bf04:	6959      	ldr	r1, [r3, #20]
 800bf06:	693a      	ldr	r2, [r7, #16]
 800bf08:	4613      	mov	r3, r2
 800bf0a:	009b      	lsls	r3, r3, #2
 800bf0c:	4413      	add	r3, r2
 800bf0e:	009b      	lsls	r3, r3, #2
 800bf10:	4a13      	ldr	r2, [pc, #76]	; (800bf60 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800bf12:	4413      	add	r3, r2
 800bf14:	4299      	cmp	r1, r3
 800bf16:	d11c      	bne.n	800bf52 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bf18:	69bb      	ldr	r3, [r7, #24]
 800bf1a:	3304      	adds	r3, #4
 800bf1c:	4618      	mov	r0, r3
 800bf1e:	f7fd ffcf 	bl	8009ec0 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800bf22:	69bb      	ldr	r3, [r7, #24]
 800bf24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf26:	4b0f      	ldr	r3, [pc, #60]	; (800bf64 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	429a      	cmp	r2, r3
 800bf2c:	d903      	bls.n	800bf36 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800bf2e:	69bb      	ldr	r3, [r7, #24]
 800bf30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf32:	4a0c      	ldr	r2, [pc, #48]	; (800bf64 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800bf34:	6013      	str	r3, [r2, #0]
 800bf36:	69bb      	ldr	r3, [r7, #24]
 800bf38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf3a:	4613      	mov	r3, r2
 800bf3c:	009b      	lsls	r3, r3, #2
 800bf3e:	4413      	add	r3, r2
 800bf40:	009b      	lsls	r3, r3, #2
 800bf42:	4a07      	ldr	r2, [pc, #28]	; (800bf60 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800bf44:	441a      	add	r2, r3
 800bf46:	69bb      	ldr	r3, [r7, #24]
 800bf48:	3304      	adds	r3, #4
 800bf4a:	4619      	mov	r1, r3
 800bf4c:	4610      	mov	r0, r2
 800bf4e:	f7fd ff5a 	bl	8009e06 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bf52:	bf00      	nop
 800bf54:	3720      	adds	r7, #32
 800bf56:	46bd      	mov	sp, r7
 800bf58:	bd80      	pop	{r7, pc}
 800bf5a:	bf00      	nop
 800bf5c:	20000b90 	.word	0x20000b90
 800bf60:	20000b94 	.word	0x20000b94
 800bf64:	2000106c 	.word	0x2000106c

0800bf68 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800bf68:	b480      	push	{r7}
 800bf6a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800bf6c:	4b07      	ldr	r3, [pc, #28]	; (800bf8c <pvTaskIncrementMutexHeldCount+0x24>)
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	d004      	beq.n	800bf7e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800bf74:	4b05      	ldr	r3, [pc, #20]	; (800bf8c <pvTaskIncrementMutexHeldCount+0x24>)
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800bf7a:	3201      	adds	r2, #1
 800bf7c:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800bf7e:	4b03      	ldr	r3, [pc, #12]	; (800bf8c <pvTaskIncrementMutexHeldCount+0x24>)
 800bf80:	681b      	ldr	r3, [r3, #0]
	}
 800bf82:	4618      	mov	r0, r3
 800bf84:	46bd      	mov	sp, r7
 800bf86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf8a:	4770      	bx	lr
 800bf8c:	20000b90 	.word	0x20000b90

0800bf90 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800bf90:	b580      	push	{r7, lr}
 800bf92:	b084      	sub	sp, #16
 800bf94:	af00      	add	r7, sp, #0
 800bf96:	6078      	str	r0, [r7, #4]
 800bf98:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800bf9a:	4b21      	ldr	r3, [pc, #132]	; (800c020 <prvAddCurrentTaskToDelayedList+0x90>)
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bfa0:	4b20      	ldr	r3, [pc, #128]	; (800c024 <prvAddCurrentTaskToDelayedList+0x94>)
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	3304      	adds	r3, #4
 800bfa6:	4618      	mov	r0, r3
 800bfa8:	f7fd ff8a 	bl	8009ec0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bfb2:	d10a      	bne.n	800bfca <prvAddCurrentTaskToDelayedList+0x3a>
 800bfb4:	683b      	ldr	r3, [r7, #0]
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d007      	beq.n	800bfca <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bfba:	4b1a      	ldr	r3, [pc, #104]	; (800c024 <prvAddCurrentTaskToDelayedList+0x94>)
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	3304      	adds	r3, #4
 800bfc0:	4619      	mov	r1, r3
 800bfc2:	4819      	ldr	r0, [pc, #100]	; (800c028 <prvAddCurrentTaskToDelayedList+0x98>)
 800bfc4:	f7fd ff1f 	bl	8009e06 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800bfc8:	e026      	b.n	800c018 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800bfca:	68fa      	ldr	r2, [r7, #12]
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	4413      	add	r3, r2
 800bfd0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800bfd2:	4b14      	ldr	r3, [pc, #80]	; (800c024 <prvAddCurrentTaskToDelayedList+0x94>)
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	68ba      	ldr	r2, [r7, #8]
 800bfd8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800bfda:	68ba      	ldr	r2, [r7, #8]
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	429a      	cmp	r2, r3
 800bfe0:	d209      	bcs.n	800bff6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bfe2:	4b12      	ldr	r3, [pc, #72]	; (800c02c <prvAddCurrentTaskToDelayedList+0x9c>)
 800bfe4:	681a      	ldr	r2, [r3, #0]
 800bfe6:	4b0f      	ldr	r3, [pc, #60]	; (800c024 <prvAddCurrentTaskToDelayedList+0x94>)
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	3304      	adds	r3, #4
 800bfec:	4619      	mov	r1, r3
 800bfee:	4610      	mov	r0, r2
 800bff0:	f7fd ff2d 	bl	8009e4e <vListInsert>
}
 800bff4:	e010      	b.n	800c018 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bff6:	4b0e      	ldr	r3, [pc, #56]	; (800c030 <prvAddCurrentTaskToDelayedList+0xa0>)
 800bff8:	681a      	ldr	r2, [r3, #0]
 800bffa:	4b0a      	ldr	r3, [pc, #40]	; (800c024 <prvAddCurrentTaskToDelayedList+0x94>)
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	3304      	adds	r3, #4
 800c000:	4619      	mov	r1, r3
 800c002:	4610      	mov	r0, r2
 800c004:	f7fd ff23 	bl	8009e4e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c008:	4b0a      	ldr	r3, [pc, #40]	; (800c034 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	68ba      	ldr	r2, [r7, #8]
 800c00e:	429a      	cmp	r2, r3
 800c010:	d202      	bcs.n	800c018 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800c012:	4a08      	ldr	r2, [pc, #32]	; (800c034 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c014:	68bb      	ldr	r3, [r7, #8]
 800c016:	6013      	str	r3, [r2, #0]
}
 800c018:	bf00      	nop
 800c01a:	3710      	adds	r7, #16
 800c01c:	46bd      	mov	sp, r7
 800c01e:	bd80      	pop	{r7, pc}
 800c020:	20001068 	.word	0x20001068
 800c024:	20000b90 	.word	0x20000b90
 800c028:	20001050 	.word	0x20001050
 800c02c:	20001020 	.word	0x20001020
 800c030:	2000101c 	.word	0x2000101c
 800c034:	20001084 	.word	0x20001084

0800c038 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c038:	b580      	push	{r7, lr}
 800c03a:	b08a      	sub	sp, #40	; 0x28
 800c03c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800c03e:	2300      	movs	r3, #0
 800c040:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c042:	f000 fb07 	bl	800c654 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c046:	4b1c      	ldr	r3, [pc, #112]	; (800c0b8 <xTimerCreateTimerTask+0x80>)
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d021      	beq.n	800c092 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c04e:	2300      	movs	r3, #0
 800c050:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c052:	2300      	movs	r3, #0
 800c054:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c056:	1d3a      	adds	r2, r7, #4
 800c058:	f107 0108 	add.w	r1, r7, #8
 800c05c:	f107 030c 	add.w	r3, r7, #12
 800c060:	4618      	mov	r0, r3
 800c062:	f7fd fe89 	bl	8009d78 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c066:	6879      	ldr	r1, [r7, #4]
 800c068:	68bb      	ldr	r3, [r7, #8]
 800c06a:	68fa      	ldr	r2, [r7, #12]
 800c06c:	9202      	str	r2, [sp, #8]
 800c06e:	9301      	str	r3, [sp, #4]
 800c070:	2302      	movs	r3, #2
 800c072:	9300      	str	r3, [sp, #0]
 800c074:	2300      	movs	r3, #0
 800c076:	460a      	mov	r2, r1
 800c078:	4910      	ldr	r1, [pc, #64]	; (800c0bc <xTimerCreateTimerTask+0x84>)
 800c07a:	4811      	ldr	r0, [pc, #68]	; (800c0c0 <xTimerCreateTimerTask+0x88>)
 800c07c:	f7fe ffa4 	bl	800afc8 <xTaskCreateStatic>
 800c080:	4603      	mov	r3, r0
 800c082:	4a10      	ldr	r2, [pc, #64]	; (800c0c4 <xTimerCreateTimerTask+0x8c>)
 800c084:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800c086:	4b0f      	ldr	r3, [pc, #60]	; (800c0c4 <xTimerCreateTimerTask+0x8c>)
 800c088:	681b      	ldr	r3, [r3, #0]
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d001      	beq.n	800c092 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800c08e:	2301      	movs	r3, #1
 800c090:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c092:	697b      	ldr	r3, [r7, #20]
 800c094:	2b00      	cmp	r3, #0
 800c096:	d10a      	bne.n	800c0ae <xTimerCreateTimerTask+0x76>
	__asm volatile
 800c098:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c09c:	f383 8811 	msr	BASEPRI, r3
 800c0a0:	f3bf 8f6f 	isb	sy
 800c0a4:	f3bf 8f4f 	dsb	sy
 800c0a8:	613b      	str	r3, [r7, #16]
}
 800c0aa:	bf00      	nop
 800c0ac:	e7fe      	b.n	800c0ac <xTimerCreateTimerTask+0x74>
	return xReturn;
 800c0ae:	697b      	ldr	r3, [r7, #20]
}
 800c0b0:	4618      	mov	r0, r3
 800c0b2:	3718      	adds	r7, #24
 800c0b4:	46bd      	mov	sp, r7
 800c0b6:	bd80      	pop	{r7, pc}
 800c0b8:	200010c0 	.word	0x200010c0
 800c0bc:	0800d1a0 	.word	0x0800d1a0
 800c0c0:	0800c1fd 	.word	0x0800c1fd
 800c0c4:	200010c4 	.word	0x200010c4

0800c0c8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c0c8:	b580      	push	{r7, lr}
 800c0ca:	b08a      	sub	sp, #40	; 0x28
 800c0cc:	af00      	add	r7, sp, #0
 800c0ce:	60f8      	str	r0, [r7, #12]
 800c0d0:	60b9      	str	r1, [r7, #8]
 800c0d2:	607a      	str	r2, [r7, #4]
 800c0d4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c0d6:	2300      	movs	r3, #0
 800c0d8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d10a      	bne.n	800c0f6 <xTimerGenericCommand+0x2e>
	__asm volatile
 800c0e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0e4:	f383 8811 	msr	BASEPRI, r3
 800c0e8:	f3bf 8f6f 	isb	sy
 800c0ec:	f3bf 8f4f 	dsb	sy
 800c0f0:	623b      	str	r3, [r7, #32]
}
 800c0f2:	bf00      	nop
 800c0f4:	e7fe      	b.n	800c0f4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c0f6:	4b1a      	ldr	r3, [pc, #104]	; (800c160 <xTimerGenericCommand+0x98>)
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d02a      	beq.n	800c154 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c0fe:	68bb      	ldr	r3, [r7, #8]
 800c100:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800c106:	68fb      	ldr	r3, [r7, #12]
 800c108:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c10a:	68bb      	ldr	r3, [r7, #8]
 800c10c:	2b05      	cmp	r3, #5
 800c10e:	dc18      	bgt.n	800c142 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c110:	f7ff fdb4 	bl	800bc7c <xTaskGetSchedulerState>
 800c114:	4603      	mov	r3, r0
 800c116:	2b02      	cmp	r3, #2
 800c118:	d109      	bne.n	800c12e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c11a:	4b11      	ldr	r3, [pc, #68]	; (800c160 <xTimerGenericCommand+0x98>)
 800c11c:	6818      	ldr	r0, [r3, #0]
 800c11e:	f107 0110 	add.w	r1, r7, #16
 800c122:	2300      	movs	r3, #0
 800c124:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c126:	f7fe f8e9 	bl	800a2fc <xQueueGenericSend>
 800c12a:	6278      	str	r0, [r7, #36]	; 0x24
 800c12c:	e012      	b.n	800c154 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c12e:	4b0c      	ldr	r3, [pc, #48]	; (800c160 <xTimerGenericCommand+0x98>)
 800c130:	6818      	ldr	r0, [r3, #0]
 800c132:	f107 0110 	add.w	r1, r7, #16
 800c136:	2300      	movs	r3, #0
 800c138:	2200      	movs	r2, #0
 800c13a:	f7fe f8df 	bl	800a2fc <xQueueGenericSend>
 800c13e:	6278      	str	r0, [r7, #36]	; 0x24
 800c140:	e008      	b.n	800c154 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c142:	4b07      	ldr	r3, [pc, #28]	; (800c160 <xTimerGenericCommand+0x98>)
 800c144:	6818      	ldr	r0, [r3, #0]
 800c146:	f107 0110 	add.w	r1, r7, #16
 800c14a:	2300      	movs	r3, #0
 800c14c:	683a      	ldr	r2, [r7, #0]
 800c14e:	f7fe f9d3 	bl	800a4f8 <xQueueGenericSendFromISR>
 800c152:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c156:	4618      	mov	r0, r3
 800c158:	3728      	adds	r7, #40	; 0x28
 800c15a:	46bd      	mov	sp, r7
 800c15c:	bd80      	pop	{r7, pc}
 800c15e:	bf00      	nop
 800c160:	200010c0 	.word	0x200010c0

0800c164 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c164:	b580      	push	{r7, lr}
 800c166:	b088      	sub	sp, #32
 800c168:	af02      	add	r7, sp, #8
 800c16a:	6078      	str	r0, [r7, #4]
 800c16c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c16e:	4b22      	ldr	r3, [pc, #136]	; (800c1f8 <prvProcessExpiredTimer+0x94>)
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	68db      	ldr	r3, [r3, #12]
 800c174:	68db      	ldr	r3, [r3, #12]
 800c176:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c178:	697b      	ldr	r3, [r7, #20]
 800c17a:	3304      	adds	r3, #4
 800c17c:	4618      	mov	r0, r3
 800c17e:	f7fd fe9f 	bl	8009ec0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c182:	697b      	ldr	r3, [r7, #20]
 800c184:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c188:	f003 0304 	and.w	r3, r3, #4
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d022      	beq.n	800c1d6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c190:	697b      	ldr	r3, [r7, #20]
 800c192:	699a      	ldr	r2, [r3, #24]
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	18d1      	adds	r1, r2, r3
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	683a      	ldr	r2, [r7, #0]
 800c19c:	6978      	ldr	r0, [r7, #20]
 800c19e:	f000 f8d1 	bl	800c344 <prvInsertTimerInActiveList>
 800c1a2:	4603      	mov	r3, r0
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d01f      	beq.n	800c1e8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c1a8:	2300      	movs	r3, #0
 800c1aa:	9300      	str	r3, [sp, #0]
 800c1ac:	2300      	movs	r3, #0
 800c1ae:	687a      	ldr	r2, [r7, #4]
 800c1b0:	2100      	movs	r1, #0
 800c1b2:	6978      	ldr	r0, [r7, #20]
 800c1b4:	f7ff ff88 	bl	800c0c8 <xTimerGenericCommand>
 800c1b8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c1ba:	693b      	ldr	r3, [r7, #16]
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d113      	bne.n	800c1e8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800c1c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1c4:	f383 8811 	msr	BASEPRI, r3
 800c1c8:	f3bf 8f6f 	isb	sy
 800c1cc:	f3bf 8f4f 	dsb	sy
 800c1d0:	60fb      	str	r3, [r7, #12]
}
 800c1d2:	bf00      	nop
 800c1d4:	e7fe      	b.n	800c1d4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c1d6:	697b      	ldr	r3, [r7, #20]
 800c1d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c1dc:	f023 0301 	bic.w	r3, r3, #1
 800c1e0:	b2da      	uxtb	r2, r3
 800c1e2:	697b      	ldr	r3, [r7, #20]
 800c1e4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c1e8:	697b      	ldr	r3, [r7, #20]
 800c1ea:	6a1b      	ldr	r3, [r3, #32]
 800c1ec:	6978      	ldr	r0, [r7, #20]
 800c1ee:	4798      	blx	r3
}
 800c1f0:	bf00      	nop
 800c1f2:	3718      	adds	r7, #24
 800c1f4:	46bd      	mov	sp, r7
 800c1f6:	bd80      	pop	{r7, pc}
 800c1f8:	200010b8 	.word	0x200010b8

0800c1fc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800c1fc:	b580      	push	{r7, lr}
 800c1fe:	b084      	sub	sp, #16
 800c200:	af00      	add	r7, sp, #0
 800c202:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c204:	f107 0308 	add.w	r3, r7, #8
 800c208:	4618      	mov	r0, r3
 800c20a:	f000 f857 	bl	800c2bc <prvGetNextExpireTime>
 800c20e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c210:	68bb      	ldr	r3, [r7, #8]
 800c212:	4619      	mov	r1, r3
 800c214:	68f8      	ldr	r0, [r7, #12]
 800c216:	f000 f803 	bl	800c220 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c21a:	f000 f8d5 	bl	800c3c8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c21e:	e7f1      	b.n	800c204 <prvTimerTask+0x8>

0800c220 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c220:	b580      	push	{r7, lr}
 800c222:	b084      	sub	sp, #16
 800c224:	af00      	add	r7, sp, #0
 800c226:	6078      	str	r0, [r7, #4]
 800c228:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c22a:	f7ff f929 	bl	800b480 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c22e:	f107 0308 	add.w	r3, r7, #8
 800c232:	4618      	mov	r0, r3
 800c234:	f000 f866 	bl	800c304 <prvSampleTimeNow>
 800c238:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c23a:	68bb      	ldr	r3, [r7, #8]
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d130      	bne.n	800c2a2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c240:	683b      	ldr	r3, [r7, #0]
 800c242:	2b00      	cmp	r3, #0
 800c244:	d10a      	bne.n	800c25c <prvProcessTimerOrBlockTask+0x3c>
 800c246:	687a      	ldr	r2, [r7, #4]
 800c248:	68fb      	ldr	r3, [r7, #12]
 800c24a:	429a      	cmp	r2, r3
 800c24c:	d806      	bhi.n	800c25c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c24e:	f7ff f925 	bl	800b49c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c252:	68f9      	ldr	r1, [r7, #12]
 800c254:	6878      	ldr	r0, [r7, #4]
 800c256:	f7ff ff85 	bl	800c164 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c25a:	e024      	b.n	800c2a6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c25c:	683b      	ldr	r3, [r7, #0]
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d008      	beq.n	800c274 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c262:	4b13      	ldr	r3, [pc, #76]	; (800c2b0 <prvProcessTimerOrBlockTask+0x90>)
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d101      	bne.n	800c270 <prvProcessTimerOrBlockTask+0x50>
 800c26c:	2301      	movs	r3, #1
 800c26e:	e000      	b.n	800c272 <prvProcessTimerOrBlockTask+0x52>
 800c270:	2300      	movs	r3, #0
 800c272:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c274:	4b0f      	ldr	r3, [pc, #60]	; (800c2b4 <prvProcessTimerOrBlockTask+0x94>)
 800c276:	6818      	ldr	r0, [r3, #0]
 800c278:	687a      	ldr	r2, [r7, #4]
 800c27a:	68fb      	ldr	r3, [r7, #12]
 800c27c:	1ad3      	subs	r3, r2, r3
 800c27e:	683a      	ldr	r2, [r7, #0]
 800c280:	4619      	mov	r1, r3
 800c282:	f7fe fe6d 	bl	800af60 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c286:	f7ff f909 	bl	800b49c <xTaskResumeAll>
 800c28a:	4603      	mov	r3, r0
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d10a      	bne.n	800c2a6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c290:	4b09      	ldr	r3, [pc, #36]	; (800c2b8 <prvProcessTimerOrBlockTask+0x98>)
 800c292:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c296:	601a      	str	r2, [r3, #0]
 800c298:	f3bf 8f4f 	dsb	sy
 800c29c:	f3bf 8f6f 	isb	sy
}
 800c2a0:	e001      	b.n	800c2a6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c2a2:	f7ff f8fb 	bl	800b49c <xTaskResumeAll>
}
 800c2a6:	bf00      	nop
 800c2a8:	3710      	adds	r7, #16
 800c2aa:	46bd      	mov	sp, r7
 800c2ac:	bd80      	pop	{r7, pc}
 800c2ae:	bf00      	nop
 800c2b0:	200010bc 	.word	0x200010bc
 800c2b4:	200010c0 	.word	0x200010c0
 800c2b8:	e000ed04 	.word	0xe000ed04

0800c2bc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c2bc:	b480      	push	{r7}
 800c2be:	b085      	sub	sp, #20
 800c2c0:	af00      	add	r7, sp, #0
 800c2c2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c2c4:	4b0e      	ldr	r3, [pc, #56]	; (800c300 <prvGetNextExpireTime+0x44>)
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	d101      	bne.n	800c2d2 <prvGetNextExpireTime+0x16>
 800c2ce:	2201      	movs	r2, #1
 800c2d0:	e000      	b.n	800c2d4 <prvGetNextExpireTime+0x18>
 800c2d2:	2200      	movs	r2, #0
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d105      	bne.n	800c2ec <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c2e0:	4b07      	ldr	r3, [pc, #28]	; (800c300 <prvGetNextExpireTime+0x44>)
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	68db      	ldr	r3, [r3, #12]
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	60fb      	str	r3, [r7, #12]
 800c2ea:	e001      	b.n	800c2f0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c2ec:	2300      	movs	r3, #0
 800c2ee:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c2f0:	68fb      	ldr	r3, [r7, #12]
}
 800c2f2:	4618      	mov	r0, r3
 800c2f4:	3714      	adds	r7, #20
 800c2f6:	46bd      	mov	sp, r7
 800c2f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2fc:	4770      	bx	lr
 800c2fe:	bf00      	nop
 800c300:	200010b8 	.word	0x200010b8

0800c304 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c304:	b580      	push	{r7, lr}
 800c306:	b084      	sub	sp, #16
 800c308:	af00      	add	r7, sp, #0
 800c30a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c30c:	f7ff f964 	bl	800b5d8 <xTaskGetTickCount>
 800c310:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c312:	4b0b      	ldr	r3, [pc, #44]	; (800c340 <prvSampleTimeNow+0x3c>)
 800c314:	681b      	ldr	r3, [r3, #0]
 800c316:	68fa      	ldr	r2, [r7, #12]
 800c318:	429a      	cmp	r2, r3
 800c31a:	d205      	bcs.n	800c328 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c31c:	f000 f936 	bl	800c58c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	2201      	movs	r2, #1
 800c324:	601a      	str	r2, [r3, #0]
 800c326:	e002      	b.n	800c32e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	2200      	movs	r2, #0
 800c32c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c32e:	4a04      	ldr	r2, [pc, #16]	; (800c340 <prvSampleTimeNow+0x3c>)
 800c330:	68fb      	ldr	r3, [r7, #12]
 800c332:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c334:	68fb      	ldr	r3, [r7, #12]
}
 800c336:	4618      	mov	r0, r3
 800c338:	3710      	adds	r7, #16
 800c33a:	46bd      	mov	sp, r7
 800c33c:	bd80      	pop	{r7, pc}
 800c33e:	bf00      	nop
 800c340:	200010c8 	.word	0x200010c8

0800c344 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c344:	b580      	push	{r7, lr}
 800c346:	b086      	sub	sp, #24
 800c348:	af00      	add	r7, sp, #0
 800c34a:	60f8      	str	r0, [r7, #12]
 800c34c:	60b9      	str	r1, [r7, #8]
 800c34e:	607a      	str	r2, [r7, #4]
 800c350:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c352:	2300      	movs	r3, #0
 800c354:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c356:	68fb      	ldr	r3, [r7, #12]
 800c358:	68ba      	ldr	r2, [r7, #8]
 800c35a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c35c:	68fb      	ldr	r3, [r7, #12]
 800c35e:	68fa      	ldr	r2, [r7, #12]
 800c360:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c362:	68ba      	ldr	r2, [r7, #8]
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	429a      	cmp	r2, r3
 800c368:	d812      	bhi.n	800c390 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c36a:	687a      	ldr	r2, [r7, #4]
 800c36c:	683b      	ldr	r3, [r7, #0]
 800c36e:	1ad2      	subs	r2, r2, r3
 800c370:	68fb      	ldr	r3, [r7, #12]
 800c372:	699b      	ldr	r3, [r3, #24]
 800c374:	429a      	cmp	r2, r3
 800c376:	d302      	bcc.n	800c37e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c378:	2301      	movs	r3, #1
 800c37a:	617b      	str	r3, [r7, #20]
 800c37c:	e01b      	b.n	800c3b6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c37e:	4b10      	ldr	r3, [pc, #64]	; (800c3c0 <prvInsertTimerInActiveList+0x7c>)
 800c380:	681a      	ldr	r2, [r3, #0]
 800c382:	68fb      	ldr	r3, [r7, #12]
 800c384:	3304      	adds	r3, #4
 800c386:	4619      	mov	r1, r3
 800c388:	4610      	mov	r0, r2
 800c38a:	f7fd fd60 	bl	8009e4e <vListInsert>
 800c38e:	e012      	b.n	800c3b6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c390:	687a      	ldr	r2, [r7, #4]
 800c392:	683b      	ldr	r3, [r7, #0]
 800c394:	429a      	cmp	r2, r3
 800c396:	d206      	bcs.n	800c3a6 <prvInsertTimerInActiveList+0x62>
 800c398:	68ba      	ldr	r2, [r7, #8]
 800c39a:	683b      	ldr	r3, [r7, #0]
 800c39c:	429a      	cmp	r2, r3
 800c39e:	d302      	bcc.n	800c3a6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c3a0:	2301      	movs	r3, #1
 800c3a2:	617b      	str	r3, [r7, #20]
 800c3a4:	e007      	b.n	800c3b6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c3a6:	4b07      	ldr	r3, [pc, #28]	; (800c3c4 <prvInsertTimerInActiveList+0x80>)
 800c3a8:	681a      	ldr	r2, [r3, #0]
 800c3aa:	68fb      	ldr	r3, [r7, #12]
 800c3ac:	3304      	adds	r3, #4
 800c3ae:	4619      	mov	r1, r3
 800c3b0:	4610      	mov	r0, r2
 800c3b2:	f7fd fd4c 	bl	8009e4e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c3b6:	697b      	ldr	r3, [r7, #20]
}
 800c3b8:	4618      	mov	r0, r3
 800c3ba:	3718      	adds	r7, #24
 800c3bc:	46bd      	mov	sp, r7
 800c3be:	bd80      	pop	{r7, pc}
 800c3c0:	200010bc 	.word	0x200010bc
 800c3c4:	200010b8 	.word	0x200010b8

0800c3c8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c3c8:	b580      	push	{r7, lr}
 800c3ca:	b08e      	sub	sp, #56	; 0x38
 800c3cc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c3ce:	e0ca      	b.n	800c566 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	da18      	bge.n	800c408 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c3d6:	1d3b      	adds	r3, r7, #4
 800c3d8:	3304      	adds	r3, #4
 800c3da:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c3dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d10a      	bne.n	800c3f8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800c3e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3e6:	f383 8811 	msr	BASEPRI, r3
 800c3ea:	f3bf 8f6f 	isb	sy
 800c3ee:	f3bf 8f4f 	dsb	sy
 800c3f2:	61fb      	str	r3, [r7, #28]
}
 800c3f4:	bf00      	nop
 800c3f6:	e7fe      	b.n	800c3f6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c3f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c3fe:	6850      	ldr	r0, [r2, #4]
 800c400:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c402:	6892      	ldr	r2, [r2, #8]
 800c404:	4611      	mov	r1, r2
 800c406:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	f2c0 80aa 	blt.w	800c564 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c416:	695b      	ldr	r3, [r3, #20]
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d004      	beq.n	800c426 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c41c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c41e:	3304      	adds	r3, #4
 800c420:	4618      	mov	r0, r3
 800c422:	f7fd fd4d 	bl	8009ec0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c426:	463b      	mov	r3, r7
 800c428:	4618      	mov	r0, r3
 800c42a:	f7ff ff6b 	bl	800c304 <prvSampleTimeNow>
 800c42e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	2b09      	cmp	r3, #9
 800c434:	f200 8097 	bhi.w	800c566 <prvProcessReceivedCommands+0x19e>
 800c438:	a201      	add	r2, pc, #4	; (adr r2, 800c440 <prvProcessReceivedCommands+0x78>)
 800c43a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c43e:	bf00      	nop
 800c440:	0800c469 	.word	0x0800c469
 800c444:	0800c469 	.word	0x0800c469
 800c448:	0800c469 	.word	0x0800c469
 800c44c:	0800c4dd 	.word	0x0800c4dd
 800c450:	0800c4f1 	.word	0x0800c4f1
 800c454:	0800c53b 	.word	0x0800c53b
 800c458:	0800c469 	.word	0x0800c469
 800c45c:	0800c469 	.word	0x0800c469
 800c460:	0800c4dd 	.word	0x0800c4dd
 800c464:	0800c4f1 	.word	0x0800c4f1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c46a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c46e:	f043 0301 	orr.w	r3, r3, #1
 800c472:	b2da      	uxtb	r2, r3
 800c474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c476:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c47a:	68ba      	ldr	r2, [r7, #8]
 800c47c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c47e:	699b      	ldr	r3, [r3, #24]
 800c480:	18d1      	adds	r1, r2, r3
 800c482:	68bb      	ldr	r3, [r7, #8]
 800c484:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c486:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c488:	f7ff ff5c 	bl	800c344 <prvInsertTimerInActiveList>
 800c48c:	4603      	mov	r3, r0
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d069      	beq.n	800c566 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c494:	6a1b      	ldr	r3, [r3, #32]
 800c496:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c498:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c49a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c49c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c4a0:	f003 0304 	and.w	r3, r3, #4
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d05e      	beq.n	800c566 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c4a8:	68ba      	ldr	r2, [r7, #8]
 800c4aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4ac:	699b      	ldr	r3, [r3, #24]
 800c4ae:	441a      	add	r2, r3
 800c4b0:	2300      	movs	r3, #0
 800c4b2:	9300      	str	r3, [sp, #0]
 800c4b4:	2300      	movs	r3, #0
 800c4b6:	2100      	movs	r1, #0
 800c4b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c4ba:	f7ff fe05 	bl	800c0c8 <xTimerGenericCommand>
 800c4be:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c4c0:	6a3b      	ldr	r3, [r7, #32]
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d14f      	bne.n	800c566 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800c4c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4ca:	f383 8811 	msr	BASEPRI, r3
 800c4ce:	f3bf 8f6f 	isb	sy
 800c4d2:	f3bf 8f4f 	dsb	sy
 800c4d6:	61bb      	str	r3, [r7, #24]
}
 800c4d8:	bf00      	nop
 800c4da:	e7fe      	b.n	800c4da <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c4dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4de:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c4e2:	f023 0301 	bic.w	r3, r3, #1
 800c4e6:	b2da      	uxtb	r2, r3
 800c4e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4ea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800c4ee:	e03a      	b.n	800c566 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c4f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4f2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c4f6:	f043 0301 	orr.w	r3, r3, #1
 800c4fa:	b2da      	uxtb	r2, r3
 800c4fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4fe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c502:	68ba      	ldr	r2, [r7, #8]
 800c504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c506:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c50a:	699b      	ldr	r3, [r3, #24]
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d10a      	bne.n	800c526 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800c510:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c514:	f383 8811 	msr	BASEPRI, r3
 800c518:	f3bf 8f6f 	isb	sy
 800c51c:	f3bf 8f4f 	dsb	sy
 800c520:	617b      	str	r3, [r7, #20]
}
 800c522:	bf00      	nop
 800c524:	e7fe      	b.n	800c524 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c528:	699a      	ldr	r2, [r3, #24]
 800c52a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c52c:	18d1      	adds	r1, r2, r3
 800c52e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c530:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c532:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c534:	f7ff ff06 	bl	800c344 <prvInsertTimerInActiveList>
					break;
 800c538:	e015      	b.n	800c566 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c53a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c53c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c540:	f003 0302 	and.w	r3, r3, #2
 800c544:	2b00      	cmp	r3, #0
 800c546:	d103      	bne.n	800c550 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800c548:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c54a:	f000 fbe1 	bl	800cd10 <vPortFree>
 800c54e:	e00a      	b.n	800c566 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c552:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c556:	f023 0301 	bic.w	r3, r3, #1
 800c55a:	b2da      	uxtb	r2, r3
 800c55c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c55e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c562:	e000      	b.n	800c566 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800c564:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c566:	4b08      	ldr	r3, [pc, #32]	; (800c588 <prvProcessReceivedCommands+0x1c0>)
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	1d39      	adds	r1, r7, #4
 800c56c:	2200      	movs	r2, #0
 800c56e:	4618      	mov	r0, r3
 800c570:	f7fe f8ea 	bl	800a748 <xQueueReceive>
 800c574:	4603      	mov	r3, r0
 800c576:	2b00      	cmp	r3, #0
 800c578:	f47f af2a 	bne.w	800c3d0 <prvProcessReceivedCommands+0x8>
	}
}
 800c57c:	bf00      	nop
 800c57e:	bf00      	nop
 800c580:	3730      	adds	r7, #48	; 0x30
 800c582:	46bd      	mov	sp, r7
 800c584:	bd80      	pop	{r7, pc}
 800c586:	bf00      	nop
 800c588:	200010c0 	.word	0x200010c0

0800c58c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c58c:	b580      	push	{r7, lr}
 800c58e:	b088      	sub	sp, #32
 800c590:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c592:	e048      	b.n	800c626 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c594:	4b2d      	ldr	r3, [pc, #180]	; (800c64c <prvSwitchTimerLists+0xc0>)
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	68db      	ldr	r3, [r3, #12]
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c59e:	4b2b      	ldr	r3, [pc, #172]	; (800c64c <prvSwitchTimerLists+0xc0>)
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	68db      	ldr	r3, [r3, #12]
 800c5a4:	68db      	ldr	r3, [r3, #12]
 800c5a6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c5a8:	68fb      	ldr	r3, [r7, #12]
 800c5aa:	3304      	adds	r3, #4
 800c5ac:	4618      	mov	r0, r3
 800c5ae:	f7fd fc87 	bl	8009ec0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c5b2:	68fb      	ldr	r3, [r7, #12]
 800c5b4:	6a1b      	ldr	r3, [r3, #32]
 800c5b6:	68f8      	ldr	r0, [r7, #12]
 800c5b8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c5ba:	68fb      	ldr	r3, [r7, #12]
 800c5bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c5c0:	f003 0304 	and.w	r3, r3, #4
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	d02e      	beq.n	800c626 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c5c8:	68fb      	ldr	r3, [r7, #12]
 800c5ca:	699b      	ldr	r3, [r3, #24]
 800c5cc:	693a      	ldr	r2, [r7, #16]
 800c5ce:	4413      	add	r3, r2
 800c5d0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c5d2:	68ba      	ldr	r2, [r7, #8]
 800c5d4:	693b      	ldr	r3, [r7, #16]
 800c5d6:	429a      	cmp	r2, r3
 800c5d8:	d90e      	bls.n	800c5f8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c5da:	68fb      	ldr	r3, [r7, #12]
 800c5dc:	68ba      	ldr	r2, [r7, #8]
 800c5de:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c5e0:	68fb      	ldr	r3, [r7, #12]
 800c5e2:	68fa      	ldr	r2, [r7, #12]
 800c5e4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c5e6:	4b19      	ldr	r3, [pc, #100]	; (800c64c <prvSwitchTimerLists+0xc0>)
 800c5e8:	681a      	ldr	r2, [r3, #0]
 800c5ea:	68fb      	ldr	r3, [r7, #12]
 800c5ec:	3304      	adds	r3, #4
 800c5ee:	4619      	mov	r1, r3
 800c5f0:	4610      	mov	r0, r2
 800c5f2:	f7fd fc2c 	bl	8009e4e <vListInsert>
 800c5f6:	e016      	b.n	800c626 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c5f8:	2300      	movs	r3, #0
 800c5fa:	9300      	str	r3, [sp, #0]
 800c5fc:	2300      	movs	r3, #0
 800c5fe:	693a      	ldr	r2, [r7, #16]
 800c600:	2100      	movs	r1, #0
 800c602:	68f8      	ldr	r0, [r7, #12]
 800c604:	f7ff fd60 	bl	800c0c8 <xTimerGenericCommand>
 800c608:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d10a      	bne.n	800c626 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800c610:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c614:	f383 8811 	msr	BASEPRI, r3
 800c618:	f3bf 8f6f 	isb	sy
 800c61c:	f3bf 8f4f 	dsb	sy
 800c620:	603b      	str	r3, [r7, #0]
}
 800c622:	bf00      	nop
 800c624:	e7fe      	b.n	800c624 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c626:	4b09      	ldr	r3, [pc, #36]	; (800c64c <prvSwitchTimerLists+0xc0>)
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	681b      	ldr	r3, [r3, #0]
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d1b1      	bne.n	800c594 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c630:	4b06      	ldr	r3, [pc, #24]	; (800c64c <prvSwitchTimerLists+0xc0>)
 800c632:	681b      	ldr	r3, [r3, #0]
 800c634:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c636:	4b06      	ldr	r3, [pc, #24]	; (800c650 <prvSwitchTimerLists+0xc4>)
 800c638:	681b      	ldr	r3, [r3, #0]
 800c63a:	4a04      	ldr	r2, [pc, #16]	; (800c64c <prvSwitchTimerLists+0xc0>)
 800c63c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c63e:	4a04      	ldr	r2, [pc, #16]	; (800c650 <prvSwitchTimerLists+0xc4>)
 800c640:	697b      	ldr	r3, [r7, #20]
 800c642:	6013      	str	r3, [r2, #0]
}
 800c644:	bf00      	nop
 800c646:	3718      	adds	r7, #24
 800c648:	46bd      	mov	sp, r7
 800c64a:	bd80      	pop	{r7, pc}
 800c64c:	200010b8 	.word	0x200010b8
 800c650:	200010bc 	.word	0x200010bc

0800c654 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c654:	b580      	push	{r7, lr}
 800c656:	b082      	sub	sp, #8
 800c658:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c65a:	f000 f96b 	bl	800c934 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c65e:	4b15      	ldr	r3, [pc, #84]	; (800c6b4 <prvCheckForValidListAndQueue+0x60>)
 800c660:	681b      	ldr	r3, [r3, #0]
 800c662:	2b00      	cmp	r3, #0
 800c664:	d120      	bne.n	800c6a8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c666:	4814      	ldr	r0, [pc, #80]	; (800c6b8 <prvCheckForValidListAndQueue+0x64>)
 800c668:	f7fd fba0 	bl	8009dac <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c66c:	4813      	ldr	r0, [pc, #76]	; (800c6bc <prvCheckForValidListAndQueue+0x68>)
 800c66e:	f7fd fb9d 	bl	8009dac <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c672:	4b13      	ldr	r3, [pc, #76]	; (800c6c0 <prvCheckForValidListAndQueue+0x6c>)
 800c674:	4a10      	ldr	r2, [pc, #64]	; (800c6b8 <prvCheckForValidListAndQueue+0x64>)
 800c676:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c678:	4b12      	ldr	r3, [pc, #72]	; (800c6c4 <prvCheckForValidListAndQueue+0x70>)
 800c67a:	4a10      	ldr	r2, [pc, #64]	; (800c6bc <prvCheckForValidListAndQueue+0x68>)
 800c67c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c67e:	2300      	movs	r3, #0
 800c680:	9300      	str	r3, [sp, #0]
 800c682:	4b11      	ldr	r3, [pc, #68]	; (800c6c8 <prvCheckForValidListAndQueue+0x74>)
 800c684:	4a11      	ldr	r2, [pc, #68]	; (800c6cc <prvCheckForValidListAndQueue+0x78>)
 800c686:	2110      	movs	r1, #16
 800c688:	200a      	movs	r0, #10
 800c68a:	f7fd fcab 	bl	8009fe4 <xQueueGenericCreateStatic>
 800c68e:	4603      	mov	r3, r0
 800c690:	4a08      	ldr	r2, [pc, #32]	; (800c6b4 <prvCheckForValidListAndQueue+0x60>)
 800c692:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c694:	4b07      	ldr	r3, [pc, #28]	; (800c6b4 <prvCheckForValidListAndQueue+0x60>)
 800c696:	681b      	ldr	r3, [r3, #0]
 800c698:	2b00      	cmp	r3, #0
 800c69a:	d005      	beq.n	800c6a8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c69c:	4b05      	ldr	r3, [pc, #20]	; (800c6b4 <prvCheckForValidListAndQueue+0x60>)
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	490b      	ldr	r1, [pc, #44]	; (800c6d0 <prvCheckForValidListAndQueue+0x7c>)
 800c6a2:	4618      	mov	r0, r3
 800c6a4:	f7fe fc08 	bl	800aeb8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c6a8:	f000 f974 	bl	800c994 <vPortExitCritical>
}
 800c6ac:	bf00      	nop
 800c6ae:	46bd      	mov	sp, r7
 800c6b0:	bd80      	pop	{r7, pc}
 800c6b2:	bf00      	nop
 800c6b4:	200010c0 	.word	0x200010c0
 800c6b8:	20001090 	.word	0x20001090
 800c6bc:	200010a4 	.word	0x200010a4
 800c6c0:	200010b8 	.word	0x200010b8
 800c6c4:	200010bc 	.word	0x200010bc
 800c6c8:	2000116c 	.word	0x2000116c
 800c6cc:	200010cc 	.word	0x200010cc
 800c6d0:	0800d1a8 	.word	0x0800d1a8

0800c6d4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c6d4:	b480      	push	{r7}
 800c6d6:	b085      	sub	sp, #20
 800c6d8:	af00      	add	r7, sp, #0
 800c6da:	60f8      	str	r0, [r7, #12]
 800c6dc:	60b9      	str	r1, [r7, #8]
 800c6de:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c6e0:	68fb      	ldr	r3, [r7, #12]
 800c6e2:	3b04      	subs	r3, #4
 800c6e4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c6e6:	68fb      	ldr	r3, [r7, #12]
 800c6e8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c6ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c6ee:	68fb      	ldr	r3, [r7, #12]
 800c6f0:	3b04      	subs	r3, #4
 800c6f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c6f4:	68bb      	ldr	r3, [r7, #8]
 800c6f6:	f023 0201 	bic.w	r2, r3, #1
 800c6fa:	68fb      	ldr	r3, [r7, #12]
 800c6fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c6fe:	68fb      	ldr	r3, [r7, #12]
 800c700:	3b04      	subs	r3, #4
 800c702:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c704:	4a0c      	ldr	r2, [pc, #48]	; (800c738 <pxPortInitialiseStack+0x64>)
 800c706:	68fb      	ldr	r3, [r7, #12]
 800c708:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c70a:	68fb      	ldr	r3, [r7, #12]
 800c70c:	3b14      	subs	r3, #20
 800c70e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c710:	687a      	ldr	r2, [r7, #4]
 800c712:	68fb      	ldr	r3, [r7, #12]
 800c714:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c716:	68fb      	ldr	r3, [r7, #12]
 800c718:	3b04      	subs	r3, #4
 800c71a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c71c:	68fb      	ldr	r3, [r7, #12]
 800c71e:	f06f 0202 	mvn.w	r2, #2
 800c722:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c724:	68fb      	ldr	r3, [r7, #12]
 800c726:	3b20      	subs	r3, #32
 800c728:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c72a:	68fb      	ldr	r3, [r7, #12]
}
 800c72c:	4618      	mov	r0, r3
 800c72e:	3714      	adds	r7, #20
 800c730:	46bd      	mov	sp, r7
 800c732:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c736:	4770      	bx	lr
 800c738:	0800c73d 	.word	0x0800c73d

0800c73c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c73c:	b480      	push	{r7}
 800c73e:	b085      	sub	sp, #20
 800c740:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c742:	2300      	movs	r3, #0
 800c744:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c746:	4b12      	ldr	r3, [pc, #72]	; (800c790 <prvTaskExitError+0x54>)
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c74e:	d00a      	beq.n	800c766 <prvTaskExitError+0x2a>
	__asm volatile
 800c750:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c754:	f383 8811 	msr	BASEPRI, r3
 800c758:	f3bf 8f6f 	isb	sy
 800c75c:	f3bf 8f4f 	dsb	sy
 800c760:	60fb      	str	r3, [r7, #12]
}
 800c762:	bf00      	nop
 800c764:	e7fe      	b.n	800c764 <prvTaskExitError+0x28>
	__asm volatile
 800c766:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c76a:	f383 8811 	msr	BASEPRI, r3
 800c76e:	f3bf 8f6f 	isb	sy
 800c772:	f3bf 8f4f 	dsb	sy
 800c776:	60bb      	str	r3, [r7, #8]
}
 800c778:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c77a:	bf00      	nop
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	2b00      	cmp	r3, #0
 800c780:	d0fc      	beq.n	800c77c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c782:	bf00      	nop
 800c784:	bf00      	nop
 800c786:	3714      	adds	r7, #20
 800c788:	46bd      	mov	sp, r7
 800c78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c78e:	4770      	bx	lr
 800c790:	2000000c 	.word	0x2000000c
	...

0800c7a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c7a0:	4b07      	ldr	r3, [pc, #28]	; (800c7c0 <pxCurrentTCBConst2>)
 800c7a2:	6819      	ldr	r1, [r3, #0]
 800c7a4:	6808      	ldr	r0, [r1, #0]
 800c7a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7aa:	f380 8809 	msr	PSP, r0
 800c7ae:	f3bf 8f6f 	isb	sy
 800c7b2:	f04f 0000 	mov.w	r0, #0
 800c7b6:	f380 8811 	msr	BASEPRI, r0
 800c7ba:	4770      	bx	lr
 800c7bc:	f3af 8000 	nop.w

0800c7c0 <pxCurrentTCBConst2>:
 800c7c0:	20000b90 	.word	0x20000b90
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c7c4:	bf00      	nop
 800c7c6:	bf00      	nop

0800c7c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c7c8:	4808      	ldr	r0, [pc, #32]	; (800c7ec <prvPortStartFirstTask+0x24>)
 800c7ca:	6800      	ldr	r0, [r0, #0]
 800c7cc:	6800      	ldr	r0, [r0, #0]
 800c7ce:	f380 8808 	msr	MSP, r0
 800c7d2:	f04f 0000 	mov.w	r0, #0
 800c7d6:	f380 8814 	msr	CONTROL, r0
 800c7da:	b662      	cpsie	i
 800c7dc:	b661      	cpsie	f
 800c7de:	f3bf 8f4f 	dsb	sy
 800c7e2:	f3bf 8f6f 	isb	sy
 800c7e6:	df00      	svc	0
 800c7e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c7ea:	bf00      	nop
 800c7ec:	e000ed08 	.word	0xe000ed08

0800c7f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c7f0:	b580      	push	{r7, lr}
 800c7f2:	b086      	sub	sp, #24
 800c7f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c7f6:	4b46      	ldr	r3, [pc, #280]	; (800c910 <xPortStartScheduler+0x120>)
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	4a46      	ldr	r2, [pc, #280]	; (800c914 <xPortStartScheduler+0x124>)
 800c7fc:	4293      	cmp	r3, r2
 800c7fe:	d10a      	bne.n	800c816 <xPortStartScheduler+0x26>
	__asm volatile
 800c800:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c804:	f383 8811 	msr	BASEPRI, r3
 800c808:	f3bf 8f6f 	isb	sy
 800c80c:	f3bf 8f4f 	dsb	sy
 800c810:	613b      	str	r3, [r7, #16]
}
 800c812:	bf00      	nop
 800c814:	e7fe      	b.n	800c814 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c816:	4b3e      	ldr	r3, [pc, #248]	; (800c910 <xPortStartScheduler+0x120>)
 800c818:	681b      	ldr	r3, [r3, #0]
 800c81a:	4a3f      	ldr	r2, [pc, #252]	; (800c918 <xPortStartScheduler+0x128>)
 800c81c:	4293      	cmp	r3, r2
 800c81e:	d10a      	bne.n	800c836 <xPortStartScheduler+0x46>
	__asm volatile
 800c820:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c824:	f383 8811 	msr	BASEPRI, r3
 800c828:	f3bf 8f6f 	isb	sy
 800c82c:	f3bf 8f4f 	dsb	sy
 800c830:	60fb      	str	r3, [r7, #12]
}
 800c832:	bf00      	nop
 800c834:	e7fe      	b.n	800c834 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c836:	4b39      	ldr	r3, [pc, #228]	; (800c91c <xPortStartScheduler+0x12c>)
 800c838:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c83a:	697b      	ldr	r3, [r7, #20]
 800c83c:	781b      	ldrb	r3, [r3, #0]
 800c83e:	b2db      	uxtb	r3, r3
 800c840:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c842:	697b      	ldr	r3, [r7, #20]
 800c844:	22ff      	movs	r2, #255	; 0xff
 800c846:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c848:	697b      	ldr	r3, [r7, #20]
 800c84a:	781b      	ldrb	r3, [r3, #0]
 800c84c:	b2db      	uxtb	r3, r3
 800c84e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c850:	78fb      	ldrb	r3, [r7, #3]
 800c852:	b2db      	uxtb	r3, r3
 800c854:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c858:	b2da      	uxtb	r2, r3
 800c85a:	4b31      	ldr	r3, [pc, #196]	; (800c920 <xPortStartScheduler+0x130>)
 800c85c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c85e:	4b31      	ldr	r3, [pc, #196]	; (800c924 <xPortStartScheduler+0x134>)
 800c860:	2207      	movs	r2, #7
 800c862:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c864:	e009      	b.n	800c87a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800c866:	4b2f      	ldr	r3, [pc, #188]	; (800c924 <xPortStartScheduler+0x134>)
 800c868:	681b      	ldr	r3, [r3, #0]
 800c86a:	3b01      	subs	r3, #1
 800c86c:	4a2d      	ldr	r2, [pc, #180]	; (800c924 <xPortStartScheduler+0x134>)
 800c86e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c870:	78fb      	ldrb	r3, [r7, #3]
 800c872:	b2db      	uxtb	r3, r3
 800c874:	005b      	lsls	r3, r3, #1
 800c876:	b2db      	uxtb	r3, r3
 800c878:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c87a:	78fb      	ldrb	r3, [r7, #3]
 800c87c:	b2db      	uxtb	r3, r3
 800c87e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c882:	2b80      	cmp	r3, #128	; 0x80
 800c884:	d0ef      	beq.n	800c866 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c886:	4b27      	ldr	r3, [pc, #156]	; (800c924 <xPortStartScheduler+0x134>)
 800c888:	681b      	ldr	r3, [r3, #0]
 800c88a:	f1c3 0307 	rsb	r3, r3, #7
 800c88e:	2b04      	cmp	r3, #4
 800c890:	d00a      	beq.n	800c8a8 <xPortStartScheduler+0xb8>
	__asm volatile
 800c892:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c896:	f383 8811 	msr	BASEPRI, r3
 800c89a:	f3bf 8f6f 	isb	sy
 800c89e:	f3bf 8f4f 	dsb	sy
 800c8a2:	60bb      	str	r3, [r7, #8]
}
 800c8a4:	bf00      	nop
 800c8a6:	e7fe      	b.n	800c8a6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c8a8:	4b1e      	ldr	r3, [pc, #120]	; (800c924 <xPortStartScheduler+0x134>)
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	021b      	lsls	r3, r3, #8
 800c8ae:	4a1d      	ldr	r2, [pc, #116]	; (800c924 <xPortStartScheduler+0x134>)
 800c8b0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c8b2:	4b1c      	ldr	r3, [pc, #112]	; (800c924 <xPortStartScheduler+0x134>)
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c8ba:	4a1a      	ldr	r2, [pc, #104]	; (800c924 <xPortStartScheduler+0x134>)
 800c8bc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	b2da      	uxtb	r2, r3
 800c8c2:	697b      	ldr	r3, [r7, #20]
 800c8c4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c8c6:	4b18      	ldr	r3, [pc, #96]	; (800c928 <xPortStartScheduler+0x138>)
 800c8c8:	681b      	ldr	r3, [r3, #0]
 800c8ca:	4a17      	ldr	r2, [pc, #92]	; (800c928 <xPortStartScheduler+0x138>)
 800c8cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c8d0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c8d2:	4b15      	ldr	r3, [pc, #84]	; (800c928 <xPortStartScheduler+0x138>)
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	4a14      	ldr	r2, [pc, #80]	; (800c928 <xPortStartScheduler+0x138>)
 800c8d8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c8dc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c8de:	f000 f8dd 	bl	800ca9c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c8e2:	4b12      	ldr	r3, [pc, #72]	; (800c92c <xPortStartScheduler+0x13c>)
 800c8e4:	2200      	movs	r2, #0
 800c8e6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c8e8:	f000 f8fc 	bl	800cae4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c8ec:	4b10      	ldr	r3, [pc, #64]	; (800c930 <xPortStartScheduler+0x140>)
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	4a0f      	ldr	r2, [pc, #60]	; (800c930 <xPortStartScheduler+0x140>)
 800c8f2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c8f6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c8f8:	f7ff ff66 	bl	800c7c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c8fc:	f7fe ff48 	bl	800b790 <vTaskSwitchContext>
	prvTaskExitError();
 800c900:	f7ff ff1c 	bl	800c73c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c904:	2300      	movs	r3, #0
}
 800c906:	4618      	mov	r0, r3
 800c908:	3718      	adds	r7, #24
 800c90a:	46bd      	mov	sp, r7
 800c90c:	bd80      	pop	{r7, pc}
 800c90e:	bf00      	nop
 800c910:	e000ed00 	.word	0xe000ed00
 800c914:	410fc271 	.word	0x410fc271
 800c918:	410fc270 	.word	0x410fc270
 800c91c:	e000e400 	.word	0xe000e400
 800c920:	200011bc 	.word	0x200011bc
 800c924:	200011c0 	.word	0x200011c0
 800c928:	e000ed20 	.word	0xe000ed20
 800c92c:	2000000c 	.word	0x2000000c
 800c930:	e000ef34 	.word	0xe000ef34

0800c934 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c934:	b480      	push	{r7}
 800c936:	b083      	sub	sp, #12
 800c938:	af00      	add	r7, sp, #0
	__asm volatile
 800c93a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c93e:	f383 8811 	msr	BASEPRI, r3
 800c942:	f3bf 8f6f 	isb	sy
 800c946:	f3bf 8f4f 	dsb	sy
 800c94a:	607b      	str	r3, [r7, #4]
}
 800c94c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c94e:	4b0f      	ldr	r3, [pc, #60]	; (800c98c <vPortEnterCritical+0x58>)
 800c950:	681b      	ldr	r3, [r3, #0]
 800c952:	3301      	adds	r3, #1
 800c954:	4a0d      	ldr	r2, [pc, #52]	; (800c98c <vPortEnterCritical+0x58>)
 800c956:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c958:	4b0c      	ldr	r3, [pc, #48]	; (800c98c <vPortEnterCritical+0x58>)
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	2b01      	cmp	r3, #1
 800c95e:	d10f      	bne.n	800c980 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c960:	4b0b      	ldr	r3, [pc, #44]	; (800c990 <vPortEnterCritical+0x5c>)
 800c962:	681b      	ldr	r3, [r3, #0]
 800c964:	b2db      	uxtb	r3, r3
 800c966:	2b00      	cmp	r3, #0
 800c968:	d00a      	beq.n	800c980 <vPortEnterCritical+0x4c>
	__asm volatile
 800c96a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c96e:	f383 8811 	msr	BASEPRI, r3
 800c972:	f3bf 8f6f 	isb	sy
 800c976:	f3bf 8f4f 	dsb	sy
 800c97a:	603b      	str	r3, [r7, #0]
}
 800c97c:	bf00      	nop
 800c97e:	e7fe      	b.n	800c97e <vPortEnterCritical+0x4a>
	}
}
 800c980:	bf00      	nop
 800c982:	370c      	adds	r7, #12
 800c984:	46bd      	mov	sp, r7
 800c986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c98a:	4770      	bx	lr
 800c98c:	2000000c 	.word	0x2000000c
 800c990:	e000ed04 	.word	0xe000ed04

0800c994 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c994:	b480      	push	{r7}
 800c996:	b083      	sub	sp, #12
 800c998:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c99a:	4b12      	ldr	r3, [pc, #72]	; (800c9e4 <vPortExitCritical+0x50>)
 800c99c:	681b      	ldr	r3, [r3, #0]
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d10a      	bne.n	800c9b8 <vPortExitCritical+0x24>
	__asm volatile
 800c9a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9a6:	f383 8811 	msr	BASEPRI, r3
 800c9aa:	f3bf 8f6f 	isb	sy
 800c9ae:	f3bf 8f4f 	dsb	sy
 800c9b2:	607b      	str	r3, [r7, #4]
}
 800c9b4:	bf00      	nop
 800c9b6:	e7fe      	b.n	800c9b6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c9b8:	4b0a      	ldr	r3, [pc, #40]	; (800c9e4 <vPortExitCritical+0x50>)
 800c9ba:	681b      	ldr	r3, [r3, #0]
 800c9bc:	3b01      	subs	r3, #1
 800c9be:	4a09      	ldr	r2, [pc, #36]	; (800c9e4 <vPortExitCritical+0x50>)
 800c9c0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c9c2:	4b08      	ldr	r3, [pc, #32]	; (800c9e4 <vPortExitCritical+0x50>)
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	d105      	bne.n	800c9d6 <vPortExitCritical+0x42>
 800c9ca:	2300      	movs	r3, #0
 800c9cc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c9ce:	683b      	ldr	r3, [r7, #0]
 800c9d0:	f383 8811 	msr	BASEPRI, r3
}
 800c9d4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c9d6:	bf00      	nop
 800c9d8:	370c      	adds	r7, #12
 800c9da:	46bd      	mov	sp, r7
 800c9dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9e0:	4770      	bx	lr
 800c9e2:	bf00      	nop
 800c9e4:	2000000c 	.word	0x2000000c
	...

0800c9f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c9f0:	f3ef 8009 	mrs	r0, PSP
 800c9f4:	f3bf 8f6f 	isb	sy
 800c9f8:	4b15      	ldr	r3, [pc, #84]	; (800ca50 <pxCurrentTCBConst>)
 800c9fa:	681a      	ldr	r2, [r3, #0]
 800c9fc:	f01e 0f10 	tst.w	lr, #16
 800ca00:	bf08      	it	eq
 800ca02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ca06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca0a:	6010      	str	r0, [r2, #0]
 800ca0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ca10:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ca14:	f380 8811 	msr	BASEPRI, r0
 800ca18:	f3bf 8f4f 	dsb	sy
 800ca1c:	f3bf 8f6f 	isb	sy
 800ca20:	f7fe feb6 	bl	800b790 <vTaskSwitchContext>
 800ca24:	f04f 0000 	mov.w	r0, #0
 800ca28:	f380 8811 	msr	BASEPRI, r0
 800ca2c:	bc09      	pop	{r0, r3}
 800ca2e:	6819      	ldr	r1, [r3, #0]
 800ca30:	6808      	ldr	r0, [r1, #0]
 800ca32:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca36:	f01e 0f10 	tst.w	lr, #16
 800ca3a:	bf08      	it	eq
 800ca3c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ca40:	f380 8809 	msr	PSP, r0
 800ca44:	f3bf 8f6f 	isb	sy
 800ca48:	4770      	bx	lr
 800ca4a:	bf00      	nop
 800ca4c:	f3af 8000 	nop.w

0800ca50 <pxCurrentTCBConst>:
 800ca50:	20000b90 	.word	0x20000b90
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ca54:	bf00      	nop
 800ca56:	bf00      	nop

0800ca58 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ca58:	b580      	push	{r7, lr}
 800ca5a:	b082      	sub	sp, #8
 800ca5c:	af00      	add	r7, sp, #0
	__asm volatile
 800ca5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca62:	f383 8811 	msr	BASEPRI, r3
 800ca66:	f3bf 8f6f 	isb	sy
 800ca6a:	f3bf 8f4f 	dsb	sy
 800ca6e:	607b      	str	r3, [r7, #4]
}
 800ca70:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ca72:	f7fe fdd3 	bl	800b61c <xTaskIncrementTick>
 800ca76:	4603      	mov	r3, r0
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	d003      	beq.n	800ca84 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ca7c:	4b06      	ldr	r3, [pc, #24]	; (800ca98 <xPortSysTickHandler+0x40>)
 800ca7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ca82:	601a      	str	r2, [r3, #0]
 800ca84:	2300      	movs	r3, #0
 800ca86:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ca88:	683b      	ldr	r3, [r7, #0]
 800ca8a:	f383 8811 	msr	BASEPRI, r3
}
 800ca8e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ca90:	bf00      	nop
 800ca92:	3708      	adds	r7, #8
 800ca94:	46bd      	mov	sp, r7
 800ca96:	bd80      	pop	{r7, pc}
 800ca98:	e000ed04 	.word	0xe000ed04

0800ca9c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ca9c:	b480      	push	{r7}
 800ca9e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800caa0:	4b0b      	ldr	r3, [pc, #44]	; (800cad0 <vPortSetupTimerInterrupt+0x34>)
 800caa2:	2200      	movs	r2, #0
 800caa4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800caa6:	4b0b      	ldr	r3, [pc, #44]	; (800cad4 <vPortSetupTimerInterrupt+0x38>)
 800caa8:	2200      	movs	r2, #0
 800caaa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800caac:	4b0a      	ldr	r3, [pc, #40]	; (800cad8 <vPortSetupTimerInterrupt+0x3c>)
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	4a0a      	ldr	r2, [pc, #40]	; (800cadc <vPortSetupTimerInterrupt+0x40>)
 800cab2:	fba2 2303 	umull	r2, r3, r2, r3
 800cab6:	099b      	lsrs	r3, r3, #6
 800cab8:	4a09      	ldr	r2, [pc, #36]	; (800cae0 <vPortSetupTimerInterrupt+0x44>)
 800caba:	3b01      	subs	r3, #1
 800cabc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800cabe:	4b04      	ldr	r3, [pc, #16]	; (800cad0 <vPortSetupTimerInterrupt+0x34>)
 800cac0:	2207      	movs	r2, #7
 800cac2:	601a      	str	r2, [r3, #0]
}
 800cac4:	bf00      	nop
 800cac6:	46bd      	mov	sp, r7
 800cac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cacc:	4770      	bx	lr
 800cace:	bf00      	nop
 800cad0:	e000e010 	.word	0xe000e010
 800cad4:	e000e018 	.word	0xe000e018
 800cad8:	20000000 	.word	0x20000000
 800cadc:	10624dd3 	.word	0x10624dd3
 800cae0:	e000e014 	.word	0xe000e014

0800cae4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800cae4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800caf4 <vPortEnableVFP+0x10>
 800cae8:	6801      	ldr	r1, [r0, #0]
 800caea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800caee:	6001      	str	r1, [r0, #0]
 800caf0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800caf2:	bf00      	nop
 800caf4:	e000ed88 	.word	0xe000ed88

0800caf8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800caf8:	b480      	push	{r7}
 800cafa:	b085      	sub	sp, #20
 800cafc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800cafe:	f3ef 8305 	mrs	r3, IPSR
 800cb02:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800cb04:	68fb      	ldr	r3, [r7, #12]
 800cb06:	2b0f      	cmp	r3, #15
 800cb08:	d914      	bls.n	800cb34 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800cb0a:	4a17      	ldr	r2, [pc, #92]	; (800cb68 <vPortValidateInterruptPriority+0x70>)
 800cb0c:	68fb      	ldr	r3, [r7, #12]
 800cb0e:	4413      	add	r3, r2
 800cb10:	781b      	ldrb	r3, [r3, #0]
 800cb12:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800cb14:	4b15      	ldr	r3, [pc, #84]	; (800cb6c <vPortValidateInterruptPriority+0x74>)
 800cb16:	781b      	ldrb	r3, [r3, #0]
 800cb18:	7afa      	ldrb	r2, [r7, #11]
 800cb1a:	429a      	cmp	r2, r3
 800cb1c:	d20a      	bcs.n	800cb34 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800cb1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb22:	f383 8811 	msr	BASEPRI, r3
 800cb26:	f3bf 8f6f 	isb	sy
 800cb2a:	f3bf 8f4f 	dsb	sy
 800cb2e:	607b      	str	r3, [r7, #4]
}
 800cb30:	bf00      	nop
 800cb32:	e7fe      	b.n	800cb32 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800cb34:	4b0e      	ldr	r3, [pc, #56]	; (800cb70 <vPortValidateInterruptPriority+0x78>)
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800cb3c:	4b0d      	ldr	r3, [pc, #52]	; (800cb74 <vPortValidateInterruptPriority+0x7c>)
 800cb3e:	681b      	ldr	r3, [r3, #0]
 800cb40:	429a      	cmp	r2, r3
 800cb42:	d90a      	bls.n	800cb5a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800cb44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb48:	f383 8811 	msr	BASEPRI, r3
 800cb4c:	f3bf 8f6f 	isb	sy
 800cb50:	f3bf 8f4f 	dsb	sy
 800cb54:	603b      	str	r3, [r7, #0]
}
 800cb56:	bf00      	nop
 800cb58:	e7fe      	b.n	800cb58 <vPortValidateInterruptPriority+0x60>
	}
 800cb5a:	bf00      	nop
 800cb5c:	3714      	adds	r7, #20
 800cb5e:	46bd      	mov	sp, r7
 800cb60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb64:	4770      	bx	lr
 800cb66:	bf00      	nop
 800cb68:	e000e3f0 	.word	0xe000e3f0
 800cb6c:	200011bc 	.word	0x200011bc
 800cb70:	e000ed0c 	.word	0xe000ed0c
 800cb74:	200011c0 	.word	0x200011c0

0800cb78 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800cb78:	b580      	push	{r7, lr}
 800cb7a:	b08a      	sub	sp, #40	; 0x28
 800cb7c:	af00      	add	r7, sp, #0
 800cb7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800cb80:	2300      	movs	r3, #0
 800cb82:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800cb84:	f7fe fc7c 	bl	800b480 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800cb88:	4b5b      	ldr	r3, [pc, #364]	; (800ccf8 <pvPortMalloc+0x180>)
 800cb8a:	681b      	ldr	r3, [r3, #0]
 800cb8c:	2b00      	cmp	r3, #0
 800cb8e:	d101      	bne.n	800cb94 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800cb90:	f000 f920 	bl	800cdd4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800cb94:	4b59      	ldr	r3, [pc, #356]	; (800ccfc <pvPortMalloc+0x184>)
 800cb96:	681a      	ldr	r2, [r3, #0]
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	4013      	ands	r3, r2
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	f040 8093 	bne.w	800ccc8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	d01d      	beq.n	800cbe4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800cba8:	2208      	movs	r2, #8
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	4413      	add	r3, r2
 800cbae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	f003 0307 	and.w	r3, r3, #7
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	d014      	beq.n	800cbe4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	f023 0307 	bic.w	r3, r3, #7
 800cbc0:	3308      	adds	r3, #8
 800cbc2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	f003 0307 	and.w	r3, r3, #7
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	d00a      	beq.n	800cbe4 <pvPortMalloc+0x6c>
	__asm volatile
 800cbce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbd2:	f383 8811 	msr	BASEPRI, r3
 800cbd6:	f3bf 8f6f 	isb	sy
 800cbda:	f3bf 8f4f 	dsb	sy
 800cbde:	617b      	str	r3, [r7, #20]
}
 800cbe0:	bf00      	nop
 800cbe2:	e7fe      	b.n	800cbe2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	d06e      	beq.n	800ccc8 <pvPortMalloc+0x150>
 800cbea:	4b45      	ldr	r3, [pc, #276]	; (800cd00 <pvPortMalloc+0x188>)
 800cbec:	681b      	ldr	r3, [r3, #0]
 800cbee:	687a      	ldr	r2, [r7, #4]
 800cbf0:	429a      	cmp	r2, r3
 800cbf2:	d869      	bhi.n	800ccc8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800cbf4:	4b43      	ldr	r3, [pc, #268]	; (800cd04 <pvPortMalloc+0x18c>)
 800cbf6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800cbf8:	4b42      	ldr	r3, [pc, #264]	; (800cd04 <pvPortMalloc+0x18c>)
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cbfe:	e004      	b.n	800cc0a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800cc00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc02:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800cc04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc06:	681b      	ldr	r3, [r3, #0]
 800cc08:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cc0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc0c:	685b      	ldr	r3, [r3, #4]
 800cc0e:	687a      	ldr	r2, [r7, #4]
 800cc10:	429a      	cmp	r2, r3
 800cc12:	d903      	bls.n	800cc1c <pvPortMalloc+0xa4>
 800cc14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	d1f1      	bne.n	800cc00 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800cc1c:	4b36      	ldr	r3, [pc, #216]	; (800ccf8 <pvPortMalloc+0x180>)
 800cc1e:	681b      	ldr	r3, [r3, #0]
 800cc20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cc22:	429a      	cmp	r2, r3
 800cc24:	d050      	beq.n	800ccc8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800cc26:	6a3b      	ldr	r3, [r7, #32]
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	2208      	movs	r2, #8
 800cc2c:	4413      	add	r3, r2
 800cc2e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800cc30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc32:	681a      	ldr	r2, [r3, #0]
 800cc34:	6a3b      	ldr	r3, [r7, #32]
 800cc36:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800cc38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc3a:	685a      	ldr	r2, [r3, #4]
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	1ad2      	subs	r2, r2, r3
 800cc40:	2308      	movs	r3, #8
 800cc42:	005b      	lsls	r3, r3, #1
 800cc44:	429a      	cmp	r2, r3
 800cc46:	d91f      	bls.n	800cc88 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800cc48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	4413      	add	r3, r2
 800cc4e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cc50:	69bb      	ldr	r3, [r7, #24]
 800cc52:	f003 0307 	and.w	r3, r3, #7
 800cc56:	2b00      	cmp	r3, #0
 800cc58:	d00a      	beq.n	800cc70 <pvPortMalloc+0xf8>
	__asm volatile
 800cc5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc5e:	f383 8811 	msr	BASEPRI, r3
 800cc62:	f3bf 8f6f 	isb	sy
 800cc66:	f3bf 8f4f 	dsb	sy
 800cc6a:	613b      	str	r3, [r7, #16]
}
 800cc6c:	bf00      	nop
 800cc6e:	e7fe      	b.n	800cc6e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800cc70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc72:	685a      	ldr	r2, [r3, #4]
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	1ad2      	subs	r2, r2, r3
 800cc78:	69bb      	ldr	r3, [r7, #24]
 800cc7a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800cc7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc7e:	687a      	ldr	r2, [r7, #4]
 800cc80:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800cc82:	69b8      	ldr	r0, [r7, #24]
 800cc84:	f000 f908 	bl	800ce98 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800cc88:	4b1d      	ldr	r3, [pc, #116]	; (800cd00 <pvPortMalloc+0x188>)
 800cc8a:	681a      	ldr	r2, [r3, #0]
 800cc8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc8e:	685b      	ldr	r3, [r3, #4]
 800cc90:	1ad3      	subs	r3, r2, r3
 800cc92:	4a1b      	ldr	r2, [pc, #108]	; (800cd00 <pvPortMalloc+0x188>)
 800cc94:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800cc96:	4b1a      	ldr	r3, [pc, #104]	; (800cd00 <pvPortMalloc+0x188>)
 800cc98:	681a      	ldr	r2, [r3, #0]
 800cc9a:	4b1b      	ldr	r3, [pc, #108]	; (800cd08 <pvPortMalloc+0x190>)
 800cc9c:	681b      	ldr	r3, [r3, #0]
 800cc9e:	429a      	cmp	r2, r3
 800cca0:	d203      	bcs.n	800ccaa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800cca2:	4b17      	ldr	r3, [pc, #92]	; (800cd00 <pvPortMalloc+0x188>)
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	4a18      	ldr	r2, [pc, #96]	; (800cd08 <pvPortMalloc+0x190>)
 800cca8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ccaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccac:	685a      	ldr	r2, [r3, #4]
 800ccae:	4b13      	ldr	r3, [pc, #76]	; (800ccfc <pvPortMalloc+0x184>)
 800ccb0:	681b      	ldr	r3, [r3, #0]
 800ccb2:	431a      	orrs	r2, r3
 800ccb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccb6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ccb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccba:	2200      	movs	r2, #0
 800ccbc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800ccbe:	4b13      	ldr	r3, [pc, #76]	; (800cd0c <pvPortMalloc+0x194>)
 800ccc0:	681b      	ldr	r3, [r3, #0]
 800ccc2:	3301      	adds	r3, #1
 800ccc4:	4a11      	ldr	r2, [pc, #68]	; (800cd0c <pvPortMalloc+0x194>)
 800ccc6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ccc8:	f7fe fbe8 	bl	800b49c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800cccc:	69fb      	ldr	r3, [r7, #28]
 800ccce:	f003 0307 	and.w	r3, r3, #7
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	d00a      	beq.n	800ccec <pvPortMalloc+0x174>
	__asm volatile
 800ccd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccda:	f383 8811 	msr	BASEPRI, r3
 800ccde:	f3bf 8f6f 	isb	sy
 800cce2:	f3bf 8f4f 	dsb	sy
 800cce6:	60fb      	str	r3, [r7, #12]
}
 800cce8:	bf00      	nop
 800ccea:	e7fe      	b.n	800ccea <pvPortMalloc+0x172>
	return pvReturn;
 800ccec:	69fb      	ldr	r3, [r7, #28]
}
 800ccee:	4618      	mov	r0, r3
 800ccf0:	3728      	adds	r7, #40	; 0x28
 800ccf2:	46bd      	mov	sp, r7
 800ccf4:	bd80      	pop	{r7, pc}
 800ccf6:	bf00      	nop
 800ccf8:	20001d84 	.word	0x20001d84
 800ccfc:	20001d98 	.word	0x20001d98
 800cd00:	20001d88 	.word	0x20001d88
 800cd04:	20001d7c 	.word	0x20001d7c
 800cd08:	20001d8c 	.word	0x20001d8c
 800cd0c:	20001d90 	.word	0x20001d90

0800cd10 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800cd10:	b580      	push	{r7, lr}
 800cd12:	b086      	sub	sp, #24
 800cd14:	af00      	add	r7, sp, #0
 800cd16:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d04d      	beq.n	800cdbe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800cd22:	2308      	movs	r3, #8
 800cd24:	425b      	negs	r3, r3
 800cd26:	697a      	ldr	r2, [r7, #20]
 800cd28:	4413      	add	r3, r2
 800cd2a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800cd2c:	697b      	ldr	r3, [r7, #20]
 800cd2e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800cd30:	693b      	ldr	r3, [r7, #16]
 800cd32:	685a      	ldr	r2, [r3, #4]
 800cd34:	4b24      	ldr	r3, [pc, #144]	; (800cdc8 <vPortFree+0xb8>)
 800cd36:	681b      	ldr	r3, [r3, #0]
 800cd38:	4013      	ands	r3, r2
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	d10a      	bne.n	800cd54 <vPortFree+0x44>
	__asm volatile
 800cd3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd42:	f383 8811 	msr	BASEPRI, r3
 800cd46:	f3bf 8f6f 	isb	sy
 800cd4a:	f3bf 8f4f 	dsb	sy
 800cd4e:	60fb      	str	r3, [r7, #12]
}
 800cd50:	bf00      	nop
 800cd52:	e7fe      	b.n	800cd52 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800cd54:	693b      	ldr	r3, [r7, #16]
 800cd56:	681b      	ldr	r3, [r3, #0]
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	d00a      	beq.n	800cd72 <vPortFree+0x62>
	__asm volatile
 800cd5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd60:	f383 8811 	msr	BASEPRI, r3
 800cd64:	f3bf 8f6f 	isb	sy
 800cd68:	f3bf 8f4f 	dsb	sy
 800cd6c:	60bb      	str	r3, [r7, #8]
}
 800cd6e:	bf00      	nop
 800cd70:	e7fe      	b.n	800cd70 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800cd72:	693b      	ldr	r3, [r7, #16]
 800cd74:	685a      	ldr	r2, [r3, #4]
 800cd76:	4b14      	ldr	r3, [pc, #80]	; (800cdc8 <vPortFree+0xb8>)
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	4013      	ands	r3, r2
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	d01e      	beq.n	800cdbe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800cd80:	693b      	ldr	r3, [r7, #16]
 800cd82:	681b      	ldr	r3, [r3, #0]
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	d11a      	bne.n	800cdbe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800cd88:	693b      	ldr	r3, [r7, #16]
 800cd8a:	685a      	ldr	r2, [r3, #4]
 800cd8c:	4b0e      	ldr	r3, [pc, #56]	; (800cdc8 <vPortFree+0xb8>)
 800cd8e:	681b      	ldr	r3, [r3, #0]
 800cd90:	43db      	mvns	r3, r3
 800cd92:	401a      	ands	r2, r3
 800cd94:	693b      	ldr	r3, [r7, #16]
 800cd96:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800cd98:	f7fe fb72 	bl	800b480 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800cd9c:	693b      	ldr	r3, [r7, #16]
 800cd9e:	685a      	ldr	r2, [r3, #4]
 800cda0:	4b0a      	ldr	r3, [pc, #40]	; (800cdcc <vPortFree+0xbc>)
 800cda2:	681b      	ldr	r3, [r3, #0]
 800cda4:	4413      	add	r3, r2
 800cda6:	4a09      	ldr	r2, [pc, #36]	; (800cdcc <vPortFree+0xbc>)
 800cda8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800cdaa:	6938      	ldr	r0, [r7, #16]
 800cdac:	f000 f874 	bl	800ce98 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800cdb0:	4b07      	ldr	r3, [pc, #28]	; (800cdd0 <vPortFree+0xc0>)
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	3301      	adds	r3, #1
 800cdb6:	4a06      	ldr	r2, [pc, #24]	; (800cdd0 <vPortFree+0xc0>)
 800cdb8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800cdba:	f7fe fb6f 	bl	800b49c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800cdbe:	bf00      	nop
 800cdc0:	3718      	adds	r7, #24
 800cdc2:	46bd      	mov	sp, r7
 800cdc4:	bd80      	pop	{r7, pc}
 800cdc6:	bf00      	nop
 800cdc8:	20001d98 	.word	0x20001d98
 800cdcc:	20001d88 	.word	0x20001d88
 800cdd0:	20001d94 	.word	0x20001d94

0800cdd4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800cdd4:	b480      	push	{r7}
 800cdd6:	b085      	sub	sp, #20
 800cdd8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800cdda:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800cdde:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800cde0:	4b27      	ldr	r3, [pc, #156]	; (800ce80 <prvHeapInit+0xac>)
 800cde2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800cde4:	68fb      	ldr	r3, [r7, #12]
 800cde6:	f003 0307 	and.w	r3, r3, #7
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	d00c      	beq.n	800ce08 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800cdee:	68fb      	ldr	r3, [r7, #12]
 800cdf0:	3307      	adds	r3, #7
 800cdf2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cdf4:	68fb      	ldr	r3, [r7, #12]
 800cdf6:	f023 0307 	bic.w	r3, r3, #7
 800cdfa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800cdfc:	68ba      	ldr	r2, [r7, #8]
 800cdfe:	68fb      	ldr	r3, [r7, #12]
 800ce00:	1ad3      	subs	r3, r2, r3
 800ce02:	4a1f      	ldr	r2, [pc, #124]	; (800ce80 <prvHeapInit+0xac>)
 800ce04:	4413      	add	r3, r2
 800ce06:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ce08:	68fb      	ldr	r3, [r7, #12]
 800ce0a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ce0c:	4a1d      	ldr	r2, [pc, #116]	; (800ce84 <prvHeapInit+0xb0>)
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ce12:	4b1c      	ldr	r3, [pc, #112]	; (800ce84 <prvHeapInit+0xb0>)
 800ce14:	2200      	movs	r2, #0
 800ce16:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	68ba      	ldr	r2, [r7, #8]
 800ce1c:	4413      	add	r3, r2
 800ce1e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ce20:	2208      	movs	r2, #8
 800ce22:	68fb      	ldr	r3, [r7, #12]
 800ce24:	1a9b      	subs	r3, r3, r2
 800ce26:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ce28:	68fb      	ldr	r3, [r7, #12]
 800ce2a:	f023 0307 	bic.w	r3, r3, #7
 800ce2e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ce30:	68fb      	ldr	r3, [r7, #12]
 800ce32:	4a15      	ldr	r2, [pc, #84]	; (800ce88 <prvHeapInit+0xb4>)
 800ce34:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ce36:	4b14      	ldr	r3, [pc, #80]	; (800ce88 <prvHeapInit+0xb4>)
 800ce38:	681b      	ldr	r3, [r3, #0]
 800ce3a:	2200      	movs	r2, #0
 800ce3c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ce3e:	4b12      	ldr	r3, [pc, #72]	; (800ce88 <prvHeapInit+0xb4>)
 800ce40:	681b      	ldr	r3, [r3, #0]
 800ce42:	2200      	movs	r2, #0
 800ce44:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ce4a:	683b      	ldr	r3, [r7, #0]
 800ce4c:	68fa      	ldr	r2, [r7, #12]
 800ce4e:	1ad2      	subs	r2, r2, r3
 800ce50:	683b      	ldr	r3, [r7, #0]
 800ce52:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ce54:	4b0c      	ldr	r3, [pc, #48]	; (800ce88 <prvHeapInit+0xb4>)
 800ce56:	681a      	ldr	r2, [r3, #0]
 800ce58:	683b      	ldr	r3, [r7, #0]
 800ce5a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ce5c:	683b      	ldr	r3, [r7, #0]
 800ce5e:	685b      	ldr	r3, [r3, #4]
 800ce60:	4a0a      	ldr	r2, [pc, #40]	; (800ce8c <prvHeapInit+0xb8>)
 800ce62:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ce64:	683b      	ldr	r3, [r7, #0]
 800ce66:	685b      	ldr	r3, [r3, #4]
 800ce68:	4a09      	ldr	r2, [pc, #36]	; (800ce90 <prvHeapInit+0xbc>)
 800ce6a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ce6c:	4b09      	ldr	r3, [pc, #36]	; (800ce94 <prvHeapInit+0xc0>)
 800ce6e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ce72:	601a      	str	r2, [r3, #0]
}
 800ce74:	bf00      	nop
 800ce76:	3714      	adds	r7, #20
 800ce78:	46bd      	mov	sp, r7
 800ce7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce7e:	4770      	bx	lr
 800ce80:	200011c4 	.word	0x200011c4
 800ce84:	20001d7c 	.word	0x20001d7c
 800ce88:	20001d84 	.word	0x20001d84
 800ce8c:	20001d8c 	.word	0x20001d8c
 800ce90:	20001d88 	.word	0x20001d88
 800ce94:	20001d98 	.word	0x20001d98

0800ce98 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ce98:	b480      	push	{r7}
 800ce9a:	b085      	sub	sp, #20
 800ce9c:	af00      	add	r7, sp, #0
 800ce9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800cea0:	4b28      	ldr	r3, [pc, #160]	; (800cf44 <prvInsertBlockIntoFreeList+0xac>)
 800cea2:	60fb      	str	r3, [r7, #12]
 800cea4:	e002      	b.n	800ceac <prvInsertBlockIntoFreeList+0x14>
 800cea6:	68fb      	ldr	r3, [r7, #12]
 800cea8:	681b      	ldr	r3, [r3, #0]
 800ceaa:	60fb      	str	r3, [r7, #12]
 800ceac:	68fb      	ldr	r3, [r7, #12]
 800ceae:	681b      	ldr	r3, [r3, #0]
 800ceb0:	687a      	ldr	r2, [r7, #4]
 800ceb2:	429a      	cmp	r2, r3
 800ceb4:	d8f7      	bhi.n	800cea6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ceb6:	68fb      	ldr	r3, [r7, #12]
 800ceb8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ceba:	68fb      	ldr	r3, [r7, #12]
 800cebc:	685b      	ldr	r3, [r3, #4]
 800cebe:	68ba      	ldr	r2, [r7, #8]
 800cec0:	4413      	add	r3, r2
 800cec2:	687a      	ldr	r2, [r7, #4]
 800cec4:	429a      	cmp	r2, r3
 800cec6:	d108      	bne.n	800ceda <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800cec8:	68fb      	ldr	r3, [r7, #12]
 800ceca:	685a      	ldr	r2, [r3, #4]
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	685b      	ldr	r3, [r3, #4]
 800ced0:	441a      	add	r2, r3
 800ced2:	68fb      	ldr	r3, [r7, #12]
 800ced4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ced6:	68fb      	ldr	r3, [r7, #12]
 800ced8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	685b      	ldr	r3, [r3, #4]
 800cee2:	68ba      	ldr	r2, [r7, #8]
 800cee4:	441a      	add	r2, r3
 800cee6:	68fb      	ldr	r3, [r7, #12]
 800cee8:	681b      	ldr	r3, [r3, #0]
 800ceea:	429a      	cmp	r2, r3
 800ceec:	d118      	bne.n	800cf20 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ceee:	68fb      	ldr	r3, [r7, #12]
 800cef0:	681a      	ldr	r2, [r3, #0]
 800cef2:	4b15      	ldr	r3, [pc, #84]	; (800cf48 <prvInsertBlockIntoFreeList+0xb0>)
 800cef4:	681b      	ldr	r3, [r3, #0]
 800cef6:	429a      	cmp	r2, r3
 800cef8:	d00d      	beq.n	800cf16 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	685a      	ldr	r2, [r3, #4]
 800cefe:	68fb      	ldr	r3, [r7, #12]
 800cf00:	681b      	ldr	r3, [r3, #0]
 800cf02:	685b      	ldr	r3, [r3, #4]
 800cf04:	441a      	add	r2, r3
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800cf0a:	68fb      	ldr	r3, [r7, #12]
 800cf0c:	681b      	ldr	r3, [r3, #0]
 800cf0e:	681a      	ldr	r2, [r3, #0]
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	601a      	str	r2, [r3, #0]
 800cf14:	e008      	b.n	800cf28 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800cf16:	4b0c      	ldr	r3, [pc, #48]	; (800cf48 <prvInsertBlockIntoFreeList+0xb0>)
 800cf18:	681a      	ldr	r2, [r3, #0]
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	601a      	str	r2, [r3, #0]
 800cf1e:	e003      	b.n	800cf28 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800cf20:	68fb      	ldr	r3, [r7, #12]
 800cf22:	681a      	ldr	r2, [r3, #0]
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800cf28:	68fa      	ldr	r2, [r7, #12]
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	429a      	cmp	r2, r3
 800cf2e:	d002      	beq.n	800cf36 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800cf30:	68fb      	ldr	r3, [r7, #12]
 800cf32:	687a      	ldr	r2, [r7, #4]
 800cf34:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cf36:	bf00      	nop
 800cf38:	3714      	adds	r7, #20
 800cf3a:	46bd      	mov	sp, r7
 800cf3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf40:	4770      	bx	lr
 800cf42:	bf00      	nop
 800cf44:	20001d7c 	.word	0x20001d7c
 800cf48:	20001d84 	.word	0x20001d84

0800cf4c <__libc_init_array>:
 800cf4c:	b570      	push	{r4, r5, r6, lr}
 800cf4e:	4d0d      	ldr	r5, [pc, #52]	; (800cf84 <__libc_init_array+0x38>)
 800cf50:	4c0d      	ldr	r4, [pc, #52]	; (800cf88 <__libc_init_array+0x3c>)
 800cf52:	1b64      	subs	r4, r4, r5
 800cf54:	10a4      	asrs	r4, r4, #2
 800cf56:	2600      	movs	r6, #0
 800cf58:	42a6      	cmp	r6, r4
 800cf5a:	d109      	bne.n	800cf70 <__libc_init_array+0x24>
 800cf5c:	4d0b      	ldr	r5, [pc, #44]	; (800cf8c <__libc_init_array+0x40>)
 800cf5e:	4c0c      	ldr	r4, [pc, #48]	; (800cf90 <__libc_init_array+0x44>)
 800cf60:	f000 f8f2 	bl	800d148 <_init>
 800cf64:	1b64      	subs	r4, r4, r5
 800cf66:	10a4      	asrs	r4, r4, #2
 800cf68:	2600      	movs	r6, #0
 800cf6a:	42a6      	cmp	r6, r4
 800cf6c:	d105      	bne.n	800cf7a <__libc_init_array+0x2e>
 800cf6e:	bd70      	pop	{r4, r5, r6, pc}
 800cf70:	f855 3b04 	ldr.w	r3, [r5], #4
 800cf74:	4798      	blx	r3
 800cf76:	3601      	adds	r6, #1
 800cf78:	e7ee      	b.n	800cf58 <__libc_init_array+0xc>
 800cf7a:	f855 3b04 	ldr.w	r3, [r5], #4
 800cf7e:	4798      	blx	r3
 800cf80:	3601      	adds	r6, #1
 800cf82:	e7f2      	b.n	800cf6a <__libc_init_array+0x1e>
 800cf84:	0800d2ec 	.word	0x0800d2ec
 800cf88:	0800d2ec 	.word	0x0800d2ec
 800cf8c:	0800d2ec 	.word	0x0800d2ec
 800cf90:	0800d2f0 	.word	0x0800d2f0

0800cf94 <__retarget_lock_acquire_recursive>:
 800cf94:	4770      	bx	lr

0800cf96 <__retarget_lock_release_recursive>:
 800cf96:	4770      	bx	lr

0800cf98 <memcpy>:
 800cf98:	440a      	add	r2, r1
 800cf9a:	4291      	cmp	r1, r2
 800cf9c:	f100 33ff 	add.w	r3, r0, #4294967295
 800cfa0:	d100      	bne.n	800cfa4 <memcpy+0xc>
 800cfa2:	4770      	bx	lr
 800cfa4:	b510      	push	{r4, lr}
 800cfa6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cfaa:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cfae:	4291      	cmp	r1, r2
 800cfb0:	d1f9      	bne.n	800cfa6 <memcpy+0xe>
 800cfb2:	bd10      	pop	{r4, pc}

0800cfb4 <memset>:
 800cfb4:	4402      	add	r2, r0
 800cfb6:	4603      	mov	r3, r0
 800cfb8:	4293      	cmp	r3, r2
 800cfba:	d100      	bne.n	800cfbe <memset+0xa>
 800cfbc:	4770      	bx	lr
 800cfbe:	f803 1b01 	strb.w	r1, [r3], #1
 800cfc2:	e7f9      	b.n	800cfb8 <memset+0x4>

0800cfc4 <cleanup_glue>:
 800cfc4:	b538      	push	{r3, r4, r5, lr}
 800cfc6:	460c      	mov	r4, r1
 800cfc8:	6809      	ldr	r1, [r1, #0]
 800cfca:	4605      	mov	r5, r0
 800cfcc:	b109      	cbz	r1, 800cfd2 <cleanup_glue+0xe>
 800cfce:	f7ff fff9 	bl	800cfc4 <cleanup_glue>
 800cfd2:	4621      	mov	r1, r4
 800cfd4:	4628      	mov	r0, r5
 800cfd6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cfda:	f000 b869 	b.w	800d0b0 <_free_r>
	...

0800cfe0 <_reclaim_reent>:
 800cfe0:	4b2c      	ldr	r3, [pc, #176]	; (800d094 <_reclaim_reent+0xb4>)
 800cfe2:	681b      	ldr	r3, [r3, #0]
 800cfe4:	4283      	cmp	r3, r0
 800cfe6:	b570      	push	{r4, r5, r6, lr}
 800cfe8:	4604      	mov	r4, r0
 800cfea:	d051      	beq.n	800d090 <_reclaim_reent+0xb0>
 800cfec:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800cfee:	b143      	cbz	r3, 800d002 <_reclaim_reent+0x22>
 800cff0:	68db      	ldr	r3, [r3, #12]
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	d14a      	bne.n	800d08c <_reclaim_reent+0xac>
 800cff6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cff8:	6819      	ldr	r1, [r3, #0]
 800cffa:	b111      	cbz	r1, 800d002 <_reclaim_reent+0x22>
 800cffc:	4620      	mov	r0, r4
 800cffe:	f000 f857 	bl	800d0b0 <_free_r>
 800d002:	6961      	ldr	r1, [r4, #20]
 800d004:	b111      	cbz	r1, 800d00c <_reclaim_reent+0x2c>
 800d006:	4620      	mov	r0, r4
 800d008:	f000 f852 	bl	800d0b0 <_free_r>
 800d00c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800d00e:	b111      	cbz	r1, 800d016 <_reclaim_reent+0x36>
 800d010:	4620      	mov	r0, r4
 800d012:	f000 f84d 	bl	800d0b0 <_free_r>
 800d016:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800d018:	b111      	cbz	r1, 800d020 <_reclaim_reent+0x40>
 800d01a:	4620      	mov	r0, r4
 800d01c:	f000 f848 	bl	800d0b0 <_free_r>
 800d020:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800d022:	b111      	cbz	r1, 800d02a <_reclaim_reent+0x4a>
 800d024:	4620      	mov	r0, r4
 800d026:	f000 f843 	bl	800d0b0 <_free_r>
 800d02a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800d02c:	b111      	cbz	r1, 800d034 <_reclaim_reent+0x54>
 800d02e:	4620      	mov	r0, r4
 800d030:	f000 f83e 	bl	800d0b0 <_free_r>
 800d034:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800d036:	b111      	cbz	r1, 800d03e <_reclaim_reent+0x5e>
 800d038:	4620      	mov	r0, r4
 800d03a:	f000 f839 	bl	800d0b0 <_free_r>
 800d03e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800d040:	b111      	cbz	r1, 800d048 <_reclaim_reent+0x68>
 800d042:	4620      	mov	r0, r4
 800d044:	f000 f834 	bl	800d0b0 <_free_r>
 800d048:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d04a:	b111      	cbz	r1, 800d052 <_reclaim_reent+0x72>
 800d04c:	4620      	mov	r0, r4
 800d04e:	f000 f82f 	bl	800d0b0 <_free_r>
 800d052:	69a3      	ldr	r3, [r4, #24]
 800d054:	b1e3      	cbz	r3, 800d090 <_reclaim_reent+0xb0>
 800d056:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800d058:	4620      	mov	r0, r4
 800d05a:	4798      	blx	r3
 800d05c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800d05e:	b1b9      	cbz	r1, 800d090 <_reclaim_reent+0xb0>
 800d060:	4620      	mov	r0, r4
 800d062:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d066:	f7ff bfad 	b.w	800cfc4 <cleanup_glue>
 800d06a:	5949      	ldr	r1, [r1, r5]
 800d06c:	b941      	cbnz	r1, 800d080 <_reclaim_reent+0xa0>
 800d06e:	3504      	adds	r5, #4
 800d070:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d072:	2d80      	cmp	r5, #128	; 0x80
 800d074:	68d9      	ldr	r1, [r3, #12]
 800d076:	d1f8      	bne.n	800d06a <_reclaim_reent+0x8a>
 800d078:	4620      	mov	r0, r4
 800d07a:	f000 f819 	bl	800d0b0 <_free_r>
 800d07e:	e7ba      	b.n	800cff6 <_reclaim_reent+0x16>
 800d080:	680e      	ldr	r6, [r1, #0]
 800d082:	4620      	mov	r0, r4
 800d084:	f000 f814 	bl	800d0b0 <_free_r>
 800d088:	4631      	mov	r1, r6
 800d08a:	e7ef      	b.n	800d06c <_reclaim_reent+0x8c>
 800d08c:	2500      	movs	r5, #0
 800d08e:	e7ef      	b.n	800d070 <_reclaim_reent+0x90>
 800d090:	bd70      	pop	{r4, r5, r6, pc}
 800d092:	bf00      	nop
 800d094:	20000010 	.word	0x20000010

0800d098 <__malloc_lock>:
 800d098:	4801      	ldr	r0, [pc, #4]	; (800d0a0 <__malloc_lock+0x8>)
 800d09a:	f7ff bf7b 	b.w	800cf94 <__retarget_lock_acquire_recursive>
 800d09e:	bf00      	nop
 800d0a0:	20001d9c 	.word	0x20001d9c

0800d0a4 <__malloc_unlock>:
 800d0a4:	4801      	ldr	r0, [pc, #4]	; (800d0ac <__malloc_unlock+0x8>)
 800d0a6:	f7ff bf76 	b.w	800cf96 <__retarget_lock_release_recursive>
 800d0aa:	bf00      	nop
 800d0ac:	20001d9c 	.word	0x20001d9c

0800d0b0 <_free_r>:
 800d0b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d0b2:	2900      	cmp	r1, #0
 800d0b4:	d044      	beq.n	800d140 <_free_r+0x90>
 800d0b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d0ba:	9001      	str	r0, [sp, #4]
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	f1a1 0404 	sub.w	r4, r1, #4
 800d0c2:	bfb8      	it	lt
 800d0c4:	18e4      	addlt	r4, r4, r3
 800d0c6:	f7ff ffe7 	bl	800d098 <__malloc_lock>
 800d0ca:	4a1e      	ldr	r2, [pc, #120]	; (800d144 <_free_r+0x94>)
 800d0cc:	9801      	ldr	r0, [sp, #4]
 800d0ce:	6813      	ldr	r3, [r2, #0]
 800d0d0:	b933      	cbnz	r3, 800d0e0 <_free_r+0x30>
 800d0d2:	6063      	str	r3, [r4, #4]
 800d0d4:	6014      	str	r4, [r2, #0]
 800d0d6:	b003      	add	sp, #12
 800d0d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d0dc:	f7ff bfe2 	b.w	800d0a4 <__malloc_unlock>
 800d0e0:	42a3      	cmp	r3, r4
 800d0e2:	d908      	bls.n	800d0f6 <_free_r+0x46>
 800d0e4:	6825      	ldr	r5, [r4, #0]
 800d0e6:	1961      	adds	r1, r4, r5
 800d0e8:	428b      	cmp	r3, r1
 800d0ea:	bf01      	itttt	eq
 800d0ec:	6819      	ldreq	r1, [r3, #0]
 800d0ee:	685b      	ldreq	r3, [r3, #4]
 800d0f0:	1949      	addeq	r1, r1, r5
 800d0f2:	6021      	streq	r1, [r4, #0]
 800d0f4:	e7ed      	b.n	800d0d2 <_free_r+0x22>
 800d0f6:	461a      	mov	r2, r3
 800d0f8:	685b      	ldr	r3, [r3, #4]
 800d0fa:	b10b      	cbz	r3, 800d100 <_free_r+0x50>
 800d0fc:	42a3      	cmp	r3, r4
 800d0fe:	d9fa      	bls.n	800d0f6 <_free_r+0x46>
 800d100:	6811      	ldr	r1, [r2, #0]
 800d102:	1855      	adds	r5, r2, r1
 800d104:	42a5      	cmp	r5, r4
 800d106:	d10b      	bne.n	800d120 <_free_r+0x70>
 800d108:	6824      	ldr	r4, [r4, #0]
 800d10a:	4421      	add	r1, r4
 800d10c:	1854      	adds	r4, r2, r1
 800d10e:	42a3      	cmp	r3, r4
 800d110:	6011      	str	r1, [r2, #0]
 800d112:	d1e0      	bne.n	800d0d6 <_free_r+0x26>
 800d114:	681c      	ldr	r4, [r3, #0]
 800d116:	685b      	ldr	r3, [r3, #4]
 800d118:	6053      	str	r3, [r2, #4]
 800d11a:	4421      	add	r1, r4
 800d11c:	6011      	str	r1, [r2, #0]
 800d11e:	e7da      	b.n	800d0d6 <_free_r+0x26>
 800d120:	d902      	bls.n	800d128 <_free_r+0x78>
 800d122:	230c      	movs	r3, #12
 800d124:	6003      	str	r3, [r0, #0]
 800d126:	e7d6      	b.n	800d0d6 <_free_r+0x26>
 800d128:	6825      	ldr	r5, [r4, #0]
 800d12a:	1961      	adds	r1, r4, r5
 800d12c:	428b      	cmp	r3, r1
 800d12e:	bf04      	itt	eq
 800d130:	6819      	ldreq	r1, [r3, #0]
 800d132:	685b      	ldreq	r3, [r3, #4]
 800d134:	6063      	str	r3, [r4, #4]
 800d136:	bf04      	itt	eq
 800d138:	1949      	addeq	r1, r1, r5
 800d13a:	6021      	streq	r1, [r4, #0]
 800d13c:	6054      	str	r4, [r2, #4]
 800d13e:	e7ca      	b.n	800d0d6 <_free_r+0x26>
 800d140:	b003      	add	sp, #12
 800d142:	bd30      	pop	{r4, r5, pc}
 800d144:	20001da0 	.word	0x20001da0

0800d148 <_init>:
 800d148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d14a:	bf00      	nop
 800d14c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d14e:	bc08      	pop	{r3}
 800d150:	469e      	mov	lr, r3
 800d152:	4770      	bx	lr

0800d154 <_fini>:
 800d154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d156:	bf00      	nop
 800d158:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d15a:	bc08      	pop	{r3}
 800d15c:	469e      	mov	lr, r3
 800d15e:	4770      	bx	lr
