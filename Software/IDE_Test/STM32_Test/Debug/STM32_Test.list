
STM32_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cd80  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000018c  0800cf40  0800cf40  0001cf40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d0cc  0800d0cc  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  0800d0cc  0800d0cc  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d0cc  0800d0cc  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d0cc  0800d0cc  0001d0cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d0d0  0800d0d0  0001d0d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800d0d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001d1c  20000074  0800d148  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000c00  20001d90  0800d148  00021d90  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00026cb0  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000050c0  00000000  00000000  00046d54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001f80  00000000  00000000  0004be18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001d58  00000000  00000000  0004dd98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003734d  00000000  00000000  0004faf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00024199  00000000  00000000  00086e3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0014a2d2  00000000  00000000  000aafd6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001f52a8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008778  00000000  00000000  001f52f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000074 	.word	0x20000074
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800cf28 	.word	0x0800cf28

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000078 	.word	0x20000078
 80001fc:	0800cf28 	.word	0x0800cf28

08000200 <ADC_Init>:
  .stack_size = 128 * 4,
  .priority = (osPriority_t) osPriorityNormal,
};

//initialize ADC thread
void ADC_Init(void) {
 8000200:	b580      	push	{r7, lr}
 8000202:	af00      	add	r7, sp, #0
	ADC_semHandle = osSemaphoreNew(1, 1, &ADC_sem_attributes);
 8000204:	4a08      	ldr	r2, [pc, #32]	; (8000228 <ADC_Init+0x28>)
 8000206:	2101      	movs	r1, #1
 8000208:	2001      	movs	r0, #1
 800020a:	f009 fa3f 	bl	800968c <osSemaphoreNew>
 800020e:	4603      	mov	r3, r0
 8000210:	4a06      	ldr	r2, [pc, #24]	; (800022c <ADC_Init+0x2c>)
 8000212:	6013      	str	r3, [r2, #0]
	thr_1 = osThreadNew(ADC_collect, &hadc1, &thr_1_attributes);
 8000214:	4a06      	ldr	r2, [pc, #24]	; (8000230 <ADC_Init+0x30>)
 8000216:	4907      	ldr	r1, [pc, #28]	; (8000234 <ADC_Init+0x34>)
 8000218:	4807      	ldr	r0, [pc, #28]	; (8000238 <ADC_Init+0x38>)
 800021a:	f009 f904 	bl	8009426 <osThreadNew>
 800021e:	4603      	mov	r3, r0
 8000220:	4a06      	ldr	r2, [pc, #24]	; (800023c <ADC_Init+0x3c>)
 8000222:	6013      	str	r3, [r2, #0]

}
 8000224:	bf00      	nop
 8000226:	bd80      	pop	{r7, pc}
 8000228:	0800cf90 	.word	0x0800cf90
 800022c:	200000ac 	.word	0x200000ac
 8000230:	0800cfa0 	.word	0x0800cfa0
 8000234:	2000011c 	.word	0x2000011c
 8000238:	080002b5 	.word	0x080002b5
 800023c:	20000100 	.word	0x20000100

08000240 <HAL_ADC_ConvCpltCallback>:

//since ADC 1 has 3 pins we are getting data from, our adc buffer raw has space for 9 values
//aka 3x of adc pins.
//We average out the 3 ADC values for each pin
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){
 8000240:	b580      	push	{r7, lr}
 8000242:	b084      	sub	sp, #16
 8000244:	af00      	add	r7, sp, #0
 8000246:	6078      	str	r0, [r7, #4]
	// ADC averaging
	for(int i = 0 ; i < 3; i++) {
 8000248:	2300      	movs	r3, #0
 800024a:	60fb      	str	r3, [r7, #12]
 800024c:	e01d      	b.n	800028a <HAL_ADC_ConvCpltCallback+0x4a>
		ADC_buffer_processed[i] = (ADC_buffer_raw[0 + i] + ADC_buffer_raw[3 + i] + ADC_buffer_raw[6 + i])/3;
 800024e:	4a15      	ldr	r2, [pc, #84]	; (80002a4 <HAL_ADC_ConvCpltCallback+0x64>)
 8000250:	68fb      	ldr	r3, [r7, #12]
 8000252:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000256:	4619      	mov	r1, r3
 8000258:	68fb      	ldr	r3, [r7, #12]
 800025a:	3303      	adds	r3, #3
 800025c:	4a11      	ldr	r2, [pc, #68]	; (80002a4 <HAL_ADC_ConvCpltCallback+0x64>)
 800025e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000262:	440b      	add	r3, r1
 8000264:	68fa      	ldr	r2, [r7, #12]
 8000266:	3206      	adds	r2, #6
 8000268:	490e      	ldr	r1, [pc, #56]	; (80002a4 <HAL_ADC_ConvCpltCallback+0x64>)
 800026a:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 800026e:	4413      	add	r3, r2
 8000270:	4a0d      	ldr	r2, [pc, #52]	; (80002a8 <HAL_ADC_ConvCpltCallback+0x68>)
 8000272:	fb82 1203 	smull	r1, r2, r2, r3
 8000276:	17db      	asrs	r3, r3, #31
 8000278:	1ad3      	subs	r3, r2, r3
 800027a:	b299      	uxth	r1, r3
 800027c:	4a0b      	ldr	r2, [pc, #44]	; (80002ac <HAL_ADC_ConvCpltCallback+0x6c>)
 800027e:	68fb      	ldr	r3, [r7, #12]
 8000280:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int i = 0 ; i < 3; i++) {
 8000284:	68fb      	ldr	r3, [r7, #12]
 8000286:	3301      	adds	r3, #1
 8000288:	60fb      	str	r3, [r7, #12]
 800028a:	68fb      	ldr	r3, [r7, #12]
 800028c:	2b02      	cmp	r3, #2
 800028e:	ddde      	ble.n	800024e <HAL_ADC_ConvCpltCallback+0xe>
	}
	osSemaphoreRelease(ADC_semHandle);
 8000290:	4b07      	ldr	r3, [pc, #28]	; (80002b0 <HAL_ADC_ConvCpltCallback+0x70>)
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	4618      	mov	r0, r3
 8000296:	f009 fad5 	bl	8009844 <osSemaphoreRelease>
}
 800029a:	bf00      	nop
 800029c:	3710      	adds	r7, #16
 800029e:	46bd      	mov	sp, r7
 80002a0:	bd80      	pop	{r7, pc}
 80002a2:	bf00      	nop
 80002a4:	20000090 	.word	0x20000090
 80002a8:	55555556 	.word	0x55555556
 80002ac:	200000a4 	.word	0x200000a4
 80002b0:	200000ac 	.word	0x200000ac

080002b4 <ADC_collect>:

//collect raw adc data through the DMA
void ADC_collect(void *argument)
{
 80002b4:	b580      	push	{r7, lr}
 80002b6:	b084      	sub	sp, #16
 80002b8:	af00      	add	r7, sp, #0
 80002ba:	6078      	str	r0, [r7, #4]
	ADC_HandleTypeDef *hadc = argument;
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
	HAL_ADC_Start_DMA(hadc, (uint32_t*)ADC_buffer_raw, 9);
 80002c0:	2209      	movs	r2, #9
 80002c2:	4907      	ldr	r1, [pc, #28]	; (80002e0 <ADC_collect+0x2c>)
 80002c4:	68f8      	ldr	r0, [r7, #12]
 80002c6:	f001 fb41 	bl	800194c <HAL_ADC_Start_DMA>
  for(;;)
  {
	  osSemaphoreAcquire(ADC_semHandle, osWaitForever);
 80002ca:	4b06      	ldr	r3, [pc, #24]	; (80002e4 <ADC_collect+0x30>)
 80002cc:	681b      	ldr	r3, [r3, #0]
 80002ce:	f04f 31ff 	mov.w	r1, #4294967295
 80002d2:	4618      	mov	r0, r3
 80002d4:	f009 fa64 	bl	80097a0 <osSemaphoreAcquire>
	  // process adc buffer good

    osDelay(1);
 80002d8:	2001      	movs	r0, #1
 80002da:	f009 f936 	bl	800954a <osDelay>
	  osSemaphoreAcquire(ADC_semHandle, osWaitForever);
 80002de:	e7f4      	b.n	80002ca <ADC_collect+0x16>
 80002e0:	20000090 	.word	0x20000090
 80002e4:	200000ac 	.word	0x200000ac

080002e8 <canInitialize>:
        reversed_num = (reversed_num << 4) + (hex_num & 0xF);
        hex_num >>= 4;
    }
    return reversed_num;
}
void canInitialize(void) {
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b08a      	sub	sp, #40	; 0x28
 80002ec:	af00      	add	r7, sp, #0

	CAN_FilterTypeDef  sFilterConfig;

	txCAN.IDE = CAN_ID_EXT;
 80002ee:	4b17      	ldr	r3, [pc, #92]	; (800034c <canInitialize+0x64>)
 80002f0:	2204      	movs	r2, #4
 80002f2:	609a      	str	r2, [r3, #8]
	txCAN.RTR = CAN_RTR_DATA;
 80002f4:	4b15      	ldr	r3, [pc, #84]	; (800034c <canInitialize+0x64>)
 80002f6:	2200      	movs	r2, #0
 80002f8:	60da      	str	r2, [r3, #12]
	txCAN.TransmitGlobalTime = DISABLE;
 80002fa:	4b14      	ldr	r3, [pc, #80]	; (800034c <canInitialize+0x64>)
 80002fc:	2200      	movs	r2, #0
 80002fe:	751a      	strb	r2, [r3, #20]

	sFilterConfig.FilterBank = 0;
 8000300:	2300      	movs	r3, #0
 8000302:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000304:	2300      	movs	r3, #0
 8000306:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000308:	2301      	movs	r3, #1
 800030a:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterIdHigh = 0x0000;
 800030c:	2300      	movs	r3, #0
 800030e:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIdLow = 0x0000;
 8000310:	2300      	movs	r3, #0
 8000312:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterMaskIdHigh = 0x0000;
 8000314:	2300      	movs	r3, #0
 8000316:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterMaskIdLow = 0x0000;
 8000318:	2300      	movs	r3, #0
 800031a:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 800031c:	2300      	movs	r3, #0
 800031e:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterActivation = ENABLE;
 8000320:	2301      	movs	r3, #1
 8000322:	623b      	str	r3, [r7, #32]
	sFilterConfig.SlaveStartFilterBank = 14;
 8000324:	230e      	movs	r3, #14
 8000326:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 8000328:	463b      	mov	r3, r7
 800032a:	4619      	mov	r1, r3
 800032c:	4808      	ldr	r0, [pc, #32]	; (8000350 <canInitialize+0x68>)
 800032e:	f002 fba6 	bl	8002a7e <HAL_CAN_ConfigFilter>
 8000332:	4603      	mov	r3, r0
 8000334:	2b00      	cmp	r3, #0
 8000336:	d001      	beq.n	800033c <canInitialize+0x54>
	{
	    /* Filter configuration Error */
	  Error_Handler();
 8000338:	f000 fca6 	bl	8000c88 <Error_Handler>
	}
	HAL_CAN_Start(&hcan1);
 800033c:	4804      	ldr	r0, [pc, #16]	; (8000350 <canInitialize+0x68>)
 800033e:	f002 fc68 	bl	8002c12 <HAL_CAN_Start>
}
 8000342:	bf00      	nop
 8000344:	3728      	adds	r7, #40	; 0x28
 8000346:	46bd      	mov	sp, r7
 8000348:	bd80      	pop	{r7, pc}
 800034a:	bf00      	nop
 800034c:	20000104 	.word	0x20000104
 8000350:	200001e4 	.word	0x200001e4

08000354 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000358:	f000 ff61 	bl	800121e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800035c:	f000 f83a 	bl	80003d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000360:	f000 f98e 	bl	8000680 <MX_GPIO_Init>
  MX_DMA_Init();
 8000364:	f000 f962 	bl	800062c <MX_DMA_Init>
  MX_SDMMC1_SD_Init();
 8000368:	f000 f93e 	bl	80005e8 <MX_SDMMC1_SD_Init>
  MX_CAN1_Init();
 800036c:	f000 f906 	bl	800057c <MX_CAN1_Init>
  MX_ADC1_Init();
 8000370:	f000 f87e 	bl	8000470 <MX_ADC1_Init>
  MX_FATFS_Init();
 8000374:	f008 fcd8 	bl	8008d28 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000378:	f008 ffd4 	bl	8009324 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of myMutex01 */
  myMutex01Handle = osMutexNew(&myMutex01_attributes);
 800037c:	480e      	ldr	r0, [pc, #56]	; (80003b8 <main+0x64>)
 800037e:	f009 f8ff 	bl	8009580 <osMutexNew>
 8000382:	4603      	mov	r3, r0
 8000384:	4a0d      	ldr	r2, [pc, #52]	; (80003bc <main+0x68>)
 8000386:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of myQueue01 */
  myQueue01Handle = osMessageQueueNew (16, sizeof(uint16_t), &myQueue01_attributes);
 8000388:	4a0d      	ldr	r2, [pc, #52]	; (80003c0 <main+0x6c>)
 800038a:	2102      	movs	r1, #2
 800038c:	2010      	movs	r0, #16
 800038e:	f009 fa9d 	bl	80098cc <osMessageQueueNew>
 8000392:	4603      	mov	r3, r0
 8000394:	4a0b      	ldr	r2, [pc, #44]	; (80003c4 <main+0x70>)
 8000396:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000398:	4a0b      	ldr	r2, [pc, #44]	; (80003c8 <main+0x74>)
 800039a:	2100      	movs	r1, #0
 800039c:	480b      	ldr	r0, [pc, #44]	; (80003cc <main+0x78>)
 800039e:	f009 f842 	bl	8009426 <osThreadNew>
 80003a2:	4603      	mov	r3, r0
 80003a4:	4a0a      	ldr	r2, [pc, #40]	; (80003d0 <main+0x7c>)
 80003a6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  ADC_Init();
 80003a8:	f7ff ff2a 	bl	8000200 <ADC_Init>
  canInitialize();
 80003ac:	f7ff ff9c 	bl	80002e8 <canInitialize>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80003b0:	f008 fffe 	bl	80093b0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80003b4:	e7fe      	b.n	80003b4 <main+0x60>
 80003b6:	bf00      	nop
 80003b8:	0800d000 	.word	0x0800d000
 80003bc:	20000304 	.word	0x20000304
 80003c0:	0800cfe8 	.word	0x0800cfe8
 80003c4:	20000290 	.word	0x20000290
 80003c8:	0800cfc4 	.word	0x0800cfc4
 80003cc:	08000c55 	.word	0x08000c55
 80003d0:	2000028c 	.word	0x2000028c

080003d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003d4:	b580      	push	{r7, lr}
 80003d6:	b096      	sub	sp, #88	; 0x58
 80003d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003da:	f107 0314 	add.w	r3, r7, #20
 80003de:	2244      	movs	r2, #68	; 0x44
 80003e0:	2100      	movs	r1, #0
 80003e2:	4618      	mov	r0, r3
 80003e4:	f00c fcd6 	bl	800cd94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003e8:	463b      	mov	r3, r7
 80003ea:	2200      	movs	r2, #0
 80003ec:	601a      	str	r2, [r3, #0]
 80003ee:	605a      	str	r2, [r3, #4]
 80003f0:	609a      	str	r2, [r3, #8]
 80003f2:	60da      	str	r2, [r3, #12]
 80003f4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 80003f6:	2000      	movs	r0, #0
 80003f8:	f003 f986 	bl	8003708 <HAL_PWREx_ControlVoltageScaling>
 80003fc:	4603      	mov	r3, r0
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d001      	beq.n	8000406 <SystemClock_Config+0x32>
  {
    Error_Handler();
 8000402:	f000 fc41 	bl	8000c88 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000406:	2301      	movs	r3, #1
 8000408:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800040a:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800040e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000410:	2302      	movs	r3, #2
 8000412:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000414:	2303      	movs	r3, #3
 8000416:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000418:	2302      	movs	r3, #2
 800041a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 30;
 800041c:	231e      	movs	r3, #30
 800041e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000420:	2302      	movs	r3, #2
 8000422:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000424:	2302      	movs	r3, #2
 8000426:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000428:	2302      	movs	r3, #2
 800042a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800042c:	f107 0314 	add.w	r3, r7, #20
 8000430:	4618      	mov	r0, r3
 8000432:	f003 fa1d 	bl	8003870 <HAL_RCC_OscConfig>
 8000436:	4603      	mov	r3, r0
 8000438:	2b00      	cmp	r3, #0
 800043a:	d001      	beq.n	8000440 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 800043c:	f000 fc24 	bl	8000c88 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000440:	230f      	movs	r3, #15
 8000442:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000444:	2303      	movs	r3, #3
 8000446:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000448:	2300      	movs	r3, #0
 800044a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800044c:	2300      	movs	r3, #0
 800044e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000450:	2300      	movs	r3, #0
 8000452:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000454:	463b      	mov	r3, r7
 8000456:	2105      	movs	r1, #5
 8000458:	4618      	mov	r0, r3
 800045a:	f003 fe23 	bl	80040a4 <HAL_RCC_ClockConfig>
 800045e:	4603      	mov	r3, r0
 8000460:	2b00      	cmp	r3, #0
 8000462:	d001      	beq.n	8000468 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000464:	f000 fc10 	bl	8000c88 <Error_Handler>
  }
}
 8000468:	bf00      	nop
 800046a:	3758      	adds	r7, #88	; 0x58
 800046c:	46bd      	mov	sp, r7
 800046e:	bd80      	pop	{r7, pc}

08000470 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	b086      	sub	sp, #24
 8000474:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000476:	463b      	mov	r3, r7
 8000478:	2200      	movs	r2, #0
 800047a:	601a      	str	r2, [r3, #0]
 800047c:	605a      	str	r2, [r3, #4]
 800047e:	609a      	str	r2, [r3, #8]
 8000480:	60da      	str	r2, [r3, #12]
 8000482:	611a      	str	r2, [r3, #16]
 8000484:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000486:	4b38      	ldr	r3, [pc, #224]	; (8000568 <MX_ADC1_Init+0xf8>)
 8000488:	4a38      	ldr	r2, [pc, #224]	; (800056c <MX_ADC1_Init+0xfc>)
 800048a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800048c:	4b36      	ldr	r3, [pc, #216]	; (8000568 <MX_ADC1_Init+0xf8>)
 800048e:	2200      	movs	r2, #0
 8000490:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000492:	4b35      	ldr	r3, [pc, #212]	; (8000568 <MX_ADC1_Init+0xf8>)
 8000494:	2200      	movs	r2, #0
 8000496:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000498:	4b33      	ldr	r3, [pc, #204]	; (8000568 <MX_ADC1_Init+0xf8>)
 800049a:	2200      	movs	r2, #0
 800049c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800049e:	4b32      	ldr	r3, [pc, #200]	; (8000568 <MX_ADC1_Init+0xf8>)
 80004a0:	2201      	movs	r2, #1
 80004a2:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80004a4:	4b30      	ldr	r3, [pc, #192]	; (8000568 <MX_ADC1_Init+0xf8>)
 80004a6:	2204      	movs	r2, #4
 80004a8:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80004aa:	4b2f      	ldr	r3, [pc, #188]	; (8000568 <MX_ADC1_Init+0xf8>)
 80004ac:	2200      	movs	r2, #0
 80004ae:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80004b0:	4b2d      	ldr	r3, [pc, #180]	; (8000568 <MX_ADC1_Init+0xf8>)
 80004b2:	2200      	movs	r2, #0
 80004b4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 3;
 80004b6:	4b2c      	ldr	r3, [pc, #176]	; (8000568 <MX_ADC1_Init+0xf8>)
 80004b8:	2203      	movs	r2, #3
 80004ba:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80004bc:	4b2a      	ldr	r3, [pc, #168]	; (8000568 <MX_ADC1_Init+0xf8>)
 80004be:	2200      	movs	r2, #0
 80004c0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80004c4:	4b28      	ldr	r3, [pc, #160]	; (8000568 <MX_ADC1_Init+0xf8>)
 80004c6:	2200      	movs	r2, #0
 80004c8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80004ca:	4b27      	ldr	r3, [pc, #156]	; (8000568 <MX_ADC1_Init+0xf8>)
 80004cc:	2200      	movs	r2, #0
 80004ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80004d0:	4b25      	ldr	r3, [pc, #148]	; (8000568 <MX_ADC1_Init+0xf8>)
 80004d2:	2201      	movs	r2, #1
 80004d4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80004d8:	4b23      	ldr	r3, [pc, #140]	; (8000568 <MX_ADC1_Init+0xf8>)
 80004da:	2200      	movs	r2, #0
 80004dc:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80004de:	4b22      	ldr	r3, [pc, #136]	; (8000568 <MX_ADC1_Init+0xf8>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.DFSDMConfig = ADC_DFSDM_MODE_ENABLE;
 80004e6:	4b20      	ldr	r3, [pc, #128]	; (8000568 <MX_ADC1_Init+0xf8>)
 80004e8:	2204      	movs	r2, #4
 80004ea:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80004ec:	481e      	ldr	r0, [pc, #120]	; (8000568 <MX_ADC1_Init+0xf8>)
 80004ee:	f001 f8e1 	bl	80016b4 <HAL_ADC_Init>
 80004f2:	4603      	mov	r3, r0
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d001      	beq.n	80004fc <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 80004f8:	f000 fbc6 	bl	8000c88 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80004fc:	4b1c      	ldr	r3, [pc, #112]	; (8000570 <MX_ADC1_Init+0x100>)
 80004fe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000500:	2306      	movs	r3, #6
 8000502:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000504:	2300      	movs	r3, #0
 8000506:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000508:	237f      	movs	r3, #127	; 0x7f
 800050a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800050c:	2304      	movs	r3, #4
 800050e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000510:	2300      	movs	r3, #0
 8000512:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000514:	463b      	mov	r3, r7
 8000516:	4619      	mov	r1, r3
 8000518:	4813      	ldr	r0, [pc, #76]	; (8000568 <MX_ADC1_Init+0xf8>)
 800051a:	f001 fc6d 	bl	8001df8 <HAL_ADC_ConfigChannel>
 800051e:	4603      	mov	r3, r0
 8000520:	2b00      	cmp	r3, #0
 8000522:	d001      	beq.n	8000528 <MX_ADC1_Init+0xb8>
  {
    Error_Handler();
 8000524:	f000 fbb0 	bl	8000c88 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000528:	4b12      	ldr	r3, [pc, #72]	; (8000574 <MX_ADC1_Init+0x104>)
 800052a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800052c:	230c      	movs	r3, #12
 800052e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000530:	463b      	mov	r3, r7
 8000532:	4619      	mov	r1, r3
 8000534:	480c      	ldr	r0, [pc, #48]	; (8000568 <MX_ADC1_Init+0xf8>)
 8000536:	f001 fc5f 	bl	8001df8 <HAL_ADC_ConfigChannel>
 800053a:	4603      	mov	r3, r0
 800053c:	2b00      	cmp	r3, #0
 800053e:	d001      	beq.n	8000544 <MX_ADC1_Init+0xd4>
  {
    Error_Handler();
 8000540:	f000 fba2 	bl	8000c88 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000544:	4b0c      	ldr	r3, [pc, #48]	; (8000578 <MX_ADC1_Init+0x108>)
 8000546:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000548:	2312      	movs	r3, #18
 800054a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800054c:	463b      	mov	r3, r7
 800054e:	4619      	mov	r1, r3
 8000550:	4805      	ldr	r0, [pc, #20]	; (8000568 <MX_ADC1_Init+0xf8>)
 8000552:	f001 fc51 	bl	8001df8 <HAL_ADC_ConfigChannel>
 8000556:	4603      	mov	r3, r0
 8000558:	2b00      	cmp	r3, #0
 800055a:	d001      	beq.n	8000560 <MX_ADC1_Init+0xf0>
  {
    Error_Handler();
 800055c:	f000 fb94 	bl	8000c88 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000560:	bf00      	nop
 8000562:	3718      	adds	r7, #24
 8000564:	46bd      	mov	sp, r7
 8000566:	bd80      	pop	{r7, pc}
 8000568:	2000011c 	.word	0x2000011c
 800056c:	50040000 	.word	0x50040000
 8000570:	14f00020 	.word	0x14f00020
 8000574:	19200040 	.word	0x19200040
 8000578:	1d500080 	.word	0x1d500080

0800057c <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000580:	4b17      	ldr	r3, [pc, #92]	; (80005e0 <MX_CAN1_Init+0x64>)
 8000582:	4a18      	ldr	r2, [pc, #96]	; (80005e4 <MX_CAN1_Init+0x68>)
 8000584:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 20;
 8000586:	4b16      	ldr	r3, [pc, #88]	; (80005e0 <MX_CAN1_Init+0x64>)
 8000588:	2214      	movs	r2, #20
 800058a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800058c:	4b14      	ldr	r3, [pc, #80]	; (80005e0 <MX_CAN1_Init+0x64>)
 800058e:	2200      	movs	r2, #0
 8000590:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000592:	4b13      	ldr	r3, [pc, #76]	; (80005e0 <MX_CAN1_Init+0x64>)
 8000594:	2200      	movs	r2, #0
 8000596:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_10TQ;
 8000598:	4b11      	ldr	r3, [pc, #68]	; (80005e0 <MX_CAN1_Init+0x64>)
 800059a:	f44f 2210 	mov.w	r2, #589824	; 0x90000
 800059e:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 80005a0:	4b0f      	ldr	r3, [pc, #60]	; (80005e0 <MX_CAN1_Init+0x64>)
 80005a2:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 80005a6:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80005a8:	4b0d      	ldr	r3, [pc, #52]	; (80005e0 <MX_CAN1_Init+0x64>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80005ae:	4b0c      	ldr	r3, [pc, #48]	; (80005e0 <MX_CAN1_Init+0x64>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80005b4:	4b0a      	ldr	r3, [pc, #40]	; (80005e0 <MX_CAN1_Init+0x64>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80005ba:	4b09      	ldr	r3, [pc, #36]	; (80005e0 <MX_CAN1_Init+0x64>)
 80005bc:	2200      	movs	r2, #0
 80005be:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80005c0:	4b07      	ldr	r3, [pc, #28]	; (80005e0 <MX_CAN1_Init+0x64>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80005c6:	4b06      	ldr	r3, [pc, #24]	; (80005e0 <MX_CAN1_Init+0x64>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80005cc:	4804      	ldr	r0, [pc, #16]	; (80005e0 <MX_CAN1_Init+0x64>)
 80005ce:	f002 f95b 	bl	8002888 <HAL_CAN_Init>
 80005d2:	4603      	mov	r3, r0
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d001      	beq.n	80005dc <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80005d8:	f000 fb56 	bl	8000c88 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80005dc:	bf00      	nop
 80005de:	bd80      	pop	{r7, pc}
 80005e0:	200001e4 	.word	0x200001e4
 80005e4:	40006400 	.word	0x40006400

080005e8 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 80005e8:	b480      	push	{r7}
 80005ea:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 80005ec:	4b0d      	ldr	r3, [pc, #52]	; (8000624 <MX_SDMMC1_SD_Init+0x3c>)
 80005ee:	4a0e      	ldr	r2, [pc, #56]	; (8000628 <MX_SDMMC1_SD_Init+0x40>)
 80005f0:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80005f2:	4b0c      	ldr	r3, [pc, #48]	; (8000624 <MX_SDMMC1_SD_Init+0x3c>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80005f8:	4b0a      	ldr	r3, [pc, #40]	; (8000624 <MX_SDMMC1_SD_Init+0x3c>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 80005fe:	4b09      	ldr	r3, [pc, #36]	; (8000624 <MX_SDMMC1_SD_Init+0x3c>)
 8000600:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000604:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000606:	4b07      	ldr	r3, [pc, #28]	; (8000624 <MX_SDMMC1_SD_Init+0x3c>)
 8000608:	2200      	movs	r2, #0
 800060a:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 800060c:	4b05      	ldr	r3, [pc, #20]	; (8000624 <MX_SDMMC1_SD_Init+0x3c>)
 800060e:	2200      	movs	r2, #0
 8000610:	615a      	str	r2, [r3, #20]
  hsd1.Init.Transceiver = SDMMC_TRANSCEIVER_DISABLE;
 8000612:	4b04      	ldr	r3, [pc, #16]	; (8000624 <MX_SDMMC1_SD_Init+0x3c>)
 8000614:	2200      	movs	r2, #0
 8000616:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000618:	bf00      	nop
 800061a:	46bd      	mov	sp, r7
 800061c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop
 8000624:	2000020c 	.word	0x2000020c
 8000628:	50062400 	.word	0x50062400

0800062c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b082      	sub	sp, #8
 8000630:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000632:	4b12      	ldr	r3, [pc, #72]	; (800067c <MX_DMA_Init+0x50>)
 8000634:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000636:	4a11      	ldr	r2, [pc, #68]	; (800067c <MX_DMA_Init+0x50>)
 8000638:	f043 0304 	orr.w	r3, r3, #4
 800063c:	6493      	str	r3, [r2, #72]	; 0x48
 800063e:	4b0f      	ldr	r3, [pc, #60]	; (800067c <MX_DMA_Init+0x50>)
 8000640:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000642:	f003 0304 	and.w	r3, r3, #4
 8000646:	607b      	str	r3, [r7, #4]
 8000648:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800064a:	4b0c      	ldr	r3, [pc, #48]	; (800067c <MX_DMA_Init+0x50>)
 800064c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800064e:	4a0b      	ldr	r2, [pc, #44]	; (800067c <MX_DMA_Init+0x50>)
 8000650:	f043 0301 	orr.w	r3, r3, #1
 8000654:	6493      	str	r3, [r2, #72]	; 0x48
 8000656:	4b09      	ldr	r3, [pc, #36]	; (800067c <MX_DMA_Init+0x50>)
 8000658:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800065a:	f003 0301 	and.w	r3, r3, #1
 800065e:	603b      	str	r3, [r7, #0]
 8000660:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8000662:	2200      	movs	r2, #0
 8000664:	2105      	movs	r1, #5
 8000666:	200b      	movs	r0, #11
 8000668:	f002 fbd0 	bl	8002e0c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800066c:	200b      	movs	r0, #11
 800066e:	f002 fbe9 	bl	8002e44 <HAL_NVIC_EnableIRQ>

}
 8000672:	bf00      	nop
 8000674:	3708      	adds	r7, #8
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	40021000 	.word	0x40021000

08000680 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b08e      	sub	sp, #56	; 0x38
 8000684:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000686:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800068a:	2200      	movs	r2, #0
 800068c:	601a      	str	r2, [r3, #0]
 800068e:	605a      	str	r2, [r3, #4]
 8000690:	609a      	str	r2, [r3, #8]
 8000692:	60da      	str	r2, [r3, #12]
 8000694:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000696:	4bb2      	ldr	r3, [pc, #712]	; (8000960 <MX_GPIO_Init+0x2e0>)
 8000698:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800069a:	4ab1      	ldr	r2, [pc, #708]	; (8000960 <MX_GPIO_Init+0x2e0>)
 800069c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006a2:	4baf      	ldr	r3, [pc, #700]	; (8000960 <MX_GPIO_Init+0x2e0>)
 80006a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80006aa:	623b      	str	r3, [r7, #32]
 80006ac:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006ae:	4bac      	ldr	r3, [pc, #688]	; (8000960 <MX_GPIO_Init+0x2e0>)
 80006b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006b2:	4aab      	ldr	r2, [pc, #684]	; (8000960 <MX_GPIO_Init+0x2e0>)
 80006b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006ba:	4ba9      	ldr	r3, [pc, #676]	; (8000960 <MX_GPIO_Init+0x2e0>)
 80006bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006c2:	61fb      	str	r3, [r7, #28]
 80006c4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80006c6:	4ba6      	ldr	r3, [pc, #664]	; (8000960 <MX_GPIO_Init+0x2e0>)
 80006c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ca:	4aa5      	ldr	r2, [pc, #660]	; (8000960 <MX_GPIO_Init+0x2e0>)
 80006cc:	f043 0310 	orr.w	r3, r3, #16
 80006d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006d2:	4ba3      	ldr	r3, [pc, #652]	; (8000960 <MX_GPIO_Init+0x2e0>)
 80006d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006d6:	f003 0310 	and.w	r3, r3, #16
 80006da:	61bb      	str	r3, [r7, #24]
 80006dc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006de:	4ba0      	ldr	r3, [pc, #640]	; (8000960 <MX_GPIO_Init+0x2e0>)
 80006e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006e2:	4a9f      	ldr	r2, [pc, #636]	; (8000960 <MX_GPIO_Init+0x2e0>)
 80006e4:	f043 0302 	orr.w	r3, r3, #2
 80006e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006ea:	4b9d      	ldr	r3, [pc, #628]	; (8000960 <MX_GPIO_Init+0x2e0>)
 80006ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ee:	f003 0302 	and.w	r3, r3, #2
 80006f2:	617b      	str	r3, [r7, #20]
 80006f4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006f6:	4b9a      	ldr	r3, [pc, #616]	; (8000960 <MX_GPIO_Init+0x2e0>)
 80006f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006fa:	4a99      	ldr	r2, [pc, #612]	; (8000960 <MX_GPIO_Init+0x2e0>)
 80006fc:	f043 0301 	orr.w	r3, r3, #1
 8000700:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000702:	4b97      	ldr	r3, [pc, #604]	; (8000960 <MX_GPIO_Init+0x2e0>)
 8000704:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000706:	f003 0301 	and.w	r3, r3, #1
 800070a:	613b      	str	r3, [r7, #16]
 800070c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800070e:	4b94      	ldr	r3, [pc, #592]	; (8000960 <MX_GPIO_Init+0x2e0>)
 8000710:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000712:	4a93      	ldr	r2, [pc, #588]	; (8000960 <MX_GPIO_Init+0x2e0>)
 8000714:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000718:	64d3      	str	r3, [r2, #76]	; 0x4c
 800071a:	4b91      	ldr	r3, [pc, #580]	; (8000960 <MX_GPIO_Init+0x2e0>)
 800071c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800071e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000722:	60fb      	str	r3, [r7, #12]
 8000724:	68fb      	ldr	r3, [r7, #12]
  HAL_PWREx_EnableVddIO2();
 8000726:	f003 f893 	bl	8003850 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800072a:	4b8d      	ldr	r3, [pc, #564]	; (8000960 <MX_GPIO_Init+0x2e0>)
 800072c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800072e:	4a8c      	ldr	r2, [pc, #560]	; (8000960 <MX_GPIO_Init+0x2e0>)
 8000730:	f043 0308 	orr.w	r3, r3, #8
 8000734:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000736:	4b8a      	ldr	r3, [pc, #552]	; (8000960 <MX_GPIO_Init+0x2e0>)
 8000738:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800073a:	f003 0308 	and.w	r3, r3, #8
 800073e:	60bb      	str	r3, [r7, #8]
 8000740:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000742:	4b87      	ldr	r3, [pc, #540]	; (8000960 <MX_GPIO_Init+0x2e0>)
 8000744:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000746:	4a86      	ldr	r2, [pc, #536]	; (8000960 <MX_GPIO_Init+0x2e0>)
 8000748:	f043 0304 	orr.w	r3, r3, #4
 800074c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800074e:	4b84      	ldr	r3, [pc, #528]	; (8000960 <MX_GPIO_Init+0x2e0>)
 8000750:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000752:	f003 0304 	and.w	r3, r3, #4
 8000756:	607b      	str	r3, [r7, #4]
 8000758:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800075a:	4b81      	ldr	r3, [pc, #516]	; (8000960 <MX_GPIO_Init+0x2e0>)
 800075c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800075e:	4a80      	ldr	r2, [pc, #512]	; (8000960 <MX_GPIO_Init+0x2e0>)
 8000760:	f043 0320 	orr.w	r3, r3, #32
 8000764:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000766:	4b7e      	ldr	r3, [pc, #504]	; (8000960 <MX_GPIO_Init+0x2e0>)
 8000768:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800076a:	f003 0320 	and.w	r3, r3, #32
 800076e:	603b      	str	r3, [r7, #0]
 8000770:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, MIC_VDD_Pin|DSI_SPI_USART_CS_Pin|LED_GREEN_Pin, GPIO_PIN_RESET);
 8000772:	2200      	movs	r2, #0
 8000774:	f244 0114 	movw	r1, #16404	; 0x4014
 8000778:	487a      	ldr	r0, [pc, #488]	; (8000964 <MX_GPIO_Init+0x2e4>)
 800077a:	f002 ff8d 	bl	8003698 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(JOY_SEL_GPIO_Port, JOY_SEL_Pin, GPIO_PIN_RESET);
 800077e:	2200      	movs	r2, #0
 8000780:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000784:	4878      	ldr	r0, [pc, #480]	; (8000968 <MX_GPIO_Init+0x2e8>)
 8000786:	f002 ff87 	bl	8003698 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_RESET);
 800078a:	2200      	movs	r2, #0
 800078c:	2140      	movs	r1, #64	; 0x40
 800078e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000792:	f002 ff81 	bl	8003698 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MFX_WAKEUP_GPIO_Port, MFX_WAKEUP_Pin, GPIO_PIN_RESET);
 8000796:	2200      	movs	r2, #0
 8000798:	2104      	movs	r1, #4
 800079a:	4874      	ldr	r0, [pc, #464]	; (800096c <MX_GPIO_Init+0x2ec>)
 800079c:	f002 ff7c 	bl	8003698 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OCTOSPIM_P2_IO1_Pin OCTOSPIM_P2_CLK_Pin OCTOSPIM_P2_IO0_Pin */
  GPIO_InitStruct.Pin = OCTOSPIM_P2_IO1_Pin|OCTOSPIM_P2_CLK_Pin|OCTOSPIM_P2_IO0_Pin;
 80007a0:	f44f 6344 	mov.w	r3, #3136	; 0xc40
 80007a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007a6:	2302      	movs	r3, #2
 80007a8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007aa:	2300      	movs	r3, #0
 80007ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007ae:	2303      	movs	r3, #3
 80007b0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPIM_P2;
 80007b2:	2305      	movs	r3, #5
 80007b4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80007b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007ba:	4619      	mov	r1, r3
 80007bc:	486c      	ldr	r0, [pc, #432]	; (8000970 <MX_GPIO_Init+0x2f0>)
 80007be:	f002 fdc1 	bl	8003344 <HAL_GPIO_Init>

  /*Configure GPIO pins : MIC_VDD_Pin DSI_SPI_USART_CS_Pin LED_GREEN_Pin */
  GPIO_InitStruct.Pin = MIC_VDD_Pin|DSI_SPI_USART_CS_Pin|LED_GREEN_Pin;
 80007c2:	f244 0314 	movw	r3, #16404	; 0x4014
 80007c6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007c8:	2301      	movs	r3, #1
 80007ca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007cc:	2300      	movs	r3, #0
 80007ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d0:	2300      	movs	r3, #0
 80007d2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80007d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007d8:	4619      	mov	r1, r3
 80007da:	4862      	ldr	r0, [pc, #392]	; (8000964 <MX_GPIO_Init+0x2e4>)
 80007dc:	f002 fdb2 	bl	8003344 <HAL_GPIO_Init>

  /*Configure GPIO pins : PSRAM_NBL0_Pin PSRAM_NBL1_Pin PSRAM_A20_Pin PSRAM_A19_Pin
                           D7_Pin D6_Pin D12_Pin D5_Pin
                           D11_Pin D4_Pin D10_Pin D9_Pin
                           D8_Pin */
  GPIO_InitStruct.Pin = PSRAM_NBL0_Pin|PSRAM_NBL1_Pin|PSRAM_A20_Pin|PSRAM_A19_Pin
 80007e0:	f64f 739b 	movw	r3, #65435	; 0xff9b
 80007e4:	627b      	str	r3, [r7, #36]	; 0x24
                          |D7_Pin|D6_Pin|D12_Pin|D5_Pin
                          |D11_Pin|D4_Pin|D10_Pin|D9_Pin
                          |D8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007e6:	2302      	movs	r3, #2
 80007e8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ea:	2300      	movs	r3, #0
 80007ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007ee:	2303      	movs	r3, #3
 80007f0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80007f2:	230c      	movs	r3, #12
 80007f4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80007f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007fa:	4619      	mov	r1, r3
 80007fc:	485d      	ldr	r0, [pc, #372]	; (8000974 <MX_GPIO_Init+0x2f4>)
 80007fe:	f002 fda1 	bl	8003344 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8000802:	2310      	movs	r3, #16
 8000804:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000806:	2302      	movs	r3, #2
 8000808:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080a:	2300      	movs	r3, #0
 800080c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800080e:	2300      	movs	r3, #0
 8000810:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000812:	2302      	movs	r3, #2
 8000814:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8000816:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800081a:	4619      	mov	r1, r3
 800081c:	4853      	ldr	r0, [pc, #332]	; (800096c <MX_GPIO_Init+0x2ec>)
 800081e:	f002 fd91 	bl	8003344 <HAL_GPIO_Init>

  /*Configure GPIO pin : USART3_RTS_Pin */
  GPIO_InitStruct.Pin = USART3_RTS_Pin;
 8000822:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000826:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000828:	2302      	movs	r3, #2
 800082a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082c:	2300      	movs	r3, #0
 800082e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000830:	2303      	movs	r3, #3
 8000832:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000834:	2307      	movs	r3, #7
 8000836:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USART3_RTS_GPIO_Port, &GPIO_InitStruct);
 8000838:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800083c:	4619      	mov	r1, r3
 800083e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000842:	f002 fd7f 	bl	8003344 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_10_Pin */
  GPIO_InitStruct.Pin = ARD_10_Pin;
 8000846:	2301      	movs	r3, #1
 8000848:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800084a:	2302      	movs	r3, #2
 800084c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084e:	2300      	movs	r3, #0
 8000850:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000852:	2303      	movs	r3, #3
 8000854:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000856:	2305      	movs	r3, #5
 8000858:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_10_GPIO_Port, &GPIO_InitStruct);
 800085a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800085e:	4619      	mov	r1, r3
 8000860:	4843      	ldr	r0, [pc, #268]	; (8000970 <MX_GPIO_Init+0x2f0>)
 8000862:	f002 fd6f 	bl	8003344 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D7_Pin DCMI_D5_Pin DCMI_VSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_D7_Pin|DCMI_D5_Pin|DCMI_VSYNC_Pin;
 8000866:	23b0      	movs	r3, #176	; 0xb0
 8000868:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800086a:	2302      	movs	r3, #2
 800086c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086e:	2300      	movs	r3, #0
 8000870:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000872:	2300      	movs	r3, #0
 8000874:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 8000876:	230a      	movs	r3, #10
 8000878:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800087a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800087e:	4619      	mov	r1, r3
 8000880:	483b      	ldr	r0, [pc, #236]	; (8000970 <MX_GPIO_Init+0x2f0>)
 8000882:	f002 fd5f 	bl	8003344 <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI1_SDB_Pin SAI1_FSA_Pin */
  GPIO_InitStruct.Pin = SAI1_SDB_Pin|SAI1_FSA_Pin;
 8000886:	f44f 7308 	mov.w	r3, #544	; 0x220
 800088a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800088c:	2302      	movs	r3, #2
 800088e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000890:	2300      	movs	r3, #0
 8000892:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000894:	2300      	movs	r3, #0
 8000896:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8000898:	230d      	movs	r3, #13
 800089a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800089c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008a0:	4619      	mov	r1, r3
 80008a2:	4832      	ldr	r0, [pc, #200]	; (800096c <MX_GPIO_Init+0x2ec>)
 80008a4:	f002 fd4e 	bl	8003344 <HAL_GPIO_Init>

  /*Configure GPIO pins : OCTOSPIM_P2_IO6_Pin OCTOSPIM_P2_DQS_Pin OCTOSPIM_P2_IO7_Pin OCTOSPIM_P2_CS_Pin */
  GPIO_InitStruct.Pin = OCTOSPIM_P2_IO6_Pin|OCTOSPIM_P2_DQS_Pin|OCTOSPIM_P2_IO7_Pin|OCTOSPIM_P2_CS_Pin;
 80008a8:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 80008ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ae:	2302      	movs	r3, #2
 80008b0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b2:	2300      	movs	r3, #0
 80008b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008b6:	2303      	movs	r3, #3
 80008b8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPIM_P2;
 80008ba:	2305      	movs	r3, #5
 80008bc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80008be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008c2:	4619      	mov	r1, r3
 80008c4:	482c      	ldr	r0, [pc, #176]	; (8000978 <MX_GPIO_Init+0x2f8>)
 80008c6:	f002 fd3d 	bl	8003344 <HAL_GPIO_Init>

  /*Configure GPIO pins : D2_Pin PSRAM_OE_Pin D3_Pin PSRAM_WE_Pin
                           PSRAM_WAIT_Pin PSRAM_CLK_Pin PSRAM_NE1_Pin PSRAM_A18_Pin
                           D1_Pin D0_Pin PSRAM_A17_Pin PSRAM_A16_Pin
                           D15_Pin D14_Pin D13_Pin */
  GPIO_InitStruct.Pin = D2_Pin|PSRAM_OE_Pin|D3_Pin|PSRAM_WE_Pin
 80008ca:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 80008ce:	627b      	str	r3, [r7, #36]	; 0x24
                          |PSRAM_WAIT_Pin|PSRAM_CLK_Pin|PSRAM_NE1_Pin|PSRAM_A18_Pin
                          |D1_Pin|D0_Pin|PSRAM_A17_Pin|PSRAM_A16_Pin
                          |D15_Pin|D14_Pin|D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d0:	2302      	movs	r3, #2
 80008d2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d4:	2300      	movs	r3, #0
 80008d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008d8:	2303      	movs	r3, #3
 80008da:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80008dc:	230c      	movs	r3, #12
 80008de:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008e4:	4619      	mov	r1, r3
 80008e6:	4825      	ldr	r0, [pc, #148]	; (800097c <MX_GPIO_Init+0x2fc>)
 80008e8:	f002 fd2c 	bl	8003344 <HAL_GPIO_Init>

  /*Configure GPIO pin : MFX_IRQ_OUT_Pin */
  GPIO_InitStruct.Pin = MFX_IRQ_OUT_Pin;
 80008ec:	2302      	movs	r3, #2
 80008ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008f0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80008f4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f6:	2300      	movs	r3, #0
 80008f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(MFX_IRQ_OUT_GPIO_Port, &GPIO_InitStruct);
 80008fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008fe:	4619      	mov	r1, r3
 8000900:	481b      	ldr	r0, [pc, #108]	; (8000970 <MX_GPIO_Init+0x2f0>)
 8000902:	f002 fd1f 	bl	8003344 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D3_Pin DCMI_PIXCLK_Pin DCMI_D2_Pin */
  GPIO_InitStruct.Pin = DCMI_D3_Pin|DCMI_PIXCLK_Pin|DCMI_D2_Pin;
 8000906:	f44f 53c1 	mov.w	r3, #6176	; 0x1820
 800090a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800090c:	2302      	movs	r3, #2
 800090e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000910:	2300      	movs	r3, #0
 8000912:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000914:	2300      	movs	r3, #0
 8000916:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 8000918:	230a      	movs	r3, #10
 800091a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800091c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000920:	4619      	mov	r1, r3
 8000922:	4810      	ldr	r0, [pc, #64]	; (8000964 <MX_GPIO_Init+0x2e4>)
 8000924:	f002 fd0e 	bl	8003344 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C1_SCL_Pin */
  GPIO_InitStruct.Pin = I2C1_SCL_Pin;
 8000928:	2340      	movs	r3, #64	; 0x40
 800092a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800092c:	2312      	movs	r3, #18
 800092e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000930:	2301      	movs	r3, #1
 8000932:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000934:	2303      	movs	r3, #3
 8000936:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000938:	2304      	movs	r3, #4
 800093a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(I2C1_SCL_GPIO_Port, &GPIO_InitStruct);
 800093c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000940:	4619      	mov	r1, r3
 8000942:	480a      	ldr	r0, [pc, #40]	; (800096c <MX_GPIO_Init+0x2ec>)
 8000944:	f002 fcfe 	bl	8003344 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D9_Pin;
 8000948:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800094c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800094e:	2302      	movs	r3, #2
 8000950:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000952:	2300      	movs	r3, #0
 8000954:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000956:	2300      	movs	r3, #0
 8000958:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800095a:	2303      	movs	r3, #3
 800095c:	e010      	b.n	8000980 <MX_GPIO_Init+0x300>
 800095e:	bf00      	nop
 8000960:	40021000 	.word	0x40021000
 8000964:	48001c00 	.word	0x48001c00
 8000968:	48000800 	.word	0x48000800
 800096c:	48000400 	.word	0x48000400
 8000970:	48002000 	.word	0x48002000
 8000974:	48001000 	.word	0x48001000
 8000978:	48001800 	.word	0x48001800
 800097c:	48000c00 	.word	0x48000c00
 8000980:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D9_GPIO_Port, &GPIO_InitStruct);
 8000982:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000986:	4619      	mov	r1, r3
 8000988:	48ac      	ldr	r0, [pc, #688]	; (8000c3c <MX_GPIO_Init+0x5bc>)
 800098a:	f002 fcdb 	bl	8003344 <HAL_GPIO_Init>

  /*Configure GPIO pins : OCTOPSIM_P2_IO4_Pin OCTOSPIM_P2_IO5_Pin OCTOSPI_P2_IO3_Pin */
  GPIO_InitStruct.Pin = OCTOPSIM_P2_IO4_Pin|OCTOSPIM_P2_IO5_Pin|OCTOSPI_P2_IO3_Pin;
 800098e:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000992:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000994:	2302      	movs	r3, #2
 8000996:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000998:	2300      	movs	r3, #0
 800099a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800099c:	2303      	movs	r3, #3
 800099e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPIM_P2;
 80009a0:	2305      	movs	r3, #5
 80009a2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80009a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009a8:	4619      	mov	r1, r3
 80009aa:	48a4      	ldr	r0, [pc, #656]	; (8000c3c <MX_GPIO_Init+0x5bc>)
 80009ac:	f002 fcca 	bl	8003344 <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI1_MCKA_Pin SAI1_SDA_Pin SAI1_SCKA_Pin */
  GPIO_InitStruct.Pin = SAI1_MCKA_Pin|SAI1_SDA_Pin|SAI1_SCKA_Pin;
 80009b0:	2364      	movs	r3, #100	; 0x64
 80009b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b4:	2302      	movs	r3, #2
 80009b6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b8:	2300      	movs	r3, #0
 80009ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009bc:	2300      	movs	r3, #0
 80009be:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 80009c0:	230d      	movs	r3, #13
 80009c2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80009c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009c8:	4619      	mov	r1, r3
 80009ca:	489d      	ldr	r0, [pc, #628]	; (8000c40 <MX_GPIO_Init+0x5c0>)
 80009cc:	f002 fcba 	bl	8003344 <HAL_GPIO_Init>

  /*Configure GPIO pin : PSRAM_ADV_Pin */
  GPIO_InitStruct.Pin = PSRAM_ADV_Pin;
 80009d0:	2380      	movs	r3, #128	; 0x80
 80009d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d4:	2302      	movs	r3, #2
 80009d6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d8:	2300      	movs	r3, #0
 80009da:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009dc:	2303      	movs	r3, #3
 80009de:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80009e0:	230c      	movs	r3, #12
 80009e2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(PSRAM_ADV_GPIO_Port, &GPIO_InitStruct);
 80009e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009e8:	4619      	mov	r1, r3
 80009ea:	4896      	ldr	r0, [pc, #600]	; (8000c44 <MX_GPIO_Init+0x5c4>)
 80009ec:	f002 fcaa 	bl	8003344 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTGFS_ID_Pin */
  GPIO_InitStruct.Pin = USB_OTGFS_ID_Pin;
 80009f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f6:	2302      	movs	r3, #2
 80009f8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fa:	2300      	movs	r3, #0
 80009fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009fe:	2303      	movs	r3, #3
 8000a00:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000a02:	230a      	movs	r3, #10
 8000a04:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_OTGFS_ID_GPIO_Port, &GPIO_InitStruct);
 8000a06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a10:	f002 fc98 	bl	8003344 <HAL_GPIO_Init>

  /*Configure GPIO pin : JOY_SEL_Pin */
  GPIO_InitStruct.Pin = JOY_SEL_Pin;
 8000a14:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a18:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a1a:	2301      	movs	r3, #1
 8000a1c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a22:	2300      	movs	r3, #0
 8000a24:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(JOY_SEL_GPIO_Port, &GPIO_InitStruct);
 8000a26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	4886      	ldr	r0, [pc, #536]	; (8000c48 <MX_GPIO_Init+0x5c8>)
 8000a2e:	f002 fc89 	bl	8003344 <HAL_GPIO_Init>

  /*Configure GPIO pins : PSRAM_A2_Pin PSRAM_A1_Pin PSRAM_A0_Pin PSRAM_A3_Pin
                           PSRAM_A4_Pin PSRAM_A5_Pin PSRAM_A9_Pin PSRAM_A8_Pin
                           PSRAM_A7_Pin PSRAM_A6_Pin */
  GPIO_InitStruct.Pin = PSRAM_A2_Pin|PSRAM_A1_Pin|PSRAM_A0_Pin|PSRAM_A3_Pin
 8000a32:	f24f 033f 	movw	r3, #61503	; 0xf03f
 8000a36:	627b      	str	r3, [r7, #36]	; 0x24
                          |PSRAM_A4_Pin|PSRAM_A5_Pin|PSRAM_A9_Pin|PSRAM_A8_Pin
                          |PSRAM_A7_Pin|PSRAM_A6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a38:	2302      	movs	r3, #2
 8000a3a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a40:	2303      	movs	r3, #3
 8000a42:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000a44:	230c      	movs	r3, #12
 8000a46:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000a48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	487f      	ldr	r0, [pc, #508]	; (8000c4c <MX_GPIO_Init+0x5cc>)
 8000a50:	f002 fc78 	bl	8003344 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_14_Pin ARD_15_Pin */
  GPIO_InitStruct.Pin = ARD_14_Pin|ARD_15_Pin;
 8000a54:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000a58:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a5a:	2312      	movs	r3, #18
 8000a5c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a62:	2303      	movs	r3, #3
 8000a64:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000a66:	2304      	movs	r3, #4
 8000a68:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a6e:	4619      	mov	r1, r3
 8000a70:	4877      	ldr	r0, [pc, #476]	; (8000c50 <MX_GPIO_Init+0x5d0>)
 8000a72:	f002 fc67 	bl	8003344 <HAL_GPIO_Init>

  /*Configure GPIO pin : STMOD_INT_Pin */
  GPIO_InitStruct.Pin = STMOD_INT_Pin;
 8000a76:	2340      	movs	r3, #64	; 0x40
 8000a78:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a7a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a7e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a80:	2300      	movs	r3, #0
 8000a82:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(STMOD_INT_GPIO_Port, &GPIO_InitStruct);
 8000a84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a88:	4619      	mov	r1, r3
 8000a8a:	486f      	ldr	r0, [pc, #444]	; (8000c48 <MX_GPIO_Init+0x5c8>)
 8000a8c:	f002 fc5a 	bl	8003344 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C1_SDA_Pin */
  GPIO_InitStruct.Pin = I2C1_SDA_Pin;
 8000a90:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a94:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a96:	2312      	movs	r3, #18
 8000a98:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a9e:	2303      	movs	r3, #3
 8000aa0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000aa2:	2304      	movs	r3, #4
 8000aa4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(I2C1_SDA_GPIO_Port, &GPIO_InitStruct);
 8000aa6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aaa:	4619      	mov	r1, r3
 8000aac:	4868      	ldr	r0, [pc, #416]	; (8000c50 <MX_GPIO_Init+0x5d0>)
 8000aae:	f002 fc49 	bl	8003344 <HAL_GPIO_Init>

  /*Configure GPIO pins : PSRAM_A14_Pin PSRAM_A13_Pin PSRAM_A15_Pin PSRAM_A11_Pin
                           PSRAM_A12_Pin PSRAM_A10_Pin */
  GPIO_InitStruct.Pin = PSRAM_A14_Pin|PSRAM_A13_Pin|PSRAM_A15_Pin|PSRAM_A11_Pin
 8000ab2:	233f      	movs	r3, #63	; 0x3f
 8000ab4:	627b      	str	r3, [r7, #36]	; 0x24
                          |PSRAM_A12_Pin|PSRAM_A10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab6:	2302      	movs	r3, #2
 8000ab8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aba:	2300      	movs	r3, #0
 8000abc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000abe:	2303      	movs	r3, #3
 8000ac0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000ac2:	230c      	movs	r3, #12
 8000ac4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ac6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aca:	4619      	mov	r1, r3
 8000acc:	4860      	ldr	r0, [pc, #384]	; (8000c50 <MX_GPIO_Init+0x5d0>)
 8000ace:	f002 fc39 	bl	8003344 <HAL_GPIO_Init>

  /*Configure GPIO pins : DFDATIN3_Pin DF_CKOUT_Pin */
  GPIO_InitStruct.Pin = DFDATIN3_Pin|DF_CKOUT_Pin;
 8000ad2:	2384      	movs	r3, #132	; 0x84
 8000ad4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad6:	2302      	movs	r3, #2
 8000ad8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ada:	2300      	movs	r3, #0
 8000adc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000ae2:	2306      	movs	r3, #6
 8000ae4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ae6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aea:	4619      	mov	r1, r3
 8000aec:	4856      	ldr	r0, [pc, #344]	; (8000c48 <MX_GPIO_Init+0x5c8>)
 8000aee:	f002 fc29 	bl	8003344 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART3_RX_Pin USART3_TX_Pin */
  GPIO_InitStruct.Pin = USART3_RX_Pin|USART3_TX_Pin;
 8000af2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000af6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af8:	2302      	movs	r3, #2
 8000afa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afc:	2300      	movs	r3, #0
 8000afe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b00:	2303      	movs	r3, #3
 8000b02:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000b04:	2307      	movs	r3, #7
 8000b06:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	484d      	ldr	r0, [pc, #308]	; (8000c44 <MX_GPIO_Init+0x5c4>)
 8000b10:	f002 fc18 	bl	8003344 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D0_Pin ARD_D1_Pin */
  GPIO_InitStruct.Pin = ARD_D0_Pin|ARD_D1_Pin;
 8000b14:	2303      	movs	r3, #3
 8000b16:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b18:	2302      	movs	r3, #2
 8000b1a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b20:	2303      	movs	r3, #3
 8000b22:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000b24:	2308      	movs	r3, #8
 8000b26:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	4846      	ldr	r0, [pc, #280]	; (8000c48 <MX_GPIO_Init+0x5c8>)
 8000b30:	f002 fc08 	bl	8003344 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000b34:	2320      	movs	r3, #32
 8000b36:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b44:	4619      	mov	r1, r3
 8000b46:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b4a:	f002 fbfb 	bl	8003344 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_CS_Pin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin;
 8000b4e:	2340      	movs	r3, #64	; 0x40
 8000b50:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b52:	2301      	movs	r3, #1
 8000b54:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b56:	2300      	movs	r3, #0
 8000b58:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 8000b5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b62:	4619      	mov	r1, r3
 8000b64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b68:	f002 fbec 	bl	8003344 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI_MOSI_Pin SPI2_MISO_Pin SPI2_CLK_Pin */
  GPIO_InitStruct.Pin = SPI_MOSI_Pin|SPI2_MISO_Pin|SPI2_CLK_Pin;
 8000b6c:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000b70:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b72:	2302      	movs	r3, #2
 8000b74:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b76:	2300      	movs	r3, #0
 8000b78:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b7a:	2303      	movs	r3, #3
 8000b7c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b7e:	2305      	movs	r3, #5
 8000b80:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b86:	4619      	mov	r1, r3
 8000b88:	482e      	ldr	r0, [pc, #184]	; (8000c44 <MX_GPIO_Init+0x5c4>)
 8000b8a:	f002 fbdb 	bl	8003344 <HAL_GPIO_Init>

  /*Configure GPIO pin : USART2_RX_Pin */
  GPIO_InitStruct.Pin = USART2_RX_Pin;
 8000b8e:	2308      	movs	r3, #8
 8000b90:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b92:	2302      	movs	r3, #2
 8000b94:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b96:	2300      	movs	r3, #0
 8000b98:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b9a:	2303      	movs	r3, #3
 8000b9c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b9e:	2307      	movs	r3, #7
 8000ba0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USART2_RX_GPIO_Port, &GPIO_InitStruct);
 8000ba2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bac:	f002 fbca 	bl	8003344 <HAL_GPIO_Init>

  /*Configure GPIO pin : DSI_TE_Pin */
  GPIO_InitStruct.Pin = DSI_TE_Pin;
 8000bb0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000bb4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb6:	2302      	movs	r3, #2
 8000bb8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_DSI;
 8000bc2:	230b      	movs	r3, #11
 8000bc4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(DSI_TE_GPIO_Port, &GPIO_InitStruct);
 8000bc6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bca:	4619      	mov	r1, r3
 8000bcc:	481f      	ldr	r0, [pc, #124]	; (8000c4c <MX_GPIO_Init+0x5cc>)
 8000bce:	f002 fbb9 	bl	8003344 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_HSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin;
 8000bd2:	2310      	movs	r3, #16
 8000bd4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd6:	2302      	movs	r3, #2
 8000bd8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bde:	2300      	movs	r3, #0
 8000be0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 8000be2:	230a      	movs	r3, #10
 8000be4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(DCMI_HSYNC_GPIO_Port, &GPIO_InitStruct);
 8000be6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bea:	4619      	mov	r1, r3
 8000bec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bf0:	f002 fba8 	bl	8003344 <HAL_GPIO_Init>

  /*Configure GPIO pin : MFX_WAKEUP_Pin */
  GPIO_InitStruct.Pin = MFX_WAKEUP_Pin;
 8000bf4:	2304      	movs	r3, #4
 8000bf6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c00:	2300      	movs	r3, #0
 8000c02:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(MFX_WAKEUP_GPIO_Port, &GPIO_InitStruct);
 8000c04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c08:	4619      	mov	r1, r3
 8000c0a:	480e      	ldr	r0, [pc, #56]	; (8000c44 <MX_GPIO_Init+0x5c4>)
 8000c0c:	f002 fb9a 	bl	8003344 <HAL_GPIO_Init>

  /*Configure GPIO pin : DFDATIN1_Pin */
  GPIO_InitStruct.Pin = DFDATIN1_Pin;
 8000c10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c14:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c16:	2302      	movs	r3, #2
 8000c18:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000c22:	2306      	movs	r3, #6
 8000c24:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(DFDATIN1_GPIO_Port, &GPIO_InitStruct);
 8000c26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	4805      	ldr	r0, [pc, #20]	; (8000c44 <MX_GPIO_Init+0x5c4>)
 8000c2e:	f002 fb89 	bl	8003344 <HAL_GPIO_Init>

}
 8000c32:	bf00      	nop
 8000c34:	3738      	adds	r7, #56	; 0x38
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	48001c00 	.word	0x48001c00
 8000c40:	48001000 	.word	0x48001000
 8000c44:	48000400 	.word	0x48000400
 8000c48:	48000800 	.word	0x48000800
 8000c4c:	48001400 	.word	0x48001400
 8000c50:	48001800 	.word	0x48001800

08000c54 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  for(;;)
  {
    osDelay(1);
 8000c5c:	2001      	movs	r0, #1
 8000c5e:	f008 fc74 	bl	800954a <osDelay>
 8000c62:	e7fb      	b.n	8000c5c <StartDefaultTask+0x8>

08000c64 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b082      	sub	sp, #8
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	4a04      	ldr	r2, [pc, #16]	; (8000c84 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c72:	4293      	cmp	r3, r2
 8000c74:	d101      	bne.n	8000c7a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000c76:	f000 faeb 	bl	8001250 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c7a:	bf00      	nop
 8000c7c:	3708      	adds	r7, #8
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	40001000 	.word	0x40001000

08000c88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c8c:	b672      	cpsid	i
}
 8000c8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c90:	e7fe      	b.n	8000c90 <Error_Handler+0x8>
	...

08000c94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c9a:	4b11      	ldr	r3, [pc, #68]	; (8000ce0 <HAL_MspInit+0x4c>)
 8000c9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c9e:	4a10      	ldr	r2, [pc, #64]	; (8000ce0 <HAL_MspInit+0x4c>)
 8000ca0:	f043 0301 	orr.w	r3, r3, #1
 8000ca4:	6613      	str	r3, [r2, #96]	; 0x60
 8000ca6:	4b0e      	ldr	r3, [pc, #56]	; (8000ce0 <HAL_MspInit+0x4c>)
 8000ca8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000caa:	f003 0301 	and.w	r3, r3, #1
 8000cae:	607b      	str	r3, [r7, #4]
 8000cb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cb2:	4b0b      	ldr	r3, [pc, #44]	; (8000ce0 <HAL_MspInit+0x4c>)
 8000cb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cb6:	4a0a      	ldr	r2, [pc, #40]	; (8000ce0 <HAL_MspInit+0x4c>)
 8000cb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cbc:	6593      	str	r3, [r2, #88]	; 0x58
 8000cbe:	4b08      	ldr	r3, [pc, #32]	; (8000ce0 <HAL_MspInit+0x4c>)
 8000cc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cc6:	603b      	str	r3, [r7, #0]
 8000cc8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000cca:	2200      	movs	r2, #0
 8000ccc:	210f      	movs	r1, #15
 8000cce:	f06f 0001 	mvn.w	r0, #1
 8000cd2:	f002 f89b 	bl	8002e0c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cd6:	bf00      	nop
 8000cd8:	3708      	adds	r7, #8
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	40021000 	.word	0x40021000

08000ce4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b0b2      	sub	sp, #200	; 0xc8
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cec:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	601a      	str	r2, [r3, #0]
 8000cf4:	605a      	str	r2, [r3, #4]
 8000cf6:	609a      	str	r2, [r3, #8]
 8000cf8:	60da      	str	r2, [r3, #12]
 8000cfa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000cfc:	f107 0318 	add.w	r3, r7, #24
 8000d00:	229c      	movs	r2, #156	; 0x9c
 8000d02:	2100      	movs	r1, #0
 8000d04:	4618      	mov	r0, r3
 8000d06:	f00c f845 	bl	800cd94 <memset>
  if(hadc->Instance==ADC1)
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	4a5c      	ldr	r2, [pc, #368]	; (8000e80 <HAL_ADC_MspInit+0x19c>)
 8000d10:	4293      	cmp	r3, r2
 8000d12:	f040 80b1 	bne.w	8000e78 <HAL_ADC_MspInit+0x194>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000d16:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000d1a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000d1c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000d20:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 8000d24:	2303      	movs	r3, #3
 8000d26:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 2;
 8000d28:	2302      	movs	r3, #2
 8000d2a:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8000d2c:	2308      	movs	r3, #8
 8000d2e:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8000d30:	2302      	movs	r3, #2
 8000d32:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000d34:	2302      	movs	r3, #2
 8000d36:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000d38:	2302      	movs	r3, #2
 8000d3a:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000d3c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000d40:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d42:	f107 0318 	add.w	r3, r7, #24
 8000d46:	4618      	mov	r0, r3
 8000d48:	f003 fc98 	bl	800467c <HAL_RCCEx_PeriphCLKConfig>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d001      	beq.n	8000d56 <HAL_ADC_MspInit+0x72>
    {
      Error_Handler();
 8000d52:	f7ff ff99 	bl	8000c88 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000d56:	4b4b      	ldr	r3, [pc, #300]	; (8000e84 <HAL_ADC_MspInit+0x1a0>)
 8000d58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d5a:	4a4a      	ldr	r2, [pc, #296]	; (8000e84 <HAL_ADC_MspInit+0x1a0>)
 8000d5c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000d60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d62:	4b48      	ldr	r3, [pc, #288]	; (8000e84 <HAL_ADC_MspInit+0x1a0>)
 8000d64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d66:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000d6a:	617b      	str	r3, [r7, #20]
 8000d6c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d6e:	4b45      	ldr	r3, [pc, #276]	; (8000e84 <HAL_ADC_MspInit+0x1a0>)
 8000d70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d72:	4a44      	ldr	r2, [pc, #272]	; (8000e84 <HAL_ADC_MspInit+0x1a0>)
 8000d74:	f043 0304 	orr.w	r3, r3, #4
 8000d78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d7a:	4b42      	ldr	r3, [pc, #264]	; (8000e84 <HAL_ADC_MspInit+0x1a0>)
 8000d7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d7e:	f003 0304 	and.w	r3, r3, #4
 8000d82:	613b      	str	r3, [r7, #16]
 8000d84:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d86:	4b3f      	ldr	r3, [pc, #252]	; (8000e84 <HAL_ADC_MspInit+0x1a0>)
 8000d88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d8a:	4a3e      	ldr	r2, [pc, #248]	; (8000e84 <HAL_ADC_MspInit+0x1a0>)
 8000d8c:	f043 0301 	orr.w	r3, r3, #1
 8000d90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d92:	4b3c      	ldr	r3, [pc, #240]	; (8000e84 <HAL_ADC_MspInit+0x1a0>)
 8000d94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d96:	f003 0301 	and.w	r3, r3, #1
 8000d9a:	60fb      	str	r3, [r7, #12]
 8000d9c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d9e:	4b39      	ldr	r3, [pc, #228]	; (8000e84 <HAL_ADC_MspInit+0x1a0>)
 8000da0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000da2:	4a38      	ldr	r2, [pc, #224]	; (8000e84 <HAL_ADC_MspInit+0x1a0>)
 8000da4:	f043 0302 	orr.w	r3, r3, #2
 8000da8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000daa:	4b36      	ldr	r3, [pc, #216]	; (8000e84 <HAL_ADC_MspInit+0x1a0>)
 8000dac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dae:	f003 0302 	and.w	r3, r3, #2
 8000db2:	60bb      	str	r3, [r7, #8]
 8000db4:	68bb      	ldr	r3, [r7, #8]
    PA1     ------> ADC1_IN6
    PA7     ------> ADC1_IN12
    PA2     ------> ADC1_IN7
    PB0     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = ARD_A2_Pin|ARD_A1_Pin;
 8000db6:	2318      	movs	r3, #24
 8000db8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000dbc:	230b      	movs	r3, #11
 8000dbe:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dc8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000dcc:	4619      	mov	r1, r3
 8000dce:	482e      	ldr	r0, [pc, #184]	; (8000e88 <HAL_ADC_MspInit+0x1a4>)
 8000dd0:	f002 fab8 	bl	8003344 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|ARD_A0_Pin|GPIO_PIN_2;
 8000dd4:	2387      	movs	r3, #135	; 0x87
 8000dd6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000dda:	230b      	movs	r3, #11
 8000ddc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de0:	2300      	movs	r3, #0
 8000de2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000de6:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000dea:	4619      	mov	r1, r3
 8000dec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000df0:	f002 faa8 	bl	8003344 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_A3_Pin;
 8000df4:	2301      	movs	r3, #1
 8000df6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000dfa:	230b      	movs	r3, #11
 8000dfc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e00:	2300      	movs	r3, #0
 8000e02:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(ARD_A3_GPIO_Port, &GPIO_InitStruct);
 8000e06:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	481f      	ldr	r0, [pc, #124]	; (8000e8c <HAL_ADC_MspInit+0x1a8>)
 8000e0e:	f002 fa99 	bl	8003344 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000e12:	4b1f      	ldr	r3, [pc, #124]	; (8000e90 <HAL_ADC_MspInit+0x1ac>)
 8000e14:	4a1f      	ldr	r2, [pc, #124]	; (8000e94 <HAL_ADC_MspInit+0x1b0>)
 8000e16:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000e18:	4b1d      	ldr	r3, [pc, #116]	; (8000e90 <HAL_ADC_MspInit+0x1ac>)
 8000e1a:	2205      	movs	r2, #5
 8000e1c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e1e:	4b1c      	ldr	r3, [pc, #112]	; (8000e90 <HAL_ADC_MspInit+0x1ac>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e24:	4b1a      	ldr	r3, [pc, #104]	; (8000e90 <HAL_ADC_MspInit+0x1ac>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000e2a:	4b19      	ldr	r3, [pc, #100]	; (8000e90 <HAL_ADC_MspInit+0x1ac>)
 8000e2c:	2280      	movs	r2, #128	; 0x80
 8000e2e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000e30:	4b17      	ldr	r3, [pc, #92]	; (8000e90 <HAL_ADC_MspInit+0x1ac>)
 8000e32:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e36:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000e38:	4b15      	ldr	r3, [pc, #84]	; (8000e90 <HAL_ADC_MspInit+0x1ac>)
 8000e3a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e3e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000e40:	4b13      	ldr	r3, [pc, #76]	; (8000e90 <HAL_ADC_MspInit+0x1ac>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000e46:	4b12      	ldr	r3, [pc, #72]	; (8000e90 <HAL_ADC_MspInit+0x1ac>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000e4c:	4810      	ldr	r0, [pc, #64]	; (8000e90 <HAL_ADC_MspInit+0x1ac>)
 8000e4e:	f002 f807 	bl	8002e60 <HAL_DMA_Init>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d001      	beq.n	8000e5c <HAL_ADC_MspInit+0x178>
    {
      Error_Handler();
 8000e58:	f7ff ff16 	bl	8000c88 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	4a0c      	ldr	r2, [pc, #48]	; (8000e90 <HAL_ADC_MspInit+0x1ac>)
 8000e60:	651a      	str	r2, [r3, #80]	; 0x50
 8000e62:	4a0b      	ldr	r2, [pc, #44]	; (8000e90 <HAL_ADC_MspInit+0x1ac>)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 5, 0);
 8000e68:	2200      	movs	r2, #0
 8000e6a:	2105      	movs	r1, #5
 8000e6c:	2012      	movs	r0, #18
 8000e6e:	f001 ffcd 	bl	8002e0c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8000e72:	2012      	movs	r0, #18
 8000e74:	f001 ffe6 	bl	8002e44 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000e78:	bf00      	nop
 8000e7a:	37c8      	adds	r7, #200	; 0xc8
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	50040000 	.word	0x50040000
 8000e84:	40021000 	.word	0x40021000
 8000e88:	48000800 	.word	0x48000800
 8000e8c:	48000400 	.word	0x48000400
 8000e90:	20000184 	.word	0x20000184
 8000e94:	40020008 	.word	0x40020008

08000e98 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b08a      	sub	sp, #40	; 0x28
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea0:	f107 0314 	add.w	r3, r7, #20
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	601a      	str	r2, [r3, #0]
 8000ea8:	605a      	str	r2, [r3, #4]
 8000eaa:	609a      	str	r2, [r3, #8]
 8000eac:	60da      	str	r2, [r3, #12]
 8000eae:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4a18      	ldr	r2, [pc, #96]	; (8000f18 <HAL_CAN_MspInit+0x80>)
 8000eb6:	4293      	cmp	r3, r2
 8000eb8:	d129      	bne.n	8000f0e <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000eba:	4b18      	ldr	r3, [pc, #96]	; (8000f1c <HAL_CAN_MspInit+0x84>)
 8000ebc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ebe:	4a17      	ldr	r2, [pc, #92]	; (8000f1c <HAL_CAN_MspInit+0x84>)
 8000ec0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000ec4:	6593      	str	r3, [r2, #88]	; 0x58
 8000ec6:	4b15      	ldr	r3, [pc, #84]	; (8000f1c <HAL_CAN_MspInit+0x84>)
 8000ec8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ece:	613b      	str	r3, [r7, #16]
 8000ed0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ed2:	4b12      	ldr	r3, [pc, #72]	; (8000f1c <HAL_CAN_MspInit+0x84>)
 8000ed4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ed6:	4a11      	ldr	r2, [pc, #68]	; (8000f1c <HAL_CAN_MspInit+0x84>)
 8000ed8:	f043 0301 	orr.w	r3, r3, #1
 8000edc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ede:	4b0f      	ldr	r3, [pc, #60]	; (8000f1c <HAL_CAN_MspInit+0x84>)
 8000ee0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ee2:	f003 0301 	and.w	r3, r3, #1
 8000ee6:	60fb      	str	r3, [r7, #12]
 8000ee8:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA12     ------> CAN1_TX
    PA11     ------> CAN1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11;
 8000eea:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000eee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef0:	2302      	movs	r3, #2
 8000ef2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ef8:	2303      	movs	r3, #3
 8000efa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000efc:	2309      	movs	r3, #9
 8000efe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f00:	f107 0314 	add.w	r3, r7, #20
 8000f04:	4619      	mov	r1, r3
 8000f06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f0a:	f002 fa1b 	bl	8003344 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000f0e:	bf00      	nop
 8000f10:	3728      	adds	r7, #40	; 0x28
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	40006400 	.word	0x40006400
 8000f1c:	40021000 	.word	0x40021000

08000f20 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b0b2      	sub	sp, #200	; 0xc8
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f28:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	601a      	str	r2, [r3, #0]
 8000f30:	605a      	str	r2, [r3, #4]
 8000f32:	609a      	str	r2, [r3, #8]
 8000f34:	60da      	str	r2, [r3, #12]
 8000f36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f38:	f107 0318 	add.w	r3, r7, #24
 8000f3c:	229c      	movs	r2, #156	; 0x9c
 8000f3e:	2100      	movs	r1, #0
 8000f40:	4618      	mov	r0, r3
 8000f42:	f00b ff27 	bl	800cd94 <memset>
  if(hsd->Instance==SDMMC1)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	4a37      	ldr	r2, [pc, #220]	; (8001028 <HAL_SD_MspInit+0x108>)
 8000f4c:	4293      	cmp	r3, r2
 8000f4e:	d167      	bne.n	8001020 <HAL_SD_MspInit+0x100>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1;
 8000f50:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000f54:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_PLLP;
 8000f56:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000f5a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f5e:	f107 0318 	add.w	r3, r7, #24
 8000f62:	4618      	mov	r0, r3
 8000f64:	f003 fb8a 	bl	800467c <HAL_RCCEx_PeriphCLKConfig>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d001      	beq.n	8000f72 <HAL_SD_MspInit+0x52>
    {
      Error_Handler();
 8000f6e:	f7ff fe8b 	bl	8000c88 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8000f72:	4b2e      	ldr	r3, [pc, #184]	; (800102c <HAL_SD_MspInit+0x10c>)
 8000f74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f76:	4a2d      	ldr	r2, [pc, #180]	; (800102c <HAL_SD_MspInit+0x10c>)
 8000f78:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000f7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f7e:	4b2b      	ldr	r3, [pc, #172]	; (800102c <HAL_SD_MspInit+0x10c>)
 8000f80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f86:	617b      	str	r3, [r7, #20]
 8000f88:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f8a:	4b28      	ldr	r3, [pc, #160]	; (800102c <HAL_SD_MspInit+0x10c>)
 8000f8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f8e:	4a27      	ldr	r2, [pc, #156]	; (800102c <HAL_SD_MspInit+0x10c>)
 8000f90:	f043 0308 	orr.w	r3, r3, #8
 8000f94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f96:	4b25      	ldr	r3, [pc, #148]	; (800102c <HAL_SD_MspInit+0x10c>)
 8000f98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f9a:	f003 0308 	and.w	r3, r3, #8
 8000f9e:	613b      	str	r3, [r7, #16]
 8000fa0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fa2:	4b22      	ldr	r3, [pc, #136]	; (800102c <HAL_SD_MspInit+0x10c>)
 8000fa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fa6:	4a21      	ldr	r2, [pc, #132]	; (800102c <HAL_SD_MspInit+0x10c>)
 8000fa8:	f043 0304 	orr.w	r3, r3, #4
 8000fac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fae:	4b1f      	ldr	r3, [pc, #124]	; (800102c <HAL_SD_MspInit+0x10c>)
 8000fb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fb2:	f003 0304 	and.w	r3, r3, #4
 8000fb6:	60fb      	str	r3, [r7, #12]
 8000fb8:	68fb      	ldr	r3, [r7, #12]
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PC8     ------> SDMMC1_D0
    PC9     ------> SDMMC1_D1
    */
    GPIO_InitStruct.Pin = uSD_CMD_Pin;
 8000fba:	2304      	movs	r3, #4
 8000fbc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc0:	2302      	movs	r3, #2
 8000fc2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fcc:	2303      	movs	r3, #3
 8000fce:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000fd2:	230c      	movs	r3, #12
 8000fd4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(uSD_CMD_GPIO_Port, &GPIO_InitStruct);
 8000fd8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000fdc:	4619      	mov	r1, r3
 8000fde:	4814      	ldr	r0, [pc, #80]	; (8001030 <HAL_SD_MspInit+0x110>)
 8000fe0:	f002 f9b0 	bl	8003344 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = uSD_D2_Pin|uSD_D3_Pin|uSD_CLK_Pin|uSD_D0_Pin
 8000fe4:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000fe8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
                          |uSD_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fec:	2302      	movs	r3, #2
 8000fee:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ff8:	2303      	movs	r3, #3
 8000ffa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000ffe:	230c      	movs	r3, #12
 8001000:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001004:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001008:	4619      	mov	r1, r3
 800100a:	480a      	ldr	r0, [pc, #40]	; (8001034 <HAL_SD_MspInit+0x114>)
 800100c:	f002 f99a 	bl	8003344 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 5, 0);
 8001010:	2200      	movs	r2, #0
 8001012:	2105      	movs	r1, #5
 8001014:	2031      	movs	r0, #49	; 0x31
 8001016:	f001 fef9 	bl	8002e0c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 800101a:	2031      	movs	r0, #49	; 0x31
 800101c:	f001 ff12 	bl	8002e44 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8001020:	bf00      	nop
 8001022:	37c8      	adds	r7, #200	; 0xc8
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	50062400 	.word	0x50062400
 800102c:	40021000 	.word	0x40021000
 8001030:	48000c00 	.word	0x48000c00
 8001034:	48000800 	.word	0x48000800

08001038 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b08e      	sub	sp, #56	; 0x38
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001040:	2300      	movs	r3, #0
 8001042:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001046:	4b34      	ldr	r3, [pc, #208]	; (8001118 <HAL_InitTick+0xe0>)
 8001048:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800104a:	4a33      	ldr	r2, [pc, #204]	; (8001118 <HAL_InitTick+0xe0>)
 800104c:	f043 0310 	orr.w	r3, r3, #16
 8001050:	6593      	str	r3, [r2, #88]	; 0x58
 8001052:	4b31      	ldr	r3, [pc, #196]	; (8001118 <HAL_InitTick+0xe0>)
 8001054:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001056:	f003 0310 	and.w	r3, r3, #16
 800105a:	60fb      	str	r3, [r7, #12]
 800105c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800105e:	f107 0210 	add.w	r2, r7, #16
 8001062:	f107 0314 	add.w	r3, r7, #20
 8001066:	4611      	mov	r1, r2
 8001068:	4618      	mov	r0, r3
 800106a:	f003 fa17 	bl	800449c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800106e:	6a3b      	ldr	r3, [r7, #32]
 8001070:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001074:	2b00      	cmp	r3, #0
 8001076:	d103      	bne.n	8001080 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001078:	f003 f9e4 	bl	8004444 <HAL_RCC_GetPCLK1Freq>
 800107c:	6378      	str	r0, [r7, #52]	; 0x34
 800107e:	e004      	b.n	800108a <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001080:	f003 f9e0 	bl	8004444 <HAL_RCC_GetPCLK1Freq>
 8001084:	4603      	mov	r3, r0
 8001086:	005b      	lsls	r3, r3, #1
 8001088:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800108a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800108c:	4a23      	ldr	r2, [pc, #140]	; (800111c <HAL_InitTick+0xe4>)
 800108e:	fba2 2303 	umull	r2, r3, r2, r3
 8001092:	0c9b      	lsrs	r3, r3, #18
 8001094:	3b01      	subs	r3, #1
 8001096:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001098:	4b21      	ldr	r3, [pc, #132]	; (8001120 <HAL_InitTick+0xe8>)
 800109a:	4a22      	ldr	r2, [pc, #136]	; (8001124 <HAL_InitTick+0xec>)
 800109c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800109e:	4b20      	ldr	r3, [pc, #128]	; (8001120 <HAL_InitTick+0xe8>)
 80010a0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80010a4:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80010a6:	4a1e      	ldr	r2, [pc, #120]	; (8001120 <HAL_InitTick+0xe8>)
 80010a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010aa:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80010ac:	4b1c      	ldr	r3, [pc, #112]	; (8001120 <HAL_InitTick+0xe8>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010b2:	4b1b      	ldr	r3, [pc, #108]	; (8001120 <HAL_InitTick+0xe8>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010b8:	4b19      	ldr	r3, [pc, #100]	; (8001120 <HAL_InitTick+0xe8>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80010be:	4818      	ldr	r0, [pc, #96]	; (8001120 <HAL_InitTick+0xe8>)
 80010c0:	f006 fd7b 	bl	8007bba <HAL_TIM_Base_Init>
 80010c4:	4603      	mov	r3, r0
 80010c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80010ca:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d11b      	bne.n	800110a <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80010d2:	4813      	ldr	r0, [pc, #76]	; (8001120 <HAL_InitTick+0xe8>)
 80010d4:	f006 fdd2 	bl	8007c7c <HAL_TIM_Base_Start_IT>
 80010d8:	4603      	mov	r3, r0
 80010da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80010de:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d111      	bne.n	800110a <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80010e6:	2036      	movs	r0, #54	; 0x36
 80010e8:	f001 feac 	bl	8002e44 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	2b0f      	cmp	r3, #15
 80010f0:	d808      	bhi.n	8001104 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80010f2:	2200      	movs	r2, #0
 80010f4:	6879      	ldr	r1, [r7, #4]
 80010f6:	2036      	movs	r0, #54	; 0x36
 80010f8:	f001 fe88 	bl	8002e0c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80010fc:	4a0a      	ldr	r2, [pc, #40]	; (8001128 <HAL_InitTick+0xf0>)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	6013      	str	r3, [r2, #0]
 8001102:	e002      	b.n	800110a <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8001104:	2301      	movs	r3, #1
 8001106:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800110a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800110e:	4618      	mov	r0, r3
 8001110:	3738      	adds	r7, #56	; 0x38
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	40021000 	.word	0x40021000
 800111c:	431bde83 	.word	0x431bde83
 8001120:	20000358 	.word	0x20000358
 8001124:	40001000 	.word	0x40001000
 8001128:	20000004 	.word	0x20000004

0800112c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001130:	e7fe      	b.n	8001130 <NMI_Handler+0x4>

08001132 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001132:	b480      	push	{r7}
 8001134:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001136:	e7fe      	b.n	8001136 <HardFault_Handler+0x4>

08001138 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800113c:	e7fe      	b.n	800113c <MemManage_Handler+0x4>

0800113e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800113e:	b480      	push	{r7}
 8001140:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001142:	e7fe      	b.n	8001142 <BusFault_Handler+0x4>

08001144 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001148:	e7fe      	b.n	8001148 <UsageFault_Handler+0x4>

0800114a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800114a:	b480      	push	{r7}
 800114c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800114e:	bf00      	nop
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr

08001158 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800115c:	4802      	ldr	r0, [pc, #8]	; (8001168 <DMA1_Channel1_IRQHandler+0x10>)
 800115e:	f001 ffa2 	bl	80030a6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001162:	bf00      	nop
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	20000184 	.word	0x20000184

0800116c <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001170:	4802      	ldr	r0, [pc, #8]	; (800117c <ADC1_IRQHandler+0x10>)
 8001172:	f000 fc6f 	bl	8001a54 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8001176:	bf00      	nop
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	2000011c 	.word	0x2000011c

08001180 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8001184:	4802      	ldr	r0, [pc, #8]	; (8001190 <SDMMC1_IRQHandler+0x10>)
 8001186:	f005 fa9b 	bl	80066c0 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 800118a:	bf00      	nop
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	2000020c 	.word	0x2000020c

08001194 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001198:	4802      	ldr	r0, [pc, #8]	; (80011a4 <TIM6_DAC_IRQHandler+0x10>)
 800119a:	f006 fddf 	bl	8007d5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800119e:	bf00      	nop
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	20000358 	.word	0x20000358

080011a8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80011ac:	4b06      	ldr	r3, [pc, #24]	; (80011c8 <SystemInit+0x20>)
 80011ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011b2:	4a05      	ldr	r2, [pc, #20]	; (80011c8 <SystemInit+0x20>)
 80011b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80011bc:	bf00      	nop
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr
 80011c6:	bf00      	nop
 80011c8:	e000ed00 	.word	0xe000ed00

080011cc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80011cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001204 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80011d0:	f7ff ffea 	bl	80011a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011d4:	480c      	ldr	r0, [pc, #48]	; (8001208 <LoopForever+0x6>)
  ldr r1, =_edata
 80011d6:	490d      	ldr	r1, [pc, #52]	; (800120c <LoopForever+0xa>)
  ldr r2, =_sidata
 80011d8:	4a0d      	ldr	r2, [pc, #52]	; (8001210 <LoopForever+0xe>)
  movs r3, #0
 80011da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011dc:	e002      	b.n	80011e4 <LoopCopyDataInit>

080011de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011e2:	3304      	adds	r3, #4

080011e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011e8:	d3f9      	bcc.n	80011de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011ea:	4a0a      	ldr	r2, [pc, #40]	; (8001214 <LoopForever+0x12>)
  ldr r4, =_ebss
 80011ec:	4c0a      	ldr	r4, [pc, #40]	; (8001218 <LoopForever+0x16>)
  movs r3, #0
 80011ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011f0:	e001      	b.n	80011f6 <LoopFillZerobss>

080011f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011f4:	3204      	adds	r2, #4

080011f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011f8:	d3fb      	bcc.n	80011f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011fa:	f00b fd97 	bl	800cd2c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80011fe:	f7ff f8a9 	bl	8000354 <main>

08001202 <LoopForever>:

LoopForever:
    b LoopForever
 8001202:	e7fe      	b.n	8001202 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001204:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001208:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800120c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001210:	0800d0d4 	.word	0x0800d0d4
  ldr r2, =_sbss
 8001214:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001218:	20001d90 	.word	0x20001d90

0800121c <CAN1_RX0_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800121c:	e7fe      	b.n	800121c <CAN1_RX0_IRQHandler>

0800121e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800121e:	b580      	push	{r7, lr}
 8001220:	b082      	sub	sp, #8
 8001222:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001224:	2300      	movs	r3, #0
 8001226:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001228:	2003      	movs	r0, #3
 800122a:	f001 fde4 	bl	8002df6 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800122e:	200f      	movs	r0, #15
 8001230:	f7ff ff02 	bl	8001038 <HAL_InitTick>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d002      	beq.n	8001240 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800123a:	2301      	movs	r3, #1
 800123c:	71fb      	strb	r3, [r7, #7]
 800123e:	e001      	b.n	8001244 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001240:	f7ff fd28 	bl	8000c94 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001244:	79fb      	ldrb	r3, [r7, #7]
}
 8001246:	4618      	mov	r0, r3
 8001248:	3708      	adds	r7, #8
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
	...

08001250 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001254:	4b06      	ldr	r3, [pc, #24]	; (8001270 <HAL_IncTick+0x20>)
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	461a      	mov	r2, r3
 800125a:	4b06      	ldr	r3, [pc, #24]	; (8001274 <HAL_IncTick+0x24>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4413      	add	r3, r2
 8001260:	4a04      	ldr	r2, [pc, #16]	; (8001274 <HAL_IncTick+0x24>)
 8001262:	6013      	str	r3, [r2, #0]
}
 8001264:	bf00      	nop
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr
 800126e:	bf00      	nop
 8001270:	20000008 	.word	0x20000008
 8001274:	200003a4 	.word	0x200003a4

08001278 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
  return uwTick;
 800127c:	4b03      	ldr	r3, [pc, #12]	; (800128c <HAL_GetTick+0x14>)
 800127e:	681b      	ldr	r3, [r3, #0]
}
 8001280:	4618      	mov	r0, r3
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr
 800128a:	bf00      	nop
 800128c:	200003a4 	.word	0x200003a4

08001290 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b084      	sub	sp, #16
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001298:	f7ff ffee 	bl	8001278 <HAL_GetTick>
 800129c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012a8:	d005      	beq.n	80012b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80012aa:	4b0a      	ldr	r3, [pc, #40]	; (80012d4 <HAL_Delay+0x44>)
 80012ac:	781b      	ldrb	r3, [r3, #0]
 80012ae:	461a      	mov	r2, r3
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	4413      	add	r3, r2
 80012b4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012b6:	bf00      	nop
 80012b8:	f7ff ffde 	bl	8001278 <HAL_GetTick>
 80012bc:	4602      	mov	r2, r0
 80012be:	68bb      	ldr	r3, [r7, #8]
 80012c0:	1ad3      	subs	r3, r2, r3
 80012c2:	68fa      	ldr	r2, [r7, #12]
 80012c4:	429a      	cmp	r2, r3
 80012c6:	d8f7      	bhi.n	80012b8 <HAL_Delay+0x28>
  {
  }
}
 80012c8:	bf00      	nop
 80012ca:	bf00      	nop
 80012cc:	3710      	adds	r7, #16
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	20000008 	.word	0x20000008

080012d8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80012d8:	b480      	push	{r7}
 80012da:	b083      	sub	sp, #12
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
 80012e0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	689b      	ldr	r3, [r3, #8]
 80012e6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	431a      	orrs	r2, r3
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	609a      	str	r2, [r3, #8]
}
 80012f2:	bf00      	nop
 80012f4:	370c      	adds	r7, #12
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr

080012fe <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80012fe:	b480      	push	{r7}
 8001300:	b083      	sub	sp, #12
 8001302:	af00      	add	r7, sp, #0
 8001304:	6078      	str	r0, [r7, #4]
 8001306:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	689b      	ldr	r3, [r3, #8]
 800130c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	431a      	orrs	r2, r3
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	609a      	str	r2, [r3, #8]
}
 8001318:	bf00      	nop
 800131a:	370c      	adds	r7, #12
 800131c:	46bd      	mov	sp, r7
 800131e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001322:	4770      	bx	lr

08001324 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001324:	b480      	push	{r7}
 8001326:	b083      	sub	sp, #12
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	689b      	ldr	r3, [r3, #8]
 8001330:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001334:	4618      	mov	r0, r3
 8001336:	370c      	adds	r7, #12
 8001338:	46bd      	mov	sp, r7
 800133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133e:	4770      	bx	lr

08001340 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001340:	b480      	push	{r7}
 8001342:	b087      	sub	sp, #28
 8001344:	af00      	add	r7, sp, #0
 8001346:	60f8      	str	r0, [r7, #12]
 8001348:	60b9      	str	r1, [r7, #8]
 800134a:	607a      	str	r2, [r7, #4]
 800134c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	3360      	adds	r3, #96	; 0x60
 8001352:	461a      	mov	r2, r3
 8001354:	68bb      	ldr	r3, [r7, #8]
 8001356:	009b      	lsls	r3, r3, #2
 8001358:	4413      	add	r3, r2
 800135a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	681a      	ldr	r2, [r3, #0]
 8001360:	4b08      	ldr	r3, [pc, #32]	; (8001384 <LL_ADC_SetOffset+0x44>)
 8001362:	4013      	ands	r3, r2
 8001364:	687a      	ldr	r2, [r7, #4]
 8001366:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800136a:	683a      	ldr	r2, [r7, #0]
 800136c:	430a      	orrs	r2, r1
 800136e:	4313      	orrs	r3, r2
 8001370:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001378:	bf00      	nop
 800137a:	371c      	adds	r7, #28
 800137c:	46bd      	mov	sp, r7
 800137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001382:	4770      	bx	lr
 8001384:	03fff000 	.word	0x03fff000

08001388 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001388:	b480      	push	{r7}
 800138a:	b085      	sub	sp, #20
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
 8001390:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	3360      	adds	r3, #96	; 0x60
 8001396:	461a      	mov	r2, r3
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	009b      	lsls	r3, r3, #2
 800139c:	4413      	add	r3, r2
 800139e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80013a8:	4618      	mov	r0, r3
 80013aa:	3714      	adds	r7, #20
 80013ac:	46bd      	mov	sp, r7
 80013ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b2:	4770      	bx	lr

080013b4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b087      	sub	sp, #28
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	60f8      	str	r0, [r7, #12]
 80013bc:	60b9      	str	r1, [r7, #8]
 80013be:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	3360      	adds	r3, #96	; 0x60
 80013c4:	461a      	mov	r2, r3
 80013c6:	68bb      	ldr	r3, [r7, #8]
 80013c8:	009b      	lsls	r3, r3, #2
 80013ca:	4413      	add	r3, r2
 80013cc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80013ce:	697b      	ldr	r3, [r7, #20]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	431a      	orrs	r2, r3
 80013da:	697b      	ldr	r3, [r7, #20]
 80013dc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80013de:	bf00      	nop
 80013e0:	371c      	adds	r7, #28
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr

080013ea <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80013ea:	b480      	push	{r7}
 80013ec:	b083      	sub	sp, #12
 80013ee:	af00      	add	r7, sp, #0
 80013f0:	6078      	str	r0, [r7, #4]
 80013f2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	695b      	ldr	r3, [r3, #20]
 80013f8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	431a      	orrs	r2, r3
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	615a      	str	r2, [r3, #20]
}
 8001404:	bf00      	nop
 8001406:	370c      	adds	r7, #12
 8001408:	46bd      	mov	sp, r7
 800140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140e:	4770      	bx	lr

08001410 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001410:	b480      	push	{r7}
 8001412:	b083      	sub	sp, #12
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	68db      	ldr	r3, [r3, #12]
 800141c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001420:	2b00      	cmp	r3, #0
 8001422:	d101      	bne.n	8001428 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001424:	2301      	movs	r3, #1
 8001426:	e000      	b.n	800142a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001428:	2300      	movs	r3, #0
}
 800142a:	4618      	mov	r0, r3
 800142c:	370c      	adds	r7, #12
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr

08001436 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001436:	b480      	push	{r7}
 8001438:	b087      	sub	sp, #28
 800143a:	af00      	add	r7, sp, #0
 800143c:	60f8      	str	r0, [r7, #12]
 800143e:	60b9      	str	r1, [r7, #8]
 8001440:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	3330      	adds	r3, #48	; 0x30
 8001446:	461a      	mov	r2, r3
 8001448:	68bb      	ldr	r3, [r7, #8]
 800144a:	0a1b      	lsrs	r3, r3, #8
 800144c:	009b      	lsls	r3, r3, #2
 800144e:	f003 030c 	and.w	r3, r3, #12
 8001452:	4413      	add	r3, r2
 8001454:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001456:	697b      	ldr	r3, [r7, #20]
 8001458:	681a      	ldr	r2, [r3, #0]
 800145a:	68bb      	ldr	r3, [r7, #8]
 800145c:	f003 031f 	and.w	r3, r3, #31
 8001460:	211f      	movs	r1, #31
 8001462:	fa01 f303 	lsl.w	r3, r1, r3
 8001466:	43db      	mvns	r3, r3
 8001468:	401a      	ands	r2, r3
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	0e9b      	lsrs	r3, r3, #26
 800146e:	f003 011f 	and.w	r1, r3, #31
 8001472:	68bb      	ldr	r3, [r7, #8]
 8001474:	f003 031f 	and.w	r3, r3, #31
 8001478:	fa01 f303 	lsl.w	r3, r1, r3
 800147c:	431a      	orrs	r2, r3
 800147e:	697b      	ldr	r3, [r7, #20]
 8001480:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001482:	bf00      	nop
 8001484:	371c      	adds	r7, #28
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr

0800148e <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800148e:	b480      	push	{r7}
 8001490:	b083      	sub	sp, #12
 8001492:	af00      	add	r7, sp, #0
 8001494:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800149a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d101      	bne.n	80014a6 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80014a2:	2301      	movs	r3, #1
 80014a4:	e000      	b.n	80014a8 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80014a6:	2300      	movs	r3, #0
}
 80014a8:	4618      	mov	r0, r3
 80014aa:	370c      	adds	r7, #12
 80014ac:	46bd      	mov	sp, r7
 80014ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b2:	4770      	bx	lr

080014b4 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b087      	sub	sp, #28
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	60f8      	str	r0, [r7, #12]
 80014bc:	60b9      	str	r1, [r7, #8]
 80014be:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	3314      	adds	r3, #20
 80014c4:	461a      	mov	r2, r3
 80014c6:	68bb      	ldr	r3, [r7, #8]
 80014c8:	0e5b      	lsrs	r3, r3, #25
 80014ca:	009b      	lsls	r3, r3, #2
 80014cc:	f003 0304 	and.w	r3, r3, #4
 80014d0:	4413      	add	r3, r2
 80014d2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	681a      	ldr	r2, [r3, #0]
 80014d8:	68bb      	ldr	r3, [r7, #8]
 80014da:	0d1b      	lsrs	r3, r3, #20
 80014dc:	f003 031f 	and.w	r3, r3, #31
 80014e0:	2107      	movs	r1, #7
 80014e2:	fa01 f303 	lsl.w	r3, r1, r3
 80014e6:	43db      	mvns	r3, r3
 80014e8:	401a      	ands	r2, r3
 80014ea:	68bb      	ldr	r3, [r7, #8]
 80014ec:	0d1b      	lsrs	r3, r3, #20
 80014ee:	f003 031f 	and.w	r3, r3, #31
 80014f2:	6879      	ldr	r1, [r7, #4]
 80014f4:	fa01 f303 	lsl.w	r3, r1, r3
 80014f8:	431a      	orrs	r2, r3
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80014fe:	bf00      	nop
 8001500:	371c      	adds	r7, #28
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr
	...

0800150c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800150c:	b480      	push	{r7}
 800150e:	b085      	sub	sp, #20
 8001510:	af00      	add	r7, sp, #0
 8001512:	60f8      	str	r0, [r7, #12]
 8001514:	60b9      	str	r1, [r7, #8]
 8001516:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800151e:	68bb      	ldr	r3, [r7, #8]
 8001520:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001524:	43db      	mvns	r3, r3
 8001526:	401a      	ands	r2, r3
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	f003 0318 	and.w	r3, r3, #24
 800152e:	4908      	ldr	r1, [pc, #32]	; (8001550 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001530:	40d9      	lsrs	r1, r3
 8001532:	68bb      	ldr	r3, [r7, #8]
 8001534:	400b      	ands	r3, r1
 8001536:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800153a:	431a      	orrs	r2, r3
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001542:	bf00      	nop
 8001544:	3714      	adds	r7, #20
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr
 800154e:	bf00      	nop
 8001550:	0007ffff 	.word	0x0007ffff

08001554 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001554:	b480      	push	{r7}
 8001556:	b083      	sub	sp, #12
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	689b      	ldr	r3, [r3, #8]
 8001560:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001564:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001568:	687a      	ldr	r2, [r7, #4]
 800156a:	6093      	str	r3, [r2, #8]
}
 800156c:	bf00      	nop
 800156e:	370c      	adds	r7, #12
 8001570:	46bd      	mov	sp, r7
 8001572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001576:	4770      	bx	lr

08001578 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001578:	b480      	push	{r7}
 800157a:	b083      	sub	sp, #12
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	689b      	ldr	r3, [r3, #8]
 8001584:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001588:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800158c:	d101      	bne.n	8001592 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800158e:	2301      	movs	r3, #1
 8001590:	e000      	b.n	8001594 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001592:	2300      	movs	r3, #0
}
 8001594:	4618      	mov	r0, r3
 8001596:	370c      	adds	r7, #12
 8001598:	46bd      	mov	sp, r7
 800159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159e:	4770      	bx	lr

080015a0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b083      	sub	sp, #12
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	689b      	ldr	r3, [r3, #8]
 80015ac:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80015b0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80015b4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80015bc:	bf00      	nop
 80015be:	370c      	adds	r7, #12
 80015c0:	46bd      	mov	sp, r7
 80015c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c6:	4770      	bx	lr

080015c8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b083      	sub	sp, #12
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	689b      	ldr	r3, [r3, #8]
 80015d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015d8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80015dc:	d101      	bne.n	80015e2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80015de:	2301      	movs	r3, #1
 80015e0:	e000      	b.n	80015e4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80015e2:	2300      	movs	r3, #0
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	370c      	adds	r7, #12
 80015e8:	46bd      	mov	sp, r7
 80015ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ee:	4770      	bx	lr

080015f0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b083      	sub	sp, #12
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	689b      	ldr	r3, [r3, #8]
 80015fc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001600:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001604:	f043 0201 	orr.w	r2, r3, #1
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800160c:	bf00      	nop
 800160e:	370c      	adds	r7, #12
 8001610:	46bd      	mov	sp, r7
 8001612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001616:	4770      	bx	lr

08001618 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001618:	b480      	push	{r7}
 800161a:	b083      	sub	sp, #12
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	689b      	ldr	r3, [r3, #8]
 8001624:	f003 0301 	and.w	r3, r3, #1
 8001628:	2b01      	cmp	r3, #1
 800162a:	d101      	bne.n	8001630 <LL_ADC_IsEnabled+0x18>
 800162c:	2301      	movs	r3, #1
 800162e:	e000      	b.n	8001632 <LL_ADC_IsEnabled+0x1a>
 8001630:	2300      	movs	r3, #0
}
 8001632:	4618      	mov	r0, r3
 8001634:	370c      	adds	r7, #12
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr

0800163e <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800163e:	b480      	push	{r7}
 8001640:	b083      	sub	sp, #12
 8001642:	af00      	add	r7, sp, #0
 8001644:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	689b      	ldr	r3, [r3, #8]
 800164a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800164e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001652:	f043 0204 	orr.w	r2, r3, #4
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800165a:	bf00      	nop
 800165c:	370c      	adds	r7, #12
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr

08001666 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001666:	b480      	push	{r7}
 8001668:	b083      	sub	sp, #12
 800166a:	af00      	add	r7, sp, #0
 800166c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	689b      	ldr	r3, [r3, #8]
 8001672:	f003 0304 	and.w	r3, r3, #4
 8001676:	2b04      	cmp	r3, #4
 8001678:	d101      	bne.n	800167e <LL_ADC_REG_IsConversionOngoing+0x18>
 800167a:	2301      	movs	r3, #1
 800167c:	e000      	b.n	8001680 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800167e:	2300      	movs	r3, #0
}
 8001680:	4618      	mov	r0, r3
 8001682:	370c      	adds	r7, #12
 8001684:	46bd      	mov	sp, r7
 8001686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168a:	4770      	bx	lr

0800168c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800168c:	b480      	push	{r7}
 800168e:	b083      	sub	sp, #12
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	689b      	ldr	r3, [r3, #8]
 8001698:	f003 0308 	and.w	r3, r3, #8
 800169c:	2b08      	cmp	r3, #8
 800169e:	d101      	bne.n	80016a4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80016a0:	2301      	movs	r3, #1
 80016a2:	e000      	b.n	80016a6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80016a4:	2300      	movs	r3, #0
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	370c      	adds	r7, #12
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr
	...

080016b4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b088      	sub	sp, #32
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016bc:	2300      	movs	r3, #0
 80016be:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80016c0:	2300      	movs	r3, #0
 80016c2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d101      	bne.n	80016ce <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80016ca:	2301      	movs	r3, #1
 80016cc:	e12f      	b.n	800192e <HAL_ADC_Init+0x27a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	691b      	ldr	r3, [r3, #16]
 80016d2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d109      	bne.n	80016f0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80016dc:	6878      	ldr	r0, [r7, #4]
 80016de:	f7ff fb01 	bl	8000ce4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2200      	movs	r2, #0
 80016e6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2200      	movs	r2, #0
 80016ec:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4618      	mov	r0, r3
 80016f6:	f7ff ff3f 	bl	8001578 <LL_ADC_IsDeepPowerDownEnabled>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d004      	beq.n	800170a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4618      	mov	r0, r3
 8001706:	f7ff ff25 	bl	8001554 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4618      	mov	r0, r3
 8001710:	f7ff ff5a 	bl	80015c8 <LL_ADC_IsInternalRegulatorEnabled>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d115      	bne.n	8001746 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4618      	mov	r0, r3
 8001720:	f7ff ff3e 	bl	80015a0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001724:	4b84      	ldr	r3, [pc, #528]	; (8001938 <HAL_ADC_Init+0x284>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	099b      	lsrs	r3, r3, #6
 800172a:	4a84      	ldr	r2, [pc, #528]	; (800193c <HAL_ADC_Init+0x288>)
 800172c:	fba2 2303 	umull	r2, r3, r2, r3
 8001730:	099b      	lsrs	r3, r3, #6
 8001732:	3301      	adds	r3, #1
 8001734:	005b      	lsls	r3, r3, #1
 8001736:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001738:	e002      	b.n	8001740 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800173a:	68bb      	ldr	r3, [r7, #8]
 800173c:	3b01      	subs	r3, #1
 800173e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001740:	68bb      	ldr	r3, [r7, #8]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d1f9      	bne.n	800173a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4618      	mov	r0, r3
 800174c:	f7ff ff3c 	bl	80015c8 <LL_ADC_IsInternalRegulatorEnabled>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d10d      	bne.n	8001772 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800175a:	f043 0210 	orr.w	r2, r3, #16
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001766:	f043 0201 	orr.w	r2, r3, #1
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800176e:	2301      	movs	r3, #1
 8001770:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4618      	mov	r0, r3
 8001778:	f7ff ff75 	bl	8001666 <LL_ADC_REG_IsConversionOngoing>
 800177c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001782:	f003 0310 	and.w	r3, r3, #16
 8001786:	2b00      	cmp	r3, #0
 8001788:	f040 80c8 	bne.w	800191c <HAL_ADC_Init+0x268>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800178c:	697b      	ldr	r3, [r7, #20]
 800178e:	2b00      	cmp	r3, #0
 8001790:	f040 80c4 	bne.w	800191c <HAL_ADC_Init+0x268>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001798:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800179c:	f043 0202 	orr.w	r2, r3, #2
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4618      	mov	r0, r3
 80017aa:	f7ff ff35 	bl	8001618 <LL_ADC_IsEnabled>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d10b      	bne.n	80017cc <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80017b4:	4862      	ldr	r0, [pc, #392]	; (8001940 <HAL_ADC_Init+0x28c>)
 80017b6:	f7ff ff2f 	bl	8001618 <LL_ADC_IsEnabled>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d105      	bne.n	80017cc <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	4619      	mov	r1, r3
 80017c6:	485f      	ldr	r0, [pc, #380]	; (8001944 <HAL_ADC_Init+0x290>)
 80017c8:	f7ff fd86 	bl	80012d8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	7e5b      	ldrb	r3, [r3, #25]
 80017d0:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80017d6:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80017dc:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80017e2:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017ea:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80017ec:	4313      	orrs	r3, r2
 80017ee:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017f6:	2b01      	cmp	r3, #1
 80017f8:	d106      	bne.n	8001808 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017fe:	3b01      	subs	r3, #1
 8001800:	045b      	lsls	r3, r3, #17
 8001802:	69ba      	ldr	r2, [r7, #24]
 8001804:	4313      	orrs	r3, r2
 8001806:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800180c:	2b00      	cmp	r3, #0
 800180e:	d009      	beq.n	8001824 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001814:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800181c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800181e:	69ba      	ldr	r2, [r7, #24]
 8001820:	4313      	orrs	r3, r2
 8001822:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	68da      	ldr	r2, [r3, #12]
 800182a:	4b47      	ldr	r3, [pc, #284]	; (8001948 <HAL_ADC_Init+0x294>)
 800182c:	4013      	ands	r3, r2
 800182e:	687a      	ldr	r2, [r7, #4]
 8001830:	6812      	ldr	r2, [r2, #0]
 8001832:	69b9      	ldr	r1, [r7, #24]
 8001834:	430b      	orrs	r3, r1
 8001836:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4618      	mov	r0, r3
 800183e:	f7ff ff12 	bl	8001666 <LL_ADC_REG_IsConversionOngoing>
 8001842:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4618      	mov	r0, r3
 800184a:	f7ff ff1f 	bl	800168c <LL_ADC_INJ_IsConversionOngoing>
 800184e:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001850:	693b      	ldr	r3, [r7, #16]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d140      	bne.n	80018d8 <HAL_ADC_Init+0x224>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d13d      	bne.n	80018d8 <HAL_ADC_Init+0x224>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	7e1b      	ldrb	r3, [r3, #24]
 8001864:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001866:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800186e:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001870:	4313      	orrs	r3, r2
 8001872:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	68db      	ldr	r3, [r3, #12]
 800187a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800187e:	f023 0306 	bic.w	r3, r3, #6
 8001882:	687a      	ldr	r2, [r7, #4]
 8001884:	6812      	ldr	r2, [r2, #0]
 8001886:	69b9      	ldr	r1, [r7, #24]
 8001888:	430b      	orrs	r3, r1
 800188a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001892:	2b01      	cmp	r3, #1
 8001894:	d118      	bne.n	80018c8 <HAL_ADC_Init+0x214>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	691b      	ldr	r3, [r3, #16]
 800189c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80018a0:	f023 0304 	bic.w	r3, r3, #4
 80018a4:	687a      	ldr	r2, [r7, #4]
 80018a6:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80018a8:	687a      	ldr	r2, [r7, #4]
 80018aa:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80018ac:	4311      	orrs	r1, r2
 80018ae:	687a      	ldr	r2, [r7, #4]
 80018b0:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80018b2:	4311      	orrs	r1, r2
 80018b4:	687a      	ldr	r2, [r7, #4]
 80018b6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80018b8:	430a      	orrs	r2, r1
 80018ba:	431a      	orrs	r2, r3
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f042 0201 	orr.w	r2, r2, #1
 80018c4:	611a      	str	r2, [r3, #16]
 80018c6:	e007      	b.n	80018d8 <HAL_ADC_Init+0x224>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	691a      	ldr	r2, [r3, #16]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f022 0201 	bic.w	r2, r2, #1
 80018d6:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	691b      	ldr	r3, [r3, #16]
 80018dc:	2b01      	cmp	r3, #1
 80018de:	d10c      	bne.n	80018fa <HAL_ADC_Init+0x246>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e6:	f023 010f 	bic.w	r1, r3, #15
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	69db      	ldr	r3, [r3, #28]
 80018ee:	1e5a      	subs	r2, r3, #1
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	430a      	orrs	r2, r1
 80018f6:	631a      	str	r2, [r3, #48]	; 0x30
 80018f8:	e007      	b.n	800190a <HAL_ADC_Init+0x256>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f022 020f 	bic.w	r2, r2, #15
 8001908:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800190e:	f023 0303 	bic.w	r3, r3, #3
 8001912:	f043 0201 	orr.w	r2, r3, #1
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	659a      	str	r2, [r3, #88]	; 0x58
 800191a:	e007      	b.n	800192c <HAL_ADC_Init+0x278>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001920:	f043 0210 	orr.w	r2, r3, #16
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001928:	2301      	movs	r3, #1
 800192a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800192c:	7ffb      	ldrb	r3, [r7, #31]
}
 800192e:	4618      	mov	r0, r3
 8001930:	3720      	adds	r7, #32
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	20000000 	.word	0x20000000
 800193c:	053e2d63 	.word	0x053e2d63
 8001940:	50040000 	.word	0x50040000
 8001944:	50040300 	.word	0x50040300
 8001948:	fff0c007 	.word	0xfff0c007

0800194c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b086      	sub	sp, #24
 8001950:	af00      	add	r7, sp, #0
 8001952:	60f8      	str	r0, [r7, #12]
 8001954:	60b9      	str	r1, [r7, #8]
 8001956:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4618      	mov	r0, r3
 800195e:	f7ff fe82 	bl	8001666 <LL_ADC_REG_IsConversionOngoing>
 8001962:	4603      	mov	r3, r0
 8001964:	2b00      	cmp	r3, #0
 8001966:	d167      	bne.n	8001a38 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800196e:	2b01      	cmp	r3, #1
 8001970:	d101      	bne.n	8001976 <HAL_ADC_Start_DMA+0x2a>
 8001972:	2302      	movs	r3, #2
 8001974:	e063      	b.n	8001a3e <HAL_ADC_Start_DMA+0xf2>
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	2201      	movs	r2, #1
 800197a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800197e:	68f8      	ldr	r0, [r7, #12]
 8001980:	f000 fe36 	bl	80025f0 <ADC_Enable>
 8001984:	4603      	mov	r3, r0
 8001986:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001988:	7dfb      	ldrb	r3, [r7, #23]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d14f      	bne.n	8001a2e <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001992:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001996:	f023 0301 	bic.w	r3, r3, #1
 800199a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	659a      	str	r2, [r3, #88]	; 0x58
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d006      	beq.n	80019bc <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019b2:	f023 0206 	bic.w	r2, r3, #6
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	65da      	str	r2, [r3, #92]	; 0x5c
 80019ba:	e002      	b.n	80019c2 <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	2200      	movs	r2, #0
 80019c0:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80019c6:	4a20      	ldr	r2, [pc, #128]	; (8001a48 <HAL_ADC_Start_DMA+0xfc>)
 80019c8:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80019ce:	4a1f      	ldr	r2, [pc, #124]	; (8001a4c <HAL_ADC_Start_DMA+0x100>)
 80019d0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80019d6:	4a1e      	ldr	r2, [pc, #120]	; (8001a50 <HAL_ADC_Start_DMA+0x104>)
 80019d8:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	221c      	movs	r2, #28
 80019e0:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	2200      	movs	r2, #0
 80019e6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	685a      	ldr	r2, [r3, #4]
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f042 0210 	orr.w	r2, r2, #16
 80019f8:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	68da      	ldr	r2, [r3, #12]
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f042 0201 	orr.w	r2, r2, #1
 8001a08:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	3340      	adds	r3, #64	; 0x40
 8001a14:	4619      	mov	r1, r3
 8001a16:	68ba      	ldr	r2, [r7, #8]
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	f001 fac9 	bl	8002fb0 <HAL_DMA_Start_IT>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4618      	mov	r0, r3
 8001a28:	f7ff fe09 	bl	800163e <LL_ADC_REG_StartConversion>
 8001a2c:	e006      	b.n	8001a3c <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	2200      	movs	r2, #0
 8001a32:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8001a36:	e001      	b.n	8001a3c <HAL_ADC_Start_DMA+0xf0>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001a38:	2302      	movs	r3, #2
 8001a3a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001a3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	3718      	adds	r7, #24
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	080026fd 	.word	0x080026fd
 8001a4c:	080027d5 	.word	0x080027d5
 8001a50:	080027f1 	.word	0x080027f1

08001a54 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b088      	sub	sp, #32
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001a70:	69bb      	ldr	r3, [r7, #24]
 8001a72:	f003 0302 	and.w	r3, r3, #2
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d017      	beq.n	8001aaa <HAL_ADC_IRQHandler+0x56>
 8001a7a:	697b      	ldr	r3, [r7, #20]
 8001a7c:	f003 0302 	and.w	r3, r3, #2
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d012      	beq.n	8001aaa <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a88:	f003 0310 	and.w	r3, r3, #16
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d105      	bne.n	8001a9c <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a94:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	659a      	str	r2, [r3, #88]	; 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001a9c:	6878      	ldr	r0, [r7, #4]
 8001a9e:	f000 fee9 	bl	8002874 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	2202      	movs	r2, #2
 8001aa8:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001aaa:	69bb      	ldr	r3, [r7, #24]
 8001aac:	f003 0304 	and.w	r3, r3, #4
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d004      	beq.n	8001abe <HAL_ADC_IRQHandler+0x6a>
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	f003 0304 	and.w	r3, r3, #4
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d109      	bne.n	8001ad2 <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001abe:	69bb      	ldr	r3, [r7, #24]
 8001ac0:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d05e      	beq.n	8001b86 <HAL_ADC_IRQHandler+0x132>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	f003 0308 	and.w	r3, r3, #8
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d059      	beq.n	8001b86 <HAL_ADC_IRQHandler+0x132>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ad6:	f003 0310 	and.w	r3, r3, #16
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d105      	bne.n	8001aea <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ae2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4618      	mov	r0, r3
 8001af0:	f7ff fc8e 	bl	8001410 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d03e      	beq.n	8001b78 <HAL_ADC_IRQHandler+0x124>
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
      }
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	68db      	ldr	r3, [r3, #12]
 8001b00:	613b      	str	r3, [r7, #16]
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8001b02:	693b      	ldr	r3, [r7, #16]
 8001b04:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d135      	bne.n	8001b78 <HAL_ADC_IRQHandler+0x124>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f003 0308 	and.w	r3, r3, #8
 8001b16:	2b08      	cmp	r3, #8
 8001b18:	d12e      	bne.n	8001b78 <HAL_ADC_IRQHandler+0x124>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f7ff fda1 	bl	8001666 <LL_ADC_REG_IsConversionOngoing>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d11a      	bne.n	8001b60 <HAL_ADC_IRQHandler+0x10c>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	685a      	ldr	r2, [r3, #4]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f022 020c 	bic.w	r2, r2, #12
 8001b38:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b3e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	659a      	str	r2, [r3, #88]	; 0x58

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b4a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d112      	bne.n	8001b78 <HAL_ADC_IRQHandler+0x124>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b56:	f043 0201 	orr.w	r2, r3, #1
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	659a      	str	r2, [r3, #88]	; 0x58
 8001b5e:	e00b      	b.n	8001b78 <HAL_ADC_IRQHandler+0x124>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b64:	f043 0210 	orr.w	r2, r3, #16
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b70:	f043 0201 	orr.w	r2, r3, #1
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	65da      	str	r2, [r3, #92]	; 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001b78:	6878      	ldr	r0, [r7, #4]
 8001b7a:	f7fe fb61 	bl	8000240 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	220c      	movs	r2, #12
 8001b84:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001b86:	69bb      	ldr	r3, [r7, #24]
 8001b88:	f003 0320 	and.w	r3, r3, #32
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d004      	beq.n	8001b9a <HAL_ADC_IRQHandler+0x146>
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	f003 0320 	and.w	r3, r3, #32
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d109      	bne.n	8001bae <HAL_ADC_IRQHandler+0x15a>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001b9a:	69bb      	ldr	r3, [r7, #24]
 8001b9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d072      	beq.n	8001c8a <HAL_ADC_IRQHandler+0x236>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d06d      	beq.n	8001c8a <HAL_ADC_IRQHandler+0x236>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bb2:	f003 0310 	and.w	r3, r3, #16
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d105      	bne.n	8001bc6 <HAL_ADC_IRQHandler+0x172>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bbe:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f7ff fc5f 	bl	800148e <LL_ADC_INJ_IsTriggerSourceSWStart>
 8001bd0:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f7ff fc1a 	bl	8001410 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001bdc:	60b8      	str	r0, [r7, #8]
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
    }
#else
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	68db      	ldr	r3, [r3, #12]
 8001be4:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d047      	beq.n	8001c7c <HAL_ADC_IRQHandler+0x228>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8001bec:	693b      	ldr	r3, [r7, #16]
 8001bee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d007      	beq.n	8001c06 <HAL_ADC_IRQHandler+0x1b2>
 8001bf6:	68bb      	ldr	r3, [r7, #8]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d03f      	beq.n	8001c7c <HAL_ADC_IRQHandler+0x228>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8001bfc:	693b      	ldr	r3, [r7, #16]
 8001bfe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d13a      	bne.n	8001c7c <HAL_ADC_IRQHandler+0x228>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c10:	2b40      	cmp	r3, #64	; 0x40
 8001c12:	d133      	bne.n	8001c7c <HAL_ADC_IRQHandler+0x228>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8001c14:	693b      	ldr	r3, [r7, #16]
 8001c16:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d12e      	bne.n	8001c7c <HAL_ADC_IRQHandler+0x228>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4618      	mov	r0, r3
 8001c24:	f7ff fd32 	bl	800168c <LL_ADC_INJ_IsConversionOngoing>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d11a      	bne.n	8001c64 <HAL_ADC_IRQHandler+0x210>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	685a      	ldr	r2, [r3, #4]
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001c3c:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c42:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	659a      	str	r2, [r3, #88]	; 0x58

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d112      	bne.n	8001c7c <HAL_ADC_IRQHandler+0x228>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c5a:	f043 0201 	orr.w	r2, r3, #1
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	659a      	str	r2, [r3, #88]	; 0x58
 8001c62:	e00b      	b.n	8001c7c <HAL_ADC_IRQHandler+0x228>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c68:	f043 0210 	orr.w	r2, r3, #16
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	659a      	str	r2, [r3, #88]	; 0x58

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c74:	f043 0201 	orr.w	r2, r3, #1
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	65da      	str	r2, [r3, #92]	; 0x5c
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001c7c:	6878      	ldr	r0, [r7, #4]
 8001c7e:	f000 fdd1 	bl	8002824 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	2260      	movs	r2, #96	; 0x60
 8001c88:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8001c8a:	69bb      	ldr	r3, [r7, #24]
 8001c8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d011      	beq.n	8001cb8 <HAL_ADC_IRQHandler+0x264>
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d00c      	beq.n	8001cb8 <HAL_ADC_IRQHandler+0x264>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ca2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001caa:	6878      	ldr	r0, [r7, #4]
 8001cac:	f000 f890 	bl	8001dd0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	2280      	movs	r2, #128	; 0x80
 8001cb6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8001cb8:	69bb      	ldr	r3, [r7, #24]
 8001cba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d012      	beq.n	8001ce8 <HAL_ADC_IRQHandler+0x294>
 8001cc2:	697b      	ldr	r3, [r7, #20]
 8001cc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d00d      	beq.n	8001ce8 <HAL_ADC_IRQHandler+0x294>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cd0:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001cd8:	6878      	ldr	r0, [r7, #4]
 8001cda:	f000 fdb7 	bl	800284c <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ce6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8001ce8:	69bb      	ldr	r3, [r7, #24]
 8001cea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d012      	beq.n	8001d18 <HAL_ADC_IRQHandler+0x2c4>
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d00d      	beq.n	8001d18 <HAL_ADC_IRQHandler+0x2c4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d00:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001d08:	6878      	ldr	r0, [r7, #4]
 8001d0a:	f000 fda9 	bl	8002860 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d16:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8001d18:	69bb      	ldr	r3, [r7, #24]
 8001d1a:	f003 0310 	and.w	r3, r3, #16
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d02a      	beq.n	8001d78 <HAL_ADC_IRQHandler+0x324>
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	f003 0310 	and.w	r3, r3, #16
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d025      	beq.n	8001d78 <HAL_ADC_IRQHandler+0x324>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d102      	bne.n	8001d3a <HAL_ADC_IRQHandler+0x2e6>
    {
      overrun_error = 1UL;
 8001d34:	2301      	movs	r3, #1
 8001d36:	61fb      	str	r3, [r7, #28]
 8001d38:	e008      	b.n	8001d4c <HAL_ADC_IRQHandler+0x2f8>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	68db      	ldr	r3, [r3, #12]
 8001d40:	f003 0301 	and.w	r3, r3, #1
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d001      	beq.n	8001d4c <HAL_ADC_IRQHandler+0x2f8>
        {
          overrun_error = 1UL;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	61fb      	str	r3, [r7, #28]
        }
      }
    }

    if (overrun_error == 1UL)
 8001d4c:	69fb      	ldr	r3, [r7, #28]
 8001d4e:	2b01      	cmp	r3, #1
 8001d50:	d10e      	bne.n	8001d70 <HAL_ADC_IRQHandler+0x31c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d56:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d62:	f043 0202 	orr.w	r2, r3, #2
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	65da      	str	r2, [r3, #92]	; 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001d6a:	6878      	ldr	r0, [r7, #4]
 8001d6c:	f000 f83a 	bl	8001de4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	2210      	movs	r2, #16
 8001d76:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8001d78:	69bb      	ldr	r3, [r7, #24]
 8001d7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d018      	beq.n	8001db4 <HAL_ADC_IRQHandler+0x360>
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d013      	beq.n	8001db4 <HAL_ADC_IRQHandler+0x360>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d90:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d9c:	f043 0208 	orr.w	r2, r3, #8
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001dac:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8001dae:	6878      	ldr	r0, [r7, #4]
 8001db0:	f000 fd42 	bl	8002838 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8001db4:	bf00      	nop
 8001db6:	3720      	adds	r7, #32
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}

08001dbc <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b083      	sub	sp, #12
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001dc4:	bf00      	nop
 8001dc6:	370c      	adds	r7, #12
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dce:	4770      	bx	lr

08001dd0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b083      	sub	sp, #12
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001dd8:	bf00      	nop
 8001dda:	370c      	adds	r7, #12
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de2:	4770      	bx	lr

08001de4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b083      	sub	sp, #12
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001dec:	bf00      	nop
 8001dee:	370c      	adds	r7, #12
 8001df0:	46bd      	mov	sp, r7
 8001df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df6:	4770      	bx	lr

08001df8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b0b6      	sub	sp, #216	; 0xd8
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
 8001e00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e02:	2300      	movs	r3, #0
 8001e04:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	d101      	bne.n	8001e1a <HAL_ADC_ConfigChannel+0x22>
 8001e16:	2302      	movs	r3, #2
 8001e18:	e3d5      	b.n	80025c6 <HAL_ADC_ConfigChannel+0x7ce>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4618      	mov	r0, r3
 8001e28:	f7ff fc1d 	bl	8001666 <LL_ADC_REG_IsConversionOngoing>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	f040 83ba 	bne.w	80025a8 <HAL_ADC_ConfigChannel+0x7b0>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	2b05      	cmp	r3, #5
 8001e3a:	d824      	bhi.n	8001e86 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	3b02      	subs	r3, #2
 8001e42:	2b03      	cmp	r3, #3
 8001e44:	d81b      	bhi.n	8001e7e <HAL_ADC_ConfigChannel+0x86>
 8001e46:	a201      	add	r2, pc, #4	; (adr r2, 8001e4c <HAL_ADC_ConfigChannel+0x54>)
 8001e48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e4c:	08001e5d 	.word	0x08001e5d
 8001e50:	08001e65 	.word	0x08001e65
 8001e54:	08001e6d 	.word	0x08001e6d
 8001e58:	08001e75 	.word	0x08001e75
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	220c      	movs	r2, #12
 8001e60:	605a      	str	r2, [r3, #4]
          break;
 8001e62:	e011      	b.n	8001e88 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	2212      	movs	r2, #18
 8001e68:	605a      	str	r2, [r3, #4]
          break;
 8001e6a:	e00d      	b.n	8001e88 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	2218      	movs	r2, #24
 8001e70:	605a      	str	r2, [r3, #4]
          break;
 8001e72:	e009      	b.n	8001e88 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e7a:	605a      	str	r2, [r3, #4]
          break;
 8001e7c:	e004      	b.n	8001e88 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	2206      	movs	r2, #6
 8001e82:	605a      	str	r2, [r3, #4]
          break;
 8001e84:	e000      	b.n	8001e88 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8001e86:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6818      	ldr	r0, [r3, #0]
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	6859      	ldr	r1, [r3, #4]
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	461a      	mov	r2, r3
 8001e96:	f7ff face 	bl	8001436 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f7ff fbe1 	bl	8001666 <LL_ADC_REG_IsConversionOngoing>
 8001ea4:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4618      	mov	r0, r3
 8001eae:	f7ff fbed 	bl	800168c <LL_ADC_INJ_IsConversionOngoing>
 8001eb2:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001eb6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	f040 81c1 	bne.w	8002242 <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001ec0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	f040 81bc 	bne.w	8002242 <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001ed2:	d10f      	bne.n	8001ef4 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6818      	ldr	r0, [r3, #0]
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	2200      	movs	r2, #0
 8001ede:	4619      	mov	r1, r3
 8001ee0:	f7ff fae8 	bl	80014b4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8001eec:	4618      	mov	r0, r3
 8001eee:	f7ff fa7c 	bl	80013ea <LL_ADC_SetSamplingTimeCommonConfig>
 8001ef2:	e00e      	b.n	8001f12 <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6818      	ldr	r0, [r3, #0]
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	6819      	ldr	r1, [r3, #0]
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	689b      	ldr	r3, [r3, #8]
 8001f00:	461a      	mov	r2, r3
 8001f02:	f7ff fad7 	bl	80014b4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	2100      	movs	r1, #0
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f7ff fa6c 	bl	80013ea <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	695a      	ldr	r2, [r3, #20]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	68db      	ldr	r3, [r3, #12]
 8001f1c:	08db      	lsrs	r3, r3, #3
 8001f1e:	f003 0303 	and.w	r3, r3, #3
 8001f22:	005b      	lsls	r3, r3, #1
 8001f24:	fa02 f303 	lsl.w	r3, r2, r3
 8001f28:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	691b      	ldr	r3, [r3, #16]
 8001f30:	2b04      	cmp	r3, #4
 8001f32:	d00a      	beq.n	8001f4a <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6818      	ldr	r0, [r3, #0]
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	6919      	ldr	r1, [r3, #16]
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001f44:	f7ff f9fc 	bl	8001340 <LL_ADC_SetOffset>
 8001f48:	e17b      	b.n	8002242 <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	2100      	movs	r1, #0
 8001f50:	4618      	mov	r0, r3
 8001f52:	f7ff fa19 	bl	8001388 <LL_ADC_GetOffsetChannel>
 8001f56:	4603      	mov	r3, r0
 8001f58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d10a      	bne.n	8001f76 <HAL_ADC_ConfigChannel+0x17e>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	2100      	movs	r1, #0
 8001f66:	4618      	mov	r0, r3
 8001f68:	f7ff fa0e 	bl	8001388 <LL_ADC_GetOffsetChannel>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	0e9b      	lsrs	r3, r3, #26
 8001f70:	f003 021f 	and.w	r2, r3, #31
 8001f74:	e01e      	b.n	8001fb4 <HAL_ADC_ConfigChannel+0x1bc>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	2100      	movs	r1, #0
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f7ff fa03 	bl	8001388 <LL_ADC_GetOffsetChannel>
 8001f82:	4603      	mov	r3, r0
 8001f84:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f88:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001f8c:	fa93 f3a3 	rbit	r3, r3
 8001f90:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001f94:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001f98:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001f9c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d101      	bne.n	8001fa8 <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 8001fa4:	2320      	movs	r3, #32
 8001fa6:	e004      	b.n	8001fb2 <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 8001fa8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001fac:	fab3 f383 	clz	r3, r3
 8001fb0:	b2db      	uxtb	r3, r3
 8001fb2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d105      	bne.n	8001fcc <HAL_ADC_ConfigChannel+0x1d4>
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	0e9b      	lsrs	r3, r3, #26
 8001fc6:	f003 031f 	and.w	r3, r3, #31
 8001fca:	e018      	b.n	8001ffe <HAL_ADC_ConfigChannel+0x206>
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fd4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001fd8:	fa93 f3a3 	rbit	r3, r3
 8001fdc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001fe0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001fe4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001fe8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d101      	bne.n	8001ff4 <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 8001ff0:	2320      	movs	r3, #32
 8001ff2:	e004      	b.n	8001ffe <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 8001ff4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001ff8:	fab3 f383 	clz	r3, r3
 8001ffc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001ffe:	429a      	cmp	r2, r3
 8002000:	d106      	bne.n	8002010 <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	2200      	movs	r2, #0
 8002008:	2100      	movs	r1, #0
 800200a:	4618      	mov	r0, r3
 800200c:	f7ff f9d2 	bl	80013b4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	2101      	movs	r1, #1
 8002016:	4618      	mov	r0, r3
 8002018:	f7ff f9b6 	bl	8001388 <LL_ADC_GetOffsetChannel>
 800201c:	4603      	mov	r3, r0
 800201e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002022:	2b00      	cmp	r3, #0
 8002024:	d10a      	bne.n	800203c <HAL_ADC_ConfigChannel+0x244>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	2101      	movs	r1, #1
 800202c:	4618      	mov	r0, r3
 800202e:	f7ff f9ab 	bl	8001388 <LL_ADC_GetOffsetChannel>
 8002032:	4603      	mov	r3, r0
 8002034:	0e9b      	lsrs	r3, r3, #26
 8002036:	f003 021f 	and.w	r2, r3, #31
 800203a:	e01e      	b.n	800207a <HAL_ADC_ConfigChannel+0x282>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	2101      	movs	r1, #1
 8002042:	4618      	mov	r0, r3
 8002044:	f7ff f9a0 	bl	8001388 <LL_ADC_GetOffsetChannel>
 8002048:	4603      	mov	r3, r0
 800204a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800204e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002052:	fa93 f3a3 	rbit	r3, r3
 8002056:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800205a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800205e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002062:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002066:	2b00      	cmp	r3, #0
 8002068:	d101      	bne.n	800206e <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 800206a:	2320      	movs	r3, #32
 800206c:	e004      	b.n	8002078 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 800206e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002072:	fab3 f383 	clz	r3, r3
 8002076:	b2db      	uxtb	r3, r3
 8002078:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002082:	2b00      	cmp	r3, #0
 8002084:	d105      	bne.n	8002092 <HAL_ADC_ConfigChannel+0x29a>
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	0e9b      	lsrs	r3, r3, #26
 800208c:	f003 031f 	and.w	r3, r3, #31
 8002090:	e018      	b.n	80020c4 <HAL_ADC_ConfigChannel+0x2cc>
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800209a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800209e:	fa93 f3a3 	rbit	r3, r3
 80020a2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80020a6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80020aa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80020ae:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d101      	bne.n	80020ba <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 80020b6:	2320      	movs	r3, #32
 80020b8:	e004      	b.n	80020c4 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 80020ba:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80020be:	fab3 f383 	clz	r3, r3
 80020c2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80020c4:	429a      	cmp	r2, r3
 80020c6:	d106      	bne.n	80020d6 <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	2200      	movs	r2, #0
 80020ce:	2101      	movs	r1, #1
 80020d0:	4618      	mov	r0, r3
 80020d2:	f7ff f96f 	bl	80013b4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	2102      	movs	r1, #2
 80020dc:	4618      	mov	r0, r3
 80020de:	f7ff f953 	bl	8001388 <LL_ADC_GetOffsetChannel>
 80020e2:	4603      	mov	r3, r0
 80020e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d10a      	bne.n	8002102 <HAL_ADC_ConfigChannel+0x30a>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	2102      	movs	r1, #2
 80020f2:	4618      	mov	r0, r3
 80020f4:	f7ff f948 	bl	8001388 <LL_ADC_GetOffsetChannel>
 80020f8:	4603      	mov	r3, r0
 80020fa:	0e9b      	lsrs	r3, r3, #26
 80020fc:	f003 021f 	and.w	r2, r3, #31
 8002100:	e01e      	b.n	8002140 <HAL_ADC_ConfigChannel+0x348>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	2102      	movs	r1, #2
 8002108:	4618      	mov	r0, r3
 800210a:	f7ff f93d 	bl	8001388 <LL_ADC_GetOffsetChannel>
 800210e:	4603      	mov	r3, r0
 8002110:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002114:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002118:	fa93 f3a3 	rbit	r3, r3
 800211c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002120:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002124:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002128:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800212c:	2b00      	cmp	r3, #0
 800212e:	d101      	bne.n	8002134 <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 8002130:	2320      	movs	r3, #32
 8002132:	e004      	b.n	800213e <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 8002134:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002138:	fab3 f383 	clz	r3, r3
 800213c:	b2db      	uxtb	r3, r3
 800213e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002148:	2b00      	cmp	r3, #0
 800214a:	d105      	bne.n	8002158 <HAL_ADC_ConfigChannel+0x360>
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	0e9b      	lsrs	r3, r3, #26
 8002152:	f003 031f 	and.w	r3, r3, #31
 8002156:	e016      	b.n	8002186 <HAL_ADC_ConfigChannel+0x38e>
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002160:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002164:	fa93 f3a3 	rbit	r3, r3
 8002168:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800216a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800216c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002170:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002174:	2b00      	cmp	r3, #0
 8002176:	d101      	bne.n	800217c <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 8002178:	2320      	movs	r3, #32
 800217a:	e004      	b.n	8002186 <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 800217c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002180:	fab3 f383 	clz	r3, r3
 8002184:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002186:	429a      	cmp	r2, r3
 8002188:	d106      	bne.n	8002198 <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	2200      	movs	r2, #0
 8002190:	2102      	movs	r1, #2
 8002192:	4618      	mov	r0, r3
 8002194:	f7ff f90e 	bl	80013b4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	2103      	movs	r1, #3
 800219e:	4618      	mov	r0, r3
 80021a0:	f7ff f8f2 	bl	8001388 <LL_ADC_GetOffsetChannel>
 80021a4:	4603      	mov	r3, r0
 80021a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d10a      	bne.n	80021c4 <HAL_ADC_ConfigChannel+0x3cc>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	2103      	movs	r1, #3
 80021b4:	4618      	mov	r0, r3
 80021b6:	f7ff f8e7 	bl	8001388 <LL_ADC_GetOffsetChannel>
 80021ba:	4603      	mov	r3, r0
 80021bc:	0e9b      	lsrs	r3, r3, #26
 80021be:	f003 021f 	and.w	r2, r3, #31
 80021c2:	e017      	b.n	80021f4 <HAL_ADC_ConfigChannel+0x3fc>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	2103      	movs	r1, #3
 80021ca:	4618      	mov	r0, r3
 80021cc:	f7ff f8dc 	bl	8001388 <LL_ADC_GetOffsetChannel>
 80021d0:	4603      	mov	r3, r0
 80021d2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80021d6:	fa93 f3a3 	rbit	r3, r3
 80021da:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80021dc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80021de:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80021e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d101      	bne.n	80021ea <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 80021e6:	2320      	movs	r3, #32
 80021e8:	e003      	b.n	80021f2 <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 80021ea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80021ec:	fab3 f383 	clz	r3, r3
 80021f0:	b2db      	uxtb	r3, r3
 80021f2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d105      	bne.n	800220c <HAL_ADC_ConfigChannel+0x414>
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	0e9b      	lsrs	r3, r3, #26
 8002206:	f003 031f 	and.w	r3, r3, #31
 800220a:	e011      	b.n	8002230 <HAL_ADC_ConfigChannel+0x438>
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002212:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002214:	fa93 f3a3 	rbit	r3, r3
 8002218:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800221a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800221c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800221e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002220:	2b00      	cmp	r3, #0
 8002222:	d101      	bne.n	8002228 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8002224:	2320      	movs	r3, #32
 8002226:	e003      	b.n	8002230 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8002228:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800222a:	fab3 f383 	clz	r3, r3
 800222e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002230:	429a      	cmp	r2, r3
 8002232:	d106      	bne.n	8002242 <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	2200      	movs	r2, #0
 800223a:	2103      	movs	r1, #3
 800223c:	4618      	mov	r0, r3
 800223e:	f7ff f8b9 	bl	80013b4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4618      	mov	r0, r3
 8002248:	f7ff f9e6 	bl	8001618 <LL_ADC_IsEnabled>
 800224c:	4603      	mov	r3, r0
 800224e:	2b00      	cmp	r3, #0
 8002250:	f040 8140 	bne.w	80024d4 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6818      	ldr	r0, [r3, #0]
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	6819      	ldr	r1, [r3, #0]
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	68db      	ldr	r3, [r3, #12]
 8002260:	461a      	mov	r2, r3
 8002262:	f7ff f953 	bl	800150c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	68db      	ldr	r3, [r3, #12]
 800226a:	4a8f      	ldr	r2, [pc, #572]	; (80024a8 <HAL_ADC_ConfigChannel+0x6b0>)
 800226c:	4293      	cmp	r3, r2
 800226e:	f040 8131 	bne.w	80024d4 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800227e:	2b00      	cmp	r3, #0
 8002280:	d10b      	bne.n	800229a <HAL_ADC_ConfigChannel+0x4a2>
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	0e9b      	lsrs	r3, r3, #26
 8002288:	3301      	adds	r3, #1
 800228a:	f003 031f 	and.w	r3, r3, #31
 800228e:	2b09      	cmp	r3, #9
 8002290:	bf94      	ite	ls
 8002292:	2301      	movls	r3, #1
 8002294:	2300      	movhi	r3, #0
 8002296:	b2db      	uxtb	r3, r3
 8002298:	e019      	b.n	80022ce <HAL_ADC_ConfigChannel+0x4d6>
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022a2:	fa93 f3a3 	rbit	r3, r3
 80022a6:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80022a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80022aa:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80022ac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d101      	bne.n	80022b6 <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 80022b2:	2320      	movs	r3, #32
 80022b4:	e003      	b.n	80022be <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 80022b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80022b8:	fab3 f383 	clz	r3, r3
 80022bc:	b2db      	uxtb	r3, r3
 80022be:	3301      	adds	r3, #1
 80022c0:	f003 031f 	and.w	r3, r3, #31
 80022c4:	2b09      	cmp	r3, #9
 80022c6:	bf94      	ite	ls
 80022c8:	2301      	movls	r3, #1
 80022ca:	2300      	movhi	r3, #0
 80022cc:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d079      	beq.n	80023c6 <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d107      	bne.n	80022ee <HAL_ADC_ConfigChannel+0x4f6>
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	0e9b      	lsrs	r3, r3, #26
 80022e4:	3301      	adds	r3, #1
 80022e6:	069b      	lsls	r3, r3, #26
 80022e8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80022ec:	e015      	b.n	800231a <HAL_ADC_ConfigChannel+0x522>
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80022f6:	fa93 f3a3 	rbit	r3, r3
 80022fa:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80022fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022fe:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002300:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002302:	2b00      	cmp	r3, #0
 8002304:	d101      	bne.n	800230a <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 8002306:	2320      	movs	r3, #32
 8002308:	e003      	b.n	8002312 <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 800230a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800230c:	fab3 f383 	clz	r3, r3
 8002310:	b2db      	uxtb	r3, r3
 8002312:	3301      	adds	r3, #1
 8002314:	069b      	lsls	r3, r3, #26
 8002316:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002322:	2b00      	cmp	r3, #0
 8002324:	d109      	bne.n	800233a <HAL_ADC_ConfigChannel+0x542>
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	0e9b      	lsrs	r3, r3, #26
 800232c:	3301      	adds	r3, #1
 800232e:	f003 031f 	and.w	r3, r3, #31
 8002332:	2101      	movs	r1, #1
 8002334:	fa01 f303 	lsl.w	r3, r1, r3
 8002338:	e017      	b.n	800236a <HAL_ADC_ConfigChannel+0x572>
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002340:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002342:	fa93 f3a3 	rbit	r3, r3
 8002346:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002348:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800234a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800234c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800234e:	2b00      	cmp	r3, #0
 8002350:	d101      	bne.n	8002356 <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 8002352:	2320      	movs	r3, #32
 8002354:	e003      	b.n	800235e <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 8002356:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002358:	fab3 f383 	clz	r3, r3
 800235c:	b2db      	uxtb	r3, r3
 800235e:	3301      	adds	r3, #1
 8002360:	f003 031f 	and.w	r3, r3, #31
 8002364:	2101      	movs	r1, #1
 8002366:	fa01 f303 	lsl.w	r3, r1, r3
 800236a:	ea42 0103 	orr.w	r1, r2, r3
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002376:	2b00      	cmp	r3, #0
 8002378:	d10a      	bne.n	8002390 <HAL_ADC_ConfigChannel+0x598>
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	0e9b      	lsrs	r3, r3, #26
 8002380:	3301      	adds	r3, #1
 8002382:	f003 021f 	and.w	r2, r3, #31
 8002386:	4613      	mov	r3, r2
 8002388:	005b      	lsls	r3, r3, #1
 800238a:	4413      	add	r3, r2
 800238c:	051b      	lsls	r3, r3, #20
 800238e:	e018      	b.n	80023c2 <HAL_ADC_ConfigChannel+0x5ca>
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002396:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002398:	fa93 f3a3 	rbit	r3, r3
 800239c:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800239e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023a0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80023a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d101      	bne.n	80023ac <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 80023a8:	2320      	movs	r3, #32
 80023aa:	e003      	b.n	80023b4 <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 80023ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023ae:	fab3 f383 	clz	r3, r3
 80023b2:	b2db      	uxtb	r3, r3
 80023b4:	3301      	adds	r3, #1
 80023b6:	f003 021f 	and.w	r2, r3, #31
 80023ba:	4613      	mov	r3, r2
 80023bc:	005b      	lsls	r3, r3, #1
 80023be:	4413      	add	r3, r2
 80023c0:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80023c2:	430b      	orrs	r3, r1
 80023c4:	e081      	b.n	80024ca <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d107      	bne.n	80023e2 <HAL_ADC_ConfigChannel+0x5ea>
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	0e9b      	lsrs	r3, r3, #26
 80023d8:	3301      	adds	r3, #1
 80023da:	069b      	lsls	r3, r3, #26
 80023dc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80023e0:	e015      	b.n	800240e <HAL_ADC_ConfigChannel+0x616>
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023ea:	fa93 f3a3 	rbit	r3, r3
 80023ee:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80023f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023f2:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80023f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d101      	bne.n	80023fe <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 80023fa:	2320      	movs	r3, #32
 80023fc:	e003      	b.n	8002406 <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 80023fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002400:	fab3 f383 	clz	r3, r3
 8002404:	b2db      	uxtb	r3, r3
 8002406:	3301      	adds	r3, #1
 8002408:	069b      	lsls	r3, r3, #26
 800240a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002416:	2b00      	cmp	r3, #0
 8002418:	d109      	bne.n	800242e <HAL_ADC_ConfigChannel+0x636>
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	0e9b      	lsrs	r3, r3, #26
 8002420:	3301      	adds	r3, #1
 8002422:	f003 031f 	and.w	r3, r3, #31
 8002426:	2101      	movs	r1, #1
 8002428:	fa01 f303 	lsl.w	r3, r1, r3
 800242c:	e017      	b.n	800245e <HAL_ADC_ConfigChannel+0x666>
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002434:	6a3b      	ldr	r3, [r7, #32]
 8002436:	fa93 f3a3 	rbit	r3, r3
 800243a:	61fb      	str	r3, [r7, #28]
  return result;
 800243c:	69fb      	ldr	r3, [r7, #28]
 800243e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002442:	2b00      	cmp	r3, #0
 8002444:	d101      	bne.n	800244a <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 8002446:	2320      	movs	r3, #32
 8002448:	e003      	b.n	8002452 <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 800244a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800244c:	fab3 f383 	clz	r3, r3
 8002450:	b2db      	uxtb	r3, r3
 8002452:	3301      	adds	r3, #1
 8002454:	f003 031f 	and.w	r3, r3, #31
 8002458:	2101      	movs	r1, #1
 800245a:	fa01 f303 	lsl.w	r3, r1, r3
 800245e:	ea42 0103 	orr.w	r1, r2, r3
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800246a:	2b00      	cmp	r3, #0
 800246c:	d10d      	bne.n	800248a <HAL_ADC_ConfigChannel+0x692>
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	0e9b      	lsrs	r3, r3, #26
 8002474:	3301      	adds	r3, #1
 8002476:	f003 021f 	and.w	r2, r3, #31
 800247a:	4613      	mov	r3, r2
 800247c:	005b      	lsls	r3, r3, #1
 800247e:	4413      	add	r3, r2
 8002480:	3b1e      	subs	r3, #30
 8002482:	051b      	lsls	r3, r3, #20
 8002484:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002488:	e01e      	b.n	80024c8 <HAL_ADC_ConfigChannel+0x6d0>
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	fa93 f3a3 	rbit	r3, r3
 8002496:	613b      	str	r3, [r7, #16]
  return result;
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800249c:	69bb      	ldr	r3, [r7, #24]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d104      	bne.n	80024ac <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 80024a2:	2320      	movs	r3, #32
 80024a4:	e006      	b.n	80024b4 <HAL_ADC_ConfigChannel+0x6bc>
 80024a6:	bf00      	nop
 80024a8:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80024ac:	69bb      	ldr	r3, [r7, #24]
 80024ae:	fab3 f383 	clz	r3, r3
 80024b2:	b2db      	uxtb	r3, r3
 80024b4:	3301      	adds	r3, #1
 80024b6:	f003 021f 	and.w	r2, r3, #31
 80024ba:	4613      	mov	r3, r2
 80024bc:	005b      	lsls	r3, r3, #1
 80024be:	4413      	add	r3, r2
 80024c0:	3b1e      	subs	r3, #30
 80024c2:	051b      	lsls	r3, r3, #20
 80024c4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80024c8:	430b      	orrs	r3, r1
 80024ca:	683a      	ldr	r2, [r7, #0]
 80024cc:	6892      	ldr	r2, [r2, #8]
 80024ce:	4619      	mov	r1, r3
 80024d0:	f7fe fff0 	bl	80014b4 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	681a      	ldr	r2, [r3, #0]
 80024d8:	4b3d      	ldr	r3, [pc, #244]	; (80025d0 <HAL_ADC_ConfigChannel+0x7d8>)
 80024da:	4013      	ands	r3, r2
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d06c      	beq.n	80025ba <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80024e0:	483c      	ldr	r0, [pc, #240]	; (80025d4 <HAL_ADC_ConfigChannel+0x7dc>)
 80024e2:	f7fe ff1f 	bl	8001324 <LL_ADC_GetCommonPathInternalCh>
 80024e6:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a3a      	ldr	r2, [pc, #232]	; (80025d8 <HAL_ADC_ConfigChannel+0x7e0>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d127      	bne.n	8002544 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80024f4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80024f8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d121      	bne.n	8002544 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a35      	ldr	r2, [pc, #212]	; (80025dc <HAL_ADC_ConfigChannel+0x7e4>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d157      	bne.n	80025ba <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800250a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800250e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002512:	4619      	mov	r1, r3
 8002514:	482f      	ldr	r0, [pc, #188]	; (80025d4 <HAL_ADC_ConfigChannel+0x7dc>)
 8002516:	f7fe fef2 	bl	80012fe <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800251a:	4b31      	ldr	r3, [pc, #196]	; (80025e0 <HAL_ADC_ConfigChannel+0x7e8>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	099b      	lsrs	r3, r3, #6
 8002520:	4a30      	ldr	r2, [pc, #192]	; (80025e4 <HAL_ADC_ConfigChannel+0x7ec>)
 8002522:	fba2 2303 	umull	r2, r3, r2, r3
 8002526:	099b      	lsrs	r3, r3, #6
 8002528:	1c5a      	adds	r2, r3, #1
 800252a:	4613      	mov	r3, r2
 800252c:	005b      	lsls	r3, r3, #1
 800252e:	4413      	add	r3, r2
 8002530:	009b      	lsls	r3, r3, #2
 8002532:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002534:	e002      	b.n	800253c <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	3b01      	subs	r3, #1
 800253a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d1f9      	bne.n	8002536 <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002542:	e03a      	b.n	80025ba <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a27      	ldr	r2, [pc, #156]	; (80025e8 <HAL_ADC_ConfigChannel+0x7f0>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d113      	bne.n	8002576 <HAL_ADC_ConfigChannel+0x77e>
 800254e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002552:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002556:	2b00      	cmp	r3, #0
 8002558:	d10d      	bne.n	8002576 <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a1f      	ldr	r2, [pc, #124]	; (80025dc <HAL_ADC_ConfigChannel+0x7e4>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d12a      	bne.n	80025ba <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002564:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002568:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800256c:	4619      	mov	r1, r3
 800256e:	4819      	ldr	r0, [pc, #100]	; (80025d4 <HAL_ADC_ConfigChannel+0x7dc>)
 8002570:	f7fe fec5 	bl	80012fe <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002574:	e021      	b.n	80025ba <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a1c      	ldr	r2, [pc, #112]	; (80025ec <HAL_ADC_ConfigChannel+0x7f4>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d11c      	bne.n	80025ba <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002580:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002584:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002588:	2b00      	cmp	r3, #0
 800258a:	d116      	bne.n	80025ba <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a12      	ldr	r2, [pc, #72]	; (80025dc <HAL_ADC_ConfigChannel+0x7e4>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d111      	bne.n	80025ba <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002596:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800259a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800259e:	4619      	mov	r1, r3
 80025a0:	480c      	ldr	r0, [pc, #48]	; (80025d4 <HAL_ADC_ConfigChannel+0x7dc>)
 80025a2:	f7fe feac 	bl	80012fe <LL_ADC_SetCommonPathInternalCh>
 80025a6:	e008      	b.n	80025ba <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025ac:	f043 0220 	orr.w	r2, r3, #32
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80025b4:	2301      	movs	r3, #1
 80025b6:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2200      	movs	r2, #0
 80025be:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 80025c2:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	37d8      	adds	r7, #216	; 0xd8
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop
 80025d0:	80080000 	.word	0x80080000
 80025d4:	50040300 	.word	0x50040300
 80025d8:	c7520000 	.word	0xc7520000
 80025dc:	50040000 	.word	0x50040000
 80025e0:	20000000 	.word	0x20000000
 80025e4:	053e2d63 	.word	0x053e2d63
 80025e8:	cb840000 	.word	0xcb840000
 80025ec:	80000001 	.word	0x80000001

080025f0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b084      	sub	sp, #16
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80025f8:	2300      	movs	r3, #0
 80025fa:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4618      	mov	r0, r3
 8002602:	f7ff f809 	bl	8001618 <LL_ADC_IsEnabled>
 8002606:	4603      	mov	r3, r0
 8002608:	2b00      	cmp	r3, #0
 800260a:	d169      	bne.n	80026e0 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	689a      	ldr	r2, [r3, #8]
 8002612:	4b36      	ldr	r3, [pc, #216]	; (80026ec <ADC_Enable+0xfc>)
 8002614:	4013      	ands	r3, r2
 8002616:	2b00      	cmp	r3, #0
 8002618:	d00d      	beq.n	8002636 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800261e:	f043 0210 	orr.w	r2, r3, #16
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800262a:	f043 0201 	orr.w	r2, r3, #1
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8002632:	2301      	movs	r3, #1
 8002634:	e055      	b.n	80026e2 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4618      	mov	r0, r3
 800263c:	f7fe ffd8 	bl	80015f0 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002640:	482b      	ldr	r0, [pc, #172]	; (80026f0 <ADC_Enable+0x100>)
 8002642:	f7fe fe6f 	bl	8001324 <LL_ADC_GetCommonPathInternalCh>
 8002646:	4603      	mov	r3, r0
 8002648:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800264c:	2b00      	cmp	r3, #0
 800264e:	d013      	beq.n	8002678 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002650:	4b28      	ldr	r3, [pc, #160]	; (80026f4 <ADC_Enable+0x104>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	099b      	lsrs	r3, r3, #6
 8002656:	4a28      	ldr	r2, [pc, #160]	; (80026f8 <ADC_Enable+0x108>)
 8002658:	fba2 2303 	umull	r2, r3, r2, r3
 800265c:	099b      	lsrs	r3, r3, #6
 800265e:	1c5a      	adds	r2, r3, #1
 8002660:	4613      	mov	r3, r2
 8002662:	005b      	lsls	r3, r3, #1
 8002664:	4413      	add	r3, r2
 8002666:	009b      	lsls	r3, r3, #2
 8002668:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800266a:	e002      	b.n	8002672 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	3b01      	subs	r3, #1
 8002670:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8002672:	68bb      	ldr	r3, [r7, #8]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d1f9      	bne.n	800266c <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002678:	f7fe fdfe 	bl	8001278 <HAL_GetTick>
 800267c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800267e:	e028      	b.n	80026d2 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4618      	mov	r0, r3
 8002686:	f7fe ffc7 	bl	8001618 <LL_ADC_IsEnabled>
 800268a:	4603      	mov	r3, r0
 800268c:	2b00      	cmp	r3, #0
 800268e:	d104      	bne.n	800269a <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4618      	mov	r0, r3
 8002696:	f7fe ffab 	bl	80015f0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800269a:	f7fe fded 	bl	8001278 <HAL_GetTick>
 800269e:	4602      	mov	r2, r0
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	1ad3      	subs	r3, r2, r3
 80026a4:	2b02      	cmp	r3, #2
 80026a6:	d914      	bls.n	80026d2 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f003 0301 	and.w	r3, r3, #1
 80026b2:	2b01      	cmp	r3, #1
 80026b4:	d00d      	beq.n	80026d2 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026ba:	f043 0210 	orr.w	r2, r3, #16
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026c6:	f043 0201 	orr.w	r2, r3, #1
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
 80026d0:	e007      	b.n	80026e2 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f003 0301 	and.w	r3, r3, #1
 80026dc:	2b01      	cmp	r3, #1
 80026de:	d1cf      	bne.n	8002680 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80026e0:	2300      	movs	r3, #0
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	3710      	adds	r7, #16
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	bf00      	nop
 80026ec:	8000003f 	.word	0x8000003f
 80026f0:	50040300 	.word	0x50040300
 80026f4:	20000000 	.word	0x20000000
 80026f8:	053e2d63 	.word	0x053e2d63

080026fc <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b084      	sub	sp, #16
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002708:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800270e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002712:	2b00      	cmp	r3, #0
 8002714:	d14b      	bne.n	80027ae <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800271a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	659a      	str	r2, [r3, #88]	; 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f003 0308 	and.w	r3, r3, #8
 800272c:	2b00      	cmp	r3, #0
 800272e:	d021      	beq.n	8002774 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4618      	mov	r0, r3
 8002736:	f7fe fe6b 	bl	8001410 <LL_ADC_REG_IsTriggerSourceSWStart>
 800273a:	4603      	mov	r3, r0
 800273c:	2b00      	cmp	r3, #0
 800273e:	d032      	beq.n	80027a6 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	68db      	ldr	r3, [r3, #12]
 8002746:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800274a:	2b00      	cmp	r3, #0
 800274c:	d12b      	bne.n	80027a6 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002752:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	659a      	str	r2, [r3, #88]	; 0x58
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800275e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002762:	2b00      	cmp	r3, #0
 8002764:	d11f      	bne.n	80027a6 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800276a:	f043 0201 	orr.w	r2, r3, #1
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	659a      	str	r2, [r3, #88]	; 0x58
 8002772:	e018      	b.n	80027a6 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	68db      	ldr	r3, [r3, #12]
 800277a:	f003 0302 	and.w	r3, r3, #2
 800277e:	2b00      	cmp	r3, #0
 8002780:	d111      	bne.n	80027a6 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002786:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	659a      	str	r2, [r3, #88]	; 0x58
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002792:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002796:	2b00      	cmp	r3, #0
 8002798:	d105      	bne.n	80027a6 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800279e:	f043 0201 	orr.w	r2, r3, #1
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	659a      	str	r2, [r3, #88]	; 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80027a6:	68f8      	ldr	r0, [r7, #12]
 80027a8:	f7fd fd4a 	bl	8000240 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80027ac:	e00e      	b.n	80027cc <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027b2:	f003 0310 	and.w	r3, r3, #16
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d003      	beq.n	80027c2 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80027ba:	68f8      	ldr	r0, [r7, #12]
 80027bc:	f7ff fb12 	bl	8001de4 <HAL_ADC_ErrorCallback>
}
 80027c0:	e004      	b.n	80027cc <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027c8:	6878      	ldr	r0, [r7, #4]
 80027ca:	4798      	blx	r3
}
 80027cc:	bf00      	nop
 80027ce:	3710      	adds	r7, #16
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}

080027d4 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b084      	sub	sp, #16
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027e0:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80027e2:	68f8      	ldr	r0, [r7, #12]
 80027e4:	f7ff faea 	bl	8001dbc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80027e8:	bf00      	nop
 80027ea:	3710      	adds	r7, #16
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}

080027f0 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b084      	sub	sp, #16
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027fc:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002802:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800280e:	f043 0204 	orr.w	r2, r3, #4
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002816:	68f8      	ldr	r0, [r7, #12]
 8002818:	f7ff fae4 	bl	8001de4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800281c:	bf00      	nop
 800281e:	3710      	adds	r7, #16
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}

08002824 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002824:	b480      	push	{r7}
 8002826:	b083      	sub	sp, #12
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 800282c:	bf00      	nop
 800282e:	370c      	adds	r7, #12
 8002830:	46bd      	mov	sp, r7
 8002832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002836:	4770      	bx	lr

08002838 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8002838:	b480      	push	{r7}
 800283a:	b083      	sub	sp, #12
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8002840:	bf00      	nop
 8002842:	370c      	adds	r7, #12
 8002844:	46bd      	mov	sp, r7
 8002846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284a:	4770      	bx	lr

0800284c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 800284c:	b480      	push	{r7}
 800284e:	b083      	sub	sp, #12
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8002854:	bf00      	nop
 8002856:	370c      	adds	r7, #12
 8002858:	46bd      	mov	sp, r7
 800285a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285e:	4770      	bx	lr

08002860 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8002860:	b480      	push	{r7}
 8002862:	b083      	sub	sp, #12
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8002868:	bf00      	nop
 800286a:	370c      	adds	r7, #12
 800286c:	46bd      	mov	sp, r7
 800286e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002872:	4770      	bx	lr

08002874 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8002874:	b480      	push	{r7}
 8002876:	b083      	sub	sp, #12
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 800287c:	bf00      	nop
 800287e:	370c      	adds	r7, #12
 8002880:	46bd      	mov	sp, r7
 8002882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002886:	4770      	bx	lr

08002888 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b084      	sub	sp, #16
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d101      	bne.n	800289a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	e0ed      	b.n	8002a76 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80028a0:	b2db      	uxtb	r3, r3
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d102      	bne.n	80028ac <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80028a6:	6878      	ldr	r0, [r7, #4]
 80028a8:	f7fe faf6 	bl	8000e98 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	681a      	ldr	r2, [r3, #0]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f042 0201 	orr.w	r2, r2, #1
 80028ba:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80028bc:	f7fe fcdc 	bl	8001278 <HAL_GetTick>
 80028c0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80028c2:	e012      	b.n	80028ea <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80028c4:	f7fe fcd8 	bl	8001278 <HAL_GetTick>
 80028c8:	4602      	mov	r2, r0
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	1ad3      	subs	r3, r2, r3
 80028ce:	2b0a      	cmp	r3, #10
 80028d0:	d90b      	bls.n	80028ea <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2205      	movs	r2, #5
 80028e2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	e0c5      	b.n	8002a76 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	f003 0301 	and.w	r3, r3, #1
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d0e5      	beq.n	80028c4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	681a      	ldr	r2, [r3, #0]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f022 0202 	bic.w	r2, r2, #2
 8002906:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002908:	f7fe fcb6 	bl	8001278 <HAL_GetTick>
 800290c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800290e:	e012      	b.n	8002936 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002910:	f7fe fcb2 	bl	8001278 <HAL_GetTick>
 8002914:	4602      	mov	r2, r0
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	1ad3      	subs	r3, r2, r3
 800291a:	2b0a      	cmp	r3, #10
 800291c:	d90b      	bls.n	8002936 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002922:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2205      	movs	r2, #5
 800292e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	e09f      	b.n	8002a76 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	f003 0302 	and.w	r3, r3, #2
 8002940:	2b00      	cmp	r3, #0
 8002942:	d1e5      	bne.n	8002910 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	7e1b      	ldrb	r3, [r3, #24]
 8002948:	2b01      	cmp	r3, #1
 800294a:	d108      	bne.n	800295e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	681a      	ldr	r2, [r3, #0]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800295a:	601a      	str	r2, [r3, #0]
 800295c:	e007      	b.n	800296e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800296c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	7e5b      	ldrb	r3, [r3, #25]
 8002972:	2b01      	cmp	r3, #1
 8002974:	d108      	bne.n	8002988 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	681a      	ldr	r2, [r3, #0]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002984:	601a      	str	r2, [r3, #0]
 8002986:	e007      	b.n	8002998 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002996:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	7e9b      	ldrb	r3, [r3, #26]
 800299c:	2b01      	cmp	r3, #1
 800299e:	d108      	bne.n	80029b2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	681a      	ldr	r2, [r3, #0]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f042 0220 	orr.w	r2, r2, #32
 80029ae:	601a      	str	r2, [r3, #0]
 80029b0:	e007      	b.n	80029c2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	681a      	ldr	r2, [r3, #0]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f022 0220 	bic.w	r2, r2, #32
 80029c0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	7edb      	ldrb	r3, [r3, #27]
 80029c6:	2b01      	cmp	r3, #1
 80029c8:	d108      	bne.n	80029dc <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	681a      	ldr	r2, [r3, #0]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f022 0210 	bic.w	r2, r2, #16
 80029d8:	601a      	str	r2, [r3, #0]
 80029da:	e007      	b.n	80029ec <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	681a      	ldr	r2, [r3, #0]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f042 0210 	orr.w	r2, r2, #16
 80029ea:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	7f1b      	ldrb	r3, [r3, #28]
 80029f0:	2b01      	cmp	r3, #1
 80029f2:	d108      	bne.n	8002a06 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f042 0208 	orr.w	r2, r2, #8
 8002a02:	601a      	str	r2, [r3, #0]
 8002a04:	e007      	b.n	8002a16 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	681a      	ldr	r2, [r3, #0]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f022 0208 	bic.w	r2, r2, #8
 8002a14:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	7f5b      	ldrb	r3, [r3, #29]
 8002a1a:	2b01      	cmp	r3, #1
 8002a1c:	d108      	bne.n	8002a30 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	681a      	ldr	r2, [r3, #0]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f042 0204 	orr.w	r2, r2, #4
 8002a2c:	601a      	str	r2, [r3, #0]
 8002a2e:	e007      	b.n	8002a40 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	681a      	ldr	r2, [r3, #0]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f022 0204 	bic.w	r2, r2, #4
 8002a3e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	689a      	ldr	r2, [r3, #8]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	68db      	ldr	r3, [r3, #12]
 8002a48:	431a      	orrs	r2, r3
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	691b      	ldr	r3, [r3, #16]
 8002a4e:	431a      	orrs	r2, r3
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	695b      	ldr	r3, [r3, #20]
 8002a54:	ea42 0103 	orr.w	r1, r2, r3
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	1e5a      	subs	r2, r3, #1
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	430a      	orrs	r2, r1
 8002a64:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2201      	movs	r2, #1
 8002a70:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002a74:	2300      	movs	r3, #0
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	3710      	adds	r7, #16
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}

08002a7e <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8002a7e:	b480      	push	{r7}
 8002a80:	b087      	sub	sp, #28
 8002a82:	af00      	add	r7, sp, #0
 8002a84:	6078      	str	r0, [r7, #4]
 8002a86:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a94:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002a96:	7cfb      	ldrb	r3, [r7, #19]
 8002a98:	2b01      	cmp	r3, #1
 8002a9a:	d003      	beq.n	8002aa4 <HAL_CAN_ConfigFilter+0x26>
 8002a9c:	7cfb      	ldrb	r3, [r7, #19]
 8002a9e:	2b02      	cmp	r3, #2
 8002aa0:	f040 80aa 	bne.w	8002bf8 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002aaa:	f043 0201 	orr.w	r2, r3, #1
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	695b      	ldr	r3, [r3, #20]
 8002ab8:	f003 031f 	and.w	r3, r3, #31
 8002abc:	2201      	movs	r2, #1
 8002abe:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac2:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	43db      	mvns	r3, r3
 8002ace:	401a      	ands	r2, r3
 8002ad0:	697b      	ldr	r3, [r7, #20]
 8002ad2:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	69db      	ldr	r3, [r3, #28]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d123      	bne.n	8002b26 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	43db      	mvns	r3, r3
 8002ae8:	401a      	ands	r2, r3
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	68db      	ldr	r3, [r3, #12]
 8002af4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002afc:	683a      	ldr	r2, [r7, #0]
 8002afe:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002b00:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	3248      	adds	r2, #72	; 0x48
 8002b06:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002b1a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002b1c:	6979      	ldr	r1, [r7, #20]
 8002b1e:	3348      	adds	r3, #72	; 0x48
 8002b20:	00db      	lsls	r3, r3, #3
 8002b22:	440b      	add	r3, r1
 8002b24:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	69db      	ldr	r3, [r3, #28]
 8002b2a:	2b01      	cmp	r3, #1
 8002b2c:	d122      	bne.n	8002b74 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	431a      	orrs	r2, r3
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002b4a:	683a      	ldr	r2, [r7, #0]
 8002b4c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002b4e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	3248      	adds	r2, #72	; 0x48
 8002b54:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	68db      	ldr	r3, [r3, #12]
 8002b62:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002b68:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002b6a:	6979      	ldr	r1, [r7, #20]
 8002b6c:	3348      	adds	r3, #72	; 0x48
 8002b6e:	00db      	lsls	r3, r3, #3
 8002b70:	440b      	add	r3, r1
 8002b72:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	699b      	ldr	r3, [r3, #24]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d109      	bne.n	8002b90 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	43db      	mvns	r3, r3
 8002b86:	401a      	ands	r2, r3
 8002b88:	697b      	ldr	r3, [r7, #20]
 8002b8a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002b8e:	e007      	b.n	8002ba0 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	431a      	orrs	r2, r3
 8002b9a:	697b      	ldr	r3, [r7, #20]
 8002b9c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	691b      	ldr	r3, [r3, #16]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d109      	bne.n	8002bbc <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	43db      	mvns	r3, r3
 8002bb2:	401a      	ands	r2, r3
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8002bba:	e007      	b.n	8002bcc <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	431a      	orrs	r2, r3
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	6a1b      	ldr	r3, [r3, #32]
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	d107      	bne.n	8002be4 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	431a      	orrs	r2, r3
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002bea:	f023 0201 	bic.w	r2, r3, #1
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	e006      	b.n	8002c06 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bfc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002c04:	2301      	movs	r3, #1
  }
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	371c      	adds	r7, #28
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c10:	4770      	bx	lr

08002c12 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002c12:	b580      	push	{r7, lr}
 8002c14:	b084      	sub	sp, #16
 8002c16:	af00      	add	r7, sp, #0
 8002c18:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c20:	b2db      	uxtb	r3, r3
 8002c22:	2b01      	cmp	r3, #1
 8002c24:	d12e      	bne.n	8002c84 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2202      	movs	r2, #2
 8002c2a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	681a      	ldr	r2, [r3, #0]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f022 0201 	bic.w	r2, r2, #1
 8002c3c:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002c3e:	f7fe fb1b 	bl	8001278 <HAL_GetTick>
 8002c42:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002c44:	e012      	b.n	8002c6c <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002c46:	f7fe fb17 	bl	8001278 <HAL_GetTick>
 8002c4a:	4602      	mov	r2, r0
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	1ad3      	subs	r3, r2, r3
 8002c50:	2b0a      	cmp	r3, #10
 8002c52:	d90b      	bls.n	8002c6c <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c58:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2205      	movs	r2, #5
 8002c64:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	e012      	b.n	8002c92 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	f003 0301 	and.w	r3, r3, #1
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d1e5      	bne.n	8002c46 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002c80:	2300      	movs	r3, #0
 8002c82:	e006      	b.n	8002c92 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c88:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002c90:	2301      	movs	r3, #1
  }
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	3710      	adds	r7, #16
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}
	...

08002c9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b085      	sub	sp, #20
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	f003 0307 	and.w	r3, r3, #7
 8002caa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002cac:	4b0c      	ldr	r3, [pc, #48]	; (8002ce0 <__NVIC_SetPriorityGrouping+0x44>)
 8002cae:	68db      	ldr	r3, [r3, #12]
 8002cb0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002cb2:	68ba      	ldr	r2, [r7, #8]
 8002cb4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002cb8:	4013      	ands	r3, r2
 8002cba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002cc4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002cc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ccc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002cce:	4a04      	ldr	r2, [pc, #16]	; (8002ce0 <__NVIC_SetPriorityGrouping+0x44>)
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	60d3      	str	r3, [r2, #12]
}
 8002cd4:	bf00      	nop
 8002cd6:	3714      	adds	r7, #20
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cde:	4770      	bx	lr
 8002ce0:	e000ed00 	.word	0xe000ed00

08002ce4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ce8:	4b04      	ldr	r3, [pc, #16]	; (8002cfc <__NVIC_GetPriorityGrouping+0x18>)
 8002cea:	68db      	ldr	r3, [r3, #12]
 8002cec:	0a1b      	lsrs	r3, r3, #8
 8002cee:	f003 0307 	and.w	r3, r3, #7
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfa:	4770      	bx	lr
 8002cfc:	e000ed00 	.word	0xe000ed00

08002d00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b083      	sub	sp, #12
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	4603      	mov	r3, r0
 8002d08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	db0b      	blt.n	8002d2a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d12:	79fb      	ldrb	r3, [r7, #7]
 8002d14:	f003 021f 	and.w	r2, r3, #31
 8002d18:	4907      	ldr	r1, [pc, #28]	; (8002d38 <__NVIC_EnableIRQ+0x38>)
 8002d1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d1e:	095b      	lsrs	r3, r3, #5
 8002d20:	2001      	movs	r0, #1
 8002d22:	fa00 f202 	lsl.w	r2, r0, r2
 8002d26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002d2a:	bf00      	nop
 8002d2c:	370c      	adds	r7, #12
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d34:	4770      	bx	lr
 8002d36:	bf00      	nop
 8002d38:	e000e100 	.word	0xe000e100

08002d3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b083      	sub	sp, #12
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	4603      	mov	r3, r0
 8002d44:	6039      	str	r1, [r7, #0]
 8002d46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	db0a      	blt.n	8002d66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	b2da      	uxtb	r2, r3
 8002d54:	490c      	ldr	r1, [pc, #48]	; (8002d88 <__NVIC_SetPriority+0x4c>)
 8002d56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d5a:	0112      	lsls	r2, r2, #4
 8002d5c:	b2d2      	uxtb	r2, r2
 8002d5e:	440b      	add	r3, r1
 8002d60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d64:	e00a      	b.n	8002d7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	b2da      	uxtb	r2, r3
 8002d6a:	4908      	ldr	r1, [pc, #32]	; (8002d8c <__NVIC_SetPriority+0x50>)
 8002d6c:	79fb      	ldrb	r3, [r7, #7]
 8002d6e:	f003 030f 	and.w	r3, r3, #15
 8002d72:	3b04      	subs	r3, #4
 8002d74:	0112      	lsls	r2, r2, #4
 8002d76:	b2d2      	uxtb	r2, r2
 8002d78:	440b      	add	r3, r1
 8002d7a:	761a      	strb	r2, [r3, #24]
}
 8002d7c:	bf00      	nop
 8002d7e:	370c      	adds	r7, #12
 8002d80:	46bd      	mov	sp, r7
 8002d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d86:	4770      	bx	lr
 8002d88:	e000e100 	.word	0xe000e100
 8002d8c:	e000ed00 	.word	0xe000ed00

08002d90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d90:	b480      	push	{r7}
 8002d92:	b089      	sub	sp, #36	; 0x24
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	60f8      	str	r0, [r7, #12]
 8002d98:	60b9      	str	r1, [r7, #8]
 8002d9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	f003 0307 	and.w	r3, r3, #7
 8002da2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002da4:	69fb      	ldr	r3, [r7, #28]
 8002da6:	f1c3 0307 	rsb	r3, r3, #7
 8002daa:	2b04      	cmp	r3, #4
 8002dac:	bf28      	it	cs
 8002dae:	2304      	movcs	r3, #4
 8002db0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002db2:	69fb      	ldr	r3, [r7, #28]
 8002db4:	3304      	adds	r3, #4
 8002db6:	2b06      	cmp	r3, #6
 8002db8:	d902      	bls.n	8002dc0 <NVIC_EncodePriority+0x30>
 8002dba:	69fb      	ldr	r3, [r7, #28]
 8002dbc:	3b03      	subs	r3, #3
 8002dbe:	e000      	b.n	8002dc2 <NVIC_EncodePriority+0x32>
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002dc4:	f04f 32ff 	mov.w	r2, #4294967295
 8002dc8:	69bb      	ldr	r3, [r7, #24]
 8002dca:	fa02 f303 	lsl.w	r3, r2, r3
 8002dce:	43da      	mvns	r2, r3
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	401a      	ands	r2, r3
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002dd8:	f04f 31ff 	mov.w	r1, #4294967295
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	fa01 f303 	lsl.w	r3, r1, r3
 8002de2:	43d9      	mvns	r1, r3
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002de8:	4313      	orrs	r3, r2
         );
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	3724      	adds	r7, #36	; 0x24
 8002dee:	46bd      	mov	sp, r7
 8002df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df4:	4770      	bx	lr

08002df6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002df6:	b580      	push	{r7, lr}
 8002df8:	b082      	sub	sp, #8
 8002dfa:	af00      	add	r7, sp, #0
 8002dfc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002dfe:	6878      	ldr	r0, [r7, #4]
 8002e00:	f7ff ff4c 	bl	8002c9c <__NVIC_SetPriorityGrouping>
}
 8002e04:	bf00      	nop
 8002e06:	3708      	adds	r7, #8
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd80      	pop	{r7, pc}

08002e0c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b086      	sub	sp, #24
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	4603      	mov	r3, r0
 8002e14:	60b9      	str	r1, [r7, #8]
 8002e16:	607a      	str	r2, [r7, #4]
 8002e18:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002e1e:	f7ff ff61 	bl	8002ce4 <__NVIC_GetPriorityGrouping>
 8002e22:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e24:	687a      	ldr	r2, [r7, #4]
 8002e26:	68b9      	ldr	r1, [r7, #8]
 8002e28:	6978      	ldr	r0, [r7, #20]
 8002e2a:	f7ff ffb1 	bl	8002d90 <NVIC_EncodePriority>
 8002e2e:	4602      	mov	r2, r0
 8002e30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e34:	4611      	mov	r1, r2
 8002e36:	4618      	mov	r0, r3
 8002e38:	f7ff ff80 	bl	8002d3c <__NVIC_SetPriority>
}
 8002e3c:	bf00      	nop
 8002e3e:	3718      	adds	r7, #24
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bd80      	pop	{r7, pc}

08002e44 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b082      	sub	sp, #8
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e52:	4618      	mov	r0, r3
 8002e54:	f7ff ff54 	bl	8002d00 <__NVIC_EnableIRQ>
}
 8002e58:	bf00      	nop
 8002e5a:	3708      	adds	r7, #8
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}

08002e60 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b084      	sub	sp, #16
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d101      	bne.n	8002e72 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	e08d      	b.n	8002f8e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	461a      	mov	r2, r3
 8002e78:	4b47      	ldr	r3, [pc, #284]	; (8002f98 <HAL_DMA_Init+0x138>)
 8002e7a:	429a      	cmp	r2, r3
 8002e7c:	d80f      	bhi.n	8002e9e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	461a      	mov	r2, r3
 8002e84:	4b45      	ldr	r3, [pc, #276]	; (8002f9c <HAL_DMA_Init+0x13c>)
 8002e86:	4413      	add	r3, r2
 8002e88:	4a45      	ldr	r2, [pc, #276]	; (8002fa0 <HAL_DMA_Init+0x140>)
 8002e8a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e8e:	091b      	lsrs	r3, r3, #4
 8002e90:	009a      	lsls	r2, r3, #2
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	4a42      	ldr	r2, [pc, #264]	; (8002fa4 <HAL_DMA_Init+0x144>)
 8002e9a:	641a      	str	r2, [r3, #64]	; 0x40
 8002e9c:	e00e      	b.n	8002ebc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	461a      	mov	r2, r3
 8002ea4:	4b40      	ldr	r3, [pc, #256]	; (8002fa8 <HAL_DMA_Init+0x148>)
 8002ea6:	4413      	add	r3, r2
 8002ea8:	4a3d      	ldr	r2, [pc, #244]	; (8002fa0 <HAL_DMA_Init+0x140>)
 8002eaa:	fba2 2303 	umull	r2, r3, r2, r3
 8002eae:	091b      	lsrs	r3, r3, #4
 8002eb0:	009a      	lsls	r2, r3, #2
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	4a3c      	ldr	r2, [pc, #240]	; (8002fac <HAL_DMA_Init+0x14c>)
 8002eba:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2202      	movs	r2, #2
 8002ec0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002ed2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ed6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002ee0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	691b      	ldr	r3, [r3, #16]
 8002ee6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002eec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	699b      	ldr	r3, [r3, #24]
 8002ef2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ef8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6a1b      	ldr	r3, [r3, #32]
 8002efe:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002f00:	68fa      	ldr	r2, [r7, #12]
 8002f02:	4313      	orrs	r3, r2
 8002f04:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	68fa      	ldr	r2, [r7, #12]
 8002f0c:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002f0e:	6878      	ldr	r0, [r7, #4]
 8002f10:	f000 f9b6 	bl	8003280 <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002f1c:	d102      	bne.n	8002f24 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2200      	movs	r2, #0
 8002f22:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	685a      	ldr	r2, [r3, #4]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f2c:	b2d2      	uxtb	r2, r2
 8002f2e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f34:	687a      	ldr	r2, [r7, #4]
 8002f36:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002f38:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d010      	beq.n	8002f64 <HAL_DMA_Init+0x104>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	2b04      	cmp	r3, #4
 8002f48:	d80c      	bhi.n	8002f64 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002f4a:	6878      	ldr	r0, [r7, #4]
 8002f4c:	f000 f9d6 	bl	80032fc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f54:	2200      	movs	r2, #0
 8002f56:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f5c:	687a      	ldr	r2, [r7, #4]
 8002f5e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002f60:	605a      	str	r2, [r3, #4]
 8002f62:	e008      	b.n	8002f76 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2200      	movs	r2, #0
 8002f68:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2200      	movs	r2, #0
 8002f74:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2201      	movs	r2, #1
 8002f80:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2200      	movs	r2, #0
 8002f88:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002f8c:	2300      	movs	r3, #0
}
 8002f8e:	4618      	mov	r0, r3
 8002f90:	3710      	adds	r7, #16
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}
 8002f96:	bf00      	nop
 8002f98:	40020407 	.word	0x40020407
 8002f9c:	bffdfff8 	.word	0xbffdfff8
 8002fa0:	cccccccd 	.word	0xcccccccd
 8002fa4:	40020000 	.word	0x40020000
 8002fa8:	bffdfbf8 	.word	0xbffdfbf8
 8002fac:	40020400 	.word	0x40020400

08002fb0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b086      	sub	sp, #24
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	60f8      	str	r0, [r7, #12]
 8002fb8:	60b9      	str	r1, [r7, #8]
 8002fba:	607a      	str	r2, [r7, #4]
 8002fbc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	d101      	bne.n	8002fd0 <HAL_DMA_Start_IT+0x20>
 8002fcc:	2302      	movs	r3, #2
 8002fce:	e066      	b.n	800309e <HAL_DMA_Start_IT+0xee>
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002fde:	b2db      	uxtb	r3, r3
 8002fe0:	2b01      	cmp	r3, #1
 8002fe2:	d155      	bne.n	8003090 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2202      	movs	r2, #2
 8002fe8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	2200      	movs	r2, #0
 8002ff0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	681a      	ldr	r2, [r3, #0]
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f022 0201 	bic.w	r2, r2, #1
 8003000:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	687a      	ldr	r2, [r7, #4]
 8003006:	68b9      	ldr	r1, [r7, #8]
 8003008:	68f8      	ldr	r0, [r7, #12]
 800300a:	f000 f8fb 	bl	8003204 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003012:	2b00      	cmp	r3, #0
 8003014:	d008      	beq.n	8003028 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	681a      	ldr	r2, [r3, #0]
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f042 020e 	orr.w	r2, r2, #14
 8003024:	601a      	str	r2, [r3, #0]
 8003026:	e00f      	b.n	8003048 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	681a      	ldr	r2, [r3, #0]
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f022 0204 	bic.w	r2, r2, #4
 8003036:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	681a      	ldr	r2, [r3, #0]
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f042 020a 	orr.w	r2, r2, #10
 8003046:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003052:	2b00      	cmp	r3, #0
 8003054:	d007      	beq.n	8003066 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800305a:	681a      	ldr	r2, [r3, #0]
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003060:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003064:	601a      	str	r2, [r3, #0]
    }

    if(hdma->DMAmuxRequestGen != 0U)
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800306a:	2b00      	cmp	r3, #0
 800306c:	d007      	beq.n	800307e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003072:	681a      	ldr	r2, [r3, #0]
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003078:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800307c:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	681a      	ldr	r2, [r3, #0]
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f042 0201 	orr.w	r2, r2, #1
 800308c:	601a      	str	r2, [r3, #0]
 800308e:	e005      	b.n	800309c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	2200      	movs	r2, #0
 8003094:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003098:	2302      	movs	r3, #2
 800309a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800309c:	7dfb      	ldrb	r3, [r7, #23]
}
 800309e:	4618      	mov	r0, r3
 80030a0:	3718      	adds	r7, #24
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}

080030a6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80030a6:	b580      	push	{r7, lr}
 80030a8:	b084      	sub	sp, #16
 80030aa:	af00      	add	r7, sp, #0
 80030ac:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030c2:	f003 031c 	and.w	r3, r3, #28
 80030c6:	2204      	movs	r2, #4
 80030c8:	409a      	lsls	r2, r3
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	4013      	ands	r3, r2
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d026      	beq.n	8003120 <HAL_DMA_IRQHandler+0x7a>
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	f003 0304 	and.w	r3, r3, #4
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d021      	beq.n	8003120 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f003 0320 	and.w	r3, r3, #32
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d107      	bne.n	80030fa <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	681a      	ldr	r2, [r3, #0]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f022 0204 	bic.w	r2, r2, #4
 80030f8:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030fe:	f003 021c 	and.w	r2, r3, #28
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003106:	2104      	movs	r1, #4
 8003108:	fa01 f202 	lsl.w	r2, r1, r2
 800310c:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003112:	2b00      	cmp	r3, #0
 8003114:	d071      	beq.n	80031fa <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800311a:	6878      	ldr	r0, [r7, #4]
 800311c:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 800311e:	e06c      	b.n	80031fa <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003124:	f003 031c 	and.w	r3, r3, #28
 8003128:	2202      	movs	r2, #2
 800312a:	409a      	lsls	r2, r3
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	4013      	ands	r3, r2
 8003130:	2b00      	cmp	r3, #0
 8003132:	d02e      	beq.n	8003192 <HAL_DMA_IRQHandler+0xec>
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	f003 0302 	and.w	r3, r3, #2
 800313a:	2b00      	cmp	r3, #0
 800313c:	d029      	beq.n	8003192 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f003 0320 	and.w	r3, r3, #32
 8003148:	2b00      	cmp	r3, #0
 800314a:	d10b      	bne.n	8003164 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	681a      	ldr	r2, [r3, #0]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f022 020a 	bic.w	r2, r2, #10
 800315a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2201      	movs	r2, #1
 8003160:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003168:	f003 021c 	and.w	r2, r3, #28
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003170:	2102      	movs	r1, #2
 8003172:	fa01 f202 	lsl.w	r2, r1, r2
 8003176:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2200      	movs	r2, #0
 800317c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003184:	2b00      	cmp	r3, #0
 8003186:	d038      	beq.n	80031fa <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800318c:	6878      	ldr	r0, [r7, #4]
 800318e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003190:	e033      	b.n	80031fa <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003196:	f003 031c 	and.w	r3, r3, #28
 800319a:	2208      	movs	r2, #8
 800319c:	409a      	lsls	r2, r3
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	4013      	ands	r3, r2
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d02a      	beq.n	80031fc <HAL_DMA_IRQHandler+0x156>
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	f003 0308 	and.w	r3, r3, #8
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d025      	beq.n	80031fc <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	681a      	ldr	r2, [r3, #0]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f022 020e 	bic.w	r2, r2, #14
 80031be:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031c4:	f003 021c 	and.w	r2, r3, #28
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031cc:	2101      	movs	r1, #1
 80031ce:	fa01 f202 	lsl.w	r2, r1, r2
 80031d2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2201      	movs	r2, #1
 80031d8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2201      	movs	r2, #1
 80031de:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2200      	movs	r2, #0
 80031e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d004      	beq.n	80031fc <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031f6:	6878      	ldr	r0, [r7, #4]
 80031f8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80031fa:	bf00      	nop
 80031fc:	bf00      	nop
}
 80031fe:	3710      	adds	r7, #16
 8003200:	46bd      	mov	sp, r7
 8003202:	bd80      	pop	{r7, pc}

08003204 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003204:	b480      	push	{r7}
 8003206:	b085      	sub	sp, #20
 8003208:	af00      	add	r7, sp, #0
 800320a:	60f8      	str	r0, [r7, #12]
 800320c:	60b9      	str	r1, [r7, #8]
 800320e:	607a      	str	r2, [r7, #4]
 8003210:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003216:	68fa      	ldr	r2, [r7, #12]
 8003218:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800321a:	605a      	str	r2, [r3, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003220:	2b00      	cmp	r3, #0
 8003222:	d004      	beq.n	800322e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003228:	68fa      	ldr	r2, [r7, #12]
 800322a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800322c:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003232:	f003 021c 	and.w	r2, r3, #28
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800323a:	2101      	movs	r1, #1
 800323c:	fa01 f202 	lsl.w	r2, r1, r2
 8003240:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	683a      	ldr	r2, [r7, #0]
 8003248:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	689b      	ldr	r3, [r3, #8]
 800324e:	2b10      	cmp	r3, #16
 8003250:	d108      	bne.n	8003264 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	687a      	ldr	r2, [r7, #4]
 8003258:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	68ba      	ldr	r2, [r7, #8]
 8003260:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003262:	e007      	b.n	8003274 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	68ba      	ldr	r2, [r7, #8]
 800326a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	687a      	ldr	r2, [r7, #4]
 8003272:	60da      	str	r2, [r3, #12]
}
 8003274:	bf00      	nop
 8003276:	3714      	adds	r7, #20
 8003278:	46bd      	mov	sp, r7
 800327a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327e:	4770      	bx	lr

08003280 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003280:	b480      	push	{r7}
 8003282:	b085      	sub	sp, #20
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	461a      	mov	r2, r3
 800328e:	4b17      	ldr	r3, [pc, #92]	; (80032ec <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003290:	429a      	cmp	r2, r3
 8003292:	d80a      	bhi.n	80032aa <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003298:	089b      	lsrs	r3, r3, #2
 800329a:	009b      	lsls	r3, r3, #2
 800329c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80032a0:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 80032a4:	687a      	ldr	r2, [r7, #4]
 80032a6:	6493      	str	r3, [r2, #72]	; 0x48
 80032a8:	e007      	b.n	80032ba <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032ae:	089b      	lsrs	r3, r3, #2
 80032b0:	009a      	lsls	r2, r3, #2
 80032b2:	4b0f      	ldr	r3, [pc, #60]	; (80032f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80032b4:	4413      	add	r3, r2
 80032b6:	687a      	ldr	r2, [r7, #4]
 80032b8:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	b2db      	uxtb	r3, r3
 80032c0:	3b08      	subs	r3, #8
 80032c2:	4a0c      	ldr	r2, [pc, #48]	; (80032f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80032c4:	fba2 2303 	umull	r2, r3, r2, r3
 80032c8:	091b      	lsrs	r3, r3, #4
 80032ca:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	4a0a      	ldr	r2, [pc, #40]	; (80032f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80032d0:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	f003 031f 	and.w	r3, r3, #31
 80032d8:	2201      	movs	r2, #1
 80032da:	409a      	lsls	r2, r3
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	651a      	str	r2, [r3, #80]	; 0x50
}
 80032e0:	bf00      	nop
 80032e2:	3714      	adds	r7, #20
 80032e4:	46bd      	mov	sp, r7
 80032e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ea:	4770      	bx	lr
 80032ec:	40020407 	.word	0x40020407
 80032f0:	4002081c 	.word	0x4002081c
 80032f4:	cccccccd 	.word	0xcccccccd
 80032f8:	40020880 	.word	0x40020880

080032fc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b085      	sub	sp, #20
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	b2db      	uxtb	r3, r3
 800330a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800330c:	68fa      	ldr	r2, [r7, #12]
 800330e:	4b0b      	ldr	r3, [pc, #44]	; (800333c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003310:	4413      	add	r3, r2
 8003312:	009b      	lsls	r3, r3, #2
 8003314:	461a      	mov	r2, r3
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	4a08      	ldr	r2, [pc, #32]	; (8003340 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800331e:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	3b01      	subs	r3, #1
 8003324:	f003 0303 	and.w	r3, r3, #3
 8003328:	2201      	movs	r2, #1
 800332a:	409a      	lsls	r2, r3
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003330:	bf00      	nop
 8003332:	3714      	adds	r7, #20
 8003334:	46bd      	mov	sp, r7
 8003336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333a:	4770      	bx	lr
 800333c:	1000823f 	.word	0x1000823f
 8003340:	40020940 	.word	0x40020940

08003344 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003344:	b480      	push	{r7}
 8003346:	b087      	sub	sp, #28
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
 800334c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800334e:	2300      	movs	r3, #0
 8003350:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003352:	e166      	b.n	8003622 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	681a      	ldr	r2, [r3, #0]
 8003358:	2101      	movs	r1, #1
 800335a:	697b      	ldr	r3, [r7, #20]
 800335c:	fa01 f303 	lsl.w	r3, r1, r3
 8003360:	4013      	ands	r3, r2
 8003362:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	2b00      	cmp	r3, #0
 8003368:	f000 8158 	beq.w	800361c <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	f003 0303 	and.w	r3, r3, #3
 8003374:	2b01      	cmp	r3, #1
 8003376:	d005      	beq.n	8003384 <HAL_GPIO_Init+0x40>
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	f003 0303 	and.w	r3, r3, #3
 8003380:	2b02      	cmp	r3, #2
 8003382:	d130      	bne.n	80033e6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	689b      	ldr	r3, [r3, #8]
 8003388:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	005b      	lsls	r3, r3, #1
 800338e:	2203      	movs	r2, #3
 8003390:	fa02 f303 	lsl.w	r3, r2, r3
 8003394:	43db      	mvns	r3, r3
 8003396:	693a      	ldr	r2, [r7, #16]
 8003398:	4013      	ands	r3, r2
 800339a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	68da      	ldr	r2, [r3, #12]
 80033a0:	697b      	ldr	r3, [r7, #20]
 80033a2:	005b      	lsls	r3, r3, #1
 80033a4:	fa02 f303 	lsl.w	r3, r2, r3
 80033a8:	693a      	ldr	r2, [r7, #16]
 80033aa:	4313      	orrs	r3, r2
 80033ac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	693a      	ldr	r2, [r7, #16]
 80033b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80033ba:	2201      	movs	r2, #1
 80033bc:	697b      	ldr	r3, [r7, #20]
 80033be:	fa02 f303 	lsl.w	r3, r2, r3
 80033c2:	43db      	mvns	r3, r3
 80033c4:	693a      	ldr	r2, [r7, #16]
 80033c6:	4013      	ands	r3, r2
 80033c8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	091b      	lsrs	r3, r3, #4
 80033d0:	f003 0201 	and.w	r2, r3, #1
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	fa02 f303 	lsl.w	r3, r2, r3
 80033da:	693a      	ldr	r2, [r7, #16]
 80033dc:	4313      	orrs	r3, r2
 80033de:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	693a      	ldr	r2, [r7, #16]
 80033e4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	f003 0303 	and.w	r3, r3, #3
 80033ee:	2b03      	cmp	r3, #3
 80033f0:	d017      	beq.n	8003422 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	68db      	ldr	r3, [r3, #12]
 80033f6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80033f8:	697b      	ldr	r3, [r7, #20]
 80033fa:	005b      	lsls	r3, r3, #1
 80033fc:	2203      	movs	r2, #3
 80033fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003402:	43db      	mvns	r3, r3
 8003404:	693a      	ldr	r2, [r7, #16]
 8003406:	4013      	ands	r3, r2
 8003408:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	689a      	ldr	r2, [r3, #8]
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	005b      	lsls	r3, r3, #1
 8003412:	fa02 f303 	lsl.w	r3, r2, r3
 8003416:	693a      	ldr	r2, [r7, #16]
 8003418:	4313      	orrs	r3, r2
 800341a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	693a      	ldr	r2, [r7, #16]
 8003420:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	f003 0303 	and.w	r3, r3, #3
 800342a:	2b02      	cmp	r3, #2
 800342c:	d123      	bne.n	8003476 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	08da      	lsrs	r2, r3, #3
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	3208      	adds	r2, #8
 8003436:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800343a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	f003 0307 	and.w	r3, r3, #7
 8003442:	009b      	lsls	r3, r3, #2
 8003444:	220f      	movs	r2, #15
 8003446:	fa02 f303 	lsl.w	r3, r2, r3
 800344a:	43db      	mvns	r3, r3
 800344c:	693a      	ldr	r2, [r7, #16]
 800344e:	4013      	ands	r3, r2
 8003450:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	691a      	ldr	r2, [r3, #16]
 8003456:	697b      	ldr	r3, [r7, #20]
 8003458:	f003 0307 	and.w	r3, r3, #7
 800345c:	009b      	lsls	r3, r3, #2
 800345e:	fa02 f303 	lsl.w	r3, r2, r3
 8003462:	693a      	ldr	r2, [r7, #16]
 8003464:	4313      	orrs	r3, r2
 8003466:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003468:	697b      	ldr	r3, [r7, #20]
 800346a:	08da      	lsrs	r2, r3, #3
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	3208      	adds	r2, #8
 8003470:	6939      	ldr	r1, [r7, #16]
 8003472:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	005b      	lsls	r3, r3, #1
 8003480:	2203      	movs	r2, #3
 8003482:	fa02 f303 	lsl.w	r3, r2, r3
 8003486:	43db      	mvns	r3, r3
 8003488:	693a      	ldr	r2, [r7, #16]
 800348a:	4013      	ands	r3, r2
 800348c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	f003 0203 	and.w	r2, r3, #3
 8003496:	697b      	ldr	r3, [r7, #20]
 8003498:	005b      	lsls	r3, r3, #1
 800349a:	fa02 f303 	lsl.w	r3, r2, r3
 800349e:	693a      	ldr	r2, [r7, #16]
 80034a0:	4313      	orrs	r3, r2
 80034a2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	693a      	ldr	r2, [r7, #16]
 80034a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	f000 80b2 	beq.w	800361c <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034b8:	4b61      	ldr	r3, [pc, #388]	; (8003640 <HAL_GPIO_Init+0x2fc>)
 80034ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034bc:	4a60      	ldr	r2, [pc, #384]	; (8003640 <HAL_GPIO_Init+0x2fc>)
 80034be:	f043 0301 	orr.w	r3, r3, #1
 80034c2:	6613      	str	r3, [r2, #96]	; 0x60
 80034c4:	4b5e      	ldr	r3, [pc, #376]	; (8003640 <HAL_GPIO_Init+0x2fc>)
 80034c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034c8:	f003 0301 	and.w	r3, r3, #1
 80034cc:	60bb      	str	r3, [r7, #8]
 80034ce:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80034d0:	4a5c      	ldr	r2, [pc, #368]	; (8003644 <HAL_GPIO_Init+0x300>)
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	089b      	lsrs	r3, r3, #2
 80034d6:	3302      	adds	r3, #2
 80034d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034dc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	f003 0303 	and.w	r3, r3, #3
 80034e4:	009b      	lsls	r3, r3, #2
 80034e6:	220f      	movs	r2, #15
 80034e8:	fa02 f303 	lsl.w	r3, r2, r3
 80034ec:	43db      	mvns	r3, r3
 80034ee:	693a      	ldr	r2, [r7, #16]
 80034f0:	4013      	ands	r3, r2
 80034f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80034fa:	d02b      	beq.n	8003554 <HAL_GPIO_Init+0x210>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	4a52      	ldr	r2, [pc, #328]	; (8003648 <HAL_GPIO_Init+0x304>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d025      	beq.n	8003550 <HAL_GPIO_Init+0x20c>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	4a51      	ldr	r2, [pc, #324]	; (800364c <HAL_GPIO_Init+0x308>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d01f      	beq.n	800354c <HAL_GPIO_Init+0x208>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	4a50      	ldr	r2, [pc, #320]	; (8003650 <HAL_GPIO_Init+0x30c>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d019      	beq.n	8003548 <HAL_GPIO_Init+0x204>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	4a4f      	ldr	r2, [pc, #316]	; (8003654 <HAL_GPIO_Init+0x310>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d013      	beq.n	8003544 <HAL_GPIO_Init+0x200>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	4a4e      	ldr	r2, [pc, #312]	; (8003658 <HAL_GPIO_Init+0x314>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d00d      	beq.n	8003540 <HAL_GPIO_Init+0x1fc>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	4a4d      	ldr	r2, [pc, #308]	; (800365c <HAL_GPIO_Init+0x318>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d007      	beq.n	800353c <HAL_GPIO_Init+0x1f8>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	4a4c      	ldr	r2, [pc, #304]	; (8003660 <HAL_GPIO_Init+0x31c>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d101      	bne.n	8003538 <HAL_GPIO_Init+0x1f4>
 8003534:	2307      	movs	r3, #7
 8003536:	e00e      	b.n	8003556 <HAL_GPIO_Init+0x212>
 8003538:	2308      	movs	r3, #8
 800353a:	e00c      	b.n	8003556 <HAL_GPIO_Init+0x212>
 800353c:	2306      	movs	r3, #6
 800353e:	e00a      	b.n	8003556 <HAL_GPIO_Init+0x212>
 8003540:	2305      	movs	r3, #5
 8003542:	e008      	b.n	8003556 <HAL_GPIO_Init+0x212>
 8003544:	2304      	movs	r3, #4
 8003546:	e006      	b.n	8003556 <HAL_GPIO_Init+0x212>
 8003548:	2303      	movs	r3, #3
 800354a:	e004      	b.n	8003556 <HAL_GPIO_Init+0x212>
 800354c:	2302      	movs	r3, #2
 800354e:	e002      	b.n	8003556 <HAL_GPIO_Init+0x212>
 8003550:	2301      	movs	r3, #1
 8003552:	e000      	b.n	8003556 <HAL_GPIO_Init+0x212>
 8003554:	2300      	movs	r3, #0
 8003556:	697a      	ldr	r2, [r7, #20]
 8003558:	f002 0203 	and.w	r2, r2, #3
 800355c:	0092      	lsls	r2, r2, #2
 800355e:	4093      	lsls	r3, r2
 8003560:	693a      	ldr	r2, [r7, #16]
 8003562:	4313      	orrs	r3, r2
 8003564:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003566:	4937      	ldr	r1, [pc, #220]	; (8003644 <HAL_GPIO_Init+0x300>)
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	089b      	lsrs	r3, r3, #2
 800356c:	3302      	adds	r3, #2
 800356e:	693a      	ldr	r2, [r7, #16]
 8003570:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003574:	4b3b      	ldr	r3, [pc, #236]	; (8003664 <HAL_GPIO_Init+0x320>)
 8003576:	689b      	ldr	r3, [r3, #8]
 8003578:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	43db      	mvns	r3, r3
 800357e:	693a      	ldr	r2, [r7, #16]
 8003580:	4013      	ands	r3, r2
 8003582:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800358c:	2b00      	cmp	r3, #0
 800358e:	d003      	beq.n	8003598 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8003590:	693a      	ldr	r2, [r7, #16]
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	4313      	orrs	r3, r2
 8003596:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003598:	4a32      	ldr	r2, [pc, #200]	; (8003664 <HAL_GPIO_Init+0x320>)
 800359a:	693b      	ldr	r3, [r7, #16]
 800359c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800359e:	4b31      	ldr	r3, [pc, #196]	; (8003664 <HAL_GPIO_Init+0x320>)
 80035a0:	68db      	ldr	r3, [r3, #12]
 80035a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	43db      	mvns	r3, r3
 80035a8:	693a      	ldr	r2, [r7, #16]
 80035aa:	4013      	ands	r3, r2
 80035ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d003      	beq.n	80035c2 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80035ba:	693a      	ldr	r2, [r7, #16]
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	4313      	orrs	r3, r2
 80035c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80035c2:	4a28      	ldr	r2, [pc, #160]	; (8003664 <HAL_GPIO_Init+0x320>)
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80035c8:	4b26      	ldr	r3, [pc, #152]	; (8003664 <HAL_GPIO_Init+0x320>)
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	43db      	mvns	r3, r3
 80035d2:	693a      	ldr	r2, [r7, #16]
 80035d4:	4013      	ands	r3, r2
 80035d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d003      	beq.n	80035ec <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80035e4:	693a      	ldr	r2, [r7, #16]
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	4313      	orrs	r3, r2
 80035ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80035ec:	4a1d      	ldr	r2, [pc, #116]	; (8003664 <HAL_GPIO_Init+0x320>)
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80035f2:	4b1c      	ldr	r3, [pc, #112]	; (8003664 <HAL_GPIO_Init+0x320>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	43db      	mvns	r3, r3
 80035fc:	693a      	ldr	r2, [r7, #16]
 80035fe:	4013      	ands	r3, r2
 8003600:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800360a:	2b00      	cmp	r3, #0
 800360c:	d003      	beq.n	8003616 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800360e:	693a      	ldr	r2, [r7, #16]
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	4313      	orrs	r3, r2
 8003614:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003616:	4a13      	ldr	r2, [pc, #76]	; (8003664 <HAL_GPIO_Init+0x320>)
 8003618:	693b      	ldr	r3, [r7, #16]
 800361a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800361c:	697b      	ldr	r3, [r7, #20]
 800361e:	3301      	adds	r3, #1
 8003620:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	681a      	ldr	r2, [r3, #0]
 8003626:	697b      	ldr	r3, [r7, #20]
 8003628:	fa22 f303 	lsr.w	r3, r2, r3
 800362c:	2b00      	cmp	r3, #0
 800362e:	f47f ae91 	bne.w	8003354 <HAL_GPIO_Init+0x10>
  }
}
 8003632:	bf00      	nop
 8003634:	bf00      	nop
 8003636:	371c      	adds	r7, #28
 8003638:	46bd      	mov	sp, r7
 800363a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363e:	4770      	bx	lr
 8003640:	40021000 	.word	0x40021000
 8003644:	40010000 	.word	0x40010000
 8003648:	48000400 	.word	0x48000400
 800364c:	48000800 	.word	0x48000800
 8003650:	48000c00 	.word	0x48000c00
 8003654:	48001000 	.word	0x48001000
 8003658:	48001400 	.word	0x48001400
 800365c:	48001800 	.word	0x48001800
 8003660:	48001c00 	.word	0x48001c00
 8003664:	40010400 	.word	0x40010400

08003668 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003668:	b480      	push	{r7}
 800366a:	b085      	sub	sp, #20
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
 8003670:	460b      	mov	r3, r1
 8003672:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	691a      	ldr	r2, [r3, #16]
 8003678:	887b      	ldrh	r3, [r7, #2]
 800367a:	4013      	ands	r3, r2
 800367c:	2b00      	cmp	r3, #0
 800367e:	d002      	beq.n	8003686 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003680:	2301      	movs	r3, #1
 8003682:	73fb      	strb	r3, [r7, #15]
 8003684:	e001      	b.n	800368a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003686:	2300      	movs	r3, #0
 8003688:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800368a:	7bfb      	ldrb	r3, [r7, #15]
}
 800368c:	4618      	mov	r0, r3
 800368e:	3714      	adds	r7, #20
 8003690:	46bd      	mov	sp, r7
 8003692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003696:	4770      	bx	lr

08003698 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003698:	b480      	push	{r7}
 800369a:	b083      	sub	sp, #12
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
 80036a0:	460b      	mov	r3, r1
 80036a2:	807b      	strh	r3, [r7, #2]
 80036a4:	4613      	mov	r3, r2
 80036a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80036a8:	787b      	ldrb	r3, [r7, #1]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d003      	beq.n	80036b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80036ae:	887a      	ldrh	r2, [r7, #2]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80036b4:	e002      	b.n	80036bc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80036b6:	887a      	ldrh	r2, [r7, #2]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	629a      	str	r2, [r3, #40]	; 0x28
}
 80036bc:	bf00      	nop
 80036be:	370c      	adds	r7, #12
 80036c0:	46bd      	mov	sp, r7
 80036c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c6:	4770      	bx	lr

080036c8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80036c8:	b480      	push	{r7}
 80036ca:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80036cc:	4b0d      	ldr	r3, [pc, #52]	; (8003704 <HAL_PWREx_GetVoltageRange+0x3c>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80036d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036d8:	d102      	bne.n	80036e0 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80036da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80036de:	e00b      	b.n	80036f8 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80036e0:	4b08      	ldr	r3, [pc, #32]	; (8003704 <HAL_PWREx_GetVoltageRange+0x3c>)
 80036e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80036e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036ee:	d102      	bne.n	80036f6 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80036f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80036f4:	e000      	b.n	80036f8 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80036f6:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80036f8:	4618      	mov	r0, r3
 80036fa:	46bd      	mov	sp, r7
 80036fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003700:	4770      	bx	lr
 8003702:	bf00      	nop
 8003704:	40007000 	.word	0x40007000

08003708 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003708:	b480      	push	{r7}
 800370a:	b085      	sub	sp, #20
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d141      	bne.n	800379a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003716:	4b4b      	ldr	r3, [pc, #300]	; (8003844 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800371e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003722:	d131      	bne.n	8003788 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003724:	4b47      	ldr	r3, [pc, #284]	; (8003844 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003726:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800372a:	4a46      	ldr	r2, [pc, #280]	; (8003844 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800372c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003730:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003734:	4b43      	ldr	r3, [pc, #268]	; (8003844 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800373c:	4a41      	ldr	r2, [pc, #260]	; (8003844 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800373e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003742:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003744:	4b40      	ldr	r3, [pc, #256]	; (8003848 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	2232      	movs	r2, #50	; 0x32
 800374a:	fb02 f303 	mul.w	r3, r2, r3
 800374e:	4a3f      	ldr	r2, [pc, #252]	; (800384c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003750:	fba2 2303 	umull	r2, r3, r2, r3
 8003754:	0c9b      	lsrs	r3, r3, #18
 8003756:	3301      	adds	r3, #1
 8003758:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800375a:	e002      	b.n	8003762 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	3b01      	subs	r3, #1
 8003760:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003762:	4b38      	ldr	r3, [pc, #224]	; (8003844 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003764:	695b      	ldr	r3, [r3, #20]
 8003766:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800376a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800376e:	d102      	bne.n	8003776 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d1f2      	bne.n	800375c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003776:	4b33      	ldr	r3, [pc, #204]	; (8003844 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003778:	695b      	ldr	r3, [r3, #20]
 800377a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800377e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003782:	d158      	bne.n	8003836 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003784:	2303      	movs	r3, #3
 8003786:	e057      	b.n	8003838 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003788:	4b2e      	ldr	r3, [pc, #184]	; (8003844 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800378a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800378e:	4a2d      	ldr	r2, [pc, #180]	; (8003844 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003790:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003794:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003798:	e04d      	b.n	8003836 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037a0:	d141      	bne.n	8003826 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80037a2:	4b28      	ldr	r3, [pc, #160]	; (8003844 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80037aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037ae:	d131      	bne.n	8003814 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80037b0:	4b24      	ldr	r3, [pc, #144]	; (8003844 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80037b6:	4a23      	ldr	r2, [pc, #140]	; (8003844 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037bc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80037c0:	4b20      	ldr	r3, [pc, #128]	; (8003844 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80037c8:	4a1e      	ldr	r2, [pc, #120]	; (8003844 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80037ce:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80037d0:	4b1d      	ldr	r3, [pc, #116]	; (8003848 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	2232      	movs	r2, #50	; 0x32
 80037d6:	fb02 f303 	mul.w	r3, r2, r3
 80037da:	4a1c      	ldr	r2, [pc, #112]	; (800384c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80037dc:	fba2 2303 	umull	r2, r3, r2, r3
 80037e0:	0c9b      	lsrs	r3, r3, #18
 80037e2:	3301      	adds	r3, #1
 80037e4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80037e6:	e002      	b.n	80037ee <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	3b01      	subs	r3, #1
 80037ec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80037ee:	4b15      	ldr	r3, [pc, #84]	; (8003844 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037f0:	695b      	ldr	r3, [r3, #20]
 80037f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037fa:	d102      	bne.n	8003802 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d1f2      	bne.n	80037e8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003802:	4b10      	ldr	r3, [pc, #64]	; (8003844 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003804:	695b      	ldr	r3, [r3, #20]
 8003806:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800380a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800380e:	d112      	bne.n	8003836 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003810:	2303      	movs	r3, #3
 8003812:	e011      	b.n	8003838 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003814:	4b0b      	ldr	r3, [pc, #44]	; (8003844 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003816:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800381a:	4a0a      	ldr	r2, [pc, #40]	; (8003844 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800381c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003820:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003824:	e007      	b.n	8003836 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003826:	4b07      	ldr	r3, [pc, #28]	; (8003844 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800382e:	4a05      	ldr	r2, [pc, #20]	; (8003844 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003830:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003834:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003836:	2300      	movs	r3, #0
}
 8003838:	4618      	mov	r0, r3
 800383a:	3714      	adds	r7, #20
 800383c:	46bd      	mov	sp, r7
 800383e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003842:	4770      	bx	lr
 8003844:	40007000 	.word	0x40007000
 8003848:	20000000 	.word	0x20000000
 800384c:	431bde83 	.word	0x431bde83

08003850 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8003850:	b480      	push	{r7}
 8003852:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8003854:	4b05      	ldr	r3, [pc, #20]	; (800386c <HAL_PWREx_EnableVddIO2+0x1c>)
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	4a04      	ldr	r2, [pc, #16]	; (800386c <HAL_PWREx_EnableVddIO2+0x1c>)
 800385a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800385e:	6053      	str	r3, [r2, #4]
}
 8003860:	bf00      	nop
 8003862:	46bd      	mov	sp, r7
 8003864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003868:	4770      	bx	lr
 800386a:	bf00      	nop
 800386c:	40007000 	.word	0x40007000

08003870 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b088      	sub	sp, #32
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d102      	bne.n	8003884 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800387e:	2301      	movs	r3, #1
 8003880:	f000 bc08 	b.w	8004094 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003884:	4b96      	ldr	r3, [pc, #600]	; (8003ae0 <HAL_RCC_OscConfig+0x270>)
 8003886:	689b      	ldr	r3, [r3, #8]
 8003888:	f003 030c 	and.w	r3, r3, #12
 800388c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800388e:	4b94      	ldr	r3, [pc, #592]	; (8003ae0 <HAL_RCC_OscConfig+0x270>)
 8003890:	68db      	ldr	r3, [r3, #12]
 8003892:	f003 0303 	and.w	r3, r3, #3
 8003896:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f003 0310 	and.w	r3, r3, #16
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	f000 80e4 	beq.w	8003a6e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80038a6:	69bb      	ldr	r3, [r7, #24]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d007      	beq.n	80038bc <HAL_RCC_OscConfig+0x4c>
 80038ac:	69bb      	ldr	r3, [r7, #24]
 80038ae:	2b0c      	cmp	r3, #12
 80038b0:	f040 808b 	bne.w	80039ca <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80038b4:	697b      	ldr	r3, [r7, #20]
 80038b6:	2b01      	cmp	r3, #1
 80038b8:	f040 8087 	bne.w	80039ca <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80038bc:	4b88      	ldr	r3, [pc, #544]	; (8003ae0 <HAL_RCC_OscConfig+0x270>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f003 0302 	and.w	r3, r3, #2
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d005      	beq.n	80038d4 <HAL_RCC_OscConfig+0x64>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	699b      	ldr	r3, [r3, #24]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d101      	bne.n	80038d4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80038d0:	2301      	movs	r3, #1
 80038d2:	e3df      	b.n	8004094 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6a1a      	ldr	r2, [r3, #32]
 80038d8:	4b81      	ldr	r3, [pc, #516]	; (8003ae0 <HAL_RCC_OscConfig+0x270>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f003 0308 	and.w	r3, r3, #8
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d004      	beq.n	80038ee <HAL_RCC_OscConfig+0x7e>
 80038e4:	4b7e      	ldr	r3, [pc, #504]	; (8003ae0 <HAL_RCC_OscConfig+0x270>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80038ec:	e005      	b.n	80038fa <HAL_RCC_OscConfig+0x8a>
 80038ee:	4b7c      	ldr	r3, [pc, #496]	; (8003ae0 <HAL_RCC_OscConfig+0x270>)
 80038f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038f4:	091b      	lsrs	r3, r3, #4
 80038f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d223      	bcs.n	8003946 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6a1b      	ldr	r3, [r3, #32]
 8003902:	4618      	mov	r0, r3
 8003904:	f000 fdfc 	bl	8004500 <RCC_SetFlashLatencyFromMSIRange>
 8003908:	4603      	mov	r3, r0
 800390a:	2b00      	cmp	r3, #0
 800390c:	d001      	beq.n	8003912 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	e3c0      	b.n	8004094 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003912:	4b73      	ldr	r3, [pc, #460]	; (8003ae0 <HAL_RCC_OscConfig+0x270>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a72      	ldr	r2, [pc, #456]	; (8003ae0 <HAL_RCC_OscConfig+0x270>)
 8003918:	f043 0308 	orr.w	r3, r3, #8
 800391c:	6013      	str	r3, [r2, #0]
 800391e:	4b70      	ldr	r3, [pc, #448]	; (8003ae0 <HAL_RCC_OscConfig+0x270>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6a1b      	ldr	r3, [r3, #32]
 800392a:	496d      	ldr	r1, [pc, #436]	; (8003ae0 <HAL_RCC_OscConfig+0x270>)
 800392c:	4313      	orrs	r3, r2
 800392e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003930:	4b6b      	ldr	r3, [pc, #428]	; (8003ae0 <HAL_RCC_OscConfig+0x270>)
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	69db      	ldr	r3, [r3, #28]
 800393c:	021b      	lsls	r3, r3, #8
 800393e:	4968      	ldr	r1, [pc, #416]	; (8003ae0 <HAL_RCC_OscConfig+0x270>)
 8003940:	4313      	orrs	r3, r2
 8003942:	604b      	str	r3, [r1, #4]
 8003944:	e025      	b.n	8003992 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003946:	4b66      	ldr	r3, [pc, #408]	; (8003ae0 <HAL_RCC_OscConfig+0x270>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a65      	ldr	r2, [pc, #404]	; (8003ae0 <HAL_RCC_OscConfig+0x270>)
 800394c:	f043 0308 	orr.w	r3, r3, #8
 8003950:	6013      	str	r3, [r2, #0]
 8003952:	4b63      	ldr	r3, [pc, #396]	; (8003ae0 <HAL_RCC_OscConfig+0x270>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6a1b      	ldr	r3, [r3, #32]
 800395e:	4960      	ldr	r1, [pc, #384]	; (8003ae0 <HAL_RCC_OscConfig+0x270>)
 8003960:	4313      	orrs	r3, r2
 8003962:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003964:	4b5e      	ldr	r3, [pc, #376]	; (8003ae0 <HAL_RCC_OscConfig+0x270>)
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	69db      	ldr	r3, [r3, #28]
 8003970:	021b      	lsls	r3, r3, #8
 8003972:	495b      	ldr	r1, [pc, #364]	; (8003ae0 <HAL_RCC_OscConfig+0x270>)
 8003974:	4313      	orrs	r3, r2
 8003976:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003978:	69bb      	ldr	r3, [r7, #24]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d109      	bne.n	8003992 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6a1b      	ldr	r3, [r3, #32]
 8003982:	4618      	mov	r0, r3
 8003984:	f000 fdbc 	bl	8004500 <RCC_SetFlashLatencyFromMSIRange>
 8003988:	4603      	mov	r3, r0
 800398a:	2b00      	cmp	r3, #0
 800398c:	d001      	beq.n	8003992 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	e380      	b.n	8004094 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003992:	f000 fcc1 	bl	8004318 <HAL_RCC_GetSysClockFreq>
 8003996:	4602      	mov	r2, r0
 8003998:	4b51      	ldr	r3, [pc, #324]	; (8003ae0 <HAL_RCC_OscConfig+0x270>)
 800399a:	689b      	ldr	r3, [r3, #8]
 800399c:	091b      	lsrs	r3, r3, #4
 800399e:	f003 030f 	and.w	r3, r3, #15
 80039a2:	4950      	ldr	r1, [pc, #320]	; (8003ae4 <HAL_RCC_OscConfig+0x274>)
 80039a4:	5ccb      	ldrb	r3, [r1, r3]
 80039a6:	f003 031f 	and.w	r3, r3, #31
 80039aa:	fa22 f303 	lsr.w	r3, r2, r3
 80039ae:	4a4e      	ldr	r2, [pc, #312]	; (8003ae8 <HAL_RCC_OscConfig+0x278>)
 80039b0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80039b2:	4b4e      	ldr	r3, [pc, #312]	; (8003aec <HAL_RCC_OscConfig+0x27c>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4618      	mov	r0, r3
 80039b8:	f7fd fb3e 	bl	8001038 <HAL_InitTick>
 80039bc:	4603      	mov	r3, r0
 80039be:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80039c0:	7bfb      	ldrb	r3, [r7, #15]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d052      	beq.n	8003a6c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80039c6:	7bfb      	ldrb	r3, [r7, #15]
 80039c8:	e364      	b.n	8004094 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	699b      	ldr	r3, [r3, #24]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d032      	beq.n	8003a38 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80039d2:	4b43      	ldr	r3, [pc, #268]	; (8003ae0 <HAL_RCC_OscConfig+0x270>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a42      	ldr	r2, [pc, #264]	; (8003ae0 <HAL_RCC_OscConfig+0x270>)
 80039d8:	f043 0301 	orr.w	r3, r3, #1
 80039dc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80039de:	f7fd fc4b 	bl	8001278 <HAL_GetTick>
 80039e2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80039e4:	e008      	b.n	80039f8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80039e6:	f7fd fc47 	bl	8001278 <HAL_GetTick>
 80039ea:	4602      	mov	r2, r0
 80039ec:	693b      	ldr	r3, [r7, #16]
 80039ee:	1ad3      	subs	r3, r2, r3
 80039f0:	2b02      	cmp	r3, #2
 80039f2:	d901      	bls.n	80039f8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80039f4:	2303      	movs	r3, #3
 80039f6:	e34d      	b.n	8004094 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80039f8:	4b39      	ldr	r3, [pc, #228]	; (8003ae0 <HAL_RCC_OscConfig+0x270>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f003 0302 	and.w	r3, r3, #2
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d0f0      	beq.n	80039e6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003a04:	4b36      	ldr	r3, [pc, #216]	; (8003ae0 <HAL_RCC_OscConfig+0x270>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a35      	ldr	r2, [pc, #212]	; (8003ae0 <HAL_RCC_OscConfig+0x270>)
 8003a0a:	f043 0308 	orr.w	r3, r3, #8
 8003a0e:	6013      	str	r3, [r2, #0]
 8003a10:	4b33      	ldr	r3, [pc, #204]	; (8003ae0 <HAL_RCC_OscConfig+0x270>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6a1b      	ldr	r3, [r3, #32]
 8003a1c:	4930      	ldr	r1, [pc, #192]	; (8003ae0 <HAL_RCC_OscConfig+0x270>)
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003a22:	4b2f      	ldr	r3, [pc, #188]	; (8003ae0 <HAL_RCC_OscConfig+0x270>)
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	69db      	ldr	r3, [r3, #28]
 8003a2e:	021b      	lsls	r3, r3, #8
 8003a30:	492b      	ldr	r1, [pc, #172]	; (8003ae0 <HAL_RCC_OscConfig+0x270>)
 8003a32:	4313      	orrs	r3, r2
 8003a34:	604b      	str	r3, [r1, #4]
 8003a36:	e01a      	b.n	8003a6e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003a38:	4b29      	ldr	r3, [pc, #164]	; (8003ae0 <HAL_RCC_OscConfig+0x270>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a28      	ldr	r2, [pc, #160]	; (8003ae0 <HAL_RCC_OscConfig+0x270>)
 8003a3e:	f023 0301 	bic.w	r3, r3, #1
 8003a42:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003a44:	f7fd fc18 	bl	8001278 <HAL_GetTick>
 8003a48:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003a4a:	e008      	b.n	8003a5e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003a4c:	f7fd fc14 	bl	8001278 <HAL_GetTick>
 8003a50:	4602      	mov	r2, r0
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	1ad3      	subs	r3, r2, r3
 8003a56:	2b02      	cmp	r3, #2
 8003a58:	d901      	bls.n	8003a5e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003a5a:	2303      	movs	r3, #3
 8003a5c:	e31a      	b.n	8004094 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003a5e:	4b20      	ldr	r3, [pc, #128]	; (8003ae0 <HAL_RCC_OscConfig+0x270>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f003 0302 	and.w	r3, r3, #2
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d1f0      	bne.n	8003a4c <HAL_RCC_OscConfig+0x1dc>
 8003a6a:	e000      	b.n	8003a6e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003a6c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f003 0301 	and.w	r3, r3, #1
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d073      	beq.n	8003b62 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003a7a:	69bb      	ldr	r3, [r7, #24]
 8003a7c:	2b08      	cmp	r3, #8
 8003a7e:	d005      	beq.n	8003a8c <HAL_RCC_OscConfig+0x21c>
 8003a80:	69bb      	ldr	r3, [r7, #24]
 8003a82:	2b0c      	cmp	r3, #12
 8003a84:	d10e      	bne.n	8003aa4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003a86:	697b      	ldr	r3, [r7, #20]
 8003a88:	2b03      	cmp	r3, #3
 8003a8a:	d10b      	bne.n	8003aa4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a8c:	4b14      	ldr	r3, [pc, #80]	; (8003ae0 <HAL_RCC_OscConfig+0x270>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d063      	beq.n	8003b60 <HAL_RCC_OscConfig+0x2f0>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d15f      	bne.n	8003b60 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	e2f7      	b.n	8004094 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003aac:	d106      	bne.n	8003abc <HAL_RCC_OscConfig+0x24c>
 8003aae:	4b0c      	ldr	r3, [pc, #48]	; (8003ae0 <HAL_RCC_OscConfig+0x270>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a0b      	ldr	r2, [pc, #44]	; (8003ae0 <HAL_RCC_OscConfig+0x270>)
 8003ab4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ab8:	6013      	str	r3, [r2, #0]
 8003aba:	e025      	b.n	8003b08 <HAL_RCC_OscConfig+0x298>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ac4:	d114      	bne.n	8003af0 <HAL_RCC_OscConfig+0x280>
 8003ac6:	4b06      	ldr	r3, [pc, #24]	; (8003ae0 <HAL_RCC_OscConfig+0x270>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4a05      	ldr	r2, [pc, #20]	; (8003ae0 <HAL_RCC_OscConfig+0x270>)
 8003acc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ad0:	6013      	str	r3, [r2, #0]
 8003ad2:	4b03      	ldr	r3, [pc, #12]	; (8003ae0 <HAL_RCC_OscConfig+0x270>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a02      	ldr	r2, [pc, #8]	; (8003ae0 <HAL_RCC_OscConfig+0x270>)
 8003ad8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003adc:	6013      	str	r3, [r2, #0]
 8003ade:	e013      	b.n	8003b08 <HAL_RCC_OscConfig+0x298>
 8003ae0:	40021000 	.word	0x40021000
 8003ae4:	0800d010 	.word	0x0800d010
 8003ae8:	20000000 	.word	0x20000000
 8003aec:	20000004 	.word	0x20000004
 8003af0:	4ba0      	ldr	r3, [pc, #640]	; (8003d74 <HAL_RCC_OscConfig+0x504>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a9f      	ldr	r2, [pc, #636]	; (8003d74 <HAL_RCC_OscConfig+0x504>)
 8003af6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003afa:	6013      	str	r3, [r2, #0]
 8003afc:	4b9d      	ldr	r3, [pc, #628]	; (8003d74 <HAL_RCC_OscConfig+0x504>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a9c      	ldr	r2, [pc, #624]	; (8003d74 <HAL_RCC_OscConfig+0x504>)
 8003b02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b06:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d013      	beq.n	8003b38 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b10:	f7fd fbb2 	bl	8001278 <HAL_GetTick>
 8003b14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b16:	e008      	b.n	8003b2a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b18:	f7fd fbae 	bl	8001278 <HAL_GetTick>
 8003b1c:	4602      	mov	r2, r0
 8003b1e:	693b      	ldr	r3, [r7, #16]
 8003b20:	1ad3      	subs	r3, r2, r3
 8003b22:	2b64      	cmp	r3, #100	; 0x64
 8003b24:	d901      	bls.n	8003b2a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003b26:	2303      	movs	r3, #3
 8003b28:	e2b4      	b.n	8004094 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b2a:	4b92      	ldr	r3, [pc, #584]	; (8003d74 <HAL_RCC_OscConfig+0x504>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d0f0      	beq.n	8003b18 <HAL_RCC_OscConfig+0x2a8>
 8003b36:	e014      	b.n	8003b62 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b38:	f7fd fb9e 	bl	8001278 <HAL_GetTick>
 8003b3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003b3e:	e008      	b.n	8003b52 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b40:	f7fd fb9a 	bl	8001278 <HAL_GetTick>
 8003b44:	4602      	mov	r2, r0
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	1ad3      	subs	r3, r2, r3
 8003b4a:	2b64      	cmp	r3, #100	; 0x64
 8003b4c:	d901      	bls.n	8003b52 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003b4e:	2303      	movs	r3, #3
 8003b50:	e2a0      	b.n	8004094 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003b52:	4b88      	ldr	r3, [pc, #544]	; (8003d74 <HAL_RCC_OscConfig+0x504>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d1f0      	bne.n	8003b40 <HAL_RCC_OscConfig+0x2d0>
 8003b5e:	e000      	b.n	8003b62 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f003 0302 	and.w	r3, r3, #2
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d060      	beq.n	8003c30 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003b6e:	69bb      	ldr	r3, [r7, #24]
 8003b70:	2b04      	cmp	r3, #4
 8003b72:	d005      	beq.n	8003b80 <HAL_RCC_OscConfig+0x310>
 8003b74:	69bb      	ldr	r3, [r7, #24]
 8003b76:	2b0c      	cmp	r3, #12
 8003b78:	d119      	bne.n	8003bae <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	2b02      	cmp	r3, #2
 8003b7e:	d116      	bne.n	8003bae <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b80:	4b7c      	ldr	r3, [pc, #496]	; (8003d74 <HAL_RCC_OscConfig+0x504>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d005      	beq.n	8003b98 <HAL_RCC_OscConfig+0x328>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	68db      	ldr	r3, [r3, #12]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d101      	bne.n	8003b98 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003b94:	2301      	movs	r3, #1
 8003b96:	e27d      	b.n	8004094 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b98:	4b76      	ldr	r3, [pc, #472]	; (8003d74 <HAL_RCC_OscConfig+0x504>)
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	691b      	ldr	r3, [r3, #16]
 8003ba4:	061b      	lsls	r3, r3, #24
 8003ba6:	4973      	ldr	r1, [pc, #460]	; (8003d74 <HAL_RCC_OscConfig+0x504>)
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003bac:	e040      	b.n	8003c30 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	68db      	ldr	r3, [r3, #12]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d023      	beq.n	8003bfe <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003bb6:	4b6f      	ldr	r3, [pc, #444]	; (8003d74 <HAL_RCC_OscConfig+0x504>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a6e      	ldr	r2, [pc, #440]	; (8003d74 <HAL_RCC_OscConfig+0x504>)
 8003bbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bc0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bc2:	f7fd fb59 	bl	8001278 <HAL_GetTick>
 8003bc6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003bc8:	e008      	b.n	8003bdc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003bca:	f7fd fb55 	bl	8001278 <HAL_GetTick>
 8003bce:	4602      	mov	r2, r0
 8003bd0:	693b      	ldr	r3, [r7, #16]
 8003bd2:	1ad3      	subs	r3, r2, r3
 8003bd4:	2b02      	cmp	r3, #2
 8003bd6:	d901      	bls.n	8003bdc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003bd8:	2303      	movs	r3, #3
 8003bda:	e25b      	b.n	8004094 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003bdc:	4b65      	ldr	r3, [pc, #404]	; (8003d74 <HAL_RCC_OscConfig+0x504>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d0f0      	beq.n	8003bca <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003be8:	4b62      	ldr	r3, [pc, #392]	; (8003d74 <HAL_RCC_OscConfig+0x504>)
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	691b      	ldr	r3, [r3, #16]
 8003bf4:	061b      	lsls	r3, r3, #24
 8003bf6:	495f      	ldr	r1, [pc, #380]	; (8003d74 <HAL_RCC_OscConfig+0x504>)
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	604b      	str	r3, [r1, #4]
 8003bfc:	e018      	b.n	8003c30 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003bfe:	4b5d      	ldr	r3, [pc, #372]	; (8003d74 <HAL_RCC_OscConfig+0x504>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a5c      	ldr	r2, [pc, #368]	; (8003d74 <HAL_RCC_OscConfig+0x504>)
 8003c04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c0a:	f7fd fb35 	bl	8001278 <HAL_GetTick>
 8003c0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003c10:	e008      	b.n	8003c24 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c12:	f7fd fb31 	bl	8001278 <HAL_GetTick>
 8003c16:	4602      	mov	r2, r0
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	1ad3      	subs	r3, r2, r3
 8003c1c:	2b02      	cmp	r3, #2
 8003c1e:	d901      	bls.n	8003c24 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003c20:	2303      	movs	r3, #3
 8003c22:	e237      	b.n	8004094 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003c24:	4b53      	ldr	r3, [pc, #332]	; (8003d74 <HAL_RCC_OscConfig+0x504>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d1f0      	bne.n	8003c12 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f003 0308 	and.w	r3, r3, #8
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d03c      	beq.n	8003cb6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	695b      	ldr	r3, [r3, #20]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d01c      	beq.n	8003c7e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c44:	4b4b      	ldr	r3, [pc, #300]	; (8003d74 <HAL_RCC_OscConfig+0x504>)
 8003c46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c4a:	4a4a      	ldr	r2, [pc, #296]	; (8003d74 <HAL_RCC_OscConfig+0x504>)
 8003c4c:	f043 0301 	orr.w	r3, r3, #1
 8003c50:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c54:	f7fd fb10 	bl	8001278 <HAL_GetTick>
 8003c58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003c5a:	e008      	b.n	8003c6e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c5c:	f7fd fb0c 	bl	8001278 <HAL_GetTick>
 8003c60:	4602      	mov	r2, r0
 8003c62:	693b      	ldr	r3, [r7, #16]
 8003c64:	1ad3      	subs	r3, r2, r3
 8003c66:	2b02      	cmp	r3, #2
 8003c68:	d901      	bls.n	8003c6e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003c6a:	2303      	movs	r3, #3
 8003c6c:	e212      	b.n	8004094 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003c6e:	4b41      	ldr	r3, [pc, #260]	; (8003d74 <HAL_RCC_OscConfig+0x504>)
 8003c70:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c74:	f003 0302 	and.w	r3, r3, #2
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d0ef      	beq.n	8003c5c <HAL_RCC_OscConfig+0x3ec>
 8003c7c:	e01b      	b.n	8003cb6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c7e:	4b3d      	ldr	r3, [pc, #244]	; (8003d74 <HAL_RCC_OscConfig+0x504>)
 8003c80:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c84:	4a3b      	ldr	r2, [pc, #236]	; (8003d74 <HAL_RCC_OscConfig+0x504>)
 8003c86:	f023 0301 	bic.w	r3, r3, #1
 8003c8a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c8e:	f7fd faf3 	bl	8001278 <HAL_GetTick>
 8003c92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003c94:	e008      	b.n	8003ca8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c96:	f7fd faef 	bl	8001278 <HAL_GetTick>
 8003c9a:	4602      	mov	r2, r0
 8003c9c:	693b      	ldr	r3, [r7, #16]
 8003c9e:	1ad3      	subs	r3, r2, r3
 8003ca0:	2b02      	cmp	r3, #2
 8003ca2:	d901      	bls.n	8003ca8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003ca4:	2303      	movs	r3, #3
 8003ca6:	e1f5      	b.n	8004094 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003ca8:	4b32      	ldr	r3, [pc, #200]	; (8003d74 <HAL_RCC_OscConfig+0x504>)
 8003caa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003cae:	f003 0302 	and.w	r3, r3, #2
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d1ef      	bne.n	8003c96 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f003 0304 	and.w	r3, r3, #4
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	f000 80a6 	beq.w	8003e10 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003cc8:	4b2a      	ldr	r3, [pc, #168]	; (8003d74 <HAL_RCC_OscConfig+0x504>)
 8003cca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ccc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d10d      	bne.n	8003cf0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cd4:	4b27      	ldr	r3, [pc, #156]	; (8003d74 <HAL_RCC_OscConfig+0x504>)
 8003cd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cd8:	4a26      	ldr	r2, [pc, #152]	; (8003d74 <HAL_RCC_OscConfig+0x504>)
 8003cda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cde:	6593      	str	r3, [r2, #88]	; 0x58
 8003ce0:	4b24      	ldr	r3, [pc, #144]	; (8003d74 <HAL_RCC_OscConfig+0x504>)
 8003ce2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ce4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ce8:	60bb      	str	r3, [r7, #8]
 8003cea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003cec:	2301      	movs	r3, #1
 8003cee:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003cf0:	4b21      	ldr	r3, [pc, #132]	; (8003d78 <HAL_RCC_OscConfig+0x508>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d118      	bne.n	8003d2e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003cfc:	4b1e      	ldr	r3, [pc, #120]	; (8003d78 <HAL_RCC_OscConfig+0x508>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a1d      	ldr	r2, [pc, #116]	; (8003d78 <HAL_RCC_OscConfig+0x508>)
 8003d02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d06:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d08:	f7fd fab6 	bl	8001278 <HAL_GetTick>
 8003d0c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d0e:	e008      	b.n	8003d22 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d10:	f7fd fab2 	bl	8001278 <HAL_GetTick>
 8003d14:	4602      	mov	r2, r0
 8003d16:	693b      	ldr	r3, [r7, #16]
 8003d18:	1ad3      	subs	r3, r2, r3
 8003d1a:	2b02      	cmp	r3, #2
 8003d1c:	d901      	bls.n	8003d22 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003d1e:	2303      	movs	r3, #3
 8003d20:	e1b8      	b.n	8004094 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d22:	4b15      	ldr	r3, [pc, #84]	; (8003d78 <HAL_RCC_OscConfig+0x508>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d0f0      	beq.n	8003d10 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	689b      	ldr	r3, [r3, #8]
 8003d32:	2b01      	cmp	r3, #1
 8003d34:	d108      	bne.n	8003d48 <HAL_RCC_OscConfig+0x4d8>
 8003d36:	4b0f      	ldr	r3, [pc, #60]	; (8003d74 <HAL_RCC_OscConfig+0x504>)
 8003d38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d3c:	4a0d      	ldr	r2, [pc, #52]	; (8003d74 <HAL_RCC_OscConfig+0x504>)
 8003d3e:	f043 0301 	orr.w	r3, r3, #1
 8003d42:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003d46:	e029      	b.n	8003d9c <HAL_RCC_OscConfig+0x52c>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	689b      	ldr	r3, [r3, #8]
 8003d4c:	2b05      	cmp	r3, #5
 8003d4e:	d115      	bne.n	8003d7c <HAL_RCC_OscConfig+0x50c>
 8003d50:	4b08      	ldr	r3, [pc, #32]	; (8003d74 <HAL_RCC_OscConfig+0x504>)
 8003d52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d56:	4a07      	ldr	r2, [pc, #28]	; (8003d74 <HAL_RCC_OscConfig+0x504>)
 8003d58:	f043 0304 	orr.w	r3, r3, #4
 8003d5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003d60:	4b04      	ldr	r3, [pc, #16]	; (8003d74 <HAL_RCC_OscConfig+0x504>)
 8003d62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d66:	4a03      	ldr	r2, [pc, #12]	; (8003d74 <HAL_RCC_OscConfig+0x504>)
 8003d68:	f043 0301 	orr.w	r3, r3, #1
 8003d6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003d70:	e014      	b.n	8003d9c <HAL_RCC_OscConfig+0x52c>
 8003d72:	bf00      	nop
 8003d74:	40021000 	.word	0x40021000
 8003d78:	40007000 	.word	0x40007000
 8003d7c:	4b9d      	ldr	r3, [pc, #628]	; (8003ff4 <HAL_RCC_OscConfig+0x784>)
 8003d7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d82:	4a9c      	ldr	r2, [pc, #624]	; (8003ff4 <HAL_RCC_OscConfig+0x784>)
 8003d84:	f023 0301 	bic.w	r3, r3, #1
 8003d88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003d8c:	4b99      	ldr	r3, [pc, #612]	; (8003ff4 <HAL_RCC_OscConfig+0x784>)
 8003d8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d92:	4a98      	ldr	r2, [pc, #608]	; (8003ff4 <HAL_RCC_OscConfig+0x784>)
 8003d94:	f023 0304 	bic.w	r3, r3, #4
 8003d98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	689b      	ldr	r3, [r3, #8]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d016      	beq.n	8003dd2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003da4:	f7fd fa68 	bl	8001278 <HAL_GetTick>
 8003da8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003daa:	e00a      	b.n	8003dc2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dac:	f7fd fa64 	bl	8001278 <HAL_GetTick>
 8003db0:	4602      	mov	r2, r0
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	1ad3      	subs	r3, r2, r3
 8003db6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d901      	bls.n	8003dc2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003dbe:	2303      	movs	r3, #3
 8003dc0:	e168      	b.n	8004094 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003dc2:	4b8c      	ldr	r3, [pc, #560]	; (8003ff4 <HAL_RCC_OscConfig+0x784>)
 8003dc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dc8:	f003 0302 	and.w	r3, r3, #2
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d0ed      	beq.n	8003dac <HAL_RCC_OscConfig+0x53c>
 8003dd0:	e015      	b.n	8003dfe <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dd2:	f7fd fa51 	bl	8001278 <HAL_GetTick>
 8003dd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003dd8:	e00a      	b.n	8003df0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dda:	f7fd fa4d 	bl	8001278 <HAL_GetTick>
 8003dde:	4602      	mov	r2, r0
 8003de0:	693b      	ldr	r3, [r7, #16]
 8003de2:	1ad3      	subs	r3, r2, r3
 8003de4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d901      	bls.n	8003df0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003dec:	2303      	movs	r3, #3
 8003dee:	e151      	b.n	8004094 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003df0:	4b80      	ldr	r3, [pc, #512]	; (8003ff4 <HAL_RCC_OscConfig+0x784>)
 8003df2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003df6:	f003 0302 	and.w	r3, r3, #2
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d1ed      	bne.n	8003dda <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003dfe:	7ffb      	ldrb	r3, [r7, #31]
 8003e00:	2b01      	cmp	r3, #1
 8003e02:	d105      	bne.n	8003e10 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e04:	4b7b      	ldr	r3, [pc, #492]	; (8003ff4 <HAL_RCC_OscConfig+0x784>)
 8003e06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e08:	4a7a      	ldr	r2, [pc, #488]	; (8003ff4 <HAL_RCC_OscConfig+0x784>)
 8003e0a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e0e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f003 0320 	and.w	r3, r3, #32
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d03c      	beq.n	8003e96 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d01c      	beq.n	8003e5e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003e24:	4b73      	ldr	r3, [pc, #460]	; (8003ff4 <HAL_RCC_OscConfig+0x784>)
 8003e26:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003e2a:	4a72      	ldr	r2, [pc, #456]	; (8003ff4 <HAL_RCC_OscConfig+0x784>)
 8003e2c:	f043 0301 	orr.w	r3, r3, #1
 8003e30:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e34:	f7fd fa20 	bl	8001278 <HAL_GetTick>
 8003e38:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003e3a:	e008      	b.n	8003e4e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003e3c:	f7fd fa1c 	bl	8001278 <HAL_GetTick>
 8003e40:	4602      	mov	r2, r0
 8003e42:	693b      	ldr	r3, [r7, #16]
 8003e44:	1ad3      	subs	r3, r2, r3
 8003e46:	2b02      	cmp	r3, #2
 8003e48:	d901      	bls.n	8003e4e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003e4a:	2303      	movs	r3, #3
 8003e4c:	e122      	b.n	8004094 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003e4e:	4b69      	ldr	r3, [pc, #420]	; (8003ff4 <HAL_RCC_OscConfig+0x784>)
 8003e50:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003e54:	f003 0302 	and.w	r3, r3, #2
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d0ef      	beq.n	8003e3c <HAL_RCC_OscConfig+0x5cc>
 8003e5c:	e01b      	b.n	8003e96 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003e5e:	4b65      	ldr	r3, [pc, #404]	; (8003ff4 <HAL_RCC_OscConfig+0x784>)
 8003e60:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003e64:	4a63      	ldr	r2, [pc, #396]	; (8003ff4 <HAL_RCC_OscConfig+0x784>)
 8003e66:	f023 0301 	bic.w	r3, r3, #1
 8003e6a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e6e:	f7fd fa03 	bl	8001278 <HAL_GetTick>
 8003e72:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003e74:	e008      	b.n	8003e88 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003e76:	f7fd f9ff 	bl	8001278 <HAL_GetTick>
 8003e7a:	4602      	mov	r2, r0
 8003e7c:	693b      	ldr	r3, [r7, #16]
 8003e7e:	1ad3      	subs	r3, r2, r3
 8003e80:	2b02      	cmp	r3, #2
 8003e82:	d901      	bls.n	8003e88 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003e84:	2303      	movs	r3, #3
 8003e86:	e105      	b.n	8004094 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003e88:	4b5a      	ldr	r3, [pc, #360]	; (8003ff4 <HAL_RCC_OscConfig+0x784>)
 8003e8a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003e8e:	f003 0302 	and.w	r3, r3, #2
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d1ef      	bne.n	8003e76 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	f000 80f9 	beq.w	8004092 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ea4:	2b02      	cmp	r3, #2
 8003ea6:	f040 80cf 	bne.w	8004048 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003eaa:	4b52      	ldr	r3, [pc, #328]	; (8003ff4 <HAL_RCC_OscConfig+0x784>)
 8003eac:	68db      	ldr	r3, [r3, #12]
 8003eae:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003eb0:	697b      	ldr	r3, [r7, #20]
 8003eb2:	f003 0203 	and.w	r2, r3, #3
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eba:	429a      	cmp	r2, r3
 8003ebc:	d12c      	bne.n	8003f18 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ec8:	3b01      	subs	r3, #1
 8003eca:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ecc:	429a      	cmp	r2, r3
 8003ece:	d123      	bne.n	8003f18 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ed0:	697b      	ldr	r3, [r7, #20]
 8003ed2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003eda:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003edc:	429a      	cmp	r2, r3
 8003ede:	d11b      	bne.n	8003f18 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003ee0:	697b      	ldr	r3, [r7, #20]
 8003ee2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eea:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003eec:	429a      	cmp	r2, r3
 8003eee:	d113      	bne.n	8003f18 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003ef0:	697b      	ldr	r3, [r7, #20]
 8003ef2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003efa:	085b      	lsrs	r3, r3, #1
 8003efc:	3b01      	subs	r3, #1
 8003efe:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003f00:	429a      	cmp	r2, r3
 8003f02:	d109      	bne.n	8003f18 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003f04:	697b      	ldr	r3, [r7, #20]
 8003f06:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f0e:	085b      	lsrs	r3, r3, #1
 8003f10:	3b01      	subs	r3, #1
 8003f12:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f14:	429a      	cmp	r2, r3
 8003f16:	d071      	beq.n	8003ffc <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003f18:	69bb      	ldr	r3, [r7, #24]
 8003f1a:	2b0c      	cmp	r3, #12
 8003f1c:	d068      	beq.n	8003ff0 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003f1e:	4b35      	ldr	r3, [pc, #212]	; (8003ff4 <HAL_RCC_OscConfig+0x784>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d105      	bne.n	8003f36 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003f2a:	4b32      	ldr	r3, [pc, #200]	; (8003ff4 <HAL_RCC_OscConfig+0x784>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d001      	beq.n	8003f3a <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	e0ac      	b.n	8004094 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003f3a:	4b2e      	ldr	r3, [pc, #184]	; (8003ff4 <HAL_RCC_OscConfig+0x784>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a2d      	ldr	r2, [pc, #180]	; (8003ff4 <HAL_RCC_OscConfig+0x784>)
 8003f40:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f44:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003f46:	f7fd f997 	bl	8001278 <HAL_GetTick>
 8003f4a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f4c:	e008      	b.n	8003f60 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f4e:	f7fd f993 	bl	8001278 <HAL_GetTick>
 8003f52:	4602      	mov	r2, r0
 8003f54:	693b      	ldr	r3, [r7, #16]
 8003f56:	1ad3      	subs	r3, r2, r3
 8003f58:	2b02      	cmp	r3, #2
 8003f5a:	d901      	bls.n	8003f60 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8003f5c:	2303      	movs	r3, #3
 8003f5e:	e099      	b.n	8004094 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f60:	4b24      	ldr	r3, [pc, #144]	; (8003ff4 <HAL_RCC_OscConfig+0x784>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d1f0      	bne.n	8003f4e <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f6c:	4b21      	ldr	r3, [pc, #132]	; (8003ff4 <HAL_RCC_OscConfig+0x784>)
 8003f6e:	68da      	ldr	r2, [r3, #12]
 8003f70:	4b21      	ldr	r3, [pc, #132]	; (8003ff8 <HAL_RCC_OscConfig+0x788>)
 8003f72:	4013      	ands	r3, r2
 8003f74:	687a      	ldr	r2, [r7, #4]
 8003f76:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003f78:	687a      	ldr	r2, [r7, #4]
 8003f7a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003f7c:	3a01      	subs	r2, #1
 8003f7e:	0112      	lsls	r2, r2, #4
 8003f80:	4311      	orrs	r1, r2
 8003f82:	687a      	ldr	r2, [r7, #4]
 8003f84:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003f86:	0212      	lsls	r2, r2, #8
 8003f88:	4311      	orrs	r1, r2
 8003f8a:	687a      	ldr	r2, [r7, #4]
 8003f8c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003f8e:	0852      	lsrs	r2, r2, #1
 8003f90:	3a01      	subs	r2, #1
 8003f92:	0552      	lsls	r2, r2, #21
 8003f94:	4311      	orrs	r1, r2
 8003f96:	687a      	ldr	r2, [r7, #4]
 8003f98:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003f9a:	0852      	lsrs	r2, r2, #1
 8003f9c:	3a01      	subs	r2, #1
 8003f9e:	0652      	lsls	r2, r2, #25
 8003fa0:	4311      	orrs	r1, r2
 8003fa2:	687a      	ldr	r2, [r7, #4]
 8003fa4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003fa6:	06d2      	lsls	r2, r2, #27
 8003fa8:	430a      	orrs	r2, r1
 8003faa:	4912      	ldr	r1, [pc, #72]	; (8003ff4 <HAL_RCC_OscConfig+0x784>)
 8003fac:	4313      	orrs	r3, r2
 8003fae:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003fb0:	4b10      	ldr	r3, [pc, #64]	; (8003ff4 <HAL_RCC_OscConfig+0x784>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a0f      	ldr	r2, [pc, #60]	; (8003ff4 <HAL_RCC_OscConfig+0x784>)
 8003fb6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003fba:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003fbc:	4b0d      	ldr	r3, [pc, #52]	; (8003ff4 <HAL_RCC_OscConfig+0x784>)
 8003fbe:	68db      	ldr	r3, [r3, #12]
 8003fc0:	4a0c      	ldr	r2, [pc, #48]	; (8003ff4 <HAL_RCC_OscConfig+0x784>)
 8003fc2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003fc6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003fc8:	f7fd f956 	bl	8001278 <HAL_GetTick>
 8003fcc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003fce:	e008      	b.n	8003fe2 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fd0:	f7fd f952 	bl	8001278 <HAL_GetTick>
 8003fd4:	4602      	mov	r2, r0
 8003fd6:	693b      	ldr	r3, [r7, #16]
 8003fd8:	1ad3      	subs	r3, r2, r3
 8003fda:	2b02      	cmp	r3, #2
 8003fdc:	d901      	bls.n	8003fe2 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8003fde:	2303      	movs	r3, #3
 8003fe0:	e058      	b.n	8004094 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003fe2:	4b04      	ldr	r3, [pc, #16]	; (8003ff4 <HAL_RCC_OscConfig+0x784>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d0f0      	beq.n	8003fd0 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003fee:	e050      	b.n	8004092 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	e04f      	b.n	8004094 <HAL_RCC_OscConfig+0x824>
 8003ff4:	40021000 	.word	0x40021000
 8003ff8:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ffc:	4b27      	ldr	r3, [pc, #156]	; (800409c <HAL_RCC_OscConfig+0x82c>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004004:	2b00      	cmp	r3, #0
 8004006:	d144      	bne.n	8004092 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004008:	4b24      	ldr	r3, [pc, #144]	; (800409c <HAL_RCC_OscConfig+0x82c>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a23      	ldr	r2, [pc, #140]	; (800409c <HAL_RCC_OscConfig+0x82c>)
 800400e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004012:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004014:	4b21      	ldr	r3, [pc, #132]	; (800409c <HAL_RCC_OscConfig+0x82c>)
 8004016:	68db      	ldr	r3, [r3, #12]
 8004018:	4a20      	ldr	r2, [pc, #128]	; (800409c <HAL_RCC_OscConfig+0x82c>)
 800401a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800401e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004020:	f7fd f92a 	bl	8001278 <HAL_GetTick>
 8004024:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004026:	e008      	b.n	800403a <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004028:	f7fd f926 	bl	8001278 <HAL_GetTick>
 800402c:	4602      	mov	r2, r0
 800402e:	693b      	ldr	r3, [r7, #16]
 8004030:	1ad3      	subs	r3, r2, r3
 8004032:	2b02      	cmp	r3, #2
 8004034:	d901      	bls.n	800403a <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8004036:	2303      	movs	r3, #3
 8004038:	e02c      	b.n	8004094 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800403a:	4b18      	ldr	r3, [pc, #96]	; (800409c <HAL_RCC_OscConfig+0x82c>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004042:	2b00      	cmp	r3, #0
 8004044:	d0f0      	beq.n	8004028 <HAL_RCC_OscConfig+0x7b8>
 8004046:	e024      	b.n	8004092 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004048:	69bb      	ldr	r3, [r7, #24]
 800404a:	2b0c      	cmp	r3, #12
 800404c:	d01f      	beq.n	800408e <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800404e:	4b13      	ldr	r3, [pc, #76]	; (800409c <HAL_RCC_OscConfig+0x82c>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4a12      	ldr	r2, [pc, #72]	; (800409c <HAL_RCC_OscConfig+0x82c>)
 8004054:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004058:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800405a:	f7fd f90d 	bl	8001278 <HAL_GetTick>
 800405e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004060:	e008      	b.n	8004074 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004062:	f7fd f909 	bl	8001278 <HAL_GetTick>
 8004066:	4602      	mov	r2, r0
 8004068:	693b      	ldr	r3, [r7, #16]
 800406a:	1ad3      	subs	r3, r2, r3
 800406c:	2b02      	cmp	r3, #2
 800406e:	d901      	bls.n	8004074 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8004070:	2303      	movs	r3, #3
 8004072:	e00f      	b.n	8004094 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004074:	4b09      	ldr	r3, [pc, #36]	; (800409c <HAL_RCC_OscConfig+0x82c>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800407c:	2b00      	cmp	r3, #0
 800407e:	d1f0      	bne.n	8004062 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004080:	4b06      	ldr	r3, [pc, #24]	; (800409c <HAL_RCC_OscConfig+0x82c>)
 8004082:	68da      	ldr	r2, [r3, #12]
 8004084:	4905      	ldr	r1, [pc, #20]	; (800409c <HAL_RCC_OscConfig+0x82c>)
 8004086:	4b06      	ldr	r3, [pc, #24]	; (80040a0 <HAL_RCC_OscConfig+0x830>)
 8004088:	4013      	ands	r3, r2
 800408a:	60cb      	str	r3, [r1, #12]
 800408c:	e001      	b.n	8004092 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800408e:	2301      	movs	r3, #1
 8004090:	e000      	b.n	8004094 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8004092:	2300      	movs	r3, #0
}
 8004094:	4618      	mov	r0, r3
 8004096:	3720      	adds	r7, #32
 8004098:	46bd      	mov	sp, r7
 800409a:	bd80      	pop	{r7, pc}
 800409c:	40021000 	.word	0x40021000
 80040a0:	feeefffc 	.word	0xfeeefffc

080040a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b086      	sub	sp, #24
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
 80040ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80040ae:	2300      	movs	r3, #0
 80040b0:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d101      	bne.n	80040bc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80040b8:	2301      	movs	r3, #1
 80040ba:	e11d      	b.n	80042f8 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80040bc:	4b90      	ldr	r3, [pc, #576]	; (8004300 <HAL_RCC_ClockConfig+0x25c>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f003 030f 	and.w	r3, r3, #15
 80040c4:	683a      	ldr	r2, [r7, #0]
 80040c6:	429a      	cmp	r2, r3
 80040c8:	d910      	bls.n	80040ec <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040ca:	4b8d      	ldr	r3, [pc, #564]	; (8004300 <HAL_RCC_ClockConfig+0x25c>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f023 020f 	bic.w	r2, r3, #15
 80040d2:	498b      	ldr	r1, [pc, #556]	; (8004300 <HAL_RCC_ClockConfig+0x25c>)
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	4313      	orrs	r3, r2
 80040d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040da:	4b89      	ldr	r3, [pc, #548]	; (8004300 <HAL_RCC_ClockConfig+0x25c>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f003 030f 	and.w	r3, r3, #15
 80040e2:	683a      	ldr	r2, [r7, #0]
 80040e4:	429a      	cmp	r2, r3
 80040e6:	d001      	beq.n	80040ec <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80040e8:	2301      	movs	r3, #1
 80040ea:	e105      	b.n	80042f8 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f003 0302 	and.w	r3, r3, #2
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d010      	beq.n	800411a <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	689a      	ldr	r2, [r3, #8]
 80040fc:	4b81      	ldr	r3, [pc, #516]	; (8004304 <HAL_RCC_ClockConfig+0x260>)
 80040fe:	689b      	ldr	r3, [r3, #8]
 8004100:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004104:	429a      	cmp	r2, r3
 8004106:	d908      	bls.n	800411a <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004108:	4b7e      	ldr	r3, [pc, #504]	; (8004304 <HAL_RCC_ClockConfig+0x260>)
 800410a:	689b      	ldr	r3, [r3, #8]
 800410c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	689b      	ldr	r3, [r3, #8]
 8004114:	497b      	ldr	r1, [pc, #492]	; (8004304 <HAL_RCC_ClockConfig+0x260>)
 8004116:	4313      	orrs	r3, r2
 8004118:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f003 0301 	and.w	r3, r3, #1
 8004122:	2b00      	cmp	r3, #0
 8004124:	d079      	beq.n	800421a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	2b03      	cmp	r3, #3
 800412c:	d11e      	bne.n	800416c <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800412e:	4b75      	ldr	r3, [pc, #468]	; (8004304 <HAL_RCC_ClockConfig+0x260>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004136:	2b00      	cmp	r3, #0
 8004138:	d101      	bne.n	800413e <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 800413a:	2301      	movs	r3, #1
 800413c:	e0dc      	b.n	80042f8 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800413e:	f000 fa39 	bl	80045b4 <RCC_GetSysClockFreqFromPLLSource>
 8004142:	4603      	mov	r3, r0
 8004144:	4a70      	ldr	r2, [pc, #448]	; (8004308 <HAL_RCC_ClockConfig+0x264>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d946      	bls.n	80041d8 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800414a:	4b6e      	ldr	r3, [pc, #440]	; (8004304 <HAL_RCC_ClockConfig+0x260>)
 800414c:	689b      	ldr	r3, [r3, #8]
 800414e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004152:	2b00      	cmp	r3, #0
 8004154:	d140      	bne.n	80041d8 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004156:	4b6b      	ldr	r3, [pc, #428]	; (8004304 <HAL_RCC_ClockConfig+0x260>)
 8004158:	689b      	ldr	r3, [r3, #8]
 800415a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800415e:	4a69      	ldr	r2, [pc, #420]	; (8004304 <HAL_RCC_ClockConfig+0x260>)
 8004160:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004164:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004166:	2380      	movs	r3, #128	; 0x80
 8004168:	617b      	str	r3, [r7, #20]
 800416a:	e035      	b.n	80041d8 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	2b02      	cmp	r3, #2
 8004172:	d107      	bne.n	8004184 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004174:	4b63      	ldr	r3, [pc, #396]	; (8004304 <HAL_RCC_ClockConfig+0x260>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800417c:	2b00      	cmp	r3, #0
 800417e:	d115      	bne.n	80041ac <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004180:	2301      	movs	r3, #1
 8004182:	e0b9      	b.n	80042f8 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d107      	bne.n	800419c <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800418c:	4b5d      	ldr	r3, [pc, #372]	; (8004304 <HAL_RCC_ClockConfig+0x260>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f003 0302 	and.w	r3, r3, #2
 8004194:	2b00      	cmp	r3, #0
 8004196:	d109      	bne.n	80041ac <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004198:	2301      	movs	r3, #1
 800419a:	e0ad      	b.n	80042f8 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800419c:	4b59      	ldr	r3, [pc, #356]	; (8004304 <HAL_RCC_ClockConfig+0x260>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d101      	bne.n	80041ac <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80041a8:	2301      	movs	r3, #1
 80041aa:	e0a5      	b.n	80042f8 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80041ac:	f000 f8b4 	bl	8004318 <HAL_RCC_GetSysClockFreq>
 80041b0:	4603      	mov	r3, r0
 80041b2:	4a55      	ldr	r2, [pc, #340]	; (8004308 <HAL_RCC_ClockConfig+0x264>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d90f      	bls.n	80041d8 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80041b8:	4b52      	ldr	r3, [pc, #328]	; (8004304 <HAL_RCC_ClockConfig+0x260>)
 80041ba:	689b      	ldr	r3, [r3, #8]
 80041bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d109      	bne.n	80041d8 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80041c4:	4b4f      	ldr	r3, [pc, #316]	; (8004304 <HAL_RCC_ClockConfig+0x260>)
 80041c6:	689b      	ldr	r3, [r3, #8]
 80041c8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80041cc:	4a4d      	ldr	r2, [pc, #308]	; (8004304 <HAL_RCC_ClockConfig+0x260>)
 80041ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041d2:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80041d4:	2380      	movs	r3, #128	; 0x80
 80041d6:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80041d8:	4b4a      	ldr	r3, [pc, #296]	; (8004304 <HAL_RCC_ClockConfig+0x260>)
 80041da:	689b      	ldr	r3, [r3, #8]
 80041dc:	f023 0203 	bic.w	r2, r3, #3
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	4947      	ldr	r1, [pc, #284]	; (8004304 <HAL_RCC_ClockConfig+0x260>)
 80041e6:	4313      	orrs	r3, r2
 80041e8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041ea:	f7fd f845 	bl	8001278 <HAL_GetTick>
 80041ee:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041f0:	e00a      	b.n	8004208 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041f2:	f7fd f841 	bl	8001278 <HAL_GetTick>
 80041f6:	4602      	mov	r2, r0
 80041f8:	693b      	ldr	r3, [r7, #16]
 80041fa:	1ad3      	subs	r3, r2, r3
 80041fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004200:	4293      	cmp	r3, r2
 8004202:	d901      	bls.n	8004208 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8004204:	2303      	movs	r3, #3
 8004206:	e077      	b.n	80042f8 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004208:	4b3e      	ldr	r3, [pc, #248]	; (8004304 <HAL_RCC_ClockConfig+0x260>)
 800420a:	689b      	ldr	r3, [r3, #8]
 800420c:	f003 020c 	and.w	r2, r3, #12
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	009b      	lsls	r3, r3, #2
 8004216:	429a      	cmp	r2, r3
 8004218:	d1eb      	bne.n	80041f2 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 800421a:	697b      	ldr	r3, [r7, #20]
 800421c:	2b80      	cmp	r3, #128	; 0x80
 800421e:	d105      	bne.n	800422c <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004220:	4b38      	ldr	r3, [pc, #224]	; (8004304 <HAL_RCC_ClockConfig+0x260>)
 8004222:	689b      	ldr	r3, [r3, #8]
 8004224:	4a37      	ldr	r2, [pc, #220]	; (8004304 <HAL_RCC_ClockConfig+0x260>)
 8004226:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800422a:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f003 0302 	and.w	r3, r3, #2
 8004234:	2b00      	cmp	r3, #0
 8004236:	d010      	beq.n	800425a <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	689a      	ldr	r2, [r3, #8]
 800423c:	4b31      	ldr	r3, [pc, #196]	; (8004304 <HAL_RCC_ClockConfig+0x260>)
 800423e:	689b      	ldr	r3, [r3, #8]
 8004240:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004244:	429a      	cmp	r2, r3
 8004246:	d208      	bcs.n	800425a <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004248:	4b2e      	ldr	r3, [pc, #184]	; (8004304 <HAL_RCC_ClockConfig+0x260>)
 800424a:	689b      	ldr	r3, [r3, #8]
 800424c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	689b      	ldr	r3, [r3, #8]
 8004254:	492b      	ldr	r1, [pc, #172]	; (8004304 <HAL_RCC_ClockConfig+0x260>)
 8004256:	4313      	orrs	r3, r2
 8004258:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800425a:	4b29      	ldr	r3, [pc, #164]	; (8004300 <HAL_RCC_ClockConfig+0x25c>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f003 030f 	and.w	r3, r3, #15
 8004262:	683a      	ldr	r2, [r7, #0]
 8004264:	429a      	cmp	r2, r3
 8004266:	d210      	bcs.n	800428a <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004268:	4b25      	ldr	r3, [pc, #148]	; (8004300 <HAL_RCC_ClockConfig+0x25c>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f023 020f 	bic.w	r2, r3, #15
 8004270:	4923      	ldr	r1, [pc, #140]	; (8004300 <HAL_RCC_ClockConfig+0x25c>)
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	4313      	orrs	r3, r2
 8004276:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004278:	4b21      	ldr	r3, [pc, #132]	; (8004300 <HAL_RCC_ClockConfig+0x25c>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f003 030f 	and.w	r3, r3, #15
 8004280:	683a      	ldr	r2, [r7, #0]
 8004282:	429a      	cmp	r2, r3
 8004284:	d001      	beq.n	800428a <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8004286:	2301      	movs	r3, #1
 8004288:	e036      	b.n	80042f8 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f003 0304 	and.w	r3, r3, #4
 8004292:	2b00      	cmp	r3, #0
 8004294:	d008      	beq.n	80042a8 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004296:	4b1b      	ldr	r3, [pc, #108]	; (8004304 <HAL_RCC_ClockConfig+0x260>)
 8004298:	689b      	ldr	r3, [r3, #8]
 800429a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	68db      	ldr	r3, [r3, #12]
 80042a2:	4918      	ldr	r1, [pc, #96]	; (8004304 <HAL_RCC_ClockConfig+0x260>)
 80042a4:	4313      	orrs	r3, r2
 80042a6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f003 0308 	and.w	r3, r3, #8
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d009      	beq.n	80042c8 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80042b4:	4b13      	ldr	r3, [pc, #76]	; (8004304 <HAL_RCC_ClockConfig+0x260>)
 80042b6:	689b      	ldr	r3, [r3, #8]
 80042b8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	691b      	ldr	r3, [r3, #16]
 80042c0:	00db      	lsls	r3, r3, #3
 80042c2:	4910      	ldr	r1, [pc, #64]	; (8004304 <HAL_RCC_ClockConfig+0x260>)
 80042c4:	4313      	orrs	r3, r2
 80042c6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80042c8:	f000 f826 	bl	8004318 <HAL_RCC_GetSysClockFreq>
 80042cc:	4602      	mov	r2, r0
 80042ce:	4b0d      	ldr	r3, [pc, #52]	; (8004304 <HAL_RCC_ClockConfig+0x260>)
 80042d0:	689b      	ldr	r3, [r3, #8]
 80042d2:	091b      	lsrs	r3, r3, #4
 80042d4:	f003 030f 	and.w	r3, r3, #15
 80042d8:	490c      	ldr	r1, [pc, #48]	; (800430c <HAL_RCC_ClockConfig+0x268>)
 80042da:	5ccb      	ldrb	r3, [r1, r3]
 80042dc:	f003 031f 	and.w	r3, r3, #31
 80042e0:	fa22 f303 	lsr.w	r3, r2, r3
 80042e4:	4a0a      	ldr	r2, [pc, #40]	; (8004310 <HAL_RCC_ClockConfig+0x26c>)
 80042e6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80042e8:	4b0a      	ldr	r3, [pc, #40]	; (8004314 <HAL_RCC_ClockConfig+0x270>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4618      	mov	r0, r3
 80042ee:	f7fc fea3 	bl	8001038 <HAL_InitTick>
 80042f2:	4603      	mov	r3, r0
 80042f4:	73fb      	strb	r3, [r7, #15]

  return status;
 80042f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80042f8:	4618      	mov	r0, r3
 80042fa:	3718      	adds	r7, #24
 80042fc:	46bd      	mov	sp, r7
 80042fe:	bd80      	pop	{r7, pc}
 8004300:	40022000 	.word	0x40022000
 8004304:	40021000 	.word	0x40021000
 8004308:	04c4b400 	.word	0x04c4b400
 800430c:	0800d010 	.word	0x0800d010
 8004310:	20000000 	.word	0x20000000
 8004314:	20000004 	.word	0x20000004

08004318 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004318:	b480      	push	{r7}
 800431a:	b089      	sub	sp, #36	; 0x24
 800431c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800431e:	2300      	movs	r3, #0
 8004320:	61fb      	str	r3, [r7, #28]
 8004322:	2300      	movs	r3, #0
 8004324:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004326:	4b3e      	ldr	r3, [pc, #248]	; (8004420 <HAL_RCC_GetSysClockFreq+0x108>)
 8004328:	689b      	ldr	r3, [r3, #8]
 800432a:	f003 030c 	and.w	r3, r3, #12
 800432e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004330:	4b3b      	ldr	r3, [pc, #236]	; (8004420 <HAL_RCC_GetSysClockFreq+0x108>)
 8004332:	68db      	ldr	r3, [r3, #12]
 8004334:	f003 0303 	and.w	r3, r3, #3
 8004338:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d005      	beq.n	800434c <HAL_RCC_GetSysClockFreq+0x34>
 8004340:	693b      	ldr	r3, [r7, #16]
 8004342:	2b0c      	cmp	r3, #12
 8004344:	d121      	bne.n	800438a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	2b01      	cmp	r3, #1
 800434a:	d11e      	bne.n	800438a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800434c:	4b34      	ldr	r3, [pc, #208]	; (8004420 <HAL_RCC_GetSysClockFreq+0x108>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f003 0308 	and.w	r3, r3, #8
 8004354:	2b00      	cmp	r3, #0
 8004356:	d107      	bne.n	8004368 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004358:	4b31      	ldr	r3, [pc, #196]	; (8004420 <HAL_RCC_GetSysClockFreq+0x108>)
 800435a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800435e:	0a1b      	lsrs	r3, r3, #8
 8004360:	f003 030f 	and.w	r3, r3, #15
 8004364:	61fb      	str	r3, [r7, #28]
 8004366:	e005      	b.n	8004374 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004368:	4b2d      	ldr	r3, [pc, #180]	; (8004420 <HAL_RCC_GetSysClockFreq+0x108>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	091b      	lsrs	r3, r3, #4
 800436e:	f003 030f 	and.w	r3, r3, #15
 8004372:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004374:	4a2b      	ldr	r2, [pc, #172]	; (8004424 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004376:	69fb      	ldr	r3, [r7, #28]
 8004378:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800437c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800437e:	693b      	ldr	r3, [r7, #16]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d10d      	bne.n	80043a0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004384:	69fb      	ldr	r3, [r7, #28]
 8004386:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004388:	e00a      	b.n	80043a0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	2b04      	cmp	r3, #4
 800438e:	d102      	bne.n	8004396 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004390:	4b25      	ldr	r3, [pc, #148]	; (8004428 <HAL_RCC_GetSysClockFreq+0x110>)
 8004392:	61bb      	str	r3, [r7, #24]
 8004394:	e004      	b.n	80043a0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004396:	693b      	ldr	r3, [r7, #16]
 8004398:	2b08      	cmp	r3, #8
 800439a:	d101      	bne.n	80043a0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800439c:	4b22      	ldr	r3, [pc, #136]	; (8004428 <HAL_RCC_GetSysClockFreq+0x110>)
 800439e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80043a0:	693b      	ldr	r3, [r7, #16]
 80043a2:	2b0c      	cmp	r3, #12
 80043a4:	d134      	bne.n	8004410 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80043a6:	4b1e      	ldr	r3, [pc, #120]	; (8004420 <HAL_RCC_GetSysClockFreq+0x108>)
 80043a8:	68db      	ldr	r3, [r3, #12]
 80043aa:	f003 0303 	and.w	r3, r3, #3
 80043ae:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	2b02      	cmp	r3, #2
 80043b4:	d003      	beq.n	80043be <HAL_RCC_GetSysClockFreq+0xa6>
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	2b03      	cmp	r3, #3
 80043ba:	d003      	beq.n	80043c4 <HAL_RCC_GetSysClockFreq+0xac>
 80043bc:	e005      	b.n	80043ca <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80043be:	4b1a      	ldr	r3, [pc, #104]	; (8004428 <HAL_RCC_GetSysClockFreq+0x110>)
 80043c0:	617b      	str	r3, [r7, #20]
      break;
 80043c2:	e005      	b.n	80043d0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80043c4:	4b18      	ldr	r3, [pc, #96]	; (8004428 <HAL_RCC_GetSysClockFreq+0x110>)
 80043c6:	617b      	str	r3, [r7, #20]
      break;
 80043c8:	e002      	b.n	80043d0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80043ca:	69fb      	ldr	r3, [r7, #28]
 80043cc:	617b      	str	r3, [r7, #20]
      break;
 80043ce:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80043d0:	4b13      	ldr	r3, [pc, #76]	; (8004420 <HAL_RCC_GetSysClockFreq+0x108>)
 80043d2:	68db      	ldr	r3, [r3, #12]
 80043d4:	091b      	lsrs	r3, r3, #4
 80043d6:	f003 030f 	and.w	r3, r3, #15
 80043da:	3301      	adds	r3, #1
 80043dc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80043de:	4b10      	ldr	r3, [pc, #64]	; (8004420 <HAL_RCC_GetSysClockFreq+0x108>)
 80043e0:	68db      	ldr	r3, [r3, #12]
 80043e2:	0a1b      	lsrs	r3, r3, #8
 80043e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80043e8:	697a      	ldr	r2, [r7, #20]
 80043ea:	fb03 f202 	mul.w	r2, r3, r2
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80043f4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80043f6:	4b0a      	ldr	r3, [pc, #40]	; (8004420 <HAL_RCC_GetSysClockFreq+0x108>)
 80043f8:	68db      	ldr	r3, [r3, #12]
 80043fa:	0e5b      	lsrs	r3, r3, #25
 80043fc:	f003 0303 	and.w	r3, r3, #3
 8004400:	3301      	adds	r3, #1
 8004402:	005b      	lsls	r3, r3, #1
 8004404:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004406:	697a      	ldr	r2, [r7, #20]
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	fbb2 f3f3 	udiv	r3, r2, r3
 800440e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004410:	69bb      	ldr	r3, [r7, #24]
}
 8004412:	4618      	mov	r0, r3
 8004414:	3724      	adds	r7, #36	; 0x24
 8004416:	46bd      	mov	sp, r7
 8004418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441c:	4770      	bx	lr
 800441e:	bf00      	nop
 8004420:	40021000 	.word	0x40021000
 8004424:	0800d028 	.word	0x0800d028
 8004428:	00f42400 	.word	0x00f42400

0800442c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800442c:	b480      	push	{r7}
 800442e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004430:	4b03      	ldr	r3, [pc, #12]	; (8004440 <HAL_RCC_GetHCLKFreq+0x14>)
 8004432:	681b      	ldr	r3, [r3, #0]
}
 8004434:	4618      	mov	r0, r3
 8004436:	46bd      	mov	sp, r7
 8004438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443c:	4770      	bx	lr
 800443e:	bf00      	nop
 8004440:	20000000 	.word	0x20000000

08004444 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004448:	f7ff fff0 	bl	800442c <HAL_RCC_GetHCLKFreq>
 800444c:	4602      	mov	r2, r0
 800444e:	4b06      	ldr	r3, [pc, #24]	; (8004468 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004450:	689b      	ldr	r3, [r3, #8]
 8004452:	0a1b      	lsrs	r3, r3, #8
 8004454:	f003 0307 	and.w	r3, r3, #7
 8004458:	4904      	ldr	r1, [pc, #16]	; (800446c <HAL_RCC_GetPCLK1Freq+0x28>)
 800445a:	5ccb      	ldrb	r3, [r1, r3]
 800445c:	f003 031f 	and.w	r3, r3, #31
 8004460:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004464:	4618      	mov	r0, r3
 8004466:	bd80      	pop	{r7, pc}
 8004468:	40021000 	.word	0x40021000
 800446c:	0800d020 	.word	0x0800d020

08004470 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004474:	f7ff ffda 	bl	800442c <HAL_RCC_GetHCLKFreq>
 8004478:	4602      	mov	r2, r0
 800447a:	4b06      	ldr	r3, [pc, #24]	; (8004494 <HAL_RCC_GetPCLK2Freq+0x24>)
 800447c:	689b      	ldr	r3, [r3, #8]
 800447e:	0adb      	lsrs	r3, r3, #11
 8004480:	f003 0307 	and.w	r3, r3, #7
 8004484:	4904      	ldr	r1, [pc, #16]	; (8004498 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004486:	5ccb      	ldrb	r3, [r1, r3]
 8004488:	f003 031f 	and.w	r3, r3, #31
 800448c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004490:	4618      	mov	r0, r3
 8004492:	bd80      	pop	{r7, pc}
 8004494:	40021000 	.word	0x40021000
 8004498:	0800d020 	.word	0x0800d020

0800449c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800449c:	b480      	push	{r7}
 800449e:	b083      	sub	sp, #12
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
 80044a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	220f      	movs	r2, #15
 80044aa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80044ac:	4b12      	ldr	r3, [pc, #72]	; (80044f8 <HAL_RCC_GetClockConfig+0x5c>)
 80044ae:	689b      	ldr	r3, [r3, #8]
 80044b0:	f003 0203 	and.w	r2, r3, #3
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80044b8:	4b0f      	ldr	r3, [pc, #60]	; (80044f8 <HAL_RCC_GetClockConfig+0x5c>)
 80044ba:	689b      	ldr	r3, [r3, #8]
 80044bc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80044c4:	4b0c      	ldr	r3, [pc, #48]	; (80044f8 <HAL_RCC_GetClockConfig+0x5c>)
 80044c6:	689b      	ldr	r3, [r3, #8]
 80044c8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80044d0:	4b09      	ldr	r3, [pc, #36]	; (80044f8 <HAL_RCC_GetClockConfig+0x5c>)
 80044d2:	689b      	ldr	r3, [r3, #8]
 80044d4:	08db      	lsrs	r3, r3, #3
 80044d6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80044de:	4b07      	ldr	r3, [pc, #28]	; (80044fc <HAL_RCC_GetClockConfig+0x60>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f003 020f 	and.w	r2, r3, #15
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	601a      	str	r2, [r3, #0]
}
 80044ea:	bf00      	nop
 80044ec:	370c      	adds	r7, #12
 80044ee:	46bd      	mov	sp, r7
 80044f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f4:	4770      	bx	lr
 80044f6:	bf00      	nop
 80044f8:	40021000 	.word	0x40021000
 80044fc:	40022000 	.word	0x40022000

08004500 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b086      	sub	sp, #24
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004508:	2300      	movs	r3, #0
 800450a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800450c:	4b27      	ldr	r3, [pc, #156]	; (80045ac <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800450e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004510:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004514:	2b00      	cmp	r3, #0
 8004516:	d003      	beq.n	8004520 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004518:	f7ff f8d6 	bl	80036c8 <HAL_PWREx_GetVoltageRange>
 800451c:	6178      	str	r0, [r7, #20]
 800451e:	e014      	b.n	800454a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004520:	4b22      	ldr	r3, [pc, #136]	; (80045ac <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004522:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004524:	4a21      	ldr	r2, [pc, #132]	; (80045ac <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004526:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800452a:	6593      	str	r3, [r2, #88]	; 0x58
 800452c:	4b1f      	ldr	r3, [pc, #124]	; (80045ac <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800452e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004530:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004534:	60fb      	str	r3, [r7, #12]
 8004536:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004538:	f7ff f8c6 	bl	80036c8 <HAL_PWREx_GetVoltageRange>
 800453c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800453e:	4b1b      	ldr	r3, [pc, #108]	; (80045ac <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004540:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004542:	4a1a      	ldr	r2, [pc, #104]	; (80045ac <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004544:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004548:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800454a:	697b      	ldr	r3, [r7, #20]
 800454c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004550:	d10b      	bne.n	800456a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2b80      	cmp	r3, #128	; 0x80
 8004556:	d913      	bls.n	8004580 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2ba0      	cmp	r3, #160	; 0xa0
 800455c:	d902      	bls.n	8004564 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800455e:	2302      	movs	r3, #2
 8004560:	613b      	str	r3, [r7, #16]
 8004562:	e00d      	b.n	8004580 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004564:	2301      	movs	r3, #1
 8004566:	613b      	str	r3, [r7, #16]
 8004568:	e00a      	b.n	8004580 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2b7f      	cmp	r3, #127	; 0x7f
 800456e:	d902      	bls.n	8004576 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8004570:	2302      	movs	r3, #2
 8004572:	613b      	str	r3, [r7, #16]
 8004574:	e004      	b.n	8004580 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2b70      	cmp	r3, #112	; 0x70
 800457a:	d101      	bne.n	8004580 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800457c:	2301      	movs	r3, #1
 800457e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004580:	4b0b      	ldr	r3, [pc, #44]	; (80045b0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f023 020f 	bic.w	r2, r3, #15
 8004588:	4909      	ldr	r1, [pc, #36]	; (80045b0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800458a:	693b      	ldr	r3, [r7, #16]
 800458c:	4313      	orrs	r3, r2
 800458e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004590:	4b07      	ldr	r3, [pc, #28]	; (80045b0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f003 030f 	and.w	r3, r3, #15
 8004598:	693a      	ldr	r2, [r7, #16]
 800459a:	429a      	cmp	r2, r3
 800459c:	d001      	beq.n	80045a2 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 800459e:	2301      	movs	r3, #1
 80045a0:	e000      	b.n	80045a4 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 80045a2:	2300      	movs	r3, #0
}
 80045a4:	4618      	mov	r0, r3
 80045a6:	3718      	adds	r7, #24
 80045a8:	46bd      	mov	sp, r7
 80045aa:	bd80      	pop	{r7, pc}
 80045ac:	40021000 	.word	0x40021000
 80045b0:	40022000 	.word	0x40022000

080045b4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80045b4:	b480      	push	{r7}
 80045b6:	b087      	sub	sp, #28
 80045b8:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80045ba:	4b2d      	ldr	r3, [pc, #180]	; (8004670 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80045bc:	68db      	ldr	r3, [r3, #12]
 80045be:	f003 0303 	and.w	r3, r3, #3
 80045c2:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	2b03      	cmp	r3, #3
 80045c8:	d00b      	beq.n	80045e2 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	2b03      	cmp	r3, #3
 80045ce:	d825      	bhi.n	800461c <RCC_GetSysClockFreqFromPLLSource+0x68>
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	2b01      	cmp	r3, #1
 80045d4:	d008      	beq.n	80045e8 <RCC_GetSysClockFreqFromPLLSource+0x34>
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	2b02      	cmp	r3, #2
 80045da:	d11f      	bne.n	800461c <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 80045dc:	4b25      	ldr	r3, [pc, #148]	; (8004674 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80045de:	613b      	str	r3, [r7, #16]
    break;
 80045e0:	e01f      	b.n	8004622 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 80045e2:	4b24      	ldr	r3, [pc, #144]	; (8004674 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80045e4:	613b      	str	r3, [r7, #16]
    break;
 80045e6:	e01c      	b.n	8004622 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80045e8:	4b21      	ldr	r3, [pc, #132]	; (8004670 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f003 0308 	and.w	r3, r3, #8
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d107      	bne.n	8004604 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80045f4:	4b1e      	ldr	r3, [pc, #120]	; (8004670 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80045f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80045fa:	0a1b      	lsrs	r3, r3, #8
 80045fc:	f003 030f 	and.w	r3, r3, #15
 8004600:	617b      	str	r3, [r7, #20]
 8004602:	e005      	b.n	8004610 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004604:	4b1a      	ldr	r3, [pc, #104]	; (8004670 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	091b      	lsrs	r3, r3, #4
 800460a:	f003 030f 	and.w	r3, r3, #15
 800460e:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8004610:	4a19      	ldr	r2, [pc, #100]	; (8004678 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8004612:	697b      	ldr	r3, [r7, #20]
 8004614:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004618:	613b      	str	r3, [r7, #16]
    break;
 800461a:	e002      	b.n	8004622 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 800461c:	2300      	movs	r3, #0
 800461e:	613b      	str	r3, [r7, #16]
    break;
 8004620:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004622:	4b13      	ldr	r3, [pc, #76]	; (8004670 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004624:	68db      	ldr	r3, [r3, #12]
 8004626:	091b      	lsrs	r3, r3, #4
 8004628:	f003 030f 	and.w	r3, r3, #15
 800462c:	3301      	adds	r3, #1
 800462e:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004630:	4b0f      	ldr	r3, [pc, #60]	; (8004670 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004632:	68db      	ldr	r3, [r3, #12]
 8004634:	0a1b      	lsrs	r3, r3, #8
 8004636:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800463a:	693a      	ldr	r2, [r7, #16]
 800463c:	fb03 f202 	mul.w	r2, r3, r2
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	fbb2 f3f3 	udiv	r3, r2, r3
 8004646:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004648:	4b09      	ldr	r3, [pc, #36]	; (8004670 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800464a:	68db      	ldr	r3, [r3, #12]
 800464c:	0e5b      	lsrs	r3, r3, #25
 800464e:	f003 0303 	and.w	r3, r3, #3
 8004652:	3301      	adds	r3, #1
 8004654:	005b      	lsls	r3, r3, #1
 8004656:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8004658:	693a      	ldr	r2, [r7, #16]
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004660:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8004662:	683b      	ldr	r3, [r7, #0]
}
 8004664:	4618      	mov	r0, r3
 8004666:	371c      	adds	r7, #28
 8004668:	46bd      	mov	sp, r7
 800466a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466e:	4770      	bx	lr
 8004670:	40021000 	.word	0x40021000
 8004674:	00f42400 	.word	0x00f42400
 8004678:	0800d028 	.word	0x0800d028

0800467c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b086      	sub	sp, #24
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004684:	2300      	movs	r3, #0
 8004686:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004688:	2300      	movs	r3, #0
 800468a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004694:	2b00      	cmp	r3, #0
 8004696:	d040      	beq.n	800471a <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800469c:	2b80      	cmp	r3, #128	; 0x80
 800469e:	d02a      	beq.n	80046f6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80046a0:	2b80      	cmp	r3, #128	; 0x80
 80046a2:	d825      	bhi.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80046a4:	2b60      	cmp	r3, #96	; 0x60
 80046a6:	d026      	beq.n	80046f6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80046a8:	2b60      	cmp	r3, #96	; 0x60
 80046aa:	d821      	bhi.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80046ac:	2b40      	cmp	r3, #64	; 0x40
 80046ae:	d006      	beq.n	80046be <HAL_RCCEx_PeriphCLKConfig+0x42>
 80046b0:	2b40      	cmp	r3, #64	; 0x40
 80046b2:	d81d      	bhi.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d009      	beq.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0x50>
 80046b8:	2b20      	cmp	r3, #32
 80046ba:	d010      	beq.n	80046de <HAL_RCCEx_PeriphCLKConfig+0x62>
 80046bc:	e018      	b.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80046be:	4b89      	ldr	r3, [pc, #548]	; (80048e4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80046c0:	68db      	ldr	r3, [r3, #12]
 80046c2:	4a88      	ldr	r2, [pc, #544]	; (80048e4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80046c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046c8:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80046ca:	e015      	b.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	3304      	adds	r3, #4
 80046d0:	2100      	movs	r1, #0
 80046d2:	4618      	mov	r0, r3
 80046d4:	f001 fa82 	bl	8005bdc <RCCEx_PLLSAI1_Config>
 80046d8:	4603      	mov	r3, r0
 80046da:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80046dc:	e00c      	b.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	3320      	adds	r3, #32
 80046e2:	2100      	movs	r1, #0
 80046e4:	4618      	mov	r0, r3
 80046e6:	f001 fb6d 	bl	8005dc4 <RCCEx_PLLSAI2_Config>
 80046ea:	4603      	mov	r3, r0
 80046ec:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80046ee:	e003      	b.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80046f0:	2301      	movs	r3, #1
 80046f2:	74fb      	strb	r3, [r7, #19]
      break;
 80046f4:	e000      	b.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 80046f6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80046f8:	7cfb      	ldrb	r3, [r7, #19]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d10b      	bne.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80046fe:	4b79      	ldr	r3, [pc, #484]	; (80048e4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004700:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004704:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800470c:	4975      	ldr	r1, [pc, #468]	; (80048e4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800470e:	4313      	orrs	r3, r2
 8004710:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004714:	e001      	b.n	800471a <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004716:	7cfb      	ldrb	r3, [r7, #19]
 8004718:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004722:	2b00      	cmp	r3, #0
 8004724:	d047      	beq.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800472a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800472e:	d030      	beq.n	8004792 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004730:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004734:	d82a      	bhi.n	800478c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004736:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800473a:	d02a      	beq.n	8004792 <HAL_RCCEx_PeriphCLKConfig+0x116>
 800473c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004740:	d824      	bhi.n	800478c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004742:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004746:	d008      	beq.n	800475a <HAL_RCCEx_PeriphCLKConfig+0xde>
 8004748:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800474c:	d81e      	bhi.n	800478c <HAL_RCCEx_PeriphCLKConfig+0x110>
 800474e:	2b00      	cmp	r3, #0
 8004750:	d00a      	beq.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8004752:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004756:	d010      	beq.n	800477a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004758:	e018      	b.n	800478c <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800475a:	4b62      	ldr	r3, [pc, #392]	; (80048e4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800475c:	68db      	ldr	r3, [r3, #12]
 800475e:	4a61      	ldr	r2, [pc, #388]	; (80048e4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004760:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004764:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004766:	e015      	b.n	8004794 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	3304      	adds	r3, #4
 800476c:	2100      	movs	r1, #0
 800476e:	4618      	mov	r0, r3
 8004770:	f001 fa34 	bl	8005bdc <RCCEx_PLLSAI1_Config>
 8004774:	4603      	mov	r3, r0
 8004776:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004778:	e00c      	b.n	8004794 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	3320      	adds	r3, #32
 800477e:	2100      	movs	r1, #0
 8004780:	4618      	mov	r0, r3
 8004782:	f001 fb1f 	bl	8005dc4 <RCCEx_PLLSAI2_Config>
 8004786:	4603      	mov	r3, r0
 8004788:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800478a:	e003      	b.n	8004794 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800478c:	2301      	movs	r3, #1
 800478e:	74fb      	strb	r3, [r7, #19]
      break;
 8004790:	e000      	b.n	8004794 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8004792:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004794:	7cfb      	ldrb	r3, [r7, #19]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d10b      	bne.n	80047b2 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800479a:	4b52      	ldr	r3, [pc, #328]	; (80048e4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800479c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80047a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047a8:	494e      	ldr	r1, [pc, #312]	; (80048e4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80047aa:	4313      	orrs	r3, r2
 80047ac:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80047b0:	e001      	b.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047b2:	7cfb      	ldrb	r3, [r7, #19]
 80047b4:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047be:	2b00      	cmp	r3, #0
 80047c0:	f000 809f 	beq.w	8004902 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 80047c4:	2300      	movs	r3, #0
 80047c6:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80047c8:	4b46      	ldr	r3, [pc, #280]	; (80048e4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80047ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d101      	bne.n	80047d8 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 80047d4:	2301      	movs	r3, #1
 80047d6:	e000      	b.n	80047da <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80047d8:	2300      	movs	r3, #0
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d00d      	beq.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047de:	4b41      	ldr	r3, [pc, #260]	; (80048e4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80047e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047e2:	4a40      	ldr	r2, [pc, #256]	; (80048e4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80047e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047e8:	6593      	str	r3, [r2, #88]	; 0x58
 80047ea:	4b3e      	ldr	r3, [pc, #248]	; (80048e4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80047ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047f2:	60bb      	str	r3, [r7, #8]
 80047f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80047f6:	2301      	movs	r3, #1
 80047f8:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80047fa:	4b3b      	ldr	r3, [pc, #236]	; (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4a3a      	ldr	r2, [pc, #232]	; (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004800:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004804:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004806:	f7fc fd37 	bl	8001278 <HAL_GetTick>
 800480a:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800480c:	e009      	b.n	8004822 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800480e:	f7fc fd33 	bl	8001278 <HAL_GetTick>
 8004812:	4602      	mov	r2, r0
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	1ad3      	subs	r3, r2, r3
 8004818:	2b02      	cmp	r3, #2
 800481a:	d902      	bls.n	8004822 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 800481c:	2303      	movs	r3, #3
 800481e:	74fb      	strb	r3, [r7, #19]
        break;
 8004820:	e005      	b.n	800482e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004822:	4b31      	ldr	r3, [pc, #196]	; (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800482a:	2b00      	cmp	r3, #0
 800482c:	d0ef      	beq.n	800480e <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 800482e:	7cfb      	ldrb	r3, [r7, #19]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d15b      	bne.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004834:	4b2b      	ldr	r3, [pc, #172]	; (80048e4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004836:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800483a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800483e:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004840:	697b      	ldr	r3, [r7, #20]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d01f      	beq.n	8004886 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800484c:	697a      	ldr	r2, [r7, #20]
 800484e:	429a      	cmp	r2, r3
 8004850:	d019      	beq.n	8004886 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004852:	4b24      	ldr	r3, [pc, #144]	; (80048e4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004854:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004858:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800485c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800485e:	4b21      	ldr	r3, [pc, #132]	; (80048e4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004860:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004864:	4a1f      	ldr	r2, [pc, #124]	; (80048e4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004866:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800486a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800486e:	4b1d      	ldr	r3, [pc, #116]	; (80048e4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004870:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004874:	4a1b      	ldr	r2, [pc, #108]	; (80048e4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004876:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800487a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800487e:	4a19      	ldr	r2, [pc, #100]	; (80048e4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004880:	697b      	ldr	r3, [r7, #20]
 8004882:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004886:	697b      	ldr	r3, [r7, #20]
 8004888:	f003 0301 	and.w	r3, r3, #1
 800488c:	2b00      	cmp	r3, #0
 800488e:	d016      	beq.n	80048be <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004890:	f7fc fcf2 	bl	8001278 <HAL_GetTick>
 8004894:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004896:	e00b      	b.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004898:	f7fc fcee 	bl	8001278 <HAL_GetTick>
 800489c:	4602      	mov	r2, r0
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	1ad3      	subs	r3, r2, r3
 80048a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d902      	bls.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 80048aa:	2303      	movs	r3, #3
 80048ac:	74fb      	strb	r3, [r7, #19]
            break;
 80048ae:	e006      	b.n	80048be <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80048b0:	4b0c      	ldr	r3, [pc, #48]	; (80048e4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80048b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048b6:	f003 0302 	and.w	r3, r3, #2
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d0ec      	beq.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 80048be:	7cfb      	ldrb	r3, [r7, #19]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d10c      	bne.n	80048de <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80048c4:	4b07      	ldr	r3, [pc, #28]	; (80048e4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80048c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048ca:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80048d4:	4903      	ldr	r1, [pc, #12]	; (80048e4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80048d6:	4313      	orrs	r3, r2
 80048d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80048dc:	e008      	b.n	80048f0 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80048de:	7cfb      	ldrb	r3, [r7, #19]
 80048e0:	74bb      	strb	r3, [r7, #18]
 80048e2:	e005      	b.n	80048f0 <HAL_RCCEx_PeriphCLKConfig+0x274>
 80048e4:	40021000 	.word	0x40021000
 80048e8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048ec:	7cfb      	ldrb	r3, [r7, #19]
 80048ee:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80048f0:	7c7b      	ldrb	r3, [r7, #17]
 80048f2:	2b01      	cmp	r3, #1
 80048f4:	d105      	bne.n	8004902 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048f6:	4ba0      	ldr	r3, [pc, #640]	; (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80048f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048fa:	4a9f      	ldr	r2, [pc, #636]	; (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80048fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004900:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f003 0301 	and.w	r3, r3, #1
 800490a:	2b00      	cmp	r3, #0
 800490c:	d00a      	beq.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800490e:	4b9a      	ldr	r3, [pc, #616]	; (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004910:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004914:	f023 0203 	bic.w	r2, r3, #3
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800491c:	4996      	ldr	r1, [pc, #600]	; (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800491e:	4313      	orrs	r3, r2
 8004920:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f003 0302 	and.w	r3, r3, #2
 800492c:	2b00      	cmp	r3, #0
 800492e:	d00a      	beq.n	8004946 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004930:	4b91      	ldr	r3, [pc, #580]	; (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004932:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004936:	f023 020c 	bic.w	r2, r3, #12
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800493e:	498e      	ldr	r1, [pc, #568]	; (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004940:	4313      	orrs	r3, r2
 8004942:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f003 0304 	and.w	r3, r3, #4
 800494e:	2b00      	cmp	r3, #0
 8004950:	d00a      	beq.n	8004968 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004952:	4b89      	ldr	r3, [pc, #548]	; (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004954:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004958:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004960:	4985      	ldr	r1, [pc, #532]	; (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004962:	4313      	orrs	r3, r2
 8004964:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f003 0308 	and.w	r3, r3, #8
 8004970:	2b00      	cmp	r3, #0
 8004972:	d00a      	beq.n	800498a <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004974:	4b80      	ldr	r3, [pc, #512]	; (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004976:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800497a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004982:	497d      	ldr	r1, [pc, #500]	; (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004984:	4313      	orrs	r3, r2
 8004986:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f003 0310 	and.w	r3, r3, #16
 8004992:	2b00      	cmp	r3, #0
 8004994:	d00a      	beq.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004996:	4b78      	ldr	r3, [pc, #480]	; (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004998:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800499c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049a4:	4974      	ldr	r1, [pc, #464]	; (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80049a6:	4313      	orrs	r3, r2
 80049a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f003 0320 	and.w	r3, r3, #32
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d00a      	beq.n	80049ce <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80049b8:	4b6f      	ldr	r3, [pc, #444]	; (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80049ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049be:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049c6:	496c      	ldr	r1, [pc, #432]	; (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80049c8:	4313      	orrs	r3, r2
 80049ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d00a      	beq.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80049da:	4b67      	ldr	r3, [pc, #412]	; (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80049dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049e0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80049e8:	4963      	ldr	r1, [pc, #396]	; (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80049ea:	4313      	orrs	r3, r2
 80049ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d00a      	beq.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80049fc:	4b5e      	ldr	r3, [pc, #376]	; (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80049fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a02:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004a0a:	495b      	ldr	r1, [pc, #364]	; (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a0c:	4313      	orrs	r3, r2
 8004a0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d00a      	beq.n	8004a34 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004a1e:	4b56      	ldr	r3, [pc, #344]	; (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a24:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a2c:	4952      	ldr	r1, [pc, #328]	; (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d00a      	beq.n	8004a56 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004a40:	4b4d      	ldr	r3, [pc, #308]	; (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a46:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a4e:	494a      	ldr	r1, [pc, #296]	; (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a50:	4313      	orrs	r3, r2
 8004a52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d00a      	beq.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004a62:	4b45      	ldr	r3, [pc, #276]	; (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a68:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a70:	4941      	ldr	r1, [pc, #260]	; (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a72:	4313      	orrs	r3, r2
 8004a74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d00a      	beq.n	8004a9a <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004a84:	4b3c      	ldr	r3, [pc, #240]	; (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a86:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004a8a:	f023 0203 	bic.w	r2, r3, #3
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a92:	4939      	ldr	r1, [pc, #228]	; (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a94:	4313      	orrs	r3, r2
 8004a96:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d028      	beq.n	8004af8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004aa6:	4b34      	ldr	r3, [pc, #208]	; (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004aa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004aac:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ab4:	4930      	ldr	r1, [pc, #192]	; (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ac0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ac4:	d106      	bne.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ac6:	4b2c      	ldr	r3, [pc, #176]	; (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ac8:	68db      	ldr	r3, [r3, #12]
 8004aca:	4a2b      	ldr	r2, [pc, #172]	; (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004acc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004ad0:	60d3      	str	r3, [r2, #12]
 8004ad2:	e011      	b.n	8004af8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ad8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004adc:	d10c      	bne.n	8004af8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	3304      	adds	r3, #4
 8004ae2:	2101      	movs	r1, #1
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	f001 f879 	bl	8005bdc <RCCEx_PLLSAI1_Config>
 8004aea:	4603      	mov	r3, r0
 8004aec:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004aee:	7cfb      	ldrb	r3, [r7, #19]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d001      	beq.n	8004af8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8004af4:	7cfb      	ldrb	r3, [r7, #19]
 8004af6:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d04d      	beq.n	8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b08:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004b0c:	d108      	bne.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8004b0e:	4b1a      	ldr	r3, [pc, #104]	; (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004b10:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004b14:	4a18      	ldr	r2, [pc, #96]	; (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004b16:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004b1a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8004b1e:	e012      	b.n	8004b46 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8004b20:	4b15      	ldr	r3, [pc, #84]	; (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004b22:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004b26:	4a14      	ldr	r2, [pc, #80]	; (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004b28:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b2c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8004b30:	4b11      	ldr	r3, [pc, #68]	; (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004b32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b36:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b3e:	490e      	ldr	r1, [pc, #56]	; (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004b40:	4313      	orrs	r3, r2
 8004b42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b4a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004b4e:	d106      	bne.n	8004b5e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b50:	4b09      	ldr	r3, [pc, #36]	; (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004b52:	68db      	ldr	r3, [r3, #12]
 8004b54:	4a08      	ldr	r2, [pc, #32]	; (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004b56:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004b5a:	60d3      	str	r3, [r2, #12]
 8004b5c:	e020      	b.n	8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b62:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004b66:	d109      	bne.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004b68:	4b03      	ldr	r3, [pc, #12]	; (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004b6a:	68db      	ldr	r3, [r3, #12]
 8004b6c:	4a02      	ldr	r2, [pc, #8]	; (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004b6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b72:	60d3      	str	r3, [r2, #12]
 8004b74:	e014      	b.n	8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8004b76:	bf00      	nop
 8004b78:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b80:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004b84:	d10c      	bne.n	8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	3304      	adds	r3, #4
 8004b8a:	2101      	movs	r1, #1
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	f001 f825 	bl	8005bdc <RCCEx_PLLSAI1_Config>
 8004b92:	4603      	mov	r3, r0
 8004b94:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004b96:	7cfb      	ldrb	r3, [r7, #19]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d001      	beq.n	8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8004b9c:	7cfb      	ldrb	r3, [r7, #19]
 8004b9e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d028      	beq.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004bac:	4b7a      	ldr	r3, [pc, #488]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004bae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bb2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004bba:	4977      	ldr	r1, [pc, #476]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004bc6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004bca:	d106      	bne.n	8004bda <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004bcc:	4b72      	ldr	r3, [pc, #456]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004bce:	68db      	ldr	r3, [r3, #12]
 8004bd0:	4a71      	ldr	r2, [pc, #452]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004bd2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004bd6:	60d3      	str	r3, [r2, #12]
 8004bd8:	e011      	b.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004bde:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004be2:	d10c      	bne.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	3304      	adds	r3, #4
 8004be8:	2101      	movs	r1, #1
 8004bea:	4618      	mov	r0, r3
 8004bec:	f000 fff6 	bl	8005bdc <RCCEx_PLLSAI1_Config>
 8004bf0:	4603      	mov	r3, r0
 8004bf2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004bf4:	7cfb      	ldrb	r3, [r7, #19]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d001      	beq.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8004bfa:	7cfb      	ldrb	r3, [r7, #19]
 8004bfc:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d01e      	beq.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004c0a:	4b63      	ldr	r3, [pc, #396]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004c0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c10:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c1a:	495f      	ldr	r1, [pc, #380]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004c1c:	4313      	orrs	r3, r2
 8004c1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c28:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004c2c:	d10c      	bne.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	3304      	adds	r3, #4
 8004c32:	2102      	movs	r1, #2
 8004c34:	4618      	mov	r0, r3
 8004c36:	f000 ffd1 	bl	8005bdc <RCCEx_PLLSAI1_Config>
 8004c3a:	4603      	mov	r3, r0
 8004c3c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004c3e:	7cfb      	ldrb	r3, [r7, #19]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d001      	beq.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8004c44:	7cfb      	ldrb	r3, [r7, #19]
 8004c46:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d00b      	beq.n	8004c6c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004c54:	4b50      	ldr	r3, [pc, #320]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004c56:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004c5a:	f023 0204 	bic.w	r2, r3, #4
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c64:	494c      	ldr	r1, [pc, #304]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004c66:	4313      	orrs	r3, r2
 8004c68:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d00b      	beq.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004c78:	4b47      	ldr	r3, [pc, #284]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004c7a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004c7e:	f023 0218 	bic.w	r2, r3, #24
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c88:	4943      	ldr	r1, [pc, #268]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004c8a:	4313      	orrs	r3, r2
 8004c8c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DFSDM1_Filter0 */

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d035      	beq.n	8004d08 <HAL_RCCEx_PeriphCLKConfig+0x68c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004c9c:	4b3e      	ldr	r3, [pc, #248]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4a3d      	ldr	r2, [pc, #244]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004ca2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ca6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ca8:	f7fc fae6 	bl	8001278 <HAL_GetTick>
 8004cac:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004cae:	e009      	b.n	8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004cb0:	f7fc fae2 	bl	8001278 <HAL_GetTick>
 8004cb4:	4602      	mov	r2, r0
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	1ad3      	subs	r3, r2, r3
 8004cba:	2b02      	cmp	r3, #2
 8004cbc:	d902      	bls.n	8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        ret = HAL_TIMEOUT;
 8004cbe:	2303      	movs	r3, #3
 8004cc0:	74fb      	strb	r3, [r7, #19]
        break;
 8004cc2:	e005      	b.n	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x654>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004cc4:	4b34      	ldr	r3, [pc, #208]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d1ef      	bne.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x634>
      }
    }

    if(ret == HAL_OK)
 8004cd0:	7cfb      	ldrb	r3, [r7, #19]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d113      	bne.n	8004cfe <HAL_RCCEx_PeriphCLKConfig+0x682>
    {
      /* Configure the LTDC clock source */
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 8004cd6:	4b30      	ldr	r3, [pc, #192]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004cd8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004cdc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ce6:	492c      	ldr	r1, [pc, #176]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004ce8:	4313      	orrs	r3, r2
 8004cea:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	3320      	adds	r3, #32
 8004cf2:	2102      	movs	r1, #2
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	f001 f865 	bl	8005dc4 <RCCEx_PLLSAI2_Config>
 8004cfa:	4603      	mov	r3, r0
 8004cfc:	74fb      	strb	r3, [r7, #19]
    }

    if(ret != HAL_OK)
 8004cfe:	7cfb      	ldrb	r3, [r7, #19]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d001      	beq.n	8004d08 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* set overall return value */
      status = ret;
 8004d04:	7cfb      	ldrb	r3, [r7, #19]
 8004d06:	74bb      	strb	r3, [r7, #18]
#endif /* LTDC */

#if defined(DSI)

  /*-------------------------- DSI clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d01e      	beq.n	8004d52 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DSICLKSOURCE(PeriphClkInit->DsiClockSelection));

    /* Configure the DSI clock source */
    __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8004d14:	4b20      	ldr	r3, [pc, #128]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004d16:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004d1a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d24:	491c      	ldr	r1, [pc, #112]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004d26:	4313      	orrs	r3, r2
 8004d28:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLLSAI2)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d36:	d10c      	bne.n	8004d52 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
    {
      /* PLLSAI2 input clock, parameters M, N & Q configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_Q_UPDATE);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	3320      	adds	r3, #32
 8004d3c:	2101      	movs	r1, #1
 8004d3e:	4618      	mov	r0, r3
 8004d40:	f001 f840 	bl	8005dc4 <RCCEx_PLLSAI2_Config>
 8004d44:	4603      	mov	r3, r0
 8004d46:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004d48:	7cfb      	ldrb	r3, [r7, #19]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d001      	beq.n	8004d52 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
      {
        /* set overall return value */
        status = ret;
 8004d4e:	7cfb      	ldrb	r3, [r7, #19]
 8004d50:	74bb      	strb	r3, [r7, #18]
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d017      	beq.n	8004d8e <HAL_RCCEx_PeriphCLKConfig+0x712>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004d5e:	4b0e      	ldr	r3, [pc, #56]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004d60:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004d64:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d6e:	490a      	ldr	r1, [pc, #40]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004d70:	4313      	orrs	r3, r2
 8004d72:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d7c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004d80:	d105      	bne.n	8004d8e <HAL_RCCEx_PeriphCLKConfig+0x712>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004d82:	4b05      	ldr	r3, [pc, #20]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004d84:	68db      	ldr	r3, [r3, #12]
 8004d86:	4a04      	ldr	r2, [pc, #16]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004d88:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004d8c:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004d8e:	7cbb      	ldrb	r3, [r7, #18]
}
 8004d90:	4618      	mov	r0, r3
 8004d92:	3718      	adds	r7, #24
 8004d94:	46bd      	mov	sp, r7
 8004d96:	bd80      	pop	{r7, pc}
 8004d98:	40021000 	.word	0x40021000

08004d9c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b088      	sub	sp, #32
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8004da4:	2300      	movs	r3, #0
 8004da6:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004dae:	d13e      	bne.n	8004e2e <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8004db0:	4bb6      	ldr	r3, [pc, #728]	; (800508c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004db2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004db6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004dba:	60fb      	str	r3, [r7, #12]

    switch(srcclk)
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004dc2:	d028      	beq.n	8004e16 <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004dca:	f200 86f2 	bhi.w	8005bb2 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004dd4:	d005      	beq.n	8004de2 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ddc:	d00e      	beq.n	8004dfc <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 8004dde:	f000 bee8 	b.w	8005bb2 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004de2:	4baa      	ldr	r3, [pc, #680]	; (800508c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004de4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004de8:	f003 0302 	and.w	r3, r3, #2
 8004dec:	2b02      	cmp	r3, #2
 8004dee:	f040 86e2 	bne.w	8005bb6 <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
        frequency = LSE_VALUE;
 8004df2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004df6:	61fb      	str	r3, [r7, #28]
      break;
 8004df8:	f000 bedd 	b.w	8005bb6 <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8004dfc:	4ba3      	ldr	r3, [pc, #652]	; (800508c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004dfe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e02:	f003 0302 	and.w	r3, r3, #2
 8004e06:	2b02      	cmp	r3, #2
 8004e08:	f040 86d7 	bne.w	8005bba <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
          frequency = LSI_VALUE;
 8004e0c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8004e10:	61fb      	str	r3, [r7, #28]
      break;
 8004e12:	f000 bed2 	b.w	8005bba <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004e16:	4b9d      	ldr	r3, [pc, #628]	; (800508c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e1e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004e22:	f040 86cc 	bne.w	8005bbe <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
        frequency = HSE_VALUE / 32U;
 8004e26:	4b9a      	ldr	r3, [pc, #616]	; (8005090 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004e28:	61fb      	str	r3, [r7, #28]
      break;
 8004e2a:	f000 bec8 	b.w	8005bbe <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004e2e:	4b97      	ldr	r3, [pc, #604]	; (800508c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004e30:	68db      	ldr	r3, [r3, #12]
 8004e32:	f003 0303 	and.w	r3, r3, #3
 8004e36:	613b      	str	r3, [r7, #16]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 8004e38:	693b      	ldr	r3, [r7, #16]
 8004e3a:	2b03      	cmp	r3, #3
 8004e3c:	d036      	beq.n	8004eac <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8004e3e:	693b      	ldr	r3, [r7, #16]
 8004e40:	2b03      	cmp	r3, #3
 8004e42:	d840      	bhi.n	8004ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 8004e44:	693b      	ldr	r3, [r7, #16]
 8004e46:	2b01      	cmp	r3, #1
 8004e48:	d003      	beq.n	8004e52 <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 8004e4a:	693b      	ldr	r3, [r7, #16]
 8004e4c:	2b02      	cmp	r3, #2
 8004e4e:	d020      	beq.n	8004e92 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8004e50:	e039      	b.n	8004ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8004e52:	4b8e      	ldr	r3, [pc, #568]	; (800508c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f003 0302 	and.w	r3, r3, #2
 8004e5a:	2b02      	cmp	r3, #2
 8004e5c:	d116      	bne.n	8004e8c <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8004e5e:	4b8b      	ldr	r3, [pc, #556]	; (800508c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f003 0308 	and.w	r3, r3, #8
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d005      	beq.n	8004e76 <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 8004e6a:	4b88      	ldr	r3, [pc, #544]	; (800508c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	091b      	lsrs	r3, r3, #4
 8004e70:	f003 030f 	and.w	r3, r3, #15
 8004e74:	e005      	b.n	8004e82 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 8004e76:	4b85      	ldr	r3, [pc, #532]	; (800508c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004e78:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e7c:	0a1b      	lsrs	r3, r3, #8
 8004e7e:	f003 030f 	and.w	r3, r3, #15
 8004e82:	4a84      	ldr	r2, [pc, #528]	; (8005094 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8004e84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e88:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8004e8a:	e01f      	b.n	8004ecc <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	61bb      	str	r3, [r7, #24]
      break;
 8004e90:	e01c      	b.n	8004ecc <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004e92:	4b7e      	ldr	r3, [pc, #504]	; (800508c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e9e:	d102      	bne.n	8004ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 8004ea0:	4b7d      	ldr	r3, [pc, #500]	; (8005098 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8004ea2:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8004ea4:	e012      	b.n	8004ecc <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	61bb      	str	r3, [r7, #24]
      break;
 8004eaa:	e00f      	b.n	8004ecc <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004eac:	4b77      	ldr	r3, [pc, #476]	; (800508c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004eb4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004eb8:	d102      	bne.n	8004ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 8004eba:	4b77      	ldr	r3, [pc, #476]	; (8005098 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8004ebc:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8004ebe:	e005      	b.n	8004ecc <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	61bb      	str	r3, [r7, #24]
      break;
 8004ec4:	e002      	b.n	8004ecc <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	61bb      	str	r3, [r7, #24]
      break;
 8004eca:	bf00      	nop
    }

    switch(PeriphClk)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004ed2:	f000 8604 	beq.w	8005ade <HAL_RCCEx_GetPeriphCLKFreq+0xd42>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004edc:	f200 8671 	bhi.w	8005bc2 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004ee6:	f000 8467 	beq.w	80057b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004ef0:	f200 8667 	bhi.w	8005bc2 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004efa:	f000 852f 	beq.w	800595c <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f04:	f200 865d 	bhi.w	8005bc2 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004f0e:	f000 8185 	beq.w	800521c <HAL_RCCEx_GetPeriphCLKFreq+0x480>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004f18:	f200 8653 	bhi.w	8005bc2 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004f22:	f000 80cb 	beq.w	80050bc <HAL_RCCEx_GetPeriphCLKFreq+0x320>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004f2c:	f200 8649 	bhi.w	8005bc2 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f36:	f000 842e 	beq.w	8005796 <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f40:	f200 863f 	bhi.w	8005bc2 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004f4a:	f000 83e2 	beq.w	8005712 <HAL_RCCEx_GetPeriphCLKFreq+0x976>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004f54:	f200 8635 	bhi.w	8005bc2 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f5e:	f000 80ad 	beq.w	80050bc <HAL_RCCEx_GetPeriphCLKFreq+0x320>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f68:	f200 862b 	bhi.w	8005bc2 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f72:	f000 809b 	beq.w	80050ac <HAL_RCCEx_GetPeriphCLKFreq+0x310>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f7c:	f200 8621 	bhi.w	8005bc2 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f86:	f000 8089 	beq.w	800509c <HAL_RCCEx_GetPeriphCLKFreq+0x300>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f90:	f200 8617 	bhi.w	8005bc2 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f9a:	f000 8552 	beq.w	8005a42 <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fa4:	f200 860d 	bhi.w	8005bc2 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004fae:	f000 84fe 	beq.w	80059ae <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004fb8:	f200 8603 	bhi.w	8005bc2 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004fc2:	f000 849f 	beq.w	8005904 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004fcc:	f200 85f9 	bhi.w	8005bc2 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2b80      	cmp	r3, #128	; 0x80
 8004fd4:	f000 846a 	beq.w	80058ac <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2b80      	cmp	r3, #128	; 0x80
 8004fdc:	f200 85f1 	bhi.w	8005bc2 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2b20      	cmp	r3, #32
 8004fe4:	d84c      	bhi.n	8005080 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	f000 85ea 	beq.w	8005bc2 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	3b01      	subs	r3, #1
 8004ff2:	2b1f      	cmp	r3, #31
 8004ff4:	f200 85e5 	bhi.w	8005bc2 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8004ff8:	a201      	add	r2, pc, #4	; (adr r2, 8005000 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 8004ffa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ffe:	bf00      	nop
 8005000:	08005411 	.word	0x08005411
 8005004:	0800547f 	.word	0x0800547f
 8005008:	08005bc3 	.word	0x08005bc3
 800500c:	08005513 	.word	0x08005513
 8005010:	08005bc3 	.word	0x08005bc3
 8005014:	08005bc3 	.word	0x08005bc3
 8005018:	08005bc3 	.word	0x08005bc3
 800501c:	0800558b 	.word	0x0800558b
 8005020:	08005bc3 	.word	0x08005bc3
 8005024:	08005bc3 	.word	0x08005bc3
 8005028:	08005bc3 	.word	0x08005bc3
 800502c:	08005bc3 	.word	0x08005bc3
 8005030:	08005bc3 	.word	0x08005bc3
 8005034:	08005bc3 	.word	0x08005bc3
 8005038:	08005bc3 	.word	0x08005bc3
 800503c:	0800560f 	.word	0x0800560f
 8005040:	08005bc3 	.word	0x08005bc3
 8005044:	08005bc3 	.word	0x08005bc3
 8005048:	08005bc3 	.word	0x08005bc3
 800504c:	08005bc3 	.word	0x08005bc3
 8005050:	08005bc3 	.word	0x08005bc3
 8005054:	08005bc3 	.word	0x08005bc3
 8005058:	08005bc3 	.word	0x08005bc3
 800505c:	08005bc3 	.word	0x08005bc3
 8005060:	08005bc3 	.word	0x08005bc3
 8005064:	08005bc3 	.word	0x08005bc3
 8005068:	08005bc3 	.word	0x08005bc3
 800506c:	08005bc3 	.word	0x08005bc3
 8005070:	08005bc3 	.word	0x08005bc3
 8005074:	08005bc3 	.word	0x08005bc3
 8005078:	08005bc3 	.word	0x08005bc3
 800507c:	08005691 	.word	0x08005691
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2b40      	cmp	r3, #64	; 0x40
 8005084:	f000 83e6 	beq.w	8005854 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 8005088:	f000 bd9b 	b.w	8005bc2 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 800508c:	40021000 	.word	0x40021000
 8005090:	0007a120 	.word	0x0007a120
 8005094:	0800d028 	.word	0x0800d028
 8005098:	00f42400 	.word	0x00f42400
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 800509c:	69b9      	ldr	r1, [r7, #24]
 800509e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80050a2:	f000 ff83 	bl	8005fac <RCCEx_GetSAIxPeriphCLKFreq>
 80050a6:	61f8      	str	r0, [r7, #28]
      break;
 80050a8:	f000 bd8e 	b.w	8005bc8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 80050ac:	69b9      	ldr	r1, [r7, #24]
 80050ae:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80050b2:	f000 ff7b 	bl	8005fac <RCCEx_GetSAIxPeriphCLKFreq>
 80050b6:	61f8      	str	r0, [r7, #28]
      break;
 80050b8:	f000 bd86 	b.w	8005bc8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 80050bc:	4b9a      	ldr	r3, [pc, #616]	; (8005328 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80050be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050c2:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 80050c6:	60fb      	str	r3, [r7, #12]
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80050ce:	d015      	beq.n	80050fc <HAL_RCCEx_GetPeriphCLKFreq+0x360>
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80050d6:	f200 8092 	bhi.w	80051fe <HAL_RCCEx_GetPeriphCLKFreq+0x462>
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80050e0:	d029      	beq.n	8005136 <HAL_RCCEx_GetPeriphCLKFreq+0x39a>
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80050e8:	f200 8089 	bhi.w	80051fe <HAL_RCCEx_GetPeriphCLKFreq+0x462>
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d07b      	beq.n	80051ea <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80050f8:	d04a      	beq.n	8005190 <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
          break;
 80050fa:	e080      	b.n	80051fe <HAL_RCCEx_GetPeriphCLKFreq+0x462>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80050fc:	4b8a      	ldr	r3, [pc, #552]	; (8005328 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f003 0302 	and.w	r3, r3, #2
 8005104:	2b02      	cmp	r3, #2
 8005106:	d17d      	bne.n	8005204 <HAL_RCCEx_GetPeriphCLKFreq+0x468>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8005108:	4b87      	ldr	r3, [pc, #540]	; (8005328 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f003 0308 	and.w	r3, r3, #8
 8005110:	2b00      	cmp	r3, #0
 8005112:	d005      	beq.n	8005120 <HAL_RCCEx_GetPeriphCLKFreq+0x384>
 8005114:	4b84      	ldr	r3, [pc, #528]	; (8005328 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	091b      	lsrs	r3, r3, #4
 800511a:	f003 030f 	and.w	r3, r3, #15
 800511e:	e005      	b.n	800512c <HAL_RCCEx_GetPeriphCLKFreq+0x390>
 8005120:	4b81      	ldr	r3, [pc, #516]	; (8005328 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005122:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005126:	0a1b      	lsrs	r3, r3, #8
 8005128:	f003 030f 	and.w	r3, r3, #15
 800512c:	4a7f      	ldr	r2, [pc, #508]	; (800532c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800512e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005132:	61fb      	str	r3, [r7, #28]
          break;
 8005134:	e066      	b.n	8005204 <HAL_RCCEx_GetPeriphCLKFreq+0x468>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8005136:	4b7c      	ldr	r3, [pc, #496]	; (8005328 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800513e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005142:	d162      	bne.n	800520a <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8005144:	4b78      	ldr	r3, [pc, #480]	; (8005328 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005146:	68db      	ldr	r3, [r3, #12]
 8005148:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800514c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005150:	d15b      	bne.n	800520a <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8005152:	4b75      	ldr	r3, [pc, #468]	; (8005328 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005154:	68db      	ldr	r3, [r3, #12]
 8005156:	0a1b      	lsrs	r3, r3, #8
 8005158:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800515c:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800515e:	69bb      	ldr	r3, [r7, #24]
 8005160:	68ba      	ldr	r2, [r7, #8]
 8005162:	fb03 f202 	mul.w	r2, r3, r2
 8005166:	4b70      	ldr	r3, [pc, #448]	; (8005328 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005168:	68db      	ldr	r3, [r3, #12]
 800516a:	091b      	lsrs	r3, r3, #4
 800516c:	f003 030f 	and.w	r3, r3, #15
 8005170:	3301      	adds	r3, #1
 8005172:	fbb2 f3f3 	udiv	r3, r2, r3
 8005176:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8005178:	4b6b      	ldr	r3, [pc, #428]	; (8005328 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800517a:	68db      	ldr	r3, [r3, #12]
 800517c:	0d5b      	lsrs	r3, r3, #21
 800517e:	f003 0303 	and.w	r3, r3, #3
 8005182:	3301      	adds	r3, #1
 8005184:	005b      	lsls	r3, r3, #1
 8005186:	69ba      	ldr	r2, [r7, #24]
 8005188:	fbb2 f3f3 	udiv	r3, r2, r3
 800518c:	61fb      	str	r3, [r7, #28]
          break;
 800518e:	e03c      	b.n	800520a <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8005190:	4b65      	ldr	r3, [pc, #404]	; (8005328 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005198:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800519c:	d138      	bne.n	8005210 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 800519e:	4b62      	ldr	r3, [pc, #392]	; (8005328 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80051a0:	691b      	ldr	r3, [r3, #16]
 80051a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80051a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80051aa:	d131      	bne.n	8005210 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80051ac:	4b5e      	ldr	r3, [pc, #376]	; (8005328 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80051ae:	691b      	ldr	r3, [r3, #16]
 80051b0:	0a1b      	lsrs	r3, r3, #8
 80051b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80051b6:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 80051b8:	69bb      	ldr	r3, [r7, #24]
 80051ba:	68ba      	ldr	r2, [r7, #8]
 80051bc:	fb03 f202 	mul.w	r2, r3, r2
 80051c0:	4b59      	ldr	r3, [pc, #356]	; (8005328 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80051c2:	691b      	ldr	r3, [r3, #16]
 80051c4:	091b      	lsrs	r3, r3, #4
 80051c6:	f003 030f 	and.w	r3, r3, #15
 80051ca:	3301      	adds	r3, #1
 80051cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80051d0:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 80051d2:	4b55      	ldr	r3, [pc, #340]	; (8005328 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80051d4:	691b      	ldr	r3, [r3, #16]
 80051d6:	0d5b      	lsrs	r3, r3, #21
 80051d8:	f003 0303 	and.w	r3, r3, #3
 80051dc:	3301      	adds	r3, #1
 80051de:	005b      	lsls	r3, r3, #1
 80051e0:	69ba      	ldr	r2, [r7, #24]
 80051e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80051e6:	61fb      	str	r3, [r7, #28]
          break;
 80051e8:	e012      	b.n	8005210 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 80051ea:	4b4f      	ldr	r3, [pc, #316]	; (8005328 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80051ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80051f0:	f003 0302 	and.w	r3, r3, #2
 80051f4:	2b02      	cmp	r3, #2
 80051f6:	d10e      	bne.n	8005216 <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
            frequency = HSI48_VALUE;
 80051f8:	4b4d      	ldr	r3, [pc, #308]	; (8005330 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80051fa:	61fb      	str	r3, [r7, #28]
          break;
 80051fc:	e00b      	b.n	8005216 <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
          break;
 80051fe:	bf00      	nop
 8005200:	f000 bce2 	b.w	8005bc8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005204:	bf00      	nop
 8005206:	f000 bcdf 	b.w	8005bc8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800520a:	bf00      	nop
 800520c:	f000 bcdc 	b.w	8005bc8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005210:	bf00      	nop
 8005212:	f000 bcd9 	b.w	8005bc8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005216:	bf00      	nop
        break;
 8005218:	f000 bcd6 	b.w	8005bc8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      if(HAL_IS_BIT_SET(RCC->CCIPR2, RCC_CCIPR2_SDMMCSEL))  /* PLL "P" ? */
 800521c:	4b42      	ldr	r3, [pc, #264]	; (8005328 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800521e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005222:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005226:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800522a:	d13d      	bne.n	80052a8 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 800522c:	4b3e      	ldr	r3, [pc, #248]	; (8005328 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005234:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005238:	f040 84c5 	bne.w	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLPEN))
 800523c:	4b3a      	ldr	r3, [pc, #232]	; (8005328 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800523e:	68db      	ldr	r3, [r3, #12]
 8005240:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005244:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005248:	f040 84bd 	bne.w	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800524c:	4b36      	ldr	r3, [pc, #216]	; (8005328 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800524e:	68db      	ldr	r3, [r3, #12]
 8005250:	0a1b      	lsrs	r3, r3, #8
 8005252:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005256:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005258:	69bb      	ldr	r3, [r7, #24]
 800525a:	68ba      	ldr	r2, [r7, #8]
 800525c:	fb03 f202 	mul.w	r2, r3, r2
 8005260:	4b31      	ldr	r3, [pc, #196]	; (8005328 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005262:	68db      	ldr	r3, [r3, #12]
 8005264:	091b      	lsrs	r3, r3, #4
 8005266:	f003 030f 	and.w	r3, r3, #15
 800526a:	3301      	adds	r3, #1
 800526c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005270:	61bb      	str	r3, [r7, #24]
            pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 8005272:	4b2d      	ldr	r3, [pc, #180]	; (8005328 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005274:	68db      	ldr	r3, [r3, #12]
 8005276:	0edb      	lsrs	r3, r3, #27
 8005278:	f003 031f 	and.w	r3, r3, #31
 800527c:	617b      	str	r3, [r7, #20]
            if(pllp == 0U)
 800527e:	697b      	ldr	r3, [r7, #20]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d10a      	bne.n	800529a <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
              if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8005284:	4b28      	ldr	r3, [pc, #160]	; (8005328 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005286:	68db      	ldr	r3, [r3, #12]
 8005288:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800528c:	2b00      	cmp	r3, #0
 800528e:	d002      	beq.n	8005296 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
                pllp = 17U;
 8005290:	2311      	movs	r3, #17
 8005292:	617b      	str	r3, [r7, #20]
 8005294:	e001      	b.n	800529a <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
                pllp = 7U;
 8005296:	2307      	movs	r3, #7
 8005298:	617b      	str	r3, [r7, #20]
            frequency = (pllvco / pllp);
 800529a:	69ba      	ldr	r2, [r7, #24]
 800529c:	697b      	ldr	r3, [r7, #20]
 800529e:	fbb2 f3f3 	udiv	r3, r2, r3
 80052a2:	61fb      	str	r3, [r7, #28]
      break;
 80052a4:	f000 bc8f 	b.w	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 80052a8:	4b1f      	ldr	r3, [pc, #124]	; (8005328 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80052aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052ae:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 80052b2:	60fb      	str	r3, [r7, #12]
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80052ba:	d016      	beq.n	80052ea <HAL_RCCEx_GetPeriphCLKFreq+0x54e>
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80052c2:	f200 809b 	bhi.w	80053fc <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80052cc:	d032      	beq.n	8005334 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80052d4:	f200 8092 	bhi.w	80053fc <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	f000 8084 	beq.w	80053e8 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80052e6:	d052      	beq.n	800538e <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
          break;
 80052e8:	e088      	b.n	80053fc <HAL_RCCEx_GetPeriphCLKFreq+0x660>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80052ea:	4b0f      	ldr	r3, [pc, #60]	; (8005328 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f003 0302 	and.w	r3, r3, #2
 80052f2:	2b02      	cmp	r3, #2
 80052f4:	f040 8084 	bne.w	8005400 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80052f8:	4b0b      	ldr	r3, [pc, #44]	; (8005328 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f003 0308 	and.w	r3, r3, #8
 8005300:	2b00      	cmp	r3, #0
 8005302:	d005      	beq.n	8005310 <HAL_RCCEx_GetPeriphCLKFreq+0x574>
 8005304:	4b08      	ldr	r3, [pc, #32]	; (8005328 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	091b      	lsrs	r3, r3, #4
 800530a:	f003 030f 	and.w	r3, r3, #15
 800530e:	e005      	b.n	800531c <HAL_RCCEx_GetPeriphCLKFreq+0x580>
 8005310:	4b05      	ldr	r3, [pc, #20]	; (8005328 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005312:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005316:	0a1b      	lsrs	r3, r3, #8
 8005318:	f003 030f 	and.w	r3, r3, #15
 800531c:	4a03      	ldr	r2, [pc, #12]	; (800532c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800531e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005322:	61fb      	str	r3, [r7, #28]
          break;
 8005324:	e06c      	b.n	8005400 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 8005326:	bf00      	nop
 8005328:	40021000 	.word	0x40021000
 800532c:	0800d028 	.word	0x0800d028
 8005330:	02dc6c00 	.word	0x02dc6c00
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8005334:	4ba5      	ldr	r3, [pc, #660]	; (80055cc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800533c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005340:	d160      	bne.n	8005404 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8005342:	4ba2      	ldr	r3, [pc, #648]	; (80055cc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005344:	68db      	ldr	r3, [r3, #12]
 8005346:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800534a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800534e:	d159      	bne.n	8005404 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8005350:	4b9e      	ldr	r3, [pc, #632]	; (80055cc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005352:	68db      	ldr	r3, [r3, #12]
 8005354:	0a1b      	lsrs	r3, r3, #8
 8005356:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800535a:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800535c:	69bb      	ldr	r3, [r7, #24]
 800535e:	68ba      	ldr	r2, [r7, #8]
 8005360:	fb03 f202 	mul.w	r2, r3, r2
 8005364:	4b99      	ldr	r3, [pc, #612]	; (80055cc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005366:	68db      	ldr	r3, [r3, #12]
 8005368:	091b      	lsrs	r3, r3, #4
 800536a:	f003 030f 	and.w	r3, r3, #15
 800536e:	3301      	adds	r3, #1
 8005370:	fbb2 f3f3 	udiv	r3, r2, r3
 8005374:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8005376:	4b95      	ldr	r3, [pc, #596]	; (80055cc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005378:	68db      	ldr	r3, [r3, #12]
 800537a:	0d5b      	lsrs	r3, r3, #21
 800537c:	f003 0303 	and.w	r3, r3, #3
 8005380:	3301      	adds	r3, #1
 8005382:	005b      	lsls	r3, r3, #1
 8005384:	69ba      	ldr	r2, [r7, #24]
 8005386:	fbb2 f3f3 	udiv	r3, r2, r3
 800538a:	61fb      	str	r3, [r7, #28]
          break;
 800538c:	e03a      	b.n	8005404 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 800538e:	4b8f      	ldr	r3, [pc, #572]	; (80055cc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005396:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800539a:	d135      	bne.n	8005408 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 800539c:	4b8b      	ldr	r3, [pc, #556]	; (80055cc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800539e:	691b      	ldr	r3, [r3, #16]
 80053a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80053a4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80053a8:	d12e      	bne.n	8005408 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80053aa:	4b88      	ldr	r3, [pc, #544]	; (80055cc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80053ac:	691b      	ldr	r3, [r3, #16]
 80053ae:	0a1b      	lsrs	r3, r3, #8
 80053b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80053b4:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 80053b6:	69bb      	ldr	r3, [r7, #24]
 80053b8:	68ba      	ldr	r2, [r7, #8]
 80053ba:	fb03 f202 	mul.w	r2, r3, r2
 80053be:	4b83      	ldr	r3, [pc, #524]	; (80055cc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80053c0:	691b      	ldr	r3, [r3, #16]
 80053c2:	091b      	lsrs	r3, r3, #4
 80053c4:	f003 030f 	and.w	r3, r3, #15
 80053c8:	3301      	adds	r3, #1
 80053ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80053ce:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 80053d0:	4b7e      	ldr	r3, [pc, #504]	; (80055cc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80053d2:	691b      	ldr	r3, [r3, #16]
 80053d4:	0d5b      	lsrs	r3, r3, #21
 80053d6:	f003 0303 	and.w	r3, r3, #3
 80053da:	3301      	adds	r3, #1
 80053dc:	005b      	lsls	r3, r3, #1
 80053de:	69ba      	ldr	r2, [r7, #24]
 80053e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80053e4:	61fb      	str	r3, [r7, #28]
          break;
 80053e6:	e00f      	b.n	8005408 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 80053e8:	4b78      	ldr	r3, [pc, #480]	; (80055cc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80053ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80053ee:	f003 0302 	and.w	r3, r3, #2
 80053f2:	2b02      	cmp	r3, #2
 80053f4:	d10a      	bne.n	800540c <HAL_RCCEx_GetPeriphCLKFreq+0x670>
            frequency = HSI48_VALUE;
 80053f6:	4b76      	ldr	r3, [pc, #472]	; (80055d0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80053f8:	61fb      	str	r3, [r7, #28]
          break;
 80053fa:	e007      	b.n	800540c <HAL_RCCEx_GetPeriphCLKFreq+0x670>
          break;
 80053fc:	bf00      	nop
 80053fe:	e3e2      	b.n	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          break;
 8005400:	bf00      	nop
 8005402:	e3e0      	b.n	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          break;
 8005404:	bf00      	nop
 8005406:	e3de      	b.n	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          break;
 8005408:	bf00      	nop
 800540a:	e3dc      	b.n	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          break;
 800540c:	bf00      	nop
      break;
 800540e:	e3da      	b.n	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8005410:	4b6e      	ldr	r3, [pc, #440]	; (80055cc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005412:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005416:	f003 0303 	and.w	r3, r3, #3
 800541a:	60fb      	str	r3, [r7, #12]
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	2b03      	cmp	r3, #3
 8005420:	d827      	bhi.n	8005472 <HAL_RCCEx_GetPeriphCLKFreq+0x6d6>
 8005422:	a201      	add	r2, pc, #4	; (adr r2, 8005428 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>)
 8005424:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005428:	08005439 	.word	0x08005439
 800542c:	08005441 	.word	0x08005441
 8005430:	08005449 	.word	0x08005449
 8005434:	0800545d 	.word	0x0800545d
          frequency = HAL_RCC_GetPCLK2Freq();
 8005438:	f7ff f81a 	bl	8004470 <HAL_RCC_GetPCLK2Freq>
 800543c:	61f8      	str	r0, [r7, #28]
          break;
 800543e:	e01d      	b.n	800547c <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
          frequency = HAL_RCC_GetSysClockFreq();
 8005440:	f7fe ff6a 	bl	8004318 <HAL_RCC_GetSysClockFreq>
 8005444:	61f8      	str	r0, [r7, #28]
          break;
 8005446:	e019      	b.n	800547c <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005448:	4b60      	ldr	r3, [pc, #384]	; (80055cc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005450:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005454:	d10f      	bne.n	8005476 <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
            frequency = HSI_VALUE;
 8005456:	4b5f      	ldr	r3, [pc, #380]	; (80055d4 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8005458:	61fb      	str	r3, [r7, #28]
          break;
 800545a:	e00c      	b.n	8005476 <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800545c:	4b5b      	ldr	r3, [pc, #364]	; (80055cc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800545e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005462:	f003 0302 	and.w	r3, r3, #2
 8005466:	2b02      	cmp	r3, #2
 8005468:	d107      	bne.n	800547a <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
            frequency = LSE_VALUE;
 800546a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800546e:	61fb      	str	r3, [r7, #28]
          break;
 8005470:	e003      	b.n	800547a <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
          break;
 8005472:	bf00      	nop
 8005474:	e3a8      	b.n	8005bc8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005476:	bf00      	nop
 8005478:	e3a6      	b.n	8005bc8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800547a:	bf00      	nop
        break;
 800547c:	e3a4      	b.n	8005bc8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800547e:	4b53      	ldr	r3, [pc, #332]	; (80055cc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005480:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005484:	f003 030c 	and.w	r3, r3, #12
 8005488:	60fb      	str	r3, [r7, #12]
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	2b0c      	cmp	r3, #12
 800548e:	d83a      	bhi.n	8005506 <HAL_RCCEx_GetPeriphCLKFreq+0x76a>
 8005490:	a201      	add	r2, pc, #4	; (adr r2, 8005498 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>)
 8005492:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005496:	bf00      	nop
 8005498:	080054cd 	.word	0x080054cd
 800549c:	08005507 	.word	0x08005507
 80054a0:	08005507 	.word	0x08005507
 80054a4:	08005507 	.word	0x08005507
 80054a8:	080054d5 	.word	0x080054d5
 80054ac:	08005507 	.word	0x08005507
 80054b0:	08005507 	.word	0x08005507
 80054b4:	08005507 	.word	0x08005507
 80054b8:	080054dd 	.word	0x080054dd
 80054bc:	08005507 	.word	0x08005507
 80054c0:	08005507 	.word	0x08005507
 80054c4:	08005507 	.word	0x08005507
 80054c8:	080054f1 	.word	0x080054f1
          frequency = HAL_RCC_GetPCLK1Freq();
 80054cc:	f7fe ffba 	bl	8004444 <HAL_RCC_GetPCLK1Freq>
 80054d0:	61f8      	str	r0, [r7, #28]
          break;
 80054d2:	e01d      	b.n	8005510 <HAL_RCCEx_GetPeriphCLKFreq+0x774>
          frequency = HAL_RCC_GetSysClockFreq();
 80054d4:	f7fe ff20 	bl	8004318 <HAL_RCC_GetSysClockFreq>
 80054d8:	61f8      	str	r0, [r7, #28]
          break;
 80054da:	e019      	b.n	8005510 <HAL_RCCEx_GetPeriphCLKFreq+0x774>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80054dc:	4b3b      	ldr	r3, [pc, #236]	; (80055cc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054e8:	d10f      	bne.n	800550a <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
            frequency = HSI_VALUE;
 80054ea:	4b3a      	ldr	r3, [pc, #232]	; (80055d4 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 80054ec:	61fb      	str	r3, [r7, #28]
          break;
 80054ee:	e00c      	b.n	800550a <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80054f0:	4b36      	ldr	r3, [pc, #216]	; (80055cc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80054f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054f6:	f003 0302 	and.w	r3, r3, #2
 80054fa:	2b02      	cmp	r3, #2
 80054fc:	d107      	bne.n	800550e <HAL_RCCEx_GetPeriphCLKFreq+0x772>
            frequency = LSE_VALUE;
 80054fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005502:	61fb      	str	r3, [r7, #28]
          break;
 8005504:	e003      	b.n	800550e <HAL_RCCEx_GetPeriphCLKFreq+0x772>
          break;
 8005506:	bf00      	nop
 8005508:	e35e      	b.n	8005bc8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800550a:	bf00      	nop
 800550c:	e35c      	b.n	8005bc8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800550e:	bf00      	nop
        break;
 8005510:	e35a      	b.n	8005bc8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8005512:	4b2e      	ldr	r3, [pc, #184]	; (80055cc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005514:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005518:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800551c:	60fb      	str	r3, [r7, #12]
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	2b30      	cmp	r3, #48	; 0x30
 8005522:	d021      	beq.n	8005568 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	2b30      	cmp	r3, #48	; 0x30
 8005528:	d829      	bhi.n	800557e <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	2b20      	cmp	r3, #32
 800552e:	d011      	beq.n	8005554 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	2b20      	cmp	r3, #32
 8005534:	d823      	bhi.n	800557e <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d003      	beq.n	8005544 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	2b10      	cmp	r3, #16
 8005540:	d004      	beq.n	800554c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>
          break;
 8005542:	e01c      	b.n	800557e <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005544:	f7fe ff7e 	bl	8004444 <HAL_RCC_GetPCLK1Freq>
 8005548:	61f8      	str	r0, [r7, #28]
          break;
 800554a:	e01d      	b.n	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x7ec>
          frequency = HAL_RCC_GetSysClockFreq();
 800554c:	f7fe fee4 	bl	8004318 <HAL_RCC_GetSysClockFreq>
 8005550:	61f8      	str	r0, [r7, #28]
          break;
 8005552:	e019      	b.n	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x7ec>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005554:	4b1d      	ldr	r3, [pc, #116]	; (80055cc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800555c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005560:	d10f      	bne.n	8005582 <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
            frequency = HSI_VALUE;
 8005562:	4b1c      	ldr	r3, [pc, #112]	; (80055d4 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8005564:	61fb      	str	r3, [r7, #28]
          break;
 8005566:	e00c      	b.n	8005582 <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005568:	4b18      	ldr	r3, [pc, #96]	; (80055cc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800556a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800556e:	f003 0302 	and.w	r3, r3, #2
 8005572:	2b02      	cmp	r3, #2
 8005574:	d107      	bne.n	8005586 <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
            frequency = LSE_VALUE;
 8005576:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800557a:	61fb      	str	r3, [r7, #28]
          break;
 800557c:	e003      	b.n	8005586 <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
          break;
 800557e:	bf00      	nop
 8005580:	e322      	b.n	8005bc8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005582:	bf00      	nop
 8005584:	e320      	b.n	8005bc8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005586:	bf00      	nop
        break;
 8005588:	e31e      	b.n	8005bc8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800558a:	4b10      	ldr	r3, [pc, #64]	; (80055cc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800558c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005590:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005594:	60fb      	str	r3, [r7, #12]
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	2bc0      	cmp	r3, #192	; 0xc0
 800559a:	d027      	beq.n	80055ec <HAL_RCCEx_GetPeriphCLKFreq+0x850>
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	2bc0      	cmp	r3, #192	; 0xc0
 80055a0:	d82f      	bhi.n	8005602 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	2b80      	cmp	r3, #128	; 0x80
 80055a6:	d017      	beq.n	80055d8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	2b80      	cmp	r3, #128	; 0x80
 80055ac:	d829      	bhi.n	8005602 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d003      	beq.n	80055bc <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	2b40      	cmp	r3, #64	; 0x40
 80055b8:	d004      	beq.n	80055c4 <HAL_RCCEx_GetPeriphCLKFreq+0x828>
          break;
 80055ba:	e022      	b.n	8005602 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
          frequency = HAL_RCC_GetPCLK1Freq();
 80055bc:	f7fe ff42 	bl	8004444 <HAL_RCC_GetPCLK1Freq>
 80055c0:	61f8      	str	r0, [r7, #28]
          break;
 80055c2:	e023      	b.n	800560c <HAL_RCCEx_GetPeriphCLKFreq+0x870>
          frequency = HAL_RCC_GetSysClockFreq();
 80055c4:	f7fe fea8 	bl	8004318 <HAL_RCC_GetSysClockFreq>
 80055c8:	61f8      	str	r0, [r7, #28]
          break;
 80055ca:	e01f      	b.n	800560c <HAL_RCCEx_GetPeriphCLKFreq+0x870>
 80055cc:	40021000 	.word	0x40021000
 80055d0:	02dc6c00 	.word	0x02dc6c00
 80055d4:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80055d8:	4b9b      	ldr	r3, [pc, #620]	; (8005848 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055e4:	d10f      	bne.n	8005606 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
            frequency = HSI_VALUE;
 80055e6:	4b99      	ldr	r3, [pc, #612]	; (800584c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80055e8:	61fb      	str	r3, [r7, #28]
          break;
 80055ea:	e00c      	b.n	8005606 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80055ec:	4b96      	ldr	r3, [pc, #600]	; (8005848 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80055ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055f2:	f003 0302 	and.w	r3, r3, #2
 80055f6:	2b02      	cmp	r3, #2
 80055f8:	d107      	bne.n	800560a <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
            frequency = LSE_VALUE;
 80055fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80055fe:	61fb      	str	r3, [r7, #28]
          break;
 8005600:	e003      	b.n	800560a <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
          break;
 8005602:	bf00      	nop
 8005604:	e2e0      	b.n	8005bc8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005606:	bf00      	nop
 8005608:	e2de      	b.n	8005bc8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800560a:	bf00      	nop
        break;
 800560c:	e2dc      	b.n	8005bc8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800560e:	4b8e      	ldr	r3, [pc, #568]	; (8005848 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8005610:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005614:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005618:	60fb      	str	r3, [r7, #12]
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005620:	d025      	beq.n	800566e <HAL_RCCEx_GetPeriphCLKFreq+0x8d2>
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005628:	d82c      	bhi.n	8005684 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005630:	d013      	beq.n	800565a <HAL_RCCEx_GetPeriphCLKFreq+0x8be>
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005638:	d824      	bhi.n	8005684 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d004      	beq.n	800564a <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005646:	d004      	beq.n	8005652 <HAL_RCCEx_GetPeriphCLKFreq+0x8b6>
          break;
 8005648:	e01c      	b.n	8005684 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
          frequency = HAL_RCC_GetPCLK1Freq();
 800564a:	f7fe fefb 	bl	8004444 <HAL_RCC_GetPCLK1Freq>
 800564e:	61f8      	str	r0, [r7, #28]
          break;
 8005650:	e01d      	b.n	800568e <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
          frequency = HAL_RCC_GetSysClockFreq();
 8005652:	f7fe fe61 	bl	8004318 <HAL_RCC_GetSysClockFreq>
 8005656:	61f8      	str	r0, [r7, #28]
          break;
 8005658:	e019      	b.n	800568e <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800565a:	4b7b      	ldr	r3, [pc, #492]	; (8005848 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005662:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005666:	d10f      	bne.n	8005688 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
            frequency = HSI_VALUE;
 8005668:	4b78      	ldr	r3, [pc, #480]	; (800584c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800566a:	61fb      	str	r3, [r7, #28]
          break;
 800566c:	e00c      	b.n	8005688 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800566e:	4b76      	ldr	r3, [pc, #472]	; (8005848 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8005670:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005674:	f003 0302 	and.w	r3, r3, #2
 8005678:	2b02      	cmp	r3, #2
 800567a:	d107      	bne.n	800568c <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
            frequency = LSE_VALUE;
 800567c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005680:	61fb      	str	r3, [r7, #28]
          break;
 8005682:	e003      	b.n	800568c <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          break;
 8005684:	bf00      	nop
 8005686:	e29f      	b.n	8005bc8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005688:	bf00      	nop
 800568a:	e29d      	b.n	8005bc8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800568c:	bf00      	nop
        break;
 800568e:	e29b      	b.n	8005bc8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8005690:	4b6d      	ldr	r3, [pc, #436]	; (8005848 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8005692:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005696:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800569a:	60fb      	str	r3, [r7, #12]
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80056a2:	d025      	beq.n	80056f0 <HAL_RCCEx_GetPeriphCLKFreq+0x954>
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80056aa:	d82c      	bhi.n	8005706 <HAL_RCCEx_GetPeriphCLKFreq+0x96a>
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80056b2:	d013      	beq.n	80056dc <HAL_RCCEx_GetPeriphCLKFreq+0x940>
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80056ba:	d824      	bhi.n	8005706 <HAL_RCCEx_GetPeriphCLKFreq+0x96a>
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d004      	beq.n	80056cc <HAL_RCCEx_GetPeriphCLKFreq+0x930>
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056c8:	d004      	beq.n	80056d4 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
          break;
 80056ca:	e01c      	b.n	8005706 <HAL_RCCEx_GetPeriphCLKFreq+0x96a>
          frequency = HAL_RCC_GetPCLK1Freq();
 80056cc:	f7fe feba 	bl	8004444 <HAL_RCC_GetPCLK1Freq>
 80056d0:	61f8      	str	r0, [r7, #28]
          break;
 80056d2:	e01d      	b.n	8005710 <HAL_RCCEx_GetPeriphCLKFreq+0x974>
          frequency = HAL_RCC_GetSysClockFreq();
 80056d4:	f7fe fe20 	bl	8004318 <HAL_RCC_GetSysClockFreq>
 80056d8:	61f8      	str	r0, [r7, #28]
          break;
 80056da:	e019      	b.n	8005710 <HAL_RCCEx_GetPeriphCLKFreq+0x974>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80056dc:	4b5a      	ldr	r3, [pc, #360]	; (8005848 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056e8:	d10f      	bne.n	800570a <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
            frequency = HSI_VALUE;
 80056ea:	4b58      	ldr	r3, [pc, #352]	; (800584c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80056ec:	61fb      	str	r3, [r7, #28]
          break;
 80056ee:	e00c      	b.n	800570a <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80056f0:	4b55      	ldr	r3, [pc, #340]	; (8005848 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80056f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056f6:	f003 0302 	and.w	r3, r3, #2
 80056fa:	2b02      	cmp	r3, #2
 80056fc:	d107      	bne.n	800570e <HAL_RCCEx_GetPeriphCLKFreq+0x972>
            frequency = LSE_VALUE;
 80056fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005702:	61fb      	str	r3, [r7, #28]
          break;
 8005704:	e003      	b.n	800570e <HAL_RCCEx_GetPeriphCLKFreq+0x972>
          break;
 8005706:	bf00      	nop
 8005708:	e25e      	b.n	8005bc8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800570a:	bf00      	nop
 800570c:	e25c      	b.n	8005bc8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800570e:	bf00      	nop
        break;
 8005710:	e25a      	b.n	8005bc8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8005712:	4b4d      	ldr	r3, [pc, #308]	; (8005848 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8005714:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005718:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800571c:	60fb      	str	r3, [r7, #12]
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005724:	d007      	beq.n	8005736 <HAL_RCCEx_GetPeriphCLKFreq+0x99a>
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800572c:	d12f      	bne.n	800578e <HAL_RCCEx_GetPeriphCLKFreq+0x9f2>
          frequency = HAL_RCC_GetSysClockFreq();
 800572e:	f7fe fdf3 	bl	8004318 <HAL_RCC_GetSysClockFreq>
 8005732:	61f8      	str	r0, [r7, #28]
          break;
 8005734:	e02e      	b.n	8005794 <HAL_RCCEx_GetPeriphCLKFreq+0x9f8>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 8005736:	4b44      	ldr	r3, [pc, #272]	; (8005848 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800573e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005742:	d126      	bne.n	8005792 <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
 8005744:	4b40      	ldr	r3, [pc, #256]	; (8005848 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8005746:	691b      	ldr	r3, [r3, #16]
 8005748:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800574c:	2b00      	cmp	r3, #0
 800574e:	d020      	beq.n	8005792 <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8005750:	4b3d      	ldr	r3, [pc, #244]	; (8005848 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8005752:	691b      	ldr	r3, [r3, #16]
 8005754:	0a1b      	lsrs	r3, r3, #8
 8005756:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800575a:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 800575c:	69bb      	ldr	r3, [r7, #24]
 800575e:	68ba      	ldr	r2, [r7, #8]
 8005760:	fb03 f202 	mul.w	r2, r3, r2
 8005764:	4b38      	ldr	r3, [pc, #224]	; (8005848 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8005766:	691b      	ldr	r3, [r3, #16]
 8005768:	091b      	lsrs	r3, r3, #4
 800576a:	f003 030f 	and.w	r3, r3, #15
 800576e:	3301      	adds	r3, #1
 8005770:	fbb2 f3f3 	udiv	r3, r2, r3
 8005774:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 8005776:	4b34      	ldr	r3, [pc, #208]	; (8005848 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8005778:	691b      	ldr	r3, [r3, #16]
 800577a:	0e5b      	lsrs	r3, r3, #25
 800577c:	f003 0303 	and.w	r3, r3, #3
 8005780:	3301      	adds	r3, #1
 8005782:	005b      	lsls	r3, r3, #1
 8005784:	69ba      	ldr	r2, [r7, #24]
 8005786:	fbb2 f3f3 	udiv	r3, r2, r3
 800578a:	61fb      	str	r3, [r7, #28]
          break;
 800578c:	e001      	b.n	8005792 <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
          break;
 800578e:	bf00      	nop
 8005790:	e21a      	b.n	8005bc8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005792:	bf00      	nop
        break;
 8005794:	e218      	b.n	8005bc8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 8005796:	4b2c      	ldr	r3, [pc, #176]	; (8005848 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8005798:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800579c:	f003 0304 	and.w	r3, r3, #4
 80057a0:	60fb      	str	r3, [r7, #12]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d103      	bne.n	80057b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa14>
          frequency = HAL_RCC_GetPCLK2Freq();
 80057a8:	f7fe fe62 	bl	8004470 <HAL_RCC_GetPCLK2Freq>
 80057ac:	61f8      	str	r0, [r7, #28]
        break;
 80057ae:	e20b      	b.n	8005bc8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          frequency = HAL_RCC_GetSysClockFreq();
 80057b0:	f7fe fdb2 	bl	8004318 <HAL_RCC_GetSysClockFreq>
 80057b4:	61f8      	str	r0, [r7, #28]
        break;
 80057b6:	e207      	b.n	8005bc8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
 80057b8:	4b23      	ldr	r3, [pc, #140]	; (8005848 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80057ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80057be:	f003 0318 	and.w	r3, r3, #24
 80057c2:	60fb      	str	r3, [r7, #12]
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	2b10      	cmp	r3, #16
 80057c8:	d010      	beq.n	80057ec <HAL_RCCEx_GetPeriphCLKFreq+0xa50>
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	2b10      	cmp	r3, #16
 80057ce:	d834      	bhi.n	800583a <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d003      	beq.n	80057de <HAL_RCCEx_GetPeriphCLKFreq+0xa42>
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	2b08      	cmp	r3, #8
 80057da:	d024      	beq.n	8005826 <HAL_RCCEx_GetPeriphCLKFreq+0xa8a>
          break;
 80057dc:	e02d      	b.n	800583a <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
          frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 80057de:	69b9      	ldr	r1, [r7, #24]
 80057e0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80057e4:	f000 fbe2 	bl	8005fac <RCCEx_GetSAIxPeriphCLKFreq>
 80057e8:	61f8      	str	r0, [r7, #28]
          break;
 80057ea:	e02b      	b.n	8005844 <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80057ec:	4b16      	ldr	r3, [pc, #88]	; (8005848 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f003 0302 	and.w	r3, r3, #2
 80057f4:	2b02      	cmp	r3, #2
 80057f6:	d122      	bne.n	800583e <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80057f8:	4b13      	ldr	r3, [pc, #76]	; (8005848 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f003 0308 	and.w	r3, r3, #8
 8005800:	2b00      	cmp	r3, #0
 8005802:	d005      	beq.n	8005810 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
 8005804:	4b10      	ldr	r3, [pc, #64]	; (8005848 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	091b      	lsrs	r3, r3, #4
 800580a:	f003 030f 	and.w	r3, r3, #15
 800580e:	e005      	b.n	800581c <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 8005810:	4b0d      	ldr	r3, [pc, #52]	; (8005848 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8005812:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005816:	0a1b      	lsrs	r3, r3, #8
 8005818:	f003 030f 	and.w	r3, r3, #15
 800581c:	4a0c      	ldr	r2, [pc, #48]	; (8005850 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 800581e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005822:	61fb      	str	r3, [r7, #28]
          break;
 8005824:	e00b      	b.n	800583e <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005826:	4b08      	ldr	r3, [pc, #32]	; (8005848 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800582e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005832:	d106      	bne.n	8005842 <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
            frequency = HSI_VALUE;
 8005834:	4b05      	ldr	r3, [pc, #20]	; (800584c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005836:	61fb      	str	r3, [r7, #28]
          break;
 8005838:	e003      	b.n	8005842 <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
          break;
 800583a:	bf00      	nop
 800583c:	e1c4      	b.n	8005bc8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800583e:	bf00      	nop
 8005840:	e1c2      	b.n	8005bc8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005842:	bf00      	nop
        break;
 8005844:	e1c0      	b.n	8005bc8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
 8005846:	bf00      	nop
 8005848:	40021000 	.word	0x40021000
 800584c:	00f42400 	.word	0x00f42400
 8005850:	0800d028 	.word	0x0800d028
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8005854:	4b96      	ldr	r3, [pc, #600]	; (8005ab0 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8005856:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800585a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800585e:	60fb      	str	r3, [r7, #12]
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005866:	d013      	beq.n	8005890 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800586e:	d819      	bhi.n	80058a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d004      	beq.n	8005880 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800587c:	d004      	beq.n	8005888 <HAL_RCCEx_GetPeriphCLKFreq+0xaec>
          break;
 800587e:	e011      	b.n	80058a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005880:	f7fe fde0 	bl	8004444 <HAL_RCC_GetPCLK1Freq>
 8005884:	61f8      	str	r0, [r7, #28]
          break;
 8005886:	e010      	b.n	80058aa <HAL_RCCEx_GetPeriphCLKFreq+0xb0e>
          frequency = HAL_RCC_GetSysClockFreq();
 8005888:	f7fe fd46 	bl	8004318 <HAL_RCC_GetSysClockFreq>
 800588c:	61f8      	str	r0, [r7, #28]
          break;
 800588e:	e00c      	b.n	80058aa <HAL_RCCEx_GetPeriphCLKFreq+0xb0e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005890:	4b87      	ldr	r3, [pc, #540]	; (8005ab0 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005898:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800589c:	d104      	bne.n	80058a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
            frequency = HSI_VALUE;
 800589e:	4b85      	ldr	r3, [pc, #532]	; (8005ab4 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80058a0:	61fb      	str	r3, [r7, #28]
          break;
 80058a2:	e001      	b.n	80058a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
          break;
 80058a4:	bf00      	nop
 80058a6:	e18f      	b.n	8005bc8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80058a8:	bf00      	nop
        break;
 80058aa:	e18d      	b.n	8005bc8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 80058ac:	4b80      	ldr	r3, [pc, #512]	; (8005ab0 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 80058ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058b2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80058b6:	60fb      	str	r3, [r7, #12]
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058be:	d013      	beq.n	80058e8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058c6:	d819      	bhi.n	80058fc <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d004      	beq.n	80058d8 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80058d4:	d004      	beq.n	80058e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb44>
          break;
 80058d6:	e011      	b.n	80058fc <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          frequency = HAL_RCC_GetPCLK1Freq();
 80058d8:	f7fe fdb4 	bl	8004444 <HAL_RCC_GetPCLK1Freq>
 80058dc:	61f8      	str	r0, [r7, #28]
          break;
 80058de:	e010      	b.n	8005902 <HAL_RCCEx_GetPeriphCLKFreq+0xb66>
          frequency = HAL_RCC_GetSysClockFreq();
 80058e0:	f7fe fd1a 	bl	8004318 <HAL_RCC_GetSysClockFreq>
 80058e4:	61f8      	str	r0, [r7, #28]
          break;
 80058e6:	e00c      	b.n	8005902 <HAL_RCCEx_GetPeriphCLKFreq+0xb66>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80058e8:	4b71      	ldr	r3, [pc, #452]	; (8005ab0 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058f4:	d104      	bne.n	8005900 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
            frequency = HSI_VALUE;
 80058f6:	4b6f      	ldr	r3, [pc, #444]	; (8005ab4 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80058f8:	61fb      	str	r3, [r7, #28]
          break;
 80058fa:	e001      	b.n	8005900 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
          break;
 80058fc:	bf00      	nop
 80058fe:	e163      	b.n	8005bc8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005900:	bf00      	nop
        break;
 8005902:	e161      	b.n	8005bc8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8005904:	4b6a      	ldr	r3, [pc, #424]	; (8005ab0 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8005906:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800590a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800590e:	60fb      	str	r3, [r7, #12]
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005916:	d013      	beq.n	8005940 <HAL_RCCEx_GetPeriphCLKFreq+0xba4>
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800591e:	d819      	bhi.n	8005954 <HAL_RCCEx_GetPeriphCLKFreq+0xbb8>
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d004      	beq.n	8005930 <HAL_RCCEx_GetPeriphCLKFreq+0xb94>
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800592c:	d004      	beq.n	8005938 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>
          break;
 800592e:	e011      	b.n	8005954 <HAL_RCCEx_GetPeriphCLKFreq+0xbb8>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005930:	f7fe fd88 	bl	8004444 <HAL_RCC_GetPCLK1Freq>
 8005934:	61f8      	str	r0, [r7, #28]
          break;
 8005936:	e010      	b.n	800595a <HAL_RCCEx_GetPeriphCLKFreq+0xbbe>
          frequency = HAL_RCC_GetSysClockFreq();
 8005938:	f7fe fcee 	bl	8004318 <HAL_RCC_GetSysClockFreq>
 800593c:	61f8      	str	r0, [r7, #28]
          break;
 800593e:	e00c      	b.n	800595a <HAL_RCCEx_GetPeriphCLKFreq+0xbbe>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005940:	4b5b      	ldr	r3, [pc, #364]	; (8005ab0 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005948:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800594c:	d104      	bne.n	8005958 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
            frequency = HSI_VALUE;
 800594e:	4b59      	ldr	r3, [pc, #356]	; (8005ab4 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005950:	61fb      	str	r3, [r7, #28]
          break;
 8005952:	e001      	b.n	8005958 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
          break;
 8005954:	bf00      	nop
 8005956:	e137      	b.n	8005bc8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005958:	bf00      	nop
        break;
 800595a:	e135      	b.n	8005bc8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 800595c:	4b54      	ldr	r3, [pc, #336]	; (8005ab0 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 800595e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005962:	f003 0303 	and.w	r3, r3, #3
 8005966:	60fb      	str	r3, [r7, #12]
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	2b02      	cmp	r3, #2
 800596c:	d011      	beq.n	8005992 <HAL_RCCEx_GetPeriphCLKFreq+0xbf6>
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	2b02      	cmp	r3, #2
 8005972:	d818      	bhi.n	80059a6 <HAL_RCCEx_GetPeriphCLKFreq+0xc0a>
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d003      	beq.n	8005982 <HAL_RCCEx_GetPeriphCLKFreq+0xbe6>
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	2b01      	cmp	r3, #1
 800597e:	d004      	beq.n	800598a <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
          break;
 8005980:	e011      	b.n	80059a6 <HAL_RCCEx_GetPeriphCLKFreq+0xc0a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005982:	f7fe fd5f 	bl	8004444 <HAL_RCC_GetPCLK1Freq>
 8005986:	61f8      	str	r0, [r7, #28]
          break;
 8005988:	e010      	b.n	80059ac <HAL_RCCEx_GetPeriphCLKFreq+0xc10>
          frequency = HAL_RCC_GetSysClockFreq();
 800598a:	f7fe fcc5 	bl	8004318 <HAL_RCC_GetSysClockFreq>
 800598e:	61f8      	str	r0, [r7, #28]
          break;
 8005990:	e00c      	b.n	80059ac <HAL_RCCEx_GetPeriphCLKFreq+0xc10>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005992:	4b47      	ldr	r3, [pc, #284]	; (8005ab0 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800599a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800599e:	d104      	bne.n	80059aa <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
            frequency = HSI_VALUE;
 80059a0:	4b44      	ldr	r3, [pc, #272]	; (8005ab4 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80059a2:	61fb      	str	r3, [r7, #28]
          break;
 80059a4:	e001      	b.n	80059aa <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
          break;
 80059a6:	bf00      	nop
 80059a8:	e10e      	b.n	8005bc8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80059aa:	bf00      	nop
        break;
 80059ac:	e10c      	b.n	8005bc8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 80059ae:	4b40      	ldr	r3, [pc, #256]	; (8005ab0 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 80059b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059b4:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80059b8:	60fb      	str	r3, [r7, #12]
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80059c0:	d02c      	beq.n	8005a1c <HAL_RCCEx_GetPeriphCLKFreq+0xc80>
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80059c8:	d833      	bhi.n	8005a32 <HAL_RCCEx_GetPeriphCLKFreq+0xc96>
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80059d0:	d01a      	beq.n	8005a08 <HAL_RCCEx_GetPeriphCLKFreq+0xc6c>
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80059d8:	d82b      	bhi.n	8005a32 <HAL_RCCEx_GetPeriphCLKFreq+0xc96>
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d004      	beq.n	80059ea <HAL_RCCEx_GetPeriphCLKFreq+0xc4e>
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80059e6:	d004      	beq.n	80059f2 <HAL_RCCEx_GetPeriphCLKFreq+0xc56>
          break;
 80059e8:	e023      	b.n	8005a32 <HAL_RCCEx_GetPeriphCLKFreq+0xc96>
          frequency = HAL_RCC_GetPCLK1Freq();
 80059ea:	f7fe fd2b 	bl	8004444 <HAL_RCC_GetPCLK1Freq>
 80059ee:	61f8      	str	r0, [r7, #28]
          break;
 80059f0:	e026      	b.n	8005a40 <HAL_RCCEx_GetPeriphCLKFreq+0xca4>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80059f2:	4b2f      	ldr	r3, [pc, #188]	; (8005ab0 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 80059f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80059f8:	f003 0302 	and.w	r3, r3, #2
 80059fc:	2b02      	cmp	r3, #2
 80059fe:	d11a      	bne.n	8005a36 <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
              frequency = LSI_VALUE;
 8005a00:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8005a04:	61fb      	str	r3, [r7, #28]
          break;
 8005a06:	e016      	b.n	8005a36 <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005a08:	4b29      	ldr	r3, [pc, #164]	; (8005ab0 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a14:	d111      	bne.n	8005a3a <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
            frequency = HSI_VALUE;
 8005a16:	4b27      	ldr	r3, [pc, #156]	; (8005ab4 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005a18:	61fb      	str	r3, [r7, #28]
          break;
 8005a1a:	e00e      	b.n	8005a3a <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005a1c:	4b24      	ldr	r3, [pc, #144]	; (8005ab0 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8005a1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a22:	f003 0302 	and.w	r3, r3, #2
 8005a26:	2b02      	cmp	r3, #2
 8005a28:	d109      	bne.n	8005a3e <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
            frequency = LSE_VALUE;
 8005a2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a2e:	61fb      	str	r3, [r7, #28]
          break;
 8005a30:	e005      	b.n	8005a3e <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
          break;
 8005a32:	bf00      	nop
 8005a34:	e0c8      	b.n	8005bc8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005a36:	bf00      	nop
 8005a38:	e0c6      	b.n	8005bc8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005a3a:	bf00      	nop
 8005a3c:	e0c4      	b.n	8005bc8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005a3e:	bf00      	nop
        break;
 8005a40:	e0c2      	b.n	8005bc8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8005a42:	4b1b      	ldr	r3, [pc, #108]	; (8005ab0 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8005a44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a48:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005a4c:	60fb      	str	r3, [r7, #12]
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005a54:	d030      	beq.n	8005ab8 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005a5c:	d837      	bhi.n	8005ace <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005a64:	d01a      	beq.n	8005a9c <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005a6c:	d82f      	bhi.n	8005ace <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d004      	beq.n	8005a7e <HAL_RCCEx_GetPeriphCLKFreq+0xce2>
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a7a:	d004      	beq.n	8005a86 <HAL_RCCEx_GetPeriphCLKFreq+0xcea>
          break;
 8005a7c:	e027      	b.n	8005ace <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005a7e:	f7fe fce1 	bl	8004444 <HAL_RCC_GetPCLK1Freq>
 8005a82:	61f8      	str	r0, [r7, #28]
          break;
 8005a84:	e02a      	b.n	8005adc <HAL_RCCEx_GetPeriphCLKFreq+0xd40>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8005a86:	4b0a      	ldr	r3, [pc, #40]	; (8005ab0 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8005a88:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005a8c:	f003 0302 	and.w	r3, r3, #2
 8005a90:	2b02      	cmp	r3, #2
 8005a92:	d11e      	bne.n	8005ad2 <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
              frequency = LSI_VALUE;
 8005a94:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8005a98:	61fb      	str	r3, [r7, #28]
          break;
 8005a9a:	e01a      	b.n	8005ad2 <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005a9c:	4b04      	ldr	r3, [pc, #16]	; (8005ab0 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005aa4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005aa8:	d115      	bne.n	8005ad6 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
            frequency = HSI_VALUE;
 8005aaa:	4b02      	ldr	r3, [pc, #8]	; (8005ab4 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005aac:	61fb      	str	r3, [r7, #28]
          break;
 8005aae:	e012      	b.n	8005ad6 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
 8005ab0:	40021000 	.word	0x40021000
 8005ab4:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005ab8:	4b46      	ldr	r3, [pc, #280]	; (8005bd4 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8005aba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005abe:	f003 0302 	and.w	r3, r3, #2
 8005ac2:	2b02      	cmp	r3, #2
 8005ac4:	d109      	bne.n	8005ada <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
            frequency = LSE_VALUE;
 8005ac6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005aca:	61fb      	str	r3, [r7, #28]
          break;
 8005acc:	e005      	b.n	8005ada <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
          break;
 8005ace:	bf00      	nop
 8005ad0:	e07a      	b.n	8005bc8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005ad2:	bf00      	nop
 8005ad4:	e078      	b.n	8005bc8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005ad6:	bf00      	nop
 8005ad8:	e076      	b.n	8005bc8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005ada:	bf00      	nop
        break;
 8005adc:	e074      	b.n	8005bc8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8005ade:	4b3d      	ldr	r3, [pc, #244]	; (8005bd4 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8005ae0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005ae4:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005ae8:	60fb      	str	r3, [r7, #12]
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005af0:	d02c      	beq.n	8005b4c <HAL_RCCEx_GetPeriphCLKFreq+0xdb0>
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005af8:	d855      	bhi.n	8005ba6 <HAL_RCCEx_GetPeriphCLKFreq+0xe0a>
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d004      	beq.n	8005b0a <HAL_RCCEx_GetPeriphCLKFreq+0xd6e>
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005b06:	d004      	beq.n	8005b12 <HAL_RCCEx_GetPeriphCLKFreq+0xd76>
          break;
 8005b08:	e04d      	b.n	8005ba6 <HAL_RCCEx_GetPeriphCLKFreq+0xe0a>
          frequency = HAL_RCC_GetSysClockFreq();
 8005b0a:	f7fe fc05 	bl	8004318 <HAL_RCC_GetSysClockFreq>
 8005b0e:	61f8      	str	r0, [r7, #28]
          break;
 8005b10:	e04e      	b.n	8005bb0 <HAL_RCCEx_GetPeriphCLKFreq+0xe14>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8005b12:	4b30      	ldr	r3, [pc, #192]	; (8005bd4 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f003 0302 	and.w	r3, r3, #2
 8005b1a:	2b02      	cmp	r3, #2
 8005b1c:	d145      	bne.n	8005baa <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8005b1e:	4b2d      	ldr	r3, [pc, #180]	; (8005bd4 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f003 0308 	and.w	r3, r3, #8
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d005      	beq.n	8005b36 <HAL_RCCEx_GetPeriphCLKFreq+0xd9a>
 8005b2a:	4b2a      	ldr	r3, [pc, #168]	; (8005bd4 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	091b      	lsrs	r3, r3, #4
 8005b30:	f003 030f 	and.w	r3, r3, #15
 8005b34:	e005      	b.n	8005b42 <HAL_RCCEx_GetPeriphCLKFreq+0xda6>
 8005b36:	4b27      	ldr	r3, [pc, #156]	; (8005bd4 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8005b38:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005b3c:	0a1b      	lsrs	r3, r3, #8
 8005b3e:	f003 030f 	and.w	r3, r3, #15
 8005b42:	4a25      	ldr	r2, [pc, #148]	; (8005bd8 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8005b44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b48:	61fb      	str	r3, [r7, #28]
          break;
 8005b4a:	e02e      	b.n	8005baa <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8005b4c:	4b21      	ldr	r3, [pc, #132]	; (8005bd4 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b54:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005b58:	d129      	bne.n	8005bae <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8005b5a:	4b1e      	ldr	r3, [pc, #120]	; (8005bd4 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8005b5c:	68db      	ldr	r3, [r3, #12]
 8005b5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005b62:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005b66:	d122      	bne.n	8005bae <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8005b68:	4b1a      	ldr	r3, [pc, #104]	; (8005bd4 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8005b6a:	68db      	ldr	r3, [r3, #12]
 8005b6c:	0a1b      	lsrs	r3, r3, #8
 8005b6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b72:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005b74:	69bb      	ldr	r3, [r7, #24]
 8005b76:	68ba      	ldr	r2, [r7, #8]
 8005b78:	fb03 f202 	mul.w	r2, r3, r2
 8005b7c:	4b15      	ldr	r3, [pc, #84]	; (8005bd4 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8005b7e:	68db      	ldr	r3, [r3, #12]
 8005b80:	091b      	lsrs	r3, r3, #4
 8005b82:	f003 030f 	and.w	r3, r3, #15
 8005b86:	3301      	adds	r3, #1
 8005b88:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b8c:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8005b8e:	4b11      	ldr	r3, [pc, #68]	; (8005bd4 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8005b90:	68db      	ldr	r3, [r3, #12]
 8005b92:	0d5b      	lsrs	r3, r3, #21
 8005b94:	f003 0303 	and.w	r3, r3, #3
 8005b98:	3301      	adds	r3, #1
 8005b9a:	005b      	lsls	r3, r3, #1
 8005b9c:	69ba      	ldr	r2, [r7, #24]
 8005b9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ba2:	61fb      	str	r3, [r7, #28]
          break;
 8005ba4:	e003      	b.n	8005bae <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
          break;
 8005ba6:	bf00      	nop
 8005ba8:	e00e      	b.n	8005bc8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005baa:	bf00      	nop
 8005bac:	e00c      	b.n	8005bc8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005bae:	bf00      	nop
        break;
 8005bb0:	e00a      	b.n	8005bc8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 8005bb2:	bf00      	nop
 8005bb4:	e008      	b.n	8005bc8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 8005bb6:	bf00      	nop
 8005bb8:	e006      	b.n	8005bc8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 8005bba:	bf00      	nop
 8005bbc:	e004      	b.n	8005bc8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 8005bbe:	bf00      	nop
 8005bc0:	e002      	b.n	8005bc8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 8005bc2:	bf00      	nop
 8005bc4:	e000      	b.n	8005bc8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 8005bc6:	bf00      	nop
    }
  }

  return(frequency);
 8005bc8:	69fb      	ldr	r3, [r7, #28]
}
 8005bca:	4618      	mov	r0, r3
 8005bcc:	3720      	adds	r7, #32
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	bd80      	pop	{r7, pc}
 8005bd2:	bf00      	nop
 8005bd4:	40021000 	.word	0x40021000
 8005bd8:	0800d028 	.word	0x0800d028

08005bdc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b084      	sub	sp, #16
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
 8005be4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005be6:	2300      	movs	r3, #0
 8005be8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005bea:	4b72      	ldr	r3, [pc, #456]	; (8005db4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005bec:	68db      	ldr	r3, [r3, #12]
 8005bee:	f003 0303 	and.w	r3, r3, #3
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d00e      	beq.n	8005c14 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005bf6:	4b6f      	ldr	r3, [pc, #444]	; (8005db4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005bf8:	68db      	ldr	r3, [r3, #12]
 8005bfa:	f003 0203 	and.w	r2, r3, #3
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	429a      	cmp	r2, r3
 8005c04:	d103      	bne.n	8005c0e <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
       ||
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d142      	bne.n	8005c94 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8005c0e:	2301      	movs	r3, #1
 8005c10:	73fb      	strb	r3, [r7, #15]
 8005c12:	e03f      	b.n	8005c94 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	2b03      	cmp	r3, #3
 8005c1a:	d018      	beq.n	8005c4e <RCCEx_PLLSAI1_Config+0x72>
 8005c1c:	2b03      	cmp	r3, #3
 8005c1e:	d825      	bhi.n	8005c6c <RCCEx_PLLSAI1_Config+0x90>
 8005c20:	2b01      	cmp	r3, #1
 8005c22:	d002      	beq.n	8005c2a <RCCEx_PLLSAI1_Config+0x4e>
 8005c24:	2b02      	cmp	r3, #2
 8005c26:	d009      	beq.n	8005c3c <RCCEx_PLLSAI1_Config+0x60>
 8005c28:	e020      	b.n	8005c6c <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005c2a:	4b62      	ldr	r3, [pc, #392]	; (8005db4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f003 0302 	and.w	r3, r3, #2
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d11d      	bne.n	8005c72 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8005c36:	2301      	movs	r3, #1
 8005c38:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005c3a:	e01a      	b.n	8005c72 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005c3c:	4b5d      	ldr	r3, [pc, #372]	; (8005db4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d116      	bne.n	8005c76 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8005c48:	2301      	movs	r3, #1
 8005c4a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005c4c:	e013      	b.n	8005c76 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005c4e:	4b59      	ldr	r3, [pc, #356]	; (8005db4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d10f      	bne.n	8005c7a <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005c5a:	4b56      	ldr	r3, [pc, #344]	; (8005db4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d109      	bne.n	8005c7a <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8005c66:	2301      	movs	r3, #1
 8005c68:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005c6a:	e006      	b.n	8005c7a <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8005c6c:	2301      	movs	r3, #1
 8005c6e:	73fb      	strb	r3, [r7, #15]
      break;
 8005c70:	e004      	b.n	8005c7c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005c72:	bf00      	nop
 8005c74:	e002      	b.n	8005c7c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005c76:	bf00      	nop
 8005c78:	e000      	b.n	8005c7c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005c7a:	bf00      	nop
    }

    if(status == HAL_OK)
 8005c7c:	7bfb      	ldrb	r3, [r7, #15]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d108      	bne.n	8005c94 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8005c82:	4b4c      	ldr	r3, [pc, #304]	; (8005db4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005c84:	68db      	ldr	r3, [r3, #12]
 8005c86:	f023 0203 	bic.w	r2, r3, #3
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	4949      	ldr	r1, [pc, #292]	; (8005db4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005c90:	4313      	orrs	r3, r2
 8005c92:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8005c94:	7bfb      	ldrb	r3, [r7, #15]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	f040 8086 	bne.w	8005da8 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005c9c:	4b45      	ldr	r3, [pc, #276]	; (8005db4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	4a44      	ldr	r2, [pc, #272]	; (8005db4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005ca2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005ca6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ca8:	f7fb fae6 	bl	8001278 <HAL_GetTick>
 8005cac:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005cae:	e009      	b.n	8005cc4 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005cb0:	f7fb fae2 	bl	8001278 <HAL_GetTick>
 8005cb4:	4602      	mov	r2, r0
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	1ad3      	subs	r3, r2, r3
 8005cba:	2b02      	cmp	r3, #2
 8005cbc:	d902      	bls.n	8005cc4 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8005cbe:	2303      	movs	r3, #3
 8005cc0:	73fb      	strb	r3, [r7, #15]
        break;
 8005cc2:	e005      	b.n	8005cd0 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005cc4:	4b3b      	ldr	r3, [pc, #236]	; (8005db4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d1ef      	bne.n	8005cb0 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8005cd0:	7bfb      	ldrb	r3, [r7, #15]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d168      	bne.n	8005da8 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d113      	bne.n	8005d04 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005cdc:	4b35      	ldr	r3, [pc, #212]	; (8005db4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005cde:	691a      	ldr	r2, [r3, #16]
 8005ce0:	4b35      	ldr	r3, [pc, #212]	; (8005db8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005ce2:	4013      	ands	r3, r2
 8005ce4:	687a      	ldr	r2, [r7, #4]
 8005ce6:	6892      	ldr	r2, [r2, #8]
 8005ce8:	0211      	lsls	r1, r2, #8
 8005cea:	687a      	ldr	r2, [r7, #4]
 8005cec:	68d2      	ldr	r2, [r2, #12]
 8005cee:	06d2      	lsls	r2, r2, #27
 8005cf0:	4311      	orrs	r1, r2
 8005cf2:	687a      	ldr	r2, [r7, #4]
 8005cf4:	6852      	ldr	r2, [r2, #4]
 8005cf6:	3a01      	subs	r2, #1
 8005cf8:	0112      	lsls	r2, r2, #4
 8005cfa:	430a      	orrs	r2, r1
 8005cfc:	492d      	ldr	r1, [pc, #180]	; (8005db4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005cfe:	4313      	orrs	r3, r2
 8005d00:	610b      	str	r3, [r1, #16]
 8005d02:	e02d      	b.n	8005d60 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	2b01      	cmp	r3, #1
 8005d08:	d115      	bne.n	8005d36 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005d0a:	4b2a      	ldr	r3, [pc, #168]	; (8005db4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005d0c:	691a      	ldr	r2, [r3, #16]
 8005d0e:	4b2b      	ldr	r3, [pc, #172]	; (8005dbc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005d10:	4013      	ands	r3, r2
 8005d12:	687a      	ldr	r2, [r7, #4]
 8005d14:	6892      	ldr	r2, [r2, #8]
 8005d16:	0211      	lsls	r1, r2, #8
 8005d18:	687a      	ldr	r2, [r7, #4]
 8005d1a:	6912      	ldr	r2, [r2, #16]
 8005d1c:	0852      	lsrs	r2, r2, #1
 8005d1e:	3a01      	subs	r2, #1
 8005d20:	0552      	lsls	r2, r2, #21
 8005d22:	4311      	orrs	r1, r2
 8005d24:	687a      	ldr	r2, [r7, #4]
 8005d26:	6852      	ldr	r2, [r2, #4]
 8005d28:	3a01      	subs	r2, #1
 8005d2a:	0112      	lsls	r2, r2, #4
 8005d2c:	430a      	orrs	r2, r1
 8005d2e:	4921      	ldr	r1, [pc, #132]	; (8005db4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005d30:	4313      	orrs	r3, r2
 8005d32:	610b      	str	r3, [r1, #16]
 8005d34:	e014      	b.n	8005d60 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005d36:	4b1f      	ldr	r3, [pc, #124]	; (8005db4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005d38:	691a      	ldr	r2, [r3, #16]
 8005d3a:	4b21      	ldr	r3, [pc, #132]	; (8005dc0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d3c:	4013      	ands	r3, r2
 8005d3e:	687a      	ldr	r2, [r7, #4]
 8005d40:	6892      	ldr	r2, [r2, #8]
 8005d42:	0211      	lsls	r1, r2, #8
 8005d44:	687a      	ldr	r2, [r7, #4]
 8005d46:	6952      	ldr	r2, [r2, #20]
 8005d48:	0852      	lsrs	r2, r2, #1
 8005d4a:	3a01      	subs	r2, #1
 8005d4c:	0652      	lsls	r2, r2, #25
 8005d4e:	4311      	orrs	r1, r2
 8005d50:	687a      	ldr	r2, [r7, #4]
 8005d52:	6852      	ldr	r2, [r2, #4]
 8005d54:	3a01      	subs	r2, #1
 8005d56:	0112      	lsls	r2, r2, #4
 8005d58:	430a      	orrs	r2, r1
 8005d5a:	4916      	ldr	r1, [pc, #88]	; (8005db4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005d5c:	4313      	orrs	r3, r2
 8005d5e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005d60:	4b14      	ldr	r3, [pc, #80]	; (8005db4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	4a13      	ldr	r2, [pc, #76]	; (8005db4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005d66:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005d6a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d6c:	f7fb fa84 	bl	8001278 <HAL_GetTick>
 8005d70:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005d72:	e009      	b.n	8005d88 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005d74:	f7fb fa80 	bl	8001278 <HAL_GetTick>
 8005d78:	4602      	mov	r2, r0
 8005d7a:	68bb      	ldr	r3, [r7, #8]
 8005d7c:	1ad3      	subs	r3, r2, r3
 8005d7e:	2b02      	cmp	r3, #2
 8005d80:	d902      	bls.n	8005d88 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8005d82:	2303      	movs	r3, #3
 8005d84:	73fb      	strb	r3, [r7, #15]
          break;
 8005d86:	e005      	b.n	8005d94 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005d88:	4b0a      	ldr	r3, [pc, #40]	; (8005db4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d0ef      	beq.n	8005d74 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8005d94:	7bfb      	ldrb	r3, [r7, #15]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d106      	bne.n	8005da8 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005d9a:	4b06      	ldr	r3, [pc, #24]	; (8005db4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005d9c:	691a      	ldr	r2, [r3, #16]
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	699b      	ldr	r3, [r3, #24]
 8005da2:	4904      	ldr	r1, [pc, #16]	; (8005db4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005da4:	4313      	orrs	r3, r2
 8005da6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005da8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005daa:	4618      	mov	r0, r3
 8005dac:	3710      	adds	r7, #16
 8005dae:	46bd      	mov	sp, r7
 8005db0:	bd80      	pop	{r7, pc}
 8005db2:	bf00      	nop
 8005db4:	40021000 	.word	0x40021000
 8005db8:	07ff800f 	.word	0x07ff800f
 8005dbc:	ff9f800f 	.word	0xff9f800f
 8005dc0:	f9ff800f 	.word	0xf9ff800f

08005dc4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b084      	sub	sp, #16
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
 8005dcc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005dce:	2300      	movs	r3, #0
 8005dd0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005dd2:	4b72      	ldr	r3, [pc, #456]	; (8005f9c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005dd4:	68db      	ldr	r3, [r3, #12]
 8005dd6:	f003 0303 	and.w	r3, r3, #3
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d00e      	beq.n	8005dfc <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005dde:	4b6f      	ldr	r3, [pc, #444]	; (8005f9c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005de0:	68db      	ldr	r3, [r3, #12]
 8005de2:	f003 0203 	and.w	r2, r3, #3
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	429a      	cmp	r2, r3
 8005dec:	d103      	bne.n	8005df6 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
       ||
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d142      	bne.n	8005e7c <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8005df6:	2301      	movs	r3, #1
 8005df8:	73fb      	strb	r3, [r7, #15]
 8005dfa:	e03f      	b.n	8005e7c <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	2b03      	cmp	r3, #3
 8005e02:	d018      	beq.n	8005e36 <RCCEx_PLLSAI2_Config+0x72>
 8005e04:	2b03      	cmp	r3, #3
 8005e06:	d825      	bhi.n	8005e54 <RCCEx_PLLSAI2_Config+0x90>
 8005e08:	2b01      	cmp	r3, #1
 8005e0a:	d002      	beq.n	8005e12 <RCCEx_PLLSAI2_Config+0x4e>
 8005e0c:	2b02      	cmp	r3, #2
 8005e0e:	d009      	beq.n	8005e24 <RCCEx_PLLSAI2_Config+0x60>
 8005e10:	e020      	b.n	8005e54 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005e12:	4b62      	ldr	r3, [pc, #392]	; (8005f9c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f003 0302 	and.w	r3, r3, #2
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d11d      	bne.n	8005e5a <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8005e1e:	2301      	movs	r3, #1
 8005e20:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005e22:	e01a      	b.n	8005e5a <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005e24:	4b5d      	ldr	r3, [pc, #372]	; (8005f9c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d116      	bne.n	8005e5e <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8005e30:	2301      	movs	r3, #1
 8005e32:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005e34:	e013      	b.n	8005e5e <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005e36:	4b59      	ldr	r3, [pc, #356]	; (8005f9c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d10f      	bne.n	8005e62 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005e42:	4b56      	ldr	r3, [pc, #344]	; (8005f9c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d109      	bne.n	8005e62 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8005e4e:	2301      	movs	r3, #1
 8005e50:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005e52:	e006      	b.n	8005e62 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8005e54:	2301      	movs	r3, #1
 8005e56:	73fb      	strb	r3, [r7, #15]
      break;
 8005e58:	e004      	b.n	8005e64 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8005e5a:	bf00      	nop
 8005e5c:	e002      	b.n	8005e64 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8005e5e:	bf00      	nop
 8005e60:	e000      	b.n	8005e64 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8005e62:	bf00      	nop
    }

    if(status == HAL_OK)
 8005e64:	7bfb      	ldrb	r3, [r7, #15]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d108      	bne.n	8005e7c <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8005e6a:	4b4c      	ldr	r3, [pc, #304]	; (8005f9c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005e6c:	68db      	ldr	r3, [r3, #12]
 8005e6e:	f023 0203 	bic.w	r2, r3, #3
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	4949      	ldr	r1, [pc, #292]	; (8005f9c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005e78:	4313      	orrs	r3, r2
 8005e7a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8005e7c:	7bfb      	ldrb	r3, [r7, #15]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	f040 8086 	bne.w	8005f90 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005e84:	4b45      	ldr	r3, [pc, #276]	; (8005f9c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	4a44      	ldr	r2, [pc, #272]	; (8005f9c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005e8a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005e8e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e90:	f7fb f9f2 	bl	8001278 <HAL_GetTick>
 8005e94:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005e96:	e009      	b.n	8005eac <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005e98:	f7fb f9ee 	bl	8001278 <HAL_GetTick>
 8005e9c:	4602      	mov	r2, r0
 8005e9e:	68bb      	ldr	r3, [r7, #8]
 8005ea0:	1ad3      	subs	r3, r2, r3
 8005ea2:	2b02      	cmp	r3, #2
 8005ea4:	d902      	bls.n	8005eac <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8005ea6:	2303      	movs	r3, #3
 8005ea8:	73fb      	strb	r3, [r7, #15]
        break;
 8005eaa:	e005      	b.n	8005eb8 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005eac:	4b3b      	ldr	r3, [pc, #236]	; (8005f9c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d1ef      	bne.n	8005e98 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8005eb8:	7bfb      	ldrb	r3, [r7, #15]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d168      	bne.n	8005f90 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d113      	bne.n	8005eec <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005ec4:	4b35      	ldr	r3, [pc, #212]	; (8005f9c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005ec6:	695a      	ldr	r2, [r3, #20]
 8005ec8:	4b35      	ldr	r3, [pc, #212]	; (8005fa0 <RCCEx_PLLSAI2_Config+0x1dc>)
 8005eca:	4013      	ands	r3, r2
 8005ecc:	687a      	ldr	r2, [r7, #4]
 8005ece:	6892      	ldr	r2, [r2, #8]
 8005ed0:	0211      	lsls	r1, r2, #8
 8005ed2:	687a      	ldr	r2, [r7, #4]
 8005ed4:	68d2      	ldr	r2, [r2, #12]
 8005ed6:	06d2      	lsls	r2, r2, #27
 8005ed8:	4311      	orrs	r1, r2
 8005eda:	687a      	ldr	r2, [r7, #4]
 8005edc:	6852      	ldr	r2, [r2, #4]
 8005ede:	3a01      	subs	r2, #1
 8005ee0:	0112      	lsls	r2, r2, #4
 8005ee2:	430a      	orrs	r2, r1
 8005ee4:	492d      	ldr	r1, [pc, #180]	; (8005f9c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005ee6:	4313      	orrs	r3, r2
 8005ee8:	614b      	str	r3, [r1, #20]
 8005eea:	e02d      	b.n	8005f48 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	2b01      	cmp	r3, #1
 8005ef0:	d115      	bne.n	8005f1e <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005ef2:	4b2a      	ldr	r3, [pc, #168]	; (8005f9c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005ef4:	695a      	ldr	r2, [r3, #20]
 8005ef6:	4b2b      	ldr	r3, [pc, #172]	; (8005fa4 <RCCEx_PLLSAI2_Config+0x1e0>)
 8005ef8:	4013      	ands	r3, r2
 8005efa:	687a      	ldr	r2, [r7, #4]
 8005efc:	6892      	ldr	r2, [r2, #8]
 8005efe:	0211      	lsls	r1, r2, #8
 8005f00:	687a      	ldr	r2, [r7, #4]
 8005f02:	6912      	ldr	r2, [r2, #16]
 8005f04:	0852      	lsrs	r2, r2, #1
 8005f06:	3a01      	subs	r2, #1
 8005f08:	0552      	lsls	r2, r2, #21
 8005f0a:	4311      	orrs	r1, r2
 8005f0c:	687a      	ldr	r2, [r7, #4]
 8005f0e:	6852      	ldr	r2, [r2, #4]
 8005f10:	3a01      	subs	r2, #1
 8005f12:	0112      	lsls	r2, r2, #4
 8005f14:	430a      	orrs	r2, r1
 8005f16:	4921      	ldr	r1, [pc, #132]	; (8005f9c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005f18:	4313      	orrs	r3, r2
 8005f1a:	614b      	str	r3, [r1, #20]
 8005f1c:	e014      	b.n	8005f48 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005f1e:	4b1f      	ldr	r3, [pc, #124]	; (8005f9c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005f20:	695a      	ldr	r2, [r3, #20]
 8005f22:	4b21      	ldr	r3, [pc, #132]	; (8005fa8 <RCCEx_PLLSAI2_Config+0x1e4>)
 8005f24:	4013      	ands	r3, r2
 8005f26:	687a      	ldr	r2, [r7, #4]
 8005f28:	6892      	ldr	r2, [r2, #8]
 8005f2a:	0211      	lsls	r1, r2, #8
 8005f2c:	687a      	ldr	r2, [r7, #4]
 8005f2e:	6952      	ldr	r2, [r2, #20]
 8005f30:	0852      	lsrs	r2, r2, #1
 8005f32:	3a01      	subs	r2, #1
 8005f34:	0652      	lsls	r2, r2, #25
 8005f36:	4311      	orrs	r1, r2
 8005f38:	687a      	ldr	r2, [r7, #4]
 8005f3a:	6852      	ldr	r2, [r2, #4]
 8005f3c:	3a01      	subs	r2, #1
 8005f3e:	0112      	lsls	r2, r2, #4
 8005f40:	430a      	orrs	r2, r1
 8005f42:	4916      	ldr	r1, [pc, #88]	; (8005f9c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005f44:	4313      	orrs	r3, r2
 8005f46:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005f48:	4b14      	ldr	r3, [pc, #80]	; (8005f9c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	4a13      	ldr	r2, [pc, #76]	; (8005f9c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005f4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f52:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f54:	f7fb f990 	bl	8001278 <HAL_GetTick>
 8005f58:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005f5a:	e009      	b.n	8005f70 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005f5c:	f7fb f98c 	bl	8001278 <HAL_GetTick>
 8005f60:	4602      	mov	r2, r0
 8005f62:	68bb      	ldr	r3, [r7, #8]
 8005f64:	1ad3      	subs	r3, r2, r3
 8005f66:	2b02      	cmp	r3, #2
 8005f68:	d902      	bls.n	8005f70 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8005f6a:	2303      	movs	r3, #3
 8005f6c:	73fb      	strb	r3, [r7, #15]
          break;
 8005f6e:	e005      	b.n	8005f7c <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005f70:	4b0a      	ldr	r3, [pc, #40]	; (8005f9c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d0ef      	beq.n	8005f5c <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8005f7c:	7bfb      	ldrb	r3, [r7, #15]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d106      	bne.n	8005f90 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005f82:	4b06      	ldr	r3, [pc, #24]	; (8005f9c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005f84:	695a      	ldr	r2, [r3, #20]
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	699b      	ldr	r3, [r3, #24]
 8005f8a:	4904      	ldr	r1, [pc, #16]	; (8005f9c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005f8c:	4313      	orrs	r3, r2
 8005f8e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005f90:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f92:	4618      	mov	r0, r3
 8005f94:	3710      	adds	r7, #16
 8005f96:	46bd      	mov	sp, r7
 8005f98:	bd80      	pop	{r7, pc}
 8005f9a:	bf00      	nop
 8005f9c:	40021000 	.word	0x40021000
 8005fa0:	07ff800f 	.word	0x07ff800f
 8005fa4:	ff9f800f 	.word	0xff9f800f
 8005fa8:	f9ff800f 	.word	0xf9ff800f

08005fac <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 8005fac:	b480      	push	{r7}
 8005fae:	b089      	sub	sp, #36	; 0x24
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
 8005fb4:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 8005fba:	2300      	movs	r3, #0
 8005fbc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005fc8:	d10b      	bne.n	8005fe2 <RCCEx_GetSAIxPeriphCLKFreq+0x36>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8005fca:	4b7e      	ldr	r3, [pc, #504]	; (80061c4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005fcc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005fd0:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8005fd4:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 8005fd6:	69bb      	ldr	r3, [r7, #24]
 8005fd8:	2b60      	cmp	r3, #96	; 0x60
 8005fda:	d112      	bne.n	8006002 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8005fdc:	4b7a      	ldr	r3, [pc, #488]	; (80061c8 <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 8005fde:	61fb      	str	r3, [r7, #28]
 8005fe0:	e00f      	b.n	8006002 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fe8:	d10b      	bne.n	8006002 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8005fea:	4b76      	ldr	r3, [pc, #472]	; (80061c4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005fec:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005ff0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005ff4:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 8005ff6:	69bb      	ldr	r3, [r7, #24]
 8005ff8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005ffc:	d101      	bne.n	8006002 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 8005ffe:	4b72      	ldr	r3, [pc, #456]	; (80061c8 <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 8006000:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 8006002:	69fb      	ldr	r3, [r7, #28]
 8006004:	2b00      	cmp	r3, #0
 8006006:	f040 80d6 	bne.w	80061b6 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
  {
    pllvco = InputFrequency;
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 800600e:	69bb      	ldr	r3, [r7, #24]
 8006010:	2b40      	cmp	r3, #64	; 0x40
 8006012:	d003      	beq.n	800601c <RCCEx_GetSAIxPeriphCLKFreq+0x70>
 8006014:	69bb      	ldr	r3, [r7, #24]
 8006016:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800601a:	d13b      	bne.n	8006094 <RCCEx_GetSAIxPeriphCLKFreq+0xe8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800601c:	4b69      	ldr	r3, [pc, #420]	; (80061c4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006024:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006028:	f040 80c4 	bne.w	80061b4 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
 800602c:	4b65      	ldr	r3, [pc, #404]	; (80061c4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800602e:	68db      	ldr	r3, [r3, #12]
 8006030:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006034:	2b00      	cmp	r3, #0
 8006036:	f000 80bd 	beq.w	80061b4 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800603a:	4b62      	ldr	r3, [pc, #392]	; (80061c4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800603c:	68db      	ldr	r3, [r3, #12]
 800603e:	091b      	lsrs	r3, r3, #4
 8006040:	f003 030f 	and.w	r3, r3, #15
 8006044:	3301      	adds	r3, #1
 8006046:	693a      	ldr	r2, [r7, #16]
 8006048:	fbb2 f3f3 	udiv	r3, r2, r3
 800604c:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800604e:	4b5d      	ldr	r3, [pc, #372]	; (80061c4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006050:	68db      	ldr	r3, [r3, #12]
 8006052:	0a1b      	lsrs	r3, r3, #8
 8006054:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006058:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 800605a:	4b5a      	ldr	r3, [pc, #360]	; (80061c4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800605c:	68db      	ldr	r3, [r3, #12]
 800605e:	0edb      	lsrs	r3, r3, #27
 8006060:	f003 031f 	and.w	r3, r3, #31
 8006064:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8006066:	697b      	ldr	r3, [r7, #20]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d10a      	bne.n	8006082 <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 800606c:	4b55      	ldr	r3, [pc, #340]	; (80061c4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800606e:	68db      	ldr	r3, [r3, #12]
 8006070:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006074:	2b00      	cmp	r3, #0
 8006076:	d002      	beq.n	800607e <RCCEx_GetSAIxPeriphCLKFreq+0xd2>
          {
            pllp = 17U;
 8006078:	2311      	movs	r3, #17
 800607a:	617b      	str	r3, [r7, #20]
 800607c:	e001      	b.n	8006082 <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
          }
          else
          {
            pllp = 7U;
 800607e:	2307      	movs	r3, #7
 8006080:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8006082:	693b      	ldr	r3, [r7, #16]
 8006084:	68fa      	ldr	r2, [r7, #12]
 8006086:	fb03 f202 	mul.w	r2, r3, r2
 800608a:	697b      	ldr	r3, [r7, #20]
 800608c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006090:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8006092:	e08f      	b.n	80061b4 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 8006094:	69bb      	ldr	r3, [r7, #24]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d13a      	bne.n	8006110 <RCCEx_GetSAIxPeriphCLKFreq+0x164>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 800609a:	4b4a      	ldr	r3, [pc, #296]	; (80061c4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80060a2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80060a6:	f040 8086 	bne.w	80061b6 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 80060aa:	4b46      	ldr	r3, [pc, #280]	; (80061c4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80060ac:	691b      	ldr	r3, [r3, #16]
 80060ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d07f      	beq.n	80061b6 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 80060b6:	4b43      	ldr	r3, [pc, #268]	; (80061c4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80060b8:	691b      	ldr	r3, [r3, #16]
 80060ba:	091b      	lsrs	r3, r3, #4
 80060bc:	f003 030f 	and.w	r3, r3, #15
 80060c0:	3301      	adds	r3, #1
 80060c2:	693a      	ldr	r2, [r7, #16]
 80060c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80060c8:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80060ca:	4b3e      	ldr	r3, [pc, #248]	; (80061c4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80060cc:	691b      	ldr	r3, [r3, #16]
 80060ce:	0a1b      	lsrs	r3, r3, #8
 80060d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80060d4:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 80060d6:	4b3b      	ldr	r3, [pc, #236]	; (80061c4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80060d8:	691b      	ldr	r3, [r3, #16]
 80060da:	0edb      	lsrs	r3, r3, #27
 80060dc:	f003 031f 	and.w	r3, r3, #31
 80060e0:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 80060e2:	697b      	ldr	r3, [r7, #20]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d10a      	bne.n	80060fe <RCCEx_GetSAIxPeriphCLKFreq+0x152>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 80060e8:	4b36      	ldr	r3, [pc, #216]	; (80061c4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80060ea:	691b      	ldr	r3, [r3, #16]
 80060ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d002      	beq.n	80060fa <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
          {
            pllp = 17U;
 80060f4:	2311      	movs	r3, #17
 80060f6:	617b      	str	r3, [r7, #20]
 80060f8:	e001      	b.n	80060fe <RCCEx_GetSAIxPeriphCLKFreq+0x152>
          }
          else
          {
            pllp = 7U;
 80060fa:	2307      	movs	r3, #7
 80060fc:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 80060fe:	693b      	ldr	r3, [r7, #16]
 8006100:	68fa      	ldr	r2, [r7, #12]
 8006102:	fb03 f202 	mul.w	r2, r3, r2
 8006106:	697b      	ldr	r3, [r7, #20]
 8006108:	fbb2 f3f3 	udiv	r3, r2, r3
 800610c:	61fb      	str	r3, [r7, #28]
 800610e:	e052      	b.n	80061b6 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      }
    }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    else if((srcclk == RCC_SAI1CLKSOURCE_HSI) || (srcclk == RCC_SAI2CLKSOURCE_HSI))
 8006110:	69bb      	ldr	r3, [r7, #24]
 8006112:	2b80      	cmp	r3, #128	; 0x80
 8006114:	d003      	beq.n	800611e <RCCEx_GetSAIxPeriphCLKFreq+0x172>
 8006116:	69bb      	ldr	r3, [r7, #24]
 8006118:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800611c:	d109      	bne.n	8006132 <RCCEx_GetSAIxPeriphCLKFreq+0x186>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800611e:	4b29      	ldr	r3, [pc, #164]	; (80061c4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006126:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800612a:	d144      	bne.n	80061b6 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
        frequency = HSI_VALUE;
 800612c:	4b27      	ldr	r3, [pc, #156]	; (80061cc <RCCEx_GetSAIxPeriphCLKFreq+0x220>)
 800612e:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006130:	e041      	b.n	80061b6 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 8006132:	69bb      	ldr	r3, [r7, #24]
 8006134:	2b20      	cmp	r3, #32
 8006136:	d003      	beq.n	8006140 <RCCEx_GetSAIxPeriphCLKFreq+0x194>
 8006138:	69bb      	ldr	r3, [r7, #24]
 800613a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800613e:	d13a      	bne.n	80061b6 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 8006140:	4b20      	ldr	r3, [pc, #128]	; (80061c4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006148:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800614c:	d133      	bne.n	80061b6 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 800614e:	4b1d      	ldr	r3, [pc, #116]	; (80061c4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006150:	695b      	ldr	r3, [r3, #20]
 8006152:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006156:	2b00      	cmp	r3, #0
 8006158:	d02d      	beq.n	80061b6 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
 800615a:	4b1a      	ldr	r3, [pc, #104]	; (80061c4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800615c:	695b      	ldr	r3, [r3, #20]
 800615e:	091b      	lsrs	r3, r3, #4
 8006160:	f003 030f 	and.w	r3, r3, #15
 8006164:	3301      	adds	r3, #1
 8006166:	693a      	ldr	r2, [r7, #16]
 8006168:	fbb2 f3f3 	udiv	r3, r2, r3
 800616c:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 800616e:	4b15      	ldr	r3, [pc, #84]	; (80061c4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006170:	695b      	ldr	r3, [r3, #20]
 8006172:	0a1b      	lsrs	r3, r3, #8
 8006174:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006178:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
 800617a:	4b12      	ldr	r3, [pc, #72]	; (80061c4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800617c:	695b      	ldr	r3, [r3, #20]
 800617e:	0edb      	lsrs	r3, r3, #27
 8006180:	f003 031f 	and.w	r3, r3, #31
 8006184:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8006186:	697b      	ldr	r3, [r7, #20]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d10a      	bne.n	80061a2 <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 800618c:	4b0d      	ldr	r3, [pc, #52]	; (80061c4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800618e:	695b      	ldr	r3, [r3, #20]
 8006190:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006194:	2b00      	cmp	r3, #0
 8006196:	d002      	beq.n	800619e <RCCEx_GetSAIxPeriphCLKFreq+0x1f2>
          {
            pllp = 17U;
 8006198:	2311      	movs	r3, #17
 800619a:	617b      	str	r3, [r7, #20]
 800619c:	e001      	b.n	80061a2 <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
          }
          else
          {
            pllp = 7U;
 800619e:	2307      	movs	r3, #7
 80061a0:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 80061a2:	693b      	ldr	r3, [r7, #16]
 80061a4:	68fa      	ldr	r2, [r7, #12]
 80061a6:	fb03 f202 	mul.w	r2, r3, r2
 80061aa:	697b      	ldr	r3, [r7, #20]
 80061ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80061b0:	61fb      	str	r3, [r7, #28]
 80061b2:	e000      	b.n	80061b6 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 80061b4:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 80061b6:	69fb      	ldr	r3, [r7, #28]
}
 80061b8:	4618      	mov	r0, r3
 80061ba:	3724      	adds	r7, #36	; 0x24
 80061bc:	46bd      	mov	sp, r7
 80061be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c2:	4770      	bx	lr
 80061c4:	40021000 	.word	0x40021000
 80061c8:	001fff68 	.word	0x001fff68
 80061cc:	00f42400 	.word	0x00f42400

080061d0 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b08a      	sub	sp, #40	; 0x28
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;
#endif

  /* Check the SD handle allocation */
  if(hsd == NULL)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d101      	bne.n	80061e2 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80061de:	2301      	movs	r3, #1
 80061e0:	e078      	b.n	80062d4 <HAL_SD_Init+0x104>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80061e8:	b2db      	uxtb	r3, r3
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d105      	bne.n	80061fa <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	2200      	movs	r2, #0
 80061f2:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80061f4:	6878      	ldr	r0, [r7, #4]
 80061f6:	f7fa fe93 	bl	8000f20 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	2203      	movs	r2, #3
 80061fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8006202:	6878      	ldr	r0, [r7, #4]
 8006204:	f000 f86a 	bl	80062dc <HAL_SD_InitCard>
 8006208:	4603      	mov	r3, r0
 800620a:	2b00      	cmp	r3, #0
 800620c:	d001      	beq.n	8006212 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800620e:	2301      	movs	r3, #1
 8006210:	e060      	b.n	80062d4 <HAL_SD_Init+0x104>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8006212:	f107 0308 	add.w	r3, r7, #8
 8006216:	4619      	mov	r1, r3
 8006218:	6878      	ldr	r0, [r7, #4]
 800621a:	f000 fdb5 	bl	8006d88 <HAL_SD_GetCardStatus>
 800621e:	4603      	mov	r3, r0
 8006220:	2b00      	cmp	r3, #0
 8006222:	d001      	beq.n	8006228 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 8006224:	2301      	movs	r3, #1
 8006226:	e055      	b.n	80062d4 <HAL_SD_Init+0x104>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8006228:	7e3b      	ldrb	r3, [r7, #24]
 800622a:	b2db      	uxtb	r3, r3
 800622c:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800622e:	7e7b      	ldrb	r3, [r7, #25]
 8006230:	b2db      	uxtb	r3, r3
 8006232:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006238:	2b01      	cmp	r3, #1
 800623a:	d10a      	bne.n	8006252 <HAL_SD_Init+0x82>
 800623c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800623e:	2b00      	cmp	r3, #0
 8006240:	d102      	bne.n	8006248 <HAL_SD_Init+0x78>
 8006242:	6a3b      	ldr	r3, [r7, #32]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d004      	beq.n	8006252 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800624e:	65da      	str	r2, [r3, #92]	; 0x5c
 8006250:	e00b      	b.n	800626a <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006256:	2b01      	cmp	r3, #1
 8006258:	d104      	bne.n	8006264 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006260:	65da      	str	r2, [r3, #92]	; 0x5c
 8006262:	e002      	b.n	800626a <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2200      	movs	r2, #0
 8006268:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }
  /* Configure the bus wide */
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	68db      	ldr	r3, [r3, #12]
 800626e:	4619      	mov	r1, r3
 8006270:	6878      	ldr	r0, [r7, #4]
 8006272:	f000 fe6b 	bl	8006f4c <HAL_SD_ConfigWideBusOperation>
 8006276:	4603      	mov	r3, r0
 8006278:	2b00      	cmp	r3, #0
 800627a:	d001      	beq.n	8006280 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 800627c:	2301      	movs	r3, #1
 800627e:	e029      	b.n	80062d4 <HAL_SD_Init+0x104>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8006280:	f7fa fffa 	bl	8001278 <HAL_GetTick>
 8006284:	61f8      	str	r0, [r7, #28]
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8006286:	e014      	b.n	80062b2 <HAL_SD_Init+0xe2>
  {
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
 8006288:	f7fa fff6 	bl	8001278 <HAL_GetTick>
 800628c:	4602      	mov	r2, r0
 800628e:	69fb      	ldr	r3, [r7, #28]
 8006290:	1ad3      	subs	r3, r2, r3
 8006292:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006296:	d10c      	bne.n	80062b2 <HAL_SD_Init+0xe2>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800629e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2201      	movs	r2, #1
 80062a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2200      	movs	r2, #0
 80062ac:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 80062ae:	2303      	movs	r3, #3
 80062b0:	e010      	b.n	80062d4 <HAL_SD_Init+0x104>
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 80062b2:	6878      	ldr	r0, [r7, #4]
 80062b4:	f000 ff5e 	bl	8007174 <HAL_SD_GetCardState>
 80062b8:	4603      	mov	r3, r0
 80062ba:	2b04      	cmp	r3, #4
 80062bc:	d1e4      	bne.n	8006288 <HAL_SD_Init+0xb8>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2200      	movs	r2, #0
 80062c2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2200      	movs	r2, #0
 80062c8:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	2201      	movs	r2, #1
 80062ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80062d2:	2300      	movs	r3, #0
}
 80062d4:	4618      	mov	r0, r3
 80062d6:	3728      	adds	r7, #40	; 0x28
 80062d8:	46bd      	mov	sp, r7
 80062da:	bd80      	pop	{r7, pc}

080062dc <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80062dc:	b5b0      	push	{r4, r5, r7, lr}
 80062de:	b08e      	sub	sp, #56	; 0x38
 80062e0:	af04      	add	r7, sp, #16
 80062e2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80062e4:	2300      	movs	r3, #0
 80062e6:	60bb      	str	r3, [r7, #8]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80062e8:	2300      	movs	r3, #0
 80062ea:	60fb      	str	r3, [r7, #12]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80062ec:	2300      	movs	r3, #0
 80062ee:	613b      	str	r3, [r7, #16]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80062f0:	2300      	movs	r3, #0
 80062f2:	617b      	str	r3, [r7, #20]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 80062f4:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80062f8:	f7fe fd50 	bl	8004d9c <HAL_RCCEx_GetPeriphCLKFreq>
 80062fc:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 80062fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006300:	2b00      	cmp	r3, #0
 8006302:	d109      	bne.n	8006318 <HAL_SD_InitCard+0x3c>
  {
      hsd->State = HAL_SD_STATE_READY;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2201      	movs	r2, #1
 8006308:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006312:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8006314:	2301      	movs	r3, #1
 8006316:	e079      	b.n	800640c <HAL_SD_InitCard+0x130>
  }
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockDiv = ((sdmmc_clk / SD_INIT_FREQ) - 2U);
#else
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8006318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800631a:	0a1b      	lsrs	r3, r3, #8
 800631c:	4a3d      	ldr	r2, [pc, #244]	; (8006414 <HAL_SD_InitCard+0x138>)
 800631e:	fba2 2303 	umull	r2, r3, r2, r3
 8006322:	091b      	lsrs	r3, r3, #4
 8006324:	61bb      	str	r3, [r7, #24]
#endif

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  Init.Transceiver = hsd->Init.Transceiver;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	699b      	ldr	r3, [r3, #24]
 800632a:	61fb      	str	r3, [r7, #28]
  if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	699b      	ldr	r3, [r3, #24]
 8006330:	2b01      	cmp	r3, #1
 8006332:	d107      	bne.n	8006344 <HAL_SD_InitCard+0x68>
  {
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	681a      	ldr	r2, [r3, #0]
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f042 0210 	orr.w	r2, r2, #16
 8006342:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681d      	ldr	r5, [r3, #0]
 8006348:	466c      	mov	r4, sp
 800634a:	f107 0314 	add.w	r3, r7, #20
 800634e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006352:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006356:	f107 0308 	add.w	r3, r7, #8
 800635a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800635c:	4628      	mov	r0, r5
 800635e:	f001 fefd 	bl	800815c <SDMMC_Init>
  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	4618      	mov	r0, r3
 8006368:	f001 ff40 	bl	80081ec <SDMMC_PowerState_ON>
  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  sdmmc_clk = sdmmc_clk/(Init.ClockDiv + 2U);
#else
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
 800636c:	69bb      	ldr	r3, [r7, #24]
 800636e:	005b      	lsls	r3, r3, #1
 8006370:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006372:	fbb2 f3f3 	udiv	r3, r2, r3
 8006376:	627b      	str	r3, [r7, #36]	; 0x24
#endif
  HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 8006378:	4a27      	ldr	r2, [pc, #156]	; (8006418 <HAL_SD_InitCard+0x13c>)
 800637a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800637c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006380:	3301      	adds	r3, #1
 8006382:	4618      	mov	r0, r3
 8006384:	f7fa ff84 	bl	8001290 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8006388:	6878      	ldr	r0, [r7, #4]
 800638a:	f000 ffd3 	bl	8007334 <SD_PowerON>
 800638e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006390:	6a3b      	ldr	r3, [r7, #32]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d00b      	beq.n	80063ae <HAL_SD_InitCard+0xd2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2201      	movs	r2, #1
 800639a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80063a2:	6a3b      	ldr	r3, [r7, #32]
 80063a4:	431a      	orrs	r2, r3
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80063aa:	2301      	movs	r3, #1
 80063ac:	e02e      	b.n	800640c <HAL_SD_InitCard+0x130>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80063ae:	6878      	ldr	r0, [r7, #4]
 80063b0:	f000 ff00 	bl	80071b4 <SD_InitCard>
 80063b4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80063b6:	6a3b      	ldr	r3, [r7, #32]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d00b      	beq.n	80063d4 <HAL_SD_InitCard+0xf8>
  {
    hsd->State = HAL_SD_STATE_READY;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2201      	movs	r2, #1
 80063c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80063c8:	6a3b      	ldr	r3, [r7, #32]
 80063ca:	431a      	orrs	r2, r3
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80063d0:	2301      	movs	r3, #1
 80063d2:	e01b      	b.n	800640c <HAL_SD_InitCard+0x130>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80063dc:	4618      	mov	r0, r3
 80063de:	f001 ff9b 	bl	8008318 <SDMMC_CmdBlockLength>
 80063e2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80063e4:	6a3b      	ldr	r3, [r7, #32]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d00f      	beq.n	800640a <HAL_SD_InitCard+0x12e>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	4a0b      	ldr	r2, [pc, #44]	; (800641c <HAL_SD_InitCard+0x140>)
 80063f0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80063f6:	6a3b      	ldr	r3, [r7, #32]
 80063f8:	431a      	orrs	r2, r3
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	2201      	movs	r2, #1
 8006402:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006406:	2301      	movs	r3, #1
 8006408:	e000      	b.n	800640c <HAL_SD_InitCard+0x130>
  }

  return HAL_OK;
 800640a:	2300      	movs	r3, #0
}
 800640c:	4618      	mov	r0, r3
 800640e:	3728      	adds	r7, #40	; 0x28
 8006410:	46bd      	mov	sp, r7
 8006412:	bdb0      	pop	{r4, r5, r7, pc}
 8006414:	014f8b59 	.word	0x014f8b59
 8006418:	00012110 	.word	0x00012110
 800641c:	1fe00fff 	.word	0x1fe00fff

08006420 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd Block Address from where data is to be read
  * @param  NumberOfBlocks Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8006420:	b580      	push	{r7, lr}
 8006422:	b08c      	sub	sp, #48	; 0x30
 8006424:	af00      	add	r7, sp, #0
 8006426:	60f8      	str	r0, [r7, #12]
 8006428:	60b9      	str	r1, [r7, #8]
 800642a:	607a      	str	r2, [r7, #4]
 800642c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8006432:	68bb      	ldr	r3, [r7, #8]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d107      	bne.n	8006448 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800643c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006444:	2301      	movs	r3, #1
 8006446:	e08d      	b.n	8006564 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800644e:	b2db      	uxtb	r3, r3
 8006450:	2b01      	cmp	r3, #1
 8006452:	f040 8086 	bne.w	8006562 <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	2200      	movs	r2, #0
 800645a:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800645c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	441a      	add	r2, r3
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006466:	429a      	cmp	r2, r3
 8006468:	d907      	bls.n	800647a <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800646e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8006476:	2301      	movs	r3, #1
 8006478:	e074      	b.n	8006564 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	2203      	movs	r2, #3
 800647e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	2200      	movs	r2, #0
 8006488:	62da      	str	r2, [r3, #44]	; 0x2c
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
#else
      hsd->pRxBuffPtr = pData;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	68ba      	ldr	r2, [r7, #8]
 800648e:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	025a      	lsls	r2, r3, #9
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800649c:	2b01      	cmp	r3, #1
 800649e:	d002      	beq.n	80064a6 <HAL_SD_ReadBlocks_DMA+0x86>
      {
        add *= 512U;
 80064a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064a2:	025b      	lsls	r3, r3, #9
 80064a4:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80064a6:	f04f 33ff 	mov.w	r3, #4294967295
 80064aa:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	025b      	lsls	r3, r3, #9
 80064b0:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80064b2:	2390      	movs	r3, #144	; 0x90
 80064b4:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80064b6:	2302      	movs	r3, #2
 80064b8:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80064ba:	2300      	movs	r3, #0
 80064bc:	623b      	str	r3, [r7, #32]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      config.DPSM          = SDMMC_DPSM_DISABLE;
 80064be:	2300      	movs	r3, #0
 80064c0:	627b      	str	r3, [r7, #36]	; 0x24
#else
      config.DPSM          = SDMMC_DPSM_ENABLE;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f107 0210 	add.w	r2, r7, #16
 80064ca:	4611      	mov	r1, r2
 80064cc:	4618      	mov	r0, r3
 80064ce:	f001 fef7 	bl	80082c0 <SDMMC_ConfigData>

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)

      __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	68da      	ldr	r2, [r3, #12]
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80064e0:	60da      	str	r2, [r3, #12]
      hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	68ba      	ldr	r2, [r7, #8]
 80064e8:	659a      	str	r2, [r3, #88]	; 0x58
      hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	2201      	movs	r2, #1
 80064f0:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	2b01      	cmp	r3, #1
 80064f6:	d90a      	bls.n	800650e <HAL_SD_ReadBlocks_DMA+0xee>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	2282      	movs	r2, #130	; 0x82
 80064fc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006504:	4618      	mov	r0, r3
 8006506:	f001 ff4d 	bl	80083a4 <SDMMC_CmdReadMultiBlock>
 800650a:	62f8      	str	r0, [r7, #44]	; 0x2c
 800650c:	e009      	b.n	8006522 <HAL_SD_ReadBlocks_DMA+0x102>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	2281      	movs	r2, #129	; 0x81
 8006512:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800651a:	4618      	mov	r0, r3
 800651c:	f001 ff1f 	bl	800835e <SDMMC_CmdReadSingleBlock>
 8006520:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8006522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006524:	2b00      	cmp	r3, #0
 8006526:	d012      	beq.n	800654e <HAL_SD_ReadBlocks_DMA+0x12e>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	4a0f      	ldr	r2, [pc, #60]	; (800656c <HAL_SD_ReadBlocks_DMA+0x14c>)
 800652e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006536:	431a      	orrs	r2, r3
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	2201      	movs	r2, #1
 8006540:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	2200      	movs	r2, #0
 8006548:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800654a:	2301      	movs	r3, #1
 800654c:	e00a      	b.n	8006564 <HAL_SD_ReadBlocks_DMA+0x144>
      }

      /* Enable transfer interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800655c:	63da      	str	r2, [r3, #60]	; 0x3c

      return HAL_OK;
 800655e:	2300      	movs	r3, #0
 8006560:	e000      	b.n	8006564 <HAL_SD_ReadBlocks_DMA+0x144>
    }
#endif
  }
  else
  {
    return HAL_BUSY;
 8006562:	2302      	movs	r3, #2
  }
}
 8006564:	4618      	mov	r0, r3
 8006566:	3730      	adds	r7, #48	; 0x30
 8006568:	46bd      	mov	sp, r7
 800656a:	bd80      	pop	{r7, pc}
 800656c:	1fe00fff 	.word	0x1fe00fff

08006570 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd Block Address where data will be written
  * @param  NumberOfBlocks Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8006570:	b580      	push	{r7, lr}
 8006572:	b08c      	sub	sp, #48	; 0x30
 8006574:	af00      	add	r7, sp, #0
 8006576:	60f8      	str	r0, [r7, #12]
 8006578:	60b9      	str	r1, [r7, #8]
 800657a:	607a      	str	r2, [r7, #4]
 800657c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8006582:	68bb      	ldr	r3, [r7, #8]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d107      	bne.n	8006598 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800658c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006594:	2301      	movs	r3, #1
 8006596:	e08d      	b.n	80066b4 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800659e:	b2db      	uxtb	r3, r3
 80065a0:	2b01      	cmp	r3, #1
 80065a2:	f040 8086 	bne.w	80066b2 <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	2200      	movs	r2, #0
 80065aa:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80065ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	441a      	add	r2, r3
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065b6:	429a      	cmp	r2, r3
 80065b8:	d907      	bls.n	80065ca <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065be:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80065c6:	2301      	movs	r3, #1
 80065c8:	e074      	b.n	80066b4 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	2203      	movs	r2, #3
 80065ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	2200      	movs	r2, #0
 80065d8:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    hsd->pTxBuffPtr = pData;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	68ba      	ldr	r2, [r7, #8]
 80065de:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	025a      	lsls	r2, r3, #9
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065ec:	2b01      	cmp	r3, #1
 80065ee:	d002      	beq.n	80065f6 <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 80065f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065f2:	025b      	lsls	r3, r3, #9
 80065f4:	62bb      	str	r3, [r7, #40]	; 0x28
    }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80065f6:	f04f 33ff 	mov.w	r3, #4294967295
 80065fa:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	025b      	lsls	r3, r3, #9
 8006600:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8006602:	2390      	movs	r3, #144	; 0x90
 8006604:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8006606:	2300      	movs	r3, #0
 8006608:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800660a:	2300      	movs	r3, #0
 800660c:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800660e:	2300      	movs	r3, #0
 8006610:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f107 0210 	add.w	r2, r7, #16
 800661a:	4611      	mov	r1, r2
 800661c:	4618      	mov	r0, r3
 800661e:	f001 fe4f 	bl	80082c0 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	68da      	ldr	r2, [r3, #12]
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006630:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	68ba      	ldr	r2, [r7, #8]
 8006638:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	2201      	movs	r2, #1
 8006640:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	2b01      	cmp	r3, #1
 8006646:	d90a      	bls.n	800665e <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	22a0      	movs	r2, #160	; 0xa0
 800664c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006654:	4618      	mov	r0, r3
 8006656:	f001 feeb 	bl	8008430 <SDMMC_CmdWriteMultiBlock>
 800665a:	62f8      	str	r0, [r7, #44]	; 0x2c
 800665c:	e009      	b.n	8006672 <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	2290      	movs	r2, #144	; 0x90
 8006662:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800666a:	4618      	mov	r0, r3
 800666c:	f001 febd 	bl	80083ea <SDMMC_CmdWriteSingleBlock>
 8006670:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8006672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006674:	2b00      	cmp	r3, #0
 8006676:	d012      	beq.n	800669e <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	4a0f      	ldr	r2, [pc, #60]	; (80066bc <HAL_SD_WriteBlocks_DMA+0x14c>)
 800667e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006686:	431a      	orrs	r2, r3
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	2201      	movs	r2, #1
 8006690:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	2200      	movs	r2, #0
 8006698:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800669a:	2301      	movs	r3, #1
 800669c:	e00a      	b.n	80066b4 <HAL_SD_WriteBlocks_DMA+0x144>

      /* Enable SD Error interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));
#else
      /* Enable transfer interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 80066ac:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

      return HAL_OK;
 80066ae:	2300      	movs	r3, #0
 80066b0:	e000      	b.n	80066b4 <HAL_SD_WriteBlocks_DMA+0x144>
    }
#endif
  }
  else
  {
    return HAL_BUSY;
 80066b2:	2302      	movs	r3, #2
  }
}
 80066b4:	4618      	mov	r0, r3
 80066b6:	3730      	adds	r7, #48	; 0x30
 80066b8:	46bd      	mov	sp, r7
 80066ba:	bd80      	pop	{r7, pc}
 80066bc:	1fe00fff 	.word	0x1fe00fff

080066c0 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b084      	sub	sp, #16
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066cc:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d008      	beq.n	80066ee <HAL_SD_IRQHandler+0x2e>
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	f003 0308 	and.w	r3, r3, #8
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d003      	beq.n	80066ee <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 80066e6:	6878      	ldr	r0, [r7, #4]
 80066e8:	f001 f98e 	bl	8007a08 <SD_Read_IT>
 80066ec:	e199      	b.n	8006a22 <HAL_SD_IRQHandler+0x362>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	f000 80ae 	beq.w	800685a <HAL_SD_IRQHandler+0x19a>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006706:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT |\
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800670e:	687a      	ldr	r2, [r7, #4]
 8006710:	6812      	ldr	r2, [r2, #0]
 8006712:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 8006716:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800671a:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800672a:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	68da      	ldr	r2, [r3, #12]
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800673a:	60da      	str	r2, [r3, #12]
#else
    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    if((context & SD_CONTEXT_IT) != 0U)
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	f003 0308 	and.w	r3, r3, #8
 8006742:	2b00      	cmp	r3, #0
 8006744:	d038      	beq.n	80067b8 <HAL_SD_IRQHandler+0xf8>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	f003 0302 	and.w	r3, r3, #2
 800674c:	2b00      	cmp	r3, #0
 800674e:	d104      	bne.n	800675a <HAL_SD_IRQHandler+0x9a>
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	f003 0320 	and.w	r3, r3, #32
 8006756:	2b00      	cmp	r3, #0
 8006758:	d011      	beq.n	800677e <HAL_SD_IRQHandler+0xbe>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	4618      	mov	r0, r3
 8006760:	f001 fe8a 	bl	8008478 <SDMMC_CmdStopTransfer>
 8006764:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8006766:	68bb      	ldr	r3, [r7, #8]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d008      	beq.n	800677e <HAL_SD_IRQHandler+0xbe>
        {
          hsd->ErrorCode |= errorstate;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006770:	68bb      	ldr	r3, [r7, #8]
 8006772:	431a      	orrs	r2, r3
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8006778:	6878      	ldr	r0, [r7, #4]
 800677a:	f000 f957 	bl	8006a2c <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	4a90      	ldr	r2, [pc, #576]	; (80069c4 <HAL_SD_IRQHandler+0x304>)
 8006784:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2201      	movs	r2, #1
 800678a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	2200      	movs	r2, #0
 8006792:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	f003 0301 	and.w	r3, r3, #1
 800679a:	2b00      	cmp	r3, #0
 800679c:	d104      	bne.n	80067a8 <HAL_SD_IRQHandler+0xe8>
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	f003 0302 	and.w	r3, r3, #2
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d003      	beq.n	80067b0 <HAL_SD_IRQHandler+0xf0>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 80067a8:	6878      	ldr	r0, [r7, #4]
 80067aa:	f002 fb51 	bl	8008e50 <HAL_SD_RxCpltCallback>
 80067ae:	e138      	b.n	8006a22 <HAL_SD_IRQHandler+0x362>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 80067b0:	6878      	ldr	r0, [r7, #4]
 80067b2:	f002 fb43 	bl	8008e3c <HAL_SD_TxCpltCallback>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else
  {
    /* Nothing to do */
  }
}
 80067b6:	e134      	b.n	8006a22 <HAL_SD_IRQHandler+0x362>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067be:	2b00      	cmp	r3, #0
 80067c0:	f000 812f 	beq.w	8006a22 <HAL_SD_IRQHandler+0x362>
      hsd->Instance->DLEN = 0;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	2200      	movs	r2, #0
 80067ca:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	2200      	movs	r2, #0
 80067d2:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	2200      	movs	r2, #0
 80067da:	651a      	str	r2, [r3, #80]	; 0x50
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	f003 0302 	and.w	r3, r3, #2
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d104      	bne.n	80067f0 <HAL_SD_IRQHandler+0x130>
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	f003 0320 	and.w	r3, r3, #32
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d011      	beq.n	8006814 <HAL_SD_IRQHandler+0x154>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	4618      	mov	r0, r3
 80067f6:	f001 fe3f 	bl	8008478 <SDMMC_CmdStopTransfer>
 80067fa:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80067fc:	68bb      	ldr	r3, [r7, #8]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d008      	beq.n	8006814 <HAL_SD_IRQHandler+0x154>
          hsd->ErrorCode |= errorstate;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006806:	68bb      	ldr	r3, [r7, #8]
 8006808:	431a      	orrs	r2, r3
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800680e:	6878      	ldr	r0, [r7, #4]
 8006810:	f000 f90c 	bl	8006a2c <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2201      	movs	r2, #1
 8006818:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2200      	movs	r2, #0
 8006820:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	f003 0310 	and.w	r3, r3, #16
 8006828:	2b00      	cmp	r3, #0
 800682a:	d104      	bne.n	8006836 <HAL_SD_IRQHandler+0x176>
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	f003 0320 	and.w	r3, r3, #32
 8006832:	2b00      	cmp	r3, #0
 8006834:	d002      	beq.n	800683c <HAL_SD_IRQHandler+0x17c>
        HAL_SD_TxCpltCallback(hsd);
 8006836:	6878      	ldr	r0, [r7, #4]
 8006838:	f002 fb00 	bl	8008e3c <HAL_SD_TxCpltCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	f003 0301 	and.w	r3, r3, #1
 8006842:	2b00      	cmp	r3, #0
 8006844:	d105      	bne.n	8006852 <HAL_SD_IRQHandler+0x192>
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	f003 0302 	and.w	r3, r3, #2
 800684c:	2b00      	cmp	r3, #0
 800684e:	f000 80e8 	beq.w	8006a22 <HAL_SD_IRQHandler+0x362>
        HAL_SD_RxCpltCallback(hsd);
 8006852:	6878      	ldr	r0, [r7, #4]
 8006854:	f002 fafc 	bl	8008e50 <HAL_SD_RxCpltCallback>
}
 8006858:	e0e3      	b.n	8006a22 <HAL_SD_IRQHandler+0x362>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006860:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006864:	2b00      	cmp	r3, #0
 8006866:	d008      	beq.n	800687a <HAL_SD_IRQHandler+0x1ba>
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	f003 0308 	and.w	r3, r3, #8
 800686e:	2b00      	cmp	r3, #0
 8006870:	d003      	beq.n	800687a <HAL_SD_IRQHandler+0x1ba>
    SD_Write_IT(hsd);
 8006872:	6878      	ldr	r0, [r7, #4]
 8006874:	f001 f919 	bl	8007aaa <SD_Write_IT>
 8006878:	e0d3      	b.n	8006a22 <HAL_SD_IRQHandler+0x362>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006880:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8006884:	2b00      	cmp	r3, #0
 8006886:	f000 809f 	beq.w	80069c8 <HAL_SD_IRQHandler+0x308>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006890:	f003 0302 	and.w	r3, r3, #2
 8006894:	2b00      	cmp	r3, #0
 8006896:	d005      	beq.n	80068a4 <HAL_SD_IRQHandler+0x1e4>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800689c:	f043 0202 	orr.w	r2, r3, #2
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068aa:	f003 0308 	and.w	r3, r3, #8
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d005      	beq.n	80068be <HAL_SD_IRQHandler+0x1fe>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068b6:	f043 0208 	orr.w	r2, r3, #8
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068c4:	f003 0320 	and.w	r3, r3, #32
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d005      	beq.n	80068d8 <HAL_SD_IRQHandler+0x218>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068d0:	f043 0220 	orr.w	r2, r3, #32
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068de:	f003 0310 	and.w	r3, r3, #16
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d005      	beq.n	80068f2 <HAL_SD_IRQHandler+0x232>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068ea:	f043 0210 	orr.w	r2, r3, #16
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	4a33      	ldr	r2, [pc, #204]	; (80069c4 <HAL_SD_IRQHandler+0x304>)
 80068f8:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8006908:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	68da      	ldr	r2, [r3, #12]
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006918:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006928:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	68da      	ldr	r2, [r3, #12]
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006938:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	4618      	mov	r0, r3
 8006940:	f001 fd9a 	bl	8008478 <SDMMC_CmdStopTransfer>
 8006944:	4602      	mov	r2, r0
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800694a:	431a      	orrs	r2, r3
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	68da      	ldr	r2, [r3, #12]
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800695e:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006968:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	f003 0308 	and.w	r3, r3, #8
 8006970:	2b00      	cmp	r3, #0
 8006972:	d00a      	beq.n	800698a <HAL_SD_IRQHandler+0x2ca>
      hsd->State = HAL_SD_STATE_READY;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2201      	movs	r2, #1
 8006978:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2200      	movs	r2, #0
 8006980:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8006982:	6878      	ldr	r0, [r7, #4]
 8006984:	f000 f852 	bl	8006a2c <HAL_SD_ErrorCallback>
}
 8006988:	e04b      	b.n	8006a22 <HAL_SD_IRQHandler+0x362>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006990:	2b00      	cmp	r3, #0
 8006992:	d046      	beq.n	8006a22 <HAL_SD_IRQHandler+0x362>
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006998:	2b00      	cmp	r3, #0
 800699a:	d042      	beq.n	8006a22 <HAL_SD_IRQHandler+0x362>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80069aa:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	2200      	movs	r2, #0
 80069b2:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2201      	movs	r2, #1
 80069b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_ErrorCallback(hsd);
 80069bc:	6878      	ldr	r0, [r7, #4]
 80069be:	f000 f835 	bl	8006a2c <HAL_SD_ErrorCallback>
}
 80069c2:	e02e      	b.n	8006a22 <HAL_SD_IRQHandler+0x362>
 80069c4:	18000f3a 	.word	0x18000f3a
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d025      	beq.n	8006a22 <HAL_SD_IRQHandler+0x362>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069de:	639a      	str	r2, [r3, #56]	; 0x38
    if(READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069e6:	f003 0304 	and.w	r3, r3, #4
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d10c      	bne.n	8006a08 <HAL_SD_IRQHandler+0x348>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	f003 0320 	and.w	r3, r3, #32
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d003      	beq.n	8006a00 <HAL_SD_IRQHandler+0x340>
        HAL_SDEx_Write_DMADoubleBuffer1CpltCallback(hsd);
 80069f8:	6878      	ldr	r0, [r7, #4]
 80069fa:	f001 f8d4 	bl	8007ba6 <HAL_SDEx_Write_DMADoubleBuffer1CpltCallback>
}
 80069fe:	e010      	b.n	8006a22 <HAL_SD_IRQHandler+0x362>
        HAL_SDEx_Read_DMADoubleBuffer1CpltCallback(hsd);
 8006a00:	6878      	ldr	r0, [r7, #4]
 8006a02:	f001 f8bc 	bl	8007b7e <HAL_SDEx_Read_DMADoubleBuffer1CpltCallback>
}
 8006a06:	e00c      	b.n	8006a22 <HAL_SD_IRQHandler+0x362>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	f003 0320 	and.w	r3, r3, #32
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d003      	beq.n	8006a1a <HAL_SD_IRQHandler+0x35a>
        HAL_SDEx_Write_DMADoubleBuffer0CpltCallback(hsd);
 8006a12:	6878      	ldr	r0, [r7, #4]
 8006a14:	f001 f8bd 	bl	8007b92 <HAL_SDEx_Write_DMADoubleBuffer0CpltCallback>
}
 8006a18:	e003      	b.n	8006a22 <HAL_SD_IRQHandler+0x362>
        HAL_SDEx_Read_DMADoubleBuffer0CpltCallback(hsd);
 8006a1a:	6878      	ldr	r0, [r7, #4]
 8006a1c:	f001 f8a5 	bl	8007b6a <HAL_SDEx_Read_DMADoubleBuffer0CpltCallback>
}
 8006a20:	e7ff      	b.n	8006a22 <HAL_SD_IRQHandler+0x362>
 8006a22:	bf00      	nop
 8006a24:	3710      	adds	r7, #16
 8006a26:	46bd      	mov	sp, r7
 8006a28:	bd80      	pop	{r7, pc}
 8006a2a:	bf00      	nop

08006a2c <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8006a2c:	b480      	push	{r7}
 8006a2e:	b083      	sub	sp, #12
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8006a34:	bf00      	nop
 8006a36:	370c      	adds	r7, #12
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3e:	4770      	bx	lr

08006a40 <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8006a40:	b480      	push	{r7}
 8006a42:	b083      	sub	sp, #12
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
 8006a48:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a4e:	0f9b      	lsrs	r3, r3, #30
 8006a50:	b2da      	uxtb	r2, r3
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a5a:	0e9b      	lsrs	r3, r3, #26
 8006a5c:	b2db      	uxtb	r3, r3
 8006a5e:	f003 030f 	and.w	r3, r3, #15
 8006a62:	b2da      	uxtb	r2, r3
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a6c:	0e1b      	lsrs	r3, r3, #24
 8006a6e:	b2db      	uxtb	r3, r3
 8006a70:	f003 0303 	and.w	r3, r3, #3
 8006a74:	b2da      	uxtb	r2, r3
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a7e:	0c1b      	lsrs	r3, r3, #16
 8006a80:	b2da      	uxtb	r2, r3
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a8a:	0a1b      	lsrs	r3, r3, #8
 8006a8c:	b2da      	uxtb	r2, r3
 8006a8e:	683b      	ldr	r3, [r7, #0]
 8006a90:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a96:	b2da      	uxtb	r2, r3
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006aa0:	0d1b      	lsrs	r3, r3, #20
 8006aa2:	b29a      	uxth	r2, r3
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006aac:	0c1b      	lsrs	r3, r3, #16
 8006aae:	b2db      	uxtb	r3, r3
 8006ab0:	f003 030f 	and.w	r3, r3, #15
 8006ab4:	b2da      	uxtb	r2, r3
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006abe:	0bdb      	lsrs	r3, r3, #15
 8006ac0:	b2db      	uxtb	r3, r3
 8006ac2:	f003 0301 	and.w	r3, r3, #1
 8006ac6:	b2da      	uxtb	r2, r3
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006ad0:	0b9b      	lsrs	r3, r3, #14
 8006ad2:	b2db      	uxtb	r3, r3
 8006ad4:	f003 0301 	and.w	r3, r3, #1
 8006ad8:	b2da      	uxtb	r2, r3
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006ae2:	0b5b      	lsrs	r3, r3, #13
 8006ae4:	b2db      	uxtb	r3, r3
 8006ae6:	f003 0301 	and.w	r3, r3, #1
 8006aea:	b2da      	uxtb	r2, r3
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006af4:	0b1b      	lsrs	r3, r3, #12
 8006af6:	b2db      	uxtb	r3, r3
 8006af8:	f003 0301 	and.w	r3, r3, #1
 8006afc:	b2da      	uxtb	r2, r3
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	2200      	movs	r2, #0
 8006b06:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d163      	bne.n	8006bd8 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006b14:	009a      	lsls	r2, r3, #2
 8006b16:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006b1a:	4013      	ands	r3, r2
 8006b1c:	687a      	ldr	r2, [r7, #4]
 8006b1e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006b20:	0f92      	lsrs	r2, r2, #30
 8006b22:	431a      	orrs	r2, r3
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006b2c:	0edb      	lsrs	r3, r3, #27
 8006b2e:	b2db      	uxtb	r3, r3
 8006b30:	f003 0307 	and.w	r3, r3, #7
 8006b34:	b2da      	uxtb	r2, r3
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006b3e:	0e1b      	lsrs	r3, r3, #24
 8006b40:	b2db      	uxtb	r3, r3
 8006b42:	f003 0307 	and.w	r3, r3, #7
 8006b46:	b2da      	uxtb	r2, r3
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006b50:	0d5b      	lsrs	r3, r3, #21
 8006b52:	b2db      	uxtb	r3, r3
 8006b54:	f003 0307 	and.w	r3, r3, #7
 8006b58:	b2da      	uxtb	r2, r3
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006b62:	0c9b      	lsrs	r3, r3, #18
 8006b64:	b2db      	uxtb	r3, r3
 8006b66:	f003 0307 	and.w	r3, r3, #7
 8006b6a:	b2da      	uxtb	r2, r3
 8006b6c:	683b      	ldr	r3, [r7, #0]
 8006b6e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006b74:	0bdb      	lsrs	r3, r3, #15
 8006b76:	b2db      	uxtb	r3, r3
 8006b78:	f003 0307 	and.w	r3, r3, #7
 8006b7c:	b2da      	uxtb	r2, r3
 8006b7e:	683b      	ldr	r3, [r7, #0]
 8006b80:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8006b82:	683b      	ldr	r3, [r7, #0]
 8006b84:	691b      	ldr	r3, [r3, #16]
 8006b86:	1c5a      	adds	r2, r3, #1
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	7e1b      	ldrb	r3, [r3, #24]
 8006b90:	b2db      	uxtb	r3, r3
 8006b92:	f003 0307 	and.w	r3, r3, #7
 8006b96:	3302      	adds	r3, #2
 8006b98:	2201      	movs	r2, #1
 8006b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8006b9e:	687a      	ldr	r2, [r7, #4]
 8006ba0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8006ba2:	fb03 f202 	mul.w	r2, r3, r2
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8006baa:	683b      	ldr	r3, [r7, #0]
 8006bac:	7a1b      	ldrb	r3, [r3, #8]
 8006bae:	b2db      	uxtb	r3, r3
 8006bb0:	f003 030f 	and.w	r3, r3, #15
 8006bb4:	2201      	movs	r2, #1
 8006bb6:	409a      	lsls	r2, r3
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	651a      	str	r2, [r3, #80]	; 0x50

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006bc0:	687a      	ldr	r2, [r7, #4]
 8006bc2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8006bc4:	0a52      	lsrs	r2, r2, #9
 8006bc6:	fb03 f202 	mul.w	r2, r3, r2
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockSize = 512U;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006bd4:	659a      	str	r2, [r3, #88]	; 0x58
 8006bd6:	e031      	b.n	8006c3c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bdc:	2b01      	cmp	r3, #1
 8006bde:	d11d      	bne.n	8006c1c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006be4:	041b      	lsls	r3, r3, #16
 8006be6:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006bee:	0c1b      	lsrs	r3, r3, #16
 8006bf0:	431a      	orrs	r2, r3
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8006bf6:	683b      	ldr	r3, [r7, #0]
 8006bf8:	691b      	ldr	r3, [r3, #16]
 8006bfa:	3301      	adds	r3, #1
 8006bfc:	029a      	lsls	r2, r3, #10
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 512U;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006c10:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	659a      	str	r2, [r3, #88]	; 0x58
 8006c1a:	e00f      	b.n	8006c3c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	4a58      	ldr	r2, [pc, #352]	; (8006d84 <HAL_SD_GetCardCSD+0x344>)
 8006c22:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c28:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2201      	movs	r2, #1
 8006c34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006c38:	2301      	movs	r3, #1
 8006c3a:	e09d      	b.n	8006d78 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006c40:	0b9b      	lsrs	r3, r3, #14
 8006c42:	b2db      	uxtb	r3, r3
 8006c44:	f003 0301 	and.w	r3, r3, #1
 8006c48:	b2da      	uxtb	r2, r3
 8006c4a:	683b      	ldr	r3, [r7, #0]
 8006c4c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006c52:	09db      	lsrs	r3, r3, #7
 8006c54:	b2db      	uxtb	r3, r3
 8006c56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c5a:	b2da      	uxtb	r2, r3
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006c64:	b2db      	uxtb	r3, r3
 8006c66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c6a:	b2da      	uxtb	r2, r3
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c74:	0fdb      	lsrs	r3, r3, #31
 8006c76:	b2da      	uxtb	r2, r3
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c80:	0f5b      	lsrs	r3, r3, #29
 8006c82:	b2db      	uxtb	r3, r3
 8006c84:	f003 0303 	and.w	r3, r3, #3
 8006c88:	b2da      	uxtb	r2, r3
 8006c8a:	683b      	ldr	r3, [r7, #0]
 8006c8c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c92:	0e9b      	lsrs	r3, r3, #26
 8006c94:	b2db      	uxtb	r3, r3
 8006c96:	f003 0307 	and.w	r3, r3, #7
 8006c9a:	b2da      	uxtb	r2, r3
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ca4:	0d9b      	lsrs	r3, r3, #22
 8006ca6:	b2db      	uxtb	r3, r3
 8006ca8:	f003 030f 	and.w	r3, r3, #15
 8006cac:	b2da      	uxtb	r2, r3
 8006cae:	683b      	ldr	r3, [r7, #0]
 8006cb0:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006cb6:	0d5b      	lsrs	r3, r3, #21
 8006cb8:	b2db      	uxtb	r3, r3
 8006cba:	f003 0301 	and.w	r3, r3, #1
 8006cbe:	b2da      	uxtb	r2, r3
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	2200      	movs	r2, #0
 8006cca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006cd2:	0c1b      	lsrs	r3, r3, #16
 8006cd4:	b2db      	uxtb	r3, r3
 8006cd6:	f003 0301 	and.w	r3, r3, #1
 8006cda:	b2da      	uxtb	r2, r3
 8006cdc:	683b      	ldr	r3, [r7, #0]
 8006cde:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ce6:	0bdb      	lsrs	r3, r3, #15
 8006ce8:	b2db      	uxtb	r3, r3
 8006cea:	f003 0301 	and.w	r3, r3, #1
 8006cee:	b2da      	uxtb	r2, r3
 8006cf0:	683b      	ldr	r3, [r7, #0]
 8006cf2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006cfa:	0b9b      	lsrs	r3, r3, #14
 8006cfc:	b2db      	uxtb	r3, r3
 8006cfe:	f003 0301 	and.w	r3, r3, #1
 8006d02:	b2da      	uxtb	r2, r3
 8006d04:	683b      	ldr	r3, [r7, #0]
 8006d06:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d0e:	0b5b      	lsrs	r3, r3, #13
 8006d10:	b2db      	uxtb	r3, r3
 8006d12:	f003 0301 	and.w	r3, r3, #1
 8006d16:	b2da      	uxtb	r2, r3
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d22:	0b1b      	lsrs	r3, r3, #12
 8006d24:	b2db      	uxtb	r3, r3
 8006d26:	f003 0301 	and.w	r3, r3, #1
 8006d2a:	b2da      	uxtb	r2, r3
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d36:	0a9b      	lsrs	r3, r3, #10
 8006d38:	b2db      	uxtb	r3, r3
 8006d3a:	f003 0303 	and.w	r3, r3, #3
 8006d3e:	b2da      	uxtb	r2, r3
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d4a:	0a1b      	lsrs	r3, r3, #8
 8006d4c:	b2db      	uxtb	r3, r3
 8006d4e:	f003 0303 	and.w	r3, r3, #3
 8006d52:	b2da      	uxtb	r2, r3
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d5e:	085b      	lsrs	r3, r3, #1
 8006d60:	b2db      	uxtb	r3, r3
 8006d62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d66:	b2da      	uxtb	r2, r3
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8006d6e:	683b      	ldr	r3, [r7, #0]
 8006d70:	2201      	movs	r2, #1
 8006d72:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8006d76:	2300      	movs	r3, #0
}
 8006d78:	4618      	mov	r0, r3
 8006d7a:	370c      	adds	r7, #12
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d82:	4770      	bx	lr
 8006d84:	1fe00fff 	.word	0x1fe00fff

08006d88 <HAL_SD_GetCardStatus>:
  * @param  pStatus Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b094      	sub	sp, #80	; 0x50
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
 8006d90:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8006d92:	2300      	movs	r3, #0
 8006d94:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  errorstate = SD_SendSDStatus(hsd, sd_status);
 8006d98:	f107 0308 	add.w	r3, r7, #8
 8006d9c:	4619      	mov	r1, r3
 8006d9e:	6878      	ldr	r0, [r7, #4]
 8006da0:	f000 fbd4 	bl	800754c <SD_SendSDStatus>
 8006da4:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 8006da6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d011      	beq.n	8006dd0 <HAL_SD_GetCardStatus+0x48>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	4a4f      	ldr	r2, [pc, #316]	; (8006ef0 <HAL_SD_GetCardStatus+0x168>)
 8006db2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006db8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006dba:	431a      	orrs	r2, r3
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2201      	movs	r2, #1
 8006dc4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8006dc8:	2301      	movs	r3, #1
 8006dca:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8006dce:	e070      	b.n	8006eb2 <HAL_SD_GetCardStatus+0x12a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8006dd0:	68bb      	ldr	r3, [r7, #8]
 8006dd2:	099b      	lsrs	r3, r3, #6
 8006dd4:	b2db      	uxtb	r3, r3
 8006dd6:	f003 0303 	and.w	r3, r3, #3
 8006dda:	b2da      	uxtb	r2, r3
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8006de0:	68bb      	ldr	r3, [r7, #8]
 8006de2:	095b      	lsrs	r3, r3, #5
 8006de4:	b2db      	uxtb	r3, r3
 8006de6:	f003 0301 	and.w	r3, r3, #1
 8006dea:	b2da      	uxtb	r2, r3
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8006df0:	68bb      	ldr	r3, [r7, #8]
 8006df2:	0a1b      	lsrs	r3, r3, #8
 8006df4:	b29b      	uxth	r3, r3
 8006df6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006dfa:	b29a      	uxth	r2, r3
 8006dfc:	68bb      	ldr	r3, [r7, #8]
 8006dfe:	0e1b      	lsrs	r3, r3, #24
 8006e00:	b29b      	uxth	r3, r3
 8006e02:	4313      	orrs	r3, r2
 8006e04:	b29a      	uxth	r2, r3
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	061a      	lsls	r2, r3, #24
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	021b      	lsls	r3, r3, #8
 8006e12:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006e16:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	0a1b      	lsrs	r3, r3, #8
 8006e1c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8006e20:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	0e1b      	lsrs	r3, r3, #24
 8006e26:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8006e2c:	693b      	ldr	r3, [r7, #16]
 8006e2e:	b2da      	uxtb	r2, r3
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8006e34:	693b      	ldr	r3, [r7, #16]
 8006e36:	0a1b      	lsrs	r3, r3, #8
 8006e38:	b2da      	uxtb	r2, r3
 8006e3a:	683b      	ldr	r3, [r7, #0]
 8006e3c:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8006e3e:	693b      	ldr	r3, [r7, #16]
 8006e40:	0d1b      	lsrs	r3, r3, #20
 8006e42:	b2db      	uxtb	r3, r3
 8006e44:	f003 030f 	and.w	r3, r3, #15
 8006e48:	b2da      	uxtb	r2, r3
 8006e4a:	683b      	ldr	r3, [r7, #0]
 8006e4c:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8006e4e:	693b      	ldr	r3, [r7, #16]
 8006e50:	0c1b      	lsrs	r3, r3, #16
 8006e52:	b29b      	uxth	r3, r3
 8006e54:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006e58:	b29a      	uxth	r2, r3
 8006e5a:	697b      	ldr	r3, [r7, #20]
 8006e5c:	b29b      	uxth	r3, r3
 8006e5e:	b2db      	uxtb	r3, r3
 8006e60:	b29b      	uxth	r3, r3
 8006e62:	4313      	orrs	r3, r2
 8006e64:	b29a      	uxth	r2, r3
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8006e6a:	697b      	ldr	r3, [r7, #20]
 8006e6c:	0a9b      	lsrs	r3, r3, #10
 8006e6e:	b2db      	uxtb	r3, r3
 8006e70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006e74:	b2da      	uxtb	r2, r3
 8006e76:	683b      	ldr	r3, [r7, #0]
 8006e78:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8006e7a:	697b      	ldr	r3, [r7, #20]
 8006e7c:	0a1b      	lsrs	r3, r3, #8
 8006e7e:	b2db      	uxtb	r3, r3
 8006e80:	f003 0303 	and.w	r3, r3, #3
 8006e84:	b2da      	uxtb	r2, r3
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	73da      	strb	r2, [r3, #15]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8006e8a:	697b      	ldr	r3, [r7, #20]
 8006e8c:	091b      	lsrs	r3, r3, #4
 8006e8e:	b2db      	uxtb	r3, r3
 8006e90:	f003 030f 	and.w	r3, r3, #15
 8006e94:	b2da      	uxtb	r2, r3
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8006e9a:	697b      	ldr	r3, [r7, #20]
 8006e9c:	b2db      	uxtb	r3, r3
 8006e9e:	f003 030f 	and.w	r3, r3, #15
 8006ea2:	b2da      	uxtb	r2, r3
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8006ea8:	69bb      	ldr	r3, [r7, #24]
 8006eaa:	0e1b      	lsrs	r3, r3, #24
 8006eac:	b2da      	uxtb	r2, r3
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	749a      	strb	r2, [r3, #18]
#endif
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006eba:	4618      	mov	r0, r3
 8006ebc:	f001 fa2c 	bl	8008318 <SDMMC_CmdBlockLength>
 8006ec0:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 8006ec2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d00d      	beq.n	8006ee4 <HAL_SD_GetCardStatus+0x15c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	4a08      	ldr	r2, [pc, #32]	; (8006ef0 <HAL_SD_GetCardStatus+0x168>)
 8006ece:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006ed4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	2201      	movs	r2, #1
 8006eda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8006ede:	2301      	movs	r3, #1
 8006ee0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }

  return status;
 8006ee4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8006ee8:	4618      	mov	r0, r3
 8006eea:	3750      	adds	r7, #80	; 0x50
 8006eec:	46bd      	mov	sp, r7
 8006eee:	bd80      	pop	{r7, pc}
 8006ef0:	1fe00fff 	.word	0x1fe00fff

08006ef4 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8006ef4:	b480      	push	{r7}
 8006ef6:	b083      	sub	sp, #12
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
 8006efc:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006f02:	683b      	ldr	r3, [r7, #0]
 8006f04:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006f0a:	683b      	ldr	r3, [r7, #0]
 8006f0c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006f2a:	683b      	ldr	r3, [r7, #0]
 8006f2c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006f3a:	683b      	ldr	r3, [r7, #0]
 8006f3c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8006f3e:	2300      	movs	r3, #0
}
 8006f40:	4618      	mov	r0, r3
 8006f42:	370c      	adds	r7, #12
 8006f44:	46bd      	mov	sp, r7
 8006f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4a:	4770      	bx	lr

08006f4c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8006f4c:	b5b0      	push	{r4, r5, r7, lr}
 8006f4e:	b090      	sub	sp, #64	; 0x40
 8006f50:	af04      	add	r7, sp, #16
 8006f52:	6078      	str	r0, [r7, #4]
 8006f54:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 8006f56:	2300      	movs	r3, #0
 8006f58:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2203      	movs	r2, #3
 8006f60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f68:	2b03      	cmp	r3, #3
 8006f6a:	d02e      	beq.n	8006fca <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f72:	d106      	bne.n	8006f82 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f78:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	639a      	str	r2, [r3, #56]	; 0x38
 8006f80:	e029      	b.n	8006fd6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8006f82:	683b      	ldr	r3, [r7, #0]
 8006f84:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006f88:	d10a      	bne.n	8006fa0 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8006f8a:	6878      	ldr	r0, [r7, #4]
 8006f8c:	f000 fbd6 	bl	800773c <SD_WideBus_Enable>
 8006f90:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f98:	431a      	orrs	r2, r3
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	639a      	str	r2, [r3, #56]	; 0x38
 8006f9e:	e01a      	b.n	8006fd6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d10a      	bne.n	8006fbc <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8006fa6:	6878      	ldr	r0, [r7, #4]
 8006fa8:	f000 fc13 	bl	80077d2 <SD_WideBus_Disable>
 8006fac:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006fb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fb4:	431a      	orrs	r2, r3
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	639a      	str	r2, [r3, #56]	; 0x38
 8006fba:	e00c      	b.n	8006fd6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fc0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	639a      	str	r2, [r3, #56]	; 0x38
 8006fc8:	e005      	b.n	8006fd6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fce:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d007      	beq.n	8006fee <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	4a60      	ldr	r2, [pc, #384]	; (8007164 <HAL_SD_ConfigWideBusOperation+0x218>)
 8006fe4:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8006fe6:	2301      	movs	r3, #1
 8006fe8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8006fec:	e097      	b.n	800711e <HAL_SD_ConfigWideBusOperation+0x1d2>
  }
  else
  {
    sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 8006fee:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8006ff2:	f7fd fed3 	bl	8004d9c <HAL_RCCEx_GetPeriphCLKFreq>
 8006ff6:	6278      	str	r0, [r7, #36]	; 0x24
    if (sdmmc_clk != 0U)
 8006ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	f000 8086 	beq.w	800710c <HAL_SD_ConfigWideBusOperation+0x1c0>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	685b      	ldr	r3, [r3, #4]
 8007004:	60fb      	str	r3, [r7, #12]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
      Init.ClockBypass         = hsd->Init.ClockBypass;
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	689b      	ldr	r3, [r3, #8]
 800700a:	613b      	str	r3, [r7, #16]
      Init.BusWide             = WideMode;
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	617b      	str	r3, [r7, #20]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	691b      	ldr	r3, [r3, #16]
 8007014:	61bb      	str	r3, [r7, #24]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	695a      	ldr	r2, [r3, #20]
 800701a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800701c:	4952      	ldr	r1, [pc, #328]	; (8007168 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800701e:	fba1 1303 	umull	r1, r3, r1, r3
 8007022:	0e1b      	lsrs	r3, r3, #24
 8007024:	429a      	cmp	r2, r3
 8007026:	d303      	bcc.n	8007030 <HAL_SD_ConfigWideBusOperation+0xe4>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	695b      	ldr	r3, [r3, #20]
 800702c:	61fb      	str	r3, [r7, #28]
 800702e:	e05a      	b.n	80070e6 <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007034:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007038:	d103      	bne.n	8007042 <HAL_SD_ConfigWideBusOperation+0xf6>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	695b      	ldr	r3, [r3, #20]
 800703e:	61fb      	str	r3, [r7, #28]
 8007040:	e051      	b.n	80070e6 <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007046:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800704a:	d126      	bne.n	800709a <HAL_SD_ConfigWideBusOperation+0x14e>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	695b      	ldr	r3, [r3, #20]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d10e      	bne.n	8007072 <HAL_SD_ConfigWideBusOperation+0x126>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 8007054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007056:	4a45      	ldr	r2, [pc, #276]	; (800716c <HAL_SD_ConfigWideBusOperation+0x220>)
 8007058:	4293      	cmp	r3, r2
 800705a:	d906      	bls.n	800706a <HAL_SD_ConfigWideBusOperation+0x11e>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800705c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800705e:	4a42      	ldr	r2, [pc, #264]	; (8007168 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8007060:	fba2 2303 	umull	r2, r3, r2, r3
 8007064:	0e5b      	lsrs	r3, r3, #25
 8007066:	61fb      	str	r3, [r7, #28]
 8007068:	e03d      	b.n	80070e6 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	695b      	ldr	r3, [r3, #20]
 800706e:	61fb      	str	r3, [r7, #28]
 8007070:	e039      	b.n	80070e6 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	695b      	ldr	r3, [r3, #20]
 8007076:	005b      	lsls	r3, r3, #1
 8007078:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800707a:	fbb2 f3f3 	udiv	r3, r2, r3
 800707e:	4a3b      	ldr	r2, [pc, #236]	; (800716c <HAL_SD_ConfigWideBusOperation+0x220>)
 8007080:	4293      	cmp	r3, r2
 8007082:	d906      	bls.n	8007092 <HAL_SD_ConfigWideBusOperation+0x146>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8007084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007086:	4a38      	ldr	r2, [pc, #224]	; (8007168 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8007088:	fba2 2303 	umull	r2, r3, r2, r3
 800708c:	0e5b      	lsrs	r3, r3, #25
 800708e:	61fb      	str	r3, [r7, #28]
 8007090:	e029      	b.n	80070e6 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	695b      	ldr	r3, [r3, #20]
 8007096:	61fb      	str	r3, [r7, #28]
 8007098:	e025      	b.n	80070e6 <HAL_SD_ConfigWideBusOperation+0x19a>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	695b      	ldr	r3, [r3, #20]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d10e      	bne.n	80070c0 <HAL_SD_ConfigWideBusOperation+0x174>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 80070a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070a4:	4a32      	ldr	r2, [pc, #200]	; (8007170 <HAL_SD_ConfigWideBusOperation+0x224>)
 80070a6:	4293      	cmp	r3, r2
 80070a8:	d906      	bls.n	80070b8 <HAL_SD_ConfigWideBusOperation+0x16c>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 80070aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ac:	4a2e      	ldr	r2, [pc, #184]	; (8007168 <HAL_SD_ConfigWideBusOperation+0x21c>)
 80070ae:	fba2 2303 	umull	r2, r3, r2, r3
 80070b2:	0e1b      	lsrs	r3, r3, #24
 80070b4:	61fb      	str	r3, [r7, #28]
 80070b6:	e016      	b.n	80070e6 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	695b      	ldr	r3, [r3, #20]
 80070bc:	61fb      	str	r3, [r7, #28]
 80070be:	e012      	b.n	80070e6 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	695b      	ldr	r3, [r3, #20]
 80070c4:	005b      	lsls	r3, r3, #1
 80070c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80070c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80070cc:	4a28      	ldr	r2, [pc, #160]	; (8007170 <HAL_SD_ConfigWideBusOperation+0x224>)
 80070ce:	4293      	cmp	r3, r2
 80070d0:	d906      	bls.n	80070e0 <HAL_SD_ConfigWideBusOperation+0x194>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 80070d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070d4:	4a24      	ldr	r2, [pc, #144]	; (8007168 <HAL_SD_ConfigWideBusOperation+0x21c>)
 80070d6:	fba2 2303 	umull	r2, r3, r2, r3
 80070da:	0e1b      	lsrs	r3, r3, #24
 80070dc:	61fb      	str	r3, [r7, #28]
 80070de:	e002      	b.n	80070e6 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	695b      	ldr	r3, [r3, #20]
 80070e4:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      Init.Transceiver = hsd->Init.Transceiver;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	699b      	ldr	r3, [r3, #24]
 80070ea:	623b      	str	r3, [r7, #32]
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
      }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

      (void)SDMMC_Init(hsd->Instance, Init);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681d      	ldr	r5, [r3, #0]
 80070f0:	466c      	mov	r4, sp
 80070f2:	f107 0318 	add.w	r3, r7, #24
 80070f6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80070fa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80070fe:	f107 030c 	add.w	r3, r7, #12
 8007102:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007104:	4628      	mov	r0, r5
 8007106:	f001 f829 	bl	800815c <SDMMC_Init>
 800710a:	e008      	b.n	800711e <HAL_SD_ConfigWideBusOperation+0x1d2>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007110:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	639a      	str	r2, [r3, #56]	; 0x38
      status = HAL_ERROR;
 8007118:	2301      	movs	r3, #1
 800711a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007126:	4618      	mov	r0, r3
 8007128:	f001 f8f6 	bl	8008318 <SDMMC_CmdBlockLength>
 800712c:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800712e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007130:	2b00      	cmp	r3, #0
 8007132:	d00c      	beq.n	800714e <HAL_SD_ConfigWideBusOperation+0x202>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	4a0a      	ldr	r2, [pc, #40]	; (8007164 <HAL_SD_ConfigWideBusOperation+0x218>)
 800713a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007142:	431a      	orrs	r2, r3
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8007148:	2301      	movs	r3, #1
 800714a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	2201      	movs	r2, #1
 8007152:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8007156:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800715a:	4618      	mov	r0, r3
 800715c:	3730      	adds	r7, #48	; 0x30
 800715e:	46bd      	mov	sp, r7
 8007160:	bdb0      	pop	{r4, r5, r7, pc}
 8007162:	bf00      	nop
 8007164:	1fe00fff 	.word	0x1fe00fff
 8007168:	55e63b89 	.word	0x55e63b89
 800716c:	02faf080 	.word	0x02faf080
 8007170:	017d7840 	.word	0x017d7840

08007174 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8007174:	b580      	push	{r7, lr}
 8007176:	b086      	sub	sp, #24
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800717c:	2300      	movs	r3, #0
 800717e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8007180:	f107 030c 	add.w	r3, r7, #12
 8007184:	4619      	mov	r1, r3
 8007186:	6878      	ldr	r0, [r7, #4]
 8007188:	f000 fab0 	bl	80076ec <SD_SendStatus>
 800718c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800718e:	697b      	ldr	r3, [r7, #20]
 8007190:	2b00      	cmp	r3, #0
 8007192:	d005      	beq.n	80071a0 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007198:	697b      	ldr	r3, [r7, #20]
 800719a:	431a      	orrs	r2, r3
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	0a5b      	lsrs	r3, r3, #9
 80071a4:	f003 030f 	and.w	r3, r3, #15
 80071a8:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80071aa:	693b      	ldr	r3, [r7, #16]
}
 80071ac:	4618      	mov	r0, r3
 80071ae:	3718      	adds	r7, #24
 80071b0:	46bd      	mov	sp, r7
 80071b2:	bd80      	pop	{r7, pc}

080071b4 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80071b4:	b5b0      	push	{r4, r5, r7, lr}
 80071b6:	b090      	sub	sp, #64	; 0x40
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80071bc:	2301      	movs	r3, #1
 80071be:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	4618      	mov	r0, r3
 80071c6:	f001 f823 	bl	8008210 <SDMMC_GetPowerState>
 80071ca:	4603      	mov	r3, r0
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d102      	bne.n	80071d6 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80071d0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80071d4:	e0a9      	b.n	800732a <SD_InitCard+0x176>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071da:	2b03      	cmp	r3, #3
 80071dc:	d02e      	beq.n	800723c <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	4618      	mov	r0, r3
 80071e4:	f001 fa68 	bl	80086b8 <SDMMC_CmdSendCID>
 80071e8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80071ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d001      	beq.n	80071f4 <SD_InitCard+0x40>
    {
      return errorstate;
 80071f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071f2:	e09a      	b.n	800732a <SD_InitCard+0x176>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	2100      	movs	r1, #0
 80071fa:	4618      	mov	r0, r3
 80071fc:	f001 f84d 	bl	800829a <SDMMC_GetResponse>
 8007200:	4602      	mov	r2, r0
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	2104      	movs	r1, #4
 800720c:	4618      	mov	r0, r3
 800720e:	f001 f844 	bl	800829a <SDMMC_GetResponse>
 8007212:	4602      	mov	r2, r0
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	2108      	movs	r1, #8
 800721e:	4618      	mov	r0, r3
 8007220:	f001 f83b 	bl	800829a <SDMMC_GetResponse>
 8007224:	4602      	mov	r2, r0
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	210c      	movs	r1, #12
 8007230:	4618      	mov	r0, r3
 8007232:	f001 f832 	bl	800829a <SDMMC_GetResponse>
 8007236:	4602      	mov	r2, r0
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	67da      	str	r2, [r3, #124]	; 0x7c
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007240:	2b03      	cmp	r3, #3
 8007242:	d00d      	beq.n	8007260 <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	f107 020e 	add.w	r2, r7, #14
 800724c:	4611      	mov	r1, r2
 800724e:	4618      	mov	r0, r3
 8007250:	f001 fa71 	bl	8008736 <SDMMC_CmdSetRelAdd>
 8007254:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007256:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007258:	2b00      	cmp	r3, #0
 800725a:	d001      	beq.n	8007260 <SD_InitCard+0xac>
    {
      return errorstate;
 800725c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800725e:	e064      	b.n	800732a <SD_InitCard+0x176>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007264:	2b03      	cmp	r3, #3
 8007266:	d036      	beq.n	80072d6 <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8007268:	89fb      	ldrh	r3, [r7, #14]
 800726a:	461a      	mov	r2, r3
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	649a      	str	r2, [r3, #72]	; 0x48

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681a      	ldr	r2, [r3, #0]
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007278:	041b      	lsls	r3, r3, #16
 800727a:	4619      	mov	r1, r3
 800727c:	4610      	mov	r0, r2
 800727e:	f001 fa3a 	bl	80086f6 <SDMMC_CmdSendCSD>
 8007282:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007284:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007286:	2b00      	cmp	r3, #0
 8007288:	d001      	beq.n	800728e <SD_InitCard+0xda>
    {
      return errorstate;
 800728a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800728c:	e04d      	b.n	800732a <SD_InitCard+0x176>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	2100      	movs	r1, #0
 8007294:	4618      	mov	r0, r3
 8007296:	f001 f800 	bl	800829a <SDMMC_GetResponse>
 800729a:	4602      	mov	r2, r0
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	2104      	movs	r1, #4
 80072a6:	4618      	mov	r0, r3
 80072a8:	f000 fff7 	bl	800829a <SDMMC_GetResponse>
 80072ac:	4602      	mov	r2, r0
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	2108      	movs	r1, #8
 80072b8:	4618      	mov	r0, r3
 80072ba:	f000 ffee 	bl	800829a <SDMMC_GetResponse>
 80072be:	4602      	mov	r2, r0
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	210c      	movs	r1, #12
 80072ca:	4618      	mov	r0, r3
 80072cc:	f000 ffe5 	bl	800829a <SDMMC_GetResponse>
 80072d0:	4602      	mov	r2, r0
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	66da      	str	r2, [r3, #108]	; 0x6c
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	2104      	movs	r1, #4
 80072dc:	4618      	mov	r0, r3
 80072de:	f000 ffdc 	bl	800829a <SDMMC_GetResponse>
 80072e2:	4603      	mov	r3, r0
 80072e4:	0d1a      	lsrs	r2, r3, #20
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80072ea:	f107 0310 	add.w	r3, r7, #16
 80072ee:	4619      	mov	r1, r3
 80072f0:	6878      	ldr	r0, [r7, #4]
 80072f2:	f7ff fba5 	bl	8006a40 <HAL_SD_GetCardCSD>
 80072f6:	4603      	mov	r3, r0
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d002      	beq.n	8007302 <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80072fc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007300:	e013      	b.n	800732a <SD_InitCard+0x176>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	6819      	ldr	r1, [r3, #0]
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800730a:	041b      	lsls	r3, r3, #16
 800730c:	2200      	movs	r2, #0
 800730e:	461c      	mov	r4, r3
 8007310:	4615      	mov	r5, r2
 8007312:	4622      	mov	r2, r4
 8007314:	462b      	mov	r3, r5
 8007316:	4608      	mov	r0, r1
 8007318:	f001 f8e4 	bl	80084e4 <SDMMC_CmdSelDesel>
 800731c:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800731e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007320:	2b00      	cmp	r3, #0
 8007322:	d001      	beq.n	8007328 <SD_InitCard+0x174>
  {
    return errorstate;
 8007324:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007326:	e000      	b.n	800732a <SD_InitCard+0x176>
  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8007328:	2300      	movs	r3, #0
}
 800732a:	4618      	mov	r0, r3
 800732c:	3740      	adds	r7, #64	; 0x40
 800732e:	46bd      	mov	sp, r7
 8007330:	bdb0      	pop	{r4, r5, r7, pc}
	...

08007334 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8007334:	b580      	push	{r7, lr}
 8007336:	b088      	sub	sp, #32
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800733c:	2300      	movs	r3, #0
 800733e:	60fb      	str	r3, [r7, #12]
  uint32_t response = 0U, validvoltage = 0U;
 8007340:	2300      	movs	r3, #0
 8007342:	61fb      	str	r3, [r7, #28]
 8007344:	2300      	movs	r3, #0
 8007346:	61bb      	str	r3, [r7, #24]
  uint32_t errorstate;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t tickstart = HAL_GetTick();
 8007348:	f7f9 ff96 	bl	8001278 <HAL_GetTick>
 800734c:	6178      	str	r0, [r7, #20]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	4618      	mov	r0, r3
 8007354:	f001 f8ea 	bl	800852c <SDMMC_CmdGoIdleState>
 8007358:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 800735a:	693b      	ldr	r3, [r7, #16]
 800735c:	2b00      	cmp	r3, #0
 800735e:	d001      	beq.n	8007364 <SD_PowerON+0x30>
  {
    return errorstate;
 8007360:	693b      	ldr	r3, [r7, #16]
 8007362:	e0ed      	b.n	8007540 <SD_PowerON+0x20c>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	4618      	mov	r0, r3
 800736a:	f001 f8fd 	bl	8008568 <SDMMC_CmdOperCond>
 800736e:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007370:	693b      	ldr	r3, [r7, #16]
 8007372:	2b00      	cmp	r3, #0
 8007374:	d00d      	beq.n	8007392 <SD_PowerON+0x5e>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	2200      	movs	r2, #0
 800737a:	641a      	str	r2, [r3, #64]	; 0x40
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	4618      	mov	r0, r3
 8007382:	f001 f8d3 	bl	800852c <SDMMC_CmdGoIdleState>
 8007386:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007388:	693b      	ldr	r3, [r7, #16]
 800738a:	2b00      	cmp	r3, #0
 800738c:	d004      	beq.n	8007398 <SD_PowerON+0x64>
    {
      return errorstate;
 800738e:	693b      	ldr	r3, [r7, #16]
 8007390:	e0d6      	b.n	8007540 <SD_PowerON+0x20c>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	2201      	movs	r2, #1
 8007396:	641a      	str	r2, [r3, #64]	; 0x40
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800739c:	2b01      	cmp	r3, #1
 800739e:	d137      	bne.n	8007410 <SD_PowerON+0xdc>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	2100      	movs	r1, #0
 80073a6:	4618      	mov	r0, r3
 80073a8:	f001 f8fe 	bl	80085a8 <SDMMC_CmdAppCommand>
 80073ac:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 80073ae:	693b      	ldr	r3, [r7, #16]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d02d      	beq.n	8007410 <SD_PowerON+0xdc>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80073b4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80073b8:	e0c2      	b.n	8007540 <SD_PowerON+0x20c>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	2100      	movs	r1, #0
 80073c0:	4618      	mov	r0, r3
 80073c2:	f001 f8f1 	bl	80085a8 <SDMMC_CmdAppCommand>
 80073c6:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 80073c8:	693b      	ldr	r3, [r7, #16]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d001      	beq.n	80073d2 <SD_PowerON+0x9e>
    {
      return errorstate;
 80073ce:	693b      	ldr	r3, [r7, #16]
 80073d0:	e0b6      	b.n	8007540 <SD_PowerON+0x20c>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	495c      	ldr	r1, [pc, #368]	; (8007548 <SD_PowerON+0x214>)
 80073d8:	4618      	mov	r0, r3
 80073da:	f001 f908 	bl	80085ee <SDMMC_CmdAppOperCommand>
 80073de:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 80073e0:	693b      	ldr	r3, [r7, #16]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d002      	beq.n	80073ec <SD_PowerON+0xb8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80073e6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80073ea:	e0a9      	b.n	8007540 <SD_PowerON+0x20c>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	2100      	movs	r1, #0
 80073f2:	4618      	mov	r0, r3
 80073f4:	f000 ff51 	bl	800829a <SDMMC_GetResponse>
 80073f8:	61f8      	str	r0, [r7, #28]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80073fa:	69fb      	ldr	r3, [r7, #28]
 80073fc:	0fdb      	lsrs	r3, r3, #31
 80073fe:	2b01      	cmp	r3, #1
 8007400:	d101      	bne.n	8007406 <SD_PowerON+0xd2>
 8007402:	2301      	movs	r3, #1
 8007404:	e000      	b.n	8007408 <SD_PowerON+0xd4>
 8007406:	2300      	movs	r3, #0
 8007408:	61bb      	str	r3, [r7, #24]

    count++;
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	3301      	adds	r3, #1
 800740e:	60fb      	str	r3, [r7, #12]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8007416:	4293      	cmp	r3, r2
 8007418:	d802      	bhi.n	8007420 <SD_PowerON+0xec>
 800741a:	69bb      	ldr	r3, [r7, #24]
 800741c:	2b00      	cmp	r3, #0
 800741e:	d0cc      	beq.n	80073ba <SD_PowerON+0x86>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8007426:	4293      	cmp	r3, r2
 8007428:	d902      	bls.n	8007430 <SD_PowerON+0xfc>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800742a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800742e:	e087      	b.n	8007540 <SD_PowerON+0x20c>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8007430:	69fb      	ldr	r3, [r7, #28]
 8007432:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007436:	2b00      	cmp	r3, #0
 8007438:	d07e      	beq.n	8007538 <SD_PowerON+0x204>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	2201      	movs	r2, #1
 800743e:	63da      	str	r2, [r3, #60]	; 0x3c
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	699b      	ldr	r3, [r3, #24]
 8007444:	2b01      	cmp	r3, #1
 8007446:	d17a      	bne.n	800753e <SD_PowerON+0x20a>
    {
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 8007448:	69fb      	ldr	r3, [r7, #28]
 800744a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800744e:	2b00      	cmp	r3, #0
 8007450:	d075      	beq.n	800753e <SD_PowerON+0x20a>
      {
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007458:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Start switching procedue */
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	681a      	ldr	r2, [r3, #0]
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	f042 0208 	orr.w	r2, r2, #8
 8007468:	601a      	str	r2, [r3, #0]

        /* Send CMD11 to switch 1.8V mode */
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	4618      	mov	r0, r3
 8007470:	f001 f9c8 	bl	8008804 <SDMMC_CmdVoltageSwitch>
 8007474:	6138      	str	r0, [r7, #16]
        if(errorstate != HAL_SD_ERROR_NONE)
 8007476:	693b      	ldr	r3, [r7, #16]
 8007478:	2b00      	cmp	r3, #0
 800747a:	d00c      	beq.n	8007496 <SD_PowerON+0x162>
        {
          return errorstate;
 800747c:	693b      	ldr	r3, [r7, #16]
 800747e:	e05f      	b.n	8007540 <SD_PowerON+0x20c>
        }

        /* Check to CKSTOP */
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
        {
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007480:	f7f9 fefa 	bl	8001278 <HAL_GetTick>
 8007484:	4602      	mov	r2, r0
 8007486:	697b      	ldr	r3, [r7, #20]
 8007488:	1ad3      	subs	r3, r2, r3
 800748a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800748e:	d102      	bne.n	8007496 <SD_PowerON+0x162>
          {
            return HAL_SD_ERROR_TIMEOUT;
 8007490:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007494:	e054      	b.n	8007540 <SD_PowerON+0x20c>
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800749c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80074a0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80074a4:	d1ec      	bne.n	8007480 <SD_PowerON+0x14c>
          }
        }

        /* Clear CKSTOP Flag */
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80074ae:	639a      	str	r2, [r3, #56]	; 0x38

        /* Check to BusyD0 */
        if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80074ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80074be:	d002      	beq.n	80074c6 <SD_PowerON+0x192>
        {
          /* Error when activate Voltage Switch in SDMMC Peripheral */
          return SDMMC_ERROR_UNSUPPORTED_FEATURE;
 80074c0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80074c4:	e03c      	b.n	8007540 <SD_PowerON+0x20c>
        {
          /* Enable Transceiver Switch PIN */
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->DriveTransceiver_1_8V_Callback(SET);
#else
          HAL_SDEx_DriveTransceiver_1_8V_Callback(SET);
 80074c6:	2001      	movs	r0, #1
 80074c8:	f000 fb44 	bl	8007b54 <HAL_SDEx_DriveTransceiver_1_8V_Callback>
#endif

          /* Switch ready */
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	681a      	ldr	r2, [r3, #0]
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	f042 0204 	orr.w	r2, r2, #4
 80074da:	601a      	str	r2, [r3, #0]

          /* Check VSWEND Flag */
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 80074dc:	e00a      	b.n	80074f4 <SD_PowerON+0x1c0>
          {
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80074de:	f7f9 fecb 	bl	8001278 <HAL_GetTick>
 80074e2:	4602      	mov	r2, r0
 80074e4:	697b      	ldr	r3, [r7, #20]
 80074e6:	1ad3      	subs	r3, r2, r3
 80074e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074ec:	d102      	bne.n	80074f4 <SD_PowerON+0x1c0>
            {
              return HAL_SD_ERROR_TIMEOUT;
 80074ee:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80074f2:	e025      	b.n	8007540 <SD_PowerON+0x20c>
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80074fe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007502:	d1ec      	bne.n	80074de <SD_PowerON+0x1aa>
            }
          }

          /* Clear VSWEND Flag */
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800750c:	639a      	str	r2, [r3, #56]	; 0x38

          /* Check BusyD0 status */
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007514:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007518:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800751c:	d102      	bne.n	8007524 <SD_PowerON+0x1f0>
          {
            /* Error when enabling 1.8V mode */
            return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800751e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007522:	e00d      	b.n	8007540 <SD_PowerON+0x20c>
          }
          /* Switch to 1.8V OK */

          /* Disable VSWITCH FLAG from SDMMC Peripheral */
          hsd->Instance->POWER = 0x13U;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	2213      	movs	r2, #19
 800752a:	601a      	str	r2, [r3, #0]

          /* Clean Status flags */
          hsd->Instance->ICR = 0xFFFFFFFFU;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f04f 32ff 	mov.w	r2, #4294967295
 8007534:	639a      	str	r2, [r3, #56]	; 0x38
 8007536:	e002      	b.n	800753e <SD_PowerON+0x20a>
    }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2200      	movs	r2, #0
 800753c:	63da      	str	r2, [r3, #60]	; 0x3c
  }


  return HAL_SD_ERROR_NONE;
 800753e:	2300      	movs	r3, #0
}
 8007540:	4618      	mov	r0, r3
 8007542:	3720      	adds	r7, #32
 8007544:	46bd      	mov	sp, r7
 8007546:	bd80      	pop	{r7, pc}
 8007548:	c1100000 	.word	0xc1100000

0800754c <SD_SendSDStatus>:
  * @param  pSDstatus Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800754c:	b580      	push	{r7, lr}
 800754e:	b08c      	sub	sp, #48	; 0x30
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
 8007554:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8007556:	f7f9 fe8f 	bl	8001278 <HAL_GetTick>
 800755a:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800755c:	683b      	ldr	r3, [r7, #0]
 800755e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	2100      	movs	r1, #0
 8007566:	4618      	mov	r0, r3
 8007568:	f000 fe97 	bl	800829a <SDMMC_GetResponse>
 800756c:	4603      	mov	r3, r0
 800756e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007572:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007576:	d102      	bne.n	800757e <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007578:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800757c:	e0b0      	b.n	80076e0 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	2140      	movs	r1, #64	; 0x40
 8007584:	4618      	mov	r0, r3
 8007586:	f000 fec7 	bl	8008318 <SDMMC_CmdBlockLength>
 800758a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800758c:	6a3b      	ldr	r3, [r7, #32]
 800758e:	2b00      	cmp	r3, #0
 8007590:	d005      	beq.n	800759e <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800759a:	6a3b      	ldr	r3, [r7, #32]
 800759c:	e0a0      	b.n	80076e0 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681a      	ldr	r2, [r3, #0]
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80075a6:	041b      	lsls	r3, r3, #16
 80075a8:	4619      	mov	r1, r3
 80075aa:	4610      	mov	r0, r2
 80075ac:	f000 fffc 	bl	80085a8 <SDMMC_CmdAppCommand>
 80075b0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80075b2:	6a3b      	ldr	r3, [r7, #32]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d005      	beq.n	80075c4 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 80075c0:	6a3b      	ldr	r3, [r7, #32]
 80075c2:	e08d      	b.n	80076e0 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80075c4:	f04f 33ff 	mov.w	r3, #4294967295
 80075c8:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 80075ca:	2340      	movs	r3, #64	; 0x40
 80075cc:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 80075ce:	2360      	movs	r3, #96	; 0x60
 80075d0:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80075d2:	2302      	movs	r3, #2
 80075d4:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80075d6:	2300      	movs	r3, #0
 80075d8:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80075da:	2301      	movs	r3, #1
 80075dc:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	f107 0208 	add.w	r2, r7, #8
 80075e6:	4611      	mov	r1, r2
 80075e8:	4618      	mov	r0, r3
 80075ea:	f000 fe69 	bl	80082c0 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	4618      	mov	r0, r3
 80075f4:	f001 f8e4 	bl	80087c0 <SDMMC_CmdStatusRegister>
 80075f8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80075fa:	6a3b      	ldr	r3, [r7, #32]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d02b      	beq.n	8007658 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8007608:	6a3b      	ldr	r3, [r7, #32]
 800760a:	e069      	b.n	80076e0 <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
#else
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007612:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007616:	2b00      	cmp	r3, #0
 8007618:	d013      	beq.n	8007642 <SD_SendSDStatus+0xf6>
    {
      for(count = 0U; count < 8U; count++)
 800761a:	2300      	movs	r3, #0
 800761c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800761e:	e00d      	b.n	800763c <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	4618      	mov	r0, r3
 8007626:	f000 fdc3 	bl	80081b0 <SDMMC_ReadFIFO>
 800762a:	4602      	mov	r2, r0
 800762c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800762e:	601a      	str	r2, [r3, #0]
        pData++;
 8007630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007632:	3304      	adds	r3, #4
 8007634:	62bb      	str	r3, [r7, #40]	; 0x28
      for(count = 0U; count < 8U; count++)
 8007636:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007638:	3301      	adds	r3, #1
 800763a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800763c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800763e:	2b07      	cmp	r3, #7
 8007640:	d9ee      	bls.n	8007620 <SD_SendSDStatus+0xd4>
      }
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007642:	f7f9 fe19 	bl	8001278 <HAL_GetTick>
 8007646:	4602      	mov	r2, r0
 8007648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800764a:	1ad3      	subs	r3, r2, r3
 800764c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007650:	d102      	bne.n	8007658 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8007652:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007656:	e043      	b.n	80076e0 <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800765e:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8007662:	2b00      	cmp	r3, #0
 8007664:	d0d2      	beq.n	800760c <SD_SendSDStatus+0xc0>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800766c:	f003 0308 	and.w	r3, r3, #8
 8007670:	2b00      	cmp	r3, #0
 8007672:	d001      	beq.n	8007678 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8007674:	2308      	movs	r3, #8
 8007676:	e033      	b.n	80076e0 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800767e:	f003 0302 	and.w	r3, r3, #2
 8007682:	2b00      	cmp	r3, #0
 8007684:	d001      	beq.n	800768a <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8007686:	2302      	movs	r3, #2
 8007688:	e02a      	b.n	80076e0 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007690:	f003 0320 	and.w	r3, r3, #32
 8007694:	2b00      	cmp	r3, #0
 8007696:	d017      	beq.n	80076c8 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8007698:	2320      	movs	r3, #32
 800769a:	e021      	b.n	80076e0 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
#else
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)))
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	4618      	mov	r0, r3
 80076a2:	f000 fd85 	bl	80081b0 <SDMMC_ReadFIFO>
 80076a6:	4602      	mov	r2, r0
 80076a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076aa:	601a      	str	r2, [r3, #0]
    pData++;
 80076ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076ae:	3304      	adds	r3, #4
 80076b0:	62bb      	str	r3, [r7, #40]	; 0x28

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80076b2:	f7f9 fde1 	bl	8001278 <HAL_GetTick>
 80076b6:	4602      	mov	r2, r0
 80076b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ba:	1ad3      	subs	r3, r2, r3
 80076bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076c0:	d102      	bne.n	80076c8 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80076c2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80076c6:	e00b      	b.n	80076e0 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d1e2      	bne.n	800769c <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	4a03      	ldr	r2, [pc, #12]	; (80076e8 <SD_SendSDStatus+0x19c>)
 80076dc:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 80076de:	2300      	movs	r3, #0
}
 80076e0:	4618      	mov	r0, r3
 80076e2:	3730      	adds	r7, #48	; 0x30
 80076e4:	46bd      	mov	sp, r7
 80076e6:	bd80      	pop	{r7, pc}
 80076e8:	18000f3a 	.word	0x18000f3a

080076ec <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80076ec:	b580      	push	{r7, lr}
 80076ee:	b084      	sub	sp, #16
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
 80076f4:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 80076f6:	683b      	ldr	r3, [r7, #0]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d102      	bne.n	8007702 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80076fc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007700:	e018      	b.n	8007734 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681a      	ldr	r2, [r3, #0]
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800770a:	041b      	lsls	r3, r3, #16
 800770c:	4619      	mov	r1, r3
 800770e:	4610      	mov	r0, r2
 8007710:	f001 f833 	bl	800877a <SDMMC_CmdSendStatus>
 8007714:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d001      	beq.n	8007720 <SD_SendStatus+0x34>
  {
    return errorstate;
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	e009      	b.n	8007734 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	2100      	movs	r1, #0
 8007726:	4618      	mov	r0, r3
 8007728:	f000 fdb7 	bl	800829a <SDMMC_GetResponse>
 800772c:	4602      	mov	r2, r0
 800772e:	683b      	ldr	r3, [r7, #0]
 8007730:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8007732:	2300      	movs	r3, #0
}
 8007734:	4618      	mov	r0, r3
 8007736:	3710      	adds	r7, #16
 8007738:	46bd      	mov	sp, r7
 800773a:	bd80      	pop	{r7, pc}

0800773c <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800773c:	b580      	push	{r7, lr}
 800773e:	b086      	sub	sp, #24
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8007744:	2300      	movs	r3, #0
 8007746:	60fb      	str	r3, [r7, #12]
 8007748:	2300      	movs	r3, #0
 800774a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	2100      	movs	r1, #0
 8007752:	4618      	mov	r0, r3
 8007754:	f000 fda1 	bl	800829a <SDMMC_GetResponse>
 8007758:	4603      	mov	r3, r0
 800775a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800775e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007762:	d102      	bne.n	800776a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007764:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007768:	e02f      	b.n	80077ca <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800776a:	f107 030c 	add.w	r3, r7, #12
 800776e:	4619      	mov	r1, r3
 8007770:	6878      	ldr	r0, [r7, #4]
 8007772:	f000 f879 	bl	8007868 <SD_FindSCR>
 8007776:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007778:	697b      	ldr	r3, [r7, #20]
 800777a:	2b00      	cmp	r3, #0
 800777c:	d001      	beq.n	8007782 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800777e:	697b      	ldr	r3, [r7, #20]
 8007780:	e023      	b.n	80077ca <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8007782:	693b      	ldr	r3, [r7, #16]
 8007784:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007788:	2b00      	cmp	r3, #0
 800778a:	d01c      	beq.n	80077c6 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681a      	ldr	r2, [r3, #0]
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007794:	041b      	lsls	r3, r3, #16
 8007796:	4619      	mov	r1, r3
 8007798:	4610      	mov	r0, r2
 800779a:	f000 ff05 	bl	80085a8 <SDMMC_CmdAppCommand>
 800779e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80077a0:	697b      	ldr	r3, [r7, #20]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d001      	beq.n	80077aa <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80077a6:	697b      	ldr	r3, [r7, #20]
 80077a8:	e00f      	b.n	80077ca <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	2102      	movs	r1, #2
 80077b0:	4618      	mov	r0, r3
 80077b2:	f000 ff3c 	bl	800862e <SDMMC_CmdBusWidth>
 80077b6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80077b8:	697b      	ldr	r3, [r7, #20]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d001      	beq.n	80077c2 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 80077be:	697b      	ldr	r3, [r7, #20]
 80077c0:	e003      	b.n	80077ca <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80077c2:	2300      	movs	r3, #0
 80077c4:	e001      	b.n	80077ca <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80077c6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80077ca:	4618      	mov	r0, r3
 80077cc:	3718      	adds	r7, #24
 80077ce:	46bd      	mov	sp, r7
 80077d0:	bd80      	pop	{r7, pc}

080077d2 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 80077d2:	b580      	push	{r7, lr}
 80077d4:	b086      	sub	sp, #24
 80077d6:	af00      	add	r7, sp, #0
 80077d8:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 80077da:	2300      	movs	r3, #0
 80077dc:	60fb      	str	r3, [r7, #12]
 80077de:	2300      	movs	r3, #0
 80077e0:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	2100      	movs	r1, #0
 80077e8:	4618      	mov	r0, r3
 80077ea:	f000 fd56 	bl	800829a <SDMMC_GetResponse>
 80077ee:	4603      	mov	r3, r0
 80077f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80077f4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80077f8:	d102      	bne.n	8007800 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80077fa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80077fe:	e02f      	b.n	8007860 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8007800:	f107 030c 	add.w	r3, r7, #12
 8007804:	4619      	mov	r1, r3
 8007806:	6878      	ldr	r0, [r7, #4]
 8007808:	f000 f82e 	bl	8007868 <SD_FindSCR>
 800780c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800780e:	697b      	ldr	r3, [r7, #20]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d001      	beq.n	8007818 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8007814:	697b      	ldr	r3, [r7, #20]
 8007816:	e023      	b.n	8007860 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8007818:	693b      	ldr	r3, [r7, #16]
 800781a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800781e:	2b00      	cmp	r3, #0
 8007820:	d01c      	beq.n	800785c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681a      	ldr	r2, [r3, #0]
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800782a:	041b      	lsls	r3, r3, #16
 800782c:	4619      	mov	r1, r3
 800782e:	4610      	mov	r0, r2
 8007830:	f000 feba 	bl	80085a8 <SDMMC_CmdAppCommand>
 8007834:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007836:	697b      	ldr	r3, [r7, #20]
 8007838:	2b00      	cmp	r3, #0
 800783a:	d001      	beq.n	8007840 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800783c:	697b      	ldr	r3, [r7, #20]
 800783e:	e00f      	b.n	8007860 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	2100      	movs	r1, #0
 8007846:	4618      	mov	r0, r3
 8007848:	f000 fef1 	bl	800862e <SDMMC_CmdBusWidth>
 800784c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800784e:	697b      	ldr	r3, [r7, #20]
 8007850:	2b00      	cmp	r3, #0
 8007852:	d001      	beq.n	8007858 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8007854:	697b      	ldr	r3, [r7, #20]
 8007856:	e003      	b.n	8007860 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8007858:	2300      	movs	r3, #0
 800785a:	e001      	b.n	8007860 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800785c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8007860:	4618      	mov	r0, r3
 8007862:	3718      	adds	r7, #24
 8007864:	46bd      	mov	sp, r7
 8007866:	bd80      	pop	{r7, pc}

08007868 <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8007868:	b580      	push	{r7, lr}
 800786a:	b08e      	sub	sp, #56	; 0x38
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]
 8007870:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8007872:	f7f9 fd01 	bl	8001278 <HAL_GetTick>
 8007876:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8007878:	2300      	movs	r3, #0
 800787a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800787c:	2300      	movs	r3, #0
 800787e:	60bb      	str	r3, [r7, #8]
 8007880:	2300      	movs	r3, #0
 8007882:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8007884:	683b      	ldr	r3, [r7, #0]
 8007886:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	2108      	movs	r1, #8
 800788e:	4618      	mov	r0, r3
 8007890:	f000 fd42 	bl	8008318 <SDMMC_CmdBlockLength>
 8007894:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007898:	2b00      	cmp	r3, #0
 800789a:	d001      	beq.n	80078a0 <SD_FindSCR+0x38>
  {
    return errorstate;
 800789c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800789e:	e0ad      	b.n	80079fc <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681a      	ldr	r2, [r3, #0]
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80078a8:	041b      	lsls	r3, r3, #16
 80078aa:	4619      	mov	r1, r3
 80078ac:	4610      	mov	r0, r2
 80078ae:	f000 fe7b 	bl	80085a8 <SDMMC_CmdAppCommand>
 80078b2:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80078b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d001      	beq.n	80078be <SD_FindSCR+0x56>
  {
    return errorstate;
 80078ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078bc:	e09e      	b.n	80079fc <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80078be:	f04f 33ff 	mov.w	r3, #4294967295
 80078c2:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 80078c4:	2308      	movs	r3, #8
 80078c6:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 80078c8:	2330      	movs	r3, #48	; 0x30
 80078ca:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80078cc:	2302      	movs	r3, #2
 80078ce:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80078d0:	2300      	movs	r3, #0
 80078d2:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80078d4:	2301      	movs	r3, #1
 80078d6:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	f107 0210 	add.w	r2, r7, #16
 80078e0:	4611      	mov	r1, r2
 80078e2:	4618      	mov	r0, r3
 80078e4:	f000 fcec 	bl	80082c0 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	4618      	mov	r0, r3
 80078ee:	f000 fec1 	bl	8008674 <SDMMC_CmdSendSCR>
 80078f2:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80078f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d027      	beq.n	800794a <SD_FindSCR+0xe2>
  {
    return errorstate;
 80078fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078fc:	e07e      	b.n	80079fc <SD_FindSCR+0x194>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
  {
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007904:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007908:	2b00      	cmp	r3, #0
 800790a:	d113      	bne.n	8007934 <SD_FindSCR+0xcc>
 800790c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800790e:	2b00      	cmp	r3, #0
 8007910:	d110      	bne.n	8007934 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	4618      	mov	r0, r3
 8007918:	f000 fc4a 	bl	80081b0 <SDMMC_ReadFIFO>
 800791c:	4603      	mov	r3, r0
 800791e:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	4618      	mov	r0, r3
 8007926:	f000 fc43 	bl	80081b0 <SDMMC_ReadFIFO>
 800792a:	4603      	mov	r3, r0
 800792c:	60fb      	str	r3, [r7, #12]
      index++;
 800792e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007930:	3301      	adds	r3, #1
 8007932:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007934:	f7f9 fca0 	bl	8001278 <HAL_GetTick>
 8007938:	4602      	mov	r2, r0
 800793a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800793c:	1ad3      	subs	r3, r2, r3
 800793e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007942:	d102      	bne.n	800794a <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8007944:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007948:	e058      	b.n	80079fc <SD_FindSCR+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007950:	f240 532a 	movw	r3, #1322	; 0x52a
 8007954:	4013      	ands	r3, r2
 8007956:	2b00      	cmp	r3, #0
 8007958:	d0d1      	beq.n	80078fe <SD_FindSCR+0x96>
      return HAL_SD_ERROR_TIMEOUT;
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007960:	f003 0308 	and.w	r3, r3, #8
 8007964:	2b00      	cmp	r3, #0
 8007966:	d005      	beq.n	8007974 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	2208      	movs	r2, #8
 800796e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8007970:	2308      	movs	r3, #8
 8007972:	e043      	b.n	80079fc <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800797a:	f003 0302 	and.w	r3, r3, #2
 800797e:	2b00      	cmp	r3, #0
 8007980:	d005      	beq.n	800798e <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	2202      	movs	r2, #2
 8007988:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800798a:	2302      	movs	r3, #2
 800798c:	e036      	b.n	80079fc <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007994:	f003 0320 	and.w	r3, r3, #32
 8007998:	2b00      	cmp	r3, #0
 800799a:	d005      	beq.n	80079a8 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	2220      	movs	r2, #32
 80079a2:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80079a4:	2320      	movs	r3, #32
 80079a6:	e029      	b.n	80079fc <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	4a15      	ldr	r2, [pc, #84]	; (8007a04 <SD_FindSCR+0x19c>)
 80079ae:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	061a      	lsls	r2, r3, #24
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	021b      	lsls	r3, r3, #8
 80079b8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80079bc:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	0a1b      	lsrs	r3, r3, #8
 80079c2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80079c6:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	0e1b      	lsrs	r3, r3, #24
 80079cc:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80079ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079d0:	601a      	str	r2, [r3, #0]
    scr++;
 80079d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079d4:	3304      	adds	r3, #4
 80079d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80079d8:	68bb      	ldr	r3, [r7, #8]
 80079da:	061a      	lsls	r2, r3, #24
 80079dc:	68bb      	ldr	r3, [r7, #8]
 80079de:	021b      	lsls	r3, r3, #8
 80079e0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80079e4:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80079e6:	68bb      	ldr	r3, [r7, #8]
 80079e8:	0a1b      	lsrs	r3, r3, #8
 80079ea:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80079ee:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80079f0:	68bb      	ldr	r3, [r7, #8]
 80079f2:	0e1b      	lsrs	r3, r3, #24
 80079f4:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80079f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079f8:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80079fa:	2300      	movs	r3, #0
}
 80079fc:	4618      	mov	r0, r3
 80079fe:	3738      	adds	r7, #56	; 0x38
 8007a00:	46bd      	mov	sp, r7
 8007a02:	bd80      	pop	{r7, pc}
 8007a04:	18000f3a 	.word	0x18000f3a

08007a08 <SD_Read_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b086      	sub	sp, #24
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a14:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a1a:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8007a1c:	693b      	ldr	r3, [r7, #16]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d03f      	beq.n	8007aa2 <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8007a22:	2300      	movs	r3, #0
 8007a24:	617b      	str	r3, [r7, #20]
 8007a26:	e033      	b.n	8007a90 <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	f000 fbbf 	bl	80081b0 <SDMMC_ReadFIFO>
 8007a32:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8007a34:	68bb      	ldr	r3, [r7, #8]
 8007a36:	b2da      	uxtb	r2, r3
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	3301      	adds	r3, #1
 8007a40:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007a42:	693b      	ldr	r3, [r7, #16]
 8007a44:	3b01      	subs	r3, #1
 8007a46:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8007a48:	68bb      	ldr	r3, [r7, #8]
 8007a4a:	0a1b      	lsrs	r3, r3, #8
 8007a4c:	b2da      	uxtb	r2, r3
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	3301      	adds	r3, #1
 8007a56:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007a58:	693b      	ldr	r3, [r7, #16]
 8007a5a:	3b01      	subs	r3, #1
 8007a5c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8007a5e:	68bb      	ldr	r3, [r7, #8]
 8007a60:	0c1b      	lsrs	r3, r3, #16
 8007a62:	b2da      	uxtb	r2, r3
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	3301      	adds	r3, #1
 8007a6c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007a6e:	693b      	ldr	r3, [r7, #16]
 8007a70:	3b01      	subs	r3, #1
 8007a72:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8007a74:	68bb      	ldr	r3, [r7, #8]
 8007a76:	0e1b      	lsrs	r3, r3, #24
 8007a78:	b2da      	uxtb	r2, r3
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	3301      	adds	r3, #1
 8007a82:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007a84:	693b      	ldr	r3, [r7, #16]
 8007a86:	3b01      	subs	r3, #1
 8007a88:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8007a8a:	697b      	ldr	r3, [r7, #20]
 8007a8c:	3301      	adds	r3, #1
 8007a8e:	617b      	str	r3, [r7, #20]
 8007a90:	697b      	ldr	r3, [r7, #20]
 8007a92:	2b07      	cmp	r3, #7
 8007a94:	d9c8      	bls.n	8007a28 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	68fa      	ldr	r2, [r7, #12]
 8007a9a:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	693a      	ldr	r2, [r7, #16]
 8007aa0:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8007aa2:	bf00      	nop
 8007aa4:	3718      	adds	r7, #24
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	bd80      	pop	{r7, pc}

08007aaa <SD_Write_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8007aaa:	b580      	push	{r7, lr}
 8007aac:	b086      	sub	sp, #24
 8007aae:	af00      	add	r7, sp, #0
 8007ab0:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	6a1b      	ldr	r3, [r3, #32]
 8007ab6:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007abc:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8007abe:	693b      	ldr	r3, [r7, #16]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d043      	beq.n	8007b4c <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	617b      	str	r3, [r7, #20]
 8007ac8:	e037      	b.n	8007b3a <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	781b      	ldrb	r3, [r3, #0]
 8007ace:	60bb      	str	r3, [r7, #8]
      tmp++;
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	3301      	adds	r3, #1
 8007ad4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007ad6:	693b      	ldr	r3, [r7, #16]
 8007ad8:	3b01      	subs	r3, #1
 8007ada:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	781b      	ldrb	r3, [r3, #0]
 8007ae0:	021a      	lsls	r2, r3, #8
 8007ae2:	68bb      	ldr	r3, [r7, #8]
 8007ae4:	4313      	orrs	r3, r2
 8007ae6:	60bb      	str	r3, [r7, #8]
      tmp++;
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	3301      	adds	r3, #1
 8007aec:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007aee:	693b      	ldr	r3, [r7, #16]
 8007af0:	3b01      	subs	r3, #1
 8007af2:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	781b      	ldrb	r3, [r3, #0]
 8007af8:	041a      	lsls	r2, r3, #16
 8007afa:	68bb      	ldr	r3, [r7, #8]
 8007afc:	4313      	orrs	r3, r2
 8007afe:	60bb      	str	r3, [r7, #8]
      tmp++;
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	3301      	adds	r3, #1
 8007b04:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007b06:	693b      	ldr	r3, [r7, #16]
 8007b08:	3b01      	subs	r3, #1
 8007b0a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	781b      	ldrb	r3, [r3, #0]
 8007b10:	061a      	lsls	r2, r3, #24
 8007b12:	68bb      	ldr	r3, [r7, #8]
 8007b14:	4313      	orrs	r3, r2
 8007b16:	60bb      	str	r3, [r7, #8]
      tmp++;
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	3301      	adds	r3, #1
 8007b1c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007b1e:	693b      	ldr	r3, [r7, #16]
 8007b20:	3b01      	subs	r3, #1
 8007b22:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	f107 0208 	add.w	r2, r7, #8
 8007b2c:	4611      	mov	r1, r2
 8007b2e:	4618      	mov	r0, r3
 8007b30:	f000 fb4b 	bl	80081ca <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8007b34:	697b      	ldr	r3, [r7, #20]
 8007b36:	3301      	adds	r3, #1
 8007b38:	617b      	str	r3, [r7, #20]
 8007b3a:	697b      	ldr	r3, [r7, #20]
 8007b3c:	2b07      	cmp	r3, #7
 8007b3e:	d9c4      	bls.n	8007aca <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	68fa      	ldr	r2, [r7, #12]
 8007b44:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	693a      	ldr	r2, [r7, #16]
 8007b4a:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8007b4c:	bf00      	nop
 8007b4e:	3718      	adds	r7, #24
 8007b50:	46bd      	mov	sp, r7
 8007b52:	bd80      	pop	{r7, pc}

08007b54 <HAL_SDEx_DriveTransceiver_1_8V_Callback>:
  * @brief  Enable/Disable the SD Transceiver 1.8V Mode Callback.
  * @param  status Voltage Switch State
  * @retval None
  */
__weak void HAL_SDEx_DriveTransceiver_1_8V_Callback(FlagStatus status)
{
 8007b54:	b480      	push	{r7}
 8007b56:	b083      	sub	sp, #12
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	4603      	mov	r3, r0
 8007b5c:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SD_EnableTransciver could be implemented in the user file
   */
}
 8007b5e:	bf00      	nop
 8007b60:	370c      	adds	r7, #12
 8007b62:	46bd      	mov	sp, r7
 8007b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b68:	4770      	bx	lr

08007b6a <HAL_SDEx_Read_DMADoubleBuffer0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuffer0CpltCallback(SD_HandleTypeDef *hsd)
{
 8007b6a:	b480      	push	{r7}
 8007b6c:	b083      	sub	sp, #12
 8007b6e:	af00      	add	r7, sp, #0
 8007b70:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuffer0CpltCallback can be implemented in the user file
   */
}
 8007b72:	bf00      	nop
 8007b74:	370c      	adds	r7, #12
 8007b76:	46bd      	mov	sp, r7
 8007b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7c:	4770      	bx	lr

08007b7e <HAL_SDEx_Read_DMADoubleBuffer1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuffer1CpltCallback(SD_HandleTypeDef *hsd)
{
 8007b7e:	b480      	push	{r7}
 8007b80:	b083      	sub	sp, #12
 8007b82:	af00      	add	r7, sp, #0
 8007b84:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuffer1CpltCallback can be implemented in the user file
   */
}
 8007b86:	bf00      	nop
 8007b88:	370c      	adds	r7, #12
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b90:	4770      	bx	lr

08007b92 <HAL_SDEx_Write_DMADoubleBuffer0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuffer0CpltCallback(SD_HandleTypeDef *hsd)
{
 8007b92:	b480      	push	{r7}
 8007b94:	b083      	sub	sp, #12
 8007b96:	af00      	add	r7, sp, #0
 8007b98:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuffer0CpltCallback can be implemented in the user file
   */
}
 8007b9a:	bf00      	nop
 8007b9c:	370c      	adds	r7, #12
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba4:	4770      	bx	lr

08007ba6 <HAL_SDEx_Write_DMADoubleBuffer1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuffer1CpltCallback(SD_HandleTypeDef *hsd)
{
 8007ba6:	b480      	push	{r7}
 8007ba8:	b083      	sub	sp, #12
 8007baa:	af00      	add	r7, sp, #0
 8007bac:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuffer0CpltCallback can be implemented in the user file
   */
}
 8007bae:	bf00      	nop
 8007bb0:	370c      	adds	r7, #12
 8007bb2:	46bd      	mov	sp, r7
 8007bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb8:	4770      	bx	lr

08007bba <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007bba:	b580      	push	{r7, lr}
 8007bbc:	b082      	sub	sp, #8
 8007bbe:	af00      	add	r7, sp, #0
 8007bc0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d101      	bne.n	8007bcc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007bc8:	2301      	movs	r3, #1
 8007bca:	e049      	b.n	8007c60 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007bd2:	b2db      	uxtb	r3, r3
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d106      	bne.n	8007be6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	2200      	movs	r2, #0
 8007bdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007be0:	6878      	ldr	r0, [r7, #4]
 8007be2:	f000 f841 	bl	8007c68 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	2202      	movs	r2, #2
 8007bea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681a      	ldr	r2, [r3, #0]
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	3304      	adds	r3, #4
 8007bf6:	4619      	mov	r1, r3
 8007bf8:	4610      	mov	r0, r2
 8007bfa:	f000 f9f7 	bl	8007fec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	2201      	movs	r2, #1
 8007c02:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	2201      	movs	r2, #1
 8007c0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	2201      	movs	r2, #1
 8007c12:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	2201      	movs	r2, #1
 8007c1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	2201      	movs	r2, #1
 8007c22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	2201      	movs	r2, #1
 8007c2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	2201      	movs	r2, #1
 8007c32:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	2201      	movs	r2, #1
 8007c3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	2201      	movs	r2, #1
 8007c42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	2201      	movs	r2, #1
 8007c4a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	2201      	movs	r2, #1
 8007c52:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	2201      	movs	r2, #1
 8007c5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007c5e:	2300      	movs	r3, #0
}
 8007c60:	4618      	mov	r0, r3
 8007c62:	3708      	adds	r7, #8
 8007c64:	46bd      	mov	sp, r7
 8007c66:	bd80      	pop	{r7, pc}

08007c68 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8007c68:	b480      	push	{r7}
 8007c6a:	b083      	sub	sp, #12
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8007c70:	bf00      	nop
 8007c72:	370c      	adds	r7, #12
 8007c74:	46bd      	mov	sp, r7
 8007c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7a:	4770      	bx	lr

08007c7c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007c7c:	b480      	push	{r7}
 8007c7e:	b085      	sub	sp, #20
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c8a:	b2db      	uxtb	r3, r3
 8007c8c:	2b01      	cmp	r3, #1
 8007c8e:	d001      	beq.n	8007c94 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007c90:	2301      	movs	r3, #1
 8007c92:	e04f      	b.n	8007d34 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	2202      	movs	r2, #2
 8007c98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	68da      	ldr	r2, [r3, #12]
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	f042 0201 	orr.w	r2, r2, #1
 8007caa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	4a23      	ldr	r2, [pc, #140]	; (8007d40 <HAL_TIM_Base_Start_IT+0xc4>)
 8007cb2:	4293      	cmp	r3, r2
 8007cb4:	d01d      	beq.n	8007cf2 <HAL_TIM_Base_Start_IT+0x76>
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007cbe:	d018      	beq.n	8007cf2 <HAL_TIM_Base_Start_IT+0x76>
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	4a1f      	ldr	r2, [pc, #124]	; (8007d44 <HAL_TIM_Base_Start_IT+0xc8>)
 8007cc6:	4293      	cmp	r3, r2
 8007cc8:	d013      	beq.n	8007cf2 <HAL_TIM_Base_Start_IT+0x76>
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	4a1e      	ldr	r2, [pc, #120]	; (8007d48 <HAL_TIM_Base_Start_IT+0xcc>)
 8007cd0:	4293      	cmp	r3, r2
 8007cd2:	d00e      	beq.n	8007cf2 <HAL_TIM_Base_Start_IT+0x76>
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	4a1c      	ldr	r2, [pc, #112]	; (8007d4c <HAL_TIM_Base_Start_IT+0xd0>)
 8007cda:	4293      	cmp	r3, r2
 8007cdc:	d009      	beq.n	8007cf2 <HAL_TIM_Base_Start_IT+0x76>
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	4a1b      	ldr	r2, [pc, #108]	; (8007d50 <HAL_TIM_Base_Start_IT+0xd4>)
 8007ce4:	4293      	cmp	r3, r2
 8007ce6:	d004      	beq.n	8007cf2 <HAL_TIM_Base_Start_IT+0x76>
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	4a19      	ldr	r2, [pc, #100]	; (8007d54 <HAL_TIM_Base_Start_IT+0xd8>)
 8007cee:	4293      	cmp	r3, r2
 8007cf0:	d115      	bne.n	8007d1e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	689a      	ldr	r2, [r3, #8]
 8007cf8:	4b17      	ldr	r3, [pc, #92]	; (8007d58 <HAL_TIM_Base_Start_IT+0xdc>)
 8007cfa:	4013      	ands	r3, r2
 8007cfc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	2b06      	cmp	r3, #6
 8007d02:	d015      	beq.n	8007d30 <HAL_TIM_Base_Start_IT+0xb4>
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d0a:	d011      	beq.n	8007d30 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	681a      	ldr	r2, [r3, #0]
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	f042 0201 	orr.w	r2, r2, #1
 8007d1a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d1c:	e008      	b.n	8007d30 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	681a      	ldr	r2, [r3, #0]
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	f042 0201 	orr.w	r2, r2, #1
 8007d2c:	601a      	str	r2, [r3, #0]
 8007d2e:	e000      	b.n	8007d32 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d30:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007d32:	2300      	movs	r3, #0
}
 8007d34:	4618      	mov	r0, r3
 8007d36:	3714      	adds	r7, #20
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3e:	4770      	bx	lr
 8007d40:	40012c00 	.word	0x40012c00
 8007d44:	40000400 	.word	0x40000400
 8007d48:	40000800 	.word	0x40000800
 8007d4c:	40000c00 	.word	0x40000c00
 8007d50:	40013400 	.word	0x40013400
 8007d54:	40014000 	.word	0x40014000
 8007d58:	00010007 	.word	0x00010007

08007d5c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	b082      	sub	sp, #8
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	691b      	ldr	r3, [r3, #16]
 8007d6a:	f003 0302 	and.w	r3, r3, #2
 8007d6e:	2b02      	cmp	r3, #2
 8007d70:	d122      	bne.n	8007db8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	68db      	ldr	r3, [r3, #12]
 8007d78:	f003 0302 	and.w	r3, r3, #2
 8007d7c:	2b02      	cmp	r3, #2
 8007d7e:	d11b      	bne.n	8007db8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	f06f 0202 	mvn.w	r2, #2
 8007d88:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	2201      	movs	r2, #1
 8007d8e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	699b      	ldr	r3, [r3, #24]
 8007d96:	f003 0303 	and.w	r3, r3, #3
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d003      	beq.n	8007da6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007d9e:	6878      	ldr	r0, [r7, #4]
 8007da0:	f000 f905 	bl	8007fae <HAL_TIM_IC_CaptureCallback>
 8007da4:	e005      	b.n	8007db2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007da6:	6878      	ldr	r0, [r7, #4]
 8007da8:	f000 f8f7 	bl	8007f9a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007dac:	6878      	ldr	r0, [r7, #4]
 8007dae:	f000 f908 	bl	8007fc2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	2200      	movs	r2, #0
 8007db6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	691b      	ldr	r3, [r3, #16]
 8007dbe:	f003 0304 	and.w	r3, r3, #4
 8007dc2:	2b04      	cmp	r3, #4
 8007dc4:	d122      	bne.n	8007e0c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	68db      	ldr	r3, [r3, #12]
 8007dcc:	f003 0304 	and.w	r3, r3, #4
 8007dd0:	2b04      	cmp	r3, #4
 8007dd2:	d11b      	bne.n	8007e0c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	f06f 0204 	mvn.w	r2, #4
 8007ddc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	2202      	movs	r2, #2
 8007de2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	699b      	ldr	r3, [r3, #24]
 8007dea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d003      	beq.n	8007dfa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007df2:	6878      	ldr	r0, [r7, #4]
 8007df4:	f000 f8db 	bl	8007fae <HAL_TIM_IC_CaptureCallback>
 8007df8:	e005      	b.n	8007e06 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007dfa:	6878      	ldr	r0, [r7, #4]
 8007dfc:	f000 f8cd 	bl	8007f9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e00:	6878      	ldr	r0, [r7, #4]
 8007e02:	f000 f8de 	bl	8007fc2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	2200      	movs	r2, #0
 8007e0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	691b      	ldr	r3, [r3, #16]
 8007e12:	f003 0308 	and.w	r3, r3, #8
 8007e16:	2b08      	cmp	r3, #8
 8007e18:	d122      	bne.n	8007e60 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	68db      	ldr	r3, [r3, #12]
 8007e20:	f003 0308 	and.w	r3, r3, #8
 8007e24:	2b08      	cmp	r3, #8
 8007e26:	d11b      	bne.n	8007e60 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	f06f 0208 	mvn.w	r2, #8
 8007e30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	2204      	movs	r2, #4
 8007e36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	69db      	ldr	r3, [r3, #28]
 8007e3e:	f003 0303 	and.w	r3, r3, #3
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d003      	beq.n	8007e4e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007e46:	6878      	ldr	r0, [r7, #4]
 8007e48:	f000 f8b1 	bl	8007fae <HAL_TIM_IC_CaptureCallback>
 8007e4c:	e005      	b.n	8007e5a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e4e:	6878      	ldr	r0, [r7, #4]
 8007e50:	f000 f8a3 	bl	8007f9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e54:	6878      	ldr	r0, [r7, #4]
 8007e56:	f000 f8b4 	bl	8007fc2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	2200      	movs	r2, #0
 8007e5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	691b      	ldr	r3, [r3, #16]
 8007e66:	f003 0310 	and.w	r3, r3, #16
 8007e6a:	2b10      	cmp	r3, #16
 8007e6c:	d122      	bne.n	8007eb4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	68db      	ldr	r3, [r3, #12]
 8007e74:	f003 0310 	and.w	r3, r3, #16
 8007e78:	2b10      	cmp	r3, #16
 8007e7a:	d11b      	bne.n	8007eb4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	f06f 0210 	mvn.w	r2, #16
 8007e84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	2208      	movs	r2, #8
 8007e8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	69db      	ldr	r3, [r3, #28]
 8007e92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d003      	beq.n	8007ea2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007e9a:	6878      	ldr	r0, [r7, #4]
 8007e9c:	f000 f887 	bl	8007fae <HAL_TIM_IC_CaptureCallback>
 8007ea0:	e005      	b.n	8007eae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ea2:	6878      	ldr	r0, [r7, #4]
 8007ea4:	f000 f879 	bl	8007f9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ea8:	6878      	ldr	r0, [r7, #4]
 8007eaa:	f000 f88a 	bl	8007fc2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	2200      	movs	r2, #0
 8007eb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	691b      	ldr	r3, [r3, #16]
 8007eba:	f003 0301 	and.w	r3, r3, #1
 8007ebe:	2b01      	cmp	r3, #1
 8007ec0:	d10e      	bne.n	8007ee0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	68db      	ldr	r3, [r3, #12]
 8007ec8:	f003 0301 	and.w	r3, r3, #1
 8007ecc:	2b01      	cmp	r3, #1
 8007ece:	d107      	bne.n	8007ee0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	f06f 0201 	mvn.w	r2, #1
 8007ed8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007eda:	6878      	ldr	r0, [r7, #4]
 8007edc:	f7f8 fec2 	bl	8000c64 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	691b      	ldr	r3, [r3, #16]
 8007ee6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007eea:	2b80      	cmp	r3, #128	; 0x80
 8007eec:	d10e      	bne.n	8007f0c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	68db      	ldr	r3, [r3, #12]
 8007ef4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ef8:	2b80      	cmp	r3, #128	; 0x80
 8007efa:	d107      	bne.n	8007f0c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007f04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007f06:	6878      	ldr	r0, [r7, #4]
 8007f08:	f000 f914 	bl	8008134 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	691b      	ldr	r3, [r3, #16]
 8007f12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f1a:	d10e      	bne.n	8007f3a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	68db      	ldr	r3, [r3, #12]
 8007f22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f26:	2b80      	cmp	r3, #128	; 0x80
 8007f28:	d107      	bne.n	8007f3a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007f32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007f34:	6878      	ldr	r0, [r7, #4]
 8007f36:	f000 f907 	bl	8008148 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	691b      	ldr	r3, [r3, #16]
 8007f40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f44:	2b40      	cmp	r3, #64	; 0x40
 8007f46:	d10e      	bne.n	8007f66 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	68db      	ldr	r3, [r3, #12]
 8007f4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f52:	2b40      	cmp	r3, #64	; 0x40
 8007f54:	d107      	bne.n	8007f66 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007f5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007f60:	6878      	ldr	r0, [r7, #4]
 8007f62:	f000 f838 	bl	8007fd6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	691b      	ldr	r3, [r3, #16]
 8007f6c:	f003 0320 	and.w	r3, r3, #32
 8007f70:	2b20      	cmp	r3, #32
 8007f72:	d10e      	bne.n	8007f92 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	68db      	ldr	r3, [r3, #12]
 8007f7a:	f003 0320 	and.w	r3, r3, #32
 8007f7e:	2b20      	cmp	r3, #32
 8007f80:	d107      	bne.n	8007f92 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	f06f 0220 	mvn.w	r2, #32
 8007f8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007f8c:	6878      	ldr	r0, [r7, #4]
 8007f8e:	f000 f8c7 	bl	8008120 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007f92:	bf00      	nop
 8007f94:	3708      	adds	r7, #8
 8007f96:	46bd      	mov	sp, r7
 8007f98:	bd80      	pop	{r7, pc}

08007f9a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007f9a:	b480      	push	{r7}
 8007f9c:	b083      	sub	sp, #12
 8007f9e:	af00      	add	r7, sp, #0
 8007fa0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007fa2:	bf00      	nop
 8007fa4:	370c      	adds	r7, #12
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fac:	4770      	bx	lr

08007fae <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007fae:	b480      	push	{r7}
 8007fb0:	b083      	sub	sp, #12
 8007fb2:	af00      	add	r7, sp, #0
 8007fb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007fb6:	bf00      	nop
 8007fb8:	370c      	adds	r7, #12
 8007fba:	46bd      	mov	sp, r7
 8007fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc0:	4770      	bx	lr

08007fc2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007fc2:	b480      	push	{r7}
 8007fc4:	b083      	sub	sp, #12
 8007fc6:	af00      	add	r7, sp, #0
 8007fc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007fca:	bf00      	nop
 8007fcc:	370c      	adds	r7, #12
 8007fce:	46bd      	mov	sp, r7
 8007fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd4:	4770      	bx	lr

08007fd6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007fd6:	b480      	push	{r7}
 8007fd8:	b083      	sub	sp, #12
 8007fda:	af00      	add	r7, sp, #0
 8007fdc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007fde:	bf00      	nop
 8007fe0:	370c      	adds	r7, #12
 8007fe2:	46bd      	mov	sp, r7
 8007fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe8:	4770      	bx	lr
	...

08007fec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007fec:	b480      	push	{r7}
 8007fee:	b085      	sub	sp, #20
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	6078      	str	r0, [r7, #4]
 8007ff4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	4a40      	ldr	r2, [pc, #256]	; (8008100 <TIM_Base_SetConfig+0x114>)
 8008000:	4293      	cmp	r3, r2
 8008002:	d013      	beq.n	800802c <TIM_Base_SetConfig+0x40>
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800800a:	d00f      	beq.n	800802c <TIM_Base_SetConfig+0x40>
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	4a3d      	ldr	r2, [pc, #244]	; (8008104 <TIM_Base_SetConfig+0x118>)
 8008010:	4293      	cmp	r3, r2
 8008012:	d00b      	beq.n	800802c <TIM_Base_SetConfig+0x40>
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	4a3c      	ldr	r2, [pc, #240]	; (8008108 <TIM_Base_SetConfig+0x11c>)
 8008018:	4293      	cmp	r3, r2
 800801a:	d007      	beq.n	800802c <TIM_Base_SetConfig+0x40>
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	4a3b      	ldr	r2, [pc, #236]	; (800810c <TIM_Base_SetConfig+0x120>)
 8008020:	4293      	cmp	r3, r2
 8008022:	d003      	beq.n	800802c <TIM_Base_SetConfig+0x40>
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	4a3a      	ldr	r2, [pc, #232]	; (8008110 <TIM_Base_SetConfig+0x124>)
 8008028:	4293      	cmp	r3, r2
 800802a:	d108      	bne.n	800803e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008032:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008034:	683b      	ldr	r3, [r7, #0]
 8008036:	685b      	ldr	r3, [r3, #4]
 8008038:	68fa      	ldr	r2, [r7, #12]
 800803a:	4313      	orrs	r3, r2
 800803c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	4a2f      	ldr	r2, [pc, #188]	; (8008100 <TIM_Base_SetConfig+0x114>)
 8008042:	4293      	cmp	r3, r2
 8008044:	d01f      	beq.n	8008086 <TIM_Base_SetConfig+0x9a>
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800804c:	d01b      	beq.n	8008086 <TIM_Base_SetConfig+0x9a>
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	4a2c      	ldr	r2, [pc, #176]	; (8008104 <TIM_Base_SetConfig+0x118>)
 8008052:	4293      	cmp	r3, r2
 8008054:	d017      	beq.n	8008086 <TIM_Base_SetConfig+0x9a>
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	4a2b      	ldr	r2, [pc, #172]	; (8008108 <TIM_Base_SetConfig+0x11c>)
 800805a:	4293      	cmp	r3, r2
 800805c:	d013      	beq.n	8008086 <TIM_Base_SetConfig+0x9a>
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	4a2a      	ldr	r2, [pc, #168]	; (800810c <TIM_Base_SetConfig+0x120>)
 8008062:	4293      	cmp	r3, r2
 8008064:	d00f      	beq.n	8008086 <TIM_Base_SetConfig+0x9a>
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	4a29      	ldr	r2, [pc, #164]	; (8008110 <TIM_Base_SetConfig+0x124>)
 800806a:	4293      	cmp	r3, r2
 800806c:	d00b      	beq.n	8008086 <TIM_Base_SetConfig+0x9a>
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	4a28      	ldr	r2, [pc, #160]	; (8008114 <TIM_Base_SetConfig+0x128>)
 8008072:	4293      	cmp	r3, r2
 8008074:	d007      	beq.n	8008086 <TIM_Base_SetConfig+0x9a>
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	4a27      	ldr	r2, [pc, #156]	; (8008118 <TIM_Base_SetConfig+0x12c>)
 800807a:	4293      	cmp	r3, r2
 800807c:	d003      	beq.n	8008086 <TIM_Base_SetConfig+0x9a>
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	4a26      	ldr	r2, [pc, #152]	; (800811c <TIM_Base_SetConfig+0x130>)
 8008082:	4293      	cmp	r3, r2
 8008084:	d108      	bne.n	8008098 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800808c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800808e:	683b      	ldr	r3, [r7, #0]
 8008090:	68db      	ldr	r3, [r3, #12]
 8008092:	68fa      	ldr	r2, [r7, #12]
 8008094:	4313      	orrs	r3, r2
 8008096:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800809e:	683b      	ldr	r3, [r7, #0]
 80080a0:	695b      	ldr	r3, [r3, #20]
 80080a2:	4313      	orrs	r3, r2
 80080a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	68fa      	ldr	r2, [r7, #12]
 80080aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80080ac:	683b      	ldr	r3, [r7, #0]
 80080ae:	689a      	ldr	r2, [r3, #8]
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80080b4:	683b      	ldr	r3, [r7, #0]
 80080b6:	681a      	ldr	r2, [r3, #0]
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	4a10      	ldr	r2, [pc, #64]	; (8008100 <TIM_Base_SetConfig+0x114>)
 80080c0:	4293      	cmp	r3, r2
 80080c2:	d00f      	beq.n	80080e4 <TIM_Base_SetConfig+0xf8>
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	4a12      	ldr	r2, [pc, #72]	; (8008110 <TIM_Base_SetConfig+0x124>)
 80080c8:	4293      	cmp	r3, r2
 80080ca:	d00b      	beq.n	80080e4 <TIM_Base_SetConfig+0xf8>
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	4a11      	ldr	r2, [pc, #68]	; (8008114 <TIM_Base_SetConfig+0x128>)
 80080d0:	4293      	cmp	r3, r2
 80080d2:	d007      	beq.n	80080e4 <TIM_Base_SetConfig+0xf8>
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	4a10      	ldr	r2, [pc, #64]	; (8008118 <TIM_Base_SetConfig+0x12c>)
 80080d8:	4293      	cmp	r3, r2
 80080da:	d003      	beq.n	80080e4 <TIM_Base_SetConfig+0xf8>
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	4a0f      	ldr	r2, [pc, #60]	; (800811c <TIM_Base_SetConfig+0x130>)
 80080e0:	4293      	cmp	r3, r2
 80080e2:	d103      	bne.n	80080ec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80080e4:	683b      	ldr	r3, [r7, #0]
 80080e6:	691a      	ldr	r2, [r3, #16]
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	2201      	movs	r2, #1
 80080f0:	615a      	str	r2, [r3, #20]
}
 80080f2:	bf00      	nop
 80080f4:	3714      	adds	r7, #20
 80080f6:	46bd      	mov	sp, r7
 80080f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fc:	4770      	bx	lr
 80080fe:	bf00      	nop
 8008100:	40012c00 	.word	0x40012c00
 8008104:	40000400 	.word	0x40000400
 8008108:	40000800 	.word	0x40000800
 800810c:	40000c00 	.word	0x40000c00
 8008110:	40013400 	.word	0x40013400
 8008114:	40014000 	.word	0x40014000
 8008118:	40014400 	.word	0x40014400
 800811c:	40014800 	.word	0x40014800

08008120 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008120:	b480      	push	{r7}
 8008122:	b083      	sub	sp, #12
 8008124:	af00      	add	r7, sp, #0
 8008126:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008128:	bf00      	nop
 800812a:	370c      	adds	r7, #12
 800812c:	46bd      	mov	sp, r7
 800812e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008132:	4770      	bx	lr

08008134 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008134:	b480      	push	{r7}
 8008136:	b083      	sub	sp, #12
 8008138:	af00      	add	r7, sp, #0
 800813a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800813c:	bf00      	nop
 800813e:	370c      	adds	r7, #12
 8008140:	46bd      	mov	sp, r7
 8008142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008146:	4770      	bx	lr

08008148 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008148:	b480      	push	{r7}
 800814a:	b083      	sub	sp, #12
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008150:	bf00      	nop
 8008152:	370c      	adds	r7, #12
 8008154:	46bd      	mov	sp, r7
 8008156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815a:	4770      	bx	lr

0800815c <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800815c:	b084      	sub	sp, #16
 800815e:	b480      	push	{r7}
 8008160:	b085      	sub	sp, #20
 8008162:	af00      	add	r7, sp, #0
 8008164:	6078      	str	r0, [r7, #4]
 8008166:	f107 001c 	add.w	r0, r7, #28
 800816a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800816e:	2300      	movs	r3, #0
 8008170:	60fb      	str	r3, [r7, #12]

  /* Set SDMMC configuration parameters */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  tmpreg |= Init.ClockBypass;
#endif
  tmpreg |= (Init.ClockEdge           |\
 8008172:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 8008174:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8008176:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8008178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      |\
 800817a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800817c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             |\
 800817e:	431a      	orrs	r2, r3
             Init.ClockDiv
 8008180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl |\
 8008182:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8008184:	68fa      	ldr	r2, [r7, #12]
 8008186:	4313      	orrs	r3, r2
 8008188:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	685a      	ldr	r2, [r3, #4]
 800818e:	4b07      	ldr	r3, [pc, #28]	; (80081ac <SDMMC_Init+0x50>)
 8008190:	4013      	ands	r3, r2
 8008192:	68fa      	ldr	r2, [r7, #12]
 8008194:	431a      	orrs	r2, r3
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800819a:	2300      	movs	r3, #0
}
 800819c:	4618      	mov	r0, r3
 800819e:	3714      	adds	r7, #20
 80081a0:	46bd      	mov	sp, r7
 80081a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a6:	b004      	add	sp, #16
 80081a8:	4770      	bx	lr
 80081aa:	bf00      	nop
 80081ac:	ffc02c00 	.word	0xffc02c00

080081b0 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 80081b0:	b480      	push	{r7}
 80081b2:	b083      	sub	sp, #12
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80081be:	4618      	mov	r0, r3
 80081c0:	370c      	adds	r7, #12
 80081c2:	46bd      	mov	sp, r7
 80081c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c8:	4770      	bx	lr

080081ca <SDMMC_WriteFIFO>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pWriteData pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 80081ca:	b480      	push	{r7}
 80081cc:	b083      	sub	sp, #12
 80081ce:	af00      	add	r7, sp, #0
 80081d0:	6078      	str	r0, [r7, #4]
 80081d2:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 80081d4:	683b      	ldr	r3, [r7, #0]
 80081d6:	681a      	ldr	r2, [r3, #0]
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80081de:	2300      	movs	r3, #0
}
 80081e0:	4618      	mov	r0, r3
 80081e2:	370c      	adds	r7, #12
 80081e4:	46bd      	mov	sp, r7
 80081e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ea:	4770      	bx	lr

080081ec <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 80081ec:	b580      	push	{r7, lr}
 80081ee:	b082      	sub	sp, #8
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	f043 0203 	orr.w	r2, r3, #3
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	601a      	str	r2, [r3, #0]
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8008200:	2002      	movs	r0, #2
 8008202:	f7f9 f845 	bl	8001290 <HAL_Delay>

  return HAL_OK;
 8008206:	2300      	movs	r3, #0
}
 8008208:	4618      	mov	r0, r3
 800820a:	3708      	adds	r7, #8
 800820c:	46bd      	mov	sp, r7
 800820e:	bd80      	pop	{r7, pc}

08008210 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8008210:	b480      	push	{r7}
 8008212:	b083      	sub	sp, #12
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	f003 0303 	and.w	r3, r3, #3
}
 8008220:	4618      	mov	r0, r3
 8008222:	370c      	adds	r7, #12
 8008224:	46bd      	mov	sp, r7
 8008226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800822a:	4770      	bx	lr

0800822c <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800822c:	b480      	push	{r7}
 800822e:	b085      	sub	sp, #20
 8008230:	af00      	add	r7, sp, #0
 8008232:	6078      	str	r0, [r7, #4]
 8008234:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8008236:	2300      	movs	r3, #0
 8008238:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800823a:	683b      	ldr	r3, [r7, #0]
 800823c:	681a      	ldr	r2, [r3, #0]
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008242:	683b      	ldr	r3, [r7, #0]
 8008244:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8008246:	683b      	ldr	r3, [r7, #0]
 8008248:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800824a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800824c:	683b      	ldr	r3, [r7, #0]
 800824e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8008250:	431a      	orrs	r2, r3
                       Command->CPSM);
 8008252:	683b      	ldr	r3, [r7, #0]
 8008254:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8008256:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008258:	68fa      	ldr	r2, [r7, #12]
 800825a:	4313      	orrs	r3, r2
 800825c:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	68da      	ldr	r2, [r3, #12]
 8008262:	4b06      	ldr	r3, [pc, #24]	; (800827c <SDMMC_SendCommand+0x50>)
 8008264:	4013      	ands	r3, r2
 8008266:	68fa      	ldr	r2, [r7, #12]
 8008268:	431a      	orrs	r2, r3
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800826e:	2300      	movs	r3, #0
}
 8008270:	4618      	mov	r0, r3
 8008272:	3714      	adds	r7, #20
 8008274:	46bd      	mov	sp, r7
 8008276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827a:	4770      	bx	lr
 800827c:	fffee0c0 	.word	0xfffee0c0

08008280 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8008280:	b480      	push	{r7}
 8008282:	b083      	sub	sp, #12
 8008284:	af00      	add	r7, sp, #0
 8008286:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	691b      	ldr	r3, [r3, #16]
 800828c:	b2db      	uxtb	r3, r3
}
 800828e:	4618      	mov	r0, r3
 8008290:	370c      	adds	r7, #12
 8008292:	46bd      	mov	sp, r7
 8008294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008298:	4770      	bx	lr

0800829a <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800829a:	b480      	push	{r7}
 800829c:	b085      	sub	sp, #20
 800829e:	af00      	add	r7, sp, #0
 80082a0:	6078      	str	r0, [r7, #4]
 80082a2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	3314      	adds	r3, #20
 80082a8:	461a      	mov	r2, r3
 80082aa:	683b      	ldr	r3, [r7, #0]
 80082ac:	4413      	add	r3, r2
 80082ae:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	681b      	ldr	r3, [r3, #0]
}
 80082b4:	4618      	mov	r0, r3
 80082b6:	3714      	adds	r7, #20
 80082b8:	46bd      	mov	sp, r7
 80082ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082be:	4770      	bx	lr

080082c0 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 80082c0:	b480      	push	{r7}
 80082c2:	b085      	sub	sp, #20
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	6078      	str	r0, [r7, #4]
 80082c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80082ca:	2300      	movs	r3, #0
 80082cc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 80082ce:	683b      	ldr	r3, [r7, #0]
 80082d0:	681a      	ldr	r2, [r3, #0]
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 80082d6:	683b      	ldr	r3, [r7, #0]
 80082d8:	685a      	ldr	r2, [r3, #4]
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80082de:	683b      	ldr	r3, [r7, #0]
 80082e0:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80082e2:	683b      	ldr	r3, [r7, #0]
 80082e4:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80082e6:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80082e8:	683b      	ldr	r3, [r7, #0]
 80082ea:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80082ec:	431a      	orrs	r2, r3
                       Data->DPSM);
 80082ee:	683b      	ldr	r3, [r7, #0]
 80082f0:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80082f2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80082f4:	68fa      	ldr	r2, [r7, #12]
 80082f6:	4313      	orrs	r3, r2
 80082f8:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082fe:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	431a      	orrs	r2, r3
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800830a:	2300      	movs	r3, #0

}
 800830c:	4618      	mov	r0, r3
 800830e:	3714      	adds	r7, #20
 8008310:	46bd      	mov	sp, r7
 8008312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008316:	4770      	bx	lr

08008318 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8008318:	b580      	push	{r7, lr}
 800831a:	b088      	sub	sp, #32
 800831c:	af00      	add	r7, sp, #0
 800831e:	6078      	str	r0, [r7, #4]
 8008320:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8008322:	683b      	ldr	r3, [r7, #0]
 8008324:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8008326:	2310      	movs	r3, #16
 8008328:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800832a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800832e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008330:	2300      	movs	r3, #0
 8008332:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008334:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008338:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800833a:	f107 0308 	add.w	r3, r7, #8
 800833e:	4619      	mov	r1, r3
 8008340:	6878      	ldr	r0, [r7, #4]
 8008342:	f7ff ff73 	bl	800822c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8008346:	f241 3288 	movw	r2, #5000	; 0x1388
 800834a:	2110      	movs	r1, #16
 800834c:	6878      	ldr	r0, [r7, #4]
 800834e:	f000 fa7b 	bl	8008848 <SDMMC_GetCmdResp1>
 8008352:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008354:	69fb      	ldr	r3, [r7, #28]
}
 8008356:	4618      	mov	r0, r3
 8008358:	3720      	adds	r7, #32
 800835a:	46bd      	mov	sp, r7
 800835c:	bd80      	pop	{r7, pc}

0800835e <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800835e:	b580      	push	{r7, lr}
 8008360:	b088      	sub	sp, #32
 8008362:	af00      	add	r7, sp, #0
 8008364:	6078      	str	r0, [r7, #4]
 8008366:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8008368:	683b      	ldr	r3, [r7, #0]
 800836a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800836c:	2311      	movs	r3, #17
 800836e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008370:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008374:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008376:	2300      	movs	r3, #0
 8008378:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800837a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800837e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008380:	f107 0308 	add.w	r3, r7, #8
 8008384:	4619      	mov	r1, r3
 8008386:	6878      	ldr	r0, [r7, #4]
 8008388:	f7ff ff50 	bl	800822c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800838c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008390:	2111      	movs	r1, #17
 8008392:	6878      	ldr	r0, [r7, #4]
 8008394:	f000 fa58 	bl	8008848 <SDMMC_GetCmdResp1>
 8008398:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800839a:	69fb      	ldr	r3, [r7, #28]
}
 800839c:	4618      	mov	r0, r3
 800839e:	3720      	adds	r7, #32
 80083a0:	46bd      	mov	sp, r7
 80083a2:	bd80      	pop	{r7, pc}

080083a4 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80083a4:	b580      	push	{r7, lr}
 80083a6:	b088      	sub	sp, #32
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	6078      	str	r0, [r7, #4]
 80083ac:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80083ae:	683b      	ldr	r3, [r7, #0]
 80083b0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80083b2:	2312      	movs	r3, #18
 80083b4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80083b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80083ba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80083bc:	2300      	movs	r3, #0
 80083be:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80083c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80083c4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80083c6:	f107 0308 	add.w	r3, r7, #8
 80083ca:	4619      	mov	r1, r3
 80083cc:	6878      	ldr	r0, [r7, #4]
 80083ce:	f7ff ff2d 	bl	800822c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80083d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80083d6:	2112      	movs	r1, #18
 80083d8:	6878      	ldr	r0, [r7, #4]
 80083da:	f000 fa35 	bl	8008848 <SDMMC_GetCmdResp1>
 80083de:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80083e0:	69fb      	ldr	r3, [r7, #28]
}
 80083e2:	4618      	mov	r0, r3
 80083e4:	3720      	adds	r7, #32
 80083e6:	46bd      	mov	sp, r7
 80083e8:	bd80      	pop	{r7, pc}

080083ea <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80083ea:	b580      	push	{r7, lr}
 80083ec:	b088      	sub	sp, #32
 80083ee:	af00      	add	r7, sp, #0
 80083f0:	6078      	str	r0, [r7, #4]
 80083f2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80083f4:	683b      	ldr	r3, [r7, #0]
 80083f6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80083f8:	2318      	movs	r3, #24
 80083fa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80083fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008400:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008402:	2300      	movs	r3, #0
 8008404:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008406:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800840a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800840c:	f107 0308 	add.w	r3, r7, #8
 8008410:	4619      	mov	r1, r3
 8008412:	6878      	ldr	r0, [r7, #4]
 8008414:	f7ff ff0a 	bl	800822c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8008418:	f241 3288 	movw	r2, #5000	; 0x1388
 800841c:	2118      	movs	r1, #24
 800841e:	6878      	ldr	r0, [r7, #4]
 8008420:	f000 fa12 	bl	8008848 <SDMMC_GetCmdResp1>
 8008424:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008426:	69fb      	ldr	r3, [r7, #28]
}
 8008428:	4618      	mov	r0, r3
 800842a:	3720      	adds	r7, #32
 800842c:	46bd      	mov	sp, r7
 800842e:	bd80      	pop	{r7, pc}

08008430 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8008430:	b580      	push	{r7, lr}
 8008432:	b088      	sub	sp, #32
 8008434:	af00      	add	r7, sp, #0
 8008436:	6078      	str	r0, [r7, #4]
 8008438:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800843a:	683b      	ldr	r3, [r7, #0]
 800843c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800843e:	2319      	movs	r3, #25
 8008440:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008442:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008446:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008448:	2300      	movs	r3, #0
 800844a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800844c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008450:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008452:	f107 0308 	add.w	r3, r7, #8
 8008456:	4619      	mov	r1, r3
 8008458:	6878      	ldr	r0, [r7, #4]
 800845a:	f7ff fee7 	bl	800822c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800845e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008462:	2119      	movs	r1, #25
 8008464:	6878      	ldr	r0, [r7, #4]
 8008466:	f000 f9ef 	bl	8008848 <SDMMC_GetCmdResp1>
 800846a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800846c:	69fb      	ldr	r3, [r7, #28]
}
 800846e:	4618      	mov	r0, r3
 8008470:	3720      	adds	r7, #32
 8008472:	46bd      	mov	sp, r7
 8008474:	bd80      	pop	{r7, pc}
	...

08008478 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8008478:	b580      	push	{r7, lr}
 800847a:	b088      	sub	sp, #32
 800847c:	af00      	add	r7, sp, #0
 800847e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8008480:	2300      	movs	r3, #0
 8008482:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8008484:	230c      	movs	r3, #12
 8008486:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008488:	f44f 7380 	mov.w	r3, #256	; 0x100
 800848c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800848e:	2300      	movs	r3, #0
 8008490:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008492:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008496:	61bb      	str	r3, [r7, #24]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	68db      	ldr	r3, [r3, #12]
 800849c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	68db      	ldr	r3, [r3, #12]
 80084a8:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80084b0:	f107 0308 	add.w	r3, r7, #8
 80084b4:	4619      	mov	r1, r3
 80084b6:	6878      	ldr	r0, [r7, #4]
 80084b8:	f7ff feb8 	bl	800822c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 80084bc:	4a08      	ldr	r2, [pc, #32]	; (80084e0 <SDMMC_CmdStopTransfer+0x68>)
 80084be:	210c      	movs	r1, #12
 80084c0:	6878      	ldr	r0, [r7, #4]
 80084c2:	f000 f9c1 	bl	8008848 <SDMMC_GetCmdResp1>
 80084c6:	61f8      	str	r0, [r7, #28]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	68db      	ldr	r3, [r3, #12]
 80084cc:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  return errorstate;
 80084d4:	69fb      	ldr	r3, [r7, #28]
}
 80084d6:	4618      	mov	r0, r3
 80084d8:	3720      	adds	r7, #32
 80084da:	46bd      	mov	sp, r7
 80084dc:	bd80      	pop	{r7, pc}
 80084de:	bf00      	nop
 80084e0:	05f5e100 	.word	0x05f5e100

080084e4 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  addr Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 80084e4:	b580      	push	{r7, lr}
 80084e6:	b08a      	sub	sp, #40	; 0x28
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	60f8      	str	r0, [r7, #12]
 80084ec:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80084f0:	683b      	ldr	r3, [r7, #0]
 80084f2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80084f4:	2307      	movs	r3, #7
 80084f6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80084f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80084fc:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80084fe:	2300      	movs	r3, #0
 8008500:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008502:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008506:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008508:	f107 0310 	add.w	r3, r7, #16
 800850c:	4619      	mov	r1, r3
 800850e:	68f8      	ldr	r0, [r7, #12]
 8008510:	f7ff fe8c 	bl	800822c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8008514:	f241 3288 	movw	r2, #5000	; 0x1388
 8008518:	2107      	movs	r1, #7
 800851a:	68f8      	ldr	r0, [r7, #12]
 800851c:	f000 f994 	bl	8008848 <SDMMC_GetCmdResp1>
 8008520:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8008522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008524:	4618      	mov	r0, r3
 8008526:	3728      	adds	r7, #40	; 0x28
 8008528:	46bd      	mov	sp, r7
 800852a:	bd80      	pop	{r7, pc}

0800852c <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800852c:	b580      	push	{r7, lr}
 800852e:	b088      	sub	sp, #32
 8008530:	af00      	add	r7, sp, #0
 8008532:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8008534:	2300      	movs	r3, #0
 8008536:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8008538:	2300      	movs	r3, #0
 800853a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800853c:	2300      	movs	r3, #0
 800853e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008540:	2300      	movs	r3, #0
 8008542:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008544:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008548:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800854a:	f107 0308 	add.w	r3, r7, #8
 800854e:	4619      	mov	r1, r3
 8008550:	6878      	ldr	r0, [r7, #4]
 8008552:	f7ff fe6b 	bl	800822c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8008556:	6878      	ldr	r0, [r7, #4]
 8008558:	f000 fbb8 	bl	8008ccc <SDMMC_GetCmdError>
 800855c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800855e:	69fb      	ldr	r3, [r7, #28]
}
 8008560:	4618      	mov	r0, r3
 8008562:	3720      	adds	r7, #32
 8008564:	46bd      	mov	sp, r7
 8008566:	bd80      	pop	{r7, pc}

08008568 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8008568:	b580      	push	{r7, lr}
 800856a:	b088      	sub	sp, #32
 800856c:	af00      	add	r7, sp, #0
 800856e:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8008570:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8008574:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8008576:	2308      	movs	r3, #8
 8008578:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800857a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800857e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008580:	2300      	movs	r3, #0
 8008582:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008584:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008588:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800858a:	f107 0308 	add.w	r3, r7, #8
 800858e:	4619      	mov	r1, r3
 8008590:	6878      	ldr	r0, [r7, #4]
 8008592:	f7ff fe4b 	bl	800822c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8008596:	6878      	ldr	r0, [r7, #4]
 8008598:	f000 fb4a 	bl	8008c30 <SDMMC_GetCmdResp7>
 800859c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800859e:	69fb      	ldr	r3, [r7, #28]
}
 80085a0:	4618      	mov	r0, r3
 80085a2:	3720      	adds	r7, #32
 80085a4:	46bd      	mov	sp, r7
 80085a6:	bd80      	pop	{r7, pc}

080085a8 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80085a8:	b580      	push	{r7, lr}
 80085aa:	b088      	sub	sp, #32
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	6078      	str	r0, [r7, #4]
 80085b0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80085b2:	683b      	ldr	r3, [r7, #0]
 80085b4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80085b6:	2337      	movs	r3, #55	; 0x37
 80085b8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80085ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80085be:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80085c0:	2300      	movs	r3, #0
 80085c2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80085c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80085c8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80085ca:	f107 0308 	add.w	r3, r7, #8
 80085ce:	4619      	mov	r1, r3
 80085d0:	6878      	ldr	r0, [r7, #4]
 80085d2:	f7ff fe2b 	bl	800822c <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 80085d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80085da:	2137      	movs	r1, #55	; 0x37
 80085dc:	6878      	ldr	r0, [r7, #4]
 80085de:	f000 f933 	bl	8008848 <SDMMC_GetCmdResp1>
 80085e2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80085e4:	69fb      	ldr	r3, [r7, #28]
}
 80085e6:	4618      	mov	r0, r3
 80085e8:	3720      	adds	r7, #32
 80085ea:	46bd      	mov	sp, r7
 80085ec:	bd80      	pop	{r7, pc}

080085ee <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80085ee:	b580      	push	{r7, lr}
 80085f0:	b088      	sub	sp, #32
 80085f2:	af00      	add	r7, sp, #0
 80085f4:	6078      	str	r0, [r7, #4]
 80085f6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  sdmmc_cmdinit.Argument         = Argument;
 80085f8:	683b      	ldr	r3, [r7, #0]
 80085fa:	60bb      	str	r3, [r7, #8]
#else
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80085fc:	2329      	movs	r3, #41	; 0x29
 80085fe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008600:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008604:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008606:	2300      	movs	r3, #0
 8008608:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800860a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800860e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008610:	f107 0308 	add.w	r3, r7, #8
 8008614:	4619      	mov	r1, r3
 8008616:	6878      	ldr	r0, [r7, #4]
 8008618:	f7ff fe08 	bl	800822c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800861c:	6878      	ldr	r0, [r7, #4]
 800861e:	f000 fa4f 	bl	8008ac0 <SDMMC_GetCmdResp3>
 8008622:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008624:	69fb      	ldr	r3, [r7, #28]
}
 8008626:	4618      	mov	r0, r3
 8008628:	3720      	adds	r7, #32
 800862a:	46bd      	mov	sp, r7
 800862c:	bd80      	pop	{r7, pc}

0800862e <SDMMC_CmdBusWidth>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  BusWidth BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800862e:	b580      	push	{r7, lr}
 8008630:	b088      	sub	sp, #32
 8008632:	af00      	add	r7, sp, #0
 8008634:	6078      	str	r0, [r7, #4]
 8008636:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8008638:	683b      	ldr	r3, [r7, #0]
 800863a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800863c:	2306      	movs	r3, #6
 800863e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008640:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008644:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008646:	2300      	movs	r3, #0
 8008648:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800864a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800864e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008650:	f107 0308 	add.w	r3, r7, #8
 8008654:	4619      	mov	r1, r3
 8008656:	6878      	ldr	r0, [r7, #4]
 8008658:	f7ff fde8 	bl	800822c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800865c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008660:	2106      	movs	r1, #6
 8008662:	6878      	ldr	r0, [r7, #4]
 8008664:	f000 f8f0 	bl	8008848 <SDMMC_GetCmdResp1>
 8008668:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800866a:	69fb      	ldr	r3, [r7, #28]
}
 800866c:	4618      	mov	r0, r3
 800866e:	3720      	adds	r7, #32
 8008670:	46bd      	mov	sp, r7
 8008672:	bd80      	pop	{r7, pc}

08008674 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8008674:	b580      	push	{r7, lr}
 8008676:	b088      	sub	sp, #32
 8008678:	af00      	add	r7, sp, #0
 800867a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800867c:	2300      	movs	r3, #0
 800867e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8008680:	2333      	movs	r3, #51	; 0x33
 8008682:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008684:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008688:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800868a:	2300      	movs	r3, #0
 800868c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800868e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008692:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008694:	f107 0308 	add.w	r3, r7, #8
 8008698:	4619      	mov	r1, r3
 800869a:	6878      	ldr	r0, [r7, #4]
 800869c:	f7ff fdc6 	bl	800822c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 80086a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80086a4:	2133      	movs	r1, #51	; 0x33
 80086a6:	6878      	ldr	r0, [r7, #4]
 80086a8:	f000 f8ce 	bl	8008848 <SDMMC_GetCmdResp1>
 80086ac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80086ae:	69fb      	ldr	r3, [r7, #28]
}
 80086b0:	4618      	mov	r0, r3
 80086b2:	3720      	adds	r7, #32
 80086b4:	46bd      	mov	sp, r7
 80086b6:	bd80      	pop	{r7, pc}

080086b8 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 80086b8:	b580      	push	{r7, lr}
 80086ba:	b088      	sub	sp, #32
 80086bc:	af00      	add	r7, sp, #0
 80086be:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80086c0:	2300      	movs	r3, #0
 80086c2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80086c4:	2302      	movs	r3, #2
 80086c6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80086c8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80086cc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80086ce:	2300      	movs	r3, #0
 80086d0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80086d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80086d6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80086d8:	f107 0308 	add.w	r3, r7, #8
 80086dc:	4619      	mov	r1, r3
 80086de:	6878      	ldr	r0, [r7, #4]
 80086e0:	f7ff fda4 	bl	800822c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80086e4:	6878      	ldr	r0, [r7, #4]
 80086e6:	f000 f9a1 	bl	8008a2c <SDMMC_GetCmdResp2>
 80086ea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80086ec:	69fb      	ldr	r3, [r7, #28]
}
 80086ee:	4618      	mov	r0, r3
 80086f0:	3720      	adds	r7, #32
 80086f2:	46bd      	mov	sp, r7
 80086f4:	bd80      	pop	{r7, pc}

080086f6 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80086f6:	b580      	push	{r7, lr}
 80086f8:	b088      	sub	sp, #32
 80086fa:	af00      	add	r7, sp, #0
 80086fc:	6078      	str	r0, [r7, #4]
 80086fe:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8008700:	683b      	ldr	r3, [r7, #0]
 8008702:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8008704:	2309      	movs	r3, #9
 8008706:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8008708:	f44f 7340 	mov.w	r3, #768	; 0x300
 800870c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800870e:	2300      	movs	r3, #0
 8008710:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008712:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008716:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008718:	f107 0308 	add.w	r3, r7, #8
 800871c:	4619      	mov	r1, r3
 800871e:	6878      	ldr	r0, [r7, #4]
 8008720:	f7ff fd84 	bl	800822c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8008724:	6878      	ldr	r0, [r7, #4]
 8008726:	f000 f981 	bl	8008a2c <SDMMC_GetCmdResp2>
 800872a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800872c:	69fb      	ldr	r3, [r7, #28]
}
 800872e:	4618      	mov	r0, r3
 8008730:	3720      	adds	r7, #32
 8008732:	46bd      	mov	sp, r7
 8008734:	bd80      	pop	{r7, pc}

08008736 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pRCA Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8008736:	b580      	push	{r7, lr}
 8008738:	b088      	sub	sp, #32
 800873a:	af00      	add	r7, sp, #0
 800873c:	6078      	str	r0, [r7, #4]
 800873e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8008740:	2300      	movs	r3, #0
 8008742:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8008744:	2303      	movs	r3, #3
 8008746:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008748:	f44f 7380 	mov.w	r3, #256	; 0x100
 800874c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800874e:	2300      	movs	r3, #0
 8008750:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008752:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008756:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008758:	f107 0308 	add.w	r3, r7, #8
 800875c:	4619      	mov	r1, r3
 800875e:	6878      	ldr	r0, [r7, #4]
 8008760:	f7ff fd64 	bl	800822c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8008764:	683a      	ldr	r2, [r7, #0]
 8008766:	2103      	movs	r1, #3
 8008768:	6878      	ldr	r0, [r7, #4]
 800876a:	f000 f9e9 	bl	8008b40 <SDMMC_GetCmdResp6>
 800876e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008770:	69fb      	ldr	r3, [r7, #28]
}
 8008772:	4618      	mov	r0, r3
 8008774:	3720      	adds	r7, #32
 8008776:	46bd      	mov	sp, r7
 8008778:	bd80      	pop	{r7, pc}

0800877a <SDMMC_CmdSendStatus>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800877a:	b580      	push	{r7, lr}
 800877c:	b088      	sub	sp, #32
 800877e:	af00      	add	r7, sp, #0
 8008780:	6078      	str	r0, [r7, #4]
 8008782:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8008784:	683b      	ldr	r3, [r7, #0]
 8008786:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8008788:	230d      	movs	r3, #13
 800878a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800878c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008790:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008792:	2300      	movs	r3, #0
 8008794:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008796:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800879a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800879c:	f107 0308 	add.w	r3, r7, #8
 80087a0:	4619      	mov	r1, r3
 80087a2:	6878      	ldr	r0, [r7, #4]
 80087a4:	f7ff fd42 	bl	800822c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 80087a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80087ac:	210d      	movs	r1, #13
 80087ae:	6878      	ldr	r0, [r7, #4]
 80087b0:	f000 f84a 	bl	8008848 <SDMMC_GetCmdResp1>
 80087b4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80087b6:	69fb      	ldr	r3, [r7, #28]
}
 80087b8:	4618      	mov	r0, r3
 80087ba:	3720      	adds	r7, #32
 80087bc:	46bd      	mov	sp, r7
 80087be:	bd80      	pop	{r7, pc}

080087c0 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 80087c0:	b580      	push	{r7, lr}
 80087c2:	b088      	sub	sp, #32
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 80087c8:	2300      	movs	r3, #0
 80087ca:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 80087cc:	230d      	movs	r3, #13
 80087ce:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80087d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80087d4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80087d6:	2300      	movs	r3, #0
 80087d8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80087da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80087de:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80087e0:	f107 0308 	add.w	r3, r7, #8
 80087e4:	4619      	mov	r1, r3
 80087e6:	6878      	ldr	r0, [r7, #4]
 80087e8:	f7ff fd20 	bl	800822c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 80087ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80087f0:	210d      	movs	r1, #13
 80087f2:	6878      	ldr	r0, [r7, #4]
 80087f4:	f000 f828 	bl	8008848 <SDMMC_GetCmdResp1>
 80087f8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80087fa:	69fb      	ldr	r3, [r7, #28]
}
 80087fc:	4618      	mov	r0, r3
 80087fe:	3720      	adds	r7, #32
 8008800:	46bd      	mov	sp, r7
 8008802:	bd80      	pop	{r7, pc}

08008804 <SDMMC_CmdVoltageSwitch>:
  *         condition register (OCR)
  * @param  None
  * @retval HAL status
  */
uint32_t SDMMC_CmdVoltageSwitch(SDMMC_TypeDef *SDMMCx)
{
 8008804:	b580      	push	{r7, lr}
 8008806:	b088      	sub	sp, #32
 8008808:	af00      	add	r7, sp, #0
 800880a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0x00000000;
 800880c:	2300      	movs	r3, #0
 800880e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 8008810:	230b      	movs	r3, #11
 8008812:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008814:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008818:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800881a:	2300      	movs	r3, #0
 800881c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800881e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008822:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008824:	f107 0308 	add.w	r3, r7, #8
 8008828:	4619      	mov	r1, r3
 800882a:	6878      	ldr	r0, [r7, #4]
 800882c:	f7ff fcfe 	bl	800822c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 8008830:	f241 3288 	movw	r2, #5000	; 0x1388
 8008834:	210b      	movs	r1, #11
 8008836:	6878      	ldr	r0, [r7, #4]
 8008838:	f000 f806 	bl	8008848 <SDMMC_GetCmdResp1>
 800883c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800883e:	69fb      	ldr	r3, [r7, #28]
}
 8008840:	4618      	mov	r0, r3
 8008842:	3720      	adds	r7, #32
 8008844:	46bd      	mov	sp, r7
 8008846:	bd80      	pop	{r7, pc}

08008848 <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8008848:	b580      	push	{r7, lr}
 800884a:	b088      	sub	sp, #32
 800884c:	af00      	add	r7, sp, #0
 800884e:	60f8      	str	r0, [r7, #12]
 8008850:	460b      	mov	r3, r1
 8008852:	607a      	str	r2, [r7, #4]
 8008854:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8008856:	4b70      	ldr	r3, [pc, #448]	; (8008a18 <SDMMC_GetCmdResp1+0x1d0>)
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	4a70      	ldr	r2, [pc, #448]	; (8008a1c <SDMMC_GetCmdResp1+0x1d4>)
 800885c:	fba2 2303 	umull	r2, r3, r2, r3
 8008860:	0a5a      	lsrs	r2, r3, #9
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	fb02 f303 	mul.w	r3, r2, r3
 8008868:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800886a:	69fb      	ldr	r3, [r7, #28]
 800886c:	1e5a      	subs	r2, r3, #1
 800886e:	61fa      	str	r2, [r7, #28]
 8008870:	2b00      	cmp	r3, #0
 8008872:	d102      	bne.n	800887a <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008874:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008878:	e0c9      	b.n	8008a0e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800887e:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8008880:	69ba      	ldr	r2, [r7, #24]
 8008882:	4b67      	ldr	r3, [pc, #412]	; (8008a20 <SDMMC_GetCmdResp1+0x1d8>)
 8008884:	4013      	ands	r3, r2
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8008886:	2b00      	cmp	r3, #0
 8008888:	d0ef      	beq.n	800886a <SDMMC_GetCmdResp1+0x22>
 800888a:	69bb      	ldr	r3, [r7, #24]
 800888c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8008890:	2b00      	cmp	r3, #0
 8008892:	d1ea      	bne.n	800886a <SDMMC_GetCmdResp1+0x22>
#else
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008898:	f003 0304 	and.w	r3, r3, #4
 800889c:	2b00      	cmp	r3, #0
 800889e:	d004      	beq.n	80088aa <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	2204      	movs	r2, #4
 80088a4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80088a6:	2304      	movs	r3, #4
 80088a8:	e0b1      	b.n	8008a0e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088ae:	f003 0301 	and.w	r3, r3, #1
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d004      	beq.n	80088c0 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	2201      	movs	r2, #1
 80088ba:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80088bc:	2301      	movs	r3, #1
 80088be:	e0a6      	b.n	8008a0e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	4a58      	ldr	r2, [pc, #352]	; (8008a24 <SDMMC_GetCmdResp1+0x1dc>)
 80088c4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80088c6:	68f8      	ldr	r0, [r7, #12]
 80088c8:	f7ff fcda 	bl	8008280 <SDMMC_GetCommandResponse>
 80088cc:	4603      	mov	r3, r0
 80088ce:	461a      	mov	r2, r3
 80088d0:	7afb      	ldrb	r3, [r7, #11]
 80088d2:	4293      	cmp	r3, r2
 80088d4:	d001      	beq.n	80088da <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80088d6:	2301      	movs	r3, #1
 80088d8:	e099      	b.n	8008a0e <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80088da:	2100      	movs	r1, #0
 80088dc:	68f8      	ldr	r0, [r7, #12]
 80088de:	f7ff fcdc 	bl	800829a <SDMMC_GetResponse>
 80088e2:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80088e4:	697a      	ldr	r2, [r7, #20]
 80088e6:	4b50      	ldr	r3, [pc, #320]	; (8008a28 <SDMMC_GetCmdResp1+0x1e0>)
 80088e8:	4013      	ands	r3, r2
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d101      	bne.n	80088f2 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80088ee:	2300      	movs	r3, #0
 80088f0:	e08d      	b.n	8008a0e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80088f2:	697b      	ldr	r3, [r7, #20]
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	da02      	bge.n	80088fe <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80088f8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80088fc:	e087      	b.n	8008a0e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80088fe:	697b      	ldr	r3, [r7, #20]
 8008900:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008904:	2b00      	cmp	r3, #0
 8008906:	d001      	beq.n	800890c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8008908:	2340      	movs	r3, #64	; 0x40
 800890a:	e080      	b.n	8008a0e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800890c:	697b      	ldr	r3, [r7, #20]
 800890e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008912:	2b00      	cmp	r3, #0
 8008914:	d001      	beq.n	800891a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8008916:	2380      	movs	r3, #128	; 0x80
 8008918:	e079      	b.n	8008a0e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800891a:	697b      	ldr	r3, [r7, #20]
 800891c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008920:	2b00      	cmp	r3, #0
 8008922:	d002      	beq.n	800892a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8008924:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008928:	e071      	b.n	8008a0e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800892a:	697b      	ldr	r3, [r7, #20]
 800892c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008930:	2b00      	cmp	r3, #0
 8008932:	d002      	beq.n	800893a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8008934:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008938:	e069      	b.n	8008a0e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800893a:	697b      	ldr	r3, [r7, #20]
 800893c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008940:	2b00      	cmp	r3, #0
 8008942:	d002      	beq.n	800894a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8008944:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008948:	e061      	b.n	8008a0e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800894a:	697b      	ldr	r3, [r7, #20]
 800894c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008950:	2b00      	cmp	r3, #0
 8008952:	d002      	beq.n	800895a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8008954:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008958:	e059      	b.n	8008a0e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800895a:	697b      	ldr	r3, [r7, #20]
 800895c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008960:	2b00      	cmp	r3, #0
 8008962:	d002      	beq.n	800896a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8008964:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008968:	e051      	b.n	8008a0e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800896a:	697b      	ldr	r3, [r7, #20]
 800896c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008970:	2b00      	cmp	r3, #0
 8008972:	d002      	beq.n	800897a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8008974:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008978:	e049      	b.n	8008a0e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800897a:	697b      	ldr	r3, [r7, #20]
 800897c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008980:	2b00      	cmp	r3, #0
 8008982:	d002      	beq.n	800898a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8008984:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008988:	e041      	b.n	8008a0e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800898a:	697b      	ldr	r3, [r7, #20]
 800898c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008990:	2b00      	cmp	r3, #0
 8008992:	d002      	beq.n	800899a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8008994:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008998:	e039      	b.n	8008a0e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800899a:	697b      	ldr	r3, [r7, #20]
 800899c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d002      	beq.n	80089aa <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80089a4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80089a8:	e031      	b.n	8008a0e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80089aa:	697b      	ldr	r3, [r7, #20]
 80089ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d002      	beq.n	80089ba <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80089b4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80089b8:	e029      	b.n	8008a0e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80089ba:	697b      	ldr	r3, [r7, #20]
 80089bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d002      	beq.n	80089ca <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80089c4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80089c8:	e021      	b.n	8008a0e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80089ca:	697b      	ldr	r3, [r7, #20]
 80089cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d002      	beq.n	80089da <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80089d4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80089d8:	e019      	b.n	8008a0e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80089da:	697b      	ldr	r3, [r7, #20]
 80089dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d002      	beq.n	80089ea <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80089e4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80089e8:	e011      	b.n	8008a0e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80089ea:	697b      	ldr	r3, [r7, #20]
 80089ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d002      	beq.n	80089fa <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80089f4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80089f8:	e009      	b.n	8008a0e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80089fa:	697b      	ldr	r3, [r7, #20]
 80089fc:	f003 0308 	and.w	r3, r3, #8
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d002      	beq.n	8008a0a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8008a04:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8008a08:	e001      	b.n	8008a0e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8008a0a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8008a0e:	4618      	mov	r0, r3
 8008a10:	3720      	adds	r7, #32
 8008a12:	46bd      	mov	sp, r7
 8008a14:	bd80      	pop	{r7, pc}
 8008a16:	bf00      	nop
 8008a18:	20000000 	.word	0x20000000
 8008a1c:	10624dd3 	.word	0x10624dd3
 8008a20:	00200045 	.word	0x00200045
 8008a24:	002000c5 	.word	0x002000c5
 8008a28:	fdffe008 	.word	0xfdffe008

08008a2c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8008a2c:	b480      	push	{r7}
 8008a2e:	b085      	sub	sp, #20
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008a34:	4b1f      	ldr	r3, [pc, #124]	; (8008ab4 <SDMMC_GetCmdResp2+0x88>)
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	4a1f      	ldr	r2, [pc, #124]	; (8008ab8 <SDMMC_GetCmdResp2+0x8c>)
 8008a3a:	fba2 2303 	umull	r2, r3, r2, r3
 8008a3e:	0a5b      	lsrs	r3, r3, #9
 8008a40:	f241 3288 	movw	r2, #5000	; 0x1388
 8008a44:	fb02 f303 	mul.w	r3, r2, r3
 8008a48:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	1e5a      	subs	r2, r3, #1
 8008a4e:	60fa      	str	r2, [r7, #12]
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d102      	bne.n	8008a5a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008a54:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008a58:	e026      	b.n	8008aa8 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a5e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008a60:	68bb      	ldr	r3, [r7, #8]
 8008a62:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d0ef      	beq.n	8008a4a <SDMMC_GetCmdResp2+0x1e>
 8008a6a:	68bb      	ldr	r3, [r7, #8]
 8008a6c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d1ea      	bne.n	8008a4a <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a78:	f003 0304 	and.w	r3, r3, #4
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d004      	beq.n	8008a8a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	2204      	movs	r2, #4
 8008a84:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008a86:	2304      	movs	r3, #4
 8008a88:	e00e      	b.n	8008aa8 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a8e:	f003 0301 	and.w	r3, r3, #1
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d004      	beq.n	8008aa0 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	2201      	movs	r2, #1
 8008a9a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008a9c:	2301      	movs	r3, #1
 8008a9e:	e003      	b.n	8008aa8 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	4a06      	ldr	r2, [pc, #24]	; (8008abc <SDMMC_GetCmdResp2+0x90>)
 8008aa4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8008aa6:	2300      	movs	r3, #0
}
 8008aa8:	4618      	mov	r0, r3
 8008aaa:	3714      	adds	r7, #20
 8008aac:	46bd      	mov	sp, r7
 8008aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab2:	4770      	bx	lr
 8008ab4:	20000000 	.word	0x20000000
 8008ab8:	10624dd3 	.word	0x10624dd3
 8008abc:	002000c5 	.word	0x002000c5

08008ac0 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8008ac0:	b480      	push	{r7}
 8008ac2:	b085      	sub	sp, #20
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008ac8:	4b1a      	ldr	r3, [pc, #104]	; (8008b34 <SDMMC_GetCmdResp3+0x74>)
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	4a1a      	ldr	r2, [pc, #104]	; (8008b38 <SDMMC_GetCmdResp3+0x78>)
 8008ace:	fba2 2303 	umull	r2, r3, r2, r3
 8008ad2:	0a5b      	lsrs	r3, r3, #9
 8008ad4:	f241 3288 	movw	r2, #5000	; 0x1388
 8008ad8:	fb02 f303 	mul.w	r3, r2, r3
 8008adc:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	1e5a      	subs	r2, r3, #1
 8008ae2:	60fa      	str	r2, [r7, #12]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d102      	bne.n	8008aee <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008ae8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008aec:	e01b      	b.n	8008b26 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008af2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008af4:	68bb      	ldr	r3, [r7, #8]
 8008af6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d0ef      	beq.n	8008ade <SDMMC_GetCmdResp3+0x1e>
 8008afe:	68bb      	ldr	r3, [r7, #8]
 8008b00:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d1ea      	bne.n	8008ade <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b0c:	f003 0304 	and.w	r3, r3, #4
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d004      	beq.n	8008b1e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	2204      	movs	r2, #4
 8008b18:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008b1a:	2304      	movs	r3, #4
 8008b1c:	e003      	b.n	8008b26 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	4a06      	ldr	r2, [pc, #24]	; (8008b3c <SDMMC_GetCmdResp3+0x7c>)
 8008b22:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8008b24:	2300      	movs	r3, #0
}
 8008b26:	4618      	mov	r0, r3
 8008b28:	3714      	adds	r7, #20
 8008b2a:	46bd      	mov	sp, r7
 8008b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b30:	4770      	bx	lr
 8008b32:	bf00      	nop
 8008b34:	20000000 	.word	0x20000000
 8008b38:	10624dd3 	.word	0x10624dd3
 8008b3c:	002000c5 	.word	0x002000c5

08008b40 <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8008b40:	b580      	push	{r7, lr}
 8008b42:	b088      	sub	sp, #32
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	60f8      	str	r0, [r7, #12]
 8008b48:	460b      	mov	r3, r1
 8008b4a:	607a      	str	r2, [r7, #4]
 8008b4c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008b4e:	4b35      	ldr	r3, [pc, #212]	; (8008c24 <SDMMC_GetCmdResp6+0xe4>)
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	4a35      	ldr	r2, [pc, #212]	; (8008c28 <SDMMC_GetCmdResp6+0xe8>)
 8008b54:	fba2 2303 	umull	r2, r3, r2, r3
 8008b58:	0a5b      	lsrs	r3, r3, #9
 8008b5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b5e:	fb02 f303 	mul.w	r3, r2, r3
 8008b62:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8008b64:	69fb      	ldr	r3, [r7, #28]
 8008b66:	1e5a      	subs	r2, r3, #1
 8008b68:	61fa      	str	r2, [r7, #28]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d102      	bne.n	8008b74 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008b6e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008b72:	e052      	b.n	8008c1a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b78:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008b7a:	69bb      	ldr	r3, [r7, #24]
 8008b7c:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d0ef      	beq.n	8008b64 <SDMMC_GetCmdResp6+0x24>
 8008b84:	69bb      	ldr	r3, [r7, #24]
 8008b86:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d1ea      	bne.n	8008b64 <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b92:	f003 0304 	and.w	r3, r3, #4
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d004      	beq.n	8008ba4 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	2204      	movs	r2, #4
 8008b9e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008ba0:	2304      	movs	r3, #4
 8008ba2:	e03a      	b.n	8008c1a <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ba8:	f003 0301 	and.w	r3, r3, #1
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d004      	beq.n	8008bba <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	2201      	movs	r2, #1
 8008bb4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008bb6:	2301      	movs	r3, #1
 8008bb8:	e02f      	b.n	8008c1a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8008bba:	68f8      	ldr	r0, [r7, #12]
 8008bbc:	f7ff fb60 	bl	8008280 <SDMMC_GetCommandResponse>
 8008bc0:	4603      	mov	r3, r0
 8008bc2:	461a      	mov	r2, r3
 8008bc4:	7afb      	ldrb	r3, [r7, #11]
 8008bc6:	4293      	cmp	r3, r2
 8008bc8:	d001      	beq.n	8008bce <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008bca:	2301      	movs	r3, #1
 8008bcc:	e025      	b.n	8008c1a <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	4a16      	ldr	r2, [pc, #88]	; (8008c2c <SDMMC_GetCmdResp6+0xec>)
 8008bd2:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8008bd4:	2100      	movs	r1, #0
 8008bd6:	68f8      	ldr	r0, [r7, #12]
 8008bd8:	f7ff fb5f 	bl	800829a <SDMMC_GetResponse>
 8008bdc:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8008bde:	697b      	ldr	r3, [r7, #20]
 8008be0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d106      	bne.n	8008bf6 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8008be8:	697b      	ldr	r3, [r7, #20]
 8008bea:	0c1b      	lsrs	r3, r3, #16
 8008bec:	b29a      	uxth	r2, r3
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	e011      	b.n	8008c1a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8008bf6:	697b      	ldr	r3, [r7, #20]
 8008bf8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d002      	beq.n	8008c06 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8008c00:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008c04:	e009      	b.n	8008c1a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8008c06:	697b      	ldr	r3, [r7, #20]
 8008c08:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d002      	beq.n	8008c16 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8008c10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008c14:	e001      	b.n	8008c1a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8008c16:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8008c1a:	4618      	mov	r0, r3
 8008c1c:	3720      	adds	r7, #32
 8008c1e:	46bd      	mov	sp, r7
 8008c20:	bd80      	pop	{r7, pc}
 8008c22:	bf00      	nop
 8008c24:	20000000 	.word	0x20000000
 8008c28:	10624dd3 	.word	0x10624dd3
 8008c2c:	002000c5 	.word	0x002000c5

08008c30 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8008c30:	b480      	push	{r7}
 8008c32:	b085      	sub	sp, #20
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008c38:	4b22      	ldr	r3, [pc, #136]	; (8008cc4 <SDMMC_GetCmdResp7+0x94>)
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	4a22      	ldr	r2, [pc, #136]	; (8008cc8 <SDMMC_GetCmdResp7+0x98>)
 8008c3e:	fba2 2303 	umull	r2, r3, r2, r3
 8008c42:	0a5b      	lsrs	r3, r3, #9
 8008c44:	f241 3288 	movw	r2, #5000	; 0x1388
 8008c48:	fb02 f303 	mul.w	r3, r2, r3
 8008c4c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	1e5a      	subs	r2, r3, #1
 8008c52:	60fa      	str	r2, [r7, #12]
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d102      	bne.n	8008c5e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008c58:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008c5c:	e02c      	b.n	8008cb8 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c62:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008c64:	68bb      	ldr	r3, [r7, #8]
 8008c66:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d0ef      	beq.n	8008c4e <SDMMC_GetCmdResp7+0x1e>
 8008c6e:	68bb      	ldr	r3, [r7, #8]
 8008c70:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d1ea      	bne.n	8008c4e <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c7c:	f003 0304 	and.w	r3, r3, #4
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d004      	beq.n	8008c8e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	2204      	movs	r2, #4
 8008c88:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008c8a:	2304      	movs	r3, #4
 8008c8c:	e014      	b.n	8008cb8 <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c92:	f003 0301 	and.w	r3, r3, #1
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d004      	beq.n	8008ca4 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	2201      	movs	r2, #1
 8008c9e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008ca0:	2301      	movs	r3, #1
 8008ca2:	e009      	b.n	8008cb8 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ca8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d002      	beq.n	8008cb6 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	2240      	movs	r2, #64	; 0x40
 8008cb4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8008cb6:	2300      	movs	r3, #0

}
 8008cb8:	4618      	mov	r0, r3
 8008cba:	3714      	adds	r7, #20
 8008cbc:	46bd      	mov	sp, r7
 8008cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc2:	4770      	bx	lr
 8008cc4:	20000000 	.word	0x20000000
 8008cc8:	10624dd3 	.word	0x10624dd3

08008ccc <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8008ccc:	b480      	push	{r7}
 8008cce:	b085      	sub	sp, #20
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008cd4:	4b11      	ldr	r3, [pc, #68]	; (8008d1c <SDMMC_GetCmdError+0x50>)
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	4a11      	ldr	r2, [pc, #68]	; (8008d20 <SDMMC_GetCmdError+0x54>)
 8008cda:	fba2 2303 	umull	r2, r3, r2, r3
 8008cde:	0a5b      	lsrs	r3, r3, #9
 8008ce0:	f241 3288 	movw	r2, #5000	; 0x1388
 8008ce4:	fb02 f303 	mul.w	r3, r2, r3
 8008ce8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	1e5a      	subs	r2, r3, #1
 8008cee:	60fa      	str	r2, [r7, #12]
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d102      	bne.n	8008cfa <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008cf4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008cf8:	e009      	b.n	8008d0e <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008cfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d0f1      	beq.n	8008cea <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	4a06      	ldr	r2, [pc, #24]	; (8008d24 <SDMMC_GetCmdError+0x58>)
 8008d0a:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 8008d0c:	2300      	movs	r3, #0
}
 8008d0e:	4618      	mov	r0, r3
 8008d10:	3714      	adds	r7, #20
 8008d12:	46bd      	mov	sp, r7
 8008d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d18:	4770      	bx	lr
 8008d1a:	bf00      	nop
 8008d1c:	20000000 	.word	0x20000000
 8008d20:	10624dd3 	.word	0x10624dd3
 8008d24:	002000c5 	.word	0x002000c5

08008d28 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8008d28:	b580      	push	{r7, lr}
 8008d2a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8008d2c:	4904      	ldr	r1, [pc, #16]	; (8008d40 <MX_FATFS_Init+0x18>)
 8008d2e:	4805      	ldr	r0, [pc, #20]	; (8008d44 <MX_FATFS_Init+0x1c>)
 8008d30:	f000 faa4 	bl	800927c <FATFS_LinkDriver>
 8008d34:	4603      	mov	r3, r0
 8008d36:	461a      	mov	r2, r3
 8008d38:	4b03      	ldr	r3, [pc, #12]	; (8008d48 <MX_FATFS_Init+0x20>)
 8008d3a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8008d3c:	bf00      	nop
 8008d3e:	bd80      	pop	{r7, pc}
 8008d40:	200003ac 	.word	0x200003ac
 8008d44:	0800d058 	.word	0x0800d058
 8008d48:	200003a8 	.word	0x200003a8

08008d4c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8008d4c:	b580      	push	{r7, lr}
 8008d4e:	b082      	sub	sp, #8
 8008d50:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8008d52:	2300      	movs	r3, #0
 8008d54:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8008d56:	f000 f885 	bl	8008e64 <BSP_SD_IsDetected>
 8008d5a:	4603      	mov	r3, r0
 8008d5c:	2b01      	cmp	r3, #1
 8008d5e:	d001      	beq.n	8008d64 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8008d60:	2302      	movs	r3, #2
 8008d62:	e012      	b.n	8008d8a <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8008d64:	480b      	ldr	r0, [pc, #44]	; (8008d94 <BSP_SD_Init+0x48>)
 8008d66:	f7fd fa33 	bl	80061d0 <HAL_SD_Init>
 8008d6a:	4603      	mov	r3, r0
 8008d6c:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8008d6e:	79fb      	ldrb	r3, [r7, #7]
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d109      	bne.n	8008d88 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8008d74:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8008d78:	4806      	ldr	r0, [pc, #24]	; (8008d94 <BSP_SD_Init+0x48>)
 8008d7a:	f7fe f8e7 	bl	8006f4c <HAL_SD_ConfigWideBusOperation>
 8008d7e:	4603      	mov	r3, r0
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d001      	beq.n	8008d88 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8008d84:	2301      	movs	r3, #1
 8008d86:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8008d88:	79fb      	ldrb	r3, [r7, #7]
}
 8008d8a:	4618      	mov	r0, r3
 8008d8c:	3708      	adds	r7, #8
 8008d8e:	46bd      	mov	sp, r7
 8008d90:	bd80      	pop	{r7, pc}
 8008d92:	bf00      	nop
 8008d94:	2000020c 	.word	0x2000020c

08008d98 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8008d98:	b580      	push	{r7, lr}
 8008d9a:	b086      	sub	sp, #24
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	60f8      	str	r0, [r7, #12]
 8008da0:	60b9      	str	r1, [r7, #8]
 8008da2:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8008da4:	2300      	movs	r3, #0
 8008da6:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	68ba      	ldr	r2, [r7, #8]
 8008dac:	68f9      	ldr	r1, [r7, #12]
 8008dae:	4806      	ldr	r0, [pc, #24]	; (8008dc8 <BSP_SD_ReadBlocks_DMA+0x30>)
 8008db0:	f7fd fb36 	bl	8006420 <HAL_SD_ReadBlocks_DMA>
 8008db4:	4603      	mov	r3, r0
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d001      	beq.n	8008dbe <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8008dba:	2301      	movs	r3, #1
 8008dbc:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8008dbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	3718      	adds	r7, #24
 8008dc4:	46bd      	mov	sp, r7
 8008dc6:	bd80      	pop	{r7, pc}
 8008dc8:	2000020c 	.word	0x2000020c

08008dcc <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8008dcc:	b580      	push	{r7, lr}
 8008dce:	b086      	sub	sp, #24
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	60f8      	str	r0, [r7, #12]
 8008dd4:	60b9      	str	r1, [r7, #8]
 8008dd6:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8008dd8:	2300      	movs	r3, #0
 8008dda:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	68ba      	ldr	r2, [r7, #8]
 8008de0:	68f9      	ldr	r1, [r7, #12]
 8008de2:	4806      	ldr	r0, [pc, #24]	; (8008dfc <BSP_SD_WriteBlocks_DMA+0x30>)
 8008de4:	f7fd fbc4 	bl	8006570 <HAL_SD_WriteBlocks_DMA>
 8008de8:	4603      	mov	r3, r0
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d001      	beq.n	8008df2 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8008dee:	2301      	movs	r3, #1
 8008df0:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8008df2:	7dfb      	ldrb	r3, [r7, #23]
}
 8008df4:	4618      	mov	r0, r3
 8008df6:	3718      	adds	r7, #24
 8008df8:	46bd      	mov	sp, r7
 8008dfa:	bd80      	pop	{r7, pc}
 8008dfc:	2000020c 	.word	0x2000020c

08008e00 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8008e00:	b580      	push	{r7, lr}
 8008e02:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8008e04:	4805      	ldr	r0, [pc, #20]	; (8008e1c <BSP_SD_GetCardState+0x1c>)
 8008e06:	f7fe f9b5 	bl	8007174 <HAL_SD_GetCardState>
 8008e0a:	4603      	mov	r3, r0
 8008e0c:	2b04      	cmp	r3, #4
 8008e0e:	bf14      	ite	ne
 8008e10:	2301      	movne	r3, #1
 8008e12:	2300      	moveq	r3, #0
 8008e14:	b2db      	uxtb	r3, r3
}
 8008e16:	4618      	mov	r0, r3
 8008e18:	bd80      	pop	{r7, pc}
 8008e1a:	bf00      	nop
 8008e1c:	2000020c 	.word	0x2000020c

08008e20 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(BSP_SD_CardInfo *CardInfo)
{
 8008e20:	b580      	push	{r7, lr}
 8008e22:	b082      	sub	sp, #8
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8008e28:	6879      	ldr	r1, [r7, #4]
 8008e2a:	4803      	ldr	r0, [pc, #12]	; (8008e38 <BSP_SD_GetCardInfo+0x18>)
 8008e2c:	f7fe f862 	bl	8006ef4 <HAL_SD_GetCardInfo>
}
 8008e30:	bf00      	nop
 8008e32:	3708      	adds	r7, #8
 8008e34:	46bd      	mov	sp, r7
 8008e36:	bd80      	pop	{r7, pc}
 8008e38:	2000020c 	.word	0x2000020c

08008e3c <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8008e3c:	b580      	push	{r7, lr}
 8008e3e:	b082      	sub	sp, #8
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8008e44:	f000 f9aa 	bl	800919c <BSP_SD_WriteCpltCallback>
}
 8008e48:	bf00      	nop
 8008e4a:	3708      	adds	r7, #8
 8008e4c:	46bd      	mov	sp, r7
 8008e4e:	bd80      	pop	{r7, pc}

08008e50 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8008e50:	b580      	push	{r7, lr}
 8008e52:	b082      	sub	sp, #8
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8008e58:	f000 f9b2 	bl	80091c0 <BSP_SD_ReadCpltCallback>
}
 8008e5c:	bf00      	nop
 8008e5e:	3708      	adds	r7, #8
 8008e60:	46bd      	mov	sp, r7
 8008e62:	bd80      	pop	{r7, pc}

08008e64 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8008e64:	b580      	push	{r7, lr}
 8008e66:	b082      	sub	sp, #8
 8008e68:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8008e6a:	2301      	movs	r3, #1
 8008e6c:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8008e6e:	f000 f80b 	bl	8008e88 <BSP_PlatformIsDetected>
 8008e72:	4603      	mov	r3, r0
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d101      	bne.n	8008e7c <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8008e78:	2300      	movs	r3, #0
 8008e7a:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8008e7c:	79fb      	ldrb	r3, [r7, #7]
 8008e7e:	b2db      	uxtb	r3, r3
}
 8008e80:	4618      	mov	r0, r3
 8008e82:	3708      	adds	r7, #8
 8008e84:	46bd      	mov	sp, r7
 8008e86:	bd80      	pop	{r7, pc}

08008e88 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8008e88:	b580      	push	{r7, lr}
 8008e8a:	b082      	sub	sp, #8
 8008e8c:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8008e8e:	2301      	movs	r3, #1
 8008e90:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8008e92:	2120      	movs	r1, #32
 8008e94:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008e98:	f7fa fbe6 	bl	8003668 <HAL_GPIO_ReadPin>
 8008e9c:	4603      	mov	r3, r0
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d001      	beq.n	8008ea6 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8008ea2:	2300      	movs	r3, #0
 8008ea4:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8008ea6:	79fb      	ldrb	r3, [r7, #7]
}
 8008ea8:	4618      	mov	r0, r3
 8008eaa:	3708      	adds	r7, #8
 8008eac:	46bd      	mov	sp, r7
 8008eae:	bd80      	pop	{r7, pc}

08008eb0 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8008eb0:	b580      	push	{r7, lr}
 8008eb2:	b084      	sub	sp, #16
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	6078      	str	r0, [r7, #4]
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
  while( osKernelSysTick() - timer < timeout)
#else
  timer = osKernelGetTickCount();
 8008eb8:	f000 faa0 	bl	80093fc <osKernelGetTickCount>
 8008ebc:	60f8      	str	r0, [r7, #12]
  while( osKernelGetTickCount() - timer < timeout)
 8008ebe:	e006      	b.n	8008ece <SD_CheckStatusWithTimeout+0x1e>
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8008ec0:	f7ff ff9e 	bl	8008e00 <BSP_SD_GetCardState>
 8008ec4:	4603      	mov	r3, r0
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d101      	bne.n	8008ece <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8008eca:	2300      	movs	r3, #0
 8008ecc:	e009      	b.n	8008ee2 <SD_CheckStatusWithTimeout+0x32>
  while( osKernelGetTickCount() - timer < timeout)
 8008ece:	f000 fa95 	bl	80093fc <osKernelGetTickCount>
 8008ed2:	4602      	mov	r2, r0
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	1ad3      	subs	r3, r2, r3
 8008ed8:	687a      	ldr	r2, [r7, #4]
 8008eda:	429a      	cmp	r2, r3
 8008edc:	d8f0      	bhi.n	8008ec0 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8008ede:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008ee2:	4618      	mov	r0, r3
 8008ee4:	3710      	adds	r7, #16
 8008ee6:	46bd      	mov	sp, r7
 8008ee8:	bd80      	pop	{r7, pc}
	...

08008eec <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8008eec:	b580      	push	{r7, lr}
 8008eee:	b082      	sub	sp, #8
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	4603      	mov	r3, r0
 8008ef4:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8008ef6:	4b0b      	ldr	r3, [pc, #44]	; (8008f24 <SD_CheckStatus+0x38>)
 8008ef8:	2201      	movs	r2, #1
 8008efa:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8008efc:	f7ff ff80 	bl	8008e00 <BSP_SD_GetCardState>
 8008f00:	4603      	mov	r3, r0
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d107      	bne.n	8008f16 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8008f06:	4b07      	ldr	r3, [pc, #28]	; (8008f24 <SD_CheckStatus+0x38>)
 8008f08:	781b      	ldrb	r3, [r3, #0]
 8008f0a:	b2db      	uxtb	r3, r3
 8008f0c:	f023 0301 	bic.w	r3, r3, #1
 8008f10:	b2da      	uxtb	r2, r3
 8008f12:	4b04      	ldr	r3, [pc, #16]	; (8008f24 <SD_CheckStatus+0x38>)
 8008f14:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8008f16:	4b03      	ldr	r3, [pc, #12]	; (8008f24 <SD_CheckStatus+0x38>)
 8008f18:	781b      	ldrb	r3, [r3, #0]
 8008f1a:	b2db      	uxtb	r3, r3
}
 8008f1c:	4618      	mov	r0, r3
 8008f1e:	3708      	adds	r7, #8
 8008f20:	46bd      	mov	sp, r7
 8008f22:	bd80      	pop	{r7, pc}
 8008f24:	20000009 	.word	0x20000009

08008f28 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8008f28:	b580      	push	{r7, lr}
 8008f2a:	b082      	sub	sp, #8
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	4603      	mov	r3, r0
 8008f30:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8008f32:	4b1c      	ldr	r3, [pc, #112]	; (8008fa4 <SD_initialize+0x7c>)
 8008f34:	2201      	movs	r2, #1
 8008f36:	701a      	strb	r2, [r3, #0]
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
#else
  if(osKernelGetState() == osKernelRunning)
 8008f38:	f000 fa18 	bl	800936c <osKernelGetState>
 8008f3c:	4603      	mov	r3, r0
 8008f3e:	2b02      	cmp	r3, #2
 8008f40:	d129      	bne.n	8008f96 <SD_initialize+0x6e>
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 8008f42:	f7ff ff03 	bl	8008d4c <BSP_SD_Init>
 8008f46:	4603      	mov	r3, r0
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d107      	bne.n	8008f5c <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 8008f4c:	79fb      	ldrb	r3, [r7, #7]
 8008f4e:	4618      	mov	r0, r3
 8008f50:	f7ff ffcc 	bl	8008eec <SD_CheckStatus>
 8008f54:	4603      	mov	r3, r0
 8008f56:	461a      	mov	r2, r3
 8008f58:	4b12      	ldr	r3, [pc, #72]	; (8008fa4 <SD_initialize+0x7c>)
 8008f5a:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 8008f5c:	4b11      	ldr	r3, [pc, #68]	; (8008fa4 <SD_initialize+0x7c>)
 8008f5e:	781b      	ldrb	r3, [r3, #0]
 8008f60:	b2db      	uxtb	r3, r3
 8008f62:	2b01      	cmp	r3, #1
 8008f64:	d017      	beq.n	8008f96 <SD_initialize+0x6e>
    {
      if (SDQueueID == NULL)
 8008f66:	4b10      	ldr	r3, [pc, #64]	; (8008fa8 <SD_initialize+0x80>)
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d107      	bne.n	8008f7e <SD_initialize+0x56>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
 8008f6e:	2200      	movs	r2, #0
 8008f70:	2102      	movs	r1, #2
 8008f72:	200a      	movs	r0, #10
 8008f74:	f000 fcaa 	bl	80098cc <osMessageQueueNew>
 8008f78:	4603      	mov	r3, r0
 8008f7a:	4a0b      	ldr	r2, [pc, #44]	; (8008fa8 <SD_initialize+0x80>)
 8008f7c:	6013      	str	r3, [r2, #0]
#endif
      }

      if (SDQueueID == NULL)
 8008f7e:	4b0a      	ldr	r3, [pc, #40]	; (8008fa8 <SD_initialize+0x80>)
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d107      	bne.n	8008f96 <SD_initialize+0x6e>
      {
        Stat |= STA_NOINIT;
 8008f86:	4b07      	ldr	r3, [pc, #28]	; (8008fa4 <SD_initialize+0x7c>)
 8008f88:	781b      	ldrb	r3, [r3, #0]
 8008f8a:	b2db      	uxtb	r3, r3
 8008f8c:	f043 0301 	orr.w	r3, r3, #1
 8008f90:	b2da      	uxtb	r2, r3
 8008f92:	4b04      	ldr	r3, [pc, #16]	; (8008fa4 <SD_initialize+0x7c>)
 8008f94:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 8008f96:	4b03      	ldr	r3, [pc, #12]	; (8008fa4 <SD_initialize+0x7c>)
 8008f98:	781b      	ldrb	r3, [r3, #0]
 8008f9a:	b2db      	uxtb	r3, r3
}
 8008f9c:	4618      	mov	r0, r3
 8008f9e:	3708      	adds	r7, #8
 8008fa0:	46bd      	mov	sp, r7
 8008fa2:	bd80      	pop	{r7, pc}
 8008fa4:	20000009 	.word	0x20000009
 8008fa8:	200003b0 	.word	0x200003b0

08008fac <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8008fac:	b580      	push	{r7, lr}
 8008fae:	b082      	sub	sp, #8
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	4603      	mov	r3, r0
 8008fb4:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8008fb6:	79fb      	ldrb	r3, [r7, #7]
 8008fb8:	4618      	mov	r0, r3
 8008fba:	f7ff ff97 	bl	8008eec <SD_CheckStatus>
 8008fbe:	4603      	mov	r3, r0
}
 8008fc0:	4618      	mov	r0, r3
 8008fc2:	3708      	adds	r7, #8
 8008fc4:	46bd      	mov	sp, r7
 8008fc6:	bd80      	pop	{r7, pc}

08008fc8 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8008fc8:	b580      	push	{r7, lr}
 8008fca:	b088      	sub	sp, #32
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	60b9      	str	r1, [r7, #8]
 8008fd0:	607a      	str	r2, [r7, #4]
 8008fd2:	603b      	str	r3, [r7, #0]
 8008fd4:	4603      	mov	r3, r0
 8008fd6:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 8008fd8:	2301      	movs	r3, #1
 8008fda:	77fb      	strb	r3, [r7, #31]
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8008fdc:	f247 5030 	movw	r0, #30000	; 0x7530
 8008fe0:	f7ff ff66 	bl	8008eb0 <SD_CheckStatusWithTimeout>
 8008fe4:	4603      	mov	r3, r0
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	da01      	bge.n	8008fee <SD_read+0x26>
  {
    return res;
 8008fea:	7ffb      	ldrb	r3, [r7, #31]
 8008fec:	e02f      	b.n	800904e <SD_read+0x86>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 8008fee:	683a      	ldr	r2, [r7, #0]
 8008ff0:	6879      	ldr	r1, [r7, #4]
 8008ff2:	68b8      	ldr	r0, [r7, #8]
 8008ff4:	f7ff fed0 	bl	8008d98 <BSP_SD_ReadBlocks_DMA>
 8008ff8:	4603      	mov	r3, r0
 8008ffa:	77bb      	strb	r3, [r7, #30]

    if (ret == MSD_OK) {
 8008ffc:	7fbb      	ldrb	r3, [r7, #30]
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d124      	bne.n	800904c <SD_read+0x84>
      {
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
#else
          status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 8009002:	4b15      	ldr	r3, [pc, #84]	; (8009058 <SD_read+0x90>)
 8009004:	6818      	ldr	r0, [r3, #0]
 8009006:	f107 0112 	add.w	r1, r7, #18
 800900a:	f247 5330 	movw	r3, #30000	; 0x7530
 800900e:	2200      	movs	r2, #0
 8009010:	f000 fd30 	bl	8009a74 <osMessageQueueGet>
 8009014:	61b8      	str	r0, [r7, #24]
          if ((status == osOK) && (event == READ_CPLT_MSG))
 8009016:	69bb      	ldr	r3, [r7, #24]
 8009018:	2b00      	cmp	r3, #0
 800901a:	d117      	bne.n	800904c <SD_read+0x84>
 800901c:	8a7b      	ldrh	r3, [r7, #18]
 800901e:	2b01      	cmp	r3, #1
 8009020:	d114      	bne.n	800904c <SD_read+0x84>
          {
            timer = osKernelGetTickCount();
 8009022:	f000 f9eb 	bl	80093fc <osKernelGetTickCount>
 8009026:	6178      	str	r0, [r7, #20]
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 8009028:	e007      	b.n	800903a <SD_read+0x72>
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800902a:	f7ff fee9 	bl	8008e00 <BSP_SD_GetCardState>
 800902e:	4603      	mov	r3, r0
 8009030:	2b00      	cmp	r3, #0
 8009032:	d102      	bne.n	800903a <SD_read+0x72>
              {
                res = RES_OK;
 8009034:	2300      	movs	r3, #0
 8009036:	77fb      	strb	r3, [r7, #31]
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 8009038:	e008      	b.n	800904c <SD_read+0x84>
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 800903a:	f000 f9df 	bl	80093fc <osKernelGetTickCount>
 800903e:	4602      	mov	r2, r0
 8009040:	697b      	ldr	r3, [r7, #20]
 8009042:	1ad3      	subs	r3, r2, r3
 8009044:	f247 522f 	movw	r2, #29999	; 0x752f
 8009048:	4293      	cmp	r3, r2
 800904a:	d9ee      	bls.n	800902a <SD_read+0x62>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 800904c:	7ffb      	ldrb	r3, [r7, #31]
}
 800904e:	4618      	mov	r0, r3
 8009050:	3720      	adds	r7, #32
 8009052:	46bd      	mov	sp, r7
 8009054:	bd80      	pop	{r7, pc}
 8009056:	bf00      	nop
 8009058:	200003b0 	.word	0x200003b0

0800905c <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800905c:	b580      	push	{r7, lr}
 800905e:	b088      	sub	sp, #32
 8009060:	af00      	add	r7, sp, #0
 8009062:	60b9      	str	r1, [r7, #8]
 8009064:	607a      	str	r2, [r7, #4]
 8009066:	603b      	str	r3, [r7, #0]
 8009068:	4603      	mov	r3, r0
 800906a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800906c:	2301      	movs	r3, #1
 800906e:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8009070:	f247 5030 	movw	r0, #30000	; 0x7530
 8009074:	f7ff ff1c 	bl	8008eb0 <SD_CheckStatusWithTimeout>
 8009078:	4603      	mov	r3, r0
 800907a:	2b00      	cmp	r3, #0
 800907c:	da01      	bge.n	8009082 <SD_write+0x26>
  {
    return res;
 800907e:	7ffb      	ldrb	r3, [r7, #31]
 8009080:	e02d      	b.n	80090de <SD_write+0x82>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8009082:	683a      	ldr	r2, [r7, #0]
 8009084:	6879      	ldr	r1, [r7, #4]
 8009086:	68b8      	ldr	r0, [r7, #8]
 8009088:	f7ff fea0 	bl	8008dcc <BSP_SD_WriteBlocks_DMA>
 800908c:	4603      	mov	r3, r0
 800908e:	2b00      	cmp	r3, #0
 8009090:	d124      	bne.n	80090dc <SD_write+0x80>
    if (event.status == osEventMessage)
    {
      if (event.value.v == WRITE_CPLT_MSG)
      {
#else
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 8009092:	4b15      	ldr	r3, [pc, #84]	; (80090e8 <SD_write+0x8c>)
 8009094:	6818      	ldr	r0, [r3, #0]
 8009096:	f107 0112 	add.w	r1, r7, #18
 800909a:	f247 5330 	movw	r3, #30000	; 0x7530
 800909e:	2200      	movs	r2, #0
 80090a0:	f000 fce8 	bl	8009a74 <osMessageQueueGet>
 80090a4:	61b8      	str	r0, [r7, #24]
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
 80090a6:	69bb      	ldr	r3, [r7, #24]
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d117      	bne.n	80090dc <SD_write+0x80>
 80090ac:	8a7b      	ldrh	r3, [r7, #18]
 80090ae:	2b02      	cmp	r3, #2
 80090b0:	d114      	bne.n	80090dc <SD_write+0x80>
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
#else
        timer = osKernelGetTickCount();
 80090b2:	f000 f9a3 	bl	80093fc <osKernelGetTickCount>
 80090b6:	6178      	str	r0, [r7, #20]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 80090b8:	e007      	b.n	80090ca <SD_write+0x6e>
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80090ba:	f7ff fea1 	bl	8008e00 <BSP_SD_GetCardState>
 80090be:	4603      	mov	r3, r0
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d102      	bne.n	80090ca <SD_write+0x6e>
          {
            res = RES_OK;
 80090c4:	2300      	movs	r3, #0
 80090c6:	77fb      	strb	r3, [r7, #31]
            break;
 80090c8:	e008      	b.n	80090dc <SD_write+0x80>
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 80090ca:	f000 f997 	bl	80093fc <osKernelGetTickCount>
 80090ce:	4602      	mov	r2, r0
 80090d0:	697b      	ldr	r3, [r7, #20]
 80090d2:	1ad3      	subs	r3, r2, r3
 80090d4:	f247 522f 	movw	r2, #29999	; 0x752f
 80090d8:	4293      	cmp	r3, r2
 80090da:	d9ee      	bls.n	80090ba <SD_write+0x5e>
    }

  }
#endif

  return res;
 80090dc:	7ffb      	ldrb	r3, [r7, #31]
}
 80090de:	4618      	mov	r0, r3
 80090e0:	3720      	adds	r7, #32
 80090e2:	46bd      	mov	sp, r7
 80090e4:	bd80      	pop	{r7, pc}
 80090e6:	bf00      	nop
 80090e8:	200003b0 	.word	0x200003b0

080090ec <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80090ec:	b580      	push	{r7, lr}
 80090ee:	b08c      	sub	sp, #48	; 0x30
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	4603      	mov	r3, r0
 80090f4:	603a      	str	r2, [r7, #0]
 80090f6:	71fb      	strb	r3, [r7, #7]
 80090f8:	460b      	mov	r3, r1
 80090fa:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80090fc:	2301      	movs	r3, #1
 80090fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8009102:	4b25      	ldr	r3, [pc, #148]	; (8009198 <SD_ioctl+0xac>)
 8009104:	781b      	ldrb	r3, [r3, #0]
 8009106:	b2db      	uxtb	r3, r3
 8009108:	f003 0301 	and.w	r3, r3, #1
 800910c:	2b00      	cmp	r3, #0
 800910e:	d001      	beq.n	8009114 <SD_ioctl+0x28>
 8009110:	2303      	movs	r3, #3
 8009112:	e03c      	b.n	800918e <SD_ioctl+0xa2>

  switch (cmd)
 8009114:	79bb      	ldrb	r3, [r7, #6]
 8009116:	2b03      	cmp	r3, #3
 8009118:	d834      	bhi.n	8009184 <SD_ioctl+0x98>
 800911a:	a201      	add	r2, pc, #4	; (adr r2, 8009120 <SD_ioctl+0x34>)
 800911c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009120:	08009131 	.word	0x08009131
 8009124:	08009139 	.word	0x08009139
 8009128:	08009151 	.word	0x08009151
 800912c:	0800916b 	.word	0x0800916b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8009130:	2300      	movs	r3, #0
 8009132:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009136:	e028      	b.n	800918a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8009138:	f107 0308 	add.w	r3, r7, #8
 800913c:	4618      	mov	r0, r3
 800913e:	f7ff fe6f 	bl	8008e20 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8009142:	6a3a      	ldr	r2, [r7, #32]
 8009144:	683b      	ldr	r3, [r7, #0]
 8009146:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8009148:	2300      	movs	r3, #0
 800914a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800914e:	e01c      	b.n	800918a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8009150:	f107 0308 	add.w	r3, r7, #8
 8009154:	4618      	mov	r0, r3
 8009156:	f7ff fe63 	bl	8008e20 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800915a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800915c:	b29a      	uxth	r2, r3
 800915e:	683b      	ldr	r3, [r7, #0]
 8009160:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8009162:	2300      	movs	r3, #0
 8009164:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009168:	e00f      	b.n	800918a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800916a:	f107 0308 	add.w	r3, r7, #8
 800916e:	4618      	mov	r0, r3
 8009170:	f7ff fe56 	bl	8008e20 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8009174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009176:	0a5a      	lsrs	r2, r3, #9
 8009178:	683b      	ldr	r3, [r7, #0]
 800917a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800917c:	2300      	movs	r3, #0
 800917e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009182:	e002      	b.n	800918a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8009184:	2304      	movs	r3, #4
 8009186:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800918a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800918e:	4618      	mov	r0, r3
 8009190:	3730      	adds	r7, #48	; 0x30
 8009192:	46bd      	mov	sp, r7
 8009194:	bd80      	pop	{r7, pc}
 8009196:	bf00      	nop
 8009198:	20000009 	.word	0x20000009

0800919c <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800919c:	b580      	push	{r7, lr}
 800919e:	b082      	sub	sp, #8
 80091a0:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
#else
   const uint16_t msg = WRITE_CPLT_MSG;
 80091a2:	2302      	movs	r3, #2
 80091a4:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 80091a6:	4b05      	ldr	r3, [pc, #20]	; (80091bc <BSP_SD_WriteCpltCallback+0x20>)
 80091a8:	6818      	ldr	r0, [r3, #0]
 80091aa:	1db9      	adds	r1, r7, #6
 80091ac:	2300      	movs	r3, #0
 80091ae:	2200      	movs	r2, #0
 80091b0:	f000 fc00 	bl	80099b4 <osMessageQueuePut>
#endif
}
 80091b4:	bf00      	nop
 80091b6:	3708      	adds	r7, #8
 80091b8:	46bd      	mov	sp, r7
 80091ba:	bd80      	pop	{r7, pc}
 80091bc:	200003b0 	.word	0x200003b0

080091c0 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 80091c0:	b580      	push	{r7, lr}
 80091c2:	b082      	sub	sp, #8
 80091c4:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
#else
   const uint16_t msg = READ_CPLT_MSG;
 80091c6:	2301      	movs	r3, #1
 80091c8:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 80091ca:	4b05      	ldr	r3, [pc, #20]	; (80091e0 <BSP_SD_ReadCpltCallback+0x20>)
 80091cc:	6818      	ldr	r0, [r3, #0]
 80091ce:	1db9      	adds	r1, r7, #6
 80091d0:	2300      	movs	r3, #0
 80091d2:	2200      	movs	r2, #0
 80091d4:	f000 fbee 	bl	80099b4 <osMessageQueuePut>
#endif
}
 80091d8:	bf00      	nop
 80091da:	3708      	adds	r7, #8
 80091dc:	46bd      	mov	sp, r7
 80091de:	bd80      	pop	{r7, pc}
 80091e0:	200003b0 	.word	0x200003b0

080091e4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80091e4:	b480      	push	{r7}
 80091e6:	b087      	sub	sp, #28
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	60f8      	str	r0, [r7, #12]
 80091ec:	60b9      	str	r1, [r7, #8]
 80091ee:	4613      	mov	r3, r2
 80091f0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80091f2:	2301      	movs	r3, #1
 80091f4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80091f6:	2300      	movs	r3, #0
 80091f8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80091fa:	4b1f      	ldr	r3, [pc, #124]	; (8009278 <FATFS_LinkDriverEx+0x94>)
 80091fc:	7a5b      	ldrb	r3, [r3, #9]
 80091fe:	b2db      	uxtb	r3, r3
 8009200:	2b00      	cmp	r3, #0
 8009202:	d131      	bne.n	8009268 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8009204:	4b1c      	ldr	r3, [pc, #112]	; (8009278 <FATFS_LinkDriverEx+0x94>)
 8009206:	7a5b      	ldrb	r3, [r3, #9]
 8009208:	b2db      	uxtb	r3, r3
 800920a:	461a      	mov	r2, r3
 800920c:	4b1a      	ldr	r3, [pc, #104]	; (8009278 <FATFS_LinkDriverEx+0x94>)
 800920e:	2100      	movs	r1, #0
 8009210:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8009212:	4b19      	ldr	r3, [pc, #100]	; (8009278 <FATFS_LinkDriverEx+0x94>)
 8009214:	7a5b      	ldrb	r3, [r3, #9]
 8009216:	b2db      	uxtb	r3, r3
 8009218:	4a17      	ldr	r2, [pc, #92]	; (8009278 <FATFS_LinkDriverEx+0x94>)
 800921a:	009b      	lsls	r3, r3, #2
 800921c:	4413      	add	r3, r2
 800921e:	68fa      	ldr	r2, [r7, #12]
 8009220:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8009222:	4b15      	ldr	r3, [pc, #84]	; (8009278 <FATFS_LinkDriverEx+0x94>)
 8009224:	7a5b      	ldrb	r3, [r3, #9]
 8009226:	b2db      	uxtb	r3, r3
 8009228:	461a      	mov	r2, r3
 800922a:	4b13      	ldr	r3, [pc, #76]	; (8009278 <FATFS_LinkDriverEx+0x94>)
 800922c:	4413      	add	r3, r2
 800922e:	79fa      	ldrb	r2, [r7, #7]
 8009230:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8009232:	4b11      	ldr	r3, [pc, #68]	; (8009278 <FATFS_LinkDriverEx+0x94>)
 8009234:	7a5b      	ldrb	r3, [r3, #9]
 8009236:	b2db      	uxtb	r3, r3
 8009238:	1c5a      	adds	r2, r3, #1
 800923a:	b2d1      	uxtb	r1, r2
 800923c:	4a0e      	ldr	r2, [pc, #56]	; (8009278 <FATFS_LinkDriverEx+0x94>)
 800923e:	7251      	strb	r1, [r2, #9]
 8009240:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8009242:	7dbb      	ldrb	r3, [r7, #22]
 8009244:	3330      	adds	r3, #48	; 0x30
 8009246:	b2da      	uxtb	r2, r3
 8009248:	68bb      	ldr	r3, [r7, #8]
 800924a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800924c:	68bb      	ldr	r3, [r7, #8]
 800924e:	3301      	adds	r3, #1
 8009250:	223a      	movs	r2, #58	; 0x3a
 8009252:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8009254:	68bb      	ldr	r3, [r7, #8]
 8009256:	3302      	adds	r3, #2
 8009258:	222f      	movs	r2, #47	; 0x2f
 800925a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800925c:	68bb      	ldr	r3, [r7, #8]
 800925e:	3303      	adds	r3, #3
 8009260:	2200      	movs	r2, #0
 8009262:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8009264:	2300      	movs	r3, #0
 8009266:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8009268:	7dfb      	ldrb	r3, [r7, #23]
}
 800926a:	4618      	mov	r0, r3
 800926c:	371c      	adds	r7, #28
 800926e:	46bd      	mov	sp, r7
 8009270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009274:	4770      	bx	lr
 8009276:	bf00      	nop
 8009278:	200003b4 	.word	0x200003b4

0800927c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800927c:	b580      	push	{r7, lr}
 800927e:	b082      	sub	sp, #8
 8009280:	af00      	add	r7, sp, #0
 8009282:	6078      	str	r0, [r7, #4]
 8009284:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8009286:	2200      	movs	r2, #0
 8009288:	6839      	ldr	r1, [r7, #0]
 800928a:	6878      	ldr	r0, [r7, #4]
 800928c:	f7ff ffaa 	bl	80091e4 <FATFS_LinkDriverEx>
 8009290:	4603      	mov	r3, r0
}
 8009292:	4618      	mov	r0, r3
 8009294:	3708      	adds	r7, #8
 8009296:	46bd      	mov	sp, r7
 8009298:	bd80      	pop	{r7, pc}
	...

0800929c <__NVIC_SetPriority>:
{
 800929c:	b480      	push	{r7}
 800929e:	b083      	sub	sp, #12
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	4603      	mov	r3, r0
 80092a4:	6039      	str	r1, [r7, #0]
 80092a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80092a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	db0a      	blt.n	80092c6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80092b0:	683b      	ldr	r3, [r7, #0]
 80092b2:	b2da      	uxtb	r2, r3
 80092b4:	490c      	ldr	r1, [pc, #48]	; (80092e8 <__NVIC_SetPriority+0x4c>)
 80092b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80092ba:	0112      	lsls	r2, r2, #4
 80092bc:	b2d2      	uxtb	r2, r2
 80092be:	440b      	add	r3, r1
 80092c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80092c4:	e00a      	b.n	80092dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80092c6:	683b      	ldr	r3, [r7, #0]
 80092c8:	b2da      	uxtb	r2, r3
 80092ca:	4908      	ldr	r1, [pc, #32]	; (80092ec <__NVIC_SetPriority+0x50>)
 80092cc:	79fb      	ldrb	r3, [r7, #7]
 80092ce:	f003 030f 	and.w	r3, r3, #15
 80092d2:	3b04      	subs	r3, #4
 80092d4:	0112      	lsls	r2, r2, #4
 80092d6:	b2d2      	uxtb	r2, r2
 80092d8:	440b      	add	r3, r1
 80092da:	761a      	strb	r2, [r3, #24]
}
 80092dc:	bf00      	nop
 80092de:	370c      	adds	r7, #12
 80092e0:	46bd      	mov	sp, r7
 80092e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e6:	4770      	bx	lr
 80092e8:	e000e100 	.word	0xe000e100
 80092ec:	e000ed00 	.word	0xe000ed00

080092f0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80092f0:	b580      	push	{r7, lr}
 80092f2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80092f4:	4b05      	ldr	r3, [pc, #20]	; (800930c <SysTick_Handler+0x1c>)
 80092f6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80092f8:	f002 fbb6 	bl	800ba68 <xTaskGetSchedulerState>
 80092fc:	4603      	mov	r3, r0
 80092fe:	2b01      	cmp	r3, #1
 8009300:	d001      	beq.n	8009306 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8009302:	f003 fa99 	bl	800c838 <xPortSysTickHandler>
  }
}
 8009306:	bf00      	nop
 8009308:	bd80      	pop	{r7, pc}
 800930a:	bf00      	nop
 800930c:	e000e010 	.word	0xe000e010

08009310 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009310:	b580      	push	{r7, lr}
 8009312:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8009314:	2100      	movs	r1, #0
 8009316:	f06f 0004 	mvn.w	r0, #4
 800931a:	f7ff ffbf 	bl	800929c <__NVIC_SetPriority>
#endif
}
 800931e:	bf00      	nop
 8009320:	bd80      	pop	{r7, pc}
	...

08009324 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009324:	b480      	push	{r7}
 8009326:	b083      	sub	sp, #12
 8009328:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800932a:	f3ef 8305 	mrs	r3, IPSR
 800932e:	603b      	str	r3, [r7, #0]
  return(result);
 8009330:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009332:	2b00      	cmp	r3, #0
 8009334:	d003      	beq.n	800933e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8009336:	f06f 0305 	mvn.w	r3, #5
 800933a:	607b      	str	r3, [r7, #4]
 800933c:	e00c      	b.n	8009358 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800933e:	4b0a      	ldr	r3, [pc, #40]	; (8009368 <osKernelInitialize+0x44>)
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	2b00      	cmp	r3, #0
 8009344:	d105      	bne.n	8009352 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8009346:	4b08      	ldr	r3, [pc, #32]	; (8009368 <osKernelInitialize+0x44>)
 8009348:	2201      	movs	r2, #1
 800934a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800934c:	2300      	movs	r3, #0
 800934e:	607b      	str	r3, [r7, #4]
 8009350:	e002      	b.n	8009358 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8009352:	f04f 33ff 	mov.w	r3, #4294967295
 8009356:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009358:	687b      	ldr	r3, [r7, #4]
}
 800935a:	4618      	mov	r0, r3
 800935c:	370c      	adds	r7, #12
 800935e:	46bd      	mov	sp, r7
 8009360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009364:	4770      	bx	lr
 8009366:	bf00      	nop
 8009368:	200003c0 	.word	0x200003c0

0800936c <osKernelGetState>:
  }

  return (osOK);
}

osKernelState_t osKernelGetState (void) {
 800936c:	b580      	push	{r7, lr}
 800936e:	b082      	sub	sp, #8
 8009370:	af00      	add	r7, sp, #0
  osKernelState_t state;

  switch (xTaskGetSchedulerState()) {
 8009372:	f002 fb79 	bl	800ba68 <xTaskGetSchedulerState>
 8009376:	4603      	mov	r3, r0
 8009378:	2b00      	cmp	r3, #0
 800937a:	d004      	beq.n	8009386 <osKernelGetState+0x1a>
 800937c:	2b02      	cmp	r3, #2
 800937e:	d105      	bne.n	800938c <osKernelGetState+0x20>
    case taskSCHEDULER_RUNNING:
      state = osKernelRunning;
 8009380:	2302      	movs	r3, #2
 8009382:	607b      	str	r3, [r7, #4]
      break;
 8009384:	e00c      	b.n	80093a0 <osKernelGetState+0x34>

    case taskSCHEDULER_SUSPENDED:
      state = osKernelLocked;
 8009386:	2303      	movs	r3, #3
 8009388:	607b      	str	r3, [r7, #4]
      break;
 800938a:	e009      	b.n	80093a0 <osKernelGetState+0x34>

    case taskSCHEDULER_NOT_STARTED:
    default:
      if (KernelState == osKernelReady) {
 800938c:	4b07      	ldr	r3, [pc, #28]	; (80093ac <osKernelGetState+0x40>)
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	2b01      	cmp	r3, #1
 8009392:	d102      	bne.n	800939a <osKernelGetState+0x2e>
        state = osKernelReady;
 8009394:	2301      	movs	r3, #1
 8009396:	607b      	str	r3, [r7, #4]
      } else {
        state = osKernelInactive;
      }
      break;
 8009398:	e001      	b.n	800939e <osKernelGetState+0x32>
        state = osKernelInactive;
 800939a:	2300      	movs	r3, #0
 800939c:	607b      	str	r3, [r7, #4]
      break;
 800939e:	bf00      	nop
  }

  return (state);
 80093a0:	687b      	ldr	r3, [r7, #4]
}
 80093a2:	4618      	mov	r0, r3
 80093a4:	3708      	adds	r7, #8
 80093a6:	46bd      	mov	sp, r7
 80093a8:	bd80      	pop	{r7, pc}
 80093aa:	bf00      	nop
 80093ac:	200003c0 	.word	0x200003c0

080093b0 <osKernelStart>:

osStatus_t osKernelStart (void) {
 80093b0:	b580      	push	{r7, lr}
 80093b2:	b082      	sub	sp, #8
 80093b4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80093b6:	f3ef 8305 	mrs	r3, IPSR
 80093ba:	603b      	str	r3, [r7, #0]
  return(result);
 80093bc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d003      	beq.n	80093ca <osKernelStart+0x1a>
    stat = osErrorISR;
 80093c2:	f06f 0305 	mvn.w	r3, #5
 80093c6:	607b      	str	r3, [r7, #4]
 80093c8:	e010      	b.n	80093ec <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80093ca:	4b0b      	ldr	r3, [pc, #44]	; (80093f8 <osKernelStart+0x48>)
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	2b01      	cmp	r3, #1
 80093d0:	d109      	bne.n	80093e6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80093d2:	f7ff ff9d 	bl	8009310 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80093d6:	4b08      	ldr	r3, [pc, #32]	; (80093f8 <osKernelStart+0x48>)
 80093d8:	2202      	movs	r2, #2
 80093da:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80093dc:	f001 fed6 	bl	800b18c <vTaskStartScheduler>
      stat = osOK;
 80093e0:	2300      	movs	r3, #0
 80093e2:	607b      	str	r3, [r7, #4]
 80093e4:	e002      	b.n	80093ec <osKernelStart+0x3c>
    } else {
      stat = osError;
 80093e6:	f04f 33ff 	mov.w	r3, #4294967295
 80093ea:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80093ec:	687b      	ldr	r3, [r7, #4]
}
 80093ee:	4618      	mov	r0, r3
 80093f0:	3708      	adds	r7, #8
 80093f2:	46bd      	mov	sp, r7
 80093f4:	bd80      	pop	{r7, pc}
 80093f6:	bf00      	nop
 80093f8:	200003c0 	.word	0x200003c0

080093fc <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 80093fc:	b580      	push	{r7, lr}
 80093fe:	b082      	sub	sp, #8
 8009400:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009402:	f3ef 8305 	mrs	r3, IPSR
 8009406:	603b      	str	r3, [r7, #0]
  return(result);
 8009408:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 800940a:	2b00      	cmp	r3, #0
 800940c:	d003      	beq.n	8009416 <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 800940e:	f001 ffe9 	bl	800b3e4 <xTaskGetTickCountFromISR>
 8009412:	6078      	str	r0, [r7, #4]
 8009414:	e002      	b.n	800941c <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 8009416:	f001 ffd5 	bl	800b3c4 <xTaskGetTickCount>
 800941a:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 800941c:	687b      	ldr	r3, [r7, #4]
}
 800941e:	4618      	mov	r0, r3
 8009420:	3708      	adds	r7, #8
 8009422:	46bd      	mov	sp, r7
 8009424:	bd80      	pop	{r7, pc}

08009426 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009426:	b580      	push	{r7, lr}
 8009428:	b08e      	sub	sp, #56	; 0x38
 800942a:	af04      	add	r7, sp, #16
 800942c:	60f8      	str	r0, [r7, #12]
 800942e:	60b9      	str	r1, [r7, #8]
 8009430:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009432:	2300      	movs	r3, #0
 8009434:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009436:	f3ef 8305 	mrs	r3, IPSR
 800943a:	617b      	str	r3, [r7, #20]
  return(result);
 800943c:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800943e:	2b00      	cmp	r3, #0
 8009440:	d17e      	bne.n	8009540 <osThreadNew+0x11a>
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	2b00      	cmp	r3, #0
 8009446:	d07b      	beq.n	8009540 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8009448:	2380      	movs	r3, #128	; 0x80
 800944a:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800944c:	2318      	movs	r3, #24
 800944e:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8009450:	2300      	movs	r3, #0
 8009452:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8009454:	f04f 33ff 	mov.w	r3, #4294967295
 8009458:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	2b00      	cmp	r3, #0
 800945e:	d045      	beq.n	80094ec <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	2b00      	cmp	r3, #0
 8009466:	d002      	beq.n	800946e <osThreadNew+0x48>
        name = attr->name;
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	699b      	ldr	r3, [r3, #24]
 8009472:	2b00      	cmp	r3, #0
 8009474:	d002      	beq.n	800947c <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	699b      	ldr	r3, [r3, #24]
 800947a:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800947c:	69fb      	ldr	r3, [r7, #28]
 800947e:	2b00      	cmp	r3, #0
 8009480:	d008      	beq.n	8009494 <osThreadNew+0x6e>
 8009482:	69fb      	ldr	r3, [r7, #28]
 8009484:	2b38      	cmp	r3, #56	; 0x38
 8009486:	d805      	bhi.n	8009494 <osThreadNew+0x6e>
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	685b      	ldr	r3, [r3, #4]
 800948c:	f003 0301 	and.w	r3, r3, #1
 8009490:	2b00      	cmp	r3, #0
 8009492:	d001      	beq.n	8009498 <osThreadNew+0x72>
        return (NULL);
 8009494:	2300      	movs	r3, #0
 8009496:	e054      	b.n	8009542 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	695b      	ldr	r3, [r3, #20]
 800949c:	2b00      	cmp	r3, #0
 800949e:	d003      	beq.n	80094a8 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	695b      	ldr	r3, [r3, #20]
 80094a4:	089b      	lsrs	r3, r3, #2
 80094a6:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	689b      	ldr	r3, [r3, #8]
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d00e      	beq.n	80094ce <osThreadNew+0xa8>
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	68db      	ldr	r3, [r3, #12]
 80094b4:	2bbb      	cmp	r3, #187	; 0xbb
 80094b6:	d90a      	bls.n	80094ce <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d006      	beq.n	80094ce <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	695b      	ldr	r3, [r3, #20]
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d002      	beq.n	80094ce <osThreadNew+0xa8>
        mem = 1;
 80094c8:	2301      	movs	r3, #1
 80094ca:	61bb      	str	r3, [r7, #24]
 80094cc:	e010      	b.n	80094f0 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	689b      	ldr	r3, [r3, #8]
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d10c      	bne.n	80094f0 <osThreadNew+0xca>
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	68db      	ldr	r3, [r3, #12]
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d108      	bne.n	80094f0 <osThreadNew+0xca>
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	691b      	ldr	r3, [r3, #16]
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d104      	bne.n	80094f0 <osThreadNew+0xca>
          mem = 0;
 80094e6:	2300      	movs	r3, #0
 80094e8:	61bb      	str	r3, [r7, #24]
 80094ea:	e001      	b.n	80094f0 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80094ec:	2300      	movs	r3, #0
 80094ee:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80094f0:	69bb      	ldr	r3, [r7, #24]
 80094f2:	2b01      	cmp	r3, #1
 80094f4:	d110      	bne.n	8009518 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80094fa:	687a      	ldr	r2, [r7, #4]
 80094fc:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80094fe:	9202      	str	r2, [sp, #8]
 8009500:	9301      	str	r3, [sp, #4]
 8009502:	69fb      	ldr	r3, [r7, #28]
 8009504:	9300      	str	r3, [sp, #0]
 8009506:	68bb      	ldr	r3, [r7, #8]
 8009508:	6a3a      	ldr	r2, [r7, #32]
 800950a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800950c:	68f8      	ldr	r0, [r7, #12]
 800950e:	f001 fc51 	bl	800adb4 <xTaskCreateStatic>
 8009512:	4603      	mov	r3, r0
 8009514:	613b      	str	r3, [r7, #16]
 8009516:	e013      	b.n	8009540 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8009518:	69bb      	ldr	r3, [r7, #24]
 800951a:	2b00      	cmp	r3, #0
 800951c:	d110      	bne.n	8009540 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800951e:	6a3b      	ldr	r3, [r7, #32]
 8009520:	b29a      	uxth	r2, r3
 8009522:	f107 0310 	add.w	r3, r7, #16
 8009526:	9301      	str	r3, [sp, #4]
 8009528:	69fb      	ldr	r3, [r7, #28]
 800952a:	9300      	str	r3, [sp, #0]
 800952c:	68bb      	ldr	r3, [r7, #8]
 800952e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009530:	68f8      	ldr	r0, [r7, #12]
 8009532:	f001 fc9c 	bl	800ae6e <xTaskCreate>
 8009536:	4603      	mov	r3, r0
 8009538:	2b01      	cmp	r3, #1
 800953a:	d001      	beq.n	8009540 <osThreadNew+0x11a>
            hTask = NULL;
 800953c:	2300      	movs	r3, #0
 800953e:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009540:	693b      	ldr	r3, [r7, #16]
}
 8009542:	4618      	mov	r0, r3
 8009544:	3728      	adds	r7, #40	; 0x28
 8009546:	46bd      	mov	sp, r7
 8009548:	bd80      	pop	{r7, pc}

0800954a <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800954a:	b580      	push	{r7, lr}
 800954c:	b084      	sub	sp, #16
 800954e:	af00      	add	r7, sp, #0
 8009550:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009552:	f3ef 8305 	mrs	r3, IPSR
 8009556:	60bb      	str	r3, [r7, #8]
  return(result);
 8009558:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800955a:	2b00      	cmp	r3, #0
 800955c:	d003      	beq.n	8009566 <osDelay+0x1c>
    stat = osErrorISR;
 800955e:	f06f 0305 	mvn.w	r3, #5
 8009562:	60fb      	str	r3, [r7, #12]
 8009564:	e007      	b.n	8009576 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8009566:	2300      	movs	r3, #0
 8009568:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	2b00      	cmp	r3, #0
 800956e:	d002      	beq.n	8009576 <osDelay+0x2c>
      vTaskDelay(ticks);
 8009570:	6878      	ldr	r0, [r7, #4]
 8009572:	f001 fdd7 	bl	800b124 <vTaskDelay>
    }
  }

  return (stat);
 8009576:	68fb      	ldr	r3, [r7, #12]
}
 8009578:	4618      	mov	r0, r3
 800957a:	3710      	adds	r7, #16
 800957c:	46bd      	mov	sp, r7
 800957e:	bd80      	pop	{r7, pc}

08009580 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8009580:	b580      	push	{r7, lr}
 8009582:	b088      	sub	sp, #32
 8009584:	af00      	add	r7, sp, #0
 8009586:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8009588:	2300      	movs	r3, #0
 800958a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800958c:	f3ef 8305 	mrs	r3, IPSR
 8009590:	60bb      	str	r3, [r7, #8]
  return(result);
 8009592:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8009594:	2b00      	cmp	r3, #0
 8009596:	d174      	bne.n	8009682 <osMutexNew+0x102>
    if (attr != NULL) {
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	2b00      	cmp	r3, #0
 800959c:	d003      	beq.n	80095a6 <osMutexNew+0x26>
      type = attr->attr_bits;
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	685b      	ldr	r3, [r3, #4]
 80095a2:	61bb      	str	r3, [r7, #24]
 80095a4:	e001      	b.n	80095aa <osMutexNew+0x2a>
    } else {
      type = 0U;
 80095a6:	2300      	movs	r3, #0
 80095a8:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 80095aa:	69bb      	ldr	r3, [r7, #24]
 80095ac:	f003 0301 	and.w	r3, r3, #1
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d002      	beq.n	80095ba <osMutexNew+0x3a>
      rmtx = 1U;
 80095b4:	2301      	movs	r3, #1
 80095b6:	617b      	str	r3, [r7, #20]
 80095b8:	e001      	b.n	80095be <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 80095ba:	2300      	movs	r3, #0
 80095bc:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 80095be:	69bb      	ldr	r3, [r7, #24]
 80095c0:	f003 0308 	and.w	r3, r3, #8
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d15c      	bne.n	8009682 <osMutexNew+0x102>
      mem = -1;
 80095c8:	f04f 33ff 	mov.w	r3, #4294967295
 80095cc:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d015      	beq.n	8009600 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	689b      	ldr	r3, [r3, #8]
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d006      	beq.n	80095ea <osMutexNew+0x6a>
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	68db      	ldr	r3, [r3, #12]
 80095e0:	2b4f      	cmp	r3, #79	; 0x4f
 80095e2:	d902      	bls.n	80095ea <osMutexNew+0x6a>
          mem = 1;
 80095e4:	2301      	movs	r3, #1
 80095e6:	613b      	str	r3, [r7, #16]
 80095e8:	e00c      	b.n	8009604 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	689b      	ldr	r3, [r3, #8]
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d108      	bne.n	8009604 <osMutexNew+0x84>
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	68db      	ldr	r3, [r3, #12]
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d104      	bne.n	8009604 <osMutexNew+0x84>
            mem = 0;
 80095fa:	2300      	movs	r3, #0
 80095fc:	613b      	str	r3, [r7, #16]
 80095fe:	e001      	b.n	8009604 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8009600:	2300      	movs	r3, #0
 8009602:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8009604:	693b      	ldr	r3, [r7, #16]
 8009606:	2b01      	cmp	r3, #1
 8009608:	d112      	bne.n	8009630 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800960a:	697b      	ldr	r3, [r7, #20]
 800960c:	2b00      	cmp	r3, #0
 800960e:	d007      	beq.n	8009620 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	689b      	ldr	r3, [r3, #8]
 8009614:	4619      	mov	r1, r3
 8009616:	2004      	movs	r0, #4
 8009618:	f000 fce1 	bl	8009fde <xQueueCreateMutexStatic>
 800961c:	61f8      	str	r0, [r7, #28]
 800961e:	e016      	b.n	800964e <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	689b      	ldr	r3, [r3, #8]
 8009624:	4619      	mov	r1, r3
 8009626:	2001      	movs	r0, #1
 8009628:	f000 fcd9 	bl	8009fde <xQueueCreateMutexStatic>
 800962c:	61f8      	str	r0, [r7, #28]
 800962e:	e00e      	b.n	800964e <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8009630:	693b      	ldr	r3, [r7, #16]
 8009632:	2b00      	cmp	r3, #0
 8009634:	d10b      	bne.n	800964e <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8009636:	697b      	ldr	r3, [r7, #20]
 8009638:	2b00      	cmp	r3, #0
 800963a:	d004      	beq.n	8009646 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800963c:	2004      	movs	r0, #4
 800963e:	f000 fcb6 	bl	8009fae <xQueueCreateMutex>
 8009642:	61f8      	str	r0, [r7, #28]
 8009644:	e003      	b.n	800964e <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8009646:	2001      	movs	r0, #1
 8009648:	f000 fcb1 	bl	8009fae <xQueueCreateMutex>
 800964c:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800964e:	69fb      	ldr	r3, [r7, #28]
 8009650:	2b00      	cmp	r3, #0
 8009652:	d00c      	beq.n	800966e <osMutexNew+0xee>
        if (attr != NULL) {
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	2b00      	cmp	r3, #0
 8009658:	d003      	beq.n	8009662 <osMutexNew+0xe2>
          name = attr->name;
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	60fb      	str	r3, [r7, #12]
 8009660:	e001      	b.n	8009666 <osMutexNew+0xe6>
        } else {
          name = NULL;
 8009662:	2300      	movs	r3, #0
 8009664:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8009666:	68f9      	ldr	r1, [r7, #12]
 8009668:	69f8      	ldr	r0, [r7, #28]
 800966a:	f001 fb1b 	bl	800aca4 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800966e:	69fb      	ldr	r3, [r7, #28]
 8009670:	2b00      	cmp	r3, #0
 8009672:	d006      	beq.n	8009682 <osMutexNew+0x102>
 8009674:	697b      	ldr	r3, [r7, #20]
 8009676:	2b00      	cmp	r3, #0
 8009678:	d003      	beq.n	8009682 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800967a:	69fb      	ldr	r3, [r7, #28]
 800967c:	f043 0301 	orr.w	r3, r3, #1
 8009680:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8009682:	69fb      	ldr	r3, [r7, #28]
}
 8009684:	4618      	mov	r0, r3
 8009686:	3720      	adds	r7, #32
 8009688:	46bd      	mov	sp, r7
 800968a:	bd80      	pop	{r7, pc}

0800968c <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800968c:	b580      	push	{r7, lr}
 800968e:	b08a      	sub	sp, #40	; 0x28
 8009690:	af02      	add	r7, sp, #8
 8009692:	60f8      	str	r0, [r7, #12]
 8009694:	60b9      	str	r1, [r7, #8]
 8009696:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8009698:	2300      	movs	r3, #0
 800969a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800969c:	f3ef 8305 	mrs	r3, IPSR
 80096a0:	613b      	str	r3, [r7, #16]
  return(result);
 80096a2:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d175      	bne.n	8009794 <osSemaphoreNew+0x108>
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d072      	beq.n	8009794 <osSemaphoreNew+0x108>
 80096ae:	68ba      	ldr	r2, [r7, #8]
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	429a      	cmp	r2, r3
 80096b4:	d86e      	bhi.n	8009794 <osSemaphoreNew+0x108>
    mem = -1;
 80096b6:	f04f 33ff 	mov.w	r3, #4294967295
 80096ba:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d015      	beq.n	80096ee <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	689b      	ldr	r3, [r3, #8]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d006      	beq.n	80096d8 <osSemaphoreNew+0x4c>
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	68db      	ldr	r3, [r3, #12]
 80096ce:	2b4f      	cmp	r3, #79	; 0x4f
 80096d0:	d902      	bls.n	80096d8 <osSemaphoreNew+0x4c>
        mem = 1;
 80096d2:	2301      	movs	r3, #1
 80096d4:	61bb      	str	r3, [r7, #24]
 80096d6:	e00c      	b.n	80096f2 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	689b      	ldr	r3, [r3, #8]
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d108      	bne.n	80096f2 <osSemaphoreNew+0x66>
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	68db      	ldr	r3, [r3, #12]
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d104      	bne.n	80096f2 <osSemaphoreNew+0x66>
          mem = 0;
 80096e8:	2300      	movs	r3, #0
 80096ea:	61bb      	str	r3, [r7, #24]
 80096ec:	e001      	b.n	80096f2 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 80096ee:	2300      	movs	r3, #0
 80096f0:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 80096f2:	69bb      	ldr	r3, [r7, #24]
 80096f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096f8:	d04c      	beq.n	8009794 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	2b01      	cmp	r3, #1
 80096fe:	d128      	bne.n	8009752 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8009700:	69bb      	ldr	r3, [r7, #24]
 8009702:	2b01      	cmp	r3, #1
 8009704:	d10a      	bne.n	800971c <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	689b      	ldr	r3, [r3, #8]
 800970a:	2203      	movs	r2, #3
 800970c:	9200      	str	r2, [sp, #0]
 800970e:	2200      	movs	r2, #0
 8009710:	2100      	movs	r1, #0
 8009712:	2001      	movs	r0, #1
 8009714:	f000 fb5c 	bl	8009dd0 <xQueueGenericCreateStatic>
 8009718:	61f8      	str	r0, [r7, #28]
 800971a:	e005      	b.n	8009728 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800971c:	2203      	movs	r2, #3
 800971e:	2100      	movs	r1, #0
 8009720:	2001      	movs	r0, #1
 8009722:	f000 fbcd 	bl	8009ec0 <xQueueGenericCreate>
 8009726:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8009728:	69fb      	ldr	r3, [r7, #28]
 800972a:	2b00      	cmp	r3, #0
 800972c:	d022      	beq.n	8009774 <osSemaphoreNew+0xe8>
 800972e:	68bb      	ldr	r3, [r7, #8]
 8009730:	2b00      	cmp	r3, #0
 8009732:	d01f      	beq.n	8009774 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8009734:	2300      	movs	r3, #0
 8009736:	2200      	movs	r2, #0
 8009738:	2100      	movs	r1, #0
 800973a:	69f8      	ldr	r0, [r7, #28]
 800973c:	f000 fcd4 	bl	800a0e8 <xQueueGenericSend>
 8009740:	4603      	mov	r3, r0
 8009742:	2b01      	cmp	r3, #1
 8009744:	d016      	beq.n	8009774 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8009746:	69f8      	ldr	r0, [r7, #28]
 8009748:	f001 f960 	bl	800aa0c <vQueueDelete>
            hSemaphore = NULL;
 800974c:	2300      	movs	r3, #0
 800974e:	61fb      	str	r3, [r7, #28]
 8009750:	e010      	b.n	8009774 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8009752:	69bb      	ldr	r3, [r7, #24]
 8009754:	2b01      	cmp	r3, #1
 8009756:	d108      	bne.n	800976a <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	689b      	ldr	r3, [r3, #8]
 800975c:	461a      	mov	r2, r3
 800975e:	68b9      	ldr	r1, [r7, #8]
 8009760:	68f8      	ldr	r0, [r7, #12]
 8009762:	f000 fc57 	bl	800a014 <xQueueCreateCountingSemaphoreStatic>
 8009766:	61f8      	str	r0, [r7, #28]
 8009768:	e004      	b.n	8009774 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800976a:	68b9      	ldr	r1, [r7, #8]
 800976c:	68f8      	ldr	r0, [r7, #12]
 800976e:	f000 fc88 	bl	800a082 <xQueueCreateCountingSemaphore>
 8009772:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8009774:	69fb      	ldr	r3, [r7, #28]
 8009776:	2b00      	cmp	r3, #0
 8009778:	d00c      	beq.n	8009794 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	2b00      	cmp	r3, #0
 800977e:	d003      	beq.n	8009788 <osSemaphoreNew+0xfc>
          name = attr->name;
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	617b      	str	r3, [r7, #20]
 8009786:	e001      	b.n	800978c <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8009788:	2300      	movs	r3, #0
 800978a:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800978c:	6979      	ldr	r1, [r7, #20]
 800978e:	69f8      	ldr	r0, [r7, #28]
 8009790:	f001 fa88 	bl	800aca4 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8009794:	69fb      	ldr	r3, [r7, #28]
}
 8009796:	4618      	mov	r0, r3
 8009798:	3720      	adds	r7, #32
 800979a:	46bd      	mov	sp, r7
 800979c:	bd80      	pop	{r7, pc}
	...

080097a0 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80097a0:	b580      	push	{r7, lr}
 80097a2:	b086      	sub	sp, #24
 80097a4:	af00      	add	r7, sp, #0
 80097a6:	6078      	str	r0, [r7, #4]
 80097a8:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80097ae:	2300      	movs	r3, #0
 80097b0:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80097b2:	693b      	ldr	r3, [r7, #16]
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d103      	bne.n	80097c0 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 80097b8:	f06f 0303 	mvn.w	r3, #3
 80097bc:	617b      	str	r3, [r7, #20]
 80097be:	e039      	b.n	8009834 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80097c0:	f3ef 8305 	mrs	r3, IPSR
 80097c4:	60fb      	str	r3, [r7, #12]
  return(result);
 80097c6:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d022      	beq.n	8009812 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 80097cc:	683b      	ldr	r3, [r7, #0]
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d003      	beq.n	80097da <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 80097d2:	f06f 0303 	mvn.w	r3, #3
 80097d6:	617b      	str	r3, [r7, #20]
 80097d8:	e02c      	b.n	8009834 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 80097da:	2300      	movs	r3, #0
 80097dc:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80097de:	f107 0308 	add.w	r3, r7, #8
 80097e2:	461a      	mov	r2, r3
 80097e4:	2100      	movs	r1, #0
 80097e6:	6938      	ldr	r0, [r7, #16]
 80097e8:	f001 f890 	bl	800a90c <xQueueReceiveFromISR>
 80097ec:	4603      	mov	r3, r0
 80097ee:	2b01      	cmp	r3, #1
 80097f0:	d003      	beq.n	80097fa <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 80097f2:	f06f 0302 	mvn.w	r3, #2
 80097f6:	617b      	str	r3, [r7, #20]
 80097f8:	e01c      	b.n	8009834 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 80097fa:	68bb      	ldr	r3, [r7, #8]
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d019      	beq.n	8009834 <osSemaphoreAcquire+0x94>
 8009800:	4b0f      	ldr	r3, [pc, #60]	; (8009840 <osSemaphoreAcquire+0xa0>)
 8009802:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009806:	601a      	str	r2, [r3, #0]
 8009808:	f3bf 8f4f 	dsb	sy
 800980c:	f3bf 8f6f 	isb	sy
 8009810:	e010      	b.n	8009834 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8009812:	6839      	ldr	r1, [r7, #0]
 8009814:	6938      	ldr	r0, [r7, #16]
 8009816:	f000 ff6d 	bl	800a6f4 <xQueueSemaphoreTake>
 800981a:	4603      	mov	r3, r0
 800981c:	2b01      	cmp	r3, #1
 800981e:	d009      	beq.n	8009834 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8009820:	683b      	ldr	r3, [r7, #0]
 8009822:	2b00      	cmp	r3, #0
 8009824:	d003      	beq.n	800982e <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8009826:	f06f 0301 	mvn.w	r3, #1
 800982a:	617b      	str	r3, [r7, #20]
 800982c:	e002      	b.n	8009834 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800982e:	f06f 0302 	mvn.w	r3, #2
 8009832:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8009834:	697b      	ldr	r3, [r7, #20]
}
 8009836:	4618      	mov	r0, r3
 8009838:	3718      	adds	r7, #24
 800983a:	46bd      	mov	sp, r7
 800983c:	bd80      	pop	{r7, pc}
 800983e:	bf00      	nop
 8009840:	e000ed04 	.word	0xe000ed04

08009844 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8009844:	b580      	push	{r7, lr}
 8009846:	b086      	sub	sp, #24
 8009848:	af00      	add	r7, sp, #0
 800984a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8009850:	2300      	movs	r3, #0
 8009852:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8009854:	693b      	ldr	r3, [r7, #16]
 8009856:	2b00      	cmp	r3, #0
 8009858:	d103      	bne.n	8009862 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800985a:	f06f 0303 	mvn.w	r3, #3
 800985e:	617b      	str	r3, [r7, #20]
 8009860:	e02c      	b.n	80098bc <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009862:	f3ef 8305 	mrs	r3, IPSR
 8009866:	60fb      	str	r3, [r7, #12]
  return(result);
 8009868:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800986a:	2b00      	cmp	r3, #0
 800986c:	d01a      	beq.n	80098a4 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800986e:	2300      	movs	r3, #0
 8009870:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8009872:	f107 0308 	add.w	r3, r7, #8
 8009876:	4619      	mov	r1, r3
 8009878:	6938      	ldr	r0, [r7, #16]
 800987a:	f000 fdce 	bl	800a41a <xQueueGiveFromISR>
 800987e:	4603      	mov	r3, r0
 8009880:	2b01      	cmp	r3, #1
 8009882:	d003      	beq.n	800988c <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8009884:	f06f 0302 	mvn.w	r3, #2
 8009888:	617b      	str	r3, [r7, #20]
 800988a:	e017      	b.n	80098bc <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800988c:	68bb      	ldr	r3, [r7, #8]
 800988e:	2b00      	cmp	r3, #0
 8009890:	d014      	beq.n	80098bc <osSemaphoreRelease+0x78>
 8009892:	4b0d      	ldr	r3, [pc, #52]	; (80098c8 <osSemaphoreRelease+0x84>)
 8009894:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009898:	601a      	str	r2, [r3, #0]
 800989a:	f3bf 8f4f 	dsb	sy
 800989e:	f3bf 8f6f 	isb	sy
 80098a2:	e00b      	b.n	80098bc <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80098a4:	2300      	movs	r3, #0
 80098a6:	2200      	movs	r2, #0
 80098a8:	2100      	movs	r1, #0
 80098aa:	6938      	ldr	r0, [r7, #16]
 80098ac:	f000 fc1c 	bl	800a0e8 <xQueueGenericSend>
 80098b0:	4603      	mov	r3, r0
 80098b2:	2b01      	cmp	r3, #1
 80098b4:	d002      	beq.n	80098bc <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 80098b6:	f06f 0302 	mvn.w	r3, #2
 80098ba:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 80098bc:	697b      	ldr	r3, [r7, #20]
}
 80098be:	4618      	mov	r0, r3
 80098c0:	3718      	adds	r7, #24
 80098c2:	46bd      	mov	sp, r7
 80098c4:	bd80      	pop	{r7, pc}
 80098c6:	bf00      	nop
 80098c8:	e000ed04 	.word	0xe000ed04

080098cc <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80098cc:	b580      	push	{r7, lr}
 80098ce:	b08a      	sub	sp, #40	; 0x28
 80098d0:	af02      	add	r7, sp, #8
 80098d2:	60f8      	str	r0, [r7, #12]
 80098d4:	60b9      	str	r1, [r7, #8]
 80098d6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80098d8:	2300      	movs	r3, #0
 80098da:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80098dc:	f3ef 8305 	mrs	r3, IPSR
 80098e0:	613b      	str	r3, [r7, #16]
  return(result);
 80098e2:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d15f      	bne.n	80099a8 <osMessageQueueNew+0xdc>
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d05c      	beq.n	80099a8 <osMessageQueueNew+0xdc>
 80098ee:	68bb      	ldr	r3, [r7, #8]
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d059      	beq.n	80099a8 <osMessageQueueNew+0xdc>
    mem = -1;
 80098f4:	f04f 33ff 	mov.w	r3, #4294967295
 80098f8:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d029      	beq.n	8009954 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	689b      	ldr	r3, [r3, #8]
 8009904:	2b00      	cmp	r3, #0
 8009906:	d012      	beq.n	800992e <osMessageQueueNew+0x62>
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	68db      	ldr	r3, [r3, #12]
 800990c:	2b4f      	cmp	r3, #79	; 0x4f
 800990e:	d90e      	bls.n	800992e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8009914:	2b00      	cmp	r3, #0
 8009916:	d00a      	beq.n	800992e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	695a      	ldr	r2, [r3, #20]
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	68b9      	ldr	r1, [r7, #8]
 8009920:	fb01 f303 	mul.w	r3, r1, r3
 8009924:	429a      	cmp	r2, r3
 8009926:	d302      	bcc.n	800992e <osMessageQueueNew+0x62>
        mem = 1;
 8009928:	2301      	movs	r3, #1
 800992a:	61bb      	str	r3, [r7, #24]
 800992c:	e014      	b.n	8009958 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	689b      	ldr	r3, [r3, #8]
 8009932:	2b00      	cmp	r3, #0
 8009934:	d110      	bne.n	8009958 <osMessageQueueNew+0x8c>
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	68db      	ldr	r3, [r3, #12]
 800993a:	2b00      	cmp	r3, #0
 800993c:	d10c      	bne.n	8009958 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8009942:	2b00      	cmp	r3, #0
 8009944:	d108      	bne.n	8009958 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	695b      	ldr	r3, [r3, #20]
 800994a:	2b00      	cmp	r3, #0
 800994c:	d104      	bne.n	8009958 <osMessageQueueNew+0x8c>
          mem = 0;
 800994e:	2300      	movs	r3, #0
 8009950:	61bb      	str	r3, [r7, #24]
 8009952:	e001      	b.n	8009958 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8009954:	2300      	movs	r3, #0
 8009956:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009958:	69bb      	ldr	r3, [r7, #24]
 800995a:	2b01      	cmp	r3, #1
 800995c:	d10b      	bne.n	8009976 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	691a      	ldr	r2, [r3, #16]
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	689b      	ldr	r3, [r3, #8]
 8009966:	2100      	movs	r1, #0
 8009968:	9100      	str	r1, [sp, #0]
 800996a:	68b9      	ldr	r1, [r7, #8]
 800996c:	68f8      	ldr	r0, [r7, #12]
 800996e:	f000 fa2f 	bl	8009dd0 <xQueueGenericCreateStatic>
 8009972:	61f8      	str	r0, [r7, #28]
 8009974:	e008      	b.n	8009988 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8009976:	69bb      	ldr	r3, [r7, #24]
 8009978:	2b00      	cmp	r3, #0
 800997a:	d105      	bne.n	8009988 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800997c:	2200      	movs	r2, #0
 800997e:	68b9      	ldr	r1, [r7, #8]
 8009980:	68f8      	ldr	r0, [r7, #12]
 8009982:	f000 fa9d 	bl	8009ec0 <xQueueGenericCreate>
 8009986:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8009988:	69fb      	ldr	r3, [r7, #28]
 800998a:	2b00      	cmp	r3, #0
 800998c:	d00c      	beq.n	80099a8 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	2b00      	cmp	r3, #0
 8009992:	d003      	beq.n	800999c <osMessageQueueNew+0xd0>
        name = attr->name;
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	617b      	str	r3, [r7, #20]
 800999a:	e001      	b.n	80099a0 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800999c:	2300      	movs	r3, #0
 800999e:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80099a0:	6979      	ldr	r1, [r7, #20]
 80099a2:	69f8      	ldr	r0, [r7, #28]
 80099a4:	f001 f97e 	bl	800aca4 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80099a8:	69fb      	ldr	r3, [r7, #28]
}
 80099aa:	4618      	mov	r0, r3
 80099ac:	3720      	adds	r7, #32
 80099ae:	46bd      	mov	sp, r7
 80099b0:	bd80      	pop	{r7, pc}
	...

080099b4 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80099b4:	b580      	push	{r7, lr}
 80099b6:	b088      	sub	sp, #32
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	60f8      	str	r0, [r7, #12]
 80099bc:	60b9      	str	r1, [r7, #8]
 80099be:	603b      	str	r3, [r7, #0]
 80099c0:	4613      	mov	r3, r2
 80099c2:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80099c8:	2300      	movs	r3, #0
 80099ca:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80099cc:	f3ef 8305 	mrs	r3, IPSR
 80099d0:	617b      	str	r3, [r7, #20]
  return(result);
 80099d2:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d028      	beq.n	8009a2a <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80099d8:	69bb      	ldr	r3, [r7, #24]
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d005      	beq.n	80099ea <osMessageQueuePut+0x36>
 80099de:	68bb      	ldr	r3, [r7, #8]
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d002      	beq.n	80099ea <osMessageQueuePut+0x36>
 80099e4:	683b      	ldr	r3, [r7, #0]
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d003      	beq.n	80099f2 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 80099ea:	f06f 0303 	mvn.w	r3, #3
 80099ee:	61fb      	str	r3, [r7, #28]
 80099f0:	e038      	b.n	8009a64 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 80099f2:	2300      	movs	r3, #0
 80099f4:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80099f6:	f107 0210 	add.w	r2, r7, #16
 80099fa:	2300      	movs	r3, #0
 80099fc:	68b9      	ldr	r1, [r7, #8]
 80099fe:	69b8      	ldr	r0, [r7, #24]
 8009a00:	f000 fc70 	bl	800a2e4 <xQueueGenericSendFromISR>
 8009a04:	4603      	mov	r3, r0
 8009a06:	2b01      	cmp	r3, #1
 8009a08:	d003      	beq.n	8009a12 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8009a0a:	f06f 0302 	mvn.w	r3, #2
 8009a0e:	61fb      	str	r3, [r7, #28]
 8009a10:	e028      	b.n	8009a64 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8009a12:	693b      	ldr	r3, [r7, #16]
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d025      	beq.n	8009a64 <osMessageQueuePut+0xb0>
 8009a18:	4b15      	ldr	r3, [pc, #84]	; (8009a70 <osMessageQueuePut+0xbc>)
 8009a1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a1e:	601a      	str	r2, [r3, #0]
 8009a20:	f3bf 8f4f 	dsb	sy
 8009a24:	f3bf 8f6f 	isb	sy
 8009a28:	e01c      	b.n	8009a64 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8009a2a:	69bb      	ldr	r3, [r7, #24]
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d002      	beq.n	8009a36 <osMessageQueuePut+0x82>
 8009a30:	68bb      	ldr	r3, [r7, #8]
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d103      	bne.n	8009a3e <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8009a36:	f06f 0303 	mvn.w	r3, #3
 8009a3a:	61fb      	str	r3, [r7, #28]
 8009a3c:	e012      	b.n	8009a64 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8009a3e:	2300      	movs	r3, #0
 8009a40:	683a      	ldr	r2, [r7, #0]
 8009a42:	68b9      	ldr	r1, [r7, #8]
 8009a44:	69b8      	ldr	r0, [r7, #24]
 8009a46:	f000 fb4f 	bl	800a0e8 <xQueueGenericSend>
 8009a4a:	4603      	mov	r3, r0
 8009a4c:	2b01      	cmp	r3, #1
 8009a4e:	d009      	beq.n	8009a64 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8009a50:	683b      	ldr	r3, [r7, #0]
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d003      	beq.n	8009a5e <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8009a56:	f06f 0301 	mvn.w	r3, #1
 8009a5a:	61fb      	str	r3, [r7, #28]
 8009a5c:	e002      	b.n	8009a64 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8009a5e:	f06f 0302 	mvn.w	r3, #2
 8009a62:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8009a64:	69fb      	ldr	r3, [r7, #28]
}
 8009a66:	4618      	mov	r0, r3
 8009a68:	3720      	adds	r7, #32
 8009a6a:	46bd      	mov	sp, r7
 8009a6c:	bd80      	pop	{r7, pc}
 8009a6e:	bf00      	nop
 8009a70:	e000ed04 	.word	0xe000ed04

08009a74 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8009a74:	b580      	push	{r7, lr}
 8009a76:	b088      	sub	sp, #32
 8009a78:	af00      	add	r7, sp, #0
 8009a7a:	60f8      	str	r0, [r7, #12]
 8009a7c:	60b9      	str	r1, [r7, #8]
 8009a7e:	607a      	str	r2, [r7, #4]
 8009a80:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8009a86:	2300      	movs	r3, #0
 8009a88:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009a8a:	f3ef 8305 	mrs	r3, IPSR
 8009a8e:	617b      	str	r3, [r7, #20]
  return(result);
 8009a90:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d028      	beq.n	8009ae8 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009a96:	69bb      	ldr	r3, [r7, #24]
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d005      	beq.n	8009aa8 <osMessageQueueGet+0x34>
 8009a9c:	68bb      	ldr	r3, [r7, #8]
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d002      	beq.n	8009aa8 <osMessageQueueGet+0x34>
 8009aa2:	683b      	ldr	r3, [r7, #0]
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d003      	beq.n	8009ab0 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8009aa8:	f06f 0303 	mvn.w	r3, #3
 8009aac:	61fb      	str	r3, [r7, #28]
 8009aae:	e037      	b.n	8009b20 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8009ab0:	2300      	movs	r3, #0
 8009ab2:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8009ab4:	f107 0310 	add.w	r3, r7, #16
 8009ab8:	461a      	mov	r2, r3
 8009aba:	68b9      	ldr	r1, [r7, #8]
 8009abc:	69b8      	ldr	r0, [r7, #24]
 8009abe:	f000 ff25 	bl	800a90c <xQueueReceiveFromISR>
 8009ac2:	4603      	mov	r3, r0
 8009ac4:	2b01      	cmp	r3, #1
 8009ac6:	d003      	beq.n	8009ad0 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8009ac8:	f06f 0302 	mvn.w	r3, #2
 8009acc:	61fb      	str	r3, [r7, #28]
 8009ace:	e027      	b.n	8009b20 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8009ad0:	693b      	ldr	r3, [r7, #16]
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d024      	beq.n	8009b20 <osMessageQueueGet+0xac>
 8009ad6:	4b15      	ldr	r3, [pc, #84]	; (8009b2c <osMessageQueueGet+0xb8>)
 8009ad8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009adc:	601a      	str	r2, [r3, #0]
 8009ade:	f3bf 8f4f 	dsb	sy
 8009ae2:	f3bf 8f6f 	isb	sy
 8009ae6:	e01b      	b.n	8009b20 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8009ae8:	69bb      	ldr	r3, [r7, #24]
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d002      	beq.n	8009af4 <osMessageQueueGet+0x80>
 8009aee:	68bb      	ldr	r3, [r7, #8]
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d103      	bne.n	8009afc <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8009af4:	f06f 0303 	mvn.w	r3, #3
 8009af8:	61fb      	str	r3, [r7, #28]
 8009afa:	e011      	b.n	8009b20 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8009afc:	683a      	ldr	r2, [r7, #0]
 8009afe:	68b9      	ldr	r1, [r7, #8]
 8009b00:	69b8      	ldr	r0, [r7, #24]
 8009b02:	f000 fd17 	bl	800a534 <xQueueReceive>
 8009b06:	4603      	mov	r3, r0
 8009b08:	2b01      	cmp	r3, #1
 8009b0a:	d009      	beq.n	8009b20 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8009b0c:	683b      	ldr	r3, [r7, #0]
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d003      	beq.n	8009b1a <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8009b12:	f06f 0301 	mvn.w	r3, #1
 8009b16:	61fb      	str	r3, [r7, #28]
 8009b18:	e002      	b.n	8009b20 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8009b1a:	f06f 0302 	mvn.w	r3, #2
 8009b1e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8009b20:	69fb      	ldr	r3, [r7, #28]
}
 8009b22:	4618      	mov	r0, r3
 8009b24:	3720      	adds	r7, #32
 8009b26:	46bd      	mov	sp, r7
 8009b28:	bd80      	pop	{r7, pc}
 8009b2a:	bf00      	nop
 8009b2c:	e000ed04 	.word	0xe000ed04

08009b30 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009b30:	b480      	push	{r7}
 8009b32:	b085      	sub	sp, #20
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	60f8      	str	r0, [r7, #12]
 8009b38:	60b9      	str	r1, [r7, #8]
 8009b3a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	4a07      	ldr	r2, [pc, #28]	; (8009b5c <vApplicationGetIdleTaskMemory+0x2c>)
 8009b40:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009b42:	68bb      	ldr	r3, [r7, #8]
 8009b44:	4a06      	ldr	r2, [pc, #24]	; (8009b60 <vApplicationGetIdleTaskMemory+0x30>)
 8009b46:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	2280      	movs	r2, #128	; 0x80
 8009b4c:	601a      	str	r2, [r3, #0]
}
 8009b4e:	bf00      	nop
 8009b50:	3714      	adds	r7, #20
 8009b52:	46bd      	mov	sp, r7
 8009b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b58:	4770      	bx	lr
 8009b5a:	bf00      	nop
 8009b5c:	200003c4 	.word	0x200003c4
 8009b60:	20000480 	.word	0x20000480

08009b64 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009b64:	b480      	push	{r7}
 8009b66:	b085      	sub	sp, #20
 8009b68:	af00      	add	r7, sp, #0
 8009b6a:	60f8      	str	r0, [r7, #12]
 8009b6c:	60b9      	str	r1, [r7, #8]
 8009b6e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	4a07      	ldr	r2, [pc, #28]	; (8009b90 <vApplicationGetTimerTaskMemory+0x2c>)
 8009b74:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009b76:	68bb      	ldr	r3, [r7, #8]
 8009b78:	4a06      	ldr	r2, [pc, #24]	; (8009b94 <vApplicationGetTimerTaskMemory+0x30>)
 8009b7a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009b82:	601a      	str	r2, [r3, #0]
}
 8009b84:	bf00      	nop
 8009b86:	3714      	adds	r7, #20
 8009b88:	46bd      	mov	sp, r7
 8009b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b8e:	4770      	bx	lr
 8009b90:	20000680 	.word	0x20000680
 8009b94:	2000073c 	.word	0x2000073c

08009b98 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009b98:	b480      	push	{r7}
 8009b9a:	b083      	sub	sp, #12
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	f103 0208 	add.w	r2, r3, #8
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	f04f 32ff 	mov.w	r2, #4294967295
 8009bb0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	f103 0208 	add.w	r2, r3, #8
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	f103 0208 	add.w	r2, r3, #8
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	2200      	movs	r2, #0
 8009bca:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009bcc:	bf00      	nop
 8009bce:	370c      	adds	r7, #12
 8009bd0:	46bd      	mov	sp, r7
 8009bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd6:	4770      	bx	lr

08009bd8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009bd8:	b480      	push	{r7}
 8009bda:	b083      	sub	sp, #12
 8009bdc:	af00      	add	r7, sp, #0
 8009bde:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	2200      	movs	r2, #0
 8009be4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009be6:	bf00      	nop
 8009be8:	370c      	adds	r7, #12
 8009bea:	46bd      	mov	sp, r7
 8009bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf0:	4770      	bx	lr

08009bf2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009bf2:	b480      	push	{r7}
 8009bf4:	b085      	sub	sp, #20
 8009bf6:	af00      	add	r7, sp, #0
 8009bf8:	6078      	str	r0, [r7, #4]
 8009bfa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	685b      	ldr	r3, [r3, #4]
 8009c00:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009c02:	683b      	ldr	r3, [r7, #0]
 8009c04:	68fa      	ldr	r2, [r7, #12]
 8009c06:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	689a      	ldr	r2, [r3, #8]
 8009c0c:	683b      	ldr	r3, [r7, #0]
 8009c0e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	689b      	ldr	r3, [r3, #8]
 8009c14:	683a      	ldr	r2, [r7, #0]
 8009c16:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	683a      	ldr	r2, [r7, #0]
 8009c1c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009c1e:	683b      	ldr	r3, [r7, #0]
 8009c20:	687a      	ldr	r2, [r7, #4]
 8009c22:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	1c5a      	adds	r2, r3, #1
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	601a      	str	r2, [r3, #0]
}
 8009c2e:	bf00      	nop
 8009c30:	3714      	adds	r7, #20
 8009c32:	46bd      	mov	sp, r7
 8009c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c38:	4770      	bx	lr

08009c3a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009c3a:	b480      	push	{r7}
 8009c3c:	b085      	sub	sp, #20
 8009c3e:	af00      	add	r7, sp, #0
 8009c40:	6078      	str	r0, [r7, #4]
 8009c42:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009c44:	683b      	ldr	r3, [r7, #0]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009c4a:	68bb      	ldr	r3, [r7, #8]
 8009c4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c50:	d103      	bne.n	8009c5a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	691b      	ldr	r3, [r3, #16]
 8009c56:	60fb      	str	r3, [r7, #12]
 8009c58:	e00c      	b.n	8009c74 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	3308      	adds	r3, #8
 8009c5e:	60fb      	str	r3, [r7, #12]
 8009c60:	e002      	b.n	8009c68 <vListInsert+0x2e>
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	685b      	ldr	r3, [r3, #4]
 8009c66:	60fb      	str	r3, [r7, #12]
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	685b      	ldr	r3, [r3, #4]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	68ba      	ldr	r2, [r7, #8]
 8009c70:	429a      	cmp	r2, r3
 8009c72:	d2f6      	bcs.n	8009c62 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	685a      	ldr	r2, [r3, #4]
 8009c78:	683b      	ldr	r3, [r7, #0]
 8009c7a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009c7c:	683b      	ldr	r3, [r7, #0]
 8009c7e:	685b      	ldr	r3, [r3, #4]
 8009c80:	683a      	ldr	r2, [r7, #0]
 8009c82:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009c84:	683b      	ldr	r3, [r7, #0]
 8009c86:	68fa      	ldr	r2, [r7, #12]
 8009c88:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	683a      	ldr	r2, [r7, #0]
 8009c8e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009c90:	683b      	ldr	r3, [r7, #0]
 8009c92:	687a      	ldr	r2, [r7, #4]
 8009c94:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	1c5a      	adds	r2, r3, #1
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	601a      	str	r2, [r3, #0]
}
 8009ca0:	bf00      	nop
 8009ca2:	3714      	adds	r7, #20
 8009ca4:	46bd      	mov	sp, r7
 8009ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009caa:	4770      	bx	lr

08009cac <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009cac:	b480      	push	{r7}
 8009cae:	b085      	sub	sp, #20
 8009cb0:	af00      	add	r7, sp, #0
 8009cb2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	691b      	ldr	r3, [r3, #16]
 8009cb8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	685b      	ldr	r3, [r3, #4]
 8009cbe:	687a      	ldr	r2, [r7, #4]
 8009cc0:	6892      	ldr	r2, [r2, #8]
 8009cc2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	689b      	ldr	r3, [r3, #8]
 8009cc8:	687a      	ldr	r2, [r7, #4]
 8009cca:	6852      	ldr	r2, [r2, #4]
 8009ccc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	685b      	ldr	r3, [r3, #4]
 8009cd2:	687a      	ldr	r2, [r7, #4]
 8009cd4:	429a      	cmp	r2, r3
 8009cd6:	d103      	bne.n	8009ce0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	689a      	ldr	r2, [r3, #8]
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	2200      	movs	r2, #0
 8009ce4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	1e5a      	subs	r2, r3, #1
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	681b      	ldr	r3, [r3, #0]
}
 8009cf4:	4618      	mov	r0, r3
 8009cf6:	3714      	adds	r7, #20
 8009cf8:	46bd      	mov	sp, r7
 8009cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cfe:	4770      	bx	lr

08009d00 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009d00:	b580      	push	{r7, lr}
 8009d02:	b084      	sub	sp, #16
 8009d04:	af00      	add	r7, sp, #0
 8009d06:	6078      	str	r0, [r7, #4]
 8009d08:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d10a      	bne.n	8009d2a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009d14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d18:	f383 8811 	msr	BASEPRI, r3
 8009d1c:	f3bf 8f6f 	isb	sy
 8009d20:	f3bf 8f4f 	dsb	sy
 8009d24:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009d26:	bf00      	nop
 8009d28:	e7fe      	b.n	8009d28 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009d2a:	f002 fcf3 	bl	800c714 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	681a      	ldr	r2, [r3, #0]
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d36:	68f9      	ldr	r1, [r7, #12]
 8009d38:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009d3a:	fb01 f303 	mul.w	r3, r1, r3
 8009d3e:	441a      	add	r2, r3
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	2200      	movs	r2, #0
 8009d48:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	681a      	ldr	r2, [r3, #0]
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	681a      	ldr	r2, [r3, #0]
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d5a:	3b01      	subs	r3, #1
 8009d5c:	68f9      	ldr	r1, [r7, #12]
 8009d5e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009d60:	fb01 f303 	mul.w	r3, r1, r3
 8009d64:	441a      	add	r2, r3
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	22ff      	movs	r2, #255	; 0xff
 8009d6e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	22ff      	movs	r2, #255	; 0xff
 8009d76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009d7a:	683b      	ldr	r3, [r7, #0]
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d114      	bne.n	8009daa <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	691b      	ldr	r3, [r3, #16]
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d01a      	beq.n	8009dbe <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	3310      	adds	r3, #16
 8009d8c:	4618      	mov	r0, r3
 8009d8e:	f001 fca9 	bl	800b6e4 <xTaskRemoveFromEventList>
 8009d92:	4603      	mov	r3, r0
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d012      	beq.n	8009dbe <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009d98:	4b0c      	ldr	r3, [pc, #48]	; (8009dcc <xQueueGenericReset+0xcc>)
 8009d9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d9e:	601a      	str	r2, [r3, #0]
 8009da0:	f3bf 8f4f 	dsb	sy
 8009da4:	f3bf 8f6f 	isb	sy
 8009da8:	e009      	b.n	8009dbe <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	3310      	adds	r3, #16
 8009dae:	4618      	mov	r0, r3
 8009db0:	f7ff fef2 	bl	8009b98 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	3324      	adds	r3, #36	; 0x24
 8009db8:	4618      	mov	r0, r3
 8009dba:	f7ff feed 	bl	8009b98 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009dbe:	f002 fcd9 	bl	800c774 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009dc2:	2301      	movs	r3, #1
}
 8009dc4:	4618      	mov	r0, r3
 8009dc6:	3710      	adds	r7, #16
 8009dc8:	46bd      	mov	sp, r7
 8009dca:	bd80      	pop	{r7, pc}
 8009dcc:	e000ed04 	.word	0xe000ed04

08009dd0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009dd0:	b580      	push	{r7, lr}
 8009dd2:	b08e      	sub	sp, #56	; 0x38
 8009dd4:	af02      	add	r7, sp, #8
 8009dd6:	60f8      	str	r0, [r7, #12]
 8009dd8:	60b9      	str	r1, [r7, #8]
 8009dda:	607a      	str	r2, [r7, #4]
 8009ddc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d10a      	bne.n	8009dfa <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8009de4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009de8:	f383 8811 	msr	BASEPRI, r3
 8009dec:	f3bf 8f6f 	isb	sy
 8009df0:	f3bf 8f4f 	dsb	sy
 8009df4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009df6:	bf00      	nop
 8009df8:	e7fe      	b.n	8009df8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009dfa:	683b      	ldr	r3, [r7, #0]
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d10a      	bne.n	8009e16 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8009e00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e04:	f383 8811 	msr	BASEPRI, r3
 8009e08:	f3bf 8f6f 	isb	sy
 8009e0c:	f3bf 8f4f 	dsb	sy
 8009e10:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009e12:	bf00      	nop
 8009e14:	e7fe      	b.n	8009e14 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d002      	beq.n	8009e22 <xQueueGenericCreateStatic+0x52>
 8009e1c:	68bb      	ldr	r3, [r7, #8]
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d001      	beq.n	8009e26 <xQueueGenericCreateStatic+0x56>
 8009e22:	2301      	movs	r3, #1
 8009e24:	e000      	b.n	8009e28 <xQueueGenericCreateStatic+0x58>
 8009e26:	2300      	movs	r3, #0
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d10a      	bne.n	8009e42 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8009e2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e30:	f383 8811 	msr	BASEPRI, r3
 8009e34:	f3bf 8f6f 	isb	sy
 8009e38:	f3bf 8f4f 	dsb	sy
 8009e3c:	623b      	str	r3, [r7, #32]
}
 8009e3e:	bf00      	nop
 8009e40:	e7fe      	b.n	8009e40 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d102      	bne.n	8009e4e <xQueueGenericCreateStatic+0x7e>
 8009e48:	68bb      	ldr	r3, [r7, #8]
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d101      	bne.n	8009e52 <xQueueGenericCreateStatic+0x82>
 8009e4e:	2301      	movs	r3, #1
 8009e50:	e000      	b.n	8009e54 <xQueueGenericCreateStatic+0x84>
 8009e52:	2300      	movs	r3, #0
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d10a      	bne.n	8009e6e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8009e58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e5c:	f383 8811 	msr	BASEPRI, r3
 8009e60:	f3bf 8f6f 	isb	sy
 8009e64:	f3bf 8f4f 	dsb	sy
 8009e68:	61fb      	str	r3, [r7, #28]
}
 8009e6a:	bf00      	nop
 8009e6c:	e7fe      	b.n	8009e6c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009e6e:	2350      	movs	r3, #80	; 0x50
 8009e70:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009e72:	697b      	ldr	r3, [r7, #20]
 8009e74:	2b50      	cmp	r3, #80	; 0x50
 8009e76:	d00a      	beq.n	8009e8e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8009e78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e7c:	f383 8811 	msr	BASEPRI, r3
 8009e80:	f3bf 8f6f 	isb	sy
 8009e84:	f3bf 8f4f 	dsb	sy
 8009e88:	61bb      	str	r3, [r7, #24]
}
 8009e8a:	bf00      	nop
 8009e8c:	e7fe      	b.n	8009e8c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009e8e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009e90:	683b      	ldr	r3, [r7, #0]
 8009e92:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8009e94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d00d      	beq.n	8009eb6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009e9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e9c:	2201      	movs	r2, #1
 8009e9e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009ea2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8009ea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ea8:	9300      	str	r3, [sp, #0]
 8009eaa:	4613      	mov	r3, r2
 8009eac:	687a      	ldr	r2, [r7, #4]
 8009eae:	68b9      	ldr	r1, [r7, #8]
 8009eb0:	68f8      	ldr	r0, [r7, #12]
 8009eb2:	f000 f83f 	bl	8009f34 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009eb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009eb8:	4618      	mov	r0, r3
 8009eba:	3730      	adds	r7, #48	; 0x30
 8009ebc:	46bd      	mov	sp, r7
 8009ebe:	bd80      	pop	{r7, pc}

08009ec0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8009ec0:	b580      	push	{r7, lr}
 8009ec2:	b08a      	sub	sp, #40	; 0x28
 8009ec4:	af02      	add	r7, sp, #8
 8009ec6:	60f8      	str	r0, [r7, #12]
 8009ec8:	60b9      	str	r1, [r7, #8]
 8009eca:	4613      	mov	r3, r2
 8009ecc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d10a      	bne.n	8009eea <xQueueGenericCreate+0x2a>
	__asm volatile
 8009ed4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ed8:	f383 8811 	msr	BASEPRI, r3
 8009edc:	f3bf 8f6f 	isb	sy
 8009ee0:	f3bf 8f4f 	dsb	sy
 8009ee4:	613b      	str	r3, [r7, #16]
}
 8009ee6:	bf00      	nop
 8009ee8:	e7fe      	b.n	8009ee8 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	68ba      	ldr	r2, [r7, #8]
 8009eee:	fb02 f303 	mul.w	r3, r2, r3
 8009ef2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8009ef4:	69fb      	ldr	r3, [r7, #28]
 8009ef6:	3350      	adds	r3, #80	; 0x50
 8009ef8:	4618      	mov	r0, r3
 8009efa:	f002 fd2d 	bl	800c958 <pvPortMalloc>
 8009efe:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009f00:	69bb      	ldr	r3, [r7, #24]
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d011      	beq.n	8009f2a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8009f06:	69bb      	ldr	r3, [r7, #24]
 8009f08:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009f0a:	697b      	ldr	r3, [r7, #20]
 8009f0c:	3350      	adds	r3, #80	; 0x50
 8009f0e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009f10:	69bb      	ldr	r3, [r7, #24]
 8009f12:	2200      	movs	r2, #0
 8009f14:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009f18:	79fa      	ldrb	r2, [r7, #7]
 8009f1a:	69bb      	ldr	r3, [r7, #24]
 8009f1c:	9300      	str	r3, [sp, #0]
 8009f1e:	4613      	mov	r3, r2
 8009f20:	697a      	ldr	r2, [r7, #20]
 8009f22:	68b9      	ldr	r1, [r7, #8]
 8009f24:	68f8      	ldr	r0, [r7, #12]
 8009f26:	f000 f805 	bl	8009f34 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009f2a:	69bb      	ldr	r3, [r7, #24]
	}
 8009f2c:	4618      	mov	r0, r3
 8009f2e:	3720      	adds	r7, #32
 8009f30:	46bd      	mov	sp, r7
 8009f32:	bd80      	pop	{r7, pc}

08009f34 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009f34:	b580      	push	{r7, lr}
 8009f36:	b084      	sub	sp, #16
 8009f38:	af00      	add	r7, sp, #0
 8009f3a:	60f8      	str	r0, [r7, #12]
 8009f3c:	60b9      	str	r1, [r7, #8]
 8009f3e:	607a      	str	r2, [r7, #4]
 8009f40:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009f42:	68bb      	ldr	r3, [r7, #8]
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d103      	bne.n	8009f50 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009f48:	69bb      	ldr	r3, [r7, #24]
 8009f4a:	69ba      	ldr	r2, [r7, #24]
 8009f4c:	601a      	str	r2, [r3, #0]
 8009f4e:	e002      	b.n	8009f56 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009f50:	69bb      	ldr	r3, [r7, #24]
 8009f52:	687a      	ldr	r2, [r7, #4]
 8009f54:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009f56:	69bb      	ldr	r3, [r7, #24]
 8009f58:	68fa      	ldr	r2, [r7, #12]
 8009f5a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009f5c:	69bb      	ldr	r3, [r7, #24]
 8009f5e:	68ba      	ldr	r2, [r7, #8]
 8009f60:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009f62:	2101      	movs	r1, #1
 8009f64:	69b8      	ldr	r0, [r7, #24]
 8009f66:	f7ff fecb 	bl	8009d00 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8009f6a:	69bb      	ldr	r3, [r7, #24]
 8009f6c:	78fa      	ldrb	r2, [r7, #3]
 8009f6e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009f72:	bf00      	nop
 8009f74:	3710      	adds	r7, #16
 8009f76:	46bd      	mov	sp, r7
 8009f78:	bd80      	pop	{r7, pc}

08009f7a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8009f7a:	b580      	push	{r7, lr}
 8009f7c:	b082      	sub	sp, #8
 8009f7e:	af00      	add	r7, sp, #0
 8009f80:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d00e      	beq.n	8009fa6 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	2200      	movs	r2, #0
 8009f8c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	2200      	movs	r2, #0
 8009f92:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	2200      	movs	r2, #0
 8009f98:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8009f9a:	2300      	movs	r3, #0
 8009f9c:	2200      	movs	r2, #0
 8009f9e:	2100      	movs	r1, #0
 8009fa0:	6878      	ldr	r0, [r7, #4]
 8009fa2:	f000 f8a1 	bl	800a0e8 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8009fa6:	bf00      	nop
 8009fa8:	3708      	adds	r7, #8
 8009faa:	46bd      	mov	sp, r7
 8009fac:	bd80      	pop	{r7, pc}

08009fae <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8009fae:	b580      	push	{r7, lr}
 8009fb0:	b086      	sub	sp, #24
 8009fb2:	af00      	add	r7, sp, #0
 8009fb4:	4603      	mov	r3, r0
 8009fb6:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8009fb8:	2301      	movs	r3, #1
 8009fba:	617b      	str	r3, [r7, #20]
 8009fbc:	2300      	movs	r3, #0
 8009fbe:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8009fc0:	79fb      	ldrb	r3, [r7, #7]
 8009fc2:	461a      	mov	r2, r3
 8009fc4:	6939      	ldr	r1, [r7, #16]
 8009fc6:	6978      	ldr	r0, [r7, #20]
 8009fc8:	f7ff ff7a 	bl	8009ec0 <xQueueGenericCreate>
 8009fcc:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8009fce:	68f8      	ldr	r0, [r7, #12]
 8009fd0:	f7ff ffd3 	bl	8009f7a <prvInitialiseMutex>

		return xNewQueue;
 8009fd4:	68fb      	ldr	r3, [r7, #12]
	}
 8009fd6:	4618      	mov	r0, r3
 8009fd8:	3718      	adds	r7, #24
 8009fda:	46bd      	mov	sp, r7
 8009fdc:	bd80      	pop	{r7, pc}

08009fde <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8009fde:	b580      	push	{r7, lr}
 8009fe0:	b088      	sub	sp, #32
 8009fe2:	af02      	add	r7, sp, #8
 8009fe4:	4603      	mov	r3, r0
 8009fe6:	6039      	str	r1, [r7, #0]
 8009fe8:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8009fea:	2301      	movs	r3, #1
 8009fec:	617b      	str	r3, [r7, #20]
 8009fee:	2300      	movs	r3, #0
 8009ff0:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8009ff2:	79fb      	ldrb	r3, [r7, #7]
 8009ff4:	9300      	str	r3, [sp, #0]
 8009ff6:	683b      	ldr	r3, [r7, #0]
 8009ff8:	2200      	movs	r2, #0
 8009ffa:	6939      	ldr	r1, [r7, #16]
 8009ffc:	6978      	ldr	r0, [r7, #20]
 8009ffe:	f7ff fee7 	bl	8009dd0 <xQueueGenericCreateStatic>
 800a002:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800a004:	68f8      	ldr	r0, [r7, #12]
 800a006:	f7ff ffb8 	bl	8009f7a <prvInitialiseMutex>

		return xNewQueue;
 800a00a:	68fb      	ldr	r3, [r7, #12]
	}
 800a00c:	4618      	mov	r0, r3
 800a00e:	3718      	adds	r7, #24
 800a010:	46bd      	mov	sp, r7
 800a012:	bd80      	pop	{r7, pc}

0800a014 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800a014:	b580      	push	{r7, lr}
 800a016:	b08a      	sub	sp, #40	; 0x28
 800a018:	af02      	add	r7, sp, #8
 800a01a:	60f8      	str	r0, [r7, #12]
 800a01c:	60b9      	str	r1, [r7, #8]
 800a01e:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	2b00      	cmp	r3, #0
 800a024:	d10a      	bne.n	800a03c <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800a026:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a02a:	f383 8811 	msr	BASEPRI, r3
 800a02e:	f3bf 8f6f 	isb	sy
 800a032:	f3bf 8f4f 	dsb	sy
 800a036:	61bb      	str	r3, [r7, #24]
}
 800a038:	bf00      	nop
 800a03a:	e7fe      	b.n	800a03a <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800a03c:	68ba      	ldr	r2, [r7, #8]
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	429a      	cmp	r2, r3
 800a042:	d90a      	bls.n	800a05a <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800a044:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a048:	f383 8811 	msr	BASEPRI, r3
 800a04c:	f3bf 8f6f 	isb	sy
 800a050:	f3bf 8f4f 	dsb	sy
 800a054:	617b      	str	r3, [r7, #20]
}
 800a056:	bf00      	nop
 800a058:	e7fe      	b.n	800a058 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800a05a:	2302      	movs	r3, #2
 800a05c:	9300      	str	r3, [sp, #0]
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	2200      	movs	r2, #0
 800a062:	2100      	movs	r1, #0
 800a064:	68f8      	ldr	r0, [r7, #12]
 800a066:	f7ff feb3 	bl	8009dd0 <xQueueGenericCreateStatic>
 800a06a:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800a06c:	69fb      	ldr	r3, [r7, #28]
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d002      	beq.n	800a078 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800a072:	69fb      	ldr	r3, [r7, #28]
 800a074:	68ba      	ldr	r2, [r7, #8]
 800a076:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800a078:	69fb      	ldr	r3, [r7, #28]
	}
 800a07a:	4618      	mov	r0, r3
 800a07c:	3720      	adds	r7, #32
 800a07e:	46bd      	mov	sp, r7
 800a080:	bd80      	pop	{r7, pc}

0800a082 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800a082:	b580      	push	{r7, lr}
 800a084:	b086      	sub	sp, #24
 800a086:	af00      	add	r7, sp, #0
 800a088:	6078      	str	r0, [r7, #4]
 800a08a:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d10a      	bne.n	800a0a8 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800a092:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a096:	f383 8811 	msr	BASEPRI, r3
 800a09a:	f3bf 8f6f 	isb	sy
 800a09e:	f3bf 8f4f 	dsb	sy
 800a0a2:	613b      	str	r3, [r7, #16]
}
 800a0a4:	bf00      	nop
 800a0a6:	e7fe      	b.n	800a0a6 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800a0a8:	683a      	ldr	r2, [r7, #0]
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	429a      	cmp	r2, r3
 800a0ae:	d90a      	bls.n	800a0c6 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800a0b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0b4:	f383 8811 	msr	BASEPRI, r3
 800a0b8:	f3bf 8f6f 	isb	sy
 800a0bc:	f3bf 8f4f 	dsb	sy
 800a0c0:	60fb      	str	r3, [r7, #12]
}
 800a0c2:	bf00      	nop
 800a0c4:	e7fe      	b.n	800a0c4 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800a0c6:	2202      	movs	r2, #2
 800a0c8:	2100      	movs	r1, #0
 800a0ca:	6878      	ldr	r0, [r7, #4]
 800a0cc:	f7ff fef8 	bl	8009ec0 <xQueueGenericCreate>
 800a0d0:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800a0d2:	697b      	ldr	r3, [r7, #20]
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d002      	beq.n	800a0de <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800a0d8:	697b      	ldr	r3, [r7, #20]
 800a0da:	683a      	ldr	r2, [r7, #0]
 800a0dc:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800a0de:	697b      	ldr	r3, [r7, #20]
	}
 800a0e0:	4618      	mov	r0, r3
 800a0e2:	3718      	adds	r7, #24
 800a0e4:	46bd      	mov	sp, r7
 800a0e6:	bd80      	pop	{r7, pc}

0800a0e8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a0e8:	b580      	push	{r7, lr}
 800a0ea:	b08e      	sub	sp, #56	; 0x38
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	60f8      	str	r0, [r7, #12]
 800a0f0:	60b9      	str	r1, [r7, #8]
 800a0f2:	607a      	str	r2, [r7, #4]
 800a0f4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a0f6:	2300      	movs	r3, #0
 800a0f8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a0fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a100:	2b00      	cmp	r3, #0
 800a102:	d10a      	bne.n	800a11a <xQueueGenericSend+0x32>
	__asm volatile
 800a104:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a108:	f383 8811 	msr	BASEPRI, r3
 800a10c:	f3bf 8f6f 	isb	sy
 800a110:	f3bf 8f4f 	dsb	sy
 800a114:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a116:	bf00      	nop
 800a118:	e7fe      	b.n	800a118 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a11a:	68bb      	ldr	r3, [r7, #8]
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d103      	bne.n	800a128 <xQueueGenericSend+0x40>
 800a120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a124:	2b00      	cmp	r3, #0
 800a126:	d101      	bne.n	800a12c <xQueueGenericSend+0x44>
 800a128:	2301      	movs	r3, #1
 800a12a:	e000      	b.n	800a12e <xQueueGenericSend+0x46>
 800a12c:	2300      	movs	r3, #0
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d10a      	bne.n	800a148 <xQueueGenericSend+0x60>
	__asm volatile
 800a132:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a136:	f383 8811 	msr	BASEPRI, r3
 800a13a:	f3bf 8f6f 	isb	sy
 800a13e:	f3bf 8f4f 	dsb	sy
 800a142:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a144:	bf00      	nop
 800a146:	e7fe      	b.n	800a146 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a148:	683b      	ldr	r3, [r7, #0]
 800a14a:	2b02      	cmp	r3, #2
 800a14c:	d103      	bne.n	800a156 <xQueueGenericSend+0x6e>
 800a14e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a150:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a152:	2b01      	cmp	r3, #1
 800a154:	d101      	bne.n	800a15a <xQueueGenericSend+0x72>
 800a156:	2301      	movs	r3, #1
 800a158:	e000      	b.n	800a15c <xQueueGenericSend+0x74>
 800a15a:	2300      	movs	r3, #0
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d10a      	bne.n	800a176 <xQueueGenericSend+0x8e>
	__asm volatile
 800a160:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a164:	f383 8811 	msr	BASEPRI, r3
 800a168:	f3bf 8f6f 	isb	sy
 800a16c:	f3bf 8f4f 	dsb	sy
 800a170:	623b      	str	r3, [r7, #32]
}
 800a172:	bf00      	nop
 800a174:	e7fe      	b.n	800a174 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a176:	f001 fc77 	bl	800ba68 <xTaskGetSchedulerState>
 800a17a:	4603      	mov	r3, r0
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d102      	bne.n	800a186 <xQueueGenericSend+0x9e>
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	2b00      	cmp	r3, #0
 800a184:	d101      	bne.n	800a18a <xQueueGenericSend+0xa2>
 800a186:	2301      	movs	r3, #1
 800a188:	e000      	b.n	800a18c <xQueueGenericSend+0xa4>
 800a18a:	2300      	movs	r3, #0
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d10a      	bne.n	800a1a6 <xQueueGenericSend+0xbe>
	__asm volatile
 800a190:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a194:	f383 8811 	msr	BASEPRI, r3
 800a198:	f3bf 8f6f 	isb	sy
 800a19c:	f3bf 8f4f 	dsb	sy
 800a1a0:	61fb      	str	r3, [r7, #28]
}
 800a1a2:	bf00      	nop
 800a1a4:	e7fe      	b.n	800a1a4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a1a6:	f002 fab5 	bl	800c714 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a1aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a1ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a1b2:	429a      	cmp	r2, r3
 800a1b4:	d302      	bcc.n	800a1bc <xQueueGenericSend+0xd4>
 800a1b6:	683b      	ldr	r3, [r7, #0]
 800a1b8:	2b02      	cmp	r3, #2
 800a1ba:	d129      	bne.n	800a210 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a1bc:	683a      	ldr	r2, [r7, #0]
 800a1be:	68b9      	ldr	r1, [r7, #8]
 800a1c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a1c2:	f000 fc5e 	bl	800aa82 <prvCopyDataToQueue>
 800a1c6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a1c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d010      	beq.n	800a1f2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a1d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1d2:	3324      	adds	r3, #36	; 0x24
 800a1d4:	4618      	mov	r0, r3
 800a1d6:	f001 fa85 	bl	800b6e4 <xTaskRemoveFromEventList>
 800a1da:	4603      	mov	r3, r0
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d013      	beq.n	800a208 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a1e0:	4b3f      	ldr	r3, [pc, #252]	; (800a2e0 <xQueueGenericSend+0x1f8>)
 800a1e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a1e6:	601a      	str	r2, [r3, #0]
 800a1e8:	f3bf 8f4f 	dsb	sy
 800a1ec:	f3bf 8f6f 	isb	sy
 800a1f0:	e00a      	b.n	800a208 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a1f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d007      	beq.n	800a208 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a1f8:	4b39      	ldr	r3, [pc, #228]	; (800a2e0 <xQueueGenericSend+0x1f8>)
 800a1fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a1fe:	601a      	str	r2, [r3, #0]
 800a200:	f3bf 8f4f 	dsb	sy
 800a204:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a208:	f002 fab4 	bl	800c774 <vPortExitCritical>
				return pdPASS;
 800a20c:	2301      	movs	r3, #1
 800a20e:	e063      	b.n	800a2d8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	2b00      	cmp	r3, #0
 800a214:	d103      	bne.n	800a21e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a216:	f002 faad 	bl	800c774 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a21a:	2300      	movs	r3, #0
 800a21c:	e05c      	b.n	800a2d8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a21e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a220:	2b00      	cmp	r3, #0
 800a222:	d106      	bne.n	800a232 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a224:	f107 0314 	add.w	r3, r7, #20
 800a228:	4618      	mov	r0, r3
 800a22a:	f001 fabf 	bl	800b7ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a22e:	2301      	movs	r3, #1
 800a230:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a232:	f002 fa9f 	bl	800c774 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a236:	f001 f819 	bl	800b26c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a23a:	f002 fa6b 	bl	800c714 <vPortEnterCritical>
 800a23e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a240:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a244:	b25b      	sxtb	r3, r3
 800a246:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a24a:	d103      	bne.n	800a254 <xQueueGenericSend+0x16c>
 800a24c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a24e:	2200      	movs	r2, #0
 800a250:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a256:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a25a:	b25b      	sxtb	r3, r3
 800a25c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a260:	d103      	bne.n	800a26a <xQueueGenericSend+0x182>
 800a262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a264:	2200      	movs	r2, #0
 800a266:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a26a:	f002 fa83 	bl	800c774 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a26e:	1d3a      	adds	r2, r7, #4
 800a270:	f107 0314 	add.w	r3, r7, #20
 800a274:	4611      	mov	r1, r2
 800a276:	4618      	mov	r0, r3
 800a278:	f001 faae 	bl	800b7d8 <xTaskCheckForTimeOut>
 800a27c:	4603      	mov	r3, r0
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d124      	bne.n	800a2cc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a282:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a284:	f000 fcf5 	bl	800ac72 <prvIsQueueFull>
 800a288:	4603      	mov	r3, r0
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d018      	beq.n	800a2c0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a28e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a290:	3310      	adds	r3, #16
 800a292:	687a      	ldr	r2, [r7, #4]
 800a294:	4611      	mov	r1, r2
 800a296:	4618      	mov	r0, r3
 800a298:	f001 f9d4 	bl	800b644 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a29c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a29e:	f000 fc80 	bl	800aba2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a2a2:	f000 fff1 	bl	800b288 <xTaskResumeAll>
 800a2a6:	4603      	mov	r3, r0
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	f47f af7c 	bne.w	800a1a6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800a2ae:	4b0c      	ldr	r3, [pc, #48]	; (800a2e0 <xQueueGenericSend+0x1f8>)
 800a2b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a2b4:	601a      	str	r2, [r3, #0]
 800a2b6:	f3bf 8f4f 	dsb	sy
 800a2ba:	f3bf 8f6f 	isb	sy
 800a2be:	e772      	b.n	800a1a6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a2c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a2c2:	f000 fc6e 	bl	800aba2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a2c6:	f000 ffdf 	bl	800b288 <xTaskResumeAll>
 800a2ca:	e76c      	b.n	800a1a6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a2cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a2ce:	f000 fc68 	bl	800aba2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a2d2:	f000 ffd9 	bl	800b288 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a2d6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a2d8:	4618      	mov	r0, r3
 800a2da:	3738      	adds	r7, #56	; 0x38
 800a2dc:	46bd      	mov	sp, r7
 800a2de:	bd80      	pop	{r7, pc}
 800a2e0:	e000ed04 	.word	0xe000ed04

0800a2e4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a2e4:	b580      	push	{r7, lr}
 800a2e6:	b090      	sub	sp, #64	; 0x40
 800a2e8:	af00      	add	r7, sp, #0
 800a2ea:	60f8      	str	r0, [r7, #12]
 800a2ec:	60b9      	str	r1, [r7, #8]
 800a2ee:	607a      	str	r2, [r7, #4]
 800a2f0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800a2f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d10a      	bne.n	800a312 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800a2fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a300:	f383 8811 	msr	BASEPRI, r3
 800a304:	f3bf 8f6f 	isb	sy
 800a308:	f3bf 8f4f 	dsb	sy
 800a30c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a30e:	bf00      	nop
 800a310:	e7fe      	b.n	800a310 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a312:	68bb      	ldr	r3, [r7, #8]
 800a314:	2b00      	cmp	r3, #0
 800a316:	d103      	bne.n	800a320 <xQueueGenericSendFromISR+0x3c>
 800a318:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a31a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d101      	bne.n	800a324 <xQueueGenericSendFromISR+0x40>
 800a320:	2301      	movs	r3, #1
 800a322:	e000      	b.n	800a326 <xQueueGenericSendFromISR+0x42>
 800a324:	2300      	movs	r3, #0
 800a326:	2b00      	cmp	r3, #0
 800a328:	d10a      	bne.n	800a340 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800a32a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a32e:	f383 8811 	msr	BASEPRI, r3
 800a332:	f3bf 8f6f 	isb	sy
 800a336:	f3bf 8f4f 	dsb	sy
 800a33a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a33c:	bf00      	nop
 800a33e:	e7fe      	b.n	800a33e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a340:	683b      	ldr	r3, [r7, #0]
 800a342:	2b02      	cmp	r3, #2
 800a344:	d103      	bne.n	800a34e <xQueueGenericSendFromISR+0x6a>
 800a346:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a348:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a34a:	2b01      	cmp	r3, #1
 800a34c:	d101      	bne.n	800a352 <xQueueGenericSendFromISR+0x6e>
 800a34e:	2301      	movs	r3, #1
 800a350:	e000      	b.n	800a354 <xQueueGenericSendFromISR+0x70>
 800a352:	2300      	movs	r3, #0
 800a354:	2b00      	cmp	r3, #0
 800a356:	d10a      	bne.n	800a36e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800a358:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a35c:	f383 8811 	msr	BASEPRI, r3
 800a360:	f3bf 8f6f 	isb	sy
 800a364:	f3bf 8f4f 	dsb	sy
 800a368:	623b      	str	r3, [r7, #32]
}
 800a36a:	bf00      	nop
 800a36c:	e7fe      	b.n	800a36c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a36e:	f002 fab3 	bl	800c8d8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a372:	f3ef 8211 	mrs	r2, BASEPRI
 800a376:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a37a:	f383 8811 	msr	BASEPRI, r3
 800a37e:	f3bf 8f6f 	isb	sy
 800a382:	f3bf 8f4f 	dsb	sy
 800a386:	61fa      	str	r2, [r7, #28]
 800a388:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a38a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a38c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a38e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a390:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a394:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a396:	429a      	cmp	r2, r3
 800a398:	d302      	bcc.n	800a3a0 <xQueueGenericSendFromISR+0xbc>
 800a39a:	683b      	ldr	r3, [r7, #0]
 800a39c:	2b02      	cmp	r3, #2
 800a39e:	d12f      	bne.n	800a400 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a3a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a3a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a3aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3ae:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a3b0:	683a      	ldr	r2, [r7, #0]
 800a3b2:	68b9      	ldr	r1, [r7, #8]
 800a3b4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a3b6:	f000 fb64 	bl	800aa82 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a3ba:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800a3be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3c2:	d112      	bne.n	800a3ea <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a3c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d016      	beq.n	800a3fa <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a3cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3ce:	3324      	adds	r3, #36	; 0x24
 800a3d0:	4618      	mov	r0, r3
 800a3d2:	f001 f987 	bl	800b6e4 <xTaskRemoveFromEventList>
 800a3d6:	4603      	mov	r3, r0
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d00e      	beq.n	800a3fa <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d00b      	beq.n	800a3fa <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	2201      	movs	r2, #1
 800a3e6:	601a      	str	r2, [r3, #0]
 800a3e8:	e007      	b.n	800a3fa <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a3ea:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a3ee:	3301      	adds	r3, #1
 800a3f0:	b2db      	uxtb	r3, r3
 800a3f2:	b25a      	sxtb	r2, r3
 800a3f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a3fa:	2301      	movs	r3, #1
 800a3fc:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800a3fe:	e001      	b.n	800a404 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a400:	2300      	movs	r3, #0
 800a402:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a404:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a406:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a408:	697b      	ldr	r3, [r7, #20]
 800a40a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a40e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a410:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a412:	4618      	mov	r0, r3
 800a414:	3740      	adds	r7, #64	; 0x40
 800a416:	46bd      	mov	sp, r7
 800a418:	bd80      	pop	{r7, pc}

0800a41a <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a41a:	b580      	push	{r7, lr}
 800a41c:	b08e      	sub	sp, #56	; 0x38
 800a41e:	af00      	add	r7, sp, #0
 800a420:	6078      	str	r0, [r7, #4]
 800a422:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800a428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d10a      	bne.n	800a444 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800a42e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a432:	f383 8811 	msr	BASEPRI, r3
 800a436:	f3bf 8f6f 	isb	sy
 800a43a:	f3bf 8f4f 	dsb	sy
 800a43e:	623b      	str	r3, [r7, #32]
}
 800a440:	bf00      	nop
 800a442:	e7fe      	b.n	800a442 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d00a      	beq.n	800a462 <xQueueGiveFromISR+0x48>
	__asm volatile
 800a44c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a450:	f383 8811 	msr	BASEPRI, r3
 800a454:	f3bf 8f6f 	isb	sy
 800a458:	f3bf 8f4f 	dsb	sy
 800a45c:	61fb      	str	r3, [r7, #28]
}
 800a45e:	bf00      	nop
 800a460:	e7fe      	b.n	800a460 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800a462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	2b00      	cmp	r3, #0
 800a468:	d103      	bne.n	800a472 <xQueueGiveFromISR+0x58>
 800a46a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a46c:	689b      	ldr	r3, [r3, #8]
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d101      	bne.n	800a476 <xQueueGiveFromISR+0x5c>
 800a472:	2301      	movs	r3, #1
 800a474:	e000      	b.n	800a478 <xQueueGiveFromISR+0x5e>
 800a476:	2300      	movs	r3, #0
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d10a      	bne.n	800a492 <xQueueGiveFromISR+0x78>
	__asm volatile
 800a47c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a480:	f383 8811 	msr	BASEPRI, r3
 800a484:	f3bf 8f6f 	isb	sy
 800a488:	f3bf 8f4f 	dsb	sy
 800a48c:	61bb      	str	r3, [r7, #24]
}
 800a48e:	bf00      	nop
 800a490:	e7fe      	b.n	800a490 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a492:	f002 fa21 	bl	800c8d8 <vPortValidateInterruptPriority>
	__asm volatile
 800a496:	f3ef 8211 	mrs	r2, BASEPRI
 800a49a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a49e:	f383 8811 	msr	BASEPRI, r3
 800a4a2:	f3bf 8f6f 	isb	sy
 800a4a6:	f3bf 8f4f 	dsb	sy
 800a4aa:	617a      	str	r2, [r7, #20]
 800a4ac:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800a4ae:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a4b0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a4b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4b6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800a4b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a4be:	429a      	cmp	r2, r3
 800a4c0:	d22b      	bcs.n	800a51a <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a4c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a4c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a4cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4ce:	1c5a      	adds	r2, r3, #1
 800a4d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4d2:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a4d4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a4d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4dc:	d112      	bne.n	800a504 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a4de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d016      	beq.n	800a514 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a4e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4e8:	3324      	adds	r3, #36	; 0x24
 800a4ea:	4618      	mov	r0, r3
 800a4ec:	f001 f8fa 	bl	800b6e4 <xTaskRemoveFromEventList>
 800a4f0:	4603      	mov	r3, r0
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d00e      	beq.n	800a514 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a4f6:	683b      	ldr	r3, [r7, #0]
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d00b      	beq.n	800a514 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a4fc:	683b      	ldr	r3, [r7, #0]
 800a4fe:	2201      	movs	r2, #1
 800a500:	601a      	str	r2, [r3, #0]
 800a502:	e007      	b.n	800a514 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a504:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a508:	3301      	adds	r3, #1
 800a50a:	b2db      	uxtb	r3, r3
 800a50c:	b25a      	sxtb	r2, r3
 800a50e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a510:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a514:	2301      	movs	r3, #1
 800a516:	637b      	str	r3, [r7, #52]	; 0x34
 800a518:	e001      	b.n	800a51e <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a51a:	2300      	movs	r3, #0
 800a51c:	637b      	str	r3, [r7, #52]	; 0x34
 800a51e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a520:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	f383 8811 	msr	BASEPRI, r3
}
 800a528:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a52a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a52c:	4618      	mov	r0, r3
 800a52e:	3738      	adds	r7, #56	; 0x38
 800a530:	46bd      	mov	sp, r7
 800a532:	bd80      	pop	{r7, pc}

0800a534 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a534:	b580      	push	{r7, lr}
 800a536:	b08c      	sub	sp, #48	; 0x30
 800a538:	af00      	add	r7, sp, #0
 800a53a:	60f8      	str	r0, [r7, #12]
 800a53c:	60b9      	str	r1, [r7, #8]
 800a53e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a540:	2300      	movs	r3, #0
 800a542:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d10a      	bne.n	800a564 <xQueueReceive+0x30>
	__asm volatile
 800a54e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a552:	f383 8811 	msr	BASEPRI, r3
 800a556:	f3bf 8f6f 	isb	sy
 800a55a:	f3bf 8f4f 	dsb	sy
 800a55e:	623b      	str	r3, [r7, #32]
}
 800a560:	bf00      	nop
 800a562:	e7fe      	b.n	800a562 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a564:	68bb      	ldr	r3, [r7, #8]
 800a566:	2b00      	cmp	r3, #0
 800a568:	d103      	bne.n	800a572 <xQueueReceive+0x3e>
 800a56a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a56c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d101      	bne.n	800a576 <xQueueReceive+0x42>
 800a572:	2301      	movs	r3, #1
 800a574:	e000      	b.n	800a578 <xQueueReceive+0x44>
 800a576:	2300      	movs	r3, #0
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d10a      	bne.n	800a592 <xQueueReceive+0x5e>
	__asm volatile
 800a57c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a580:	f383 8811 	msr	BASEPRI, r3
 800a584:	f3bf 8f6f 	isb	sy
 800a588:	f3bf 8f4f 	dsb	sy
 800a58c:	61fb      	str	r3, [r7, #28]
}
 800a58e:	bf00      	nop
 800a590:	e7fe      	b.n	800a590 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a592:	f001 fa69 	bl	800ba68 <xTaskGetSchedulerState>
 800a596:	4603      	mov	r3, r0
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d102      	bne.n	800a5a2 <xQueueReceive+0x6e>
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d101      	bne.n	800a5a6 <xQueueReceive+0x72>
 800a5a2:	2301      	movs	r3, #1
 800a5a4:	e000      	b.n	800a5a8 <xQueueReceive+0x74>
 800a5a6:	2300      	movs	r3, #0
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d10a      	bne.n	800a5c2 <xQueueReceive+0x8e>
	__asm volatile
 800a5ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5b0:	f383 8811 	msr	BASEPRI, r3
 800a5b4:	f3bf 8f6f 	isb	sy
 800a5b8:	f3bf 8f4f 	dsb	sy
 800a5bc:	61bb      	str	r3, [r7, #24]
}
 800a5be:	bf00      	nop
 800a5c0:	e7fe      	b.n	800a5c0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a5c2:	f002 f8a7 	bl	800c714 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a5c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5ca:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a5cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d01f      	beq.n	800a612 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a5d2:	68b9      	ldr	r1, [r7, #8]
 800a5d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a5d6:	f000 fabe 	bl	800ab56 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a5da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5dc:	1e5a      	subs	r2, r3, #1
 800a5de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5e0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a5e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5e4:	691b      	ldr	r3, [r3, #16]
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d00f      	beq.n	800a60a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a5ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5ec:	3310      	adds	r3, #16
 800a5ee:	4618      	mov	r0, r3
 800a5f0:	f001 f878 	bl	800b6e4 <xTaskRemoveFromEventList>
 800a5f4:	4603      	mov	r3, r0
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d007      	beq.n	800a60a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a5fa:	4b3d      	ldr	r3, [pc, #244]	; (800a6f0 <xQueueReceive+0x1bc>)
 800a5fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a600:	601a      	str	r2, [r3, #0]
 800a602:	f3bf 8f4f 	dsb	sy
 800a606:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a60a:	f002 f8b3 	bl	800c774 <vPortExitCritical>
				return pdPASS;
 800a60e:	2301      	movs	r3, #1
 800a610:	e069      	b.n	800a6e6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	2b00      	cmp	r3, #0
 800a616:	d103      	bne.n	800a620 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a618:	f002 f8ac 	bl	800c774 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a61c:	2300      	movs	r3, #0
 800a61e:	e062      	b.n	800a6e6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a622:	2b00      	cmp	r3, #0
 800a624:	d106      	bne.n	800a634 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a626:	f107 0310 	add.w	r3, r7, #16
 800a62a:	4618      	mov	r0, r3
 800a62c:	f001 f8be 	bl	800b7ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a630:	2301      	movs	r3, #1
 800a632:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a634:	f002 f89e 	bl	800c774 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a638:	f000 fe18 	bl	800b26c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a63c:	f002 f86a 	bl	800c714 <vPortEnterCritical>
 800a640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a642:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a646:	b25b      	sxtb	r3, r3
 800a648:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a64c:	d103      	bne.n	800a656 <xQueueReceive+0x122>
 800a64e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a650:	2200      	movs	r2, #0
 800a652:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a658:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a65c:	b25b      	sxtb	r3, r3
 800a65e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a662:	d103      	bne.n	800a66c <xQueueReceive+0x138>
 800a664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a666:	2200      	movs	r2, #0
 800a668:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a66c:	f002 f882 	bl	800c774 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a670:	1d3a      	adds	r2, r7, #4
 800a672:	f107 0310 	add.w	r3, r7, #16
 800a676:	4611      	mov	r1, r2
 800a678:	4618      	mov	r0, r3
 800a67a:	f001 f8ad 	bl	800b7d8 <xTaskCheckForTimeOut>
 800a67e:	4603      	mov	r3, r0
 800a680:	2b00      	cmp	r3, #0
 800a682:	d123      	bne.n	800a6cc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a684:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a686:	f000 fade 	bl	800ac46 <prvIsQueueEmpty>
 800a68a:	4603      	mov	r3, r0
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d017      	beq.n	800a6c0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a692:	3324      	adds	r3, #36	; 0x24
 800a694:	687a      	ldr	r2, [r7, #4]
 800a696:	4611      	mov	r1, r2
 800a698:	4618      	mov	r0, r3
 800a69a:	f000 ffd3 	bl	800b644 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a69e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a6a0:	f000 fa7f 	bl	800aba2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a6a4:	f000 fdf0 	bl	800b288 <xTaskResumeAll>
 800a6a8:	4603      	mov	r3, r0
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d189      	bne.n	800a5c2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800a6ae:	4b10      	ldr	r3, [pc, #64]	; (800a6f0 <xQueueReceive+0x1bc>)
 800a6b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a6b4:	601a      	str	r2, [r3, #0]
 800a6b6:	f3bf 8f4f 	dsb	sy
 800a6ba:	f3bf 8f6f 	isb	sy
 800a6be:	e780      	b.n	800a5c2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a6c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a6c2:	f000 fa6e 	bl	800aba2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a6c6:	f000 fddf 	bl	800b288 <xTaskResumeAll>
 800a6ca:	e77a      	b.n	800a5c2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a6cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a6ce:	f000 fa68 	bl	800aba2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a6d2:	f000 fdd9 	bl	800b288 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a6d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a6d8:	f000 fab5 	bl	800ac46 <prvIsQueueEmpty>
 800a6dc:	4603      	mov	r3, r0
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	f43f af6f 	beq.w	800a5c2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a6e4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a6e6:	4618      	mov	r0, r3
 800a6e8:	3730      	adds	r7, #48	; 0x30
 800a6ea:	46bd      	mov	sp, r7
 800a6ec:	bd80      	pop	{r7, pc}
 800a6ee:	bf00      	nop
 800a6f0:	e000ed04 	.word	0xe000ed04

0800a6f4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800a6f4:	b580      	push	{r7, lr}
 800a6f6:	b08e      	sub	sp, #56	; 0x38
 800a6f8:	af00      	add	r7, sp, #0
 800a6fa:	6078      	str	r0, [r7, #4]
 800a6fc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800a6fe:	2300      	movs	r3, #0
 800a700:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800a706:	2300      	movs	r3, #0
 800a708:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a70a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d10a      	bne.n	800a726 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800a710:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a714:	f383 8811 	msr	BASEPRI, r3
 800a718:	f3bf 8f6f 	isb	sy
 800a71c:	f3bf 8f4f 	dsb	sy
 800a720:	623b      	str	r3, [r7, #32]
}
 800a722:	bf00      	nop
 800a724:	e7fe      	b.n	800a724 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d00a      	beq.n	800a744 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800a72e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a732:	f383 8811 	msr	BASEPRI, r3
 800a736:	f3bf 8f6f 	isb	sy
 800a73a:	f3bf 8f4f 	dsb	sy
 800a73e:	61fb      	str	r3, [r7, #28]
}
 800a740:	bf00      	nop
 800a742:	e7fe      	b.n	800a742 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a744:	f001 f990 	bl	800ba68 <xTaskGetSchedulerState>
 800a748:	4603      	mov	r3, r0
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d102      	bne.n	800a754 <xQueueSemaphoreTake+0x60>
 800a74e:	683b      	ldr	r3, [r7, #0]
 800a750:	2b00      	cmp	r3, #0
 800a752:	d101      	bne.n	800a758 <xQueueSemaphoreTake+0x64>
 800a754:	2301      	movs	r3, #1
 800a756:	e000      	b.n	800a75a <xQueueSemaphoreTake+0x66>
 800a758:	2300      	movs	r3, #0
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d10a      	bne.n	800a774 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800a75e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a762:	f383 8811 	msr	BASEPRI, r3
 800a766:	f3bf 8f6f 	isb	sy
 800a76a:	f3bf 8f4f 	dsb	sy
 800a76e:	61bb      	str	r3, [r7, #24]
}
 800a770:	bf00      	nop
 800a772:	e7fe      	b.n	800a772 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a774:	f001 ffce 	bl	800c714 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800a778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a77a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a77c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800a77e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a780:	2b00      	cmp	r3, #0
 800a782:	d024      	beq.n	800a7ce <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800a784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a786:	1e5a      	subs	r2, r3, #1
 800a788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a78a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a78c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	2b00      	cmp	r3, #0
 800a792:	d104      	bne.n	800a79e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800a794:	f001 fade 	bl	800bd54 <pvTaskIncrementMutexHeldCount>
 800a798:	4602      	mov	r2, r0
 800a79a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a79c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a79e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7a0:	691b      	ldr	r3, [r3, #16]
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d00f      	beq.n	800a7c6 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a7a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7a8:	3310      	adds	r3, #16
 800a7aa:	4618      	mov	r0, r3
 800a7ac:	f000 ff9a 	bl	800b6e4 <xTaskRemoveFromEventList>
 800a7b0:	4603      	mov	r3, r0
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d007      	beq.n	800a7c6 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a7b6:	4b54      	ldr	r3, [pc, #336]	; (800a908 <xQueueSemaphoreTake+0x214>)
 800a7b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a7bc:	601a      	str	r2, [r3, #0]
 800a7be:	f3bf 8f4f 	dsb	sy
 800a7c2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a7c6:	f001 ffd5 	bl	800c774 <vPortExitCritical>
				return pdPASS;
 800a7ca:	2301      	movs	r3, #1
 800a7cc:	e097      	b.n	800a8fe <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a7ce:	683b      	ldr	r3, [r7, #0]
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d111      	bne.n	800a7f8 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800a7d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d00a      	beq.n	800a7f0 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800a7da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7de:	f383 8811 	msr	BASEPRI, r3
 800a7e2:	f3bf 8f6f 	isb	sy
 800a7e6:	f3bf 8f4f 	dsb	sy
 800a7ea:	617b      	str	r3, [r7, #20]
}
 800a7ec:	bf00      	nop
 800a7ee:	e7fe      	b.n	800a7ee <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800a7f0:	f001 ffc0 	bl	800c774 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a7f4:	2300      	movs	r3, #0
 800a7f6:	e082      	b.n	800a8fe <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a7f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d106      	bne.n	800a80c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a7fe:	f107 030c 	add.w	r3, r7, #12
 800a802:	4618      	mov	r0, r3
 800a804:	f000 ffd2 	bl	800b7ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a808:	2301      	movs	r3, #1
 800a80a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a80c:	f001 ffb2 	bl	800c774 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a810:	f000 fd2c 	bl	800b26c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a814:	f001 ff7e 	bl	800c714 <vPortEnterCritical>
 800a818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a81a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a81e:	b25b      	sxtb	r3, r3
 800a820:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a824:	d103      	bne.n	800a82e <xQueueSemaphoreTake+0x13a>
 800a826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a828:	2200      	movs	r2, #0
 800a82a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a82e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a830:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a834:	b25b      	sxtb	r3, r3
 800a836:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a83a:	d103      	bne.n	800a844 <xQueueSemaphoreTake+0x150>
 800a83c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a83e:	2200      	movs	r2, #0
 800a840:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a844:	f001 ff96 	bl	800c774 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a848:	463a      	mov	r2, r7
 800a84a:	f107 030c 	add.w	r3, r7, #12
 800a84e:	4611      	mov	r1, r2
 800a850:	4618      	mov	r0, r3
 800a852:	f000 ffc1 	bl	800b7d8 <xTaskCheckForTimeOut>
 800a856:	4603      	mov	r3, r0
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d132      	bne.n	800a8c2 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a85c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a85e:	f000 f9f2 	bl	800ac46 <prvIsQueueEmpty>
 800a862:	4603      	mov	r3, r0
 800a864:	2b00      	cmp	r3, #0
 800a866:	d026      	beq.n	800a8b6 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d109      	bne.n	800a884 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800a870:	f001 ff50 	bl	800c714 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a876:	689b      	ldr	r3, [r3, #8]
 800a878:	4618      	mov	r0, r3
 800a87a:	f001 f913 	bl	800baa4 <xTaskPriorityInherit>
 800a87e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800a880:	f001 ff78 	bl	800c774 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a886:	3324      	adds	r3, #36	; 0x24
 800a888:	683a      	ldr	r2, [r7, #0]
 800a88a:	4611      	mov	r1, r2
 800a88c:	4618      	mov	r0, r3
 800a88e:	f000 fed9 	bl	800b644 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a892:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a894:	f000 f985 	bl	800aba2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a898:	f000 fcf6 	bl	800b288 <xTaskResumeAll>
 800a89c:	4603      	mov	r3, r0
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	f47f af68 	bne.w	800a774 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800a8a4:	4b18      	ldr	r3, [pc, #96]	; (800a908 <xQueueSemaphoreTake+0x214>)
 800a8a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a8aa:	601a      	str	r2, [r3, #0]
 800a8ac:	f3bf 8f4f 	dsb	sy
 800a8b0:	f3bf 8f6f 	isb	sy
 800a8b4:	e75e      	b.n	800a774 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800a8b6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a8b8:	f000 f973 	bl	800aba2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a8bc:	f000 fce4 	bl	800b288 <xTaskResumeAll>
 800a8c0:	e758      	b.n	800a774 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800a8c2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a8c4:	f000 f96d 	bl	800aba2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a8c8:	f000 fcde 	bl	800b288 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a8cc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a8ce:	f000 f9ba 	bl	800ac46 <prvIsQueueEmpty>
 800a8d2:	4603      	mov	r3, r0
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	f43f af4d 	beq.w	800a774 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800a8da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d00d      	beq.n	800a8fc <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800a8e0:	f001 ff18 	bl	800c714 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800a8e4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a8e6:	f000 f8b4 	bl	800aa52 <prvGetDisinheritPriorityAfterTimeout>
 800a8ea:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800a8ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8ee:	689b      	ldr	r3, [r3, #8]
 800a8f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a8f2:	4618      	mov	r0, r3
 800a8f4:	f001 f9ac 	bl	800bc50 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800a8f8:	f001 ff3c 	bl	800c774 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a8fc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a8fe:	4618      	mov	r0, r3
 800a900:	3738      	adds	r7, #56	; 0x38
 800a902:	46bd      	mov	sp, r7
 800a904:	bd80      	pop	{r7, pc}
 800a906:	bf00      	nop
 800a908:	e000ed04 	.word	0xe000ed04

0800a90c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a90c:	b580      	push	{r7, lr}
 800a90e:	b08e      	sub	sp, #56	; 0x38
 800a910:	af00      	add	r7, sp, #0
 800a912:	60f8      	str	r0, [r7, #12]
 800a914:	60b9      	str	r1, [r7, #8]
 800a916:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a91c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d10a      	bne.n	800a938 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800a922:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a926:	f383 8811 	msr	BASEPRI, r3
 800a92a:	f3bf 8f6f 	isb	sy
 800a92e:	f3bf 8f4f 	dsb	sy
 800a932:	623b      	str	r3, [r7, #32]
}
 800a934:	bf00      	nop
 800a936:	e7fe      	b.n	800a936 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a938:	68bb      	ldr	r3, [r7, #8]
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d103      	bne.n	800a946 <xQueueReceiveFromISR+0x3a>
 800a93e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a942:	2b00      	cmp	r3, #0
 800a944:	d101      	bne.n	800a94a <xQueueReceiveFromISR+0x3e>
 800a946:	2301      	movs	r3, #1
 800a948:	e000      	b.n	800a94c <xQueueReceiveFromISR+0x40>
 800a94a:	2300      	movs	r3, #0
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d10a      	bne.n	800a966 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800a950:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a954:	f383 8811 	msr	BASEPRI, r3
 800a958:	f3bf 8f6f 	isb	sy
 800a95c:	f3bf 8f4f 	dsb	sy
 800a960:	61fb      	str	r3, [r7, #28]
}
 800a962:	bf00      	nop
 800a964:	e7fe      	b.n	800a964 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a966:	f001 ffb7 	bl	800c8d8 <vPortValidateInterruptPriority>
	__asm volatile
 800a96a:	f3ef 8211 	mrs	r2, BASEPRI
 800a96e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a972:	f383 8811 	msr	BASEPRI, r3
 800a976:	f3bf 8f6f 	isb	sy
 800a97a:	f3bf 8f4f 	dsb	sy
 800a97e:	61ba      	str	r2, [r7, #24]
 800a980:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800a982:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a984:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a988:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a98a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a98c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d02f      	beq.n	800a9f2 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800a992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a994:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a998:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a99c:	68b9      	ldr	r1, [r7, #8]
 800a99e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a9a0:	f000 f8d9 	bl	800ab56 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a9a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9a6:	1e5a      	subs	r2, r3, #1
 800a9a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9aa:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800a9ac:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a9b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9b4:	d112      	bne.n	800a9dc <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a9b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9b8:	691b      	ldr	r3, [r3, #16]
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d016      	beq.n	800a9ec <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a9be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9c0:	3310      	adds	r3, #16
 800a9c2:	4618      	mov	r0, r3
 800a9c4:	f000 fe8e 	bl	800b6e4 <xTaskRemoveFromEventList>
 800a9c8:	4603      	mov	r3, r0
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d00e      	beq.n	800a9ec <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d00b      	beq.n	800a9ec <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	2201      	movs	r2, #1
 800a9d8:	601a      	str	r2, [r3, #0]
 800a9da:	e007      	b.n	800a9ec <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800a9dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a9e0:	3301      	adds	r3, #1
 800a9e2:	b2db      	uxtb	r3, r3
 800a9e4:	b25a      	sxtb	r2, r3
 800a9e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800a9ec:	2301      	movs	r3, #1
 800a9ee:	637b      	str	r3, [r7, #52]	; 0x34
 800a9f0:	e001      	b.n	800a9f6 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800a9f2:	2300      	movs	r3, #0
 800a9f4:	637b      	str	r3, [r7, #52]	; 0x34
 800a9f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9f8:	613b      	str	r3, [r7, #16]
	__asm volatile
 800a9fa:	693b      	ldr	r3, [r7, #16]
 800a9fc:	f383 8811 	msr	BASEPRI, r3
}
 800aa00:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800aa02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800aa04:	4618      	mov	r0, r3
 800aa06:	3738      	adds	r7, #56	; 0x38
 800aa08:	46bd      	mov	sp, r7
 800aa0a:	bd80      	pop	{r7, pc}

0800aa0c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800aa0c:	b580      	push	{r7, lr}
 800aa0e:	b084      	sub	sp, #16
 800aa10:	af00      	add	r7, sp, #0
 800aa12:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d10a      	bne.n	800aa34 <vQueueDelete+0x28>
	__asm volatile
 800aa1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa22:	f383 8811 	msr	BASEPRI, r3
 800aa26:	f3bf 8f6f 	isb	sy
 800aa2a:	f3bf 8f4f 	dsb	sy
 800aa2e:	60bb      	str	r3, [r7, #8]
}
 800aa30:	bf00      	nop
 800aa32:	e7fe      	b.n	800aa32 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800aa34:	68f8      	ldr	r0, [r7, #12]
 800aa36:	f000 f95f 	bl	800acf8 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d102      	bne.n	800aa4a <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800aa44:	68f8      	ldr	r0, [r7, #12]
 800aa46:	f002 f853 	bl	800caf0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800aa4a:	bf00      	nop
 800aa4c:	3710      	adds	r7, #16
 800aa4e:	46bd      	mov	sp, r7
 800aa50:	bd80      	pop	{r7, pc}

0800aa52 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800aa52:	b480      	push	{r7}
 800aa54:	b085      	sub	sp, #20
 800aa56:	af00      	add	r7, sp, #0
 800aa58:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d006      	beq.n	800aa70 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800aa6c:	60fb      	str	r3, [r7, #12]
 800aa6e:	e001      	b.n	800aa74 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800aa70:	2300      	movs	r3, #0
 800aa72:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800aa74:	68fb      	ldr	r3, [r7, #12]
	}
 800aa76:	4618      	mov	r0, r3
 800aa78:	3714      	adds	r7, #20
 800aa7a:	46bd      	mov	sp, r7
 800aa7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa80:	4770      	bx	lr

0800aa82 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800aa82:	b580      	push	{r7, lr}
 800aa84:	b086      	sub	sp, #24
 800aa86:	af00      	add	r7, sp, #0
 800aa88:	60f8      	str	r0, [r7, #12]
 800aa8a:	60b9      	str	r1, [r7, #8]
 800aa8c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800aa8e:	2300      	movs	r3, #0
 800aa90:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa96:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d10d      	bne.n	800aabc <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d14d      	bne.n	800ab44 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	689b      	ldr	r3, [r3, #8]
 800aaac:	4618      	mov	r0, r3
 800aaae:	f001 f861 	bl	800bb74 <xTaskPriorityDisinherit>
 800aab2:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	2200      	movs	r2, #0
 800aab8:	609a      	str	r2, [r3, #8]
 800aaba:	e043      	b.n	800ab44 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d119      	bne.n	800aaf6 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	6858      	ldr	r0, [r3, #4]
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aaca:	461a      	mov	r2, r3
 800aacc:	68b9      	ldr	r1, [r7, #8]
 800aace:	f002 f953 	bl	800cd78 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	685a      	ldr	r2, [r3, #4]
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aada:	441a      	add	r2, r3
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	685a      	ldr	r2, [r3, #4]
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	689b      	ldr	r3, [r3, #8]
 800aae8:	429a      	cmp	r2, r3
 800aaea:	d32b      	bcc.n	800ab44 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	681a      	ldr	r2, [r3, #0]
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	605a      	str	r2, [r3, #4]
 800aaf4:	e026      	b.n	800ab44 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	68d8      	ldr	r0, [r3, #12]
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aafe:	461a      	mov	r2, r3
 800ab00:	68b9      	ldr	r1, [r7, #8]
 800ab02:	f002 f939 	bl	800cd78 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	68da      	ldr	r2, [r3, #12]
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab0e:	425b      	negs	r3, r3
 800ab10:	441a      	add	r2, r3
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	68da      	ldr	r2, [r3, #12]
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	429a      	cmp	r2, r3
 800ab20:	d207      	bcs.n	800ab32 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	689a      	ldr	r2, [r3, #8]
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab2a:	425b      	negs	r3, r3
 800ab2c:	441a      	add	r2, r3
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	2b02      	cmp	r3, #2
 800ab36:	d105      	bne.n	800ab44 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ab38:	693b      	ldr	r3, [r7, #16]
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d002      	beq.n	800ab44 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800ab3e:	693b      	ldr	r3, [r7, #16]
 800ab40:	3b01      	subs	r3, #1
 800ab42:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ab44:	693b      	ldr	r3, [r7, #16]
 800ab46:	1c5a      	adds	r2, r3, #1
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800ab4c:	697b      	ldr	r3, [r7, #20]
}
 800ab4e:	4618      	mov	r0, r3
 800ab50:	3718      	adds	r7, #24
 800ab52:	46bd      	mov	sp, r7
 800ab54:	bd80      	pop	{r7, pc}

0800ab56 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800ab56:	b580      	push	{r7, lr}
 800ab58:	b082      	sub	sp, #8
 800ab5a:	af00      	add	r7, sp, #0
 800ab5c:	6078      	str	r0, [r7, #4]
 800ab5e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d018      	beq.n	800ab9a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	68da      	ldr	r2, [r3, #12]
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab70:	441a      	add	r2, r3
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	68da      	ldr	r2, [r3, #12]
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	689b      	ldr	r3, [r3, #8]
 800ab7e:	429a      	cmp	r2, r3
 800ab80:	d303      	bcc.n	800ab8a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	681a      	ldr	r2, [r3, #0]
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	68d9      	ldr	r1, [r3, #12]
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab92:	461a      	mov	r2, r3
 800ab94:	6838      	ldr	r0, [r7, #0]
 800ab96:	f002 f8ef 	bl	800cd78 <memcpy>
	}
}
 800ab9a:	bf00      	nop
 800ab9c:	3708      	adds	r7, #8
 800ab9e:	46bd      	mov	sp, r7
 800aba0:	bd80      	pop	{r7, pc}

0800aba2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800aba2:	b580      	push	{r7, lr}
 800aba4:	b084      	sub	sp, #16
 800aba6:	af00      	add	r7, sp, #0
 800aba8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800abaa:	f001 fdb3 	bl	800c714 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800abb4:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800abb6:	e011      	b.n	800abdc <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d012      	beq.n	800abe6 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	3324      	adds	r3, #36	; 0x24
 800abc4:	4618      	mov	r0, r3
 800abc6:	f000 fd8d 	bl	800b6e4 <xTaskRemoveFromEventList>
 800abca:	4603      	mov	r3, r0
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d001      	beq.n	800abd4 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800abd0:	f000 fe64 	bl	800b89c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800abd4:	7bfb      	ldrb	r3, [r7, #15]
 800abd6:	3b01      	subs	r3, #1
 800abd8:	b2db      	uxtb	r3, r3
 800abda:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800abdc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	dce9      	bgt.n	800abb8 <prvUnlockQueue+0x16>
 800abe4:	e000      	b.n	800abe8 <prvUnlockQueue+0x46>
					break;
 800abe6:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	22ff      	movs	r2, #255	; 0xff
 800abec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800abf0:	f001 fdc0 	bl	800c774 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800abf4:	f001 fd8e 	bl	800c714 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800abfe:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ac00:	e011      	b.n	800ac26 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	691b      	ldr	r3, [r3, #16]
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d012      	beq.n	800ac30 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	3310      	adds	r3, #16
 800ac0e:	4618      	mov	r0, r3
 800ac10:	f000 fd68 	bl	800b6e4 <xTaskRemoveFromEventList>
 800ac14:	4603      	mov	r3, r0
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d001      	beq.n	800ac1e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800ac1a:	f000 fe3f 	bl	800b89c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800ac1e:	7bbb      	ldrb	r3, [r7, #14]
 800ac20:	3b01      	subs	r3, #1
 800ac22:	b2db      	uxtb	r3, r3
 800ac24:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ac26:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	dce9      	bgt.n	800ac02 <prvUnlockQueue+0x60>
 800ac2e:	e000      	b.n	800ac32 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800ac30:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	22ff      	movs	r2, #255	; 0xff
 800ac36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800ac3a:	f001 fd9b 	bl	800c774 <vPortExitCritical>
}
 800ac3e:	bf00      	nop
 800ac40:	3710      	adds	r7, #16
 800ac42:	46bd      	mov	sp, r7
 800ac44:	bd80      	pop	{r7, pc}

0800ac46 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800ac46:	b580      	push	{r7, lr}
 800ac48:	b084      	sub	sp, #16
 800ac4a:	af00      	add	r7, sp, #0
 800ac4c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ac4e:	f001 fd61 	bl	800c714 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d102      	bne.n	800ac60 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ac5a:	2301      	movs	r3, #1
 800ac5c:	60fb      	str	r3, [r7, #12]
 800ac5e:	e001      	b.n	800ac64 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800ac60:	2300      	movs	r3, #0
 800ac62:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ac64:	f001 fd86 	bl	800c774 <vPortExitCritical>

	return xReturn;
 800ac68:	68fb      	ldr	r3, [r7, #12]
}
 800ac6a:	4618      	mov	r0, r3
 800ac6c:	3710      	adds	r7, #16
 800ac6e:	46bd      	mov	sp, r7
 800ac70:	bd80      	pop	{r7, pc}

0800ac72 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ac72:	b580      	push	{r7, lr}
 800ac74:	b084      	sub	sp, #16
 800ac76:	af00      	add	r7, sp, #0
 800ac78:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ac7a:	f001 fd4b 	bl	800c714 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac86:	429a      	cmp	r2, r3
 800ac88:	d102      	bne.n	800ac90 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ac8a:	2301      	movs	r3, #1
 800ac8c:	60fb      	str	r3, [r7, #12]
 800ac8e:	e001      	b.n	800ac94 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ac90:	2300      	movs	r3, #0
 800ac92:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ac94:	f001 fd6e 	bl	800c774 <vPortExitCritical>

	return xReturn;
 800ac98:	68fb      	ldr	r3, [r7, #12]
}
 800ac9a:	4618      	mov	r0, r3
 800ac9c:	3710      	adds	r7, #16
 800ac9e:	46bd      	mov	sp, r7
 800aca0:	bd80      	pop	{r7, pc}
	...

0800aca4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800aca4:	b480      	push	{r7}
 800aca6:	b085      	sub	sp, #20
 800aca8:	af00      	add	r7, sp, #0
 800acaa:	6078      	str	r0, [r7, #4]
 800acac:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800acae:	2300      	movs	r3, #0
 800acb0:	60fb      	str	r3, [r7, #12]
 800acb2:	e014      	b.n	800acde <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800acb4:	4a0f      	ldr	r2, [pc, #60]	; (800acf4 <vQueueAddToRegistry+0x50>)
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d10b      	bne.n	800acd8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800acc0:	490c      	ldr	r1, [pc, #48]	; (800acf4 <vQueueAddToRegistry+0x50>)
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	683a      	ldr	r2, [r7, #0]
 800acc6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800acca:	4a0a      	ldr	r2, [pc, #40]	; (800acf4 <vQueueAddToRegistry+0x50>)
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	00db      	lsls	r3, r3, #3
 800acd0:	4413      	add	r3, r2
 800acd2:	687a      	ldr	r2, [r7, #4]
 800acd4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800acd6:	e006      	b.n	800ace6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	3301      	adds	r3, #1
 800acdc:	60fb      	str	r3, [r7, #12]
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	2b07      	cmp	r3, #7
 800ace2:	d9e7      	bls.n	800acb4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800ace4:	bf00      	nop
 800ace6:	bf00      	nop
 800ace8:	3714      	adds	r7, #20
 800acea:	46bd      	mov	sp, r7
 800acec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acf0:	4770      	bx	lr
 800acf2:	bf00      	nop
 800acf4:	20000b3c 	.word	0x20000b3c

0800acf8 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800acf8:	b480      	push	{r7}
 800acfa:	b085      	sub	sp, #20
 800acfc:	af00      	add	r7, sp, #0
 800acfe:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ad00:	2300      	movs	r3, #0
 800ad02:	60fb      	str	r3, [r7, #12]
 800ad04:	e016      	b.n	800ad34 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800ad06:	4a10      	ldr	r2, [pc, #64]	; (800ad48 <vQueueUnregisterQueue+0x50>)
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	00db      	lsls	r3, r3, #3
 800ad0c:	4413      	add	r3, r2
 800ad0e:	685b      	ldr	r3, [r3, #4]
 800ad10:	687a      	ldr	r2, [r7, #4]
 800ad12:	429a      	cmp	r2, r3
 800ad14:	d10b      	bne.n	800ad2e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800ad16:	4a0c      	ldr	r2, [pc, #48]	; (800ad48 <vQueueUnregisterQueue+0x50>)
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	2100      	movs	r1, #0
 800ad1c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800ad20:	4a09      	ldr	r2, [pc, #36]	; (800ad48 <vQueueUnregisterQueue+0x50>)
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	00db      	lsls	r3, r3, #3
 800ad26:	4413      	add	r3, r2
 800ad28:	2200      	movs	r2, #0
 800ad2a:	605a      	str	r2, [r3, #4]
				break;
 800ad2c:	e006      	b.n	800ad3c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	3301      	adds	r3, #1
 800ad32:	60fb      	str	r3, [r7, #12]
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	2b07      	cmp	r3, #7
 800ad38:	d9e5      	bls.n	800ad06 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800ad3a:	bf00      	nop
 800ad3c:	bf00      	nop
 800ad3e:	3714      	adds	r7, #20
 800ad40:	46bd      	mov	sp, r7
 800ad42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad46:	4770      	bx	lr
 800ad48:	20000b3c 	.word	0x20000b3c

0800ad4c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ad4c:	b580      	push	{r7, lr}
 800ad4e:	b086      	sub	sp, #24
 800ad50:	af00      	add	r7, sp, #0
 800ad52:	60f8      	str	r0, [r7, #12]
 800ad54:	60b9      	str	r1, [r7, #8]
 800ad56:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800ad5c:	f001 fcda 	bl	800c714 <vPortEnterCritical>
 800ad60:	697b      	ldr	r3, [r7, #20]
 800ad62:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ad66:	b25b      	sxtb	r3, r3
 800ad68:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad6c:	d103      	bne.n	800ad76 <vQueueWaitForMessageRestricted+0x2a>
 800ad6e:	697b      	ldr	r3, [r7, #20]
 800ad70:	2200      	movs	r2, #0
 800ad72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ad76:	697b      	ldr	r3, [r7, #20]
 800ad78:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ad7c:	b25b      	sxtb	r3, r3
 800ad7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad82:	d103      	bne.n	800ad8c <vQueueWaitForMessageRestricted+0x40>
 800ad84:	697b      	ldr	r3, [r7, #20]
 800ad86:	2200      	movs	r2, #0
 800ad88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ad8c:	f001 fcf2 	bl	800c774 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800ad90:	697b      	ldr	r3, [r7, #20]
 800ad92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d106      	bne.n	800ada6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800ad98:	697b      	ldr	r3, [r7, #20]
 800ad9a:	3324      	adds	r3, #36	; 0x24
 800ad9c:	687a      	ldr	r2, [r7, #4]
 800ad9e:	68b9      	ldr	r1, [r7, #8]
 800ada0:	4618      	mov	r0, r3
 800ada2:	f000 fc73 	bl	800b68c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800ada6:	6978      	ldr	r0, [r7, #20]
 800ada8:	f7ff fefb 	bl	800aba2 <prvUnlockQueue>
	}
 800adac:	bf00      	nop
 800adae:	3718      	adds	r7, #24
 800adb0:	46bd      	mov	sp, r7
 800adb2:	bd80      	pop	{r7, pc}

0800adb4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800adb4:	b580      	push	{r7, lr}
 800adb6:	b08e      	sub	sp, #56	; 0x38
 800adb8:	af04      	add	r7, sp, #16
 800adba:	60f8      	str	r0, [r7, #12]
 800adbc:	60b9      	str	r1, [r7, #8]
 800adbe:	607a      	str	r2, [r7, #4]
 800adc0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800adc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d10a      	bne.n	800adde <xTaskCreateStatic+0x2a>
	__asm volatile
 800adc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adcc:	f383 8811 	msr	BASEPRI, r3
 800add0:	f3bf 8f6f 	isb	sy
 800add4:	f3bf 8f4f 	dsb	sy
 800add8:	623b      	str	r3, [r7, #32]
}
 800adda:	bf00      	nop
 800addc:	e7fe      	b.n	800addc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800adde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d10a      	bne.n	800adfa <xTaskCreateStatic+0x46>
	__asm volatile
 800ade4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ade8:	f383 8811 	msr	BASEPRI, r3
 800adec:	f3bf 8f6f 	isb	sy
 800adf0:	f3bf 8f4f 	dsb	sy
 800adf4:	61fb      	str	r3, [r7, #28]
}
 800adf6:	bf00      	nop
 800adf8:	e7fe      	b.n	800adf8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800adfa:	23bc      	movs	r3, #188	; 0xbc
 800adfc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800adfe:	693b      	ldr	r3, [r7, #16]
 800ae00:	2bbc      	cmp	r3, #188	; 0xbc
 800ae02:	d00a      	beq.n	800ae1a <xTaskCreateStatic+0x66>
	__asm volatile
 800ae04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae08:	f383 8811 	msr	BASEPRI, r3
 800ae0c:	f3bf 8f6f 	isb	sy
 800ae10:	f3bf 8f4f 	dsb	sy
 800ae14:	61bb      	str	r3, [r7, #24]
}
 800ae16:	bf00      	nop
 800ae18:	e7fe      	b.n	800ae18 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800ae1a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ae1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d01e      	beq.n	800ae60 <xTaskCreateStatic+0xac>
 800ae22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d01b      	beq.n	800ae60 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ae28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae2a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ae2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae2e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ae30:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ae32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae34:	2202      	movs	r2, #2
 800ae36:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ae3a:	2300      	movs	r3, #0
 800ae3c:	9303      	str	r3, [sp, #12]
 800ae3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae40:	9302      	str	r3, [sp, #8]
 800ae42:	f107 0314 	add.w	r3, r7, #20
 800ae46:	9301      	str	r3, [sp, #4]
 800ae48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae4a:	9300      	str	r3, [sp, #0]
 800ae4c:	683b      	ldr	r3, [r7, #0]
 800ae4e:	687a      	ldr	r2, [r7, #4]
 800ae50:	68b9      	ldr	r1, [r7, #8]
 800ae52:	68f8      	ldr	r0, [r7, #12]
 800ae54:	f000 f850 	bl	800aef8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ae58:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ae5a:	f000 f8f3 	bl	800b044 <prvAddNewTaskToReadyList>
 800ae5e:	e001      	b.n	800ae64 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800ae60:	2300      	movs	r3, #0
 800ae62:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800ae64:	697b      	ldr	r3, [r7, #20]
	}
 800ae66:	4618      	mov	r0, r3
 800ae68:	3728      	adds	r7, #40	; 0x28
 800ae6a:	46bd      	mov	sp, r7
 800ae6c:	bd80      	pop	{r7, pc}

0800ae6e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800ae6e:	b580      	push	{r7, lr}
 800ae70:	b08c      	sub	sp, #48	; 0x30
 800ae72:	af04      	add	r7, sp, #16
 800ae74:	60f8      	str	r0, [r7, #12]
 800ae76:	60b9      	str	r1, [r7, #8]
 800ae78:	603b      	str	r3, [r7, #0]
 800ae7a:	4613      	mov	r3, r2
 800ae7c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800ae7e:	88fb      	ldrh	r3, [r7, #6]
 800ae80:	009b      	lsls	r3, r3, #2
 800ae82:	4618      	mov	r0, r3
 800ae84:	f001 fd68 	bl	800c958 <pvPortMalloc>
 800ae88:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800ae8a:	697b      	ldr	r3, [r7, #20]
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d00e      	beq.n	800aeae <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800ae90:	20bc      	movs	r0, #188	; 0xbc
 800ae92:	f001 fd61 	bl	800c958 <pvPortMalloc>
 800ae96:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800ae98:	69fb      	ldr	r3, [r7, #28]
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d003      	beq.n	800aea6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800ae9e:	69fb      	ldr	r3, [r7, #28]
 800aea0:	697a      	ldr	r2, [r7, #20]
 800aea2:	631a      	str	r2, [r3, #48]	; 0x30
 800aea4:	e005      	b.n	800aeb2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800aea6:	6978      	ldr	r0, [r7, #20]
 800aea8:	f001 fe22 	bl	800caf0 <vPortFree>
 800aeac:	e001      	b.n	800aeb2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800aeae:	2300      	movs	r3, #0
 800aeb0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800aeb2:	69fb      	ldr	r3, [r7, #28]
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d017      	beq.n	800aee8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800aeb8:	69fb      	ldr	r3, [r7, #28]
 800aeba:	2200      	movs	r2, #0
 800aebc:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800aec0:	88fa      	ldrh	r2, [r7, #6]
 800aec2:	2300      	movs	r3, #0
 800aec4:	9303      	str	r3, [sp, #12]
 800aec6:	69fb      	ldr	r3, [r7, #28]
 800aec8:	9302      	str	r3, [sp, #8]
 800aeca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aecc:	9301      	str	r3, [sp, #4]
 800aece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aed0:	9300      	str	r3, [sp, #0]
 800aed2:	683b      	ldr	r3, [r7, #0]
 800aed4:	68b9      	ldr	r1, [r7, #8]
 800aed6:	68f8      	ldr	r0, [r7, #12]
 800aed8:	f000 f80e 	bl	800aef8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800aedc:	69f8      	ldr	r0, [r7, #28]
 800aede:	f000 f8b1 	bl	800b044 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800aee2:	2301      	movs	r3, #1
 800aee4:	61bb      	str	r3, [r7, #24]
 800aee6:	e002      	b.n	800aeee <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800aee8:	f04f 33ff 	mov.w	r3, #4294967295
 800aeec:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800aeee:	69bb      	ldr	r3, [r7, #24]
	}
 800aef0:	4618      	mov	r0, r3
 800aef2:	3720      	adds	r7, #32
 800aef4:	46bd      	mov	sp, r7
 800aef6:	bd80      	pop	{r7, pc}

0800aef8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800aef8:	b580      	push	{r7, lr}
 800aefa:	b088      	sub	sp, #32
 800aefc:	af00      	add	r7, sp, #0
 800aefe:	60f8      	str	r0, [r7, #12]
 800af00:	60b9      	str	r1, [r7, #8]
 800af02:	607a      	str	r2, [r7, #4]
 800af04:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800af06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af08:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	009b      	lsls	r3, r3, #2
 800af0e:	461a      	mov	r2, r3
 800af10:	21a5      	movs	r1, #165	; 0xa5
 800af12:	f001 ff3f 	bl	800cd94 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800af16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800af20:	3b01      	subs	r3, #1
 800af22:	009b      	lsls	r3, r3, #2
 800af24:	4413      	add	r3, r2
 800af26:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800af28:	69bb      	ldr	r3, [r7, #24]
 800af2a:	f023 0307 	bic.w	r3, r3, #7
 800af2e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800af30:	69bb      	ldr	r3, [r7, #24]
 800af32:	f003 0307 	and.w	r3, r3, #7
 800af36:	2b00      	cmp	r3, #0
 800af38:	d00a      	beq.n	800af50 <prvInitialiseNewTask+0x58>
	__asm volatile
 800af3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af3e:	f383 8811 	msr	BASEPRI, r3
 800af42:	f3bf 8f6f 	isb	sy
 800af46:	f3bf 8f4f 	dsb	sy
 800af4a:	617b      	str	r3, [r7, #20]
}
 800af4c:	bf00      	nop
 800af4e:	e7fe      	b.n	800af4e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800af50:	68bb      	ldr	r3, [r7, #8]
 800af52:	2b00      	cmp	r3, #0
 800af54:	d01f      	beq.n	800af96 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800af56:	2300      	movs	r3, #0
 800af58:	61fb      	str	r3, [r7, #28]
 800af5a:	e012      	b.n	800af82 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800af5c:	68ba      	ldr	r2, [r7, #8]
 800af5e:	69fb      	ldr	r3, [r7, #28]
 800af60:	4413      	add	r3, r2
 800af62:	7819      	ldrb	r1, [r3, #0]
 800af64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800af66:	69fb      	ldr	r3, [r7, #28]
 800af68:	4413      	add	r3, r2
 800af6a:	3334      	adds	r3, #52	; 0x34
 800af6c:	460a      	mov	r2, r1
 800af6e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800af70:	68ba      	ldr	r2, [r7, #8]
 800af72:	69fb      	ldr	r3, [r7, #28]
 800af74:	4413      	add	r3, r2
 800af76:	781b      	ldrb	r3, [r3, #0]
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d006      	beq.n	800af8a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800af7c:	69fb      	ldr	r3, [r7, #28]
 800af7e:	3301      	adds	r3, #1
 800af80:	61fb      	str	r3, [r7, #28]
 800af82:	69fb      	ldr	r3, [r7, #28]
 800af84:	2b0f      	cmp	r3, #15
 800af86:	d9e9      	bls.n	800af5c <prvInitialiseNewTask+0x64>
 800af88:	e000      	b.n	800af8c <prvInitialiseNewTask+0x94>
			{
				break;
 800af8a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800af8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af8e:	2200      	movs	r2, #0
 800af90:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800af94:	e003      	b.n	800af9e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800af96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af98:	2200      	movs	r2, #0
 800af9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800af9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afa0:	2b37      	cmp	r3, #55	; 0x37
 800afa2:	d901      	bls.n	800afa8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800afa4:	2337      	movs	r3, #55	; 0x37
 800afa6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800afa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afaa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800afac:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800afae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afb0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800afb2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800afb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afb6:	2200      	movs	r2, #0
 800afb8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800afba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afbc:	3304      	adds	r3, #4
 800afbe:	4618      	mov	r0, r3
 800afc0:	f7fe fe0a 	bl	8009bd8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800afc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afc6:	3318      	adds	r3, #24
 800afc8:	4618      	mov	r0, r3
 800afca:	f7fe fe05 	bl	8009bd8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800afce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800afd2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800afd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afd6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800afda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afdc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800afde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afe0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800afe2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800afe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afe6:	2200      	movs	r2, #0
 800afe8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800afec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afee:	2200      	movs	r2, #0
 800aff0:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800aff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aff6:	3354      	adds	r3, #84	; 0x54
 800aff8:	2260      	movs	r2, #96	; 0x60
 800affa:	2100      	movs	r1, #0
 800affc:	4618      	mov	r0, r3
 800affe:	f001 fec9 	bl	800cd94 <memset>
 800b002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b004:	4a0c      	ldr	r2, [pc, #48]	; (800b038 <prvInitialiseNewTask+0x140>)
 800b006:	659a      	str	r2, [r3, #88]	; 0x58
 800b008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b00a:	4a0c      	ldr	r2, [pc, #48]	; (800b03c <prvInitialiseNewTask+0x144>)
 800b00c:	65da      	str	r2, [r3, #92]	; 0x5c
 800b00e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b010:	4a0b      	ldr	r2, [pc, #44]	; (800b040 <prvInitialiseNewTask+0x148>)
 800b012:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b014:	683a      	ldr	r2, [r7, #0]
 800b016:	68f9      	ldr	r1, [r7, #12]
 800b018:	69b8      	ldr	r0, [r7, #24]
 800b01a:	f001 fa51 	bl	800c4c0 <pxPortInitialiseStack>
 800b01e:	4602      	mov	r2, r0
 800b020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b022:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b026:	2b00      	cmp	r3, #0
 800b028:	d002      	beq.n	800b030 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b02a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b02c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b02e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b030:	bf00      	nop
 800b032:	3720      	adds	r7, #32
 800b034:	46bd      	mov	sp, r7
 800b036:	bd80      	pop	{r7, pc}
 800b038:	0800d08c 	.word	0x0800d08c
 800b03c:	0800d0ac 	.word	0x0800d0ac
 800b040:	0800d06c 	.word	0x0800d06c

0800b044 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b044:	b580      	push	{r7, lr}
 800b046:	b082      	sub	sp, #8
 800b048:	af00      	add	r7, sp, #0
 800b04a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b04c:	f001 fb62 	bl	800c714 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b050:	4b2d      	ldr	r3, [pc, #180]	; (800b108 <prvAddNewTaskToReadyList+0xc4>)
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	3301      	adds	r3, #1
 800b056:	4a2c      	ldr	r2, [pc, #176]	; (800b108 <prvAddNewTaskToReadyList+0xc4>)
 800b058:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b05a:	4b2c      	ldr	r3, [pc, #176]	; (800b10c <prvAddNewTaskToReadyList+0xc8>)
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d109      	bne.n	800b076 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b062:	4a2a      	ldr	r2, [pc, #168]	; (800b10c <prvAddNewTaskToReadyList+0xc8>)
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b068:	4b27      	ldr	r3, [pc, #156]	; (800b108 <prvAddNewTaskToReadyList+0xc4>)
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	2b01      	cmp	r3, #1
 800b06e:	d110      	bne.n	800b092 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b070:	f000 fc38 	bl	800b8e4 <prvInitialiseTaskLists>
 800b074:	e00d      	b.n	800b092 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b076:	4b26      	ldr	r3, [pc, #152]	; (800b110 <prvAddNewTaskToReadyList+0xcc>)
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d109      	bne.n	800b092 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b07e:	4b23      	ldr	r3, [pc, #140]	; (800b10c <prvAddNewTaskToReadyList+0xc8>)
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b088:	429a      	cmp	r2, r3
 800b08a:	d802      	bhi.n	800b092 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b08c:	4a1f      	ldr	r2, [pc, #124]	; (800b10c <prvAddNewTaskToReadyList+0xc8>)
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b092:	4b20      	ldr	r3, [pc, #128]	; (800b114 <prvAddNewTaskToReadyList+0xd0>)
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	3301      	adds	r3, #1
 800b098:	4a1e      	ldr	r2, [pc, #120]	; (800b114 <prvAddNewTaskToReadyList+0xd0>)
 800b09a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b09c:	4b1d      	ldr	r3, [pc, #116]	; (800b114 <prvAddNewTaskToReadyList+0xd0>)
 800b09e:	681a      	ldr	r2, [r3, #0]
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0a8:	4b1b      	ldr	r3, [pc, #108]	; (800b118 <prvAddNewTaskToReadyList+0xd4>)
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	429a      	cmp	r2, r3
 800b0ae:	d903      	bls.n	800b0b8 <prvAddNewTaskToReadyList+0x74>
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0b4:	4a18      	ldr	r2, [pc, #96]	; (800b118 <prvAddNewTaskToReadyList+0xd4>)
 800b0b6:	6013      	str	r3, [r2, #0]
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0bc:	4613      	mov	r3, r2
 800b0be:	009b      	lsls	r3, r3, #2
 800b0c0:	4413      	add	r3, r2
 800b0c2:	009b      	lsls	r3, r3, #2
 800b0c4:	4a15      	ldr	r2, [pc, #84]	; (800b11c <prvAddNewTaskToReadyList+0xd8>)
 800b0c6:	441a      	add	r2, r3
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	3304      	adds	r3, #4
 800b0cc:	4619      	mov	r1, r3
 800b0ce:	4610      	mov	r0, r2
 800b0d0:	f7fe fd8f 	bl	8009bf2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b0d4:	f001 fb4e 	bl	800c774 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b0d8:	4b0d      	ldr	r3, [pc, #52]	; (800b110 <prvAddNewTaskToReadyList+0xcc>)
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d00e      	beq.n	800b0fe <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b0e0:	4b0a      	ldr	r3, [pc, #40]	; (800b10c <prvAddNewTaskToReadyList+0xc8>)
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0ea:	429a      	cmp	r2, r3
 800b0ec:	d207      	bcs.n	800b0fe <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b0ee:	4b0c      	ldr	r3, [pc, #48]	; (800b120 <prvAddNewTaskToReadyList+0xdc>)
 800b0f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b0f4:	601a      	str	r2, [r3, #0]
 800b0f6:	f3bf 8f4f 	dsb	sy
 800b0fa:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b0fe:	bf00      	nop
 800b100:	3708      	adds	r7, #8
 800b102:	46bd      	mov	sp, r7
 800b104:	bd80      	pop	{r7, pc}
 800b106:	bf00      	nop
 800b108:	20001050 	.word	0x20001050
 800b10c:	20000b7c 	.word	0x20000b7c
 800b110:	2000105c 	.word	0x2000105c
 800b114:	2000106c 	.word	0x2000106c
 800b118:	20001058 	.word	0x20001058
 800b11c:	20000b80 	.word	0x20000b80
 800b120:	e000ed04 	.word	0xe000ed04

0800b124 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b124:	b580      	push	{r7, lr}
 800b126:	b084      	sub	sp, #16
 800b128:	af00      	add	r7, sp, #0
 800b12a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b12c:	2300      	movs	r3, #0
 800b12e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	2b00      	cmp	r3, #0
 800b134:	d017      	beq.n	800b166 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b136:	4b13      	ldr	r3, [pc, #76]	; (800b184 <vTaskDelay+0x60>)
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d00a      	beq.n	800b154 <vTaskDelay+0x30>
	__asm volatile
 800b13e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b142:	f383 8811 	msr	BASEPRI, r3
 800b146:	f3bf 8f6f 	isb	sy
 800b14a:	f3bf 8f4f 	dsb	sy
 800b14e:	60bb      	str	r3, [r7, #8]
}
 800b150:	bf00      	nop
 800b152:	e7fe      	b.n	800b152 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b154:	f000 f88a 	bl	800b26c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b158:	2100      	movs	r1, #0
 800b15a:	6878      	ldr	r0, [r7, #4]
 800b15c:	f000 fe0e 	bl	800bd7c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b160:	f000 f892 	bl	800b288 <xTaskResumeAll>
 800b164:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d107      	bne.n	800b17c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800b16c:	4b06      	ldr	r3, [pc, #24]	; (800b188 <vTaskDelay+0x64>)
 800b16e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b172:	601a      	str	r2, [r3, #0]
 800b174:	f3bf 8f4f 	dsb	sy
 800b178:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b17c:	bf00      	nop
 800b17e:	3710      	adds	r7, #16
 800b180:	46bd      	mov	sp, r7
 800b182:	bd80      	pop	{r7, pc}
 800b184:	20001078 	.word	0x20001078
 800b188:	e000ed04 	.word	0xe000ed04

0800b18c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b18c:	b580      	push	{r7, lr}
 800b18e:	b08a      	sub	sp, #40	; 0x28
 800b190:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b192:	2300      	movs	r3, #0
 800b194:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b196:	2300      	movs	r3, #0
 800b198:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b19a:	463a      	mov	r2, r7
 800b19c:	1d39      	adds	r1, r7, #4
 800b19e:	f107 0308 	add.w	r3, r7, #8
 800b1a2:	4618      	mov	r0, r3
 800b1a4:	f7fe fcc4 	bl	8009b30 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b1a8:	6839      	ldr	r1, [r7, #0]
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	68ba      	ldr	r2, [r7, #8]
 800b1ae:	9202      	str	r2, [sp, #8]
 800b1b0:	9301      	str	r3, [sp, #4]
 800b1b2:	2300      	movs	r3, #0
 800b1b4:	9300      	str	r3, [sp, #0]
 800b1b6:	2300      	movs	r3, #0
 800b1b8:	460a      	mov	r2, r1
 800b1ba:	4924      	ldr	r1, [pc, #144]	; (800b24c <vTaskStartScheduler+0xc0>)
 800b1bc:	4824      	ldr	r0, [pc, #144]	; (800b250 <vTaskStartScheduler+0xc4>)
 800b1be:	f7ff fdf9 	bl	800adb4 <xTaskCreateStatic>
 800b1c2:	4603      	mov	r3, r0
 800b1c4:	4a23      	ldr	r2, [pc, #140]	; (800b254 <vTaskStartScheduler+0xc8>)
 800b1c6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b1c8:	4b22      	ldr	r3, [pc, #136]	; (800b254 <vTaskStartScheduler+0xc8>)
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d002      	beq.n	800b1d6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b1d0:	2301      	movs	r3, #1
 800b1d2:	617b      	str	r3, [r7, #20]
 800b1d4:	e001      	b.n	800b1da <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b1d6:	2300      	movs	r3, #0
 800b1d8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b1da:	697b      	ldr	r3, [r7, #20]
 800b1dc:	2b01      	cmp	r3, #1
 800b1de:	d102      	bne.n	800b1e6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b1e0:	f000 fe20 	bl	800be24 <xTimerCreateTimerTask>
 800b1e4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b1e6:	697b      	ldr	r3, [r7, #20]
 800b1e8:	2b01      	cmp	r3, #1
 800b1ea:	d11b      	bne.n	800b224 <vTaskStartScheduler+0x98>
	__asm volatile
 800b1ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1f0:	f383 8811 	msr	BASEPRI, r3
 800b1f4:	f3bf 8f6f 	isb	sy
 800b1f8:	f3bf 8f4f 	dsb	sy
 800b1fc:	613b      	str	r3, [r7, #16]
}
 800b1fe:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b200:	4b15      	ldr	r3, [pc, #84]	; (800b258 <vTaskStartScheduler+0xcc>)
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	3354      	adds	r3, #84	; 0x54
 800b206:	4a15      	ldr	r2, [pc, #84]	; (800b25c <vTaskStartScheduler+0xd0>)
 800b208:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b20a:	4b15      	ldr	r3, [pc, #84]	; (800b260 <vTaskStartScheduler+0xd4>)
 800b20c:	f04f 32ff 	mov.w	r2, #4294967295
 800b210:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b212:	4b14      	ldr	r3, [pc, #80]	; (800b264 <vTaskStartScheduler+0xd8>)
 800b214:	2201      	movs	r2, #1
 800b216:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b218:	4b13      	ldr	r3, [pc, #76]	; (800b268 <vTaskStartScheduler+0xdc>)
 800b21a:	2200      	movs	r2, #0
 800b21c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b21e:	f001 f9d7 	bl	800c5d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b222:	e00e      	b.n	800b242 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b224:	697b      	ldr	r3, [r7, #20]
 800b226:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b22a:	d10a      	bne.n	800b242 <vTaskStartScheduler+0xb6>
	__asm volatile
 800b22c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b230:	f383 8811 	msr	BASEPRI, r3
 800b234:	f3bf 8f6f 	isb	sy
 800b238:	f3bf 8f4f 	dsb	sy
 800b23c:	60fb      	str	r3, [r7, #12]
}
 800b23e:	bf00      	nop
 800b240:	e7fe      	b.n	800b240 <vTaskStartScheduler+0xb4>
}
 800b242:	bf00      	nop
 800b244:	3718      	adds	r7, #24
 800b246:	46bd      	mov	sp, r7
 800b248:	bd80      	pop	{r7, pc}
 800b24a:	bf00      	nop
 800b24c:	0800cf78 	.word	0x0800cf78
 800b250:	0800b8b5 	.word	0x0800b8b5
 800b254:	20001074 	.word	0x20001074
 800b258:	20000b7c 	.word	0x20000b7c
 800b25c:	20000010 	.word	0x20000010
 800b260:	20001070 	.word	0x20001070
 800b264:	2000105c 	.word	0x2000105c
 800b268:	20001054 	.word	0x20001054

0800b26c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b26c:	b480      	push	{r7}
 800b26e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b270:	4b04      	ldr	r3, [pc, #16]	; (800b284 <vTaskSuspendAll+0x18>)
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	3301      	adds	r3, #1
 800b276:	4a03      	ldr	r2, [pc, #12]	; (800b284 <vTaskSuspendAll+0x18>)
 800b278:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b27a:	bf00      	nop
 800b27c:	46bd      	mov	sp, r7
 800b27e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b282:	4770      	bx	lr
 800b284:	20001078 	.word	0x20001078

0800b288 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b288:	b580      	push	{r7, lr}
 800b28a:	b084      	sub	sp, #16
 800b28c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b28e:	2300      	movs	r3, #0
 800b290:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b292:	2300      	movs	r3, #0
 800b294:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b296:	4b42      	ldr	r3, [pc, #264]	; (800b3a0 <xTaskResumeAll+0x118>)
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d10a      	bne.n	800b2b4 <xTaskResumeAll+0x2c>
	__asm volatile
 800b29e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2a2:	f383 8811 	msr	BASEPRI, r3
 800b2a6:	f3bf 8f6f 	isb	sy
 800b2aa:	f3bf 8f4f 	dsb	sy
 800b2ae:	603b      	str	r3, [r7, #0]
}
 800b2b0:	bf00      	nop
 800b2b2:	e7fe      	b.n	800b2b2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b2b4:	f001 fa2e 	bl	800c714 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b2b8:	4b39      	ldr	r3, [pc, #228]	; (800b3a0 <xTaskResumeAll+0x118>)
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	3b01      	subs	r3, #1
 800b2be:	4a38      	ldr	r2, [pc, #224]	; (800b3a0 <xTaskResumeAll+0x118>)
 800b2c0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b2c2:	4b37      	ldr	r3, [pc, #220]	; (800b3a0 <xTaskResumeAll+0x118>)
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d162      	bne.n	800b390 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b2ca:	4b36      	ldr	r3, [pc, #216]	; (800b3a4 <xTaskResumeAll+0x11c>)
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d05e      	beq.n	800b390 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b2d2:	e02f      	b.n	800b334 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b2d4:	4b34      	ldr	r3, [pc, #208]	; (800b3a8 <xTaskResumeAll+0x120>)
 800b2d6:	68db      	ldr	r3, [r3, #12]
 800b2d8:	68db      	ldr	r3, [r3, #12]
 800b2da:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	3318      	adds	r3, #24
 800b2e0:	4618      	mov	r0, r3
 800b2e2:	f7fe fce3 	bl	8009cac <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	3304      	adds	r3, #4
 800b2ea:	4618      	mov	r0, r3
 800b2ec:	f7fe fcde 	bl	8009cac <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2f4:	4b2d      	ldr	r3, [pc, #180]	; (800b3ac <xTaskResumeAll+0x124>)
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	429a      	cmp	r2, r3
 800b2fa:	d903      	bls.n	800b304 <xTaskResumeAll+0x7c>
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b300:	4a2a      	ldr	r2, [pc, #168]	; (800b3ac <xTaskResumeAll+0x124>)
 800b302:	6013      	str	r3, [r2, #0]
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b308:	4613      	mov	r3, r2
 800b30a:	009b      	lsls	r3, r3, #2
 800b30c:	4413      	add	r3, r2
 800b30e:	009b      	lsls	r3, r3, #2
 800b310:	4a27      	ldr	r2, [pc, #156]	; (800b3b0 <xTaskResumeAll+0x128>)
 800b312:	441a      	add	r2, r3
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	3304      	adds	r3, #4
 800b318:	4619      	mov	r1, r3
 800b31a:	4610      	mov	r0, r2
 800b31c:	f7fe fc69 	bl	8009bf2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b324:	4b23      	ldr	r3, [pc, #140]	; (800b3b4 <xTaskResumeAll+0x12c>)
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b32a:	429a      	cmp	r2, r3
 800b32c:	d302      	bcc.n	800b334 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800b32e:	4b22      	ldr	r3, [pc, #136]	; (800b3b8 <xTaskResumeAll+0x130>)
 800b330:	2201      	movs	r2, #1
 800b332:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b334:	4b1c      	ldr	r3, [pc, #112]	; (800b3a8 <xTaskResumeAll+0x120>)
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d1cb      	bne.n	800b2d4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d001      	beq.n	800b346 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b342:	f000 fb71 	bl	800ba28 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b346:	4b1d      	ldr	r3, [pc, #116]	; (800b3bc <xTaskResumeAll+0x134>)
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d010      	beq.n	800b374 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b352:	f000 f859 	bl	800b408 <xTaskIncrementTick>
 800b356:	4603      	mov	r3, r0
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d002      	beq.n	800b362 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800b35c:	4b16      	ldr	r3, [pc, #88]	; (800b3b8 <xTaskResumeAll+0x130>)
 800b35e:	2201      	movs	r2, #1
 800b360:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	3b01      	subs	r3, #1
 800b366:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d1f1      	bne.n	800b352 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800b36e:	4b13      	ldr	r3, [pc, #76]	; (800b3bc <xTaskResumeAll+0x134>)
 800b370:	2200      	movs	r2, #0
 800b372:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b374:	4b10      	ldr	r3, [pc, #64]	; (800b3b8 <xTaskResumeAll+0x130>)
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d009      	beq.n	800b390 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b37c:	2301      	movs	r3, #1
 800b37e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b380:	4b0f      	ldr	r3, [pc, #60]	; (800b3c0 <xTaskResumeAll+0x138>)
 800b382:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b386:	601a      	str	r2, [r3, #0]
 800b388:	f3bf 8f4f 	dsb	sy
 800b38c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b390:	f001 f9f0 	bl	800c774 <vPortExitCritical>

	return xAlreadyYielded;
 800b394:	68bb      	ldr	r3, [r7, #8]
}
 800b396:	4618      	mov	r0, r3
 800b398:	3710      	adds	r7, #16
 800b39a:	46bd      	mov	sp, r7
 800b39c:	bd80      	pop	{r7, pc}
 800b39e:	bf00      	nop
 800b3a0:	20001078 	.word	0x20001078
 800b3a4:	20001050 	.word	0x20001050
 800b3a8:	20001010 	.word	0x20001010
 800b3ac:	20001058 	.word	0x20001058
 800b3b0:	20000b80 	.word	0x20000b80
 800b3b4:	20000b7c 	.word	0x20000b7c
 800b3b8:	20001064 	.word	0x20001064
 800b3bc:	20001060 	.word	0x20001060
 800b3c0:	e000ed04 	.word	0xe000ed04

0800b3c4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b3c4:	b480      	push	{r7}
 800b3c6:	b083      	sub	sp, #12
 800b3c8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b3ca:	4b05      	ldr	r3, [pc, #20]	; (800b3e0 <xTaskGetTickCount+0x1c>)
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b3d0:	687b      	ldr	r3, [r7, #4]
}
 800b3d2:	4618      	mov	r0, r3
 800b3d4:	370c      	adds	r7, #12
 800b3d6:	46bd      	mov	sp, r7
 800b3d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3dc:	4770      	bx	lr
 800b3de:	bf00      	nop
 800b3e0:	20001054 	.word	0x20001054

0800b3e4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800b3e4:	b580      	push	{r7, lr}
 800b3e6:	b082      	sub	sp, #8
 800b3e8:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b3ea:	f001 fa75 	bl	800c8d8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800b3ee:	2300      	movs	r3, #0
 800b3f0:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800b3f2:	4b04      	ldr	r3, [pc, #16]	; (800b404 <xTaskGetTickCountFromISR+0x20>)
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b3f8:	683b      	ldr	r3, [r7, #0]
}
 800b3fa:	4618      	mov	r0, r3
 800b3fc:	3708      	adds	r7, #8
 800b3fe:	46bd      	mov	sp, r7
 800b400:	bd80      	pop	{r7, pc}
 800b402:	bf00      	nop
 800b404:	20001054 	.word	0x20001054

0800b408 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b408:	b580      	push	{r7, lr}
 800b40a:	b086      	sub	sp, #24
 800b40c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b40e:	2300      	movs	r3, #0
 800b410:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b412:	4b4f      	ldr	r3, [pc, #316]	; (800b550 <xTaskIncrementTick+0x148>)
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	2b00      	cmp	r3, #0
 800b418:	f040 808f 	bne.w	800b53a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b41c:	4b4d      	ldr	r3, [pc, #308]	; (800b554 <xTaskIncrementTick+0x14c>)
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	3301      	adds	r3, #1
 800b422:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b424:	4a4b      	ldr	r2, [pc, #300]	; (800b554 <xTaskIncrementTick+0x14c>)
 800b426:	693b      	ldr	r3, [r7, #16]
 800b428:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b42a:	693b      	ldr	r3, [r7, #16]
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d120      	bne.n	800b472 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800b430:	4b49      	ldr	r3, [pc, #292]	; (800b558 <xTaskIncrementTick+0x150>)
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	2b00      	cmp	r3, #0
 800b438:	d00a      	beq.n	800b450 <xTaskIncrementTick+0x48>
	__asm volatile
 800b43a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b43e:	f383 8811 	msr	BASEPRI, r3
 800b442:	f3bf 8f6f 	isb	sy
 800b446:	f3bf 8f4f 	dsb	sy
 800b44a:	603b      	str	r3, [r7, #0]
}
 800b44c:	bf00      	nop
 800b44e:	e7fe      	b.n	800b44e <xTaskIncrementTick+0x46>
 800b450:	4b41      	ldr	r3, [pc, #260]	; (800b558 <xTaskIncrementTick+0x150>)
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	60fb      	str	r3, [r7, #12]
 800b456:	4b41      	ldr	r3, [pc, #260]	; (800b55c <xTaskIncrementTick+0x154>)
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	4a3f      	ldr	r2, [pc, #252]	; (800b558 <xTaskIncrementTick+0x150>)
 800b45c:	6013      	str	r3, [r2, #0]
 800b45e:	4a3f      	ldr	r2, [pc, #252]	; (800b55c <xTaskIncrementTick+0x154>)
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	6013      	str	r3, [r2, #0]
 800b464:	4b3e      	ldr	r3, [pc, #248]	; (800b560 <xTaskIncrementTick+0x158>)
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	3301      	adds	r3, #1
 800b46a:	4a3d      	ldr	r2, [pc, #244]	; (800b560 <xTaskIncrementTick+0x158>)
 800b46c:	6013      	str	r3, [r2, #0]
 800b46e:	f000 fadb 	bl	800ba28 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b472:	4b3c      	ldr	r3, [pc, #240]	; (800b564 <xTaskIncrementTick+0x15c>)
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	693a      	ldr	r2, [r7, #16]
 800b478:	429a      	cmp	r2, r3
 800b47a:	d349      	bcc.n	800b510 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b47c:	4b36      	ldr	r3, [pc, #216]	; (800b558 <xTaskIncrementTick+0x150>)
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	2b00      	cmp	r3, #0
 800b484:	d104      	bne.n	800b490 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b486:	4b37      	ldr	r3, [pc, #220]	; (800b564 <xTaskIncrementTick+0x15c>)
 800b488:	f04f 32ff 	mov.w	r2, #4294967295
 800b48c:	601a      	str	r2, [r3, #0]
					break;
 800b48e:	e03f      	b.n	800b510 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b490:	4b31      	ldr	r3, [pc, #196]	; (800b558 <xTaskIncrementTick+0x150>)
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	68db      	ldr	r3, [r3, #12]
 800b496:	68db      	ldr	r3, [r3, #12]
 800b498:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b49a:	68bb      	ldr	r3, [r7, #8]
 800b49c:	685b      	ldr	r3, [r3, #4]
 800b49e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b4a0:	693a      	ldr	r2, [r7, #16]
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	429a      	cmp	r2, r3
 800b4a6:	d203      	bcs.n	800b4b0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b4a8:	4a2e      	ldr	r2, [pc, #184]	; (800b564 <xTaskIncrementTick+0x15c>)
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b4ae:	e02f      	b.n	800b510 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b4b0:	68bb      	ldr	r3, [r7, #8]
 800b4b2:	3304      	adds	r3, #4
 800b4b4:	4618      	mov	r0, r3
 800b4b6:	f7fe fbf9 	bl	8009cac <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b4ba:	68bb      	ldr	r3, [r7, #8]
 800b4bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d004      	beq.n	800b4cc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b4c2:	68bb      	ldr	r3, [r7, #8]
 800b4c4:	3318      	adds	r3, #24
 800b4c6:	4618      	mov	r0, r3
 800b4c8:	f7fe fbf0 	bl	8009cac <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b4cc:	68bb      	ldr	r3, [r7, #8]
 800b4ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b4d0:	4b25      	ldr	r3, [pc, #148]	; (800b568 <xTaskIncrementTick+0x160>)
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	429a      	cmp	r2, r3
 800b4d6:	d903      	bls.n	800b4e0 <xTaskIncrementTick+0xd8>
 800b4d8:	68bb      	ldr	r3, [r7, #8]
 800b4da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4dc:	4a22      	ldr	r2, [pc, #136]	; (800b568 <xTaskIncrementTick+0x160>)
 800b4de:	6013      	str	r3, [r2, #0]
 800b4e0:	68bb      	ldr	r3, [r7, #8]
 800b4e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b4e4:	4613      	mov	r3, r2
 800b4e6:	009b      	lsls	r3, r3, #2
 800b4e8:	4413      	add	r3, r2
 800b4ea:	009b      	lsls	r3, r3, #2
 800b4ec:	4a1f      	ldr	r2, [pc, #124]	; (800b56c <xTaskIncrementTick+0x164>)
 800b4ee:	441a      	add	r2, r3
 800b4f0:	68bb      	ldr	r3, [r7, #8]
 800b4f2:	3304      	adds	r3, #4
 800b4f4:	4619      	mov	r1, r3
 800b4f6:	4610      	mov	r0, r2
 800b4f8:	f7fe fb7b 	bl	8009bf2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b4fc:	68bb      	ldr	r3, [r7, #8]
 800b4fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b500:	4b1b      	ldr	r3, [pc, #108]	; (800b570 <xTaskIncrementTick+0x168>)
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b506:	429a      	cmp	r2, r3
 800b508:	d3b8      	bcc.n	800b47c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800b50a:	2301      	movs	r3, #1
 800b50c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b50e:	e7b5      	b.n	800b47c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b510:	4b17      	ldr	r3, [pc, #92]	; (800b570 <xTaskIncrementTick+0x168>)
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b516:	4915      	ldr	r1, [pc, #84]	; (800b56c <xTaskIncrementTick+0x164>)
 800b518:	4613      	mov	r3, r2
 800b51a:	009b      	lsls	r3, r3, #2
 800b51c:	4413      	add	r3, r2
 800b51e:	009b      	lsls	r3, r3, #2
 800b520:	440b      	add	r3, r1
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	2b01      	cmp	r3, #1
 800b526:	d901      	bls.n	800b52c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800b528:	2301      	movs	r3, #1
 800b52a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b52c:	4b11      	ldr	r3, [pc, #68]	; (800b574 <xTaskIncrementTick+0x16c>)
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	2b00      	cmp	r3, #0
 800b532:	d007      	beq.n	800b544 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800b534:	2301      	movs	r3, #1
 800b536:	617b      	str	r3, [r7, #20]
 800b538:	e004      	b.n	800b544 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b53a:	4b0f      	ldr	r3, [pc, #60]	; (800b578 <xTaskIncrementTick+0x170>)
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	3301      	adds	r3, #1
 800b540:	4a0d      	ldr	r2, [pc, #52]	; (800b578 <xTaskIncrementTick+0x170>)
 800b542:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b544:	697b      	ldr	r3, [r7, #20]
}
 800b546:	4618      	mov	r0, r3
 800b548:	3718      	adds	r7, #24
 800b54a:	46bd      	mov	sp, r7
 800b54c:	bd80      	pop	{r7, pc}
 800b54e:	bf00      	nop
 800b550:	20001078 	.word	0x20001078
 800b554:	20001054 	.word	0x20001054
 800b558:	20001008 	.word	0x20001008
 800b55c:	2000100c 	.word	0x2000100c
 800b560:	20001068 	.word	0x20001068
 800b564:	20001070 	.word	0x20001070
 800b568:	20001058 	.word	0x20001058
 800b56c:	20000b80 	.word	0x20000b80
 800b570:	20000b7c 	.word	0x20000b7c
 800b574:	20001064 	.word	0x20001064
 800b578:	20001060 	.word	0x20001060

0800b57c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b57c:	b480      	push	{r7}
 800b57e:	b085      	sub	sp, #20
 800b580:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b582:	4b2a      	ldr	r3, [pc, #168]	; (800b62c <vTaskSwitchContext+0xb0>)
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	2b00      	cmp	r3, #0
 800b588:	d003      	beq.n	800b592 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b58a:	4b29      	ldr	r3, [pc, #164]	; (800b630 <vTaskSwitchContext+0xb4>)
 800b58c:	2201      	movs	r2, #1
 800b58e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b590:	e046      	b.n	800b620 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800b592:	4b27      	ldr	r3, [pc, #156]	; (800b630 <vTaskSwitchContext+0xb4>)
 800b594:	2200      	movs	r2, #0
 800b596:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b598:	4b26      	ldr	r3, [pc, #152]	; (800b634 <vTaskSwitchContext+0xb8>)
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	60fb      	str	r3, [r7, #12]
 800b59e:	e010      	b.n	800b5c2 <vTaskSwitchContext+0x46>
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d10a      	bne.n	800b5bc <vTaskSwitchContext+0x40>
	__asm volatile
 800b5a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5aa:	f383 8811 	msr	BASEPRI, r3
 800b5ae:	f3bf 8f6f 	isb	sy
 800b5b2:	f3bf 8f4f 	dsb	sy
 800b5b6:	607b      	str	r3, [r7, #4]
}
 800b5b8:	bf00      	nop
 800b5ba:	e7fe      	b.n	800b5ba <vTaskSwitchContext+0x3e>
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	3b01      	subs	r3, #1
 800b5c0:	60fb      	str	r3, [r7, #12]
 800b5c2:	491d      	ldr	r1, [pc, #116]	; (800b638 <vTaskSwitchContext+0xbc>)
 800b5c4:	68fa      	ldr	r2, [r7, #12]
 800b5c6:	4613      	mov	r3, r2
 800b5c8:	009b      	lsls	r3, r3, #2
 800b5ca:	4413      	add	r3, r2
 800b5cc:	009b      	lsls	r3, r3, #2
 800b5ce:	440b      	add	r3, r1
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d0e4      	beq.n	800b5a0 <vTaskSwitchContext+0x24>
 800b5d6:	68fa      	ldr	r2, [r7, #12]
 800b5d8:	4613      	mov	r3, r2
 800b5da:	009b      	lsls	r3, r3, #2
 800b5dc:	4413      	add	r3, r2
 800b5de:	009b      	lsls	r3, r3, #2
 800b5e0:	4a15      	ldr	r2, [pc, #84]	; (800b638 <vTaskSwitchContext+0xbc>)
 800b5e2:	4413      	add	r3, r2
 800b5e4:	60bb      	str	r3, [r7, #8]
 800b5e6:	68bb      	ldr	r3, [r7, #8]
 800b5e8:	685b      	ldr	r3, [r3, #4]
 800b5ea:	685a      	ldr	r2, [r3, #4]
 800b5ec:	68bb      	ldr	r3, [r7, #8]
 800b5ee:	605a      	str	r2, [r3, #4]
 800b5f0:	68bb      	ldr	r3, [r7, #8]
 800b5f2:	685a      	ldr	r2, [r3, #4]
 800b5f4:	68bb      	ldr	r3, [r7, #8]
 800b5f6:	3308      	adds	r3, #8
 800b5f8:	429a      	cmp	r2, r3
 800b5fa:	d104      	bne.n	800b606 <vTaskSwitchContext+0x8a>
 800b5fc:	68bb      	ldr	r3, [r7, #8]
 800b5fe:	685b      	ldr	r3, [r3, #4]
 800b600:	685a      	ldr	r2, [r3, #4]
 800b602:	68bb      	ldr	r3, [r7, #8]
 800b604:	605a      	str	r2, [r3, #4]
 800b606:	68bb      	ldr	r3, [r7, #8]
 800b608:	685b      	ldr	r3, [r3, #4]
 800b60a:	68db      	ldr	r3, [r3, #12]
 800b60c:	4a0b      	ldr	r2, [pc, #44]	; (800b63c <vTaskSwitchContext+0xc0>)
 800b60e:	6013      	str	r3, [r2, #0]
 800b610:	4a08      	ldr	r2, [pc, #32]	; (800b634 <vTaskSwitchContext+0xb8>)
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b616:	4b09      	ldr	r3, [pc, #36]	; (800b63c <vTaskSwitchContext+0xc0>)
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	3354      	adds	r3, #84	; 0x54
 800b61c:	4a08      	ldr	r2, [pc, #32]	; (800b640 <vTaskSwitchContext+0xc4>)
 800b61e:	6013      	str	r3, [r2, #0]
}
 800b620:	bf00      	nop
 800b622:	3714      	adds	r7, #20
 800b624:	46bd      	mov	sp, r7
 800b626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b62a:	4770      	bx	lr
 800b62c:	20001078 	.word	0x20001078
 800b630:	20001064 	.word	0x20001064
 800b634:	20001058 	.word	0x20001058
 800b638:	20000b80 	.word	0x20000b80
 800b63c:	20000b7c 	.word	0x20000b7c
 800b640:	20000010 	.word	0x20000010

0800b644 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b644:	b580      	push	{r7, lr}
 800b646:	b084      	sub	sp, #16
 800b648:	af00      	add	r7, sp, #0
 800b64a:	6078      	str	r0, [r7, #4]
 800b64c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	2b00      	cmp	r3, #0
 800b652:	d10a      	bne.n	800b66a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800b654:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b658:	f383 8811 	msr	BASEPRI, r3
 800b65c:	f3bf 8f6f 	isb	sy
 800b660:	f3bf 8f4f 	dsb	sy
 800b664:	60fb      	str	r3, [r7, #12]
}
 800b666:	bf00      	nop
 800b668:	e7fe      	b.n	800b668 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b66a:	4b07      	ldr	r3, [pc, #28]	; (800b688 <vTaskPlaceOnEventList+0x44>)
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	3318      	adds	r3, #24
 800b670:	4619      	mov	r1, r3
 800b672:	6878      	ldr	r0, [r7, #4]
 800b674:	f7fe fae1 	bl	8009c3a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b678:	2101      	movs	r1, #1
 800b67a:	6838      	ldr	r0, [r7, #0]
 800b67c:	f000 fb7e 	bl	800bd7c <prvAddCurrentTaskToDelayedList>
}
 800b680:	bf00      	nop
 800b682:	3710      	adds	r7, #16
 800b684:	46bd      	mov	sp, r7
 800b686:	bd80      	pop	{r7, pc}
 800b688:	20000b7c 	.word	0x20000b7c

0800b68c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b68c:	b580      	push	{r7, lr}
 800b68e:	b086      	sub	sp, #24
 800b690:	af00      	add	r7, sp, #0
 800b692:	60f8      	str	r0, [r7, #12]
 800b694:	60b9      	str	r1, [r7, #8]
 800b696:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d10a      	bne.n	800b6b4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800b69e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6a2:	f383 8811 	msr	BASEPRI, r3
 800b6a6:	f3bf 8f6f 	isb	sy
 800b6aa:	f3bf 8f4f 	dsb	sy
 800b6ae:	617b      	str	r3, [r7, #20]
}
 800b6b0:	bf00      	nop
 800b6b2:	e7fe      	b.n	800b6b2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b6b4:	4b0a      	ldr	r3, [pc, #40]	; (800b6e0 <vTaskPlaceOnEventListRestricted+0x54>)
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	3318      	adds	r3, #24
 800b6ba:	4619      	mov	r1, r3
 800b6bc:	68f8      	ldr	r0, [r7, #12]
 800b6be:	f7fe fa98 	bl	8009bf2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d002      	beq.n	800b6ce <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800b6c8:	f04f 33ff 	mov.w	r3, #4294967295
 800b6cc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b6ce:	6879      	ldr	r1, [r7, #4]
 800b6d0:	68b8      	ldr	r0, [r7, #8]
 800b6d2:	f000 fb53 	bl	800bd7c <prvAddCurrentTaskToDelayedList>
	}
 800b6d6:	bf00      	nop
 800b6d8:	3718      	adds	r7, #24
 800b6da:	46bd      	mov	sp, r7
 800b6dc:	bd80      	pop	{r7, pc}
 800b6de:	bf00      	nop
 800b6e0:	20000b7c 	.word	0x20000b7c

0800b6e4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b6e4:	b580      	push	{r7, lr}
 800b6e6:	b086      	sub	sp, #24
 800b6e8:	af00      	add	r7, sp, #0
 800b6ea:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	68db      	ldr	r3, [r3, #12]
 800b6f0:	68db      	ldr	r3, [r3, #12]
 800b6f2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b6f4:	693b      	ldr	r3, [r7, #16]
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d10a      	bne.n	800b710 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800b6fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6fe:	f383 8811 	msr	BASEPRI, r3
 800b702:	f3bf 8f6f 	isb	sy
 800b706:	f3bf 8f4f 	dsb	sy
 800b70a:	60fb      	str	r3, [r7, #12]
}
 800b70c:	bf00      	nop
 800b70e:	e7fe      	b.n	800b70e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b710:	693b      	ldr	r3, [r7, #16]
 800b712:	3318      	adds	r3, #24
 800b714:	4618      	mov	r0, r3
 800b716:	f7fe fac9 	bl	8009cac <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b71a:	4b1e      	ldr	r3, [pc, #120]	; (800b794 <xTaskRemoveFromEventList+0xb0>)
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d11d      	bne.n	800b75e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b722:	693b      	ldr	r3, [r7, #16]
 800b724:	3304      	adds	r3, #4
 800b726:	4618      	mov	r0, r3
 800b728:	f7fe fac0 	bl	8009cac <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b72c:	693b      	ldr	r3, [r7, #16]
 800b72e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b730:	4b19      	ldr	r3, [pc, #100]	; (800b798 <xTaskRemoveFromEventList+0xb4>)
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	429a      	cmp	r2, r3
 800b736:	d903      	bls.n	800b740 <xTaskRemoveFromEventList+0x5c>
 800b738:	693b      	ldr	r3, [r7, #16]
 800b73a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b73c:	4a16      	ldr	r2, [pc, #88]	; (800b798 <xTaskRemoveFromEventList+0xb4>)
 800b73e:	6013      	str	r3, [r2, #0]
 800b740:	693b      	ldr	r3, [r7, #16]
 800b742:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b744:	4613      	mov	r3, r2
 800b746:	009b      	lsls	r3, r3, #2
 800b748:	4413      	add	r3, r2
 800b74a:	009b      	lsls	r3, r3, #2
 800b74c:	4a13      	ldr	r2, [pc, #76]	; (800b79c <xTaskRemoveFromEventList+0xb8>)
 800b74e:	441a      	add	r2, r3
 800b750:	693b      	ldr	r3, [r7, #16]
 800b752:	3304      	adds	r3, #4
 800b754:	4619      	mov	r1, r3
 800b756:	4610      	mov	r0, r2
 800b758:	f7fe fa4b 	bl	8009bf2 <vListInsertEnd>
 800b75c:	e005      	b.n	800b76a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b75e:	693b      	ldr	r3, [r7, #16]
 800b760:	3318      	adds	r3, #24
 800b762:	4619      	mov	r1, r3
 800b764:	480e      	ldr	r0, [pc, #56]	; (800b7a0 <xTaskRemoveFromEventList+0xbc>)
 800b766:	f7fe fa44 	bl	8009bf2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b76a:	693b      	ldr	r3, [r7, #16]
 800b76c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b76e:	4b0d      	ldr	r3, [pc, #52]	; (800b7a4 <xTaskRemoveFromEventList+0xc0>)
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b774:	429a      	cmp	r2, r3
 800b776:	d905      	bls.n	800b784 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b778:	2301      	movs	r3, #1
 800b77a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b77c:	4b0a      	ldr	r3, [pc, #40]	; (800b7a8 <xTaskRemoveFromEventList+0xc4>)
 800b77e:	2201      	movs	r2, #1
 800b780:	601a      	str	r2, [r3, #0]
 800b782:	e001      	b.n	800b788 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800b784:	2300      	movs	r3, #0
 800b786:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b788:	697b      	ldr	r3, [r7, #20]
}
 800b78a:	4618      	mov	r0, r3
 800b78c:	3718      	adds	r7, #24
 800b78e:	46bd      	mov	sp, r7
 800b790:	bd80      	pop	{r7, pc}
 800b792:	bf00      	nop
 800b794:	20001078 	.word	0x20001078
 800b798:	20001058 	.word	0x20001058
 800b79c:	20000b80 	.word	0x20000b80
 800b7a0:	20001010 	.word	0x20001010
 800b7a4:	20000b7c 	.word	0x20000b7c
 800b7a8:	20001064 	.word	0x20001064

0800b7ac <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b7ac:	b480      	push	{r7}
 800b7ae:	b083      	sub	sp, #12
 800b7b0:	af00      	add	r7, sp, #0
 800b7b2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b7b4:	4b06      	ldr	r3, [pc, #24]	; (800b7d0 <vTaskInternalSetTimeOutState+0x24>)
 800b7b6:	681a      	ldr	r2, [r3, #0]
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b7bc:	4b05      	ldr	r3, [pc, #20]	; (800b7d4 <vTaskInternalSetTimeOutState+0x28>)
 800b7be:	681a      	ldr	r2, [r3, #0]
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	605a      	str	r2, [r3, #4]
}
 800b7c4:	bf00      	nop
 800b7c6:	370c      	adds	r7, #12
 800b7c8:	46bd      	mov	sp, r7
 800b7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ce:	4770      	bx	lr
 800b7d0:	20001068 	.word	0x20001068
 800b7d4:	20001054 	.word	0x20001054

0800b7d8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b7d8:	b580      	push	{r7, lr}
 800b7da:	b088      	sub	sp, #32
 800b7dc:	af00      	add	r7, sp, #0
 800b7de:	6078      	str	r0, [r7, #4]
 800b7e0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d10a      	bne.n	800b7fe <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800b7e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7ec:	f383 8811 	msr	BASEPRI, r3
 800b7f0:	f3bf 8f6f 	isb	sy
 800b7f4:	f3bf 8f4f 	dsb	sy
 800b7f8:	613b      	str	r3, [r7, #16]
}
 800b7fa:	bf00      	nop
 800b7fc:	e7fe      	b.n	800b7fc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b7fe:	683b      	ldr	r3, [r7, #0]
 800b800:	2b00      	cmp	r3, #0
 800b802:	d10a      	bne.n	800b81a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800b804:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b808:	f383 8811 	msr	BASEPRI, r3
 800b80c:	f3bf 8f6f 	isb	sy
 800b810:	f3bf 8f4f 	dsb	sy
 800b814:	60fb      	str	r3, [r7, #12]
}
 800b816:	bf00      	nop
 800b818:	e7fe      	b.n	800b818 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800b81a:	f000 ff7b 	bl	800c714 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b81e:	4b1d      	ldr	r3, [pc, #116]	; (800b894 <xTaskCheckForTimeOut+0xbc>)
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	685b      	ldr	r3, [r3, #4]
 800b828:	69ba      	ldr	r2, [r7, #24]
 800b82a:	1ad3      	subs	r3, r2, r3
 800b82c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b82e:	683b      	ldr	r3, [r7, #0]
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b836:	d102      	bne.n	800b83e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b838:	2300      	movs	r3, #0
 800b83a:	61fb      	str	r3, [r7, #28]
 800b83c:	e023      	b.n	800b886 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	681a      	ldr	r2, [r3, #0]
 800b842:	4b15      	ldr	r3, [pc, #84]	; (800b898 <xTaskCheckForTimeOut+0xc0>)
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	429a      	cmp	r2, r3
 800b848:	d007      	beq.n	800b85a <xTaskCheckForTimeOut+0x82>
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	685b      	ldr	r3, [r3, #4]
 800b84e:	69ba      	ldr	r2, [r7, #24]
 800b850:	429a      	cmp	r2, r3
 800b852:	d302      	bcc.n	800b85a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b854:	2301      	movs	r3, #1
 800b856:	61fb      	str	r3, [r7, #28]
 800b858:	e015      	b.n	800b886 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b85a:	683b      	ldr	r3, [r7, #0]
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	697a      	ldr	r2, [r7, #20]
 800b860:	429a      	cmp	r2, r3
 800b862:	d20b      	bcs.n	800b87c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b864:	683b      	ldr	r3, [r7, #0]
 800b866:	681a      	ldr	r2, [r3, #0]
 800b868:	697b      	ldr	r3, [r7, #20]
 800b86a:	1ad2      	subs	r2, r2, r3
 800b86c:	683b      	ldr	r3, [r7, #0]
 800b86e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b870:	6878      	ldr	r0, [r7, #4]
 800b872:	f7ff ff9b 	bl	800b7ac <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b876:	2300      	movs	r3, #0
 800b878:	61fb      	str	r3, [r7, #28]
 800b87a:	e004      	b.n	800b886 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800b87c:	683b      	ldr	r3, [r7, #0]
 800b87e:	2200      	movs	r2, #0
 800b880:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b882:	2301      	movs	r3, #1
 800b884:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b886:	f000 ff75 	bl	800c774 <vPortExitCritical>

	return xReturn;
 800b88a:	69fb      	ldr	r3, [r7, #28]
}
 800b88c:	4618      	mov	r0, r3
 800b88e:	3720      	adds	r7, #32
 800b890:	46bd      	mov	sp, r7
 800b892:	bd80      	pop	{r7, pc}
 800b894:	20001054 	.word	0x20001054
 800b898:	20001068 	.word	0x20001068

0800b89c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b89c:	b480      	push	{r7}
 800b89e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b8a0:	4b03      	ldr	r3, [pc, #12]	; (800b8b0 <vTaskMissedYield+0x14>)
 800b8a2:	2201      	movs	r2, #1
 800b8a4:	601a      	str	r2, [r3, #0]
}
 800b8a6:	bf00      	nop
 800b8a8:	46bd      	mov	sp, r7
 800b8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ae:	4770      	bx	lr
 800b8b0:	20001064 	.word	0x20001064

0800b8b4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b8b4:	b580      	push	{r7, lr}
 800b8b6:	b082      	sub	sp, #8
 800b8b8:	af00      	add	r7, sp, #0
 800b8ba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b8bc:	f000 f852 	bl	800b964 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b8c0:	4b06      	ldr	r3, [pc, #24]	; (800b8dc <prvIdleTask+0x28>)
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	2b01      	cmp	r3, #1
 800b8c6:	d9f9      	bls.n	800b8bc <prvIdleTask+0x8>
			{
				taskYIELD();
 800b8c8:	4b05      	ldr	r3, [pc, #20]	; (800b8e0 <prvIdleTask+0x2c>)
 800b8ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b8ce:	601a      	str	r2, [r3, #0]
 800b8d0:	f3bf 8f4f 	dsb	sy
 800b8d4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b8d8:	e7f0      	b.n	800b8bc <prvIdleTask+0x8>
 800b8da:	bf00      	nop
 800b8dc:	20000b80 	.word	0x20000b80
 800b8e0:	e000ed04 	.word	0xe000ed04

0800b8e4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b8e4:	b580      	push	{r7, lr}
 800b8e6:	b082      	sub	sp, #8
 800b8e8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b8ea:	2300      	movs	r3, #0
 800b8ec:	607b      	str	r3, [r7, #4]
 800b8ee:	e00c      	b.n	800b90a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b8f0:	687a      	ldr	r2, [r7, #4]
 800b8f2:	4613      	mov	r3, r2
 800b8f4:	009b      	lsls	r3, r3, #2
 800b8f6:	4413      	add	r3, r2
 800b8f8:	009b      	lsls	r3, r3, #2
 800b8fa:	4a12      	ldr	r2, [pc, #72]	; (800b944 <prvInitialiseTaskLists+0x60>)
 800b8fc:	4413      	add	r3, r2
 800b8fe:	4618      	mov	r0, r3
 800b900:	f7fe f94a 	bl	8009b98 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	3301      	adds	r3, #1
 800b908:	607b      	str	r3, [r7, #4]
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	2b37      	cmp	r3, #55	; 0x37
 800b90e:	d9ef      	bls.n	800b8f0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b910:	480d      	ldr	r0, [pc, #52]	; (800b948 <prvInitialiseTaskLists+0x64>)
 800b912:	f7fe f941 	bl	8009b98 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b916:	480d      	ldr	r0, [pc, #52]	; (800b94c <prvInitialiseTaskLists+0x68>)
 800b918:	f7fe f93e 	bl	8009b98 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b91c:	480c      	ldr	r0, [pc, #48]	; (800b950 <prvInitialiseTaskLists+0x6c>)
 800b91e:	f7fe f93b 	bl	8009b98 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b922:	480c      	ldr	r0, [pc, #48]	; (800b954 <prvInitialiseTaskLists+0x70>)
 800b924:	f7fe f938 	bl	8009b98 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b928:	480b      	ldr	r0, [pc, #44]	; (800b958 <prvInitialiseTaskLists+0x74>)
 800b92a:	f7fe f935 	bl	8009b98 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b92e:	4b0b      	ldr	r3, [pc, #44]	; (800b95c <prvInitialiseTaskLists+0x78>)
 800b930:	4a05      	ldr	r2, [pc, #20]	; (800b948 <prvInitialiseTaskLists+0x64>)
 800b932:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b934:	4b0a      	ldr	r3, [pc, #40]	; (800b960 <prvInitialiseTaskLists+0x7c>)
 800b936:	4a05      	ldr	r2, [pc, #20]	; (800b94c <prvInitialiseTaskLists+0x68>)
 800b938:	601a      	str	r2, [r3, #0]
}
 800b93a:	bf00      	nop
 800b93c:	3708      	adds	r7, #8
 800b93e:	46bd      	mov	sp, r7
 800b940:	bd80      	pop	{r7, pc}
 800b942:	bf00      	nop
 800b944:	20000b80 	.word	0x20000b80
 800b948:	20000fe0 	.word	0x20000fe0
 800b94c:	20000ff4 	.word	0x20000ff4
 800b950:	20001010 	.word	0x20001010
 800b954:	20001024 	.word	0x20001024
 800b958:	2000103c 	.word	0x2000103c
 800b95c:	20001008 	.word	0x20001008
 800b960:	2000100c 	.word	0x2000100c

0800b964 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b964:	b580      	push	{r7, lr}
 800b966:	b082      	sub	sp, #8
 800b968:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b96a:	e019      	b.n	800b9a0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b96c:	f000 fed2 	bl	800c714 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b970:	4b10      	ldr	r3, [pc, #64]	; (800b9b4 <prvCheckTasksWaitingTermination+0x50>)
 800b972:	68db      	ldr	r3, [r3, #12]
 800b974:	68db      	ldr	r3, [r3, #12]
 800b976:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	3304      	adds	r3, #4
 800b97c:	4618      	mov	r0, r3
 800b97e:	f7fe f995 	bl	8009cac <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b982:	4b0d      	ldr	r3, [pc, #52]	; (800b9b8 <prvCheckTasksWaitingTermination+0x54>)
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	3b01      	subs	r3, #1
 800b988:	4a0b      	ldr	r2, [pc, #44]	; (800b9b8 <prvCheckTasksWaitingTermination+0x54>)
 800b98a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b98c:	4b0b      	ldr	r3, [pc, #44]	; (800b9bc <prvCheckTasksWaitingTermination+0x58>)
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	3b01      	subs	r3, #1
 800b992:	4a0a      	ldr	r2, [pc, #40]	; (800b9bc <prvCheckTasksWaitingTermination+0x58>)
 800b994:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b996:	f000 feed 	bl	800c774 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b99a:	6878      	ldr	r0, [r7, #4]
 800b99c:	f000 f810 	bl	800b9c0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b9a0:	4b06      	ldr	r3, [pc, #24]	; (800b9bc <prvCheckTasksWaitingTermination+0x58>)
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d1e1      	bne.n	800b96c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b9a8:	bf00      	nop
 800b9aa:	bf00      	nop
 800b9ac:	3708      	adds	r7, #8
 800b9ae:	46bd      	mov	sp, r7
 800b9b0:	bd80      	pop	{r7, pc}
 800b9b2:	bf00      	nop
 800b9b4:	20001024 	.word	0x20001024
 800b9b8:	20001050 	.word	0x20001050
 800b9bc:	20001038 	.word	0x20001038

0800b9c0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b9c0:	b580      	push	{r7, lr}
 800b9c2:	b084      	sub	sp, #16
 800b9c4:	af00      	add	r7, sp, #0
 800b9c6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	3354      	adds	r3, #84	; 0x54
 800b9cc:	4618      	mov	r0, r3
 800b9ce:	f001 f9f7 	bl	800cdc0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d108      	bne.n	800b9ee <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b9e0:	4618      	mov	r0, r3
 800b9e2:	f001 f885 	bl	800caf0 <vPortFree>
				vPortFree( pxTCB );
 800b9e6:	6878      	ldr	r0, [r7, #4]
 800b9e8:	f001 f882 	bl	800caf0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b9ec:	e018      	b.n	800ba20 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800b9f4:	2b01      	cmp	r3, #1
 800b9f6:	d103      	bne.n	800ba00 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800b9f8:	6878      	ldr	r0, [r7, #4]
 800b9fa:	f001 f879 	bl	800caf0 <vPortFree>
	}
 800b9fe:	e00f      	b.n	800ba20 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800ba06:	2b02      	cmp	r3, #2
 800ba08:	d00a      	beq.n	800ba20 <prvDeleteTCB+0x60>
	__asm volatile
 800ba0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba0e:	f383 8811 	msr	BASEPRI, r3
 800ba12:	f3bf 8f6f 	isb	sy
 800ba16:	f3bf 8f4f 	dsb	sy
 800ba1a:	60fb      	str	r3, [r7, #12]
}
 800ba1c:	bf00      	nop
 800ba1e:	e7fe      	b.n	800ba1e <prvDeleteTCB+0x5e>
	}
 800ba20:	bf00      	nop
 800ba22:	3710      	adds	r7, #16
 800ba24:	46bd      	mov	sp, r7
 800ba26:	bd80      	pop	{r7, pc}

0800ba28 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ba28:	b480      	push	{r7}
 800ba2a:	b083      	sub	sp, #12
 800ba2c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ba2e:	4b0c      	ldr	r3, [pc, #48]	; (800ba60 <prvResetNextTaskUnblockTime+0x38>)
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d104      	bne.n	800ba42 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ba38:	4b0a      	ldr	r3, [pc, #40]	; (800ba64 <prvResetNextTaskUnblockTime+0x3c>)
 800ba3a:	f04f 32ff 	mov.w	r2, #4294967295
 800ba3e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ba40:	e008      	b.n	800ba54 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ba42:	4b07      	ldr	r3, [pc, #28]	; (800ba60 <prvResetNextTaskUnblockTime+0x38>)
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	68db      	ldr	r3, [r3, #12]
 800ba48:	68db      	ldr	r3, [r3, #12]
 800ba4a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	685b      	ldr	r3, [r3, #4]
 800ba50:	4a04      	ldr	r2, [pc, #16]	; (800ba64 <prvResetNextTaskUnblockTime+0x3c>)
 800ba52:	6013      	str	r3, [r2, #0]
}
 800ba54:	bf00      	nop
 800ba56:	370c      	adds	r7, #12
 800ba58:	46bd      	mov	sp, r7
 800ba5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba5e:	4770      	bx	lr
 800ba60:	20001008 	.word	0x20001008
 800ba64:	20001070 	.word	0x20001070

0800ba68 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ba68:	b480      	push	{r7}
 800ba6a:	b083      	sub	sp, #12
 800ba6c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ba6e:	4b0b      	ldr	r3, [pc, #44]	; (800ba9c <xTaskGetSchedulerState+0x34>)
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d102      	bne.n	800ba7c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ba76:	2301      	movs	r3, #1
 800ba78:	607b      	str	r3, [r7, #4]
 800ba7a:	e008      	b.n	800ba8e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ba7c:	4b08      	ldr	r3, [pc, #32]	; (800baa0 <xTaskGetSchedulerState+0x38>)
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d102      	bne.n	800ba8a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ba84:	2302      	movs	r3, #2
 800ba86:	607b      	str	r3, [r7, #4]
 800ba88:	e001      	b.n	800ba8e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ba8a:	2300      	movs	r3, #0
 800ba8c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ba8e:	687b      	ldr	r3, [r7, #4]
	}
 800ba90:	4618      	mov	r0, r3
 800ba92:	370c      	adds	r7, #12
 800ba94:	46bd      	mov	sp, r7
 800ba96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba9a:	4770      	bx	lr
 800ba9c:	2000105c 	.word	0x2000105c
 800baa0:	20001078 	.word	0x20001078

0800baa4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800baa4:	b580      	push	{r7, lr}
 800baa6:	b084      	sub	sp, #16
 800baa8:	af00      	add	r7, sp, #0
 800baaa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800bab0:	2300      	movs	r3, #0
 800bab2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d051      	beq.n	800bb5e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800baba:	68bb      	ldr	r3, [r7, #8]
 800babc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800babe:	4b2a      	ldr	r3, [pc, #168]	; (800bb68 <xTaskPriorityInherit+0xc4>)
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bac4:	429a      	cmp	r2, r3
 800bac6:	d241      	bcs.n	800bb4c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800bac8:	68bb      	ldr	r3, [r7, #8]
 800baca:	699b      	ldr	r3, [r3, #24]
 800bacc:	2b00      	cmp	r3, #0
 800bace:	db06      	blt.n	800bade <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bad0:	4b25      	ldr	r3, [pc, #148]	; (800bb68 <xTaskPriorityInherit+0xc4>)
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bad6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800bada:	68bb      	ldr	r3, [r7, #8]
 800badc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800bade:	68bb      	ldr	r3, [r7, #8]
 800bae0:	6959      	ldr	r1, [r3, #20]
 800bae2:	68bb      	ldr	r3, [r7, #8]
 800bae4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bae6:	4613      	mov	r3, r2
 800bae8:	009b      	lsls	r3, r3, #2
 800baea:	4413      	add	r3, r2
 800baec:	009b      	lsls	r3, r3, #2
 800baee:	4a1f      	ldr	r2, [pc, #124]	; (800bb6c <xTaskPriorityInherit+0xc8>)
 800baf0:	4413      	add	r3, r2
 800baf2:	4299      	cmp	r1, r3
 800baf4:	d122      	bne.n	800bb3c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800baf6:	68bb      	ldr	r3, [r7, #8]
 800baf8:	3304      	adds	r3, #4
 800bafa:	4618      	mov	r0, r3
 800bafc:	f7fe f8d6 	bl	8009cac <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800bb00:	4b19      	ldr	r3, [pc, #100]	; (800bb68 <xTaskPriorityInherit+0xc4>)
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb06:	68bb      	ldr	r3, [r7, #8]
 800bb08:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800bb0a:	68bb      	ldr	r3, [r7, #8]
 800bb0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb0e:	4b18      	ldr	r3, [pc, #96]	; (800bb70 <xTaskPriorityInherit+0xcc>)
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	429a      	cmp	r2, r3
 800bb14:	d903      	bls.n	800bb1e <xTaskPriorityInherit+0x7a>
 800bb16:	68bb      	ldr	r3, [r7, #8]
 800bb18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb1a:	4a15      	ldr	r2, [pc, #84]	; (800bb70 <xTaskPriorityInherit+0xcc>)
 800bb1c:	6013      	str	r3, [r2, #0]
 800bb1e:	68bb      	ldr	r3, [r7, #8]
 800bb20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb22:	4613      	mov	r3, r2
 800bb24:	009b      	lsls	r3, r3, #2
 800bb26:	4413      	add	r3, r2
 800bb28:	009b      	lsls	r3, r3, #2
 800bb2a:	4a10      	ldr	r2, [pc, #64]	; (800bb6c <xTaskPriorityInherit+0xc8>)
 800bb2c:	441a      	add	r2, r3
 800bb2e:	68bb      	ldr	r3, [r7, #8]
 800bb30:	3304      	adds	r3, #4
 800bb32:	4619      	mov	r1, r3
 800bb34:	4610      	mov	r0, r2
 800bb36:	f7fe f85c 	bl	8009bf2 <vListInsertEnd>
 800bb3a:	e004      	b.n	800bb46 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800bb3c:	4b0a      	ldr	r3, [pc, #40]	; (800bb68 <xTaskPriorityInherit+0xc4>)
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb42:	68bb      	ldr	r3, [r7, #8]
 800bb44:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800bb46:	2301      	movs	r3, #1
 800bb48:	60fb      	str	r3, [r7, #12]
 800bb4a:	e008      	b.n	800bb5e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800bb4c:	68bb      	ldr	r3, [r7, #8]
 800bb4e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bb50:	4b05      	ldr	r3, [pc, #20]	; (800bb68 <xTaskPriorityInherit+0xc4>)
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb56:	429a      	cmp	r2, r3
 800bb58:	d201      	bcs.n	800bb5e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800bb5a:	2301      	movs	r3, #1
 800bb5c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bb5e:	68fb      	ldr	r3, [r7, #12]
	}
 800bb60:	4618      	mov	r0, r3
 800bb62:	3710      	adds	r7, #16
 800bb64:	46bd      	mov	sp, r7
 800bb66:	bd80      	pop	{r7, pc}
 800bb68:	20000b7c 	.word	0x20000b7c
 800bb6c:	20000b80 	.word	0x20000b80
 800bb70:	20001058 	.word	0x20001058

0800bb74 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800bb74:	b580      	push	{r7, lr}
 800bb76:	b086      	sub	sp, #24
 800bb78:	af00      	add	r7, sp, #0
 800bb7a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800bb80:	2300      	movs	r3, #0
 800bb82:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d056      	beq.n	800bc38 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800bb8a:	4b2e      	ldr	r3, [pc, #184]	; (800bc44 <xTaskPriorityDisinherit+0xd0>)
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	693a      	ldr	r2, [r7, #16]
 800bb90:	429a      	cmp	r2, r3
 800bb92:	d00a      	beq.n	800bbaa <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800bb94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb98:	f383 8811 	msr	BASEPRI, r3
 800bb9c:	f3bf 8f6f 	isb	sy
 800bba0:	f3bf 8f4f 	dsb	sy
 800bba4:	60fb      	str	r3, [r7, #12]
}
 800bba6:	bf00      	nop
 800bba8:	e7fe      	b.n	800bba8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800bbaa:	693b      	ldr	r3, [r7, #16]
 800bbac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d10a      	bne.n	800bbc8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800bbb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbb6:	f383 8811 	msr	BASEPRI, r3
 800bbba:	f3bf 8f6f 	isb	sy
 800bbbe:	f3bf 8f4f 	dsb	sy
 800bbc2:	60bb      	str	r3, [r7, #8]
}
 800bbc4:	bf00      	nop
 800bbc6:	e7fe      	b.n	800bbc6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800bbc8:	693b      	ldr	r3, [r7, #16]
 800bbca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bbcc:	1e5a      	subs	r2, r3, #1
 800bbce:	693b      	ldr	r3, [r7, #16]
 800bbd0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800bbd2:	693b      	ldr	r3, [r7, #16]
 800bbd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bbd6:	693b      	ldr	r3, [r7, #16]
 800bbd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bbda:	429a      	cmp	r2, r3
 800bbdc:	d02c      	beq.n	800bc38 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800bbde:	693b      	ldr	r3, [r7, #16]
 800bbe0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d128      	bne.n	800bc38 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bbe6:	693b      	ldr	r3, [r7, #16]
 800bbe8:	3304      	adds	r3, #4
 800bbea:	4618      	mov	r0, r3
 800bbec:	f7fe f85e 	bl	8009cac <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800bbf0:	693b      	ldr	r3, [r7, #16]
 800bbf2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bbf4:	693b      	ldr	r3, [r7, #16]
 800bbf6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bbf8:	693b      	ldr	r3, [r7, #16]
 800bbfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbfc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800bc00:	693b      	ldr	r3, [r7, #16]
 800bc02:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800bc04:	693b      	ldr	r3, [r7, #16]
 800bc06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc08:	4b0f      	ldr	r3, [pc, #60]	; (800bc48 <xTaskPriorityDisinherit+0xd4>)
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	429a      	cmp	r2, r3
 800bc0e:	d903      	bls.n	800bc18 <xTaskPriorityDisinherit+0xa4>
 800bc10:	693b      	ldr	r3, [r7, #16]
 800bc12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc14:	4a0c      	ldr	r2, [pc, #48]	; (800bc48 <xTaskPriorityDisinherit+0xd4>)
 800bc16:	6013      	str	r3, [r2, #0]
 800bc18:	693b      	ldr	r3, [r7, #16]
 800bc1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc1c:	4613      	mov	r3, r2
 800bc1e:	009b      	lsls	r3, r3, #2
 800bc20:	4413      	add	r3, r2
 800bc22:	009b      	lsls	r3, r3, #2
 800bc24:	4a09      	ldr	r2, [pc, #36]	; (800bc4c <xTaskPriorityDisinherit+0xd8>)
 800bc26:	441a      	add	r2, r3
 800bc28:	693b      	ldr	r3, [r7, #16]
 800bc2a:	3304      	adds	r3, #4
 800bc2c:	4619      	mov	r1, r3
 800bc2e:	4610      	mov	r0, r2
 800bc30:	f7fd ffdf 	bl	8009bf2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800bc34:	2301      	movs	r3, #1
 800bc36:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bc38:	697b      	ldr	r3, [r7, #20]
	}
 800bc3a:	4618      	mov	r0, r3
 800bc3c:	3718      	adds	r7, #24
 800bc3e:	46bd      	mov	sp, r7
 800bc40:	bd80      	pop	{r7, pc}
 800bc42:	bf00      	nop
 800bc44:	20000b7c 	.word	0x20000b7c
 800bc48:	20001058 	.word	0x20001058
 800bc4c:	20000b80 	.word	0x20000b80

0800bc50 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800bc50:	b580      	push	{r7, lr}
 800bc52:	b088      	sub	sp, #32
 800bc54:	af00      	add	r7, sp, #0
 800bc56:	6078      	str	r0, [r7, #4]
 800bc58:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800bc5e:	2301      	movs	r3, #1
 800bc60:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d06a      	beq.n	800bd3e <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800bc68:	69bb      	ldr	r3, [r7, #24]
 800bc6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d10a      	bne.n	800bc86 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800bc70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc74:	f383 8811 	msr	BASEPRI, r3
 800bc78:	f3bf 8f6f 	isb	sy
 800bc7c:	f3bf 8f4f 	dsb	sy
 800bc80:	60fb      	str	r3, [r7, #12]
}
 800bc82:	bf00      	nop
 800bc84:	e7fe      	b.n	800bc84 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800bc86:	69bb      	ldr	r3, [r7, #24]
 800bc88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bc8a:	683a      	ldr	r2, [r7, #0]
 800bc8c:	429a      	cmp	r2, r3
 800bc8e:	d902      	bls.n	800bc96 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800bc90:	683b      	ldr	r3, [r7, #0]
 800bc92:	61fb      	str	r3, [r7, #28]
 800bc94:	e002      	b.n	800bc9c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800bc96:	69bb      	ldr	r3, [r7, #24]
 800bc98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bc9a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800bc9c:	69bb      	ldr	r3, [r7, #24]
 800bc9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bca0:	69fa      	ldr	r2, [r7, #28]
 800bca2:	429a      	cmp	r2, r3
 800bca4:	d04b      	beq.n	800bd3e <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800bca6:	69bb      	ldr	r3, [r7, #24]
 800bca8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bcaa:	697a      	ldr	r2, [r7, #20]
 800bcac:	429a      	cmp	r2, r3
 800bcae:	d146      	bne.n	800bd3e <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800bcb0:	4b25      	ldr	r3, [pc, #148]	; (800bd48 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	69ba      	ldr	r2, [r7, #24]
 800bcb6:	429a      	cmp	r2, r3
 800bcb8:	d10a      	bne.n	800bcd0 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800bcba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcbe:	f383 8811 	msr	BASEPRI, r3
 800bcc2:	f3bf 8f6f 	isb	sy
 800bcc6:	f3bf 8f4f 	dsb	sy
 800bcca:	60bb      	str	r3, [r7, #8]
}
 800bccc:	bf00      	nop
 800bcce:	e7fe      	b.n	800bcce <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800bcd0:	69bb      	ldr	r3, [r7, #24]
 800bcd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcd4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800bcd6:	69bb      	ldr	r3, [r7, #24]
 800bcd8:	69fa      	ldr	r2, [r7, #28]
 800bcda:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800bcdc:	69bb      	ldr	r3, [r7, #24]
 800bcde:	699b      	ldr	r3, [r3, #24]
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	db04      	blt.n	800bcee <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bce4:	69fb      	ldr	r3, [r7, #28]
 800bce6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800bcea:	69bb      	ldr	r3, [r7, #24]
 800bcec:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800bcee:	69bb      	ldr	r3, [r7, #24]
 800bcf0:	6959      	ldr	r1, [r3, #20]
 800bcf2:	693a      	ldr	r2, [r7, #16]
 800bcf4:	4613      	mov	r3, r2
 800bcf6:	009b      	lsls	r3, r3, #2
 800bcf8:	4413      	add	r3, r2
 800bcfa:	009b      	lsls	r3, r3, #2
 800bcfc:	4a13      	ldr	r2, [pc, #76]	; (800bd4c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800bcfe:	4413      	add	r3, r2
 800bd00:	4299      	cmp	r1, r3
 800bd02:	d11c      	bne.n	800bd3e <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bd04:	69bb      	ldr	r3, [r7, #24]
 800bd06:	3304      	adds	r3, #4
 800bd08:	4618      	mov	r0, r3
 800bd0a:	f7fd ffcf 	bl	8009cac <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800bd0e:	69bb      	ldr	r3, [r7, #24]
 800bd10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd12:	4b0f      	ldr	r3, [pc, #60]	; (800bd50 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	429a      	cmp	r2, r3
 800bd18:	d903      	bls.n	800bd22 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800bd1a:	69bb      	ldr	r3, [r7, #24]
 800bd1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd1e:	4a0c      	ldr	r2, [pc, #48]	; (800bd50 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800bd20:	6013      	str	r3, [r2, #0]
 800bd22:	69bb      	ldr	r3, [r7, #24]
 800bd24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd26:	4613      	mov	r3, r2
 800bd28:	009b      	lsls	r3, r3, #2
 800bd2a:	4413      	add	r3, r2
 800bd2c:	009b      	lsls	r3, r3, #2
 800bd2e:	4a07      	ldr	r2, [pc, #28]	; (800bd4c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800bd30:	441a      	add	r2, r3
 800bd32:	69bb      	ldr	r3, [r7, #24]
 800bd34:	3304      	adds	r3, #4
 800bd36:	4619      	mov	r1, r3
 800bd38:	4610      	mov	r0, r2
 800bd3a:	f7fd ff5a 	bl	8009bf2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bd3e:	bf00      	nop
 800bd40:	3720      	adds	r7, #32
 800bd42:	46bd      	mov	sp, r7
 800bd44:	bd80      	pop	{r7, pc}
 800bd46:	bf00      	nop
 800bd48:	20000b7c 	.word	0x20000b7c
 800bd4c:	20000b80 	.word	0x20000b80
 800bd50:	20001058 	.word	0x20001058

0800bd54 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800bd54:	b480      	push	{r7}
 800bd56:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800bd58:	4b07      	ldr	r3, [pc, #28]	; (800bd78 <pvTaskIncrementMutexHeldCount+0x24>)
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d004      	beq.n	800bd6a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800bd60:	4b05      	ldr	r3, [pc, #20]	; (800bd78 <pvTaskIncrementMutexHeldCount+0x24>)
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800bd66:	3201      	adds	r2, #1
 800bd68:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800bd6a:	4b03      	ldr	r3, [pc, #12]	; (800bd78 <pvTaskIncrementMutexHeldCount+0x24>)
 800bd6c:	681b      	ldr	r3, [r3, #0]
	}
 800bd6e:	4618      	mov	r0, r3
 800bd70:	46bd      	mov	sp, r7
 800bd72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd76:	4770      	bx	lr
 800bd78:	20000b7c 	.word	0x20000b7c

0800bd7c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800bd7c:	b580      	push	{r7, lr}
 800bd7e:	b084      	sub	sp, #16
 800bd80:	af00      	add	r7, sp, #0
 800bd82:	6078      	str	r0, [r7, #4]
 800bd84:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800bd86:	4b21      	ldr	r3, [pc, #132]	; (800be0c <prvAddCurrentTaskToDelayedList+0x90>)
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bd8c:	4b20      	ldr	r3, [pc, #128]	; (800be10 <prvAddCurrentTaskToDelayedList+0x94>)
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	3304      	adds	r3, #4
 800bd92:	4618      	mov	r0, r3
 800bd94:	f7fd ff8a 	bl	8009cac <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd9e:	d10a      	bne.n	800bdb6 <prvAddCurrentTaskToDelayedList+0x3a>
 800bda0:	683b      	ldr	r3, [r7, #0]
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d007      	beq.n	800bdb6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bda6:	4b1a      	ldr	r3, [pc, #104]	; (800be10 <prvAddCurrentTaskToDelayedList+0x94>)
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	3304      	adds	r3, #4
 800bdac:	4619      	mov	r1, r3
 800bdae:	4819      	ldr	r0, [pc, #100]	; (800be14 <prvAddCurrentTaskToDelayedList+0x98>)
 800bdb0:	f7fd ff1f 	bl	8009bf2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800bdb4:	e026      	b.n	800be04 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800bdb6:	68fa      	ldr	r2, [r7, #12]
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	4413      	add	r3, r2
 800bdbc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800bdbe:	4b14      	ldr	r3, [pc, #80]	; (800be10 <prvAddCurrentTaskToDelayedList+0x94>)
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	68ba      	ldr	r2, [r7, #8]
 800bdc4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800bdc6:	68ba      	ldr	r2, [r7, #8]
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	429a      	cmp	r2, r3
 800bdcc:	d209      	bcs.n	800bde2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bdce:	4b12      	ldr	r3, [pc, #72]	; (800be18 <prvAddCurrentTaskToDelayedList+0x9c>)
 800bdd0:	681a      	ldr	r2, [r3, #0]
 800bdd2:	4b0f      	ldr	r3, [pc, #60]	; (800be10 <prvAddCurrentTaskToDelayedList+0x94>)
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	3304      	adds	r3, #4
 800bdd8:	4619      	mov	r1, r3
 800bdda:	4610      	mov	r0, r2
 800bddc:	f7fd ff2d 	bl	8009c3a <vListInsert>
}
 800bde0:	e010      	b.n	800be04 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bde2:	4b0e      	ldr	r3, [pc, #56]	; (800be1c <prvAddCurrentTaskToDelayedList+0xa0>)
 800bde4:	681a      	ldr	r2, [r3, #0]
 800bde6:	4b0a      	ldr	r3, [pc, #40]	; (800be10 <prvAddCurrentTaskToDelayedList+0x94>)
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	3304      	adds	r3, #4
 800bdec:	4619      	mov	r1, r3
 800bdee:	4610      	mov	r0, r2
 800bdf0:	f7fd ff23 	bl	8009c3a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800bdf4:	4b0a      	ldr	r3, [pc, #40]	; (800be20 <prvAddCurrentTaskToDelayedList+0xa4>)
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	68ba      	ldr	r2, [r7, #8]
 800bdfa:	429a      	cmp	r2, r3
 800bdfc:	d202      	bcs.n	800be04 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800bdfe:	4a08      	ldr	r2, [pc, #32]	; (800be20 <prvAddCurrentTaskToDelayedList+0xa4>)
 800be00:	68bb      	ldr	r3, [r7, #8]
 800be02:	6013      	str	r3, [r2, #0]
}
 800be04:	bf00      	nop
 800be06:	3710      	adds	r7, #16
 800be08:	46bd      	mov	sp, r7
 800be0a:	bd80      	pop	{r7, pc}
 800be0c:	20001054 	.word	0x20001054
 800be10:	20000b7c 	.word	0x20000b7c
 800be14:	2000103c 	.word	0x2000103c
 800be18:	2000100c 	.word	0x2000100c
 800be1c:	20001008 	.word	0x20001008
 800be20:	20001070 	.word	0x20001070

0800be24 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800be24:	b580      	push	{r7, lr}
 800be26:	b08a      	sub	sp, #40	; 0x28
 800be28:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800be2a:	2300      	movs	r3, #0
 800be2c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800be2e:	f000 fb07 	bl	800c440 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800be32:	4b1c      	ldr	r3, [pc, #112]	; (800bea4 <xTimerCreateTimerTask+0x80>)
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	2b00      	cmp	r3, #0
 800be38:	d021      	beq.n	800be7e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800be3a:	2300      	movs	r3, #0
 800be3c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800be3e:	2300      	movs	r3, #0
 800be40:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800be42:	1d3a      	adds	r2, r7, #4
 800be44:	f107 0108 	add.w	r1, r7, #8
 800be48:	f107 030c 	add.w	r3, r7, #12
 800be4c:	4618      	mov	r0, r3
 800be4e:	f7fd fe89 	bl	8009b64 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800be52:	6879      	ldr	r1, [r7, #4]
 800be54:	68bb      	ldr	r3, [r7, #8]
 800be56:	68fa      	ldr	r2, [r7, #12]
 800be58:	9202      	str	r2, [sp, #8]
 800be5a:	9301      	str	r3, [sp, #4]
 800be5c:	2302      	movs	r3, #2
 800be5e:	9300      	str	r3, [sp, #0]
 800be60:	2300      	movs	r3, #0
 800be62:	460a      	mov	r2, r1
 800be64:	4910      	ldr	r1, [pc, #64]	; (800bea8 <xTimerCreateTimerTask+0x84>)
 800be66:	4811      	ldr	r0, [pc, #68]	; (800beac <xTimerCreateTimerTask+0x88>)
 800be68:	f7fe ffa4 	bl	800adb4 <xTaskCreateStatic>
 800be6c:	4603      	mov	r3, r0
 800be6e:	4a10      	ldr	r2, [pc, #64]	; (800beb0 <xTimerCreateTimerTask+0x8c>)
 800be70:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800be72:	4b0f      	ldr	r3, [pc, #60]	; (800beb0 <xTimerCreateTimerTask+0x8c>)
 800be74:	681b      	ldr	r3, [r3, #0]
 800be76:	2b00      	cmp	r3, #0
 800be78:	d001      	beq.n	800be7e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800be7a:	2301      	movs	r3, #1
 800be7c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800be7e:	697b      	ldr	r3, [r7, #20]
 800be80:	2b00      	cmp	r3, #0
 800be82:	d10a      	bne.n	800be9a <xTimerCreateTimerTask+0x76>
	__asm volatile
 800be84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be88:	f383 8811 	msr	BASEPRI, r3
 800be8c:	f3bf 8f6f 	isb	sy
 800be90:	f3bf 8f4f 	dsb	sy
 800be94:	613b      	str	r3, [r7, #16]
}
 800be96:	bf00      	nop
 800be98:	e7fe      	b.n	800be98 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800be9a:	697b      	ldr	r3, [r7, #20]
}
 800be9c:	4618      	mov	r0, r3
 800be9e:	3718      	adds	r7, #24
 800bea0:	46bd      	mov	sp, r7
 800bea2:	bd80      	pop	{r7, pc}
 800bea4:	200010ac 	.word	0x200010ac
 800bea8:	0800cf80 	.word	0x0800cf80
 800beac:	0800bfe9 	.word	0x0800bfe9
 800beb0:	200010b0 	.word	0x200010b0

0800beb4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800beb4:	b580      	push	{r7, lr}
 800beb6:	b08a      	sub	sp, #40	; 0x28
 800beb8:	af00      	add	r7, sp, #0
 800beba:	60f8      	str	r0, [r7, #12]
 800bebc:	60b9      	str	r1, [r7, #8]
 800bebe:	607a      	str	r2, [r7, #4]
 800bec0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800bec2:	2300      	movs	r3, #0
 800bec4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d10a      	bne.n	800bee2 <xTimerGenericCommand+0x2e>
	__asm volatile
 800becc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bed0:	f383 8811 	msr	BASEPRI, r3
 800bed4:	f3bf 8f6f 	isb	sy
 800bed8:	f3bf 8f4f 	dsb	sy
 800bedc:	623b      	str	r3, [r7, #32]
}
 800bede:	bf00      	nop
 800bee0:	e7fe      	b.n	800bee0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800bee2:	4b1a      	ldr	r3, [pc, #104]	; (800bf4c <xTimerGenericCommand+0x98>)
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d02a      	beq.n	800bf40 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800beea:	68bb      	ldr	r3, [r7, #8]
 800beec:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800bef2:	68fb      	ldr	r3, [r7, #12]
 800bef4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800bef6:	68bb      	ldr	r3, [r7, #8]
 800bef8:	2b05      	cmp	r3, #5
 800befa:	dc18      	bgt.n	800bf2e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800befc:	f7ff fdb4 	bl	800ba68 <xTaskGetSchedulerState>
 800bf00:	4603      	mov	r3, r0
 800bf02:	2b02      	cmp	r3, #2
 800bf04:	d109      	bne.n	800bf1a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800bf06:	4b11      	ldr	r3, [pc, #68]	; (800bf4c <xTimerGenericCommand+0x98>)
 800bf08:	6818      	ldr	r0, [r3, #0]
 800bf0a:	f107 0110 	add.w	r1, r7, #16
 800bf0e:	2300      	movs	r3, #0
 800bf10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bf12:	f7fe f8e9 	bl	800a0e8 <xQueueGenericSend>
 800bf16:	6278      	str	r0, [r7, #36]	; 0x24
 800bf18:	e012      	b.n	800bf40 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800bf1a:	4b0c      	ldr	r3, [pc, #48]	; (800bf4c <xTimerGenericCommand+0x98>)
 800bf1c:	6818      	ldr	r0, [r3, #0]
 800bf1e:	f107 0110 	add.w	r1, r7, #16
 800bf22:	2300      	movs	r3, #0
 800bf24:	2200      	movs	r2, #0
 800bf26:	f7fe f8df 	bl	800a0e8 <xQueueGenericSend>
 800bf2a:	6278      	str	r0, [r7, #36]	; 0x24
 800bf2c:	e008      	b.n	800bf40 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800bf2e:	4b07      	ldr	r3, [pc, #28]	; (800bf4c <xTimerGenericCommand+0x98>)
 800bf30:	6818      	ldr	r0, [r3, #0]
 800bf32:	f107 0110 	add.w	r1, r7, #16
 800bf36:	2300      	movs	r3, #0
 800bf38:	683a      	ldr	r2, [r7, #0]
 800bf3a:	f7fe f9d3 	bl	800a2e4 <xQueueGenericSendFromISR>
 800bf3e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800bf40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800bf42:	4618      	mov	r0, r3
 800bf44:	3728      	adds	r7, #40	; 0x28
 800bf46:	46bd      	mov	sp, r7
 800bf48:	bd80      	pop	{r7, pc}
 800bf4a:	bf00      	nop
 800bf4c:	200010ac 	.word	0x200010ac

0800bf50 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800bf50:	b580      	push	{r7, lr}
 800bf52:	b088      	sub	sp, #32
 800bf54:	af02      	add	r7, sp, #8
 800bf56:	6078      	str	r0, [r7, #4]
 800bf58:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bf5a:	4b22      	ldr	r3, [pc, #136]	; (800bfe4 <prvProcessExpiredTimer+0x94>)
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	68db      	ldr	r3, [r3, #12]
 800bf60:	68db      	ldr	r3, [r3, #12]
 800bf62:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bf64:	697b      	ldr	r3, [r7, #20]
 800bf66:	3304      	adds	r3, #4
 800bf68:	4618      	mov	r0, r3
 800bf6a:	f7fd fe9f 	bl	8009cac <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bf6e:	697b      	ldr	r3, [r7, #20]
 800bf70:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bf74:	f003 0304 	and.w	r3, r3, #4
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d022      	beq.n	800bfc2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800bf7c:	697b      	ldr	r3, [r7, #20]
 800bf7e:	699a      	ldr	r2, [r3, #24]
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	18d1      	adds	r1, r2, r3
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	683a      	ldr	r2, [r7, #0]
 800bf88:	6978      	ldr	r0, [r7, #20]
 800bf8a:	f000 f8d1 	bl	800c130 <prvInsertTimerInActiveList>
 800bf8e:	4603      	mov	r3, r0
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	d01f      	beq.n	800bfd4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bf94:	2300      	movs	r3, #0
 800bf96:	9300      	str	r3, [sp, #0]
 800bf98:	2300      	movs	r3, #0
 800bf9a:	687a      	ldr	r2, [r7, #4]
 800bf9c:	2100      	movs	r1, #0
 800bf9e:	6978      	ldr	r0, [r7, #20]
 800bfa0:	f7ff ff88 	bl	800beb4 <xTimerGenericCommand>
 800bfa4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800bfa6:	693b      	ldr	r3, [r7, #16]
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d113      	bne.n	800bfd4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800bfac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfb0:	f383 8811 	msr	BASEPRI, r3
 800bfb4:	f3bf 8f6f 	isb	sy
 800bfb8:	f3bf 8f4f 	dsb	sy
 800bfbc:	60fb      	str	r3, [r7, #12]
}
 800bfbe:	bf00      	nop
 800bfc0:	e7fe      	b.n	800bfc0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bfc2:	697b      	ldr	r3, [r7, #20]
 800bfc4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bfc8:	f023 0301 	bic.w	r3, r3, #1
 800bfcc:	b2da      	uxtb	r2, r3
 800bfce:	697b      	ldr	r3, [r7, #20]
 800bfd0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bfd4:	697b      	ldr	r3, [r7, #20]
 800bfd6:	6a1b      	ldr	r3, [r3, #32]
 800bfd8:	6978      	ldr	r0, [r7, #20]
 800bfda:	4798      	blx	r3
}
 800bfdc:	bf00      	nop
 800bfde:	3718      	adds	r7, #24
 800bfe0:	46bd      	mov	sp, r7
 800bfe2:	bd80      	pop	{r7, pc}
 800bfe4:	200010a4 	.word	0x200010a4

0800bfe8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800bfe8:	b580      	push	{r7, lr}
 800bfea:	b084      	sub	sp, #16
 800bfec:	af00      	add	r7, sp, #0
 800bfee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bff0:	f107 0308 	add.w	r3, r7, #8
 800bff4:	4618      	mov	r0, r3
 800bff6:	f000 f857 	bl	800c0a8 <prvGetNextExpireTime>
 800bffa:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800bffc:	68bb      	ldr	r3, [r7, #8]
 800bffe:	4619      	mov	r1, r3
 800c000:	68f8      	ldr	r0, [r7, #12]
 800c002:	f000 f803 	bl	800c00c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c006:	f000 f8d5 	bl	800c1b4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c00a:	e7f1      	b.n	800bff0 <prvTimerTask+0x8>

0800c00c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c00c:	b580      	push	{r7, lr}
 800c00e:	b084      	sub	sp, #16
 800c010:	af00      	add	r7, sp, #0
 800c012:	6078      	str	r0, [r7, #4]
 800c014:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c016:	f7ff f929 	bl	800b26c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c01a:	f107 0308 	add.w	r3, r7, #8
 800c01e:	4618      	mov	r0, r3
 800c020:	f000 f866 	bl	800c0f0 <prvSampleTimeNow>
 800c024:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c026:	68bb      	ldr	r3, [r7, #8]
 800c028:	2b00      	cmp	r3, #0
 800c02a:	d130      	bne.n	800c08e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c02c:	683b      	ldr	r3, [r7, #0]
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d10a      	bne.n	800c048 <prvProcessTimerOrBlockTask+0x3c>
 800c032:	687a      	ldr	r2, [r7, #4]
 800c034:	68fb      	ldr	r3, [r7, #12]
 800c036:	429a      	cmp	r2, r3
 800c038:	d806      	bhi.n	800c048 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c03a:	f7ff f925 	bl	800b288 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c03e:	68f9      	ldr	r1, [r7, #12]
 800c040:	6878      	ldr	r0, [r7, #4]
 800c042:	f7ff ff85 	bl	800bf50 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c046:	e024      	b.n	800c092 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c048:	683b      	ldr	r3, [r7, #0]
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d008      	beq.n	800c060 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c04e:	4b13      	ldr	r3, [pc, #76]	; (800c09c <prvProcessTimerOrBlockTask+0x90>)
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	2b00      	cmp	r3, #0
 800c056:	d101      	bne.n	800c05c <prvProcessTimerOrBlockTask+0x50>
 800c058:	2301      	movs	r3, #1
 800c05a:	e000      	b.n	800c05e <prvProcessTimerOrBlockTask+0x52>
 800c05c:	2300      	movs	r3, #0
 800c05e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c060:	4b0f      	ldr	r3, [pc, #60]	; (800c0a0 <prvProcessTimerOrBlockTask+0x94>)
 800c062:	6818      	ldr	r0, [r3, #0]
 800c064:	687a      	ldr	r2, [r7, #4]
 800c066:	68fb      	ldr	r3, [r7, #12]
 800c068:	1ad3      	subs	r3, r2, r3
 800c06a:	683a      	ldr	r2, [r7, #0]
 800c06c:	4619      	mov	r1, r3
 800c06e:	f7fe fe6d 	bl	800ad4c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c072:	f7ff f909 	bl	800b288 <xTaskResumeAll>
 800c076:	4603      	mov	r3, r0
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d10a      	bne.n	800c092 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c07c:	4b09      	ldr	r3, [pc, #36]	; (800c0a4 <prvProcessTimerOrBlockTask+0x98>)
 800c07e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c082:	601a      	str	r2, [r3, #0]
 800c084:	f3bf 8f4f 	dsb	sy
 800c088:	f3bf 8f6f 	isb	sy
}
 800c08c:	e001      	b.n	800c092 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c08e:	f7ff f8fb 	bl	800b288 <xTaskResumeAll>
}
 800c092:	bf00      	nop
 800c094:	3710      	adds	r7, #16
 800c096:	46bd      	mov	sp, r7
 800c098:	bd80      	pop	{r7, pc}
 800c09a:	bf00      	nop
 800c09c:	200010a8 	.word	0x200010a8
 800c0a0:	200010ac 	.word	0x200010ac
 800c0a4:	e000ed04 	.word	0xe000ed04

0800c0a8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c0a8:	b480      	push	{r7}
 800c0aa:	b085      	sub	sp, #20
 800c0ac:	af00      	add	r7, sp, #0
 800c0ae:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c0b0:	4b0e      	ldr	r3, [pc, #56]	; (800c0ec <prvGetNextExpireTime+0x44>)
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d101      	bne.n	800c0be <prvGetNextExpireTime+0x16>
 800c0ba:	2201      	movs	r2, #1
 800c0bc:	e000      	b.n	800c0c0 <prvGetNextExpireTime+0x18>
 800c0be:	2200      	movs	r2, #0
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d105      	bne.n	800c0d8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c0cc:	4b07      	ldr	r3, [pc, #28]	; (800c0ec <prvGetNextExpireTime+0x44>)
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	68db      	ldr	r3, [r3, #12]
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	60fb      	str	r3, [r7, #12]
 800c0d6:	e001      	b.n	800c0dc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c0d8:	2300      	movs	r3, #0
 800c0da:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c0dc:	68fb      	ldr	r3, [r7, #12]
}
 800c0de:	4618      	mov	r0, r3
 800c0e0:	3714      	adds	r7, #20
 800c0e2:	46bd      	mov	sp, r7
 800c0e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0e8:	4770      	bx	lr
 800c0ea:	bf00      	nop
 800c0ec:	200010a4 	.word	0x200010a4

0800c0f0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c0f0:	b580      	push	{r7, lr}
 800c0f2:	b084      	sub	sp, #16
 800c0f4:	af00      	add	r7, sp, #0
 800c0f6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c0f8:	f7ff f964 	bl	800b3c4 <xTaskGetTickCount>
 800c0fc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c0fe:	4b0b      	ldr	r3, [pc, #44]	; (800c12c <prvSampleTimeNow+0x3c>)
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	68fa      	ldr	r2, [r7, #12]
 800c104:	429a      	cmp	r2, r3
 800c106:	d205      	bcs.n	800c114 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c108:	f000 f936 	bl	800c378 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	2201      	movs	r2, #1
 800c110:	601a      	str	r2, [r3, #0]
 800c112:	e002      	b.n	800c11a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	2200      	movs	r2, #0
 800c118:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c11a:	4a04      	ldr	r2, [pc, #16]	; (800c12c <prvSampleTimeNow+0x3c>)
 800c11c:	68fb      	ldr	r3, [r7, #12]
 800c11e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c120:	68fb      	ldr	r3, [r7, #12]
}
 800c122:	4618      	mov	r0, r3
 800c124:	3710      	adds	r7, #16
 800c126:	46bd      	mov	sp, r7
 800c128:	bd80      	pop	{r7, pc}
 800c12a:	bf00      	nop
 800c12c:	200010b4 	.word	0x200010b4

0800c130 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c130:	b580      	push	{r7, lr}
 800c132:	b086      	sub	sp, #24
 800c134:	af00      	add	r7, sp, #0
 800c136:	60f8      	str	r0, [r7, #12]
 800c138:	60b9      	str	r1, [r7, #8]
 800c13a:	607a      	str	r2, [r7, #4]
 800c13c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c13e:	2300      	movs	r3, #0
 800c140:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c142:	68fb      	ldr	r3, [r7, #12]
 800c144:	68ba      	ldr	r2, [r7, #8]
 800c146:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c148:	68fb      	ldr	r3, [r7, #12]
 800c14a:	68fa      	ldr	r2, [r7, #12]
 800c14c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c14e:	68ba      	ldr	r2, [r7, #8]
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	429a      	cmp	r2, r3
 800c154:	d812      	bhi.n	800c17c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c156:	687a      	ldr	r2, [r7, #4]
 800c158:	683b      	ldr	r3, [r7, #0]
 800c15a:	1ad2      	subs	r2, r2, r3
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	699b      	ldr	r3, [r3, #24]
 800c160:	429a      	cmp	r2, r3
 800c162:	d302      	bcc.n	800c16a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c164:	2301      	movs	r3, #1
 800c166:	617b      	str	r3, [r7, #20]
 800c168:	e01b      	b.n	800c1a2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c16a:	4b10      	ldr	r3, [pc, #64]	; (800c1ac <prvInsertTimerInActiveList+0x7c>)
 800c16c:	681a      	ldr	r2, [r3, #0]
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	3304      	adds	r3, #4
 800c172:	4619      	mov	r1, r3
 800c174:	4610      	mov	r0, r2
 800c176:	f7fd fd60 	bl	8009c3a <vListInsert>
 800c17a:	e012      	b.n	800c1a2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c17c:	687a      	ldr	r2, [r7, #4]
 800c17e:	683b      	ldr	r3, [r7, #0]
 800c180:	429a      	cmp	r2, r3
 800c182:	d206      	bcs.n	800c192 <prvInsertTimerInActiveList+0x62>
 800c184:	68ba      	ldr	r2, [r7, #8]
 800c186:	683b      	ldr	r3, [r7, #0]
 800c188:	429a      	cmp	r2, r3
 800c18a:	d302      	bcc.n	800c192 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c18c:	2301      	movs	r3, #1
 800c18e:	617b      	str	r3, [r7, #20]
 800c190:	e007      	b.n	800c1a2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c192:	4b07      	ldr	r3, [pc, #28]	; (800c1b0 <prvInsertTimerInActiveList+0x80>)
 800c194:	681a      	ldr	r2, [r3, #0]
 800c196:	68fb      	ldr	r3, [r7, #12]
 800c198:	3304      	adds	r3, #4
 800c19a:	4619      	mov	r1, r3
 800c19c:	4610      	mov	r0, r2
 800c19e:	f7fd fd4c 	bl	8009c3a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c1a2:	697b      	ldr	r3, [r7, #20]
}
 800c1a4:	4618      	mov	r0, r3
 800c1a6:	3718      	adds	r7, #24
 800c1a8:	46bd      	mov	sp, r7
 800c1aa:	bd80      	pop	{r7, pc}
 800c1ac:	200010a8 	.word	0x200010a8
 800c1b0:	200010a4 	.word	0x200010a4

0800c1b4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c1b4:	b580      	push	{r7, lr}
 800c1b6:	b08e      	sub	sp, #56	; 0x38
 800c1b8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c1ba:	e0ca      	b.n	800c352 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	da18      	bge.n	800c1f4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c1c2:	1d3b      	adds	r3, r7, #4
 800c1c4:	3304      	adds	r3, #4
 800c1c6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c1c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d10a      	bne.n	800c1e4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800c1ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1d2:	f383 8811 	msr	BASEPRI, r3
 800c1d6:	f3bf 8f6f 	isb	sy
 800c1da:	f3bf 8f4f 	dsb	sy
 800c1de:	61fb      	str	r3, [r7, #28]
}
 800c1e0:	bf00      	nop
 800c1e2:	e7fe      	b.n	800c1e2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c1e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c1ea:	6850      	ldr	r0, [r2, #4]
 800c1ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c1ee:	6892      	ldr	r2, [r2, #8]
 800c1f0:	4611      	mov	r1, r2
 800c1f2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	f2c0 80aa 	blt.w	800c350 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c1fc:	68fb      	ldr	r3, [r7, #12]
 800c1fe:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c202:	695b      	ldr	r3, [r3, #20]
 800c204:	2b00      	cmp	r3, #0
 800c206:	d004      	beq.n	800c212 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c20a:	3304      	adds	r3, #4
 800c20c:	4618      	mov	r0, r3
 800c20e:	f7fd fd4d 	bl	8009cac <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c212:	463b      	mov	r3, r7
 800c214:	4618      	mov	r0, r3
 800c216:	f7ff ff6b 	bl	800c0f0 <prvSampleTimeNow>
 800c21a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	2b09      	cmp	r3, #9
 800c220:	f200 8097 	bhi.w	800c352 <prvProcessReceivedCommands+0x19e>
 800c224:	a201      	add	r2, pc, #4	; (adr r2, 800c22c <prvProcessReceivedCommands+0x78>)
 800c226:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c22a:	bf00      	nop
 800c22c:	0800c255 	.word	0x0800c255
 800c230:	0800c255 	.word	0x0800c255
 800c234:	0800c255 	.word	0x0800c255
 800c238:	0800c2c9 	.word	0x0800c2c9
 800c23c:	0800c2dd 	.word	0x0800c2dd
 800c240:	0800c327 	.word	0x0800c327
 800c244:	0800c255 	.word	0x0800c255
 800c248:	0800c255 	.word	0x0800c255
 800c24c:	0800c2c9 	.word	0x0800c2c9
 800c250:	0800c2dd 	.word	0x0800c2dd
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c256:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c25a:	f043 0301 	orr.w	r3, r3, #1
 800c25e:	b2da      	uxtb	r2, r3
 800c260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c262:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c266:	68ba      	ldr	r2, [r7, #8]
 800c268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c26a:	699b      	ldr	r3, [r3, #24]
 800c26c:	18d1      	adds	r1, r2, r3
 800c26e:	68bb      	ldr	r3, [r7, #8]
 800c270:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c272:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c274:	f7ff ff5c 	bl	800c130 <prvInsertTimerInActiveList>
 800c278:	4603      	mov	r3, r0
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	d069      	beq.n	800c352 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c27e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c280:	6a1b      	ldr	r3, [r3, #32]
 800c282:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c284:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c288:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c28c:	f003 0304 	and.w	r3, r3, #4
 800c290:	2b00      	cmp	r3, #0
 800c292:	d05e      	beq.n	800c352 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c294:	68ba      	ldr	r2, [r7, #8]
 800c296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c298:	699b      	ldr	r3, [r3, #24]
 800c29a:	441a      	add	r2, r3
 800c29c:	2300      	movs	r3, #0
 800c29e:	9300      	str	r3, [sp, #0]
 800c2a0:	2300      	movs	r3, #0
 800c2a2:	2100      	movs	r1, #0
 800c2a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c2a6:	f7ff fe05 	bl	800beb4 <xTimerGenericCommand>
 800c2aa:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c2ac:	6a3b      	ldr	r3, [r7, #32]
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d14f      	bne.n	800c352 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800c2b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2b6:	f383 8811 	msr	BASEPRI, r3
 800c2ba:	f3bf 8f6f 	isb	sy
 800c2be:	f3bf 8f4f 	dsb	sy
 800c2c2:	61bb      	str	r3, [r7, #24]
}
 800c2c4:	bf00      	nop
 800c2c6:	e7fe      	b.n	800c2c6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c2c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2ca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c2ce:	f023 0301 	bic.w	r3, r3, #1
 800c2d2:	b2da      	uxtb	r2, r3
 800c2d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2d6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800c2da:	e03a      	b.n	800c352 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c2dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2de:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c2e2:	f043 0301 	orr.w	r3, r3, #1
 800c2e6:	b2da      	uxtb	r2, r3
 800c2e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2ea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c2ee:	68ba      	ldr	r2, [r7, #8]
 800c2f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2f2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c2f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2f6:	699b      	ldr	r3, [r3, #24]
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	d10a      	bne.n	800c312 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800c2fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c300:	f383 8811 	msr	BASEPRI, r3
 800c304:	f3bf 8f6f 	isb	sy
 800c308:	f3bf 8f4f 	dsb	sy
 800c30c:	617b      	str	r3, [r7, #20]
}
 800c30e:	bf00      	nop
 800c310:	e7fe      	b.n	800c310 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c314:	699a      	ldr	r2, [r3, #24]
 800c316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c318:	18d1      	adds	r1, r2, r3
 800c31a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c31c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c31e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c320:	f7ff ff06 	bl	800c130 <prvInsertTimerInActiveList>
					break;
 800c324:	e015      	b.n	800c352 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c328:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c32c:	f003 0302 	and.w	r3, r3, #2
 800c330:	2b00      	cmp	r3, #0
 800c332:	d103      	bne.n	800c33c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800c334:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c336:	f000 fbdb 	bl	800caf0 <vPortFree>
 800c33a:	e00a      	b.n	800c352 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c33c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c33e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c342:	f023 0301 	bic.w	r3, r3, #1
 800c346:	b2da      	uxtb	r2, r3
 800c348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c34a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c34e:	e000      	b.n	800c352 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800c350:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c352:	4b08      	ldr	r3, [pc, #32]	; (800c374 <prvProcessReceivedCommands+0x1c0>)
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	1d39      	adds	r1, r7, #4
 800c358:	2200      	movs	r2, #0
 800c35a:	4618      	mov	r0, r3
 800c35c:	f7fe f8ea 	bl	800a534 <xQueueReceive>
 800c360:	4603      	mov	r3, r0
 800c362:	2b00      	cmp	r3, #0
 800c364:	f47f af2a 	bne.w	800c1bc <prvProcessReceivedCommands+0x8>
	}
}
 800c368:	bf00      	nop
 800c36a:	bf00      	nop
 800c36c:	3730      	adds	r7, #48	; 0x30
 800c36e:	46bd      	mov	sp, r7
 800c370:	bd80      	pop	{r7, pc}
 800c372:	bf00      	nop
 800c374:	200010ac 	.word	0x200010ac

0800c378 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c378:	b580      	push	{r7, lr}
 800c37a:	b088      	sub	sp, #32
 800c37c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c37e:	e048      	b.n	800c412 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c380:	4b2d      	ldr	r3, [pc, #180]	; (800c438 <prvSwitchTimerLists+0xc0>)
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	68db      	ldr	r3, [r3, #12]
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c38a:	4b2b      	ldr	r3, [pc, #172]	; (800c438 <prvSwitchTimerLists+0xc0>)
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	68db      	ldr	r3, [r3, #12]
 800c390:	68db      	ldr	r3, [r3, #12]
 800c392:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c394:	68fb      	ldr	r3, [r7, #12]
 800c396:	3304      	adds	r3, #4
 800c398:	4618      	mov	r0, r3
 800c39a:	f7fd fc87 	bl	8009cac <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	6a1b      	ldr	r3, [r3, #32]
 800c3a2:	68f8      	ldr	r0, [r7, #12]
 800c3a4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c3ac:	f003 0304 	and.w	r3, r3, #4
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	d02e      	beq.n	800c412 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c3b4:	68fb      	ldr	r3, [r7, #12]
 800c3b6:	699b      	ldr	r3, [r3, #24]
 800c3b8:	693a      	ldr	r2, [r7, #16]
 800c3ba:	4413      	add	r3, r2
 800c3bc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c3be:	68ba      	ldr	r2, [r7, #8]
 800c3c0:	693b      	ldr	r3, [r7, #16]
 800c3c2:	429a      	cmp	r2, r3
 800c3c4:	d90e      	bls.n	800c3e4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c3c6:	68fb      	ldr	r3, [r7, #12]
 800c3c8:	68ba      	ldr	r2, [r7, #8]
 800c3ca:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c3cc:	68fb      	ldr	r3, [r7, #12]
 800c3ce:	68fa      	ldr	r2, [r7, #12]
 800c3d0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c3d2:	4b19      	ldr	r3, [pc, #100]	; (800c438 <prvSwitchTimerLists+0xc0>)
 800c3d4:	681a      	ldr	r2, [r3, #0]
 800c3d6:	68fb      	ldr	r3, [r7, #12]
 800c3d8:	3304      	adds	r3, #4
 800c3da:	4619      	mov	r1, r3
 800c3dc:	4610      	mov	r0, r2
 800c3de:	f7fd fc2c 	bl	8009c3a <vListInsert>
 800c3e2:	e016      	b.n	800c412 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c3e4:	2300      	movs	r3, #0
 800c3e6:	9300      	str	r3, [sp, #0]
 800c3e8:	2300      	movs	r3, #0
 800c3ea:	693a      	ldr	r2, [r7, #16]
 800c3ec:	2100      	movs	r1, #0
 800c3ee:	68f8      	ldr	r0, [r7, #12]
 800c3f0:	f7ff fd60 	bl	800beb4 <xTimerGenericCommand>
 800c3f4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	d10a      	bne.n	800c412 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800c3fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c400:	f383 8811 	msr	BASEPRI, r3
 800c404:	f3bf 8f6f 	isb	sy
 800c408:	f3bf 8f4f 	dsb	sy
 800c40c:	603b      	str	r3, [r7, #0]
}
 800c40e:	bf00      	nop
 800c410:	e7fe      	b.n	800c410 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c412:	4b09      	ldr	r3, [pc, #36]	; (800c438 <prvSwitchTimerLists+0xc0>)
 800c414:	681b      	ldr	r3, [r3, #0]
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d1b1      	bne.n	800c380 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c41c:	4b06      	ldr	r3, [pc, #24]	; (800c438 <prvSwitchTimerLists+0xc0>)
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c422:	4b06      	ldr	r3, [pc, #24]	; (800c43c <prvSwitchTimerLists+0xc4>)
 800c424:	681b      	ldr	r3, [r3, #0]
 800c426:	4a04      	ldr	r2, [pc, #16]	; (800c438 <prvSwitchTimerLists+0xc0>)
 800c428:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c42a:	4a04      	ldr	r2, [pc, #16]	; (800c43c <prvSwitchTimerLists+0xc4>)
 800c42c:	697b      	ldr	r3, [r7, #20]
 800c42e:	6013      	str	r3, [r2, #0]
}
 800c430:	bf00      	nop
 800c432:	3718      	adds	r7, #24
 800c434:	46bd      	mov	sp, r7
 800c436:	bd80      	pop	{r7, pc}
 800c438:	200010a4 	.word	0x200010a4
 800c43c:	200010a8 	.word	0x200010a8

0800c440 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c440:	b580      	push	{r7, lr}
 800c442:	b082      	sub	sp, #8
 800c444:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c446:	f000 f965 	bl	800c714 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c44a:	4b15      	ldr	r3, [pc, #84]	; (800c4a0 <prvCheckForValidListAndQueue+0x60>)
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d120      	bne.n	800c494 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c452:	4814      	ldr	r0, [pc, #80]	; (800c4a4 <prvCheckForValidListAndQueue+0x64>)
 800c454:	f7fd fba0 	bl	8009b98 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c458:	4813      	ldr	r0, [pc, #76]	; (800c4a8 <prvCheckForValidListAndQueue+0x68>)
 800c45a:	f7fd fb9d 	bl	8009b98 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c45e:	4b13      	ldr	r3, [pc, #76]	; (800c4ac <prvCheckForValidListAndQueue+0x6c>)
 800c460:	4a10      	ldr	r2, [pc, #64]	; (800c4a4 <prvCheckForValidListAndQueue+0x64>)
 800c462:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c464:	4b12      	ldr	r3, [pc, #72]	; (800c4b0 <prvCheckForValidListAndQueue+0x70>)
 800c466:	4a10      	ldr	r2, [pc, #64]	; (800c4a8 <prvCheckForValidListAndQueue+0x68>)
 800c468:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c46a:	2300      	movs	r3, #0
 800c46c:	9300      	str	r3, [sp, #0]
 800c46e:	4b11      	ldr	r3, [pc, #68]	; (800c4b4 <prvCheckForValidListAndQueue+0x74>)
 800c470:	4a11      	ldr	r2, [pc, #68]	; (800c4b8 <prvCheckForValidListAndQueue+0x78>)
 800c472:	2110      	movs	r1, #16
 800c474:	200a      	movs	r0, #10
 800c476:	f7fd fcab 	bl	8009dd0 <xQueueGenericCreateStatic>
 800c47a:	4603      	mov	r3, r0
 800c47c:	4a08      	ldr	r2, [pc, #32]	; (800c4a0 <prvCheckForValidListAndQueue+0x60>)
 800c47e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c480:	4b07      	ldr	r3, [pc, #28]	; (800c4a0 <prvCheckForValidListAndQueue+0x60>)
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	2b00      	cmp	r3, #0
 800c486:	d005      	beq.n	800c494 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c488:	4b05      	ldr	r3, [pc, #20]	; (800c4a0 <prvCheckForValidListAndQueue+0x60>)
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	490b      	ldr	r1, [pc, #44]	; (800c4bc <prvCheckForValidListAndQueue+0x7c>)
 800c48e:	4618      	mov	r0, r3
 800c490:	f7fe fc08 	bl	800aca4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c494:	f000 f96e 	bl	800c774 <vPortExitCritical>
}
 800c498:	bf00      	nop
 800c49a:	46bd      	mov	sp, r7
 800c49c:	bd80      	pop	{r7, pc}
 800c49e:	bf00      	nop
 800c4a0:	200010ac 	.word	0x200010ac
 800c4a4:	2000107c 	.word	0x2000107c
 800c4a8:	20001090 	.word	0x20001090
 800c4ac:	200010a4 	.word	0x200010a4
 800c4b0:	200010a8 	.word	0x200010a8
 800c4b4:	20001158 	.word	0x20001158
 800c4b8:	200010b8 	.word	0x200010b8
 800c4bc:	0800cf88 	.word	0x0800cf88

0800c4c0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c4c0:	b480      	push	{r7}
 800c4c2:	b085      	sub	sp, #20
 800c4c4:	af00      	add	r7, sp, #0
 800c4c6:	60f8      	str	r0, [r7, #12]
 800c4c8:	60b9      	str	r1, [r7, #8]
 800c4ca:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c4cc:	68fb      	ldr	r3, [r7, #12]
 800c4ce:	3b04      	subs	r3, #4
 800c4d0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c4d2:	68fb      	ldr	r3, [r7, #12]
 800c4d4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c4d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c4da:	68fb      	ldr	r3, [r7, #12]
 800c4dc:	3b04      	subs	r3, #4
 800c4de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c4e0:	68bb      	ldr	r3, [r7, #8]
 800c4e2:	f023 0201 	bic.w	r2, r3, #1
 800c4e6:	68fb      	ldr	r3, [r7, #12]
 800c4e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c4ea:	68fb      	ldr	r3, [r7, #12]
 800c4ec:	3b04      	subs	r3, #4
 800c4ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c4f0:	4a0c      	ldr	r2, [pc, #48]	; (800c524 <pxPortInitialiseStack+0x64>)
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c4f6:	68fb      	ldr	r3, [r7, #12]
 800c4f8:	3b14      	subs	r3, #20
 800c4fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c4fc:	687a      	ldr	r2, [r7, #4]
 800c4fe:	68fb      	ldr	r3, [r7, #12]
 800c500:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c502:	68fb      	ldr	r3, [r7, #12]
 800c504:	3b04      	subs	r3, #4
 800c506:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c508:	68fb      	ldr	r3, [r7, #12]
 800c50a:	f06f 0202 	mvn.w	r2, #2
 800c50e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c510:	68fb      	ldr	r3, [r7, #12]
 800c512:	3b20      	subs	r3, #32
 800c514:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c516:	68fb      	ldr	r3, [r7, #12]
}
 800c518:	4618      	mov	r0, r3
 800c51a:	3714      	adds	r7, #20
 800c51c:	46bd      	mov	sp, r7
 800c51e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c522:	4770      	bx	lr
 800c524:	0800c529 	.word	0x0800c529

0800c528 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c528:	b480      	push	{r7}
 800c52a:	b085      	sub	sp, #20
 800c52c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c52e:	2300      	movs	r3, #0
 800c530:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c532:	4b12      	ldr	r3, [pc, #72]	; (800c57c <prvTaskExitError+0x54>)
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c53a:	d00a      	beq.n	800c552 <prvTaskExitError+0x2a>
	__asm volatile
 800c53c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c540:	f383 8811 	msr	BASEPRI, r3
 800c544:	f3bf 8f6f 	isb	sy
 800c548:	f3bf 8f4f 	dsb	sy
 800c54c:	60fb      	str	r3, [r7, #12]
}
 800c54e:	bf00      	nop
 800c550:	e7fe      	b.n	800c550 <prvTaskExitError+0x28>
	__asm volatile
 800c552:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c556:	f383 8811 	msr	BASEPRI, r3
 800c55a:	f3bf 8f6f 	isb	sy
 800c55e:	f3bf 8f4f 	dsb	sy
 800c562:	60bb      	str	r3, [r7, #8]
}
 800c564:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c566:	bf00      	nop
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d0fc      	beq.n	800c568 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c56e:	bf00      	nop
 800c570:	bf00      	nop
 800c572:	3714      	adds	r7, #20
 800c574:	46bd      	mov	sp, r7
 800c576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c57a:	4770      	bx	lr
 800c57c:	2000000c 	.word	0x2000000c

0800c580 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c580:	4b07      	ldr	r3, [pc, #28]	; (800c5a0 <pxCurrentTCBConst2>)
 800c582:	6819      	ldr	r1, [r3, #0]
 800c584:	6808      	ldr	r0, [r1, #0]
 800c586:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c58a:	f380 8809 	msr	PSP, r0
 800c58e:	f3bf 8f6f 	isb	sy
 800c592:	f04f 0000 	mov.w	r0, #0
 800c596:	f380 8811 	msr	BASEPRI, r0
 800c59a:	4770      	bx	lr
 800c59c:	f3af 8000 	nop.w

0800c5a0 <pxCurrentTCBConst2>:
 800c5a0:	20000b7c 	.word	0x20000b7c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c5a4:	bf00      	nop
 800c5a6:	bf00      	nop

0800c5a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c5a8:	4808      	ldr	r0, [pc, #32]	; (800c5cc <prvPortStartFirstTask+0x24>)
 800c5aa:	6800      	ldr	r0, [r0, #0]
 800c5ac:	6800      	ldr	r0, [r0, #0]
 800c5ae:	f380 8808 	msr	MSP, r0
 800c5b2:	f04f 0000 	mov.w	r0, #0
 800c5b6:	f380 8814 	msr	CONTROL, r0
 800c5ba:	b662      	cpsie	i
 800c5bc:	b661      	cpsie	f
 800c5be:	f3bf 8f4f 	dsb	sy
 800c5c2:	f3bf 8f6f 	isb	sy
 800c5c6:	df00      	svc	0
 800c5c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c5ca:	bf00      	nop
 800c5cc:	e000ed08 	.word	0xe000ed08

0800c5d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c5d0:	b580      	push	{r7, lr}
 800c5d2:	b086      	sub	sp, #24
 800c5d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c5d6:	4b46      	ldr	r3, [pc, #280]	; (800c6f0 <xPortStartScheduler+0x120>)
 800c5d8:	681b      	ldr	r3, [r3, #0]
 800c5da:	4a46      	ldr	r2, [pc, #280]	; (800c6f4 <xPortStartScheduler+0x124>)
 800c5dc:	4293      	cmp	r3, r2
 800c5de:	d10a      	bne.n	800c5f6 <xPortStartScheduler+0x26>
	__asm volatile
 800c5e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5e4:	f383 8811 	msr	BASEPRI, r3
 800c5e8:	f3bf 8f6f 	isb	sy
 800c5ec:	f3bf 8f4f 	dsb	sy
 800c5f0:	613b      	str	r3, [r7, #16]
}
 800c5f2:	bf00      	nop
 800c5f4:	e7fe      	b.n	800c5f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c5f6:	4b3e      	ldr	r3, [pc, #248]	; (800c6f0 <xPortStartScheduler+0x120>)
 800c5f8:	681b      	ldr	r3, [r3, #0]
 800c5fa:	4a3f      	ldr	r2, [pc, #252]	; (800c6f8 <xPortStartScheduler+0x128>)
 800c5fc:	4293      	cmp	r3, r2
 800c5fe:	d10a      	bne.n	800c616 <xPortStartScheduler+0x46>
	__asm volatile
 800c600:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c604:	f383 8811 	msr	BASEPRI, r3
 800c608:	f3bf 8f6f 	isb	sy
 800c60c:	f3bf 8f4f 	dsb	sy
 800c610:	60fb      	str	r3, [r7, #12]
}
 800c612:	bf00      	nop
 800c614:	e7fe      	b.n	800c614 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c616:	4b39      	ldr	r3, [pc, #228]	; (800c6fc <xPortStartScheduler+0x12c>)
 800c618:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c61a:	697b      	ldr	r3, [r7, #20]
 800c61c:	781b      	ldrb	r3, [r3, #0]
 800c61e:	b2db      	uxtb	r3, r3
 800c620:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c622:	697b      	ldr	r3, [r7, #20]
 800c624:	22ff      	movs	r2, #255	; 0xff
 800c626:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c628:	697b      	ldr	r3, [r7, #20]
 800c62a:	781b      	ldrb	r3, [r3, #0]
 800c62c:	b2db      	uxtb	r3, r3
 800c62e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c630:	78fb      	ldrb	r3, [r7, #3]
 800c632:	b2db      	uxtb	r3, r3
 800c634:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c638:	b2da      	uxtb	r2, r3
 800c63a:	4b31      	ldr	r3, [pc, #196]	; (800c700 <xPortStartScheduler+0x130>)
 800c63c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c63e:	4b31      	ldr	r3, [pc, #196]	; (800c704 <xPortStartScheduler+0x134>)
 800c640:	2207      	movs	r2, #7
 800c642:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c644:	e009      	b.n	800c65a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800c646:	4b2f      	ldr	r3, [pc, #188]	; (800c704 <xPortStartScheduler+0x134>)
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	3b01      	subs	r3, #1
 800c64c:	4a2d      	ldr	r2, [pc, #180]	; (800c704 <xPortStartScheduler+0x134>)
 800c64e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c650:	78fb      	ldrb	r3, [r7, #3]
 800c652:	b2db      	uxtb	r3, r3
 800c654:	005b      	lsls	r3, r3, #1
 800c656:	b2db      	uxtb	r3, r3
 800c658:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c65a:	78fb      	ldrb	r3, [r7, #3]
 800c65c:	b2db      	uxtb	r3, r3
 800c65e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c662:	2b80      	cmp	r3, #128	; 0x80
 800c664:	d0ef      	beq.n	800c646 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c666:	4b27      	ldr	r3, [pc, #156]	; (800c704 <xPortStartScheduler+0x134>)
 800c668:	681b      	ldr	r3, [r3, #0]
 800c66a:	f1c3 0307 	rsb	r3, r3, #7
 800c66e:	2b04      	cmp	r3, #4
 800c670:	d00a      	beq.n	800c688 <xPortStartScheduler+0xb8>
	__asm volatile
 800c672:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c676:	f383 8811 	msr	BASEPRI, r3
 800c67a:	f3bf 8f6f 	isb	sy
 800c67e:	f3bf 8f4f 	dsb	sy
 800c682:	60bb      	str	r3, [r7, #8]
}
 800c684:	bf00      	nop
 800c686:	e7fe      	b.n	800c686 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c688:	4b1e      	ldr	r3, [pc, #120]	; (800c704 <xPortStartScheduler+0x134>)
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	021b      	lsls	r3, r3, #8
 800c68e:	4a1d      	ldr	r2, [pc, #116]	; (800c704 <xPortStartScheduler+0x134>)
 800c690:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c692:	4b1c      	ldr	r3, [pc, #112]	; (800c704 <xPortStartScheduler+0x134>)
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c69a:	4a1a      	ldr	r2, [pc, #104]	; (800c704 <xPortStartScheduler+0x134>)
 800c69c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	b2da      	uxtb	r2, r3
 800c6a2:	697b      	ldr	r3, [r7, #20]
 800c6a4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c6a6:	4b18      	ldr	r3, [pc, #96]	; (800c708 <xPortStartScheduler+0x138>)
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	4a17      	ldr	r2, [pc, #92]	; (800c708 <xPortStartScheduler+0x138>)
 800c6ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c6b0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c6b2:	4b15      	ldr	r3, [pc, #84]	; (800c708 <xPortStartScheduler+0x138>)
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	4a14      	ldr	r2, [pc, #80]	; (800c708 <xPortStartScheduler+0x138>)
 800c6b8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c6bc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c6be:	f000 f8dd 	bl	800c87c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c6c2:	4b12      	ldr	r3, [pc, #72]	; (800c70c <xPortStartScheduler+0x13c>)
 800c6c4:	2200      	movs	r2, #0
 800c6c6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c6c8:	f000 f8fc 	bl	800c8c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c6cc:	4b10      	ldr	r3, [pc, #64]	; (800c710 <xPortStartScheduler+0x140>)
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	4a0f      	ldr	r2, [pc, #60]	; (800c710 <xPortStartScheduler+0x140>)
 800c6d2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c6d6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c6d8:	f7ff ff66 	bl	800c5a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c6dc:	f7fe ff4e 	bl	800b57c <vTaskSwitchContext>
	prvTaskExitError();
 800c6e0:	f7ff ff22 	bl	800c528 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c6e4:	2300      	movs	r3, #0
}
 800c6e6:	4618      	mov	r0, r3
 800c6e8:	3718      	adds	r7, #24
 800c6ea:	46bd      	mov	sp, r7
 800c6ec:	bd80      	pop	{r7, pc}
 800c6ee:	bf00      	nop
 800c6f0:	e000ed00 	.word	0xe000ed00
 800c6f4:	410fc271 	.word	0x410fc271
 800c6f8:	410fc270 	.word	0x410fc270
 800c6fc:	e000e400 	.word	0xe000e400
 800c700:	200011a8 	.word	0x200011a8
 800c704:	200011ac 	.word	0x200011ac
 800c708:	e000ed20 	.word	0xe000ed20
 800c70c:	2000000c 	.word	0x2000000c
 800c710:	e000ef34 	.word	0xe000ef34

0800c714 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c714:	b480      	push	{r7}
 800c716:	b083      	sub	sp, #12
 800c718:	af00      	add	r7, sp, #0
	__asm volatile
 800c71a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c71e:	f383 8811 	msr	BASEPRI, r3
 800c722:	f3bf 8f6f 	isb	sy
 800c726:	f3bf 8f4f 	dsb	sy
 800c72a:	607b      	str	r3, [r7, #4]
}
 800c72c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c72e:	4b0f      	ldr	r3, [pc, #60]	; (800c76c <vPortEnterCritical+0x58>)
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	3301      	adds	r3, #1
 800c734:	4a0d      	ldr	r2, [pc, #52]	; (800c76c <vPortEnterCritical+0x58>)
 800c736:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c738:	4b0c      	ldr	r3, [pc, #48]	; (800c76c <vPortEnterCritical+0x58>)
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	2b01      	cmp	r3, #1
 800c73e:	d10f      	bne.n	800c760 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c740:	4b0b      	ldr	r3, [pc, #44]	; (800c770 <vPortEnterCritical+0x5c>)
 800c742:	681b      	ldr	r3, [r3, #0]
 800c744:	b2db      	uxtb	r3, r3
 800c746:	2b00      	cmp	r3, #0
 800c748:	d00a      	beq.n	800c760 <vPortEnterCritical+0x4c>
	__asm volatile
 800c74a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c74e:	f383 8811 	msr	BASEPRI, r3
 800c752:	f3bf 8f6f 	isb	sy
 800c756:	f3bf 8f4f 	dsb	sy
 800c75a:	603b      	str	r3, [r7, #0]
}
 800c75c:	bf00      	nop
 800c75e:	e7fe      	b.n	800c75e <vPortEnterCritical+0x4a>
	}
}
 800c760:	bf00      	nop
 800c762:	370c      	adds	r7, #12
 800c764:	46bd      	mov	sp, r7
 800c766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c76a:	4770      	bx	lr
 800c76c:	2000000c 	.word	0x2000000c
 800c770:	e000ed04 	.word	0xe000ed04

0800c774 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c774:	b480      	push	{r7}
 800c776:	b083      	sub	sp, #12
 800c778:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c77a:	4b12      	ldr	r3, [pc, #72]	; (800c7c4 <vPortExitCritical+0x50>)
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	2b00      	cmp	r3, #0
 800c780:	d10a      	bne.n	800c798 <vPortExitCritical+0x24>
	__asm volatile
 800c782:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c786:	f383 8811 	msr	BASEPRI, r3
 800c78a:	f3bf 8f6f 	isb	sy
 800c78e:	f3bf 8f4f 	dsb	sy
 800c792:	607b      	str	r3, [r7, #4]
}
 800c794:	bf00      	nop
 800c796:	e7fe      	b.n	800c796 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c798:	4b0a      	ldr	r3, [pc, #40]	; (800c7c4 <vPortExitCritical+0x50>)
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	3b01      	subs	r3, #1
 800c79e:	4a09      	ldr	r2, [pc, #36]	; (800c7c4 <vPortExitCritical+0x50>)
 800c7a0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c7a2:	4b08      	ldr	r3, [pc, #32]	; (800c7c4 <vPortExitCritical+0x50>)
 800c7a4:	681b      	ldr	r3, [r3, #0]
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	d105      	bne.n	800c7b6 <vPortExitCritical+0x42>
 800c7aa:	2300      	movs	r3, #0
 800c7ac:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c7ae:	683b      	ldr	r3, [r7, #0]
 800c7b0:	f383 8811 	msr	BASEPRI, r3
}
 800c7b4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c7b6:	bf00      	nop
 800c7b8:	370c      	adds	r7, #12
 800c7ba:	46bd      	mov	sp, r7
 800c7bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7c0:	4770      	bx	lr
 800c7c2:	bf00      	nop
 800c7c4:	2000000c 	.word	0x2000000c
	...

0800c7d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c7d0:	f3ef 8009 	mrs	r0, PSP
 800c7d4:	f3bf 8f6f 	isb	sy
 800c7d8:	4b15      	ldr	r3, [pc, #84]	; (800c830 <pxCurrentTCBConst>)
 800c7da:	681a      	ldr	r2, [r3, #0]
 800c7dc:	f01e 0f10 	tst.w	lr, #16
 800c7e0:	bf08      	it	eq
 800c7e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c7e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7ea:	6010      	str	r0, [r2, #0]
 800c7ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c7f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c7f4:	f380 8811 	msr	BASEPRI, r0
 800c7f8:	f3bf 8f4f 	dsb	sy
 800c7fc:	f3bf 8f6f 	isb	sy
 800c800:	f7fe febc 	bl	800b57c <vTaskSwitchContext>
 800c804:	f04f 0000 	mov.w	r0, #0
 800c808:	f380 8811 	msr	BASEPRI, r0
 800c80c:	bc09      	pop	{r0, r3}
 800c80e:	6819      	ldr	r1, [r3, #0]
 800c810:	6808      	ldr	r0, [r1, #0]
 800c812:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c816:	f01e 0f10 	tst.w	lr, #16
 800c81a:	bf08      	it	eq
 800c81c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c820:	f380 8809 	msr	PSP, r0
 800c824:	f3bf 8f6f 	isb	sy
 800c828:	4770      	bx	lr
 800c82a:	bf00      	nop
 800c82c:	f3af 8000 	nop.w

0800c830 <pxCurrentTCBConst>:
 800c830:	20000b7c 	.word	0x20000b7c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c834:	bf00      	nop
 800c836:	bf00      	nop

0800c838 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c838:	b580      	push	{r7, lr}
 800c83a:	b082      	sub	sp, #8
 800c83c:	af00      	add	r7, sp, #0
	__asm volatile
 800c83e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c842:	f383 8811 	msr	BASEPRI, r3
 800c846:	f3bf 8f6f 	isb	sy
 800c84a:	f3bf 8f4f 	dsb	sy
 800c84e:	607b      	str	r3, [r7, #4]
}
 800c850:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c852:	f7fe fdd9 	bl	800b408 <xTaskIncrementTick>
 800c856:	4603      	mov	r3, r0
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d003      	beq.n	800c864 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c85c:	4b06      	ldr	r3, [pc, #24]	; (800c878 <xPortSysTickHandler+0x40>)
 800c85e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c862:	601a      	str	r2, [r3, #0]
 800c864:	2300      	movs	r3, #0
 800c866:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c868:	683b      	ldr	r3, [r7, #0]
 800c86a:	f383 8811 	msr	BASEPRI, r3
}
 800c86e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c870:	bf00      	nop
 800c872:	3708      	adds	r7, #8
 800c874:	46bd      	mov	sp, r7
 800c876:	bd80      	pop	{r7, pc}
 800c878:	e000ed04 	.word	0xe000ed04

0800c87c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c87c:	b480      	push	{r7}
 800c87e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c880:	4b0b      	ldr	r3, [pc, #44]	; (800c8b0 <vPortSetupTimerInterrupt+0x34>)
 800c882:	2200      	movs	r2, #0
 800c884:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c886:	4b0b      	ldr	r3, [pc, #44]	; (800c8b4 <vPortSetupTimerInterrupt+0x38>)
 800c888:	2200      	movs	r2, #0
 800c88a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c88c:	4b0a      	ldr	r3, [pc, #40]	; (800c8b8 <vPortSetupTimerInterrupt+0x3c>)
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	4a0a      	ldr	r2, [pc, #40]	; (800c8bc <vPortSetupTimerInterrupt+0x40>)
 800c892:	fba2 2303 	umull	r2, r3, r2, r3
 800c896:	099b      	lsrs	r3, r3, #6
 800c898:	4a09      	ldr	r2, [pc, #36]	; (800c8c0 <vPortSetupTimerInterrupt+0x44>)
 800c89a:	3b01      	subs	r3, #1
 800c89c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c89e:	4b04      	ldr	r3, [pc, #16]	; (800c8b0 <vPortSetupTimerInterrupt+0x34>)
 800c8a0:	2207      	movs	r2, #7
 800c8a2:	601a      	str	r2, [r3, #0]
}
 800c8a4:	bf00      	nop
 800c8a6:	46bd      	mov	sp, r7
 800c8a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ac:	4770      	bx	lr
 800c8ae:	bf00      	nop
 800c8b0:	e000e010 	.word	0xe000e010
 800c8b4:	e000e018 	.word	0xe000e018
 800c8b8:	20000000 	.word	0x20000000
 800c8bc:	10624dd3 	.word	0x10624dd3
 800c8c0:	e000e014 	.word	0xe000e014

0800c8c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c8c4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800c8d4 <vPortEnableVFP+0x10>
 800c8c8:	6801      	ldr	r1, [r0, #0]
 800c8ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c8ce:	6001      	str	r1, [r0, #0]
 800c8d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c8d2:	bf00      	nop
 800c8d4:	e000ed88 	.word	0xe000ed88

0800c8d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c8d8:	b480      	push	{r7}
 800c8da:	b085      	sub	sp, #20
 800c8dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c8de:	f3ef 8305 	mrs	r3, IPSR
 800c8e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c8e4:	68fb      	ldr	r3, [r7, #12]
 800c8e6:	2b0f      	cmp	r3, #15
 800c8e8:	d914      	bls.n	800c914 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c8ea:	4a17      	ldr	r2, [pc, #92]	; (800c948 <vPortValidateInterruptPriority+0x70>)
 800c8ec:	68fb      	ldr	r3, [r7, #12]
 800c8ee:	4413      	add	r3, r2
 800c8f0:	781b      	ldrb	r3, [r3, #0]
 800c8f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c8f4:	4b15      	ldr	r3, [pc, #84]	; (800c94c <vPortValidateInterruptPriority+0x74>)
 800c8f6:	781b      	ldrb	r3, [r3, #0]
 800c8f8:	7afa      	ldrb	r2, [r7, #11]
 800c8fa:	429a      	cmp	r2, r3
 800c8fc:	d20a      	bcs.n	800c914 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800c8fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c902:	f383 8811 	msr	BASEPRI, r3
 800c906:	f3bf 8f6f 	isb	sy
 800c90a:	f3bf 8f4f 	dsb	sy
 800c90e:	607b      	str	r3, [r7, #4]
}
 800c910:	bf00      	nop
 800c912:	e7fe      	b.n	800c912 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c914:	4b0e      	ldr	r3, [pc, #56]	; (800c950 <vPortValidateInterruptPriority+0x78>)
 800c916:	681b      	ldr	r3, [r3, #0]
 800c918:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c91c:	4b0d      	ldr	r3, [pc, #52]	; (800c954 <vPortValidateInterruptPriority+0x7c>)
 800c91e:	681b      	ldr	r3, [r3, #0]
 800c920:	429a      	cmp	r2, r3
 800c922:	d90a      	bls.n	800c93a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800c924:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c928:	f383 8811 	msr	BASEPRI, r3
 800c92c:	f3bf 8f6f 	isb	sy
 800c930:	f3bf 8f4f 	dsb	sy
 800c934:	603b      	str	r3, [r7, #0]
}
 800c936:	bf00      	nop
 800c938:	e7fe      	b.n	800c938 <vPortValidateInterruptPriority+0x60>
	}
 800c93a:	bf00      	nop
 800c93c:	3714      	adds	r7, #20
 800c93e:	46bd      	mov	sp, r7
 800c940:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c944:	4770      	bx	lr
 800c946:	bf00      	nop
 800c948:	e000e3f0 	.word	0xe000e3f0
 800c94c:	200011a8 	.word	0x200011a8
 800c950:	e000ed0c 	.word	0xe000ed0c
 800c954:	200011ac 	.word	0x200011ac

0800c958 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c958:	b580      	push	{r7, lr}
 800c95a:	b08a      	sub	sp, #40	; 0x28
 800c95c:	af00      	add	r7, sp, #0
 800c95e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c960:	2300      	movs	r3, #0
 800c962:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c964:	f7fe fc82 	bl	800b26c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c968:	4b5b      	ldr	r3, [pc, #364]	; (800cad8 <pvPortMalloc+0x180>)
 800c96a:	681b      	ldr	r3, [r3, #0]
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	d101      	bne.n	800c974 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c970:	f000 f920 	bl	800cbb4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c974:	4b59      	ldr	r3, [pc, #356]	; (800cadc <pvPortMalloc+0x184>)
 800c976:	681a      	ldr	r2, [r3, #0]
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	4013      	ands	r3, r2
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	f040 8093 	bne.w	800caa8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	2b00      	cmp	r3, #0
 800c986:	d01d      	beq.n	800c9c4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800c988:	2208      	movs	r2, #8
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	4413      	add	r3, r2
 800c98e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	f003 0307 	and.w	r3, r3, #7
 800c996:	2b00      	cmp	r3, #0
 800c998:	d014      	beq.n	800c9c4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	f023 0307 	bic.w	r3, r3, #7
 800c9a0:	3308      	adds	r3, #8
 800c9a2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	f003 0307 	and.w	r3, r3, #7
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d00a      	beq.n	800c9c4 <pvPortMalloc+0x6c>
	__asm volatile
 800c9ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9b2:	f383 8811 	msr	BASEPRI, r3
 800c9b6:	f3bf 8f6f 	isb	sy
 800c9ba:	f3bf 8f4f 	dsb	sy
 800c9be:	617b      	str	r3, [r7, #20]
}
 800c9c0:	bf00      	nop
 800c9c2:	e7fe      	b.n	800c9c2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	d06e      	beq.n	800caa8 <pvPortMalloc+0x150>
 800c9ca:	4b45      	ldr	r3, [pc, #276]	; (800cae0 <pvPortMalloc+0x188>)
 800c9cc:	681b      	ldr	r3, [r3, #0]
 800c9ce:	687a      	ldr	r2, [r7, #4]
 800c9d0:	429a      	cmp	r2, r3
 800c9d2:	d869      	bhi.n	800caa8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c9d4:	4b43      	ldr	r3, [pc, #268]	; (800cae4 <pvPortMalloc+0x18c>)
 800c9d6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c9d8:	4b42      	ldr	r3, [pc, #264]	; (800cae4 <pvPortMalloc+0x18c>)
 800c9da:	681b      	ldr	r3, [r3, #0]
 800c9dc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c9de:	e004      	b.n	800c9ea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800c9e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9e2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c9e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9e6:	681b      	ldr	r3, [r3, #0]
 800c9e8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c9ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9ec:	685b      	ldr	r3, [r3, #4]
 800c9ee:	687a      	ldr	r2, [r7, #4]
 800c9f0:	429a      	cmp	r2, r3
 800c9f2:	d903      	bls.n	800c9fc <pvPortMalloc+0xa4>
 800c9f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d1f1      	bne.n	800c9e0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c9fc:	4b36      	ldr	r3, [pc, #216]	; (800cad8 <pvPortMalloc+0x180>)
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ca02:	429a      	cmp	r2, r3
 800ca04:	d050      	beq.n	800caa8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ca06:	6a3b      	ldr	r3, [r7, #32]
 800ca08:	681b      	ldr	r3, [r3, #0]
 800ca0a:	2208      	movs	r2, #8
 800ca0c:	4413      	add	r3, r2
 800ca0e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ca10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca12:	681a      	ldr	r2, [r3, #0]
 800ca14:	6a3b      	ldr	r3, [r7, #32]
 800ca16:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ca18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca1a:	685a      	ldr	r2, [r3, #4]
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	1ad2      	subs	r2, r2, r3
 800ca20:	2308      	movs	r3, #8
 800ca22:	005b      	lsls	r3, r3, #1
 800ca24:	429a      	cmp	r2, r3
 800ca26:	d91f      	bls.n	800ca68 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ca28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	4413      	add	r3, r2
 800ca2e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ca30:	69bb      	ldr	r3, [r7, #24]
 800ca32:	f003 0307 	and.w	r3, r3, #7
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d00a      	beq.n	800ca50 <pvPortMalloc+0xf8>
	__asm volatile
 800ca3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca3e:	f383 8811 	msr	BASEPRI, r3
 800ca42:	f3bf 8f6f 	isb	sy
 800ca46:	f3bf 8f4f 	dsb	sy
 800ca4a:	613b      	str	r3, [r7, #16]
}
 800ca4c:	bf00      	nop
 800ca4e:	e7fe      	b.n	800ca4e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ca50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca52:	685a      	ldr	r2, [r3, #4]
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	1ad2      	subs	r2, r2, r3
 800ca58:	69bb      	ldr	r3, [r7, #24]
 800ca5a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ca5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca5e:	687a      	ldr	r2, [r7, #4]
 800ca60:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ca62:	69b8      	ldr	r0, [r7, #24]
 800ca64:	f000 f908 	bl	800cc78 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ca68:	4b1d      	ldr	r3, [pc, #116]	; (800cae0 <pvPortMalloc+0x188>)
 800ca6a:	681a      	ldr	r2, [r3, #0]
 800ca6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca6e:	685b      	ldr	r3, [r3, #4]
 800ca70:	1ad3      	subs	r3, r2, r3
 800ca72:	4a1b      	ldr	r2, [pc, #108]	; (800cae0 <pvPortMalloc+0x188>)
 800ca74:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ca76:	4b1a      	ldr	r3, [pc, #104]	; (800cae0 <pvPortMalloc+0x188>)
 800ca78:	681a      	ldr	r2, [r3, #0]
 800ca7a:	4b1b      	ldr	r3, [pc, #108]	; (800cae8 <pvPortMalloc+0x190>)
 800ca7c:	681b      	ldr	r3, [r3, #0]
 800ca7e:	429a      	cmp	r2, r3
 800ca80:	d203      	bcs.n	800ca8a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ca82:	4b17      	ldr	r3, [pc, #92]	; (800cae0 <pvPortMalloc+0x188>)
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	4a18      	ldr	r2, [pc, #96]	; (800cae8 <pvPortMalloc+0x190>)
 800ca88:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ca8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca8c:	685a      	ldr	r2, [r3, #4]
 800ca8e:	4b13      	ldr	r3, [pc, #76]	; (800cadc <pvPortMalloc+0x184>)
 800ca90:	681b      	ldr	r3, [r3, #0]
 800ca92:	431a      	orrs	r2, r3
 800ca94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca96:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ca98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca9a:	2200      	movs	r2, #0
 800ca9c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800ca9e:	4b13      	ldr	r3, [pc, #76]	; (800caec <pvPortMalloc+0x194>)
 800caa0:	681b      	ldr	r3, [r3, #0]
 800caa2:	3301      	adds	r3, #1
 800caa4:	4a11      	ldr	r2, [pc, #68]	; (800caec <pvPortMalloc+0x194>)
 800caa6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800caa8:	f7fe fbee 	bl	800b288 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800caac:	69fb      	ldr	r3, [r7, #28]
 800caae:	f003 0307 	and.w	r3, r3, #7
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	d00a      	beq.n	800cacc <pvPortMalloc+0x174>
	__asm volatile
 800cab6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800caba:	f383 8811 	msr	BASEPRI, r3
 800cabe:	f3bf 8f6f 	isb	sy
 800cac2:	f3bf 8f4f 	dsb	sy
 800cac6:	60fb      	str	r3, [r7, #12]
}
 800cac8:	bf00      	nop
 800caca:	e7fe      	b.n	800caca <pvPortMalloc+0x172>
	return pvReturn;
 800cacc:	69fb      	ldr	r3, [r7, #28]
}
 800cace:	4618      	mov	r0, r3
 800cad0:	3728      	adds	r7, #40	; 0x28
 800cad2:	46bd      	mov	sp, r7
 800cad4:	bd80      	pop	{r7, pc}
 800cad6:	bf00      	nop
 800cad8:	20001d70 	.word	0x20001d70
 800cadc:	20001d84 	.word	0x20001d84
 800cae0:	20001d74 	.word	0x20001d74
 800cae4:	20001d68 	.word	0x20001d68
 800cae8:	20001d78 	.word	0x20001d78
 800caec:	20001d7c 	.word	0x20001d7c

0800caf0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800caf0:	b580      	push	{r7, lr}
 800caf2:	b086      	sub	sp, #24
 800caf4:	af00      	add	r7, sp, #0
 800caf6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	d04d      	beq.n	800cb9e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800cb02:	2308      	movs	r3, #8
 800cb04:	425b      	negs	r3, r3
 800cb06:	697a      	ldr	r2, [r7, #20]
 800cb08:	4413      	add	r3, r2
 800cb0a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800cb0c:	697b      	ldr	r3, [r7, #20]
 800cb0e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800cb10:	693b      	ldr	r3, [r7, #16]
 800cb12:	685a      	ldr	r2, [r3, #4]
 800cb14:	4b24      	ldr	r3, [pc, #144]	; (800cba8 <vPortFree+0xb8>)
 800cb16:	681b      	ldr	r3, [r3, #0]
 800cb18:	4013      	ands	r3, r2
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	d10a      	bne.n	800cb34 <vPortFree+0x44>
	__asm volatile
 800cb1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb22:	f383 8811 	msr	BASEPRI, r3
 800cb26:	f3bf 8f6f 	isb	sy
 800cb2a:	f3bf 8f4f 	dsb	sy
 800cb2e:	60fb      	str	r3, [r7, #12]
}
 800cb30:	bf00      	nop
 800cb32:	e7fe      	b.n	800cb32 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800cb34:	693b      	ldr	r3, [r7, #16]
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d00a      	beq.n	800cb52 <vPortFree+0x62>
	__asm volatile
 800cb3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb40:	f383 8811 	msr	BASEPRI, r3
 800cb44:	f3bf 8f6f 	isb	sy
 800cb48:	f3bf 8f4f 	dsb	sy
 800cb4c:	60bb      	str	r3, [r7, #8]
}
 800cb4e:	bf00      	nop
 800cb50:	e7fe      	b.n	800cb50 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800cb52:	693b      	ldr	r3, [r7, #16]
 800cb54:	685a      	ldr	r2, [r3, #4]
 800cb56:	4b14      	ldr	r3, [pc, #80]	; (800cba8 <vPortFree+0xb8>)
 800cb58:	681b      	ldr	r3, [r3, #0]
 800cb5a:	4013      	ands	r3, r2
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	d01e      	beq.n	800cb9e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800cb60:	693b      	ldr	r3, [r7, #16]
 800cb62:	681b      	ldr	r3, [r3, #0]
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	d11a      	bne.n	800cb9e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800cb68:	693b      	ldr	r3, [r7, #16]
 800cb6a:	685a      	ldr	r2, [r3, #4]
 800cb6c:	4b0e      	ldr	r3, [pc, #56]	; (800cba8 <vPortFree+0xb8>)
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	43db      	mvns	r3, r3
 800cb72:	401a      	ands	r2, r3
 800cb74:	693b      	ldr	r3, [r7, #16]
 800cb76:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800cb78:	f7fe fb78 	bl	800b26c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800cb7c:	693b      	ldr	r3, [r7, #16]
 800cb7e:	685a      	ldr	r2, [r3, #4]
 800cb80:	4b0a      	ldr	r3, [pc, #40]	; (800cbac <vPortFree+0xbc>)
 800cb82:	681b      	ldr	r3, [r3, #0]
 800cb84:	4413      	add	r3, r2
 800cb86:	4a09      	ldr	r2, [pc, #36]	; (800cbac <vPortFree+0xbc>)
 800cb88:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800cb8a:	6938      	ldr	r0, [r7, #16]
 800cb8c:	f000 f874 	bl	800cc78 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800cb90:	4b07      	ldr	r3, [pc, #28]	; (800cbb0 <vPortFree+0xc0>)
 800cb92:	681b      	ldr	r3, [r3, #0]
 800cb94:	3301      	adds	r3, #1
 800cb96:	4a06      	ldr	r2, [pc, #24]	; (800cbb0 <vPortFree+0xc0>)
 800cb98:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800cb9a:	f7fe fb75 	bl	800b288 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800cb9e:	bf00      	nop
 800cba0:	3718      	adds	r7, #24
 800cba2:	46bd      	mov	sp, r7
 800cba4:	bd80      	pop	{r7, pc}
 800cba6:	bf00      	nop
 800cba8:	20001d84 	.word	0x20001d84
 800cbac:	20001d74 	.word	0x20001d74
 800cbb0:	20001d80 	.word	0x20001d80

0800cbb4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800cbb4:	b480      	push	{r7}
 800cbb6:	b085      	sub	sp, #20
 800cbb8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800cbba:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800cbbe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800cbc0:	4b27      	ldr	r3, [pc, #156]	; (800cc60 <prvHeapInit+0xac>)
 800cbc2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800cbc4:	68fb      	ldr	r3, [r7, #12]
 800cbc6:	f003 0307 	and.w	r3, r3, #7
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	d00c      	beq.n	800cbe8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800cbce:	68fb      	ldr	r3, [r7, #12]
 800cbd0:	3307      	adds	r3, #7
 800cbd2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cbd4:	68fb      	ldr	r3, [r7, #12]
 800cbd6:	f023 0307 	bic.w	r3, r3, #7
 800cbda:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800cbdc:	68ba      	ldr	r2, [r7, #8]
 800cbde:	68fb      	ldr	r3, [r7, #12]
 800cbe0:	1ad3      	subs	r3, r2, r3
 800cbe2:	4a1f      	ldr	r2, [pc, #124]	; (800cc60 <prvHeapInit+0xac>)
 800cbe4:	4413      	add	r3, r2
 800cbe6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800cbe8:	68fb      	ldr	r3, [r7, #12]
 800cbea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800cbec:	4a1d      	ldr	r2, [pc, #116]	; (800cc64 <prvHeapInit+0xb0>)
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800cbf2:	4b1c      	ldr	r3, [pc, #112]	; (800cc64 <prvHeapInit+0xb0>)
 800cbf4:	2200      	movs	r2, #0
 800cbf6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	68ba      	ldr	r2, [r7, #8]
 800cbfc:	4413      	add	r3, r2
 800cbfe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800cc00:	2208      	movs	r2, #8
 800cc02:	68fb      	ldr	r3, [r7, #12]
 800cc04:	1a9b      	subs	r3, r3, r2
 800cc06:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cc08:	68fb      	ldr	r3, [r7, #12]
 800cc0a:	f023 0307 	bic.w	r3, r3, #7
 800cc0e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800cc10:	68fb      	ldr	r3, [r7, #12]
 800cc12:	4a15      	ldr	r2, [pc, #84]	; (800cc68 <prvHeapInit+0xb4>)
 800cc14:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800cc16:	4b14      	ldr	r3, [pc, #80]	; (800cc68 <prvHeapInit+0xb4>)
 800cc18:	681b      	ldr	r3, [r3, #0]
 800cc1a:	2200      	movs	r2, #0
 800cc1c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800cc1e:	4b12      	ldr	r3, [pc, #72]	; (800cc68 <prvHeapInit+0xb4>)
 800cc20:	681b      	ldr	r3, [r3, #0]
 800cc22:	2200      	movs	r2, #0
 800cc24:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800cc2a:	683b      	ldr	r3, [r7, #0]
 800cc2c:	68fa      	ldr	r2, [r7, #12]
 800cc2e:	1ad2      	subs	r2, r2, r3
 800cc30:	683b      	ldr	r3, [r7, #0]
 800cc32:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800cc34:	4b0c      	ldr	r3, [pc, #48]	; (800cc68 <prvHeapInit+0xb4>)
 800cc36:	681a      	ldr	r2, [r3, #0]
 800cc38:	683b      	ldr	r3, [r7, #0]
 800cc3a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cc3c:	683b      	ldr	r3, [r7, #0]
 800cc3e:	685b      	ldr	r3, [r3, #4]
 800cc40:	4a0a      	ldr	r2, [pc, #40]	; (800cc6c <prvHeapInit+0xb8>)
 800cc42:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cc44:	683b      	ldr	r3, [r7, #0]
 800cc46:	685b      	ldr	r3, [r3, #4]
 800cc48:	4a09      	ldr	r2, [pc, #36]	; (800cc70 <prvHeapInit+0xbc>)
 800cc4a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800cc4c:	4b09      	ldr	r3, [pc, #36]	; (800cc74 <prvHeapInit+0xc0>)
 800cc4e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800cc52:	601a      	str	r2, [r3, #0]
}
 800cc54:	bf00      	nop
 800cc56:	3714      	adds	r7, #20
 800cc58:	46bd      	mov	sp, r7
 800cc5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc5e:	4770      	bx	lr
 800cc60:	200011b0 	.word	0x200011b0
 800cc64:	20001d68 	.word	0x20001d68
 800cc68:	20001d70 	.word	0x20001d70
 800cc6c:	20001d78 	.word	0x20001d78
 800cc70:	20001d74 	.word	0x20001d74
 800cc74:	20001d84 	.word	0x20001d84

0800cc78 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800cc78:	b480      	push	{r7}
 800cc7a:	b085      	sub	sp, #20
 800cc7c:	af00      	add	r7, sp, #0
 800cc7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800cc80:	4b28      	ldr	r3, [pc, #160]	; (800cd24 <prvInsertBlockIntoFreeList+0xac>)
 800cc82:	60fb      	str	r3, [r7, #12]
 800cc84:	e002      	b.n	800cc8c <prvInsertBlockIntoFreeList+0x14>
 800cc86:	68fb      	ldr	r3, [r7, #12]
 800cc88:	681b      	ldr	r3, [r3, #0]
 800cc8a:	60fb      	str	r3, [r7, #12]
 800cc8c:	68fb      	ldr	r3, [r7, #12]
 800cc8e:	681b      	ldr	r3, [r3, #0]
 800cc90:	687a      	ldr	r2, [r7, #4]
 800cc92:	429a      	cmp	r2, r3
 800cc94:	d8f7      	bhi.n	800cc86 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800cc96:	68fb      	ldr	r3, [r7, #12]
 800cc98:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800cc9a:	68fb      	ldr	r3, [r7, #12]
 800cc9c:	685b      	ldr	r3, [r3, #4]
 800cc9e:	68ba      	ldr	r2, [r7, #8]
 800cca0:	4413      	add	r3, r2
 800cca2:	687a      	ldr	r2, [r7, #4]
 800cca4:	429a      	cmp	r2, r3
 800cca6:	d108      	bne.n	800ccba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800cca8:	68fb      	ldr	r3, [r7, #12]
 800ccaa:	685a      	ldr	r2, [r3, #4]
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	685b      	ldr	r3, [r3, #4]
 800ccb0:	441a      	add	r2, r3
 800ccb2:	68fb      	ldr	r3, [r7, #12]
 800ccb4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ccb6:	68fb      	ldr	r3, [r7, #12]
 800ccb8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	685b      	ldr	r3, [r3, #4]
 800ccc2:	68ba      	ldr	r2, [r7, #8]
 800ccc4:	441a      	add	r2, r3
 800ccc6:	68fb      	ldr	r3, [r7, #12]
 800ccc8:	681b      	ldr	r3, [r3, #0]
 800ccca:	429a      	cmp	r2, r3
 800cccc:	d118      	bne.n	800cd00 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ccce:	68fb      	ldr	r3, [r7, #12]
 800ccd0:	681a      	ldr	r2, [r3, #0]
 800ccd2:	4b15      	ldr	r3, [pc, #84]	; (800cd28 <prvInsertBlockIntoFreeList+0xb0>)
 800ccd4:	681b      	ldr	r3, [r3, #0]
 800ccd6:	429a      	cmp	r2, r3
 800ccd8:	d00d      	beq.n	800ccf6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	685a      	ldr	r2, [r3, #4]
 800ccde:	68fb      	ldr	r3, [r7, #12]
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	685b      	ldr	r3, [r3, #4]
 800cce4:	441a      	add	r2, r3
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ccea:	68fb      	ldr	r3, [r7, #12]
 800ccec:	681b      	ldr	r3, [r3, #0]
 800ccee:	681a      	ldr	r2, [r3, #0]
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	601a      	str	r2, [r3, #0]
 800ccf4:	e008      	b.n	800cd08 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ccf6:	4b0c      	ldr	r3, [pc, #48]	; (800cd28 <prvInsertBlockIntoFreeList+0xb0>)
 800ccf8:	681a      	ldr	r2, [r3, #0]
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	601a      	str	r2, [r3, #0]
 800ccfe:	e003      	b.n	800cd08 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800cd00:	68fb      	ldr	r3, [r7, #12]
 800cd02:	681a      	ldr	r2, [r3, #0]
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800cd08:	68fa      	ldr	r2, [r7, #12]
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	429a      	cmp	r2, r3
 800cd0e:	d002      	beq.n	800cd16 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800cd10:	68fb      	ldr	r3, [r7, #12]
 800cd12:	687a      	ldr	r2, [r7, #4]
 800cd14:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cd16:	bf00      	nop
 800cd18:	3714      	adds	r7, #20
 800cd1a:	46bd      	mov	sp, r7
 800cd1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd20:	4770      	bx	lr
 800cd22:	bf00      	nop
 800cd24:	20001d68 	.word	0x20001d68
 800cd28:	20001d70 	.word	0x20001d70

0800cd2c <__libc_init_array>:
 800cd2c:	b570      	push	{r4, r5, r6, lr}
 800cd2e:	4d0d      	ldr	r5, [pc, #52]	; (800cd64 <__libc_init_array+0x38>)
 800cd30:	4c0d      	ldr	r4, [pc, #52]	; (800cd68 <__libc_init_array+0x3c>)
 800cd32:	1b64      	subs	r4, r4, r5
 800cd34:	10a4      	asrs	r4, r4, #2
 800cd36:	2600      	movs	r6, #0
 800cd38:	42a6      	cmp	r6, r4
 800cd3a:	d109      	bne.n	800cd50 <__libc_init_array+0x24>
 800cd3c:	4d0b      	ldr	r5, [pc, #44]	; (800cd6c <__libc_init_array+0x40>)
 800cd3e:	4c0c      	ldr	r4, [pc, #48]	; (800cd70 <__libc_init_array+0x44>)
 800cd40:	f000 f8f2 	bl	800cf28 <_init>
 800cd44:	1b64      	subs	r4, r4, r5
 800cd46:	10a4      	asrs	r4, r4, #2
 800cd48:	2600      	movs	r6, #0
 800cd4a:	42a6      	cmp	r6, r4
 800cd4c:	d105      	bne.n	800cd5a <__libc_init_array+0x2e>
 800cd4e:	bd70      	pop	{r4, r5, r6, pc}
 800cd50:	f855 3b04 	ldr.w	r3, [r5], #4
 800cd54:	4798      	blx	r3
 800cd56:	3601      	adds	r6, #1
 800cd58:	e7ee      	b.n	800cd38 <__libc_init_array+0xc>
 800cd5a:	f855 3b04 	ldr.w	r3, [r5], #4
 800cd5e:	4798      	blx	r3
 800cd60:	3601      	adds	r6, #1
 800cd62:	e7f2      	b.n	800cd4a <__libc_init_array+0x1e>
 800cd64:	0800d0cc 	.word	0x0800d0cc
 800cd68:	0800d0cc 	.word	0x0800d0cc
 800cd6c:	0800d0cc 	.word	0x0800d0cc
 800cd70:	0800d0d0 	.word	0x0800d0d0

0800cd74 <__retarget_lock_acquire_recursive>:
 800cd74:	4770      	bx	lr

0800cd76 <__retarget_lock_release_recursive>:
 800cd76:	4770      	bx	lr

0800cd78 <memcpy>:
 800cd78:	440a      	add	r2, r1
 800cd7a:	4291      	cmp	r1, r2
 800cd7c:	f100 33ff 	add.w	r3, r0, #4294967295
 800cd80:	d100      	bne.n	800cd84 <memcpy+0xc>
 800cd82:	4770      	bx	lr
 800cd84:	b510      	push	{r4, lr}
 800cd86:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cd8a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cd8e:	4291      	cmp	r1, r2
 800cd90:	d1f9      	bne.n	800cd86 <memcpy+0xe>
 800cd92:	bd10      	pop	{r4, pc}

0800cd94 <memset>:
 800cd94:	4402      	add	r2, r0
 800cd96:	4603      	mov	r3, r0
 800cd98:	4293      	cmp	r3, r2
 800cd9a:	d100      	bne.n	800cd9e <memset+0xa>
 800cd9c:	4770      	bx	lr
 800cd9e:	f803 1b01 	strb.w	r1, [r3], #1
 800cda2:	e7f9      	b.n	800cd98 <memset+0x4>

0800cda4 <cleanup_glue>:
 800cda4:	b538      	push	{r3, r4, r5, lr}
 800cda6:	460c      	mov	r4, r1
 800cda8:	6809      	ldr	r1, [r1, #0]
 800cdaa:	4605      	mov	r5, r0
 800cdac:	b109      	cbz	r1, 800cdb2 <cleanup_glue+0xe>
 800cdae:	f7ff fff9 	bl	800cda4 <cleanup_glue>
 800cdb2:	4621      	mov	r1, r4
 800cdb4:	4628      	mov	r0, r5
 800cdb6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cdba:	f000 b869 	b.w	800ce90 <_free_r>
	...

0800cdc0 <_reclaim_reent>:
 800cdc0:	4b2c      	ldr	r3, [pc, #176]	; (800ce74 <_reclaim_reent+0xb4>)
 800cdc2:	681b      	ldr	r3, [r3, #0]
 800cdc4:	4283      	cmp	r3, r0
 800cdc6:	b570      	push	{r4, r5, r6, lr}
 800cdc8:	4604      	mov	r4, r0
 800cdca:	d051      	beq.n	800ce70 <_reclaim_reent+0xb0>
 800cdcc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800cdce:	b143      	cbz	r3, 800cde2 <_reclaim_reent+0x22>
 800cdd0:	68db      	ldr	r3, [r3, #12]
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d14a      	bne.n	800ce6c <_reclaim_reent+0xac>
 800cdd6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cdd8:	6819      	ldr	r1, [r3, #0]
 800cdda:	b111      	cbz	r1, 800cde2 <_reclaim_reent+0x22>
 800cddc:	4620      	mov	r0, r4
 800cdde:	f000 f857 	bl	800ce90 <_free_r>
 800cde2:	6961      	ldr	r1, [r4, #20]
 800cde4:	b111      	cbz	r1, 800cdec <_reclaim_reent+0x2c>
 800cde6:	4620      	mov	r0, r4
 800cde8:	f000 f852 	bl	800ce90 <_free_r>
 800cdec:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800cdee:	b111      	cbz	r1, 800cdf6 <_reclaim_reent+0x36>
 800cdf0:	4620      	mov	r0, r4
 800cdf2:	f000 f84d 	bl	800ce90 <_free_r>
 800cdf6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800cdf8:	b111      	cbz	r1, 800ce00 <_reclaim_reent+0x40>
 800cdfa:	4620      	mov	r0, r4
 800cdfc:	f000 f848 	bl	800ce90 <_free_r>
 800ce00:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800ce02:	b111      	cbz	r1, 800ce0a <_reclaim_reent+0x4a>
 800ce04:	4620      	mov	r0, r4
 800ce06:	f000 f843 	bl	800ce90 <_free_r>
 800ce0a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800ce0c:	b111      	cbz	r1, 800ce14 <_reclaim_reent+0x54>
 800ce0e:	4620      	mov	r0, r4
 800ce10:	f000 f83e 	bl	800ce90 <_free_r>
 800ce14:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800ce16:	b111      	cbz	r1, 800ce1e <_reclaim_reent+0x5e>
 800ce18:	4620      	mov	r0, r4
 800ce1a:	f000 f839 	bl	800ce90 <_free_r>
 800ce1e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800ce20:	b111      	cbz	r1, 800ce28 <_reclaim_reent+0x68>
 800ce22:	4620      	mov	r0, r4
 800ce24:	f000 f834 	bl	800ce90 <_free_r>
 800ce28:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ce2a:	b111      	cbz	r1, 800ce32 <_reclaim_reent+0x72>
 800ce2c:	4620      	mov	r0, r4
 800ce2e:	f000 f82f 	bl	800ce90 <_free_r>
 800ce32:	69a3      	ldr	r3, [r4, #24]
 800ce34:	b1e3      	cbz	r3, 800ce70 <_reclaim_reent+0xb0>
 800ce36:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800ce38:	4620      	mov	r0, r4
 800ce3a:	4798      	blx	r3
 800ce3c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800ce3e:	b1b9      	cbz	r1, 800ce70 <_reclaim_reent+0xb0>
 800ce40:	4620      	mov	r0, r4
 800ce42:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ce46:	f7ff bfad 	b.w	800cda4 <cleanup_glue>
 800ce4a:	5949      	ldr	r1, [r1, r5]
 800ce4c:	b941      	cbnz	r1, 800ce60 <_reclaim_reent+0xa0>
 800ce4e:	3504      	adds	r5, #4
 800ce50:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ce52:	2d80      	cmp	r5, #128	; 0x80
 800ce54:	68d9      	ldr	r1, [r3, #12]
 800ce56:	d1f8      	bne.n	800ce4a <_reclaim_reent+0x8a>
 800ce58:	4620      	mov	r0, r4
 800ce5a:	f000 f819 	bl	800ce90 <_free_r>
 800ce5e:	e7ba      	b.n	800cdd6 <_reclaim_reent+0x16>
 800ce60:	680e      	ldr	r6, [r1, #0]
 800ce62:	4620      	mov	r0, r4
 800ce64:	f000 f814 	bl	800ce90 <_free_r>
 800ce68:	4631      	mov	r1, r6
 800ce6a:	e7ef      	b.n	800ce4c <_reclaim_reent+0x8c>
 800ce6c:	2500      	movs	r5, #0
 800ce6e:	e7ef      	b.n	800ce50 <_reclaim_reent+0x90>
 800ce70:	bd70      	pop	{r4, r5, r6, pc}
 800ce72:	bf00      	nop
 800ce74:	20000010 	.word	0x20000010

0800ce78 <__malloc_lock>:
 800ce78:	4801      	ldr	r0, [pc, #4]	; (800ce80 <__malloc_lock+0x8>)
 800ce7a:	f7ff bf7b 	b.w	800cd74 <__retarget_lock_acquire_recursive>
 800ce7e:	bf00      	nop
 800ce80:	20001d88 	.word	0x20001d88

0800ce84 <__malloc_unlock>:
 800ce84:	4801      	ldr	r0, [pc, #4]	; (800ce8c <__malloc_unlock+0x8>)
 800ce86:	f7ff bf76 	b.w	800cd76 <__retarget_lock_release_recursive>
 800ce8a:	bf00      	nop
 800ce8c:	20001d88 	.word	0x20001d88

0800ce90 <_free_r>:
 800ce90:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ce92:	2900      	cmp	r1, #0
 800ce94:	d044      	beq.n	800cf20 <_free_r+0x90>
 800ce96:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ce9a:	9001      	str	r0, [sp, #4]
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	f1a1 0404 	sub.w	r4, r1, #4
 800cea2:	bfb8      	it	lt
 800cea4:	18e4      	addlt	r4, r4, r3
 800cea6:	f7ff ffe7 	bl	800ce78 <__malloc_lock>
 800ceaa:	4a1e      	ldr	r2, [pc, #120]	; (800cf24 <_free_r+0x94>)
 800ceac:	9801      	ldr	r0, [sp, #4]
 800ceae:	6813      	ldr	r3, [r2, #0]
 800ceb0:	b933      	cbnz	r3, 800cec0 <_free_r+0x30>
 800ceb2:	6063      	str	r3, [r4, #4]
 800ceb4:	6014      	str	r4, [r2, #0]
 800ceb6:	b003      	add	sp, #12
 800ceb8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cebc:	f7ff bfe2 	b.w	800ce84 <__malloc_unlock>
 800cec0:	42a3      	cmp	r3, r4
 800cec2:	d908      	bls.n	800ced6 <_free_r+0x46>
 800cec4:	6825      	ldr	r5, [r4, #0]
 800cec6:	1961      	adds	r1, r4, r5
 800cec8:	428b      	cmp	r3, r1
 800ceca:	bf01      	itttt	eq
 800cecc:	6819      	ldreq	r1, [r3, #0]
 800cece:	685b      	ldreq	r3, [r3, #4]
 800ced0:	1949      	addeq	r1, r1, r5
 800ced2:	6021      	streq	r1, [r4, #0]
 800ced4:	e7ed      	b.n	800ceb2 <_free_r+0x22>
 800ced6:	461a      	mov	r2, r3
 800ced8:	685b      	ldr	r3, [r3, #4]
 800ceda:	b10b      	cbz	r3, 800cee0 <_free_r+0x50>
 800cedc:	42a3      	cmp	r3, r4
 800cede:	d9fa      	bls.n	800ced6 <_free_r+0x46>
 800cee0:	6811      	ldr	r1, [r2, #0]
 800cee2:	1855      	adds	r5, r2, r1
 800cee4:	42a5      	cmp	r5, r4
 800cee6:	d10b      	bne.n	800cf00 <_free_r+0x70>
 800cee8:	6824      	ldr	r4, [r4, #0]
 800ceea:	4421      	add	r1, r4
 800ceec:	1854      	adds	r4, r2, r1
 800ceee:	42a3      	cmp	r3, r4
 800cef0:	6011      	str	r1, [r2, #0]
 800cef2:	d1e0      	bne.n	800ceb6 <_free_r+0x26>
 800cef4:	681c      	ldr	r4, [r3, #0]
 800cef6:	685b      	ldr	r3, [r3, #4]
 800cef8:	6053      	str	r3, [r2, #4]
 800cefa:	4421      	add	r1, r4
 800cefc:	6011      	str	r1, [r2, #0]
 800cefe:	e7da      	b.n	800ceb6 <_free_r+0x26>
 800cf00:	d902      	bls.n	800cf08 <_free_r+0x78>
 800cf02:	230c      	movs	r3, #12
 800cf04:	6003      	str	r3, [r0, #0]
 800cf06:	e7d6      	b.n	800ceb6 <_free_r+0x26>
 800cf08:	6825      	ldr	r5, [r4, #0]
 800cf0a:	1961      	adds	r1, r4, r5
 800cf0c:	428b      	cmp	r3, r1
 800cf0e:	bf04      	itt	eq
 800cf10:	6819      	ldreq	r1, [r3, #0]
 800cf12:	685b      	ldreq	r3, [r3, #4]
 800cf14:	6063      	str	r3, [r4, #4]
 800cf16:	bf04      	itt	eq
 800cf18:	1949      	addeq	r1, r1, r5
 800cf1a:	6021      	streq	r1, [r4, #0]
 800cf1c:	6054      	str	r4, [r2, #4]
 800cf1e:	e7ca      	b.n	800ceb6 <_free_r+0x26>
 800cf20:	b003      	add	sp, #12
 800cf22:	bd30      	pop	{r4, r5, pc}
 800cf24:	20001d8c 	.word	0x20001d8c

0800cf28 <_init>:
 800cf28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf2a:	bf00      	nop
 800cf2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cf2e:	bc08      	pop	{r3}
 800cf30:	469e      	mov	lr, r3
 800cf32:	4770      	bx	lr

0800cf34 <_fini>:
 800cf34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf36:	bf00      	nop
 800cf38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cf3a:	bc08      	pop	{r3}
 800cf3c:	469e      	mov	lr, r3
 800cf3e:	4770      	bx	lr
