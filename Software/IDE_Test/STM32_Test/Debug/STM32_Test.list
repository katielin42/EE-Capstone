
STM32_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007b04  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08007cc0  08007cc0  00017cc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007d30  08007d30  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08007d30  08007d30  00017d30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007d38  08007d38  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007d38  08007d38  00017d38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007d3c  08007d3c  00017d3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08007d40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000038c  2000000c  08007d4c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000398  08007d4c  00020398  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b4c8  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030a5  00000000  00000000  0003b504  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001678  00000000  00000000  0003e5b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001558  00000000  00000000  0003fc28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000329b7  00000000  00000000  00041180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001bc40  00000000  00000000  00073b37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0012da24  00000000  00000000  0008f777  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001bd19b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006014  00000000  00000000  001bd1ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	2000000c 	.word	0x2000000c
 80001d8:	00000000 	.word	0x00000000
 80001dc:	08007ca8 	.word	0x08007ca8

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000010 	.word	0x20000010
 80001f8:	08007ca8 	.word	0x08007ca8

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800020c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000210:	f000 b974 	b.w	80004fc <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9d08      	ldr	r5, [sp, #32]
 8000232:	4604      	mov	r4, r0
 8000234:	468e      	mov	lr, r1
 8000236:	2b00      	cmp	r3, #0
 8000238:	d14d      	bne.n	80002d6 <__udivmoddi4+0xaa>
 800023a:	428a      	cmp	r2, r1
 800023c:	4694      	mov	ip, r2
 800023e:	d969      	bls.n	8000314 <__udivmoddi4+0xe8>
 8000240:	fab2 f282 	clz	r2, r2
 8000244:	b152      	cbz	r2, 800025c <__udivmoddi4+0x30>
 8000246:	fa01 f302 	lsl.w	r3, r1, r2
 800024a:	f1c2 0120 	rsb	r1, r2, #32
 800024e:	fa20 f101 	lsr.w	r1, r0, r1
 8000252:	fa0c fc02 	lsl.w	ip, ip, r2
 8000256:	ea41 0e03 	orr.w	lr, r1, r3
 800025a:	4094      	lsls	r4, r2
 800025c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000260:	0c21      	lsrs	r1, r4, #16
 8000262:	fbbe f6f8 	udiv	r6, lr, r8
 8000266:	fa1f f78c 	uxth.w	r7, ip
 800026a:	fb08 e316 	mls	r3, r8, r6, lr
 800026e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000272:	fb06 f107 	mul.w	r1, r6, r7
 8000276:	4299      	cmp	r1, r3
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x64>
 800027a:	eb1c 0303 	adds.w	r3, ip, r3
 800027e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000282:	f080 811f 	bcs.w	80004c4 <__udivmoddi4+0x298>
 8000286:	4299      	cmp	r1, r3
 8000288:	f240 811c 	bls.w	80004c4 <__udivmoddi4+0x298>
 800028c:	3e02      	subs	r6, #2
 800028e:	4463      	add	r3, ip
 8000290:	1a5b      	subs	r3, r3, r1
 8000292:	b2a4      	uxth	r4, r4
 8000294:	fbb3 f0f8 	udiv	r0, r3, r8
 8000298:	fb08 3310 	mls	r3, r8, r0, r3
 800029c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a0:	fb00 f707 	mul.w	r7, r0, r7
 80002a4:	42a7      	cmp	r7, r4
 80002a6:	d90a      	bls.n	80002be <__udivmoddi4+0x92>
 80002a8:	eb1c 0404 	adds.w	r4, ip, r4
 80002ac:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002b0:	f080 810a 	bcs.w	80004c8 <__udivmoddi4+0x29c>
 80002b4:	42a7      	cmp	r7, r4
 80002b6:	f240 8107 	bls.w	80004c8 <__udivmoddi4+0x29c>
 80002ba:	4464      	add	r4, ip
 80002bc:	3802      	subs	r0, #2
 80002be:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c2:	1be4      	subs	r4, r4, r7
 80002c4:	2600      	movs	r6, #0
 80002c6:	b11d      	cbz	r5, 80002d0 <__udivmoddi4+0xa4>
 80002c8:	40d4      	lsrs	r4, r2
 80002ca:	2300      	movs	r3, #0
 80002cc:	e9c5 4300 	strd	r4, r3, [r5]
 80002d0:	4631      	mov	r1, r6
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d909      	bls.n	80002ee <__udivmoddi4+0xc2>
 80002da:	2d00      	cmp	r5, #0
 80002dc:	f000 80ef 	beq.w	80004be <__udivmoddi4+0x292>
 80002e0:	2600      	movs	r6, #0
 80002e2:	e9c5 0100 	strd	r0, r1, [r5]
 80002e6:	4630      	mov	r0, r6
 80002e8:	4631      	mov	r1, r6
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	fab3 f683 	clz	r6, r3
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	d14a      	bne.n	800038c <__udivmoddi4+0x160>
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xd4>
 80002fa:	4282      	cmp	r2, r0
 80002fc:	f200 80f9 	bhi.w	80004f2 <__udivmoddi4+0x2c6>
 8000300:	1a84      	subs	r4, r0, r2
 8000302:	eb61 0303 	sbc.w	r3, r1, r3
 8000306:	2001      	movs	r0, #1
 8000308:	469e      	mov	lr, r3
 800030a:	2d00      	cmp	r5, #0
 800030c:	d0e0      	beq.n	80002d0 <__udivmoddi4+0xa4>
 800030e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000312:	e7dd      	b.n	80002d0 <__udivmoddi4+0xa4>
 8000314:	b902      	cbnz	r2, 8000318 <__udivmoddi4+0xec>
 8000316:	deff      	udf	#255	; 0xff
 8000318:	fab2 f282 	clz	r2, r2
 800031c:	2a00      	cmp	r2, #0
 800031e:	f040 8092 	bne.w	8000446 <__udivmoddi4+0x21a>
 8000322:	eba1 010c 	sub.w	r1, r1, ip
 8000326:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032a:	fa1f fe8c 	uxth.w	lr, ip
 800032e:	2601      	movs	r6, #1
 8000330:	0c20      	lsrs	r0, r4, #16
 8000332:	fbb1 f3f7 	udiv	r3, r1, r7
 8000336:	fb07 1113 	mls	r1, r7, r3, r1
 800033a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800033e:	fb0e f003 	mul.w	r0, lr, r3
 8000342:	4288      	cmp	r0, r1
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x12c>
 8000346:	eb1c 0101 	adds.w	r1, ip, r1
 800034a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x12a>
 8000350:	4288      	cmp	r0, r1
 8000352:	f200 80cb 	bhi.w	80004ec <__udivmoddi4+0x2c0>
 8000356:	4643      	mov	r3, r8
 8000358:	1a09      	subs	r1, r1, r0
 800035a:	b2a4      	uxth	r4, r4
 800035c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000360:	fb07 1110 	mls	r1, r7, r0, r1
 8000364:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000368:	fb0e fe00 	mul.w	lr, lr, r0
 800036c:	45a6      	cmp	lr, r4
 800036e:	d908      	bls.n	8000382 <__udivmoddi4+0x156>
 8000370:	eb1c 0404 	adds.w	r4, ip, r4
 8000374:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000378:	d202      	bcs.n	8000380 <__udivmoddi4+0x154>
 800037a:	45a6      	cmp	lr, r4
 800037c:	f200 80bb 	bhi.w	80004f6 <__udivmoddi4+0x2ca>
 8000380:	4608      	mov	r0, r1
 8000382:	eba4 040e 	sub.w	r4, r4, lr
 8000386:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800038a:	e79c      	b.n	80002c6 <__udivmoddi4+0x9a>
 800038c:	f1c6 0720 	rsb	r7, r6, #32
 8000390:	40b3      	lsls	r3, r6
 8000392:	fa22 fc07 	lsr.w	ip, r2, r7
 8000396:	ea4c 0c03 	orr.w	ip, ip, r3
 800039a:	fa20 f407 	lsr.w	r4, r0, r7
 800039e:	fa01 f306 	lsl.w	r3, r1, r6
 80003a2:	431c      	orrs	r4, r3
 80003a4:	40f9      	lsrs	r1, r7
 80003a6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003aa:	fa00 f306 	lsl.w	r3, r0, r6
 80003ae:	fbb1 f8f9 	udiv	r8, r1, r9
 80003b2:	0c20      	lsrs	r0, r4, #16
 80003b4:	fa1f fe8c 	uxth.w	lr, ip
 80003b8:	fb09 1118 	mls	r1, r9, r8, r1
 80003bc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c0:	fb08 f00e 	mul.w	r0, r8, lr
 80003c4:	4288      	cmp	r0, r1
 80003c6:	fa02 f206 	lsl.w	r2, r2, r6
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b8>
 80003cc:	eb1c 0101 	adds.w	r1, ip, r1
 80003d0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003d4:	f080 8088 	bcs.w	80004e8 <__udivmoddi4+0x2bc>
 80003d8:	4288      	cmp	r0, r1
 80003da:	f240 8085 	bls.w	80004e8 <__udivmoddi4+0x2bc>
 80003de:	f1a8 0802 	sub.w	r8, r8, #2
 80003e2:	4461      	add	r1, ip
 80003e4:	1a09      	subs	r1, r1, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003ec:	fb09 1110 	mls	r1, r9, r0, r1
 80003f0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003f4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003f8:	458e      	cmp	lr, r1
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1e2>
 80003fc:	eb1c 0101 	adds.w	r1, ip, r1
 8000400:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000404:	d26c      	bcs.n	80004e0 <__udivmoddi4+0x2b4>
 8000406:	458e      	cmp	lr, r1
 8000408:	d96a      	bls.n	80004e0 <__udivmoddi4+0x2b4>
 800040a:	3802      	subs	r0, #2
 800040c:	4461      	add	r1, ip
 800040e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000412:	fba0 9402 	umull	r9, r4, r0, r2
 8000416:	eba1 010e 	sub.w	r1, r1, lr
 800041a:	42a1      	cmp	r1, r4
 800041c:	46c8      	mov	r8, r9
 800041e:	46a6      	mov	lr, r4
 8000420:	d356      	bcc.n	80004d0 <__udivmoddi4+0x2a4>
 8000422:	d053      	beq.n	80004cc <__udivmoddi4+0x2a0>
 8000424:	b15d      	cbz	r5, 800043e <__udivmoddi4+0x212>
 8000426:	ebb3 0208 	subs.w	r2, r3, r8
 800042a:	eb61 010e 	sbc.w	r1, r1, lr
 800042e:	fa01 f707 	lsl.w	r7, r1, r7
 8000432:	fa22 f306 	lsr.w	r3, r2, r6
 8000436:	40f1      	lsrs	r1, r6
 8000438:	431f      	orrs	r7, r3
 800043a:	e9c5 7100 	strd	r7, r1, [r5]
 800043e:	2600      	movs	r6, #0
 8000440:	4631      	mov	r1, r6
 8000442:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000446:	f1c2 0320 	rsb	r3, r2, #32
 800044a:	40d8      	lsrs	r0, r3
 800044c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000450:	fa21 f303 	lsr.w	r3, r1, r3
 8000454:	4091      	lsls	r1, r2
 8000456:	4301      	orrs	r1, r0
 8000458:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800045c:	fa1f fe8c 	uxth.w	lr, ip
 8000460:	fbb3 f0f7 	udiv	r0, r3, r7
 8000464:	fb07 3610 	mls	r6, r7, r0, r3
 8000468:	0c0b      	lsrs	r3, r1, #16
 800046a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800046e:	fb00 f60e 	mul.w	r6, r0, lr
 8000472:	429e      	cmp	r6, r3
 8000474:	fa04 f402 	lsl.w	r4, r4, r2
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x260>
 800047a:	eb1c 0303 	adds.w	r3, ip, r3
 800047e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000482:	d22f      	bcs.n	80004e4 <__udivmoddi4+0x2b8>
 8000484:	429e      	cmp	r6, r3
 8000486:	d92d      	bls.n	80004e4 <__udivmoddi4+0x2b8>
 8000488:	3802      	subs	r0, #2
 800048a:	4463      	add	r3, ip
 800048c:	1b9b      	subs	r3, r3, r6
 800048e:	b289      	uxth	r1, r1
 8000490:	fbb3 f6f7 	udiv	r6, r3, r7
 8000494:	fb07 3316 	mls	r3, r7, r6, r3
 8000498:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049c:	fb06 f30e 	mul.w	r3, r6, lr
 80004a0:	428b      	cmp	r3, r1
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x28a>
 80004a4:	eb1c 0101 	adds.w	r1, ip, r1
 80004a8:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80004ac:	d216      	bcs.n	80004dc <__udivmoddi4+0x2b0>
 80004ae:	428b      	cmp	r3, r1
 80004b0:	d914      	bls.n	80004dc <__udivmoddi4+0x2b0>
 80004b2:	3e02      	subs	r6, #2
 80004b4:	4461      	add	r1, ip
 80004b6:	1ac9      	subs	r1, r1, r3
 80004b8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004bc:	e738      	b.n	8000330 <__udivmoddi4+0x104>
 80004be:	462e      	mov	r6, r5
 80004c0:	4628      	mov	r0, r5
 80004c2:	e705      	b.n	80002d0 <__udivmoddi4+0xa4>
 80004c4:	4606      	mov	r6, r0
 80004c6:	e6e3      	b.n	8000290 <__udivmoddi4+0x64>
 80004c8:	4618      	mov	r0, r3
 80004ca:	e6f8      	b.n	80002be <__udivmoddi4+0x92>
 80004cc:	454b      	cmp	r3, r9
 80004ce:	d2a9      	bcs.n	8000424 <__udivmoddi4+0x1f8>
 80004d0:	ebb9 0802 	subs.w	r8, r9, r2
 80004d4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004d8:	3801      	subs	r0, #1
 80004da:	e7a3      	b.n	8000424 <__udivmoddi4+0x1f8>
 80004dc:	4646      	mov	r6, r8
 80004de:	e7ea      	b.n	80004b6 <__udivmoddi4+0x28a>
 80004e0:	4620      	mov	r0, r4
 80004e2:	e794      	b.n	800040e <__udivmoddi4+0x1e2>
 80004e4:	4640      	mov	r0, r8
 80004e6:	e7d1      	b.n	800048c <__udivmoddi4+0x260>
 80004e8:	46d0      	mov	r8, sl
 80004ea:	e77b      	b.n	80003e4 <__udivmoddi4+0x1b8>
 80004ec:	3b02      	subs	r3, #2
 80004ee:	4461      	add	r1, ip
 80004f0:	e732      	b.n	8000358 <__udivmoddi4+0x12c>
 80004f2:	4630      	mov	r0, r6
 80004f4:	e709      	b.n	800030a <__udivmoddi4+0xde>
 80004f6:	4464      	add	r4, ip
 80004f8:	3802      	subs	r0, #2
 80004fa:	e742      	b.n	8000382 <__udivmoddi4+0x156>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000504:	f001 f8db 	bl	80016be <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000508:	f000 f813 	bl	8000532 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800050c:	f000 faa2 	bl	8000a54 <MX_GPIO_Init>
  MX_FMC_Init();
 8000510:	f000 fa3a 	bl	8000988 <MX_FMC_Init>
  MX_I2C1_Init();
 8000514:	f000 f894 	bl	8000640 <MX_I2C1_Init>
  MX_SAI1_Init();
 8000518:	f000 f8d2 	bl	80006c0 <MX_SAI1_Init>
  MX_SDMMC1_SD_Init();
 800051c:	f000 f938 	bl	8000790 <MX_SDMMC1_SD_Init>
  MX_SPI2_Init();
 8000520:	f000 f95c 	bl	80007dc <MX_SPI2_Init>
  MX_USART2_UART_Init();
 8000524:	f000 f998 	bl	8000858 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000528:	f000 f9e2 	bl	80008f0 <MX_USART3_UART_Init>
  MX_CAN1_Init();
 800052c:	f000 f852 	bl	80005d4 <MX_CAN1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000530:	e7fe      	b.n	8000530 <main+0x30>

08000532 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000532:	b580      	push	{r7, lr}
 8000534:	b096      	sub	sp, #88	; 0x58
 8000536:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000538:	f107 0314 	add.w	r3, r7, #20
 800053c:	2244      	movs	r2, #68	; 0x44
 800053e:	2100      	movs	r1, #0
 8000540:	4618      	mov	r0, r3
 8000542:	f007 fba9 	bl	8007c98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000546:	463b      	mov	r3, r7
 8000548:	2200      	movs	r2, #0
 800054a:	601a      	str	r2, [r3, #0]
 800054c:	605a      	str	r2, [r3, #4]
 800054e:	609a      	str	r2, [r3, #8]
 8000550:	60da      	str	r2, [r3, #12]
 8000552:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8000554:	2000      	movs	r0, #0
 8000556:	f001 fe1d 	bl	8002194 <HAL_PWREx_ControlVoltageScaling>
 800055a:	4603      	mov	r3, r0
 800055c:	2b00      	cmp	r3, #0
 800055e:	d001      	beq.n	8000564 <SystemClock_Config+0x32>
  {
    Error_Handler();
 8000560:	f000 fca6 	bl	8000eb0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000564:	2310      	movs	r3, #16
 8000566:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000568:	2301      	movs	r3, #1
 800056a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800056c:	2300      	movs	r3, #0
 800056e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000570:	2360      	movs	r3, #96	; 0x60
 8000572:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000574:	2302      	movs	r3, #2
 8000576:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000578:	2301      	movs	r3, #1
 800057a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800057c:	2301      	movs	r3, #1
 800057e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000580:	233c      	movs	r3, #60	; 0x3c
 8000582:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV5;
 8000584:	2305      	movs	r3, #5
 8000586:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000588:	2302      	movs	r3, #2
 800058a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800058c:	2302      	movs	r3, #2
 800058e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000590:	f107 0314 	add.w	r3, r7, #20
 8000594:	4618      	mov	r0, r3
 8000596:	f001 feb1 	bl	80022fc <HAL_RCC_OscConfig>
 800059a:	4603      	mov	r3, r0
 800059c:	2b00      	cmp	r3, #0
 800059e:	d001      	beq.n	80005a4 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80005a0:	f000 fc86 	bl	8000eb0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005a4:	230f      	movs	r3, #15
 80005a6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005a8:	2303      	movs	r3, #3
 80005aa:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ac:	2300      	movs	r3, #0
 80005ae:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005b0:	2300      	movs	r3, #0
 80005b2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005b4:	2300      	movs	r3, #0
 80005b6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005b8:	463b      	mov	r3, r7
 80005ba:	2105      	movs	r1, #5
 80005bc:	4618      	mov	r0, r3
 80005be:	f002 fab7 	bl	8002b30 <HAL_RCC_ClockConfig>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d001      	beq.n	80005cc <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80005c8:	f000 fc72 	bl	8000eb0 <Error_Handler>
  }
}
 80005cc:	bf00      	nop
 80005ce:	3758      	adds	r7, #88	; 0x58
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}

080005d4 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80005d8:	4b17      	ldr	r3, [pc, #92]	; (8000638 <MX_CAN1_Init+0x64>)
 80005da:	4a18      	ldr	r2, [pc, #96]	; (800063c <MX_CAN1_Init+0x68>)
 80005dc:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 20;
 80005de:	4b16      	ldr	r3, [pc, #88]	; (8000638 <MX_CAN1_Init+0x64>)
 80005e0:	2214      	movs	r2, #20
 80005e2:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80005e4:	4b14      	ldr	r3, [pc, #80]	; (8000638 <MX_CAN1_Init+0x64>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80005ea:	4b13      	ldr	r3, [pc, #76]	; (8000638 <MX_CAN1_Init+0x64>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_10TQ;
 80005f0:	4b11      	ldr	r3, [pc, #68]	; (8000638 <MX_CAN1_Init+0x64>)
 80005f2:	f44f 2210 	mov.w	r2, #589824	; 0x90000
 80005f6:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 80005f8:	4b0f      	ldr	r3, [pc, #60]	; (8000638 <MX_CAN1_Init+0x64>)
 80005fa:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 80005fe:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000600:	4b0d      	ldr	r3, [pc, #52]	; (8000638 <MX_CAN1_Init+0x64>)
 8000602:	2200      	movs	r2, #0
 8000604:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000606:	4b0c      	ldr	r3, [pc, #48]	; (8000638 <MX_CAN1_Init+0x64>)
 8000608:	2200      	movs	r2, #0
 800060a:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800060c:	4b0a      	ldr	r3, [pc, #40]	; (8000638 <MX_CAN1_Init+0x64>)
 800060e:	2200      	movs	r2, #0
 8000610:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000612:	4b09      	ldr	r3, [pc, #36]	; (8000638 <MX_CAN1_Init+0x64>)
 8000614:	2200      	movs	r2, #0
 8000616:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000618:	4b07      	ldr	r3, [pc, #28]	; (8000638 <MX_CAN1_Init+0x64>)
 800061a:	2200      	movs	r2, #0
 800061c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800061e:	4b06      	ldr	r3, [pc, #24]	; (8000638 <MX_CAN1_Init+0x64>)
 8000620:	2200      	movs	r2, #0
 8000622:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000624:	4804      	ldr	r0, [pc, #16]	; (8000638 <MX_CAN1_Init+0x64>)
 8000626:	f001 f8e3 	bl	80017f0 <HAL_CAN_Init>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d001      	beq.n	8000634 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000630:	f000 fc3e 	bl	8000eb0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000634:	bf00      	nop
 8000636:	bd80      	pop	{r7, pc}
 8000638:	20000028 	.word	0x20000028
 800063c:	40006400 	.word	0x40006400

08000640 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000644:	4b1b      	ldr	r3, [pc, #108]	; (80006b4 <MX_I2C1_Init+0x74>)
 8000646:	4a1c      	ldr	r2, [pc, #112]	; (80006b8 <MX_I2C1_Init+0x78>)
 8000648:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 800064a:	4b1a      	ldr	r3, [pc, #104]	; (80006b4 <MX_I2C1_Init+0x74>)
 800064c:	4a1b      	ldr	r2, [pc, #108]	; (80006bc <MX_I2C1_Init+0x7c>)
 800064e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000650:	4b18      	ldr	r3, [pc, #96]	; (80006b4 <MX_I2C1_Init+0x74>)
 8000652:	2200      	movs	r2, #0
 8000654:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000656:	4b17      	ldr	r3, [pc, #92]	; (80006b4 <MX_I2C1_Init+0x74>)
 8000658:	2201      	movs	r2, #1
 800065a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800065c:	4b15      	ldr	r3, [pc, #84]	; (80006b4 <MX_I2C1_Init+0x74>)
 800065e:	2200      	movs	r2, #0
 8000660:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000662:	4b14      	ldr	r3, [pc, #80]	; (80006b4 <MX_I2C1_Init+0x74>)
 8000664:	2200      	movs	r2, #0
 8000666:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000668:	4b12      	ldr	r3, [pc, #72]	; (80006b4 <MX_I2C1_Init+0x74>)
 800066a:	2200      	movs	r2, #0
 800066c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800066e:	4b11      	ldr	r3, [pc, #68]	; (80006b4 <MX_I2C1_Init+0x74>)
 8000670:	2200      	movs	r2, #0
 8000672:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000674:	4b0f      	ldr	r3, [pc, #60]	; (80006b4 <MX_I2C1_Init+0x74>)
 8000676:	2200      	movs	r2, #0
 8000678:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800067a:	480e      	ldr	r0, [pc, #56]	; (80006b4 <MX_I2C1_Init+0x74>)
 800067c:	f001 fc44 	bl	8001f08 <HAL_I2C_Init>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000686:	f000 fc13 	bl	8000eb0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800068a:	2100      	movs	r1, #0
 800068c:	4809      	ldr	r0, [pc, #36]	; (80006b4 <MX_I2C1_Init+0x74>)
 800068e:	f001 fcca 	bl	8002026 <HAL_I2CEx_ConfigAnalogFilter>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000698:	f000 fc0a 	bl	8000eb0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800069c:	2100      	movs	r1, #0
 800069e:	4805      	ldr	r0, [pc, #20]	; (80006b4 <MX_I2C1_Init+0x74>)
 80006a0:	f001 fd0c 	bl	80020bc <HAL_I2CEx_ConfigDigitalFilter>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80006aa:	f000 fc01 	bl	8000eb0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006ae:	bf00      	nop
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	20000050 	.word	0x20000050
 80006b8:	40005400 	.word	0x40005400
 80006bc:	307075b1 	.word	0x307075b1

080006c0 <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 80006c4:	4b2f      	ldr	r3, [pc, #188]	; (8000784 <MX_SAI1_Init+0xc4>)
 80006c6:	4a30      	ldr	r2, [pc, #192]	; (8000788 <MX_SAI1_Init+0xc8>)
 80006c8:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 80006ca:	4b2e      	ldr	r3, [pc, #184]	; (8000784 <MX_SAI1_Init+0xc4>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 80006d0:	4b2c      	ldr	r3, [pc, #176]	; (8000784 <MX_SAI1_Init+0xc4>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_8;
 80006d6:	4b2b      	ldr	r3, [pc, #172]	; (8000784 <MX_SAI1_Init+0xc4>)
 80006d8:	2240      	movs	r2, #64	; 0x40
 80006da:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 80006dc:	4b29      	ldr	r3, [pc, #164]	; (8000784 <MX_SAI1_Init+0xc4>)
 80006de:	2200      	movs	r2, #0
 80006e0:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 80006e2:	4b28      	ldr	r3, [pc, #160]	; (8000784 <MX_SAI1_Init+0xc4>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 80006e8:	4b26      	ldr	r3, [pc, #152]	; (8000784 <MX_SAI1_Init+0xc4>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80006ee:	4b25      	ldr	r3, [pc, #148]	; (8000784 <MX_SAI1_Init+0xc4>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 80006f4:	4b23      	ldr	r3, [pc, #140]	; (8000784 <MX_SAI1_Init+0xc4>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.MckOverSampling = SAI_MCK_OVERSAMPLING_DISABLE;
 80006fa:	4b22      	ldr	r3, [pc, #136]	; (8000784 <MX_SAI1_Init+0xc4>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000700:	4b20      	ldr	r3, [pc, #128]	; (8000784 <MX_SAI1_Init+0xc4>)
 8000702:	2200      	movs	r2, #0
 8000704:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8000706:	4b1f      	ldr	r3, [pc, #124]	; (8000784 <MX_SAI1_Init+0xc4>)
 8000708:	4a20      	ldr	r2, [pc, #128]	; (800078c <MX_SAI1_Init+0xcc>)
 800070a:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800070c:	4b1d      	ldr	r3, [pc, #116]	; (8000784 <MX_SAI1_Init+0xc4>)
 800070e:	2200      	movs	r2, #0
 8000710:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8000712:	4b1c      	ldr	r3, [pc, #112]	; (8000784 <MX_SAI1_Init+0xc4>)
 8000714:	2200      	movs	r2, #0
 8000716:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8000718:	4b1a      	ldr	r3, [pc, #104]	; (8000784 <MX_SAI1_Init+0xc4>)
 800071a:	2200      	movs	r2, #0
 800071c:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800071e:	4b19      	ldr	r3, [pc, #100]	; (8000784 <MX_SAI1_Init+0xc4>)
 8000720:	2200      	movs	r2, #0
 8000722:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.Init.PdmInit.Activation = DISABLE;
 8000724:	4b17      	ldr	r3, [pc, #92]	; (8000784 <MX_SAI1_Init+0xc4>)
 8000726:	2200      	movs	r2, #0
 8000728:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsai_BlockA1.Init.PdmInit.MicPairsNbr = 0;
 800072c:	4b15      	ldr	r3, [pc, #84]	; (8000784 <MX_SAI1_Init+0xc4>)
 800072e:	2200      	movs	r2, #0
 8000730:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA1.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 8000732:	4b14      	ldr	r3, [pc, #80]	; (8000784 <MX_SAI1_Init+0xc4>)
 8000734:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000738:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA1.FrameInit.FrameLength = 8;
 800073a:	4b12      	ldr	r3, [pc, #72]	; (8000784 <MX_SAI1_Init+0xc4>)
 800073c:	2208      	movs	r2, #8
 800073e:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 8000740:	4b10      	ldr	r3, [pc, #64]	; (8000784 <MX_SAI1_Init+0xc4>)
 8000742:	2201      	movs	r2, #1
 8000744:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000746:	4b0f      	ldr	r3, [pc, #60]	; (8000784 <MX_SAI1_Init+0xc4>)
 8000748:	2200      	movs	r2, #0
 800074a:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800074c:	4b0d      	ldr	r3, [pc, #52]	; (8000784 <MX_SAI1_Init+0xc4>)
 800074e:	2200      	movs	r2, #0
 8000750:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000752:	4b0c      	ldr	r3, [pc, #48]	; (8000784 <MX_SAI1_Init+0xc4>)
 8000754:	2200      	movs	r2, #0
 8000756:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 8000758:	4b0a      	ldr	r3, [pc, #40]	; (8000784 <MX_SAI1_Init+0xc4>)
 800075a:	2200      	movs	r2, #0
 800075c:	665a      	str	r2, [r3, #100]	; 0x64
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 800075e:	4b09      	ldr	r3, [pc, #36]	; (8000784 <MX_SAI1_Init+0xc4>)
 8000760:	2200      	movs	r2, #0
 8000762:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_BlockA1.SlotInit.SlotNumber = 1;
 8000764:	4b07      	ldr	r3, [pc, #28]	; (8000784 <MX_SAI1_Init+0xc4>)
 8000766:	2201      	movs	r2, #1
 8000768:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_BlockA1.SlotInit.SlotActive = 0x00000000;
 800076a:	4b06      	ldr	r3, [pc, #24]	; (8000784 <MX_SAI1_Init+0xc4>)
 800076c:	2200      	movs	r2, #0
 800076e:	671a      	str	r2, [r3, #112]	; 0x70
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 8000770:	4804      	ldr	r0, [pc, #16]	; (8000784 <MX_SAI1_Init+0xc4>)
 8000772:	f004 fa41 	bl	8004bf8 <HAL_SAI_Init>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <MX_SAI1_Init+0xc0>
  {
    Error_Handler();
 800077c:	f000 fb98 	bl	8000eb0 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8000780:	bf00      	nop
 8000782:	bd80      	pop	{r7, pc}
 8000784:	200000a4 	.word	0x200000a4
 8000788:	40015404 	.word	0x40015404
 800078c:	0002ee00 	.word	0x0002ee00

08000790 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000794:	4b0f      	ldr	r3, [pc, #60]	; (80007d4 <MX_SDMMC1_SD_Init+0x44>)
 8000796:	4a10      	ldr	r2, [pc, #64]	; (80007d8 <MX_SDMMC1_SD_Init+0x48>)
 8000798:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800079a:	4b0e      	ldr	r3, [pc, #56]	; (80007d4 <MX_SDMMC1_SD_Init+0x44>)
 800079c:	2200      	movs	r2, #0
 800079e:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80007a0:	4b0c      	ldr	r3, [pc, #48]	; (80007d4 <MX_SDMMC1_SD_Init+0x44>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 80007a6:	4b0b      	ldr	r3, [pc, #44]	; (80007d4 <MX_SDMMC1_SD_Init+0x44>)
 80007a8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007ac:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80007ae:	4b09      	ldr	r3, [pc, #36]	; (80007d4 <MX_SDMMC1_SD_Init+0x44>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 80007b4:	4b07      	ldr	r3, [pc, #28]	; (80007d4 <MX_SDMMC1_SD_Init+0x44>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	615a      	str	r2, [r3, #20]
  hsd1.Init.Transceiver = SDMMC_TRANSCEIVER_DISABLE;
 80007ba:	4b06      	ldr	r3, [pc, #24]	; (80007d4 <MX_SDMMC1_SD_Init+0x44>)
 80007bc:	2200      	movs	r2, #0
 80007be:	619a      	str	r2, [r3, #24]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 80007c0:	4804      	ldr	r0, [pc, #16]	; (80007d4 <MX_SDMMC1_SD_Init+0x44>)
 80007c2:	f004 fc31 	bl	8005028 <HAL_SD_Init>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <MX_SDMMC1_SD_Init+0x40>
  {
    Error_Handler();
 80007cc:	f000 fb70 	bl	8000eb0 <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 80007d0:	bf00      	nop
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	20000138 	.word	0x20000138
 80007d8:	50062400 	.word	0x50062400

080007dc <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80007e0:	4b1b      	ldr	r3, [pc, #108]	; (8000850 <MX_SPI2_Init+0x74>)
 80007e2:	4a1c      	ldr	r2, [pc, #112]	; (8000854 <MX_SPI2_Init+0x78>)
 80007e4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80007e6:	4b1a      	ldr	r3, [pc, #104]	; (8000850 <MX_SPI2_Init+0x74>)
 80007e8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80007ec:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80007ee:	4b18      	ldr	r3, [pc, #96]	; (8000850 <MX_SPI2_Init+0x74>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 80007f4:	4b16      	ldr	r3, [pc, #88]	; (8000850 <MX_SPI2_Init+0x74>)
 80007f6:	f44f 7240 	mov.w	r2, #768	; 0x300
 80007fa:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007fc:	4b14      	ldr	r3, [pc, #80]	; (8000850 <MX_SPI2_Init+0x74>)
 80007fe:	2200      	movs	r2, #0
 8000800:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000802:	4b13      	ldr	r3, [pc, #76]	; (8000850 <MX_SPI2_Init+0x74>)
 8000804:	2200      	movs	r2, #0
 8000806:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000808:	4b11      	ldr	r3, [pc, #68]	; (8000850 <MX_SPI2_Init+0x74>)
 800080a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800080e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000810:	4b0f      	ldr	r3, [pc, #60]	; (8000850 <MX_SPI2_Init+0x74>)
 8000812:	2208      	movs	r2, #8
 8000814:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000816:	4b0e      	ldr	r3, [pc, #56]	; (8000850 <MX_SPI2_Init+0x74>)
 8000818:	2200      	movs	r2, #0
 800081a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800081c:	4b0c      	ldr	r3, [pc, #48]	; (8000850 <MX_SPI2_Init+0x74>)
 800081e:	2200      	movs	r2, #0
 8000820:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000822:	4b0b      	ldr	r3, [pc, #44]	; (8000850 <MX_SPI2_Init+0x74>)
 8000824:	2200      	movs	r2, #0
 8000826:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000828:	4b09      	ldr	r3, [pc, #36]	; (8000850 <MX_SPI2_Init+0x74>)
 800082a:	2207      	movs	r2, #7
 800082c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800082e:	4b08      	ldr	r3, [pc, #32]	; (8000850 <MX_SPI2_Init+0x74>)
 8000830:	2200      	movs	r2, #0
 8000832:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000834:	4b06      	ldr	r3, [pc, #24]	; (8000850 <MX_SPI2_Init+0x74>)
 8000836:	2208      	movs	r2, #8
 8000838:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800083a:	4805      	ldr	r0, [pc, #20]	; (8000850 <MX_SPI2_Init+0x74>)
 800083c:	f005 fcdf 	bl	80061fe <HAL_SPI_Init>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000846:	f000 fb33 	bl	8000eb0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800084a:	bf00      	nop
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	200001b8 	.word	0x200001b8
 8000854:	40003800 	.word	0x40003800

08000858 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800085c:	4b22      	ldr	r3, [pc, #136]	; (80008e8 <MX_USART2_UART_Init+0x90>)
 800085e:	4a23      	ldr	r2, [pc, #140]	; (80008ec <MX_USART2_UART_Init+0x94>)
 8000860:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000862:	4b21      	ldr	r3, [pc, #132]	; (80008e8 <MX_USART2_UART_Init+0x90>)
 8000864:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000868:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800086a:	4b1f      	ldr	r3, [pc, #124]	; (80008e8 <MX_USART2_UART_Init+0x90>)
 800086c:	2200      	movs	r2, #0
 800086e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000870:	4b1d      	ldr	r3, [pc, #116]	; (80008e8 <MX_USART2_UART_Init+0x90>)
 8000872:	2200      	movs	r2, #0
 8000874:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000876:	4b1c      	ldr	r3, [pc, #112]	; (80008e8 <MX_USART2_UART_Init+0x90>)
 8000878:	2200      	movs	r2, #0
 800087a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800087c:	4b1a      	ldr	r3, [pc, #104]	; (80008e8 <MX_USART2_UART_Init+0x90>)
 800087e:	220c      	movs	r2, #12
 8000880:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000882:	4b19      	ldr	r3, [pc, #100]	; (80008e8 <MX_USART2_UART_Init+0x90>)
 8000884:	2200      	movs	r2, #0
 8000886:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000888:	4b17      	ldr	r3, [pc, #92]	; (80008e8 <MX_USART2_UART_Init+0x90>)
 800088a:	2200      	movs	r2, #0
 800088c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800088e:	4b16      	ldr	r3, [pc, #88]	; (80008e8 <MX_USART2_UART_Init+0x90>)
 8000890:	2200      	movs	r2, #0
 8000892:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000894:	4b14      	ldr	r3, [pc, #80]	; (80008e8 <MX_USART2_UART_Init+0x90>)
 8000896:	2200      	movs	r2, #0
 8000898:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800089a:	4b13      	ldr	r3, [pc, #76]	; (80008e8 <MX_USART2_UART_Init+0x90>)
 800089c:	2200      	movs	r2, #0
 800089e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008a0:	4811      	ldr	r0, [pc, #68]	; (80008e8 <MX_USART2_UART_Init+0x90>)
 80008a2:	f005 fd97 	bl	80063d4 <HAL_UART_Init>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d001      	beq.n	80008b0 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80008ac:	f000 fb00 	bl	8000eb0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008b0:	2100      	movs	r1, #0
 80008b2:	480d      	ldr	r0, [pc, #52]	; (80008e8 <MX_USART2_UART_Init+0x90>)
 80008b4:	f006 fac8 	bl	8006e48 <HAL_UARTEx_SetTxFifoThreshold>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80008be:	f000 faf7 	bl	8000eb0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008c2:	2100      	movs	r1, #0
 80008c4:	4808      	ldr	r0, [pc, #32]	; (80008e8 <MX_USART2_UART_Init+0x90>)
 80008c6:	f006 fafd 	bl	8006ec4 <HAL_UARTEx_SetRxFifoThreshold>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80008d0:	f000 faee 	bl	8000eb0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80008d4:	4804      	ldr	r0, [pc, #16]	; (80008e8 <MX_USART2_UART_Init+0x90>)
 80008d6:	f006 fa7e 	bl	8006dd6 <HAL_UARTEx_DisableFifoMode>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80008e0:	f000 fae6 	bl	8000eb0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008e4:	bf00      	nop
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	2000021c 	.word	0x2000021c
 80008ec:	40004400 	.word	0x40004400

080008f0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80008f4:	4b22      	ldr	r3, [pc, #136]	; (8000980 <MX_USART3_UART_Init+0x90>)
 80008f6:	4a23      	ldr	r2, [pc, #140]	; (8000984 <MX_USART3_UART_Init+0x94>)
 80008f8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80008fa:	4b21      	ldr	r3, [pc, #132]	; (8000980 <MX_USART3_UART_Init+0x90>)
 80008fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000900:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000902:	4b1f      	ldr	r3, [pc, #124]	; (8000980 <MX_USART3_UART_Init+0x90>)
 8000904:	2200      	movs	r2, #0
 8000906:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000908:	4b1d      	ldr	r3, [pc, #116]	; (8000980 <MX_USART3_UART_Init+0x90>)
 800090a:	2200      	movs	r2, #0
 800090c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800090e:	4b1c      	ldr	r3, [pc, #112]	; (8000980 <MX_USART3_UART_Init+0x90>)
 8000910:	2200      	movs	r2, #0
 8000912:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000914:	4b1a      	ldr	r3, [pc, #104]	; (8000980 <MX_USART3_UART_Init+0x90>)
 8000916:	220c      	movs	r2, #12
 8000918:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800091a:	4b19      	ldr	r3, [pc, #100]	; (8000980 <MX_USART3_UART_Init+0x90>)
 800091c:	2200      	movs	r2, #0
 800091e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000920:	4b17      	ldr	r3, [pc, #92]	; (8000980 <MX_USART3_UART_Init+0x90>)
 8000922:	2200      	movs	r2, #0
 8000924:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000926:	4b16      	ldr	r3, [pc, #88]	; (8000980 <MX_USART3_UART_Init+0x90>)
 8000928:	2200      	movs	r2, #0
 800092a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800092c:	4b14      	ldr	r3, [pc, #80]	; (8000980 <MX_USART3_UART_Init+0x90>)
 800092e:	2200      	movs	r2, #0
 8000930:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000932:	4b13      	ldr	r3, [pc, #76]	; (8000980 <MX_USART3_UART_Init+0x90>)
 8000934:	2200      	movs	r2, #0
 8000936:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000938:	4811      	ldr	r0, [pc, #68]	; (8000980 <MX_USART3_UART_Init+0x90>)
 800093a:	f005 fd4b 	bl	80063d4 <HAL_UART_Init>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d001      	beq.n	8000948 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000944:	f000 fab4 	bl	8000eb0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000948:	2100      	movs	r1, #0
 800094a:	480d      	ldr	r0, [pc, #52]	; (8000980 <MX_USART3_UART_Init+0x90>)
 800094c:	f006 fa7c 	bl	8006e48 <HAL_UARTEx_SetTxFifoThreshold>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000956:	f000 faab 	bl	8000eb0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800095a:	2100      	movs	r1, #0
 800095c:	4808      	ldr	r0, [pc, #32]	; (8000980 <MX_USART3_UART_Init+0x90>)
 800095e:	f006 fab1 	bl	8006ec4 <HAL_UARTEx_SetRxFifoThreshold>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000968:	f000 faa2 	bl	8000eb0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800096c:	4804      	ldr	r0, [pc, #16]	; (8000980 <MX_USART3_UART_Init+0x90>)
 800096e:	f006 fa32 	bl	8006dd6 <HAL_UARTEx_DisableFifoMode>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d001      	beq.n	800097c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000978:	f000 fa9a 	bl	8000eb0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800097c:	bf00      	nop
 800097e:	bd80      	pop	{r7, pc}
 8000980:	200002ac 	.word	0x200002ac
 8000984:	40004800 	.word	0x40004800

08000988 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b088      	sub	sp, #32
 800098c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 800098e:	463b      	mov	r3, r7
 8000990:	2220      	movs	r2, #32
 8000992:	2100      	movs	r1, #0
 8000994:	4618      	mov	r0, r3
 8000996:	f007 f97f 	bl	8007c98 <memset>

  /* USER CODE END FMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 800099a:	4b2c      	ldr	r3, [pc, #176]	; (8000a4c <MX_FMC_Init+0xc4>)
 800099c:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 80009a0:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 80009a2:	4b2a      	ldr	r3, [pc, #168]	; (8000a4c <MX_FMC_Init+0xc4>)
 80009a4:	4a2a      	ldr	r2, [pc, #168]	; (8000a50 <MX_FMC_Init+0xc8>)
 80009a6:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FMC_NORSRAM_BANK1;
 80009a8:	4b28      	ldr	r3, [pc, #160]	; (8000a4c <MX_FMC_Init+0xc4>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 80009ae:	4b27      	ldr	r3, [pc, #156]	; (8000a4c <MX_FMC_Init+0xc4>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FMC_MEMORY_TYPE_PSRAM;
 80009b4:	4b25      	ldr	r3, [pc, #148]	; (8000a4c <MX_FMC_Init+0xc4>)
 80009b6:	2204      	movs	r2, #4
 80009b8:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 80009ba:	4b24      	ldr	r3, [pc, #144]	; (8000a4c <MX_FMC_Init+0xc4>)
 80009bc:	2210      	movs	r2, #16
 80009be:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_ENABLE;
 80009c0:	4b22      	ldr	r3, [pc, #136]	; (8000a4c <MX_FMC_Init+0xc4>)
 80009c2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80009c6:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 80009c8:	4b20      	ldr	r3, [pc, #128]	; (8000a4c <MX_FMC_Init+0xc4>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 80009ce:	4b1f      	ldr	r3, [pc, #124]	; (8000a4c <MX_FMC_Init+0xc4>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	621a      	str	r2, [r3, #32]
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_DISABLE;
 80009d4:	4b1d      	ldr	r3, [pc, #116]	; (8000a4c <MX_FMC_Init+0xc4>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_ENABLE;
 80009da:	4b1c      	ldr	r3, [pc, #112]	; (8000a4c <MX_FMC_Init+0xc4>)
 80009dc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80009e0:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 80009e2:	4b1a      	ldr	r3, [pc, #104]	; (8000a4c <MX_FMC_Init+0xc4>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 80009e8:	4b18      	ldr	r3, [pc, #96]	; (8000a4c <MX_FMC_Init+0xc4>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.WriteBurst = FMC_WRITE_BURST_ENABLE;
 80009ee:	4b17      	ldr	r3, [pc, #92]	; (8000a4c <MX_FMC_Init+0xc4>)
 80009f0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80009f4:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 80009f6:	4b15      	ldr	r3, [pc, #84]	; (8000a4c <MX_FMC_Init+0xc4>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 80009fc:	4b13      	ldr	r3, [pc, #76]	; (8000a4c <MX_FMC_Init+0xc4>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.NBLSetupTime = 0;
 8000a02:	4b12      	ldr	r3, [pc, #72]	; (8000a4c <MX_FMC_Init+0xc4>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	645a      	str	r2, [r3, #68]	; 0x44
  hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 8000a08:	4b10      	ldr	r3, [pc, #64]	; (8000a4c <MX_FMC_Init+0xc4>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Timing */
  Timing.AddressSetupTime = 15;
 8000a0e:	230f      	movs	r3, #15
 8000a10:	603b      	str	r3, [r7, #0]
  Timing.AddressHoldTime = 15;
 8000a12:	230f      	movs	r3, #15
 8000a14:	607b      	str	r3, [r7, #4]
  Timing.DataSetupTime = 255;
 8000a16:	23ff      	movs	r3, #255	; 0xff
 8000a18:	60bb      	str	r3, [r7, #8]
  Timing.DataHoldTime = 0;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8000a1e:	230f      	movs	r3, #15
 8000a20:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8000a22:	2310      	movs	r3, #16
 8000a24:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 2;
 8000a26:	2302      	movs	r3, #2
 8000a28:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8000a2e:	463b      	mov	r3, r7
 8000a30:	2200      	movs	r2, #0
 8000a32:	4619      	mov	r1, r3
 8000a34:	4805      	ldr	r0, [pc, #20]	; (8000a4c <MX_FMC_Init+0xc4>)
 8000a36:	f005 fc85 	bl	8006344 <HAL_SRAM_Init>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <MX_FMC_Init+0xbc>
  {
    Error_Handler( );
 8000a40:	f000 fa36 	bl	8000eb0 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000a44:	bf00      	nop
 8000a46:	3720      	adds	r7, #32
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	2000033c 	.word	0x2000033c
 8000a50:	a0000104 	.word	0xa0000104

08000a54 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b08e      	sub	sp, #56	; 0x38
 8000a58:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a5e:	2200      	movs	r2, #0
 8000a60:	601a      	str	r2, [r3, #0]
 8000a62:	605a      	str	r2, [r3, #4]
 8000a64:	609a      	str	r2, [r3, #8]
 8000a66:	60da      	str	r2, [r3, #12]
 8000a68:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000a6a:	4bb1      	ldr	r3, [pc, #708]	; (8000d30 <MX_GPIO_Init+0x2dc>)
 8000a6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a6e:	4ab0      	ldr	r2, [pc, #704]	; (8000d30 <MX_GPIO_Init+0x2dc>)
 8000a70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a76:	4bae      	ldr	r3, [pc, #696]	; (8000d30 <MX_GPIO_Init+0x2dc>)
 8000a78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a7e:	623b      	str	r3, [r7, #32]
 8000a80:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a82:	4bab      	ldr	r3, [pc, #684]	; (8000d30 <MX_GPIO_Init+0x2dc>)
 8000a84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a86:	4aaa      	ldr	r2, [pc, #680]	; (8000d30 <MX_GPIO_Init+0x2dc>)
 8000a88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a8e:	4ba8      	ldr	r3, [pc, #672]	; (8000d30 <MX_GPIO_Init+0x2dc>)
 8000a90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a96:	61fb      	str	r3, [r7, #28]
 8000a98:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a9a:	4ba5      	ldr	r3, [pc, #660]	; (8000d30 <MX_GPIO_Init+0x2dc>)
 8000a9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a9e:	4aa4      	ldr	r2, [pc, #656]	; (8000d30 <MX_GPIO_Init+0x2dc>)
 8000aa0:	f043 0310 	orr.w	r3, r3, #16
 8000aa4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000aa6:	4ba2      	ldr	r3, [pc, #648]	; (8000d30 <MX_GPIO_Init+0x2dc>)
 8000aa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aaa:	f003 0310 	and.w	r3, r3, #16
 8000aae:	61bb      	str	r3, [r7, #24]
 8000ab0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ab2:	4b9f      	ldr	r3, [pc, #636]	; (8000d30 <MX_GPIO_Init+0x2dc>)
 8000ab4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ab6:	4a9e      	ldr	r2, [pc, #632]	; (8000d30 <MX_GPIO_Init+0x2dc>)
 8000ab8:	f043 0302 	orr.w	r3, r3, #2
 8000abc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000abe:	4b9c      	ldr	r3, [pc, #624]	; (8000d30 <MX_GPIO_Init+0x2dc>)
 8000ac0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ac2:	f003 0302 	and.w	r3, r3, #2
 8000ac6:	617b      	str	r3, [r7, #20]
 8000ac8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aca:	4b99      	ldr	r3, [pc, #612]	; (8000d30 <MX_GPIO_Init+0x2dc>)
 8000acc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ace:	4a98      	ldr	r2, [pc, #608]	; (8000d30 <MX_GPIO_Init+0x2dc>)
 8000ad0:	f043 0301 	orr.w	r3, r3, #1
 8000ad4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ad6:	4b96      	ldr	r3, [pc, #600]	; (8000d30 <MX_GPIO_Init+0x2dc>)
 8000ad8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ada:	f003 0301 	and.w	r3, r3, #1
 8000ade:	613b      	str	r3, [r7, #16]
 8000ae0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ae2:	4b93      	ldr	r3, [pc, #588]	; (8000d30 <MX_GPIO_Init+0x2dc>)
 8000ae4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ae6:	4a92      	ldr	r2, [pc, #584]	; (8000d30 <MX_GPIO_Init+0x2dc>)
 8000ae8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000aec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000aee:	4b90      	ldr	r3, [pc, #576]	; (8000d30 <MX_GPIO_Init+0x2dc>)
 8000af0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000af2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000af6:	60fb      	str	r3, [r7, #12]
 8000af8:	68fb      	ldr	r3, [r7, #12]
  HAL_PWREx_EnableVddIO2();
 8000afa:	f001 fbef 	bl	80022dc <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000afe:	4b8c      	ldr	r3, [pc, #560]	; (8000d30 <MX_GPIO_Init+0x2dc>)
 8000b00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b02:	4a8b      	ldr	r2, [pc, #556]	; (8000d30 <MX_GPIO_Init+0x2dc>)
 8000b04:	f043 0308 	orr.w	r3, r3, #8
 8000b08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b0a:	4b89      	ldr	r3, [pc, #548]	; (8000d30 <MX_GPIO_Init+0x2dc>)
 8000b0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b0e:	f003 0308 	and.w	r3, r3, #8
 8000b12:	60bb      	str	r3, [r7, #8]
 8000b14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b16:	4b86      	ldr	r3, [pc, #536]	; (8000d30 <MX_GPIO_Init+0x2dc>)
 8000b18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b1a:	4a85      	ldr	r2, [pc, #532]	; (8000d30 <MX_GPIO_Init+0x2dc>)
 8000b1c:	f043 0304 	orr.w	r3, r3, #4
 8000b20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b22:	4b83      	ldr	r3, [pc, #524]	; (8000d30 <MX_GPIO_Init+0x2dc>)
 8000b24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b26:	f003 0304 	and.w	r3, r3, #4
 8000b2a:	607b      	str	r3, [r7, #4]
 8000b2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b2e:	4b80      	ldr	r3, [pc, #512]	; (8000d30 <MX_GPIO_Init+0x2dc>)
 8000b30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b32:	4a7f      	ldr	r2, [pc, #508]	; (8000d30 <MX_GPIO_Init+0x2dc>)
 8000b34:	f043 0320 	orr.w	r3, r3, #32
 8000b38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b3a:	4b7d      	ldr	r3, [pc, #500]	; (8000d30 <MX_GPIO_Init+0x2dc>)
 8000b3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b3e:	f003 0320 	and.w	r3, r3, #32
 8000b42:	603b      	str	r3, [r7, #0]
 8000b44:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, MIC_VDD_Pin|DSI_SPI_USART_CS_Pin|LED_GREEN_Pin, GPIO_PIN_RESET);
 8000b46:	2200      	movs	r2, #0
 8000b48:	f244 0114 	movw	r1, #16404	; 0x4014
 8000b4c:	4879      	ldr	r0, [pc, #484]	; (8000d34 <MX_GPIO_Init+0x2e0>)
 8000b4e:	f001 f9c3 	bl	8001ed8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(JOY_SEL_GPIO_Port, JOY_SEL_Pin, GPIO_PIN_RESET);
 8000b52:	2200      	movs	r2, #0
 8000b54:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b58:	4877      	ldr	r0, [pc, #476]	; (8000d38 <MX_GPIO_Init+0x2e4>)
 8000b5a:	f001 f9bd 	bl	8001ed8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_RESET);
 8000b5e:	2200      	movs	r2, #0
 8000b60:	2140      	movs	r1, #64	; 0x40
 8000b62:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b66:	f001 f9b7 	bl	8001ed8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MFX_WAKEUP_GPIO_Port, MFX_WAKEUP_Pin, GPIO_PIN_RESET);
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	2104      	movs	r1, #4
 8000b6e:	4873      	ldr	r0, [pc, #460]	; (8000d3c <MX_GPIO_Init+0x2e8>)
 8000b70:	f001 f9b2 	bl	8001ed8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OCTOSPIM_P2_IO1_Pin OCTOSPIM_P2_IO2_Pin OCTOSPIM_P2_CLK_Pin OCTOSPIM_P2_IO0_Pin */
  GPIO_InitStruct.Pin = OCTOSPIM_P2_IO1_Pin|OCTOSPIM_P2_IO2_Pin|OCTOSPIM_P2_CLK_Pin|OCTOSPIM_P2_IO0_Pin;
 8000b74:	f44f 6364 	mov.w	r3, #3648	; 0xe40
 8000b78:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b7a:	2302      	movs	r3, #2
 8000b7c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b82:	2303      	movs	r3, #3
 8000b84:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPIM_P2;
 8000b86:	2305      	movs	r3, #5
 8000b88:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000b8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b8e:	4619      	mov	r1, r3
 8000b90:	486b      	ldr	r0, [pc, #428]	; (8000d40 <MX_GPIO_Init+0x2ec>)
 8000b92:	f001 f80f 	bl	8001bb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : MIC_VDD_Pin DSI_SPI_USART_CS_Pin LED_GREEN_Pin */
  GPIO_InitStruct.Pin = MIC_VDD_Pin|DSI_SPI_USART_CS_Pin|LED_GREEN_Pin;
 8000b96:	f244 0314 	movw	r3, #16404	; 0x4014
 8000b9a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b9c:	2301      	movs	r3, #1
 8000b9e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000ba8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bac:	4619      	mov	r1, r3
 8000bae:	4861      	ldr	r0, [pc, #388]	; (8000d34 <MX_GPIO_Init+0x2e0>)
 8000bb0:	f001 f800 	bl	8001bb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8000bb4:	2310      	movs	r3, #16
 8000bb6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb8:	2302      	movs	r3, #2
 8000bba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000bc4:	2302      	movs	r3, #2
 8000bc6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8000bc8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bcc:	4619      	mov	r1, r3
 8000bce:	485b      	ldr	r0, [pc, #364]	; (8000d3c <MX_GPIO_Init+0x2e8>)
 8000bd0:	f000 fff0 	bl	8001bb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D7_Pin DCMI_D5_Pin DCMI_VSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_D7_Pin|DCMI_D5_Pin|DCMI_VSYNC_Pin;
 8000bd4:	23b0      	movs	r3, #176	; 0xb0
 8000bd6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd8:	2302      	movs	r3, #2
 8000bda:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be0:	2300      	movs	r3, #0
 8000be2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 8000be4:	230a      	movs	r3, #10
 8000be6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000be8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bec:	4619      	mov	r1, r3
 8000bee:	4854      	ldr	r0, [pc, #336]	; (8000d40 <MX_GPIO_Init+0x2ec>)
 8000bf0:	f000 ffe0 	bl	8001bb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : OCTOSPIM_P2_IO6_Pin OCTOSPIM_P2_DQS_Pin OCTOSPIM_P2_IO7_Pin OCTOSPIM_P2_CS_Pin */
  GPIO_InitStruct.Pin = OCTOSPIM_P2_IO6_Pin|OCTOSPIM_P2_DQS_Pin|OCTOSPIM_P2_IO7_Pin|OCTOSPIM_P2_CS_Pin;
 8000bf4:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 8000bf8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bfa:	2302      	movs	r3, #2
 8000bfc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c02:	2303      	movs	r3, #3
 8000c04:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPIM_P2;
 8000c06:	2305      	movs	r3, #5
 8000c08:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c0e:	4619      	mov	r1, r3
 8000c10:	484c      	ldr	r0, [pc, #304]	; (8000d44 <MX_GPIO_Init+0x2f0>)
 8000c12:	f000 ffcf 	bl	8001bb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MFX_IRQ_OUT_Pin */
  GPIO_InitStruct.Pin = MFX_IRQ_OUT_Pin;
 8000c16:	2302      	movs	r3, #2
 8000c18:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c1a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c1e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c20:	2300      	movs	r3, #0
 8000c22:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(MFX_IRQ_OUT_GPIO_Port, &GPIO_InitStruct);
 8000c24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c28:	4619      	mov	r1, r3
 8000c2a:	4845      	ldr	r0, [pc, #276]	; (8000d40 <MX_GPIO_Init+0x2ec>)
 8000c2c:	f000 ffc2 	bl	8001bb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D3_Pin DCMI_PIXCLK_Pin DCMI_D2_Pin */
  GPIO_InitStruct.Pin = DCMI_D3_Pin|DCMI_PIXCLK_Pin|DCMI_D2_Pin;
 8000c30:	f44f 53c1 	mov.w	r3, #6176	; 0x1820
 8000c34:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c36:	2302      	movs	r3, #2
 8000c38:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 8000c42:	230a      	movs	r3, #10
 8000c44:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000c46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	4839      	ldr	r0, [pc, #228]	; (8000d34 <MX_GPIO_Init+0x2e0>)
 8000c4e:	f000 ffb1 	bl	8001bb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D9_Pin;
 8000c52:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c56:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c58:	2302      	movs	r3, #2
 8000c5a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c60:	2300      	movs	r3, #0
 8000c62:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8000c64:	2303      	movs	r3, #3
 8000c66:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D9_GPIO_Port, &GPIO_InitStruct);
 8000c68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	4831      	ldr	r0, [pc, #196]	; (8000d34 <MX_GPIO_Init+0x2e0>)
 8000c70:	f000 ffa0 	bl	8001bb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : OCTOPSIM_P2_IO4_Pin OCTOSPIM_P2_IO5_Pin OCTOSPI_P2_IO3_Pin */
  GPIO_InitStruct.Pin = OCTOPSIM_P2_IO4_Pin|OCTOSPIM_P2_IO5_Pin|OCTOSPI_P2_IO3_Pin;
 8000c74:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000c78:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c7a:	2302      	movs	r3, #2
 8000c7c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c82:	2303      	movs	r3, #3
 8000c84:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPIM_P2;
 8000c86:	2305      	movs	r3, #5
 8000c88:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000c8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c8e:	4619      	mov	r1, r3
 8000c90:	4828      	ldr	r0, [pc, #160]	; (8000d34 <MX_GPIO_Init+0x2e0>)
 8000c92:	f000 ff8f 	bl	8001bb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTGFS_ID_Pin */
  GPIO_InitStruct.Pin = USB_OTGFS_ID_Pin;
 8000c96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c9a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c9c:	2302      	movs	r3, #2
 8000c9e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ca4:	2303      	movs	r3, #3
 8000ca6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000ca8:	230a      	movs	r3, #10
 8000caa:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_OTGFS_ID_GPIO_Port, &GPIO_InitStruct);
 8000cac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cb6:	f000 ff7d 	bl	8001bb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : JOY_SEL_Pin */
  GPIO_InitStruct.Pin = JOY_SEL_Pin;
 8000cba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cbe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(JOY_SEL_GPIO_Port, &GPIO_InitStruct);
 8000ccc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	4819      	ldr	r0, [pc, #100]	; (8000d38 <MX_GPIO_Init+0x2e4>)
 8000cd4:	f000 ff6e 	bl	8001bb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_14_Pin ARD_15_Pin */
  GPIO_InitStruct.Pin = ARD_14_Pin|ARD_15_Pin;
 8000cd8:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000cdc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cde:	2312      	movs	r3, #18
 8000ce0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ce6:	2303      	movs	r3, #3
 8000ce8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000cea:	2304      	movs	r3, #4
 8000cec:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000cee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	4813      	ldr	r0, [pc, #76]	; (8000d44 <MX_GPIO_Init+0x2f0>)
 8000cf6:	f000 ff5d 	bl	8001bb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : STMOD_INT_Pin */
  GPIO_InitStruct.Pin = STMOD_INT_Pin;
 8000cfa:	2340      	movs	r3, #64	; 0x40
 8000cfc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000cfe:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000d02:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d04:	2300      	movs	r3, #0
 8000d06:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(STMOD_INT_GPIO_Port, &GPIO_InitStruct);
 8000d08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	480a      	ldr	r0, [pc, #40]	; (8000d38 <MX_GPIO_Init+0x2e4>)
 8000d10:	f000 ff50 	bl	8001bb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : DFDATIN3_Pin DF_CKOUT_Pin */
  GPIO_InitStruct.Pin = DFDATIN3_Pin|DF_CKOUT_Pin;
 8000d14:	2384      	movs	r3, #132	; 0x84
 8000d16:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d18:	2302      	movs	r3, #2
 8000d1a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d20:	2300      	movs	r3, #0
 8000d22:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000d24:	2306      	movs	r3, #6
 8000d26:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	e00b      	b.n	8000d48 <MX_GPIO_Init+0x2f4>
 8000d30:	40021000 	.word	0x40021000
 8000d34:	48001c00 	.word	0x48001c00
 8000d38:	48000800 	.word	0x48000800
 8000d3c:	48000400 	.word	0x48000400
 8000d40:	48002000 	.word	0x48002000
 8000d44:	48001800 	.word	0x48001800
 8000d48:	4856      	ldr	r0, [pc, #344]	; (8000ea4 <MX_GPIO_Init+0x450>)
 8000d4a:	f000 ff33 	bl	8001bb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D0_Pin ARD_D1_Pin */
  GPIO_InitStruct.Pin = ARD_D0_Pin|ARD_D1_Pin;
 8000d4e:	2303      	movs	r3, #3
 8000d50:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d52:	2302      	movs	r3, #2
 8000d54:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d56:	2300      	movs	r3, #0
 8000d58:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d5a:	2303      	movs	r3, #3
 8000d5c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000d5e:	2308      	movs	r3, #8
 8000d60:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d66:	4619      	mov	r1, r3
 8000d68:	484e      	ldr	r0, [pc, #312]	; (8000ea4 <MX_GPIO_Init+0x450>)
 8000d6a:	f000 ff23 	bl	8001bb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A2_Pin ARD_A1_Pin */
  GPIO_InitStruct.Pin = ARD_A2_Pin|ARD_A1_Pin;
 8000d6e:	2318      	movs	r3, #24
 8000d70:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000d72:	230b      	movs	r3, #11
 8000d74:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d76:	2300      	movs	r3, #0
 8000d78:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d7e:	4619      	mov	r1, r3
 8000d80:	4848      	ldr	r0, [pc, #288]	; (8000ea4 <MX_GPIO_Init+0x450>)
 8000d82:	f000 ff17 	bl	8001bb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A4_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A4_Pin|ARD_A0_Pin;
 8000d86:	2381      	movs	r3, #129	; 0x81
 8000d88:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000d8a:	230b      	movs	r3, #11
 8000d8c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d96:	4619      	mov	r1, r3
 8000d98:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d9c:	f000 ff0a 	bl	8001bb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : STMOD_PWM_Pin */
  GPIO_InitStruct.Pin = STMOD_PWM_Pin;
 8000da0:	2320      	movs	r3, #32
 8000da2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da4:	2302      	movs	r3, #2
 8000da6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da8:	2300      	movs	r3, #0
 8000daa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dac:	2300      	movs	r3, #0
 8000dae:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000db0:	2301      	movs	r3, #1
 8000db2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(STMOD_PWM_GPIO_Port, &GPIO_InitStruct);
 8000db4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000db8:	4619      	mov	r1, r3
 8000dba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dbe:	f000 fef9 	bl	8001bb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_CS_Pin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin;
 8000dc2:	2340      	movs	r3, #64	; 0x40
 8000dc4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 8000dd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ddc:	f000 feea 	bl	8001bb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D5_Pin */
  GPIO_InitStruct.Pin = ARD_D5_Pin;
 8000de0:	2302      	movs	r3, #2
 8000de2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de4:	2302      	movs	r3, #2
 8000de6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de8:	2300      	movs	r3, #0
 8000dea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dec:	2300      	movs	r3, #0
 8000dee:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8000df0:	2302      	movs	r3, #2
 8000df2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D5_GPIO_Port, &GPIO_InitStruct);
 8000df4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000df8:	4619      	mov	r1, r3
 8000dfa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dfe:	f000 fed9 	bl	8001bb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : DSI_TE_Pin */
  GPIO_InitStruct.Pin = DSI_TE_Pin;
 8000e02:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000e06:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e08:	2302      	movs	r3, #2
 8000e0a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e10:	2300      	movs	r3, #0
 8000e12:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_DSI;
 8000e14:	230b      	movs	r3, #11
 8000e16:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(DSI_TE_GPIO_Port, &GPIO_InitStruct);
 8000e18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	4822      	ldr	r0, [pc, #136]	; (8000ea8 <MX_GPIO_Init+0x454>)
 8000e20:	f000 fec8 	bl	8001bb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_HSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin;
 8000e24:	2310      	movs	r3, #16
 8000e26:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e28:	2302      	movs	r3, #2
 8000e2a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e30:	2300      	movs	r3, #0
 8000e32:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 8000e34:	230a      	movs	r3, #10
 8000e36:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(DCMI_HSYNC_GPIO_Port, &GPIO_InitStruct);
 8000e38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e42:	f000 feb7 	bl	8001bb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_A3_Pin */
  GPIO_InitStruct.Pin = ARD_A3_Pin;
 8000e46:	2301      	movs	r3, #1
 8000e48:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000e4a:	230b      	movs	r3, #11
 8000e4c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ARD_A3_GPIO_Port, &GPIO_InitStruct);
 8000e52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e56:	4619      	mov	r1, r3
 8000e58:	4814      	ldr	r0, [pc, #80]	; (8000eac <MX_GPIO_Init+0x458>)
 8000e5a:	f000 feab 	bl	8001bb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MFX_WAKEUP_Pin */
  GPIO_InitStruct.Pin = MFX_WAKEUP_Pin;
 8000e5e:	2304      	movs	r3, #4
 8000e60:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e62:	2301      	movs	r3, #1
 8000e64:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e66:	2300      	movs	r3, #0
 8000e68:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(MFX_WAKEUP_GPIO_Port, &GPIO_InitStruct);
 8000e6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e72:	4619      	mov	r1, r3
 8000e74:	480d      	ldr	r0, [pc, #52]	; (8000eac <MX_GPIO_Init+0x458>)
 8000e76:	f000 fe9d 	bl	8001bb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : DFDATIN1_Pin */
  GPIO_InitStruct.Pin = DFDATIN1_Pin;
 8000e7a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e7e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e80:	2302      	movs	r3, #2
 8000e82:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e84:	2300      	movs	r3, #0
 8000e86:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000e8c:	2306      	movs	r3, #6
 8000e8e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(DFDATIN1_GPIO_Port, &GPIO_InitStruct);
 8000e90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e94:	4619      	mov	r1, r3
 8000e96:	4805      	ldr	r0, [pc, #20]	; (8000eac <MX_GPIO_Init+0x458>)
 8000e98:	f000 fe8c 	bl	8001bb4 <HAL_GPIO_Init>

}
 8000e9c:	bf00      	nop
 8000e9e:	3738      	adds	r7, #56	; 0x38
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	48000800 	.word	0x48000800
 8000ea8:	48001400 	.word	0x48001400
 8000eac:	48000400 	.word	0x48000400

08000eb0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000eb4:	b672      	cpsid	i
}
 8000eb6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000eb8:	e7fe      	b.n	8000eb8 <Error_Handler+0x8>
	...

08000ebc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b083      	sub	sp, #12
 8000ec0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ec2:	4b0f      	ldr	r3, [pc, #60]	; (8000f00 <HAL_MspInit+0x44>)
 8000ec4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ec6:	4a0e      	ldr	r2, [pc, #56]	; (8000f00 <HAL_MspInit+0x44>)
 8000ec8:	f043 0301 	orr.w	r3, r3, #1
 8000ecc:	6613      	str	r3, [r2, #96]	; 0x60
 8000ece:	4b0c      	ldr	r3, [pc, #48]	; (8000f00 <HAL_MspInit+0x44>)
 8000ed0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ed2:	f003 0301 	and.w	r3, r3, #1
 8000ed6:	607b      	str	r3, [r7, #4]
 8000ed8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eda:	4b09      	ldr	r3, [pc, #36]	; (8000f00 <HAL_MspInit+0x44>)
 8000edc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ede:	4a08      	ldr	r2, [pc, #32]	; (8000f00 <HAL_MspInit+0x44>)
 8000ee0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ee4:	6593      	str	r3, [r2, #88]	; 0x58
 8000ee6:	4b06      	ldr	r3, [pc, #24]	; (8000f00 <HAL_MspInit+0x44>)
 8000ee8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eee:	603b      	str	r3, [r7, #0]
 8000ef0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ef2:	bf00      	nop
 8000ef4:	370c      	adds	r7, #12
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop
 8000f00:	40021000 	.word	0x40021000

08000f04 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b08a      	sub	sp, #40	; 0x28
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f0c:	f107 0314 	add.w	r3, r7, #20
 8000f10:	2200      	movs	r2, #0
 8000f12:	601a      	str	r2, [r3, #0]
 8000f14:	605a      	str	r2, [r3, #4]
 8000f16:	609a      	str	r2, [r3, #8]
 8000f18:	60da      	str	r2, [r3, #12]
 8000f1a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4a18      	ldr	r2, [pc, #96]	; (8000f84 <HAL_CAN_MspInit+0x80>)
 8000f22:	4293      	cmp	r3, r2
 8000f24:	d129      	bne.n	8000f7a <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000f26:	4b18      	ldr	r3, [pc, #96]	; (8000f88 <HAL_CAN_MspInit+0x84>)
 8000f28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f2a:	4a17      	ldr	r2, [pc, #92]	; (8000f88 <HAL_CAN_MspInit+0x84>)
 8000f2c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f30:	6593      	str	r3, [r2, #88]	; 0x58
 8000f32:	4b15      	ldr	r3, [pc, #84]	; (8000f88 <HAL_CAN_MspInit+0x84>)
 8000f34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f3a:	613b      	str	r3, [r7, #16]
 8000f3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f3e:	4b12      	ldr	r3, [pc, #72]	; (8000f88 <HAL_CAN_MspInit+0x84>)
 8000f40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f42:	4a11      	ldr	r2, [pc, #68]	; (8000f88 <HAL_CAN_MspInit+0x84>)
 8000f44:	f043 0301 	orr.w	r3, r3, #1
 8000f48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f4a:	4b0f      	ldr	r3, [pc, #60]	; (8000f88 <HAL_CAN_MspInit+0x84>)
 8000f4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f4e:	f003 0301 	and.w	r3, r3, #1
 8000f52:	60fb      	str	r3, [r7, #12]
 8000f54:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA12     ------> CAN1_TX
    PA11     ------> CAN1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11;
 8000f56:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000f5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f5c:	2302      	movs	r3, #2
 8000f5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f60:	2300      	movs	r3, #0
 8000f62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f64:	2303      	movs	r3, #3
 8000f66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000f68:	2309      	movs	r3, #9
 8000f6a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f6c:	f107 0314 	add.w	r3, r7, #20
 8000f70:	4619      	mov	r1, r3
 8000f72:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f76:	f000 fe1d 	bl	8001bb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000f7a:	bf00      	nop
 8000f7c:	3728      	adds	r7, #40	; 0x28
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	40006400 	.word	0x40006400
 8000f88:	40021000 	.word	0x40021000

08000f8c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b0b2      	sub	sp, #200	; 0xc8
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f94:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000f98:	2200      	movs	r2, #0
 8000f9a:	601a      	str	r2, [r3, #0]
 8000f9c:	605a      	str	r2, [r3, #4]
 8000f9e:	609a      	str	r2, [r3, #8]
 8000fa0:	60da      	str	r2, [r3, #12]
 8000fa2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fa4:	f107 0318 	add.w	r3, r7, #24
 8000fa8:	229c      	movs	r2, #156	; 0x9c
 8000faa:	2100      	movs	r1, #0
 8000fac:	4618      	mov	r0, r3
 8000fae:	f006 fe73 	bl	8007c98 <memset>
  if(hi2c->Instance==I2C1)
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	4a33      	ldr	r2, [pc, #204]	; (8001084 <HAL_I2C_MspInit+0xf8>)
 8000fb8:	4293      	cmp	r3, r2
 8000fba:	d15e      	bne.n	800107a <HAL_I2C_MspInit+0xee>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000fbc:	2340      	movs	r3, #64	; 0x40
 8000fbe:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fc4:	f107 0318 	add.w	r3, r7, #24
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f002 f86b 	bl	80030a4 <HAL_RCCEx_PeriphCLKConfig>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d001      	beq.n	8000fd8 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000fd4:	f7ff ff6c 	bl	8000eb0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fd8:	4b2b      	ldr	r3, [pc, #172]	; (8001088 <HAL_I2C_MspInit+0xfc>)
 8000fda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fdc:	4a2a      	ldr	r2, [pc, #168]	; (8001088 <HAL_I2C_MspInit+0xfc>)
 8000fde:	f043 0302 	orr.w	r3, r3, #2
 8000fe2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fe4:	4b28      	ldr	r3, [pc, #160]	; (8001088 <HAL_I2C_MspInit+0xfc>)
 8000fe6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fe8:	f003 0302 	and.w	r3, r3, #2
 8000fec:	617b      	str	r3, [r7, #20]
 8000fee:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ff0:	4b25      	ldr	r3, [pc, #148]	; (8001088 <HAL_I2C_MspInit+0xfc>)
 8000ff2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ff4:	4a24      	ldr	r2, [pc, #144]	; (8001088 <HAL_I2C_MspInit+0xfc>)
 8000ff6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ffa:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ffc:	4b22      	ldr	r3, [pc, #136]	; (8001088 <HAL_I2C_MspInit+0xfc>)
 8000ffe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001000:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001004:	613b      	str	r3, [r7, #16]
 8001006:	693b      	ldr	r3, [r7, #16]
    HAL_PWREx_EnableVddIO2();
 8001008:	f001 f968 	bl	80022dc <HAL_PWREx_EnableVddIO2>
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PG13     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin;
 800100c:	2340      	movs	r3, #64	; 0x40
 800100e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001012:	2312      	movs	r3, #18
 8001014:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001018:	2301      	movs	r3, #1
 800101a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800101e:	2303      	movs	r3, #3
 8001020:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001024:	2304      	movs	r3, #4
 8001026:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(I2C1_SCL_GPIO_Port, &GPIO_InitStruct);
 800102a:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800102e:	4619      	mov	r1, r3
 8001030:	4816      	ldr	r0, [pc, #88]	; (800108c <HAL_I2C_MspInit+0x100>)
 8001032:	f000 fdbf 	bl	8001bb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C1_SDA_Pin;
 8001036:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800103a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800103e:	2312      	movs	r3, #18
 8001040:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001044:	2301      	movs	r3, #1
 8001046:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800104a:	2303      	movs	r3, #3
 800104c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001050:	2304      	movs	r3, #4
 8001052:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(I2C1_SDA_GPIO_Port, &GPIO_InitStruct);
 8001056:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800105a:	4619      	mov	r1, r3
 800105c:	480c      	ldr	r0, [pc, #48]	; (8001090 <HAL_I2C_MspInit+0x104>)
 800105e:	f000 fda9 	bl	8001bb4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001062:	4b09      	ldr	r3, [pc, #36]	; (8001088 <HAL_I2C_MspInit+0xfc>)
 8001064:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001066:	4a08      	ldr	r2, [pc, #32]	; (8001088 <HAL_I2C_MspInit+0xfc>)
 8001068:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800106c:	6593      	str	r3, [r2, #88]	; 0x58
 800106e:	4b06      	ldr	r3, [pc, #24]	; (8001088 <HAL_I2C_MspInit+0xfc>)
 8001070:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001072:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001076:	60fb      	str	r3, [r7, #12]
 8001078:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800107a:	bf00      	nop
 800107c:	37c8      	adds	r7, #200	; 0xc8
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	40005400 	.word	0x40005400
 8001088:	40021000 	.word	0x40021000
 800108c:	48000400 	.word	0x48000400
 8001090:	48001800 	.word	0x48001800

08001094 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b0b2      	sub	sp, #200	; 0xc8
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800109c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80010a0:	2200      	movs	r2, #0
 80010a2:	601a      	str	r2, [r3, #0]
 80010a4:	605a      	str	r2, [r3, #4]
 80010a6:	609a      	str	r2, [r3, #8]
 80010a8:	60da      	str	r2, [r3, #12]
 80010aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010ac:	f107 0318 	add.w	r3, r7, #24
 80010b0:	229c      	movs	r2, #156	; 0x9c
 80010b2:	2100      	movs	r1, #0
 80010b4:	4618      	mov	r0, r3
 80010b6:	f006 fdef 	bl	8007c98 <memset>
  if(hsd->Instance==SDMMC1)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	4a33      	ldr	r2, [pc, #204]	; (800118c <HAL_SD_MspInit+0xf8>)
 80010c0:	4293      	cmp	r3, r2
 80010c2:	d15f      	bne.n	8001184 <HAL_SD_MspInit+0xf0>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1;
 80010c4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80010c8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_PLLP;
 80010ca:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80010ce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010d2:	f107 0318 	add.w	r3, r7, #24
 80010d6:	4618      	mov	r0, r3
 80010d8:	f001 ffe4 	bl	80030a4 <HAL_RCCEx_PeriphCLKConfig>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <HAL_SD_MspInit+0x52>
    {
      Error_Handler();
 80010e2:	f7ff fee5 	bl	8000eb0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80010e6:	4b2a      	ldr	r3, [pc, #168]	; (8001190 <HAL_SD_MspInit+0xfc>)
 80010e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ea:	4a29      	ldr	r2, [pc, #164]	; (8001190 <HAL_SD_MspInit+0xfc>)
 80010ec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80010f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010f2:	4b27      	ldr	r3, [pc, #156]	; (8001190 <HAL_SD_MspInit+0xfc>)
 80010f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010fa:	617b      	str	r3, [r7, #20]
 80010fc:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80010fe:	4b24      	ldr	r3, [pc, #144]	; (8001190 <HAL_SD_MspInit+0xfc>)
 8001100:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001102:	4a23      	ldr	r2, [pc, #140]	; (8001190 <HAL_SD_MspInit+0xfc>)
 8001104:	f043 0308 	orr.w	r3, r3, #8
 8001108:	64d3      	str	r3, [r2, #76]	; 0x4c
 800110a:	4b21      	ldr	r3, [pc, #132]	; (8001190 <HAL_SD_MspInit+0xfc>)
 800110c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800110e:	f003 0308 	and.w	r3, r3, #8
 8001112:	613b      	str	r3, [r7, #16]
 8001114:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001116:	4b1e      	ldr	r3, [pc, #120]	; (8001190 <HAL_SD_MspInit+0xfc>)
 8001118:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800111a:	4a1d      	ldr	r2, [pc, #116]	; (8001190 <HAL_SD_MspInit+0xfc>)
 800111c:	f043 0304 	orr.w	r3, r3, #4
 8001120:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001122:	4b1b      	ldr	r3, [pc, #108]	; (8001190 <HAL_SD_MspInit+0xfc>)
 8001124:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001126:	f003 0304 	and.w	r3, r3, #4
 800112a:	60fb      	str	r3, [r7, #12]
 800112c:	68fb      	ldr	r3, [r7, #12]
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PC8     ------> SDMMC1_D0
    PC9     ------> SDMMC1_D1
    */
    GPIO_InitStruct.Pin = uSD_CMD_Pin;
 800112e:	2304      	movs	r3, #4
 8001130:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001134:	2302      	movs	r3, #2
 8001136:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113a:	2300      	movs	r3, #0
 800113c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001140:	2303      	movs	r3, #3
 8001142:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001146:	230c      	movs	r3, #12
 8001148:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(uSD_CMD_GPIO_Port, &GPIO_InitStruct);
 800114c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001150:	4619      	mov	r1, r3
 8001152:	4810      	ldr	r0, [pc, #64]	; (8001194 <HAL_SD_MspInit+0x100>)
 8001154:	f000 fd2e 	bl	8001bb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = uSD_D2_Pin|uSD_D3_Pin|uSD_CLK_Pin|uSD_D0_Pin
 8001158:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800115c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
                          |uSD_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001160:	2302      	movs	r3, #2
 8001162:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001166:	2300      	movs	r3, #0
 8001168:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800116c:	2303      	movs	r3, #3
 800116e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001172:	230c      	movs	r3, #12
 8001174:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001178:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800117c:	4619      	mov	r1, r3
 800117e:	4806      	ldr	r0, [pc, #24]	; (8001198 <HAL_SD_MspInit+0x104>)
 8001180:	f000 fd18 	bl	8001bb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8001184:	bf00      	nop
 8001186:	37c8      	adds	r7, #200	; 0xc8
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	50062400 	.word	0x50062400
 8001190:	40021000 	.word	0x40021000
 8001194:	48000c00 	.word	0x48000c00
 8001198:	48000800 	.word	0x48000800

0800119c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b08a      	sub	sp, #40	; 0x28
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a4:	f107 0314 	add.w	r3, r7, #20
 80011a8:	2200      	movs	r2, #0
 80011aa:	601a      	str	r2, [r3, #0]
 80011ac:	605a      	str	r2, [r3, #4]
 80011ae:	609a      	str	r2, [r3, #8]
 80011b0:	60da      	str	r2, [r3, #12]
 80011b2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4a25      	ldr	r2, [pc, #148]	; (8001250 <HAL_SPI_MspInit+0xb4>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d144      	bne.n	8001248 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80011be:	4b25      	ldr	r3, [pc, #148]	; (8001254 <HAL_SPI_MspInit+0xb8>)
 80011c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011c2:	4a24      	ldr	r2, [pc, #144]	; (8001254 <HAL_SPI_MspInit+0xb8>)
 80011c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011c8:	6593      	str	r3, [r2, #88]	; 0x58
 80011ca:	4b22      	ldr	r3, [pc, #136]	; (8001254 <HAL_SPI_MspInit+0xb8>)
 80011cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011d2:	613b      	str	r3, [r7, #16]
 80011d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 80011d6:	4b1f      	ldr	r3, [pc, #124]	; (8001254 <HAL_SPI_MspInit+0xb8>)
 80011d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011da:	4a1e      	ldr	r2, [pc, #120]	; (8001254 <HAL_SPI_MspInit+0xb8>)
 80011dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011e2:	4b1c      	ldr	r3, [pc, #112]	; (8001254 <HAL_SPI_MspInit+0xb8>)
 80011e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011ea:	60fb      	str	r3, [r7, #12]
 80011ec:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011ee:	4b19      	ldr	r3, [pc, #100]	; (8001254 <HAL_SPI_MspInit+0xb8>)
 80011f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011f2:	4a18      	ldr	r2, [pc, #96]	; (8001254 <HAL_SPI_MspInit+0xb8>)
 80011f4:	f043 0302 	orr.w	r3, r3, #2
 80011f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011fa:	4b16      	ldr	r3, [pc, #88]	; (8001254 <HAL_SPI_MspInit+0xb8>)
 80011fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011fe:	f003 0302 	and.w	r3, r3, #2
 8001202:	60bb      	str	r3, [r7, #8]
 8001204:	68bb      	ldr	r3, [r7, #8]
    PI0     ------> SPI2_NSS
    PB15     ------> SPI2_MOSI
    PB14     ------> SPI2_MISO
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = ARD_10_Pin;
 8001206:	2301      	movs	r3, #1
 8001208:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800120a:	2302      	movs	r3, #2
 800120c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120e:	2300      	movs	r3, #0
 8001210:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001212:	2303      	movs	r3, #3
 8001214:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001216:	2305      	movs	r3, #5
 8001218:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARD_10_GPIO_Port, &GPIO_InitStruct);
 800121a:	f107 0314 	add.w	r3, r7, #20
 800121e:	4619      	mov	r1, r3
 8001220:	480d      	ldr	r0, [pc, #52]	; (8001258 <HAL_SPI_MspInit+0xbc>)
 8001222:	f000 fcc7 	bl	8001bb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI_MOSI_Pin|SPI2_MISO_Pin|SPI2_CLK_Pin;
 8001226:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800122a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800122c:	2302      	movs	r3, #2
 800122e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001230:	2300      	movs	r3, #0
 8001232:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001234:	2303      	movs	r3, #3
 8001236:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001238:	2305      	movs	r3, #5
 800123a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800123c:	f107 0314 	add.w	r3, r7, #20
 8001240:	4619      	mov	r1, r3
 8001242:	4806      	ldr	r0, [pc, #24]	; (800125c <HAL_SPI_MspInit+0xc0>)
 8001244:	f000 fcb6 	bl	8001bb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001248:	bf00      	nop
 800124a:	3728      	adds	r7, #40	; 0x28
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	40003800 	.word	0x40003800
 8001254:	40021000 	.word	0x40021000
 8001258:	48002000 	.word	0x48002000
 800125c:	48000400 	.word	0x48000400

08001260 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b0b4      	sub	sp, #208	; 0xd0
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001268:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800126c:	2200      	movs	r2, #0
 800126e:	601a      	str	r2, [r3, #0]
 8001270:	605a      	str	r2, [r3, #4]
 8001272:	609a      	str	r2, [r3, #8]
 8001274:	60da      	str	r2, [r3, #12]
 8001276:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001278:	f107 0320 	add.w	r3, r7, #32
 800127c:	229c      	movs	r2, #156	; 0x9c
 800127e:	2100      	movs	r1, #0
 8001280:	4618      	mov	r0, r3
 8001282:	f006 fd09 	bl	8007c98 <memset>
  if(huart->Instance==USART2)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	4a54      	ldr	r2, [pc, #336]	; (80013dc <HAL_UART_MspInit+0x17c>)
 800128c:	4293      	cmp	r3, r2
 800128e:	d13c      	bne.n	800130a <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001290:	2302      	movs	r3, #2
 8001292:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001294:	2300      	movs	r3, #0
 8001296:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001298:	f107 0320 	add.w	r3, r7, #32
 800129c:	4618      	mov	r0, r3
 800129e:	f001 ff01 	bl	80030a4 <HAL_RCCEx_PeriphCLKConfig>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d001      	beq.n	80012ac <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80012a8:	f7ff fe02 	bl	8000eb0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80012ac:	4b4c      	ldr	r3, [pc, #304]	; (80013e0 <HAL_UART_MspInit+0x180>)
 80012ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012b0:	4a4b      	ldr	r2, [pc, #300]	; (80013e0 <HAL_UART_MspInit+0x180>)
 80012b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012b6:	6593      	str	r3, [r2, #88]	; 0x58
 80012b8:	4b49      	ldr	r3, [pc, #292]	; (80013e0 <HAL_UART_MspInit+0x180>)
 80012ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012c0:	61fb      	str	r3, [r7, #28]
 80012c2:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012c4:	4b46      	ldr	r3, [pc, #280]	; (80013e0 <HAL_UART_MspInit+0x180>)
 80012c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012c8:	4a45      	ldr	r2, [pc, #276]	; (80013e0 <HAL_UART_MspInit+0x180>)
 80012ca:	f043 0301 	orr.w	r3, r3, #1
 80012ce:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012d0:	4b43      	ldr	r3, [pc, #268]	; (80013e0 <HAL_UART_MspInit+0x180>)
 80012d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012d4:	f003 0301 	and.w	r3, r3, #1
 80012d8:	61bb      	str	r3, [r7, #24]
 80012da:	69bb      	ldr	r3, [r7, #24]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = USART2_RX_Pin|USART2_TX_Pin;
 80012dc:	230c      	movs	r3, #12
 80012de:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012e2:	2302      	movs	r3, #2
 80012e4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e8:	2300      	movs	r3, #0
 80012ea:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012ee:	2303      	movs	r3, #3
 80012f0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80012f4:	2307      	movs	r3, #7
 80012f6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012fa:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80012fe:	4619      	mov	r1, r3
 8001300:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001304:	f000 fc56 	bl	8001bb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001308:	e063      	b.n	80013d2 <HAL_UART_MspInit+0x172>
  else if(huart->Instance==USART3)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4a35      	ldr	r2, [pc, #212]	; (80013e4 <HAL_UART_MspInit+0x184>)
 8001310:	4293      	cmp	r3, r2
 8001312:	d15e      	bne.n	80013d2 <HAL_UART_MspInit+0x172>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001314:	2304      	movs	r3, #4
 8001316:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001318:	2300      	movs	r3, #0
 800131a:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800131c:	f107 0320 	add.w	r3, r7, #32
 8001320:	4618      	mov	r0, r3
 8001322:	f001 febf 	bl	80030a4 <HAL_RCCEx_PeriphCLKConfig>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d001      	beq.n	8001330 <HAL_UART_MspInit+0xd0>
      Error_Handler();
 800132c:	f7ff fdc0 	bl	8000eb0 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001330:	4b2b      	ldr	r3, [pc, #172]	; (80013e0 <HAL_UART_MspInit+0x180>)
 8001332:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001334:	4a2a      	ldr	r2, [pc, #168]	; (80013e0 <HAL_UART_MspInit+0x180>)
 8001336:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800133a:	6593      	str	r3, [r2, #88]	; 0x58
 800133c:	4b28      	ldr	r3, [pc, #160]	; (80013e0 <HAL_UART_MspInit+0x180>)
 800133e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001340:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001344:	617b      	str	r3, [r7, #20]
 8001346:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001348:	4b25      	ldr	r3, [pc, #148]	; (80013e0 <HAL_UART_MspInit+0x180>)
 800134a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800134c:	4a24      	ldr	r2, [pc, #144]	; (80013e0 <HAL_UART_MspInit+0x180>)
 800134e:	f043 0301 	orr.w	r3, r3, #1
 8001352:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001354:	4b22      	ldr	r3, [pc, #136]	; (80013e0 <HAL_UART_MspInit+0x180>)
 8001356:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001358:	f003 0301 	and.w	r3, r3, #1
 800135c:	613b      	str	r3, [r7, #16]
 800135e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001360:	4b1f      	ldr	r3, [pc, #124]	; (80013e0 <HAL_UART_MspInit+0x180>)
 8001362:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001364:	4a1e      	ldr	r2, [pc, #120]	; (80013e0 <HAL_UART_MspInit+0x180>)
 8001366:	f043 0302 	orr.w	r3, r3, #2
 800136a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800136c:	4b1c      	ldr	r3, [pc, #112]	; (80013e0 <HAL_UART_MspInit+0x180>)
 800136e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001370:	f003 0302 	and.w	r3, r3, #2
 8001374:	60fb      	str	r3, [r7, #12]
 8001376:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART3_RTS_Pin;
 8001378:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800137c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001380:	2302      	movs	r3, #2
 8001382:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001386:	2300      	movs	r3, #0
 8001388:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800138c:	2303      	movs	r3, #3
 800138e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001392:	2307      	movs	r3, #7
 8001394:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(USART3_RTS_GPIO_Port, &GPIO_InitStruct);
 8001398:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800139c:	4619      	mov	r1, r3
 800139e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013a2:	f000 fc07 	bl	8001bb4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = USART3_RX_Pin|USART3_TX_Pin;
 80013a6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80013aa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ae:	2302      	movs	r3, #2
 80013b0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b4:	2300      	movs	r3, #0
 80013b6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013ba:	2303      	movs	r3, #3
 80013bc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80013c0:	2307      	movs	r3, #7
 80013c2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013c6:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80013ca:	4619      	mov	r1, r3
 80013cc:	4806      	ldr	r0, [pc, #24]	; (80013e8 <HAL_UART_MspInit+0x188>)
 80013ce:	f000 fbf1 	bl	8001bb4 <HAL_GPIO_Init>
}
 80013d2:	bf00      	nop
 80013d4:	37d0      	adds	r7, #208	; 0xd0
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	40004400 	.word	0x40004400
 80013e0:	40021000 	.word	0x40021000
 80013e4:	40004800 	.word	0x40004800
 80013e8:	48000400 	.word	0x48000400

080013ec <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b086      	sub	sp, #24
 80013f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80013f2:	1d3b      	adds	r3, r7, #4
 80013f4:	2200      	movs	r2, #0
 80013f6:	601a      	str	r2, [r3, #0]
 80013f8:	605a      	str	r2, [r3, #4]
 80013fa:	609a      	str	r2, [r3, #8]
 80013fc:	60da      	str	r2, [r3, #12]
 80013fe:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001400:	4b32      	ldr	r3, [pc, #200]	; (80014cc <HAL_FMC_MspInit+0xe0>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d15d      	bne.n	80014c4 <HAL_FMC_MspInit+0xd8>
    return;
  }
  FMC_Initialized = 1;
 8001408:	4b30      	ldr	r3, [pc, #192]	; (80014cc <HAL_FMC_MspInit+0xe0>)
 800140a:	2201      	movs	r2, #1
 800140c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800140e:	4b30      	ldr	r3, [pc, #192]	; (80014d0 <HAL_FMC_MspInit+0xe4>)
 8001410:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001412:	4a2f      	ldr	r2, [pc, #188]	; (80014d0 <HAL_FMC_MspInit+0xe4>)
 8001414:	f043 0301 	orr.w	r3, r3, #1
 8001418:	6513      	str	r3, [r2, #80]	; 0x50
 800141a:	4b2d      	ldr	r3, [pc, #180]	; (80014d0 <HAL_FMC_MspInit+0xe4>)
 800141c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800141e:	f003 0301 	and.w	r3, r3, #1
 8001422:	603b      	str	r3, [r7, #0]
 8001424:	683b      	ldr	r3, [r7, #0]
  PF13   ------> FMC_A7
  PE12   ------> FMC_D9
  PF12   ------> FMC_A6
  PE11   ------> FMC_D8
  */
  GPIO_InitStruct.Pin = PSRAM_NBL0_Pin|PSRAM_NBL1_Pin|PSRAM_A20_Pin|PSRAM_A19_Pin
 8001426:	f64f 739b 	movw	r3, #65435	; 0xff9b
 800142a:	607b      	str	r3, [r7, #4]
                          |D7_Pin|D6_Pin|D12_Pin|D5_Pin
                          |D11_Pin|D4_Pin|D10_Pin|D9_Pin
                          |D8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800142c:	2302      	movs	r3, #2
 800142e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001430:	2300      	movs	r3, #0
 8001432:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001434:	2303      	movs	r3, #3
 8001436:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001438:	230c      	movs	r3, #12
 800143a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800143c:	1d3b      	adds	r3, r7, #4
 800143e:	4619      	mov	r1, r3
 8001440:	4824      	ldr	r0, [pc, #144]	; (80014d4 <HAL_FMC_MspInit+0xe8>)
 8001442:	f000 fbb7 	bl	8001bb4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D2_Pin|PSRAM_OE_Pin|D3_Pin|PSRAM_WE_Pin
 8001446:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 800144a:	607b      	str	r3, [r7, #4]
                          |PSRAM_WAIT_Pin|PSRAM_CLK_Pin|PSRAM_NE1_Pin|PSRAM_A18_Pin
                          |D1_Pin|D0_Pin|PSRAM_A17_Pin|PSRAM_A16_Pin
                          |D15_Pin|D14_Pin|D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800144c:	2302      	movs	r3, #2
 800144e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001450:	2300      	movs	r3, #0
 8001452:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001454:	2303      	movs	r3, #3
 8001456:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001458:	230c      	movs	r3, #12
 800145a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800145c:	1d3b      	adds	r3, r7, #4
 800145e:	4619      	mov	r1, r3
 8001460:	481d      	ldr	r0, [pc, #116]	; (80014d8 <HAL_FMC_MspInit+0xec>)
 8001462:	f000 fba7 	bl	8001bb4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = PSRAM_ADV_Pin;
 8001466:	2380      	movs	r3, #128	; 0x80
 8001468:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800146a:	2302      	movs	r3, #2
 800146c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146e:	2300      	movs	r3, #0
 8001470:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001472:	2303      	movs	r3, #3
 8001474:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001476:	230c      	movs	r3, #12
 8001478:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(PSRAM_ADV_GPIO_Port, &GPIO_InitStruct);
 800147a:	1d3b      	adds	r3, r7, #4
 800147c:	4619      	mov	r1, r3
 800147e:	4817      	ldr	r0, [pc, #92]	; (80014dc <HAL_FMC_MspInit+0xf0>)
 8001480:	f000 fb98 	bl	8001bb4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = PSRAM_A2_Pin|PSRAM_A1_Pin|PSRAM_A0_Pin|PSRAM_A3_Pin
 8001484:	f24f 033f 	movw	r3, #61503	; 0xf03f
 8001488:	607b      	str	r3, [r7, #4]
                          |PSRAM_A4_Pin|PSRAM_A5_Pin|PSRAM_A9_Pin|PSRAM_A8_Pin
                          |PSRAM_A7_Pin|PSRAM_A6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800148a:	2302      	movs	r3, #2
 800148c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148e:	2300      	movs	r3, #0
 8001490:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001492:	2303      	movs	r3, #3
 8001494:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001496:	230c      	movs	r3, #12
 8001498:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800149a:	1d3b      	adds	r3, r7, #4
 800149c:	4619      	mov	r1, r3
 800149e:	4810      	ldr	r0, [pc, #64]	; (80014e0 <HAL_FMC_MspInit+0xf4>)
 80014a0:	f000 fb88 	bl	8001bb4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = PSRAM_A14_Pin|PSRAM_A13_Pin|PSRAM_A15_Pin|PSRAM_A11_Pin
 80014a4:	233f      	movs	r3, #63	; 0x3f
 80014a6:	607b      	str	r3, [r7, #4]
                          |PSRAM_A12_Pin|PSRAM_A10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014a8:	2302      	movs	r3, #2
 80014aa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ac:	2300      	movs	r3, #0
 80014ae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014b0:	2303      	movs	r3, #3
 80014b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80014b4:	230c      	movs	r3, #12
 80014b6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80014b8:	1d3b      	adds	r3, r7, #4
 80014ba:	4619      	mov	r1, r3
 80014bc:	4809      	ldr	r0, [pc, #36]	; (80014e4 <HAL_FMC_MspInit+0xf8>)
 80014be:	f000 fb79 	bl	8001bb4 <HAL_GPIO_Init>
 80014c2:	e000      	b.n	80014c6 <HAL_FMC_MspInit+0xda>
    return;
 80014c4:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80014c6:	3718      	adds	r7, #24
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	2000038c 	.word	0x2000038c
 80014d0:	40021000 	.word	0x40021000
 80014d4:	48001000 	.word	0x48001000
 80014d8:	48000c00 	.word	0x48000c00
 80014dc:	48000400 	.word	0x48000400
 80014e0:	48001400 	.word	0x48001400
 80014e4:	48001800 	.word	0x48001800

080014e8 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b082      	sub	sp, #8
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80014f0:	f7ff ff7c 	bl	80013ec <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80014f4:	bf00      	nop
 80014f6:	3708      	adds	r7, #8
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}

080014fc <HAL_SAI_MspInit>:
}

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b0b0      	sub	sp, #192	; 0xc0
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001504:	f107 0310 	add.w	r3, r7, #16
 8001508:	229c      	movs	r2, #156	; 0x9c
 800150a:	2100      	movs	r1, #0
 800150c:	4618      	mov	r0, r3
 800150e:	f006 fbc3 	bl	8007c98 <memset>
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4a32      	ldr	r2, [pc, #200]	; (80015e0 <HAL_SAI_MspInit+0xe4>)
 8001518:	4293      	cmp	r3, r2
 800151a:	d15d      	bne.n	80015d8 <HAL_SAI_MspInit+0xdc>
    {
    /* Peripheral clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 800151c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001520:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
 8001522:	2300      	movs	r3, #0
 8001524:	67fb      	str	r3, [r7, #124]	; 0x7c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001526:	2301      	movs	r3, #1
 8001528:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800152a:	2301      	movs	r3, #1
 800152c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 800152e:	2310      	movs	r3, #16
 8001530:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8001532:	2302      	movs	r3, #2
 8001534:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001536:	2302      	movs	r3, #2
 8001538:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800153a:	2302      	movs	r3, #2
 800153c:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK;
 800153e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001542:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001544:	f107 0310 	add.w	r3, r7, #16
 8001548:	4618      	mov	r0, r3
 800154a:	f001 fdab 	bl	80030a4 <HAL_RCCEx_PeriphCLKConfig>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d001      	beq.n	8001558 <HAL_SAI_MspInit+0x5c>
    {
      Error_Handler();
 8001554:	f7ff fcac 	bl	8000eb0 <Error_Handler>
    }

    if (SAI1_client == 0)
 8001558:	4b22      	ldr	r3, [pc, #136]	; (80015e4 <HAL_SAI_MspInit+0xe8>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d10b      	bne.n	8001578 <HAL_SAI_MspInit+0x7c>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8001560:	4b21      	ldr	r3, [pc, #132]	; (80015e8 <HAL_SAI_MspInit+0xec>)
 8001562:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001564:	4a20      	ldr	r2, [pc, #128]	; (80015e8 <HAL_SAI_MspInit+0xec>)
 8001566:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800156a:	6613      	str	r3, [r2, #96]	; 0x60
 800156c:	4b1e      	ldr	r3, [pc, #120]	; (80015e8 <HAL_SAI_MspInit+0xec>)
 800156e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001570:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001574:	60fb      	str	r3, [r7, #12]
 8001576:	68fb      	ldr	r3, [r7, #12]
    }
    SAI1_client ++;
 8001578:	4b1a      	ldr	r3, [pc, #104]	; (80015e4 <HAL_SAI_MspInit+0xe8>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	3301      	adds	r3, #1
 800157e:	4a19      	ldr	r2, [pc, #100]	; (80015e4 <HAL_SAI_MspInit+0xe8>)
 8001580:	6013      	str	r3, [r2, #0]
    PE2     ------> SAI1_MCLK_A
    PB9     ------> SAI1_FS_A
    PE6     ------> SAI1_SD_A
    PE5     ------> SAI1_SCK_A
    */
    GPIO_InitStruct.Pin = SAI1_SDB_Pin|SAI1_FSA_Pin;
 8001582:	f44f 7308 	mov.w	r3, #544	; 0x220
 8001586:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800158a:	2302      	movs	r3, #2
 800158c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001590:	2300      	movs	r3, #0
 8001592:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001596:	2300      	movs	r3, #0
 8001598:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 800159c:	230d      	movs	r3, #13
 800159e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015a2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80015a6:	4619      	mov	r1, r3
 80015a8:	4810      	ldr	r0, [pc, #64]	; (80015ec <HAL_SAI_MspInit+0xf0>)
 80015aa:	f000 fb03 	bl	8001bb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SAI1_MCKA_Pin|SAI1_SDA_Pin|SAI1_SCKA_Pin;
 80015ae:	2364      	movs	r3, #100	; 0x64
 80015b0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b4:	2302      	movs	r3, #2
 80015b6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ba:	2300      	movs	r3, #0
 80015bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015c0:	2300      	movs	r3, #0
 80015c2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 80015c6:	230d      	movs	r3, #13
 80015c8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015cc:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80015d0:	4619      	mov	r1, r3
 80015d2:	4807      	ldr	r0, [pc, #28]	; (80015f0 <HAL_SAI_MspInit+0xf4>)
 80015d4:	f000 faee 	bl	8001bb4 <HAL_GPIO_Init>

    }
}
 80015d8:	bf00      	nop
 80015da:	37c0      	adds	r7, #192	; 0xc0
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	40015404 	.word	0x40015404
 80015e4:	20000390 	.word	0x20000390
 80015e8:	40021000 	.word	0x40021000
 80015ec:	48000400 	.word	0x48000400
 80015f0:	48001000 	.word	0x48001000

080015f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015f8:	e7fe      	b.n	80015f8 <NMI_Handler+0x4>

080015fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015fa:	b480      	push	{r7}
 80015fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015fe:	e7fe      	b.n	80015fe <HardFault_Handler+0x4>

08001600 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001604:	e7fe      	b.n	8001604 <MemManage_Handler+0x4>

08001606 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001606:	b480      	push	{r7}
 8001608:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800160a:	e7fe      	b.n	800160a <BusFault_Handler+0x4>

0800160c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001610:	e7fe      	b.n	8001610 <UsageFault_Handler+0x4>

08001612 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001612:	b480      	push	{r7}
 8001614:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001616:	bf00      	nop
 8001618:	46bd      	mov	sp, r7
 800161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161e:	4770      	bx	lr

08001620 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001624:	bf00      	nop
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr

0800162e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800162e:	b480      	push	{r7}
 8001630:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001632:	bf00      	nop
 8001634:	46bd      	mov	sp, r7
 8001636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163a:	4770      	bx	lr

0800163c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001640:	f000 f892 	bl	8001768 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001644:	bf00      	nop
 8001646:	bd80      	pop	{r7, pc}

08001648 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800164c:	4b06      	ldr	r3, [pc, #24]	; (8001668 <SystemInit+0x20>)
 800164e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001652:	4a05      	ldr	r2, [pc, #20]	; (8001668 <SystemInit+0x20>)
 8001654:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001658:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800165c:	bf00      	nop
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr
 8001666:	bf00      	nop
 8001668:	e000ed00 	.word	0xe000ed00

0800166c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800166c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016a4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001670:	f7ff ffea 	bl	8001648 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001674:	480c      	ldr	r0, [pc, #48]	; (80016a8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001676:	490d      	ldr	r1, [pc, #52]	; (80016ac <LoopForever+0xa>)
  ldr r2, =_sidata
 8001678:	4a0d      	ldr	r2, [pc, #52]	; (80016b0 <LoopForever+0xe>)
  movs r3, #0
 800167a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800167c:	e002      	b.n	8001684 <LoopCopyDataInit>

0800167e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800167e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001680:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001682:	3304      	adds	r3, #4

08001684 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001684:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001686:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001688:	d3f9      	bcc.n	800167e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800168a:	4a0a      	ldr	r2, [pc, #40]	; (80016b4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800168c:	4c0a      	ldr	r4, [pc, #40]	; (80016b8 <LoopForever+0x16>)
  movs r3, #0
 800168e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001690:	e001      	b.n	8001696 <LoopFillZerobss>

08001692 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001692:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001694:	3204      	adds	r2, #4

08001696 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001696:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001698:	d3fb      	bcc.n	8001692 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800169a:	f006 fad9 	bl	8007c50 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800169e:	f7fe ff2f 	bl	8000500 <main>

080016a2 <LoopForever>:

LoopForever:
    b LoopForever
 80016a2:	e7fe      	b.n	80016a2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80016a4:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 80016a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016ac:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80016b0:	08007d40 	.word	0x08007d40
  ldr r2, =_sbss
 80016b4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80016b8:	20000398 	.word	0x20000398

080016bc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80016bc:	e7fe      	b.n	80016bc <ADC1_IRQHandler>

080016be <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016be:	b580      	push	{r7, lr}
 80016c0:	b082      	sub	sp, #8
 80016c2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80016c4:	2300      	movs	r3, #0
 80016c6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016c8:	2003      	movs	r0, #3
 80016ca:	f000 fa3f 	bl	8001b4c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80016ce:	2000      	movs	r0, #0
 80016d0:	f000 f80e 	bl	80016f0 <HAL_InitTick>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d002      	beq.n	80016e0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80016da:	2301      	movs	r3, #1
 80016dc:	71fb      	strb	r3, [r7, #7]
 80016de:	e001      	b.n	80016e4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80016e0:	f7ff fbec 	bl	8000ebc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80016e4:	79fb      	ldrb	r3, [r7, #7]
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	3708      	adds	r7, #8
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
	...

080016f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b084      	sub	sp, #16
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80016f8:	2300      	movs	r3, #0
 80016fa:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80016fc:	4b17      	ldr	r3, [pc, #92]	; (800175c <HAL_InitTick+0x6c>)
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d023      	beq.n	800174c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001704:	4b16      	ldr	r3, [pc, #88]	; (8001760 <HAL_InitTick+0x70>)
 8001706:	681a      	ldr	r2, [r3, #0]
 8001708:	4b14      	ldr	r3, [pc, #80]	; (800175c <HAL_InitTick+0x6c>)
 800170a:	781b      	ldrb	r3, [r3, #0]
 800170c:	4619      	mov	r1, r3
 800170e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001712:	fbb3 f3f1 	udiv	r3, r3, r1
 8001716:	fbb2 f3f3 	udiv	r3, r2, r3
 800171a:	4618      	mov	r0, r3
 800171c:	f000 fa3d 	bl	8001b9a <HAL_SYSTICK_Config>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	d10f      	bne.n	8001746 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2b0f      	cmp	r3, #15
 800172a:	d809      	bhi.n	8001740 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800172c:	2200      	movs	r2, #0
 800172e:	6879      	ldr	r1, [r7, #4]
 8001730:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001734:	f000 fa15 	bl	8001b62 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001738:	4a0a      	ldr	r2, [pc, #40]	; (8001764 <HAL_InitTick+0x74>)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6013      	str	r3, [r2, #0]
 800173e:	e007      	b.n	8001750 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001740:	2301      	movs	r3, #1
 8001742:	73fb      	strb	r3, [r7, #15]
 8001744:	e004      	b.n	8001750 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001746:	2301      	movs	r3, #1
 8001748:	73fb      	strb	r3, [r7, #15]
 800174a:	e001      	b.n	8001750 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800174c:	2301      	movs	r3, #1
 800174e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001750:	7bfb      	ldrb	r3, [r7, #15]
}
 8001752:	4618      	mov	r0, r3
 8001754:	3710      	adds	r7, #16
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	20000008 	.word	0x20000008
 8001760:	20000000 	.word	0x20000000
 8001764:	20000004 	.word	0x20000004

08001768 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800176c:	4b06      	ldr	r3, [pc, #24]	; (8001788 <HAL_IncTick+0x20>)
 800176e:	781b      	ldrb	r3, [r3, #0]
 8001770:	461a      	mov	r2, r3
 8001772:	4b06      	ldr	r3, [pc, #24]	; (800178c <HAL_IncTick+0x24>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4413      	add	r3, r2
 8001778:	4a04      	ldr	r2, [pc, #16]	; (800178c <HAL_IncTick+0x24>)
 800177a:	6013      	str	r3, [r2, #0]
}
 800177c:	bf00      	nop
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr
 8001786:	bf00      	nop
 8001788:	20000008 	.word	0x20000008
 800178c:	20000394 	.word	0x20000394

08001790 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0
  return uwTick;
 8001794:	4b03      	ldr	r3, [pc, #12]	; (80017a4 <HAL_GetTick+0x14>)
 8001796:	681b      	ldr	r3, [r3, #0]
}
 8001798:	4618      	mov	r0, r3
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr
 80017a2:	bf00      	nop
 80017a4:	20000394 	.word	0x20000394

080017a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b084      	sub	sp, #16
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017b0:	f7ff ffee 	bl	8001790 <HAL_GetTick>
 80017b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80017c0:	d005      	beq.n	80017ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80017c2:	4b0a      	ldr	r3, [pc, #40]	; (80017ec <HAL_Delay+0x44>)
 80017c4:	781b      	ldrb	r3, [r3, #0]
 80017c6:	461a      	mov	r2, r3
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	4413      	add	r3, r2
 80017cc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80017ce:	bf00      	nop
 80017d0:	f7ff ffde 	bl	8001790 <HAL_GetTick>
 80017d4:	4602      	mov	r2, r0
 80017d6:	68bb      	ldr	r3, [r7, #8]
 80017d8:	1ad3      	subs	r3, r2, r3
 80017da:	68fa      	ldr	r2, [r7, #12]
 80017dc:	429a      	cmp	r2, r3
 80017de:	d8f7      	bhi.n	80017d0 <HAL_Delay+0x28>
  {
  }
}
 80017e0:	bf00      	nop
 80017e2:	bf00      	nop
 80017e4:	3710      	adds	r7, #16
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	20000008 	.word	0x20000008

080017f0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b084      	sub	sp, #16
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d101      	bne.n	8001802 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
 8001800:	e0ed      	b.n	80019de <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001808:	b2db      	uxtb	r3, r3
 800180a:	2b00      	cmp	r3, #0
 800180c:	d102      	bne.n	8001814 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800180e:	6878      	ldr	r0, [r7, #4]
 8001810:	f7ff fb78 	bl	8000f04 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	681a      	ldr	r2, [r3, #0]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f042 0201 	orr.w	r2, r2, #1
 8001822:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001824:	f7ff ffb4 	bl	8001790 <HAL_GetTick>
 8001828:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800182a:	e012      	b.n	8001852 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800182c:	f7ff ffb0 	bl	8001790 <HAL_GetTick>
 8001830:	4602      	mov	r2, r0
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	1ad3      	subs	r3, r2, r3
 8001836:	2b0a      	cmp	r3, #10
 8001838:	d90b      	bls.n	8001852 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800183e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	2205      	movs	r2, #5
 800184a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800184e:	2301      	movs	r3, #1
 8001850:	e0c5      	b.n	80019de <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	f003 0301 	and.w	r3, r3, #1
 800185c:	2b00      	cmp	r3, #0
 800185e:	d0e5      	beq.n	800182c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f022 0202 	bic.w	r2, r2, #2
 800186e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001870:	f7ff ff8e 	bl	8001790 <HAL_GetTick>
 8001874:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001876:	e012      	b.n	800189e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001878:	f7ff ff8a 	bl	8001790 <HAL_GetTick>
 800187c:	4602      	mov	r2, r0
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	1ad3      	subs	r3, r2, r3
 8001882:	2b0a      	cmp	r3, #10
 8001884:	d90b      	bls.n	800189e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800188a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	2205      	movs	r2, #5
 8001896:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800189a:	2301      	movs	r3, #1
 800189c:	e09f      	b.n	80019de <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	f003 0302 	and.w	r3, r3, #2
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d1e5      	bne.n	8001878 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	7e1b      	ldrb	r3, [r3, #24]
 80018b0:	2b01      	cmp	r3, #1
 80018b2:	d108      	bne.n	80018c6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80018c2:	601a      	str	r2, [r3, #0]
 80018c4:	e007      	b.n	80018d6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	681a      	ldr	r2, [r3, #0]
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80018d4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	7e5b      	ldrb	r3, [r3, #25]
 80018da:	2b01      	cmp	r3, #1
 80018dc:	d108      	bne.n	80018f0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	681a      	ldr	r2, [r3, #0]
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80018ec:	601a      	str	r2, [r3, #0]
 80018ee:	e007      	b.n	8001900 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	681a      	ldr	r2, [r3, #0]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80018fe:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	7e9b      	ldrb	r3, [r3, #26]
 8001904:	2b01      	cmp	r3, #1
 8001906:	d108      	bne.n	800191a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	681a      	ldr	r2, [r3, #0]
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f042 0220 	orr.w	r2, r2, #32
 8001916:	601a      	str	r2, [r3, #0]
 8001918:	e007      	b.n	800192a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	681a      	ldr	r2, [r3, #0]
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f022 0220 	bic.w	r2, r2, #32
 8001928:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	7edb      	ldrb	r3, [r3, #27]
 800192e:	2b01      	cmp	r3, #1
 8001930:	d108      	bne.n	8001944 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	681a      	ldr	r2, [r3, #0]
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f022 0210 	bic.w	r2, r2, #16
 8001940:	601a      	str	r2, [r3, #0]
 8001942:	e007      	b.n	8001954 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	681a      	ldr	r2, [r3, #0]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f042 0210 	orr.w	r2, r2, #16
 8001952:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	7f1b      	ldrb	r3, [r3, #28]
 8001958:	2b01      	cmp	r3, #1
 800195a:	d108      	bne.n	800196e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	681a      	ldr	r2, [r3, #0]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f042 0208 	orr.w	r2, r2, #8
 800196a:	601a      	str	r2, [r3, #0]
 800196c:	e007      	b.n	800197e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	681a      	ldr	r2, [r3, #0]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f022 0208 	bic.w	r2, r2, #8
 800197c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	7f5b      	ldrb	r3, [r3, #29]
 8001982:	2b01      	cmp	r3, #1
 8001984:	d108      	bne.n	8001998 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	681a      	ldr	r2, [r3, #0]
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f042 0204 	orr.w	r2, r2, #4
 8001994:	601a      	str	r2, [r3, #0]
 8001996:	e007      	b.n	80019a8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	681a      	ldr	r2, [r3, #0]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f022 0204 	bic.w	r2, r2, #4
 80019a6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	689a      	ldr	r2, [r3, #8]
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	68db      	ldr	r3, [r3, #12]
 80019b0:	431a      	orrs	r2, r3
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	691b      	ldr	r3, [r3, #16]
 80019b6:	431a      	orrs	r2, r3
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	695b      	ldr	r3, [r3, #20]
 80019bc:	ea42 0103 	orr.w	r1, r2, r3
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	1e5a      	subs	r2, r3, #1
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	430a      	orrs	r2, r1
 80019cc:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2200      	movs	r2, #0
 80019d2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2201      	movs	r2, #1
 80019d8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80019dc:	2300      	movs	r3, #0
}
 80019de:	4618      	mov	r0, r3
 80019e0:	3710      	adds	r7, #16
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
	...

080019e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b085      	sub	sp, #20
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	f003 0307 	and.w	r3, r3, #7
 80019f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019f8:	4b0c      	ldr	r3, [pc, #48]	; (8001a2c <__NVIC_SetPriorityGrouping+0x44>)
 80019fa:	68db      	ldr	r3, [r3, #12]
 80019fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019fe:	68ba      	ldr	r2, [r7, #8]
 8001a00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a04:	4013      	ands	r3, r2
 8001a06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a0c:	68bb      	ldr	r3, [r7, #8]
 8001a0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a1a:	4a04      	ldr	r2, [pc, #16]	; (8001a2c <__NVIC_SetPriorityGrouping+0x44>)
 8001a1c:	68bb      	ldr	r3, [r7, #8]
 8001a1e:	60d3      	str	r3, [r2, #12]
}
 8001a20:	bf00      	nop
 8001a22:	3714      	adds	r7, #20
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr
 8001a2c:	e000ed00 	.word	0xe000ed00

08001a30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a30:	b480      	push	{r7}
 8001a32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a34:	4b04      	ldr	r3, [pc, #16]	; (8001a48 <__NVIC_GetPriorityGrouping+0x18>)
 8001a36:	68db      	ldr	r3, [r3, #12]
 8001a38:	0a1b      	lsrs	r3, r3, #8
 8001a3a:	f003 0307 	and.w	r3, r3, #7
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	46bd      	mov	sp, r7
 8001a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a46:	4770      	bx	lr
 8001a48:	e000ed00 	.word	0xe000ed00

08001a4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b083      	sub	sp, #12
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	4603      	mov	r3, r0
 8001a54:	6039      	str	r1, [r7, #0]
 8001a56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	db0a      	blt.n	8001a76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	b2da      	uxtb	r2, r3
 8001a64:	490c      	ldr	r1, [pc, #48]	; (8001a98 <__NVIC_SetPriority+0x4c>)
 8001a66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a6a:	0112      	lsls	r2, r2, #4
 8001a6c:	b2d2      	uxtb	r2, r2
 8001a6e:	440b      	add	r3, r1
 8001a70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a74:	e00a      	b.n	8001a8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	b2da      	uxtb	r2, r3
 8001a7a:	4908      	ldr	r1, [pc, #32]	; (8001a9c <__NVIC_SetPriority+0x50>)
 8001a7c:	79fb      	ldrb	r3, [r7, #7]
 8001a7e:	f003 030f 	and.w	r3, r3, #15
 8001a82:	3b04      	subs	r3, #4
 8001a84:	0112      	lsls	r2, r2, #4
 8001a86:	b2d2      	uxtb	r2, r2
 8001a88:	440b      	add	r3, r1
 8001a8a:	761a      	strb	r2, [r3, #24]
}
 8001a8c:	bf00      	nop
 8001a8e:	370c      	adds	r7, #12
 8001a90:	46bd      	mov	sp, r7
 8001a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a96:	4770      	bx	lr
 8001a98:	e000e100 	.word	0xe000e100
 8001a9c:	e000ed00 	.word	0xe000ed00

08001aa0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b089      	sub	sp, #36	; 0x24
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	60f8      	str	r0, [r7, #12]
 8001aa8:	60b9      	str	r1, [r7, #8]
 8001aaa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	f003 0307 	and.w	r3, r3, #7
 8001ab2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ab4:	69fb      	ldr	r3, [r7, #28]
 8001ab6:	f1c3 0307 	rsb	r3, r3, #7
 8001aba:	2b04      	cmp	r3, #4
 8001abc:	bf28      	it	cs
 8001abe:	2304      	movcs	r3, #4
 8001ac0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ac2:	69fb      	ldr	r3, [r7, #28]
 8001ac4:	3304      	adds	r3, #4
 8001ac6:	2b06      	cmp	r3, #6
 8001ac8:	d902      	bls.n	8001ad0 <NVIC_EncodePriority+0x30>
 8001aca:	69fb      	ldr	r3, [r7, #28]
 8001acc:	3b03      	subs	r3, #3
 8001ace:	e000      	b.n	8001ad2 <NVIC_EncodePriority+0x32>
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ad4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001ad8:	69bb      	ldr	r3, [r7, #24]
 8001ada:	fa02 f303 	lsl.w	r3, r2, r3
 8001ade:	43da      	mvns	r2, r3
 8001ae0:	68bb      	ldr	r3, [r7, #8]
 8001ae2:	401a      	ands	r2, r3
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ae8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	fa01 f303 	lsl.w	r3, r1, r3
 8001af2:	43d9      	mvns	r1, r3
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001af8:	4313      	orrs	r3, r2
         );
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	3724      	adds	r7, #36	; 0x24
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr
	...

08001b08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b082      	sub	sp, #8
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	3b01      	subs	r3, #1
 8001b14:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b18:	d301      	bcc.n	8001b1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e00f      	b.n	8001b3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b1e:	4a0a      	ldr	r2, [pc, #40]	; (8001b48 <SysTick_Config+0x40>)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	3b01      	subs	r3, #1
 8001b24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b26:	210f      	movs	r1, #15
 8001b28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001b2c:	f7ff ff8e 	bl	8001a4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b30:	4b05      	ldr	r3, [pc, #20]	; (8001b48 <SysTick_Config+0x40>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b36:	4b04      	ldr	r3, [pc, #16]	; (8001b48 <SysTick_Config+0x40>)
 8001b38:	2207      	movs	r2, #7
 8001b3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b3c:	2300      	movs	r3, #0
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	3708      	adds	r7, #8
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	e000e010 	.word	0xe000e010

08001b4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b082      	sub	sp, #8
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b54:	6878      	ldr	r0, [r7, #4]
 8001b56:	f7ff ff47 	bl	80019e8 <__NVIC_SetPriorityGrouping>
}
 8001b5a:	bf00      	nop
 8001b5c:	3708      	adds	r7, #8
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}

08001b62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b62:	b580      	push	{r7, lr}
 8001b64:	b086      	sub	sp, #24
 8001b66:	af00      	add	r7, sp, #0
 8001b68:	4603      	mov	r3, r0
 8001b6a:	60b9      	str	r1, [r7, #8]
 8001b6c:	607a      	str	r2, [r7, #4]
 8001b6e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001b70:	2300      	movs	r3, #0
 8001b72:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001b74:	f7ff ff5c 	bl	8001a30 <__NVIC_GetPriorityGrouping>
 8001b78:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b7a:	687a      	ldr	r2, [r7, #4]
 8001b7c:	68b9      	ldr	r1, [r7, #8]
 8001b7e:	6978      	ldr	r0, [r7, #20]
 8001b80:	f7ff ff8e 	bl	8001aa0 <NVIC_EncodePriority>
 8001b84:	4602      	mov	r2, r0
 8001b86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b8a:	4611      	mov	r1, r2
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f7ff ff5d 	bl	8001a4c <__NVIC_SetPriority>
}
 8001b92:	bf00      	nop
 8001b94:	3718      	adds	r7, #24
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}

08001b9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b9a:	b580      	push	{r7, lr}
 8001b9c:	b082      	sub	sp, #8
 8001b9e:	af00      	add	r7, sp, #0
 8001ba0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ba2:	6878      	ldr	r0, [r7, #4]
 8001ba4:	f7ff ffb0 	bl	8001b08 <SysTick_Config>
 8001ba8:	4603      	mov	r3, r0
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	3708      	adds	r7, #8
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
	...

08001bb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b087      	sub	sp, #28
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
 8001bbc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bc2:	e166      	b.n	8001e92 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	681a      	ldr	r2, [r3, #0]
 8001bc8:	2101      	movs	r1, #1
 8001bca:	697b      	ldr	r3, [r7, #20]
 8001bcc:	fa01 f303 	lsl.w	r3, r1, r3
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	f000 8158 	beq.w	8001e8c <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	f003 0303 	and.w	r3, r3, #3
 8001be4:	2b01      	cmp	r3, #1
 8001be6:	d005      	beq.n	8001bf4 <HAL_GPIO_Init+0x40>
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	f003 0303 	and.w	r3, r3, #3
 8001bf0:	2b02      	cmp	r3, #2
 8001bf2:	d130      	bne.n	8001c56 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	689b      	ldr	r3, [r3, #8]
 8001bf8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001bfa:	697b      	ldr	r3, [r7, #20]
 8001bfc:	005b      	lsls	r3, r3, #1
 8001bfe:	2203      	movs	r2, #3
 8001c00:	fa02 f303 	lsl.w	r3, r2, r3
 8001c04:	43db      	mvns	r3, r3
 8001c06:	693a      	ldr	r2, [r7, #16]
 8001c08:	4013      	ands	r3, r2
 8001c0a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	68da      	ldr	r2, [r3, #12]
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	005b      	lsls	r3, r3, #1
 8001c14:	fa02 f303 	lsl.w	r3, r2, r3
 8001c18:	693a      	ldr	r2, [r7, #16]
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	693a      	ldr	r2, [r7, #16]
 8001c22:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c32:	43db      	mvns	r3, r3
 8001c34:	693a      	ldr	r2, [r7, #16]
 8001c36:	4013      	ands	r3, r2
 8001c38:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	091b      	lsrs	r3, r3, #4
 8001c40:	f003 0201 	and.w	r2, r3, #1
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4a:	693a      	ldr	r2, [r7, #16]
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	693a      	ldr	r2, [r7, #16]
 8001c54:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	f003 0303 	and.w	r3, r3, #3
 8001c5e:	2b03      	cmp	r3, #3
 8001c60:	d017      	beq.n	8001c92 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	68db      	ldr	r3, [r3, #12]
 8001c66:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	005b      	lsls	r3, r3, #1
 8001c6c:	2203      	movs	r2, #3
 8001c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c72:	43db      	mvns	r3, r3
 8001c74:	693a      	ldr	r2, [r7, #16]
 8001c76:	4013      	ands	r3, r2
 8001c78:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	689a      	ldr	r2, [r3, #8]
 8001c7e:	697b      	ldr	r3, [r7, #20]
 8001c80:	005b      	lsls	r3, r3, #1
 8001c82:	fa02 f303 	lsl.w	r3, r2, r3
 8001c86:	693a      	ldr	r2, [r7, #16]
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	693a      	ldr	r2, [r7, #16]
 8001c90:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	f003 0303 	and.w	r3, r3, #3
 8001c9a:	2b02      	cmp	r3, #2
 8001c9c:	d123      	bne.n	8001ce6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001c9e:	697b      	ldr	r3, [r7, #20]
 8001ca0:	08da      	lsrs	r2, r3, #3
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	3208      	adds	r2, #8
 8001ca6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001caa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001cac:	697b      	ldr	r3, [r7, #20]
 8001cae:	f003 0307 	and.w	r3, r3, #7
 8001cb2:	009b      	lsls	r3, r3, #2
 8001cb4:	220f      	movs	r2, #15
 8001cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cba:	43db      	mvns	r3, r3
 8001cbc:	693a      	ldr	r2, [r7, #16]
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	691a      	ldr	r2, [r3, #16]
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	f003 0307 	and.w	r3, r3, #7
 8001ccc:	009b      	lsls	r3, r3, #2
 8001cce:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd2:	693a      	ldr	r2, [r7, #16]
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	08da      	lsrs	r2, r3, #3
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	3208      	adds	r2, #8
 8001ce0:	6939      	ldr	r1, [r7, #16]
 8001ce2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	005b      	lsls	r3, r3, #1
 8001cf0:	2203      	movs	r2, #3
 8001cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf6:	43db      	mvns	r3, r3
 8001cf8:	693a      	ldr	r2, [r7, #16]
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	f003 0203 	and.w	r2, r3, #3
 8001d06:	697b      	ldr	r3, [r7, #20]
 8001d08:	005b      	lsls	r3, r3, #1
 8001d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0e:	693a      	ldr	r2, [r7, #16]
 8001d10:	4313      	orrs	r3, r2
 8001d12:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	693a      	ldr	r2, [r7, #16]
 8001d18:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	f000 80b2 	beq.w	8001e8c <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d28:	4b61      	ldr	r3, [pc, #388]	; (8001eb0 <HAL_GPIO_Init+0x2fc>)
 8001d2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d2c:	4a60      	ldr	r2, [pc, #384]	; (8001eb0 <HAL_GPIO_Init+0x2fc>)
 8001d2e:	f043 0301 	orr.w	r3, r3, #1
 8001d32:	6613      	str	r3, [r2, #96]	; 0x60
 8001d34:	4b5e      	ldr	r3, [pc, #376]	; (8001eb0 <HAL_GPIO_Init+0x2fc>)
 8001d36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d38:	f003 0301 	and.w	r3, r3, #1
 8001d3c:	60bb      	str	r3, [r7, #8]
 8001d3e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001d40:	4a5c      	ldr	r2, [pc, #368]	; (8001eb4 <HAL_GPIO_Init+0x300>)
 8001d42:	697b      	ldr	r3, [r7, #20]
 8001d44:	089b      	lsrs	r3, r3, #2
 8001d46:	3302      	adds	r3, #2
 8001d48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d4c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001d4e:	697b      	ldr	r3, [r7, #20]
 8001d50:	f003 0303 	and.w	r3, r3, #3
 8001d54:	009b      	lsls	r3, r3, #2
 8001d56:	220f      	movs	r2, #15
 8001d58:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5c:	43db      	mvns	r3, r3
 8001d5e:	693a      	ldr	r2, [r7, #16]
 8001d60:	4013      	ands	r3, r2
 8001d62:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001d6a:	d02b      	beq.n	8001dc4 <HAL_GPIO_Init+0x210>
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	4a52      	ldr	r2, [pc, #328]	; (8001eb8 <HAL_GPIO_Init+0x304>)
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d025      	beq.n	8001dc0 <HAL_GPIO_Init+0x20c>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	4a51      	ldr	r2, [pc, #324]	; (8001ebc <HAL_GPIO_Init+0x308>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d01f      	beq.n	8001dbc <HAL_GPIO_Init+0x208>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	4a50      	ldr	r2, [pc, #320]	; (8001ec0 <HAL_GPIO_Init+0x30c>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d019      	beq.n	8001db8 <HAL_GPIO_Init+0x204>
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	4a4f      	ldr	r2, [pc, #316]	; (8001ec4 <HAL_GPIO_Init+0x310>)
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d013      	beq.n	8001db4 <HAL_GPIO_Init+0x200>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	4a4e      	ldr	r2, [pc, #312]	; (8001ec8 <HAL_GPIO_Init+0x314>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d00d      	beq.n	8001db0 <HAL_GPIO_Init+0x1fc>
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	4a4d      	ldr	r2, [pc, #308]	; (8001ecc <HAL_GPIO_Init+0x318>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d007      	beq.n	8001dac <HAL_GPIO_Init+0x1f8>
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	4a4c      	ldr	r2, [pc, #304]	; (8001ed0 <HAL_GPIO_Init+0x31c>)
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d101      	bne.n	8001da8 <HAL_GPIO_Init+0x1f4>
 8001da4:	2307      	movs	r3, #7
 8001da6:	e00e      	b.n	8001dc6 <HAL_GPIO_Init+0x212>
 8001da8:	2308      	movs	r3, #8
 8001daa:	e00c      	b.n	8001dc6 <HAL_GPIO_Init+0x212>
 8001dac:	2306      	movs	r3, #6
 8001dae:	e00a      	b.n	8001dc6 <HAL_GPIO_Init+0x212>
 8001db0:	2305      	movs	r3, #5
 8001db2:	e008      	b.n	8001dc6 <HAL_GPIO_Init+0x212>
 8001db4:	2304      	movs	r3, #4
 8001db6:	e006      	b.n	8001dc6 <HAL_GPIO_Init+0x212>
 8001db8:	2303      	movs	r3, #3
 8001dba:	e004      	b.n	8001dc6 <HAL_GPIO_Init+0x212>
 8001dbc:	2302      	movs	r3, #2
 8001dbe:	e002      	b.n	8001dc6 <HAL_GPIO_Init+0x212>
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	e000      	b.n	8001dc6 <HAL_GPIO_Init+0x212>
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	697a      	ldr	r2, [r7, #20]
 8001dc8:	f002 0203 	and.w	r2, r2, #3
 8001dcc:	0092      	lsls	r2, r2, #2
 8001dce:	4093      	lsls	r3, r2
 8001dd0:	693a      	ldr	r2, [r7, #16]
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001dd6:	4937      	ldr	r1, [pc, #220]	; (8001eb4 <HAL_GPIO_Init+0x300>)
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	089b      	lsrs	r3, r3, #2
 8001ddc:	3302      	adds	r3, #2
 8001dde:	693a      	ldr	r2, [r7, #16]
 8001de0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001de4:	4b3b      	ldr	r3, [pc, #236]	; (8001ed4 <HAL_GPIO_Init+0x320>)
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	43db      	mvns	r3, r3
 8001dee:	693a      	ldr	r2, [r7, #16]
 8001df0:	4013      	ands	r3, r2
 8001df2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d003      	beq.n	8001e08 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001e00:	693a      	ldr	r2, [r7, #16]
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	4313      	orrs	r3, r2
 8001e06:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001e08:	4a32      	ldr	r2, [pc, #200]	; (8001ed4 <HAL_GPIO_Init+0x320>)
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001e0e:	4b31      	ldr	r3, [pc, #196]	; (8001ed4 <HAL_GPIO_Init+0x320>)
 8001e10:	68db      	ldr	r3, [r3, #12]
 8001e12:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	43db      	mvns	r3, r3
 8001e18:	693a      	ldr	r2, [r7, #16]
 8001e1a:	4013      	ands	r3, r2
 8001e1c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d003      	beq.n	8001e32 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8001e2a:	693a      	ldr	r2, [r7, #16]
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001e32:	4a28      	ldr	r2, [pc, #160]	; (8001ed4 <HAL_GPIO_Init+0x320>)
 8001e34:	693b      	ldr	r3, [r7, #16]
 8001e36:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001e38:	4b26      	ldr	r3, [pc, #152]	; (8001ed4 <HAL_GPIO_Init+0x320>)
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	43db      	mvns	r3, r3
 8001e42:	693a      	ldr	r2, [r7, #16]
 8001e44:	4013      	ands	r3, r2
 8001e46:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d003      	beq.n	8001e5c <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001e54:	693a      	ldr	r2, [r7, #16]
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001e5c:	4a1d      	ldr	r2, [pc, #116]	; (8001ed4 <HAL_GPIO_Init+0x320>)
 8001e5e:	693b      	ldr	r3, [r7, #16]
 8001e60:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001e62:	4b1c      	ldr	r3, [pc, #112]	; (8001ed4 <HAL_GPIO_Init+0x320>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	43db      	mvns	r3, r3
 8001e6c:	693a      	ldr	r2, [r7, #16]
 8001e6e:	4013      	ands	r3, r2
 8001e70:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d003      	beq.n	8001e86 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8001e7e:	693a      	ldr	r2, [r7, #16]
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	4313      	orrs	r3, r2
 8001e84:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001e86:	4a13      	ldr	r2, [pc, #76]	; (8001ed4 <HAL_GPIO_Init+0x320>)
 8001e88:	693b      	ldr	r3, [r7, #16]
 8001e8a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	3301      	adds	r3, #1
 8001e90:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	681a      	ldr	r2, [r3, #0]
 8001e96:	697b      	ldr	r3, [r7, #20]
 8001e98:	fa22 f303 	lsr.w	r3, r2, r3
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	f47f ae91 	bne.w	8001bc4 <HAL_GPIO_Init+0x10>
  }
}
 8001ea2:	bf00      	nop
 8001ea4:	bf00      	nop
 8001ea6:	371c      	adds	r7, #28
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eae:	4770      	bx	lr
 8001eb0:	40021000 	.word	0x40021000
 8001eb4:	40010000 	.word	0x40010000
 8001eb8:	48000400 	.word	0x48000400
 8001ebc:	48000800 	.word	0x48000800
 8001ec0:	48000c00 	.word	0x48000c00
 8001ec4:	48001000 	.word	0x48001000
 8001ec8:	48001400 	.word	0x48001400
 8001ecc:	48001800 	.word	0x48001800
 8001ed0:	48001c00 	.word	0x48001c00
 8001ed4:	40010400 	.word	0x40010400

08001ed8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b083      	sub	sp, #12
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
 8001ee0:	460b      	mov	r3, r1
 8001ee2:	807b      	strh	r3, [r7, #2]
 8001ee4:	4613      	mov	r3, r2
 8001ee6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ee8:	787b      	ldrb	r3, [r7, #1]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d003      	beq.n	8001ef6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001eee:	887a      	ldrh	r2, [r7, #2]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001ef4:	e002      	b.n	8001efc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001ef6:	887a      	ldrh	r2, [r7, #2]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001efc:	bf00      	nop
 8001efe:	370c      	adds	r7, #12
 8001f00:	46bd      	mov	sp, r7
 8001f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f06:	4770      	bx	lr

08001f08 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b082      	sub	sp, #8
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d101      	bne.n	8001f1a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001f16:	2301      	movs	r3, #1
 8001f18:	e081      	b.n	800201e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f20:	b2db      	uxtb	r3, r3
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d106      	bne.n	8001f34 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2200      	movs	r2, #0
 8001f2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001f2e:	6878      	ldr	r0, [r7, #4]
 8001f30:	f7ff f82c 	bl	8000f8c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2224      	movs	r2, #36	; 0x24
 8001f38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	681a      	ldr	r2, [r3, #0]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f022 0201 	bic.w	r2, r2, #1
 8001f4a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	685a      	ldr	r2, [r3, #4]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001f58:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	689a      	ldr	r2, [r3, #8]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001f68:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	68db      	ldr	r3, [r3, #12]
 8001f6e:	2b01      	cmp	r3, #1
 8001f70:	d107      	bne.n	8001f82 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	689a      	ldr	r2, [r3, #8]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001f7e:	609a      	str	r2, [r3, #8]
 8001f80:	e006      	b.n	8001f90 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	689a      	ldr	r2, [r3, #8]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001f8e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	68db      	ldr	r3, [r3, #12]
 8001f94:	2b02      	cmp	r3, #2
 8001f96:	d104      	bne.n	8001fa2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001fa0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	687a      	ldr	r2, [r7, #4]
 8001faa:	6812      	ldr	r2, [r2, #0]
 8001fac:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001fb0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001fb4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	68da      	ldr	r2, [r3, #12]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001fc4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	691a      	ldr	r2, [r3, #16]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	695b      	ldr	r3, [r3, #20]
 8001fce:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	699b      	ldr	r3, [r3, #24]
 8001fd6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	430a      	orrs	r2, r1
 8001fde:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	69d9      	ldr	r1, [r3, #28]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6a1a      	ldr	r2, [r3, #32]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	430a      	orrs	r2, r1
 8001fee:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	681a      	ldr	r2, [r3, #0]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f042 0201 	orr.w	r2, r2, #1
 8001ffe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2200      	movs	r2, #0
 8002004:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2220      	movs	r2, #32
 800200a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2200      	movs	r2, #0
 8002012:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2200      	movs	r2, #0
 8002018:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800201c:	2300      	movs	r3, #0
}
 800201e:	4618      	mov	r0, r3
 8002020:	3708      	adds	r7, #8
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}

08002026 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002026:	b480      	push	{r7}
 8002028:	b083      	sub	sp, #12
 800202a:	af00      	add	r7, sp, #0
 800202c:	6078      	str	r0, [r7, #4]
 800202e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002036:	b2db      	uxtb	r3, r3
 8002038:	2b20      	cmp	r3, #32
 800203a:	d138      	bne.n	80020ae <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002042:	2b01      	cmp	r3, #1
 8002044:	d101      	bne.n	800204a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002046:	2302      	movs	r3, #2
 8002048:	e032      	b.n	80020b0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2201      	movs	r2, #1
 800204e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2224      	movs	r2, #36	; 0x24
 8002056:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f022 0201 	bic.w	r2, r2, #1
 8002068:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	681a      	ldr	r2, [r3, #0]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002078:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	6819      	ldr	r1, [r3, #0]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	683a      	ldr	r2, [r7, #0]
 8002086:	430a      	orrs	r2, r1
 8002088:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	681a      	ldr	r2, [r3, #0]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f042 0201 	orr.w	r2, r2, #1
 8002098:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2220      	movs	r2, #32
 800209e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2200      	movs	r2, #0
 80020a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80020aa:	2300      	movs	r3, #0
 80020ac:	e000      	b.n	80020b0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80020ae:	2302      	movs	r3, #2
  }
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	370c      	adds	r7, #12
 80020b4:	46bd      	mov	sp, r7
 80020b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ba:	4770      	bx	lr

080020bc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80020bc:	b480      	push	{r7}
 80020be:	b085      	sub	sp, #20
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
 80020c4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80020cc:	b2db      	uxtb	r3, r3
 80020ce:	2b20      	cmp	r3, #32
 80020d0:	d139      	bne.n	8002146 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80020d8:	2b01      	cmp	r3, #1
 80020da:	d101      	bne.n	80020e0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80020dc:	2302      	movs	r3, #2
 80020de:	e033      	b.n	8002148 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2201      	movs	r2, #1
 80020e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2224      	movs	r2, #36	; 0x24
 80020ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	681a      	ldr	r2, [r3, #0]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f022 0201 	bic.w	r2, r2, #1
 80020fe:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800210e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	021b      	lsls	r3, r3, #8
 8002114:	68fa      	ldr	r2, [r7, #12]
 8002116:	4313      	orrs	r3, r2
 8002118:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	68fa      	ldr	r2, [r7, #12]
 8002120:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	681a      	ldr	r2, [r3, #0]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f042 0201 	orr.w	r2, r2, #1
 8002130:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2220      	movs	r2, #32
 8002136:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2200      	movs	r2, #0
 800213e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002142:	2300      	movs	r3, #0
 8002144:	e000      	b.n	8002148 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002146:	2302      	movs	r3, #2
  }
}
 8002148:	4618      	mov	r0, r3
 800214a:	3714      	adds	r7, #20
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr

08002154 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002154:	b480      	push	{r7}
 8002156:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002158:	4b0d      	ldr	r3, [pc, #52]	; (8002190 <HAL_PWREx_GetVoltageRange+0x3c>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002160:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002164:	d102      	bne.n	800216c <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8002166:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800216a:	e00b      	b.n	8002184 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 800216c:	4b08      	ldr	r3, [pc, #32]	; (8002190 <HAL_PWREx_GetVoltageRange+0x3c>)
 800216e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002172:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002176:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800217a:	d102      	bne.n	8002182 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 800217c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002180:	e000      	b.n	8002184 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8002182:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8002184:	4618      	mov	r0, r3
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr
 800218e:	bf00      	nop
 8002190:	40007000 	.word	0x40007000

08002194 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002194:	b480      	push	{r7}
 8002196:	b085      	sub	sp, #20
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d141      	bne.n	8002226 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80021a2:	4b4b      	ldr	r3, [pc, #300]	; (80022d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80021aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021ae:	d131      	bne.n	8002214 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80021b0:	4b47      	ldr	r3, [pc, #284]	; (80022d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80021b6:	4a46      	ldr	r2, [pc, #280]	; (80022d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80021bc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80021c0:	4b43      	ldr	r3, [pc, #268]	; (80022d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80021c8:	4a41      	ldr	r2, [pc, #260]	; (80022d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80021ce:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80021d0:	4b40      	ldr	r3, [pc, #256]	; (80022d4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	2232      	movs	r2, #50	; 0x32
 80021d6:	fb02 f303 	mul.w	r3, r2, r3
 80021da:	4a3f      	ldr	r2, [pc, #252]	; (80022d8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80021dc:	fba2 2303 	umull	r2, r3, r2, r3
 80021e0:	0c9b      	lsrs	r3, r3, #18
 80021e2:	3301      	adds	r3, #1
 80021e4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80021e6:	e002      	b.n	80021ee <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	3b01      	subs	r3, #1
 80021ec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80021ee:	4b38      	ldr	r3, [pc, #224]	; (80022d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021f0:	695b      	ldr	r3, [r3, #20]
 80021f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021fa:	d102      	bne.n	8002202 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d1f2      	bne.n	80021e8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002202:	4b33      	ldr	r3, [pc, #204]	; (80022d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002204:	695b      	ldr	r3, [r3, #20]
 8002206:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800220a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800220e:	d158      	bne.n	80022c2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002210:	2303      	movs	r3, #3
 8002212:	e057      	b.n	80022c4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002214:	4b2e      	ldr	r3, [pc, #184]	; (80022d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002216:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800221a:	4a2d      	ldr	r2, [pc, #180]	; (80022d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800221c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002220:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002224:	e04d      	b.n	80022c2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800222c:	d141      	bne.n	80022b2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800222e:	4b28      	ldr	r3, [pc, #160]	; (80022d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002236:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800223a:	d131      	bne.n	80022a0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800223c:	4b24      	ldr	r3, [pc, #144]	; (80022d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800223e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002242:	4a23      	ldr	r2, [pc, #140]	; (80022d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002244:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002248:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800224c:	4b20      	ldr	r3, [pc, #128]	; (80022d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002254:	4a1e      	ldr	r2, [pc, #120]	; (80022d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002256:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800225a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800225c:	4b1d      	ldr	r3, [pc, #116]	; (80022d4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	2232      	movs	r2, #50	; 0x32
 8002262:	fb02 f303 	mul.w	r3, r2, r3
 8002266:	4a1c      	ldr	r2, [pc, #112]	; (80022d8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002268:	fba2 2303 	umull	r2, r3, r2, r3
 800226c:	0c9b      	lsrs	r3, r3, #18
 800226e:	3301      	adds	r3, #1
 8002270:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002272:	e002      	b.n	800227a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	3b01      	subs	r3, #1
 8002278:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800227a:	4b15      	ldr	r3, [pc, #84]	; (80022d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800227c:	695b      	ldr	r3, [r3, #20]
 800227e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002282:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002286:	d102      	bne.n	800228e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d1f2      	bne.n	8002274 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800228e:	4b10      	ldr	r3, [pc, #64]	; (80022d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002290:	695b      	ldr	r3, [r3, #20]
 8002292:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002296:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800229a:	d112      	bne.n	80022c2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800229c:	2303      	movs	r3, #3
 800229e:	e011      	b.n	80022c4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80022a0:	4b0b      	ldr	r3, [pc, #44]	; (80022d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80022a6:	4a0a      	ldr	r2, [pc, #40]	; (80022d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022ac:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80022b0:	e007      	b.n	80022c2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80022b2:	4b07      	ldr	r3, [pc, #28]	; (80022d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80022ba:	4a05      	ldr	r2, [pc, #20]	; (80022d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022bc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80022c0:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80022c2:	2300      	movs	r3, #0
}
 80022c4:	4618      	mov	r0, r3
 80022c6:	3714      	adds	r7, #20
 80022c8:	46bd      	mov	sp, r7
 80022ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ce:	4770      	bx	lr
 80022d0:	40007000 	.word	0x40007000
 80022d4:	20000000 	.word	0x20000000
 80022d8:	431bde83 	.word	0x431bde83

080022dc <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80022dc:	b480      	push	{r7}
 80022de:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80022e0:	4b05      	ldr	r3, [pc, #20]	; (80022f8 <HAL_PWREx_EnableVddIO2+0x1c>)
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	4a04      	ldr	r2, [pc, #16]	; (80022f8 <HAL_PWREx_EnableVddIO2+0x1c>)
 80022e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80022ea:	6053      	str	r3, [r2, #4]
}
 80022ec:	bf00      	nop
 80022ee:	46bd      	mov	sp, r7
 80022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f4:	4770      	bx	lr
 80022f6:	bf00      	nop
 80022f8:	40007000 	.word	0x40007000

080022fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b088      	sub	sp, #32
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d102      	bne.n	8002310 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	f000 bc08 	b.w	8002b20 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002310:	4b96      	ldr	r3, [pc, #600]	; (800256c <HAL_RCC_OscConfig+0x270>)
 8002312:	689b      	ldr	r3, [r3, #8]
 8002314:	f003 030c 	and.w	r3, r3, #12
 8002318:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800231a:	4b94      	ldr	r3, [pc, #592]	; (800256c <HAL_RCC_OscConfig+0x270>)
 800231c:	68db      	ldr	r3, [r3, #12]
 800231e:	f003 0303 	and.w	r3, r3, #3
 8002322:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f003 0310 	and.w	r3, r3, #16
 800232c:	2b00      	cmp	r3, #0
 800232e:	f000 80e4 	beq.w	80024fa <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002332:	69bb      	ldr	r3, [r7, #24]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d007      	beq.n	8002348 <HAL_RCC_OscConfig+0x4c>
 8002338:	69bb      	ldr	r3, [r7, #24]
 800233a:	2b0c      	cmp	r3, #12
 800233c:	f040 808b 	bne.w	8002456 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	2b01      	cmp	r3, #1
 8002344:	f040 8087 	bne.w	8002456 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002348:	4b88      	ldr	r3, [pc, #544]	; (800256c <HAL_RCC_OscConfig+0x270>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f003 0302 	and.w	r3, r3, #2
 8002350:	2b00      	cmp	r3, #0
 8002352:	d005      	beq.n	8002360 <HAL_RCC_OscConfig+0x64>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	699b      	ldr	r3, [r3, #24]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d101      	bne.n	8002360 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800235c:	2301      	movs	r3, #1
 800235e:	e3df      	b.n	8002b20 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6a1a      	ldr	r2, [r3, #32]
 8002364:	4b81      	ldr	r3, [pc, #516]	; (800256c <HAL_RCC_OscConfig+0x270>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f003 0308 	and.w	r3, r3, #8
 800236c:	2b00      	cmp	r3, #0
 800236e:	d004      	beq.n	800237a <HAL_RCC_OscConfig+0x7e>
 8002370:	4b7e      	ldr	r3, [pc, #504]	; (800256c <HAL_RCC_OscConfig+0x270>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002378:	e005      	b.n	8002386 <HAL_RCC_OscConfig+0x8a>
 800237a:	4b7c      	ldr	r3, [pc, #496]	; (800256c <HAL_RCC_OscConfig+0x270>)
 800237c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002380:	091b      	lsrs	r3, r3, #4
 8002382:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002386:	4293      	cmp	r3, r2
 8002388:	d223      	bcs.n	80023d2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6a1b      	ldr	r3, [r3, #32]
 800238e:	4618      	mov	r0, r3
 8002390:	f000 fdca 	bl	8002f28 <RCC_SetFlashLatencyFromMSIRange>
 8002394:	4603      	mov	r3, r0
 8002396:	2b00      	cmp	r3, #0
 8002398:	d001      	beq.n	800239e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	e3c0      	b.n	8002b20 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800239e:	4b73      	ldr	r3, [pc, #460]	; (800256c <HAL_RCC_OscConfig+0x270>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a72      	ldr	r2, [pc, #456]	; (800256c <HAL_RCC_OscConfig+0x270>)
 80023a4:	f043 0308 	orr.w	r3, r3, #8
 80023a8:	6013      	str	r3, [r2, #0]
 80023aa:	4b70      	ldr	r3, [pc, #448]	; (800256c <HAL_RCC_OscConfig+0x270>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6a1b      	ldr	r3, [r3, #32]
 80023b6:	496d      	ldr	r1, [pc, #436]	; (800256c <HAL_RCC_OscConfig+0x270>)
 80023b8:	4313      	orrs	r3, r2
 80023ba:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80023bc:	4b6b      	ldr	r3, [pc, #428]	; (800256c <HAL_RCC_OscConfig+0x270>)
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	69db      	ldr	r3, [r3, #28]
 80023c8:	021b      	lsls	r3, r3, #8
 80023ca:	4968      	ldr	r1, [pc, #416]	; (800256c <HAL_RCC_OscConfig+0x270>)
 80023cc:	4313      	orrs	r3, r2
 80023ce:	604b      	str	r3, [r1, #4]
 80023d0:	e025      	b.n	800241e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80023d2:	4b66      	ldr	r3, [pc, #408]	; (800256c <HAL_RCC_OscConfig+0x270>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4a65      	ldr	r2, [pc, #404]	; (800256c <HAL_RCC_OscConfig+0x270>)
 80023d8:	f043 0308 	orr.w	r3, r3, #8
 80023dc:	6013      	str	r3, [r2, #0]
 80023de:	4b63      	ldr	r3, [pc, #396]	; (800256c <HAL_RCC_OscConfig+0x270>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6a1b      	ldr	r3, [r3, #32]
 80023ea:	4960      	ldr	r1, [pc, #384]	; (800256c <HAL_RCC_OscConfig+0x270>)
 80023ec:	4313      	orrs	r3, r2
 80023ee:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80023f0:	4b5e      	ldr	r3, [pc, #376]	; (800256c <HAL_RCC_OscConfig+0x270>)
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	69db      	ldr	r3, [r3, #28]
 80023fc:	021b      	lsls	r3, r3, #8
 80023fe:	495b      	ldr	r1, [pc, #364]	; (800256c <HAL_RCC_OscConfig+0x270>)
 8002400:	4313      	orrs	r3, r2
 8002402:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002404:	69bb      	ldr	r3, [r7, #24]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d109      	bne.n	800241e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6a1b      	ldr	r3, [r3, #32]
 800240e:	4618      	mov	r0, r3
 8002410:	f000 fd8a 	bl	8002f28 <RCC_SetFlashLatencyFromMSIRange>
 8002414:	4603      	mov	r3, r0
 8002416:	2b00      	cmp	r3, #0
 8002418:	d001      	beq.n	800241e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	e380      	b.n	8002b20 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800241e:	f000 fcc1 	bl	8002da4 <HAL_RCC_GetSysClockFreq>
 8002422:	4602      	mov	r2, r0
 8002424:	4b51      	ldr	r3, [pc, #324]	; (800256c <HAL_RCC_OscConfig+0x270>)
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	091b      	lsrs	r3, r3, #4
 800242a:	f003 030f 	and.w	r3, r3, #15
 800242e:	4950      	ldr	r1, [pc, #320]	; (8002570 <HAL_RCC_OscConfig+0x274>)
 8002430:	5ccb      	ldrb	r3, [r1, r3]
 8002432:	f003 031f 	and.w	r3, r3, #31
 8002436:	fa22 f303 	lsr.w	r3, r2, r3
 800243a:	4a4e      	ldr	r2, [pc, #312]	; (8002574 <HAL_RCC_OscConfig+0x278>)
 800243c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800243e:	4b4e      	ldr	r3, [pc, #312]	; (8002578 <HAL_RCC_OscConfig+0x27c>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4618      	mov	r0, r3
 8002444:	f7ff f954 	bl	80016f0 <HAL_InitTick>
 8002448:	4603      	mov	r3, r0
 800244a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800244c:	7bfb      	ldrb	r3, [r7, #15]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d052      	beq.n	80024f8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002452:	7bfb      	ldrb	r3, [r7, #15]
 8002454:	e364      	b.n	8002b20 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	699b      	ldr	r3, [r3, #24]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d032      	beq.n	80024c4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800245e:	4b43      	ldr	r3, [pc, #268]	; (800256c <HAL_RCC_OscConfig+0x270>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a42      	ldr	r2, [pc, #264]	; (800256c <HAL_RCC_OscConfig+0x270>)
 8002464:	f043 0301 	orr.w	r3, r3, #1
 8002468:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800246a:	f7ff f991 	bl	8001790 <HAL_GetTick>
 800246e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002470:	e008      	b.n	8002484 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002472:	f7ff f98d 	bl	8001790 <HAL_GetTick>
 8002476:	4602      	mov	r2, r0
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	1ad3      	subs	r3, r2, r3
 800247c:	2b02      	cmp	r3, #2
 800247e:	d901      	bls.n	8002484 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002480:	2303      	movs	r3, #3
 8002482:	e34d      	b.n	8002b20 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002484:	4b39      	ldr	r3, [pc, #228]	; (800256c <HAL_RCC_OscConfig+0x270>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f003 0302 	and.w	r3, r3, #2
 800248c:	2b00      	cmp	r3, #0
 800248e:	d0f0      	beq.n	8002472 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002490:	4b36      	ldr	r3, [pc, #216]	; (800256c <HAL_RCC_OscConfig+0x270>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a35      	ldr	r2, [pc, #212]	; (800256c <HAL_RCC_OscConfig+0x270>)
 8002496:	f043 0308 	orr.w	r3, r3, #8
 800249a:	6013      	str	r3, [r2, #0]
 800249c:	4b33      	ldr	r3, [pc, #204]	; (800256c <HAL_RCC_OscConfig+0x270>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6a1b      	ldr	r3, [r3, #32]
 80024a8:	4930      	ldr	r1, [pc, #192]	; (800256c <HAL_RCC_OscConfig+0x270>)
 80024aa:	4313      	orrs	r3, r2
 80024ac:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80024ae:	4b2f      	ldr	r3, [pc, #188]	; (800256c <HAL_RCC_OscConfig+0x270>)
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	69db      	ldr	r3, [r3, #28]
 80024ba:	021b      	lsls	r3, r3, #8
 80024bc:	492b      	ldr	r1, [pc, #172]	; (800256c <HAL_RCC_OscConfig+0x270>)
 80024be:	4313      	orrs	r3, r2
 80024c0:	604b      	str	r3, [r1, #4]
 80024c2:	e01a      	b.n	80024fa <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80024c4:	4b29      	ldr	r3, [pc, #164]	; (800256c <HAL_RCC_OscConfig+0x270>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a28      	ldr	r2, [pc, #160]	; (800256c <HAL_RCC_OscConfig+0x270>)
 80024ca:	f023 0301 	bic.w	r3, r3, #1
 80024ce:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80024d0:	f7ff f95e 	bl	8001790 <HAL_GetTick>
 80024d4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80024d6:	e008      	b.n	80024ea <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80024d8:	f7ff f95a 	bl	8001790 <HAL_GetTick>
 80024dc:	4602      	mov	r2, r0
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	1ad3      	subs	r3, r2, r3
 80024e2:	2b02      	cmp	r3, #2
 80024e4:	d901      	bls.n	80024ea <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80024e6:	2303      	movs	r3, #3
 80024e8:	e31a      	b.n	8002b20 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80024ea:	4b20      	ldr	r3, [pc, #128]	; (800256c <HAL_RCC_OscConfig+0x270>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f003 0302 	and.w	r3, r3, #2
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d1f0      	bne.n	80024d8 <HAL_RCC_OscConfig+0x1dc>
 80024f6:	e000      	b.n	80024fa <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80024f8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f003 0301 	and.w	r3, r3, #1
 8002502:	2b00      	cmp	r3, #0
 8002504:	d073      	beq.n	80025ee <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002506:	69bb      	ldr	r3, [r7, #24]
 8002508:	2b08      	cmp	r3, #8
 800250a:	d005      	beq.n	8002518 <HAL_RCC_OscConfig+0x21c>
 800250c:	69bb      	ldr	r3, [r7, #24]
 800250e:	2b0c      	cmp	r3, #12
 8002510:	d10e      	bne.n	8002530 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	2b03      	cmp	r3, #3
 8002516:	d10b      	bne.n	8002530 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002518:	4b14      	ldr	r3, [pc, #80]	; (800256c <HAL_RCC_OscConfig+0x270>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002520:	2b00      	cmp	r3, #0
 8002522:	d063      	beq.n	80025ec <HAL_RCC_OscConfig+0x2f0>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d15f      	bne.n	80025ec <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800252c:	2301      	movs	r3, #1
 800252e:	e2f7      	b.n	8002b20 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002538:	d106      	bne.n	8002548 <HAL_RCC_OscConfig+0x24c>
 800253a:	4b0c      	ldr	r3, [pc, #48]	; (800256c <HAL_RCC_OscConfig+0x270>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a0b      	ldr	r2, [pc, #44]	; (800256c <HAL_RCC_OscConfig+0x270>)
 8002540:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002544:	6013      	str	r3, [r2, #0]
 8002546:	e025      	b.n	8002594 <HAL_RCC_OscConfig+0x298>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002550:	d114      	bne.n	800257c <HAL_RCC_OscConfig+0x280>
 8002552:	4b06      	ldr	r3, [pc, #24]	; (800256c <HAL_RCC_OscConfig+0x270>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a05      	ldr	r2, [pc, #20]	; (800256c <HAL_RCC_OscConfig+0x270>)
 8002558:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800255c:	6013      	str	r3, [r2, #0]
 800255e:	4b03      	ldr	r3, [pc, #12]	; (800256c <HAL_RCC_OscConfig+0x270>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4a02      	ldr	r2, [pc, #8]	; (800256c <HAL_RCC_OscConfig+0x270>)
 8002564:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002568:	6013      	str	r3, [r2, #0]
 800256a:	e013      	b.n	8002594 <HAL_RCC_OscConfig+0x298>
 800256c:	40021000 	.word	0x40021000
 8002570:	08007cc0 	.word	0x08007cc0
 8002574:	20000000 	.word	0x20000000
 8002578:	20000004 	.word	0x20000004
 800257c:	4ba0      	ldr	r3, [pc, #640]	; (8002800 <HAL_RCC_OscConfig+0x504>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a9f      	ldr	r2, [pc, #636]	; (8002800 <HAL_RCC_OscConfig+0x504>)
 8002582:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002586:	6013      	str	r3, [r2, #0]
 8002588:	4b9d      	ldr	r3, [pc, #628]	; (8002800 <HAL_RCC_OscConfig+0x504>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a9c      	ldr	r2, [pc, #624]	; (8002800 <HAL_RCC_OscConfig+0x504>)
 800258e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002592:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d013      	beq.n	80025c4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800259c:	f7ff f8f8 	bl	8001790 <HAL_GetTick>
 80025a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80025a2:	e008      	b.n	80025b6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025a4:	f7ff f8f4 	bl	8001790 <HAL_GetTick>
 80025a8:	4602      	mov	r2, r0
 80025aa:	693b      	ldr	r3, [r7, #16]
 80025ac:	1ad3      	subs	r3, r2, r3
 80025ae:	2b64      	cmp	r3, #100	; 0x64
 80025b0:	d901      	bls.n	80025b6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80025b2:	2303      	movs	r3, #3
 80025b4:	e2b4      	b.n	8002b20 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80025b6:	4b92      	ldr	r3, [pc, #584]	; (8002800 <HAL_RCC_OscConfig+0x504>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d0f0      	beq.n	80025a4 <HAL_RCC_OscConfig+0x2a8>
 80025c2:	e014      	b.n	80025ee <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025c4:	f7ff f8e4 	bl	8001790 <HAL_GetTick>
 80025c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80025ca:	e008      	b.n	80025de <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025cc:	f7ff f8e0 	bl	8001790 <HAL_GetTick>
 80025d0:	4602      	mov	r2, r0
 80025d2:	693b      	ldr	r3, [r7, #16]
 80025d4:	1ad3      	subs	r3, r2, r3
 80025d6:	2b64      	cmp	r3, #100	; 0x64
 80025d8:	d901      	bls.n	80025de <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80025da:	2303      	movs	r3, #3
 80025dc:	e2a0      	b.n	8002b20 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80025de:	4b88      	ldr	r3, [pc, #544]	; (8002800 <HAL_RCC_OscConfig+0x504>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d1f0      	bne.n	80025cc <HAL_RCC_OscConfig+0x2d0>
 80025ea:	e000      	b.n	80025ee <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f003 0302 	and.w	r3, r3, #2
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d060      	beq.n	80026bc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80025fa:	69bb      	ldr	r3, [r7, #24]
 80025fc:	2b04      	cmp	r3, #4
 80025fe:	d005      	beq.n	800260c <HAL_RCC_OscConfig+0x310>
 8002600:	69bb      	ldr	r3, [r7, #24]
 8002602:	2b0c      	cmp	r3, #12
 8002604:	d119      	bne.n	800263a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	2b02      	cmp	r3, #2
 800260a:	d116      	bne.n	800263a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800260c:	4b7c      	ldr	r3, [pc, #496]	; (8002800 <HAL_RCC_OscConfig+0x504>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002614:	2b00      	cmp	r3, #0
 8002616:	d005      	beq.n	8002624 <HAL_RCC_OscConfig+0x328>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	68db      	ldr	r3, [r3, #12]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d101      	bne.n	8002624 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002620:	2301      	movs	r3, #1
 8002622:	e27d      	b.n	8002b20 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002624:	4b76      	ldr	r3, [pc, #472]	; (8002800 <HAL_RCC_OscConfig+0x504>)
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	691b      	ldr	r3, [r3, #16]
 8002630:	061b      	lsls	r3, r3, #24
 8002632:	4973      	ldr	r1, [pc, #460]	; (8002800 <HAL_RCC_OscConfig+0x504>)
 8002634:	4313      	orrs	r3, r2
 8002636:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002638:	e040      	b.n	80026bc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	68db      	ldr	r3, [r3, #12]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d023      	beq.n	800268a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002642:	4b6f      	ldr	r3, [pc, #444]	; (8002800 <HAL_RCC_OscConfig+0x504>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a6e      	ldr	r2, [pc, #440]	; (8002800 <HAL_RCC_OscConfig+0x504>)
 8002648:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800264c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800264e:	f7ff f89f 	bl	8001790 <HAL_GetTick>
 8002652:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002654:	e008      	b.n	8002668 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002656:	f7ff f89b 	bl	8001790 <HAL_GetTick>
 800265a:	4602      	mov	r2, r0
 800265c:	693b      	ldr	r3, [r7, #16]
 800265e:	1ad3      	subs	r3, r2, r3
 8002660:	2b02      	cmp	r3, #2
 8002662:	d901      	bls.n	8002668 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002664:	2303      	movs	r3, #3
 8002666:	e25b      	b.n	8002b20 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002668:	4b65      	ldr	r3, [pc, #404]	; (8002800 <HAL_RCC_OscConfig+0x504>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002670:	2b00      	cmp	r3, #0
 8002672:	d0f0      	beq.n	8002656 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002674:	4b62      	ldr	r3, [pc, #392]	; (8002800 <HAL_RCC_OscConfig+0x504>)
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	691b      	ldr	r3, [r3, #16]
 8002680:	061b      	lsls	r3, r3, #24
 8002682:	495f      	ldr	r1, [pc, #380]	; (8002800 <HAL_RCC_OscConfig+0x504>)
 8002684:	4313      	orrs	r3, r2
 8002686:	604b      	str	r3, [r1, #4]
 8002688:	e018      	b.n	80026bc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800268a:	4b5d      	ldr	r3, [pc, #372]	; (8002800 <HAL_RCC_OscConfig+0x504>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4a5c      	ldr	r2, [pc, #368]	; (8002800 <HAL_RCC_OscConfig+0x504>)
 8002690:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002694:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002696:	f7ff f87b 	bl	8001790 <HAL_GetTick>
 800269a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800269c:	e008      	b.n	80026b0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800269e:	f7ff f877 	bl	8001790 <HAL_GetTick>
 80026a2:	4602      	mov	r2, r0
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	1ad3      	subs	r3, r2, r3
 80026a8:	2b02      	cmp	r3, #2
 80026aa:	d901      	bls.n	80026b0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80026ac:	2303      	movs	r3, #3
 80026ae:	e237      	b.n	8002b20 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80026b0:	4b53      	ldr	r3, [pc, #332]	; (8002800 <HAL_RCC_OscConfig+0x504>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d1f0      	bne.n	800269e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f003 0308 	and.w	r3, r3, #8
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d03c      	beq.n	8002742 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	695b      	ldr	r3, [r3, #20]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d01c      	beq.n	800270a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026d0:	4b4b      	ldr	r3, [pc, #300]	; (8002800 <HAL_RCC_OscConfig+0x504>)
 80026d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026d6:	4a4a      	ldr	r2, [pc, #296]	; (8002800 <HAL_RCC_OscConfig+0x504>)
 80026d8:	f043 0301 	orr.w	r3, r3, #1
 80026dc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026e0:	f7ff f856 	bl	8001790 <HAL_GetTick>
 80026e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80026e6:	e008      	b.n	80026fa <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026e8:	f7ff f852 	bl	8001790 <HAL_GetTick>
 80026ec:	4602      	mov	r2, r0
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	1ad3      	subs	r3, r2, r3
 80026f2:	2b02      	cmp	r3, #2
 80026f4:	d901      	bls.n	80026fa <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80026f6:	2303      	movs	r3, #3
 80026f8:	e212      	b.n	8002b20 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80026fa:	4b41      	ldr	r3, [pc, #260]	; (8002800 <HAL_RCC_OscConfig+0x504>)
 80026fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002700:	f003 0302 	and.w	r3, r3, #2
 8002704:	2b00      	cmp	r3, #0
 8002706:	d0ef      	beq.n	80026e8 <HAL_RCC_OscConfig+0x3ec>
 8002708:	e01b      	b.n	8002742 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800270a:	4b3d      	ldr	r3, [pc, #244]	; (8002800 <HAL_RCC_OscConfig+0x504>)
 800270c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002710:	4a3b      	ldr	r2, [pc, #236]	; (8002800 <HAL_RCC_OscConfig+0x504>)
 8002712:	f023 0301 	bic.w	r3, r3, #1
 8002716:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800271a:	f7ff f839 	bl	8001790 <HAL_GetTick>
 800271e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002720:	e008      	b.n	8002734 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002722:	f7ff f835 	bl	8001790 <HAL_GetTick>
 8002726:	4602      	mov	r2, r0
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	1ad3      	subs	r3, r2, r3
 800272c:	2b02      	cmp	r3, #2
 800272e:	d901      	bls.n	8002734 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002730:	2303      	movs	r3, #3
 8002732:	e1f5      	b.n	8002b20 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002734:	4b32      	ldr	r3, [pc, #200]	; (8002800 <HAL_RCC_OscConfig+0x504>)
 8002736:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800273a:	f003 0302 	and.w	r3, r3, #2
 800273e:	2b00      	cmp	r3, #0
 8002740:	d1ef      	bne.n	8002722 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 0304 	and.w	r3, r3, #4
 800274a:	2b00      	cmp	r3, #0
 800274c:	f000 80a6 	beq.w	800289c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002750:	2300      	movs	r3, #0
 8002752:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002754:	4b2a      	ldr	r3, [pc, #168]	; (8002800 <HAL_RCC_OscConfig+0x504>)
 8002756:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002758:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800275c:	2b00      	cmp	r3, #0
 800275e:	d10d      	bne.n	800277c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002760:	4b27      	ldr	r3, [pc, #156]	; (8002800 <HAL_RCC_OscConfig+0x504>)
 8002762:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002764:	4a26      	ldr	r2, [pc, #152]	; (8002800 <HAL_RCC_OscConfig+0x504>)
 8002766:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800276a:	6593      	str	r3, [r2, #88]	; 0x58
 800276c:	4b24      	ldr	r3, [pc, #144]	; (8002800 <HAL_RCC_OscConfig+0x504>)
 800276e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002770:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002774:	60bb      	str	r3, [r7, #8]
 8002776:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002778:	2301      	movs	r3, #1
 800277a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800277c:	4b21      	ldr	r3, [pc, #132]	; (8002804 <HAL_RCC_OscConfig+0x508>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002784:	2b00      	cmp	r3, #0
 8002786:	d118      	bne.n	80027ba <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002788:	4b1e      	ldr	r3, [pc, #120]	; (8002804 <HAL_RCC_OscConfig+0x508>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a1d      	ldr	r2, [pc, #116]	; (8002804 <HAL_RCC_OscConfig+0x508>)
 800278e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002792:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002794:	f7fe fffc 	bl	8001790 <HAL_GetTick>
 8002798:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800279a:	e008      	b.n	80027ae <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800279c:	f7fe fff8 	bl	8001790 <HAL_GetTick>
 80027a0:	4602      	mov	r2, r0
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	1ad3      	subs	r3, r2, r3
 80027a6:	2b02      	cmp	r3, #2
 80027a8:	d901      	bls.n	80027ae <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80027aa:	2303      	movs	r3, #3
 80027ac:	e1b8      	b.n	8002b20 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027ae:	4b15      	ldr	r3, [pc, #84]	; (8002804 <HAL_RCC_OscConfig+0x508>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d0f0      	beq.n	800279c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	689b      	ldr	r3, [r3, #8]
 80027be:	2b01      	cmp	r3, #1
 80027c0:	d108      	bne.n	80027d4 <HAL_RCC_OscConfig+0x4d8>
 80027c2:	4b0f      	ldr	r3, [pc, #60]	; (8002800 <HAL_RCC_OscConfig+0x504>)
 80027c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027c8:	4a0d      	ldr	r2, [pc, #52]	; (8002800 <HAL_RCC_OscConfig+0x504>)
 80027ca:	f043 0301 	orr.w	r3, r3, #1
 80027ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80027d2:	e029      	b.n	8002828 <HAL_RCC_OscConfig+0x52c>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	2b05      	cmp	r3, #5
 80027da:	d115      	bne.n	8002808 <HAL_RCC_OscConfig+0x50c>
 80027dc:	4b08      	ldr	r3, [pc, #32]	; (8002800 <HAL_RCC_OscConfig+0x504>)
 80027de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027e2:	4a07      	ldr	r2, [pc, #28]	; (8002800 <HAL_RCC_OscConfig+0x504>)
 80027e4:	f043 0304 	orr.w	r3, r3, #4
 80027e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80027ec:	4b04      	ldr	r3, [pc, #16]	; (8002800 <HAL_RCC_OscConfig+0x504>)
 80027ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027f2:	4a03      	ldr	r2, [pc, #12]	; (8002800 <HAL_RCC_OscConfig+0x504>)
 80027f4:	f043 0301 	orr.w	r3, r3, #1
 80027f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80027fc:	e014      	b.n	8002828 <HAL_RCC_OscConfig+0x52c>
 80027fe:	bf00      	nop
 8002800:	40021000 	.word	0x40021000
 8002804:	40007000 	.word	0x40007000
 8002808:	4b9d      	ldr	r3, [pc, #628]	; (8002a80 <HAL_RCC_OscConfig+0x784>)
 800280a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800280e:	4a9c      	ldr	r2, [pc, #624]	; (8002a80 <HAL_RCC_OscConfig+0x784>)
 8002810:	f023 0301 	bic.w	r3, r3, #1
 8002814:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002818:	4b99      	ldr	r3, [pc, #612]	; (8002a80 <HAL_RCC_OscConfig+0x784>)
 800281a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800281e:	4a98      	ldr	r2, [pc, #608]	; (8002a80 <HAL_RCC_OscConfig+0x784>)
 8002820:	f023 0304 	bic.w	r3, r3, #4
 8002824:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d016      	beq.n	800285e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002830:	f7fe ffae 	bl	8001790 <HAL_GetTick>
 8002834:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002836:	e00a      	b.n	800284e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002838:	f7fe ffaa 	bl	8001790 <HAL_GetTick>
 800283c:	4602      	mov	r2, r0
 800283e:	693b      	ldr	r3, [r7, #16]
 8002840:	1ad3      	subs	r3, r2, r3
 8002842:	f241 3288 	movw	r2, #5000	; 0x1388
 8002846:	4293      	cmp	r3, r2
 8002848:	d901      	bls.n	800284e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800284a:	2303      	movs	r3, #3
 800284c:	e168      	b.n	8002b20 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800284e:	4b8c      	ldr	r3, [pc, #560]	; (8002a80 <HAL_RCC_OscConfig+0x784>)
 8002850:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002854:	f003 0302 	and.w	r3, r3, #2
 8002858:	2b00      	cmp	r3, #0
 800285a:	d0ed      	beq.n	8002838 <HAL_RCC_OscConfig+0x53c>
 800285c:	e015      	b.n	800288a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800285e:	f7fe ff97 	bl	8001790 <HAL_GetTick>
 8002862:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002864:	e00a      	b.n	800287c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002866:	f7fe ff93 	bl	8001790 <HAL_GetTick>
 800286a:	4602      	mov	r2, r0
 800286c:	693b      	ldr	r3, [r7, #16]
 800286e:	1ad3      	subs	r3, r2, r3
 8002870:	f241 3288 	movw	r2, #5000	; 0x1388
 8002874:	4293      	cmp	r3, r2
 8002876:	d901      	bls.n	800287c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002878:	2303      	movs	r3, #3
 800287a:	e151      	b.n	8002b20 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800287c:	4b80      	ldr	r3, [pc, #512]	; (8002a80 <HAL_RCC_OscConfig+0x784>)
 800287e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002882:	f003 0302 	and.w	r3, r3, #2
 8002886:	2b00      	cmp	r3, #0
 8002888:	d1ed      	bne.n	8002866 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800288a:	7ffb      	ldrb	r3, [r7, #31]
 800288c:	2b01      	cmp	r3, #1
 800288e:	d105      	bne.n	800289c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002890:	4b7b      	ldr	r3, [pc, #492]	; (8002a80 <HAL_RCC_OscConfig+0x784>)
 8002892:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002894:	4a7a      	ldr	r2, [pc, #488]	; (8002a80 <HAL_RCC_OscConfig+0x784>)
 8002896:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800289a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f003 0320 	and.w	r3, r3, #32
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d03c      	beq.n	8002922 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d01c      	beq.n	80028ea <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80028b0:	4b73      	ldr	r3, [pc, #460]	; (8002a80 <HAL_RCC_OscConfig+0x784>)
 80028b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80028b6:	4a72      	ldr	r2, [pc, #456]	; (8002a80 <HAL_RCC_OscConfig+0x784>)
 80028b8:	f043 0301 	orr.w	r3, r3, #1
 80028bc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028c0:	f7fe ff66 	bl	8001790 <HAL_GetTick>
 80028c4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80028c6:	e008      	b.n	80028da <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80028c8:	f7fe ff62 	bl	8001790 <HAL_GetTick>
 80028cc:	4602      	mov	r2, r0
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	1ad3      	subs	r3, r2, r3
 80028d2:	2b02      	cmp	r3, #2
 80028d4:	d901      	bls.n	80028da <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80028d6:	2303      	movs	r3, #3
 80028d8:	e122      	b.n	8002b20 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80028da:	4b69      	ldr	r3, [pc, #420]	; (8002a80 <HAL_RCC_OscConfig+0x784>)
 80028dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80028e0:	f003 0302 	and.w	r3, r3, #2
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d0ef      	beq.n	80028c8 <HAL_RCC_OscConfig+0x5cc>
 80028e8:	e01b      	b.n	8002922 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80028ea:	4b65      	ldr	r3, [pc, #404]	; (8002a80 <HAL_RCC_OscConfig+0x784>)
 80028ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80028f0:	4a63      	ldr	r2, [pc, #396]	; (8002a80 <HAL_RCC_OscConfig+0x784>)
 80028f2:	f023 0301 	bic.w	r3, r3, #1
 80028f6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028fa:	f7fe ff49 	bl	8001790 <HAL_GetTick>
 80028fe:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002900:	e008      	b.n	8002914 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002902:	f7fe ff45 	bl	8001790 <HAL_GetTick>
 8002906:	4602      	mov	r2, r0
 8002908:	693b      	ldr	r3, [r7, #16]
 800290a:	1ad3      	subs	r3, r2, r3
 800290c:	2b02      	cmp	r3, #2
 800290e:	d901      	bls.n	8002914 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002910:	2303      	movs	r3, #3
 8002912:	e105      	b.n	8002b20 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002914:	4b5a      	ldr	r3, [pc, #360]	; (8002a80 <HAL_RCC_OscConfig+0x784>)
 8002916:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800291a:	f003 0302 	and.w	r3, r3, #2
 800291e:	2b00      	cmp	r3, #0
 8002920:	d1ef      	bne.n	8002902 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002926:	2b00      	cmp	r3, #0
 8002928:	f000 80f9 	beq.w	8002b1e <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002930:	2b02      	cmp	r3, #2
 8002932:	f040 80cf 	bne.w	8002ad4 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002936:	4b52      	ldr	r3, [pc, #328]	; (8002a80 <HAL_RCC_OscConfig+0x784>)
 8002938:	68db      	ldr	r3, [r3, #12]
 800293a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	f003 0203 	and.w	r2, r3, #3
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002946:	429a      	cmp	r2, r3
 8002948:	d12c      	bne.n	80029a4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002954:	3b01      	subs	r3, #1
 8002956:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002958:	429a      	cmp	r2, r3
 800295a:	d123      	bne.n	80029a4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002966:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002968:	429a      	cmp	r2, r3
 800296a:	d11b      	bne.n	80029a4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002976:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002978:	429a      	cmp	r2, r3
 800297a:	d113      	bne.n	80029a4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002986:	085b      	lsrs	r3, r3, #1
 8002988:	3b01      	subs	r3, #1
 800298a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800298c:	429a      	cmp	r2, r3
 800298e:	d109      	bne.n	80029a4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800299a:	085b      	lsrs	r3, r3, #1
 800299c:	3b01      	subs	r3, #1
 800299e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80029a0:	429a      	cmp	r2, r3
 80029a2:	d071      	beq.n	8002a88 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80029a4:	69bb      	ldr	r3, [r7, #24]
 80029a6:	2b0c      	cmp	r3, #12
 80029a8:	d068      	beq.n	8002a7c <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80029aa:	4b35      	ldr	r3, [pc, #212]	; (8002a80 <HAL_RCC_OscConfig+0x784>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d105      	bne.n	80029c2 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80029b6:	4b32      	ldr	r3, [pc, #200]	; (8002a80 <HAL_RCC_OscConfig+0x784>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d001      	beq.n	80029c6 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	e0ac      	b.n	8002b20 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80029c6:	4b2e      	ldr	r3, [pc, #184]	; (8002a80 <HAL_RCC_OscConfig+0x784>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a2d      	ldr	r2, [pc, #180]	; (8002a80 <HAL_RCC_OscConfig+0x784>)
 80029cc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80029d0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80029d2:	f7fe fedd 	bl	8001790 <HAL_GetTick>
 80029d6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029d8:	e008      	b.n	80029ec <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029da:	f7fe fed9 	bl	8001790 <HAL_GetTick>
 80029de:	4602      	mov	r2, r0
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	1ad3      	subs	r3, r2, r3
 80029e4:	2b02      	cmp	r3, #2
 80029e6:	d901      	bls.n	80029ec <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80029e8:	2303      	movs	r3, #3
 80029ea:	e099      	b.n	8002b20 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029ec:	4b24      	ldr	r3, [pc, #144]	; (8002a80 <HAL_RCC_OscConfig+0x784>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d1f0      	bne.n	80029da <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80029f8:	4b21      	ldr	r3, [pc, #132]	; (8002a80 <HAL_RCC_OscConfig+0x784>)
 80029fa:	68da      	ldr	r2, [r3, #12]
 80029fc:	4b21      	ldr	r3, [pc, #132]	; (8002a84 <HAL_RCC_OscConfig+0x788>)
 80029fe:	4013      	ands	r3, r2
 8002a00:	687a      	ldr	r2, [r7, #4]
 8002a02:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002a04:	687a      	ldr	r2, [r7, #4]
 8002a06:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002a08:	3a01      	subs	r2, #1
 8002a0a:	0112      	lsls	r2, r2, #4
 8002a0c:	4311      	orrs	r1, r2
 8002a0e:	687a      	ldr	r2, [r7, #4]
 8002a10:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002a12:	0212      	lsls	r2, r2, #8
 8002a14:	4311      	orrs	r1, r2
 8002a16:	687a      	ldr	r2, [r7, #4]
 8002a18:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002a1a:	0852      	lsrs	r2, r2, #1
 8002a1c:	3a01      	subs	r2, #1
 8002a1e:	0552      	lsls	r2, r2, #21
 8002a20:	4311      	orrs	r1, r2
 8002a22:	687a      	ldr	r2, [r7, #4]
 8002a24:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002a26:	0852      	lsrs	r2, r2, #1
 8002a28:	3a01      	subs	r2, #1
 8002a2a:	0652      	lsls	r2, r2, #25
 8002a2c:	4311      	orrs	r1, r2
 8002a2e:	687a      	ldr	r2, [r7, #4]
 8002a30:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002a32:	06d2      	lsls	r2, r2, #27
 8002a34:	430a      	orrs	r2, r1
 8002a36:	4912      	ldr	r1, [pc, #72]	; (8002a80 <HAL_RCC_OscConfig+0x784>)
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002a3c:	4b10      	ldr	r3, [pc, #64]	; (8002a80 <HAL_RCC_OscConfig+0x784>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a0f      	ldr	r2, [pc, #60]	; (8002a80 <HAL_RCC_OscConfig+0x784>)
 8002a42:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a46:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002a48:	4b0d      	ldr	r3, [pc, #52]	; (8002a80 <HAL_RCC_OscConfig+0x784>)
 8002a4a:	68db      	ldr	r3, [r3, #12]
 8002a4c:	4a0c      	ldr	r2, [pc, #48]	; (8002a80 <HAL_RCC_OscConfig+0x784>)
 8002a4e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a52:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002a54:	f7fe fe9c 	bl	8001790 <HAL_GetTick>
 8002a58:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a5a:	e008      	b.n	8002a6e <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a5c:	f7fe fe98 	bl	8001790 <HAL_GetTick>
 8002a60:	4602      	mov	r2, r0
 8002a62:	693b      	ldr	r3, [r7, #16]
 8002a64:	1ad3      	subs	r3, r2, r3
 8002a66:	2b02      	cmp	r3, #2
 8002a68:	d901      	bls.n	8002a6e <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8002a6a:	2303      	movs	r3, #3
 8002a6c:	e058      	b.n	8002b20 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a6e:	4b04      	ldr	r3, [pc, #16]	; (8002a80 <HAL_RCC_OscConfig+0x784>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d0f0      	beq.n	8002a5c <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002a7a:	e050      	b.n	8002b1e <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	e04f      	b.n	8002b20 <HAL_RCC_OscConfig+0x824>
 8002a80:	40021000 	.word	0x40021000
 8002a84:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a88:	4b27      	ldr	r3, [pc, #156]	; (8002b28 <HAL_RCC_OscConfig+0x82c>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d144      	bne.n	8002b1e <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002a94:	4b24      	ldr	r3, [pc, #144]	; (8002b28 <HAL_RCC_OscConfig+0x82c>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a23      	ldr	r2, [pc, #140]	; (8002b28 <HAL_RCC_OscConfig+0x82c>)
 8002a9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a9e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002aa0:	4b21      	ldr	r3, [pc, #132]	; (8002b28 <HAL_RCC_OscConfig+0x82c>)
 8002aa2:	68db      	ldr	r3, [r3, #12]
 8002aa4:	4a20      	ldr	r2, [pc, #128]	; (8002b28 <HAL_RCC_OscConfig+0x82c>)
 8002aa6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002aaa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002aac:	f7fe fe70 	bl	8001790 <HAL_GetTick>
 8002ab0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ab2:	e008      	b.n	8002ac6 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ab4:	f7fe fe6c 	bl	8001790 <HAL_GetTick>
 8002ab8:	4602      	mov	r2, r0
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	1ad3      	subs	r3, r2, r3
 8002abe:	2b02      	cmp	r3, #2
 8002ac0:	d901      	bls.n	8002ac6 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8002ac2:	2303      	movs	r3, #3
 8002ac4:	e02c      	b.n	8002b20 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ac6:	4b18      	ldr	r3, [pc, #96]	; (8002b28 <HAL_RCC_OscConfig+0x82c>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d0f0      	beq.n	8002ab4 <HAL_RCC_OscConfig+0x7b8>
 8002ad2:	e024      	b.n	8002b1e <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002ad4:	69bb      	ldr	r3, [r7, #24]
 8002ad6:	2b0c      	cmp	r3, #12
 8002ad8:	d01f      	beq.n	8002b1a <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ada:	4b13      	ldr	r3, [pc, #76]	; (8002b28 <HAL_RCC_OscConfig+0x82c>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a12      	ldr	r2, [pc, #72]	; (8002b28 <HAL_RCC_OscConfig+0x82c>)
 8002ae0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ae4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ae6:	f7fe fe53 	bl	8001790 <HAL_GetTick>
 8002aea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002aec:	e008      	b.n	8002b00 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002aee:	f7fe fe4f 	bl	8001790 <HAL_GetTick>
 8002af2:	4602      	mov	r2, r0
 8002af4:	693b      	ldr	r3, [r7, #16]
 8002af6:	1ad3      	subs	r3, r2, r3
 8002af8:	2b02      	cmp	r3, #2
 8002afa:	d901      	bls.n	8002b00 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8002afc:	2303      	movs	r3, #3
 8002afe:	e00f      	b.n	8002b20 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b00:	4b09      	ldr	r3, [pc, #36]	; (8002b28 <HAL_RCC_OscConfig+0x82c>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d1f0      	bne.n	8002aee <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002b0c:	4b06      	ldr	r3, [pc, #24]	; (8002b28 <HAL_RCC_OscConfig+0x82c>)
 8002b0e:	68da      	ldr	r2, [r3, #12]
 8002b10:	4905      	ldr	r1, [pc, #20]	; (8002b28 <HAL_RCC_OscConfig+0x82c>)
 8002b12:	4b06      	ldr	r3, [pc, #24]	; (8002b2c <HAL_RCC_OscConfig+0x830>)
 8002b14:	4013      	ands	r3, r2
 8002b16:	60cb      	str	r3, [r1, #12]
 8002b18:	e001      	b.n	8002b1e <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e000      	b.n	8002b20 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8002b1e:	2300      	movs	r3, #0
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	3720      	adds	r7, #32
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}
 8002b28:	40021000 	.word	0x40021000
 8002b2c:	feeefffc 	.word	0xfeeefffc

08002b30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b086      	sub	sp, #24
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
 8002b38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d101      	bne.n	8002b48 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002b44:	2301      	movs	r3, #1
 8002b46:	e11d      	b.n	8002d84 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b48:	4b90      	ldr	r3, [pc, #576]	; (8002d8c <HAL_RCC_ClockConfig+0x25c>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f003 030f 	and.w	r3, r3, #15
 8002b50:	683a      	ldr	r2, [r7, #0]
 8002b52:	429a      	cmp	r2, r3
 8002b54:	d910      	bls.n	8002b78 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b56:	4b8d      	ldr	r3, [pc, #564]	; (8002d8c <HAL_RCC_ClockConfig+0x25c>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f023 020f 	bic.w	r2, r3, #15
 8002b5e:	498b      	ldr	r1, [pc, #556]	; (8002d8c <HAL_RCC_ClockConfig+0x25c>)
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	4313      	orrs	r3, r2
 8002b64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b66:	4b89      	ldr	r3, [pc, #548]	; (8002d8c <HAL_RCC_ClockConfig+0x25c>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 030f 	and.w	r3, r3, #15
 8002b6e:	683a      	ldr	r2, [r7, #0]
 8002b70:	429a      	cmp	r2, r3
 8002b72:	d001      	beq.n	8002b78 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002b74:	2301      	movs	r3, #1
 8002b76:	e105      	b.n	8002d84 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f003 0302 	and.w	r3, r3, #2
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d010      	beq.n	8002ba6 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	689a      	ldr	r2, [r3, #8]
 8002b88:	4b81      	ldr	r3, [pc, #516]	; (8002d90 <HAL_RCC_ClockConfig+0x260>)
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b90:	429a      	cmp	r2, r3
 8002b92:	d908      	bls.n	8002ba6 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b94:	4b7e      	ldr	r3, [pc, #504]	; (8002d90 <HAL_RCC_ClockConfig+0x260>)
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	497b      	ldr	r1, [pc, #492]	; (8002d90 <HAL_RCC_ClockConfig+0x260>)
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f003 0301 	and.w	r3, r3, #1
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d079      	beq.n	8002ca6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	2b03      	cmp	r3, #3
 8002bb8:	d11e      	bne.n	8002bf8 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bba:	4b75      	ldr	r3, [pc, #468]	; (8002d90 <HAL_RCC_ClockConfig+0x260>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d101      	bne.n	8002bca <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e0dc      	b.n	8002d84 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8002bca:	f000 fa07 	bl	8002fdc <RCC_GetSysClockFreqFromPLLSource>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	4a70      	ldr	r2, [pc, #448]	; (8002d94 <HAL_RCC_ClockConfig+0x264>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d946      	bls.n	8002c64 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002bd6:	4b6e      	ldr	r3, [pc, #440]	; (8002d90 <HAL_RCC_ClockConfig+0x260>)
 8002bd8:	689b      	ldr	r3, [r3, #8]
 8002bda:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d140      	bne.n	8002c64 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002be2:	4b6b      	ldr	r3, [pc, #428]	; (8002d90 <HAL_RCC_ClockConfig+0x260>)
 8002be4:	689b      	ldr	r3, [r3, #8]
 8002be6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002bea:	4a69      	ldr	r2, [pc, #420]	; (8002d90 <HAL_RCC_ClockConfig+0x260>)
 8002bec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002bf0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002bf2:	2380      	movs	r3, #128	; 0x80
 8002bf4:	617b      	str	r3, [r7, #20]
 8002bf6:	e035      	b.n	8002c64 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	2b02      	cmp	r3, #2
 8002bfe:	d107      	bne.n	8002c10 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c00:	4b63      	ldr	r3, [pc, #396]	; (8002d90 <HAL_RCC_ClockConfig+0x260>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d115      	bne.n	8002c38 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	e0b9      	b.n	8002d84 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d107      	bne.n	8002c28 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002c18:	4b5d      	ldr	r3, [pc, #372]	; (8002d90 <HAL_RCC_ClockConfig+0x260>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f003 0302 	and.w	r3, r3, #2
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d109      	bne.n	8002c38 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002c24:	2301      	movs	r3, #1
 8002c26:	e0ad      	b.n	8002d84 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c28:	4b59      	ldr	r3, [pc, #356]	; (8002d90 <HAL_RCC_ClockConfig+0x260>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d101      	bne.n	8002c38 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002c34:	2301      	movs	r3, #1
 8002c36:	e0a5      	b.n	8002d84 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8002c38:	f000 f8b4 	bl	8002da4 <HAL_RCC_GetSysClockFreq>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	4a55      	ldr	r2, [pc, #340]	; (8002d94 <HAL_RCC_ClockConfig+0x264>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d90f      	bls.n	8002c64 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002c44:	4b52      	ldr	r3, [pc, #328]	; (8002d90 <HAL_RCC_ClockConfig+0x260>)
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d109      	bne.n	8002c64 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002c50:	4b4f      	ldr	r3, [pc, #316]	; (8002d90 <HAL_RCC_ClockConfig+0x260>)
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002c58:	4a4d      	ldr	r2, [pc, #308]	; (8002d90 <HAL_RCC_ClockConfig+0x260>)
 8002c5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c5e:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002c60:	2380      	movs	r3, #128	; 0x80
 8002c62:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002c64:	4b4a      	ldr	r3, [pc, #296]	; (8002d90 <HAL_RCC_ClockConfig+0x260>)
 8002c66:	689b      	ldr	r3, [r3, #8]
 8002c68:	f023 0203 	bic.w	r2, r3, #3
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	4947      	ldr	r1, [pc, #284]	; (8002d90 <HAL_RCC_ClockConfig+0x260>)
 8002c72:	4313      	orrs	r3, r2
 8002c74:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c76:	f7fe fd8b 	bl	8001790 <HAL_GetTick>
 8002c7a:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c7c:	e00a      	b.n	8002c94 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c7e:	f7fe fd87 	bl	8001790 <HAL_GetTick>
 8002c82:	4602      	mov	r2, r0
 8002c84:	693b      	ldr	r3, [r7, #16]
 8002c86:	1ad3      	subs	r3, r2, r3
 8002c88:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d901      	bls.n	8002c94 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8002c90:	2303      	movs	r3, #3
 8002c92:	e077      	b.n	8002d84 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c94:	4b3e      	ldr	r3, [pc, #248]	; (8002d90 <HAL_RCC_ClockConfig+0x260>)
 8002c96:	689b      	ldr	r3, [r3, #8]
 8002c98:	f003 020c 	and.w	r2, r3, #12
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	009b      	lsls	r3, r3, #2
 8002ca2:	429a      	cmp	r2, r3
 8002ca4:	d1eb      	bne.n	8002c7e <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8002ca6:	697b      	ldr	r3, [r7, #20]
 8002ca8:	2b80      	cmp	r3, #128	; 0x80
 8002caa:	d105      	bne.n	8002cb8 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002cac:	4b38      	ldr	r3, [pc, #224]	; (8002d90 <HAL_RCC_ClockConfig+0x260>)
 8002cae:	689b      	ldr	r3, [r3, #8]
 8002cb0:	4a37      	ldr	r2, [pc, #220]	; (8002d90 <HAL_RCC_ClockConfig+0x260>)
 8002cb2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002cb6:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f003 0302 	and.w	r3, r3, #2
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d010      	beq.n	8002ce6 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	689a      	ldr	r2, [r3, #8]
 8002cc8:	4b31      	ldr	r3, [pc, #196]	; (8002d90 <HAL_RCC_ClockConfig+0x260>)
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002cd0:	429a      	cmp	r2, r3
 8002cd2:	d208      	bcs.n	8002ce6 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cd4:	4b2e      	ldr	r3, [pc, #184]	; (8002d90 <HAL_RCC_ClockConfig+0x260>)
 8002cd6:	689b      	ldr	r3, [r3, #8]
 8002cd8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	492b      	ldr	r1, [pc, #172]	; (8002d90 <HAL_RCC_ClockConfig+0x260>)
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ce6:	4b29      	ldr	r3, [pc, #164]	; (8002d8c <HAL_RCC_ClockConfig+0x25c>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f003 030f 	and.w	r3, r3, #15
 8002cee:	683a      	ldr	r2, [r7, #0]
 8002cf0:	429a      	cmp	r2, r3
 8002cf2:	d210      	bcs.n	8002d16 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cf4:	4b25      	ldr	r3, [pc, #148]	; (8002d8c <HAL_RCC_ClockConfig+0x25c>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f023 020f 	bic.w	r2, r3, #15
 8002cfc:	4923      	ldr	r1, [pc, #140]	; (8002d8c <HAL_RCC_ClockConfig+0x25c>)
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	4313      	orrs	r3, r2
 8002d02:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d04:	4b21      	ldr	r3, [pc, #132]	; (8002d8c <HAL_RCC_ClockConfig+0x25c>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f003 030f 	and.w	r3, r3, #15
 8002d0c:	683a      	ldr	r2, [r7, #0]
 8002d0e:	429a      	cmp	r2, r3
 8002d10:	d001      	beq.n	8002d16 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	e036      	b.n	8002d84 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f003 0304 	and.w	r3, r3, #4
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d008      	beq.n	8002d34 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d22:	4b1b      	ldr	r3, [pc, #108]	; (8002d90 <HAL_RCC_ClockConfig+0x260>)
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	68db      	ldr	r3, [r3, #12]
 8002d2e:	4918      	ldr	r1, [pc, #96]	; (8002d90 <HAL_RCC_ClockConfig+0x260>)
 8002d30:	4313      	orrs	r3, r2
 8002d32:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f003 0308 	and.w	r3, r3, #8
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d009      	beq.n	8002d54 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d40:	4b13      	ldr	r3, [pc, #76]	; (8002d90 <HAL_RCC_ClockConfig+0x260>)
 8002d42:	689b      	ldr	r3, [r3, #8]
 8002d44:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	691b      	ldr	r3, [r3, #16]
 8002d4c:	00db      	lsls	r3, r3, #3
 8002d4e:	4910      	ldr	r1, [pc, #64]	; (8002d90 <HAL_RCC_ClockConfig+0x260>)
 8002d50:	4313      	orrs	r3, r2
 8002d52:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002d54:	f000 f826 	bl	8002da4 <HAL_RCC_GetSysClockFreq>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	4b0d      	ldr	r3, [pc, #52]	; (8002d90 <HAL_RCC_ClockConfig+0x260>)
 8002d5c:	689b      	ldr	r3, [r3, #8]
 8002d5e:	091b      	lsrs	r3, r3, #4
 8002d60:	f003 030f 	and.w	r3, r3, #15
 8002d64:	490c      	ldr	r1, [pc, #48]	; (8002d98 <HAL_RCC_ClockConfig+0x268>)
 8002d66:	5ccb      	ldrb	r3, [r1, r3]
 8002d68:	f003 031f 	and.w	r3, r3, #31
 8002d6c:	fa22 f303 	lsr.w	r3, r2, r3
 8002d70:	4a0a      	ldr	r2, [pc, #40]	; (8002d9c <HAL_RCC_ClockConfig+0x26c>)
 8002d72:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002d74:	4b0a      	ldr	r3, [pc, #40]	; (8002da0 <HAL_RCC_ClockConfig+0x270>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f7fe fcb9 	bl	80016f0 <HAL_InitTick>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	73fb      	strb	r3, [r7, #15]

  return status;
 8002d82:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d84:	4618      	mov	r0, r3
 8002d86:	3718      	adds	r7, #24
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd80      	pop	{r7, pc}
 8002d8c:	40022000 	.word	0x40022000
 8002d90:	40021000 	.word	0x40021000
 8002d94:	04c4b400 	.word	0x04c4b400
 8002d98:	08007cc0 	.word	0x08007cc0
 8002d9c:	20000000 	.word	0x20000000
 8002da0:	20000004 	.word	0x20000004

08002da4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b089      	sub	sp, #36	; 0x24
 8002da8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002daa:	2300      	movs	r3, #0
 8002dac:	61fb      	str	r3, [r7, #28]
 8002dae:	2300      	movs	r3, #0
 8002db0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002db2:	4b3e      	ldr	r3, [pc, #248]	; (8002eac <HAL_RCC_GetSysClockFreq+0x108>)
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	f003 030c 	and.w	r3, r3, #12
 8002dba:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002dbc:	4b3b      	ldr	r3, [pc, #236]	; (8002eac <HAL_RCC_GetSysClockFreq+0x108>)
 8002dbe:	68db      	ldr	r3, [r3, #12]
 8002dc0:	f003 0303 	and.w	r3, r3, #3
 8002dc4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d005      	beq.n	8002dd8 <HAL_RCC_GetSysClockFreq+0x34>
 8002dcc:	693b      	ldr	r3, [r7, #16]
 8002dce:	2b0c      	cmp	r3, #12
 8002dd0:	d121      	bne.n	8002e16 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	2b01      	cmp	r3, #1
 8002dd6:	d11e      	bne.n	8002e16 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002dd8:	4b34      	ldr	r3, [pc, #208]	; (8002eac <HAL_RCC_GetSysClockFreq+0x108>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f003 0308 	and.w	r3, r3, #8
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d107      	bne.n	8002df4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002de4:	4b31      	ldr	r3, [pc, #196]	; (8002eac <HAL_RCC_GetSysClockFreq+0x108>)
 8002de6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002dea:	0a1b      	lsrs	r3, r3, #8
 8002dec:	f003 030f 	and.w	r3, r3, #15
 8002df0:	61fb      	str	r3, [r7, #28]
 8002df2:	e005      	b.n	8002e00 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002df4:	4b2d      	ldr	r3, [pc, #180]	; (8002eac <HAL_RCC_GetSysClockFreq+0x108>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	091b      	lsrs	r3, r3, #4
 8002dfa:	f003 030f 	and.w	r3, r3, #15
 8002dfe:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002e00:	4a2b      	ldr	r2, [pc, #172]	; (8002eb0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002e02:	69fb      	ldr	r3, [r7, #28]
 8002e04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e08:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d10d      	bne.n	8002e2c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002e10:	69fb      	ldr	r3, [r7, #28]
 8002e12:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002e14:	e00a      	b.n	8002e2c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	2b04      	cmp	r3, #4
 8002e1a:	d102      	bne.n	8002e22 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002e1c:	4b25      	ldr	r3, [pc, #148]	; (8002eb4 <HAL_RCC_GetSysClockFreq+0x110>)
 8002e1e:	61bb      	str	r3, [r7, #24]
 8002e20:	e004      	b.n	8002e2c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002e22:	693b      	ldr	r3, [r7, #16]
 8002e24:	2b08      	cmp	r3, #8
 8002e26:	d101      	bne.n	8002e2c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002e28:	4b22      	ldr	r3, [pc, #136]	; (8002eb4 <HAL_RCC_GetSysClockFreq+0x110>)
 8002e2a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002e2c:	693b      	ldr	r3, [r7, #16]
 8002e2e:	2b0c      	cmp	r3, #12
 8002e30:	d134      	bne.n	8002e9c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002e32:	4b1e      	ldr	r3, [pc, #120]	; (8002eac <HAL_RCC_GetSysClockFreq+0x108>)
 8002e34:	68db      	ldr	r3, [r3, #12]
 8002e36:	f003 0303 	and.w	r3, r3, #3
 8002e3a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	2b02      	cmp	r3, #2
 8002e40:	d003      	beq.n	8002e4a <HAL_RCC_GetSysClockFreq+0xa6>
 8002e42:	68bb      	ldr	r3, [r7, #8]
 8002e44:	2b03      	cmp	r3, #3
 8002e46:	d003      	beq.n	8002e50 <HAL_RCC_GetSysClockFreq+0xac>
 8002e48:	e005      	b.n	8002e56 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002e4a:	4b1a      	ldr	r3, [pc, #104]	; (8002eb4 <HAL_RCC_GetSysClockFreq+0x110>)
 8002e4c:	617b      	str	r3, [r7, #20]
      break;
 8002e4e:	e005      	b.n	8002e5c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002e50:	4b18      	ldr	r3, [pc, #96]	; (8002eb4 <HAL_RCC_GetSysClockFreq+0x110>)
 8002e52:	617b      	str	r3, [r7, #20]
      break;
 8002e54:	e002      	b.n	8002e5c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002e56:	69fb      	ldr	r3, [r7, #28]
 8002e58:	617b      	str	r3, [r7, #20]
      break;
 8002e5a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002e5c:	4b13      	ldr	r3, [pc, #76]	; (8002eac <HAL_RCC_GetSysClockFreq+0x108>)
 8002e5e:	68db      	ldr	r3, [r3, #12]
 8002e60:	091b      	lsrs	r3, r3, #4
 8002e62:	f003 030f 	and.w	r3, r3, #15
 8002e66:	3301      	adds	r3, #1
 8002e68:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002e6a:	4b10      	ldr	r3, [pc, #64]	; (8002eac <HAL_RCC_GetSysClockFreq+0x108>)
 8002e6c:	68db      	ldr	r3, [r3, #12]
 8002e6e:	0a1b      	lsrs	r3, r3, #8
 8002e70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002e74:	697a      	ldr	r2, [r7, #20]
 8002e76:	fb03 f202 	mul.w	r2, r3, r2
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e80:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002e82:	4b0a      	ldr	r3, [pc, #40]	; (8002eac <HAL_RCC_GetSysClockFreq+0x108>)
 8002e84:	68db      	ldr	r3, [r3, #12]
 8002e86:	0e5b      	lsrs	r3, r3, #25
 8002e88:	f003 0303 	and.w	r3, r3, #3
 8002e8c:	3301      	adds	r3, #1
 8002e8e:	005b      	lsls	r3, r3, #1
 8002e90:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002e92:	697a      	ldr	r2, [r7, #20]
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e9a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002e9c:	69bb      	ldr	r3, [r7, #24]
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	3724      	adds	r7, #36	; 0x24
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea8:	4770      	bx	lr
 8002eaa:	bf00      	nop
 8002eac:	40021000 	.word	0x40021000
 8002eb0:	08007cd8 	.word	0x08007cd8
 8002eb4:	00f42400 	.word	0x00f42400

08002eb8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ebc:	4b03      	ldr	r3, [pc, #12]	; (8002ecc <HAL_RCC_GetHCLKFreq+0x14>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec8:	4770      	bx	lr
 8002eca:	bf00      	nop
 8002ecc:	20000000 	.word	0x20000000

08002ed0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002ed4:	f7ff fff0 	bl	8002eb8 <HAL_RCC_GetHCLKFreq>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	4b06      	ldr	r3, [pc, #24]	; (8002ef4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002edc:	689b      	ldr	r3, [r3, #8]
 8002ede:	0a1b      	lsrs	r3, r3, #8
 8002ee0:	f003 0307 	and.w	r3, r3, #7
 8002ee4:	4904      	ldr	r1, [pc, #16]	; (8002ef8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002ee6:	5ccb      	ldrb	r3, [r1, r3]
 8002ee8:	f003 031f 	and.w	r3, r3, #31
 8002eec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	bd80      	pop	{r7, pc}
 8002ef4:	40021000 	.word	0x40021000
 8002ef8:	08007cd0 	.word	0x08007cd0

08002efc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002f00:	f7ff ffda 	bl	8002eb8 <HAL_RCC_GetHCLKFreq>
 8002f04:	4602      	mov	r2, r0
 8002f06:	4b06      	ldr	r3, [pc, #24]	; (8002f20 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f08:	689b      	ldr	r3, [r3, #8]
 8002f0a:	0adb      	lsrs	r3, r3, #11
 8002f0c:	f003 0307 	and.w	r3, r3, #7
 8002f10:	4904      	ldr	r1, [pc, #16]	; (8002f24 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002f12:	5ccb      	ldrb	r3, [r1, r3]
 8002f14:	f003 031f 	and.w	r3, r3, #31
 8002f18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	bd80      	pop	{r7, pc}
 8002f20:	40021000 	.word	0x40021000
 8002f24:	08007cd0 	.word	0x08007cd0

08002f28 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b086      	sub	sp, #24
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002f30:	2300      	movs	r3, #0
 8002f32:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002f34:	4b27      	ldr	r3, [pc, #156]	; (8002fd4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002f36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d003      	beq.n	8002f48 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002f40:	f7ff f908 	bl	8002154 <HAL_PWREx_GetVoltageRange>
 8002f44:	6178      	str	r0, [r7, #20]
 8002f46:	e014      	b.n	8002f72 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002f48:	4b22      	ldr	r3, [pc, #136]	; (8002fd4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002f4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f4c:	4a21      	ldr	r2, [pc, #132]	; (8002fd4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002f4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f52:	6593      	str	r3, [r2, #88]	; 0x58
 8002f54:	4b1f      	ldr	r3, [pc, #124]	; (8002fd4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002f56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f5c:	60fb      	str	r3, [r7, #12]
 8002f5e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002f60:	f7ff f8f8 	bl	8002154 <HAL_PWREx_GetVoltageRange>
 8002f64:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002f66:	4b1b      	ldr	r3, [pc, #108]	; (8002fd4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002f68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f6a:	4a1a      	ldr	r2, [pc, #104]	; (8002fd4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002f6c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f70:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f78:	d10b      	bne.n	8002f92 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2b80      	cmp	r3, #128	; 0x80
 8002f7e:	d913      	bls.n	8002fa8 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2ba0      	cmp	r3, #160	; 0xa0
 8002f84:	d902      	bls.n	8002f8c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002f86:	2302      	movs	r3, #2
 8002f88:	613b      	str	r3, [r7, #16]
 8002f8a:	e00d      	b.n	8002fa8 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	613b      	str	r3, [r7, #16]
 8002f90:	e00a      	b.n	8002fa8 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2b7f      	cmp	r3, #127	; 0x7f
 8002f96:	d902      	bls.n	8002f9e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8002f98:	2302      	movs	r3, #2
 8002f9a:	613b      	str	r3, [r7, #16]
 8002f9c:	e004      	b.n	8002fa8 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2b70      	cmp	r3, #112	; 0x70
 8002fa2:	d101      	bne.n	8002fa8 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002fa8:	4b0b      	ldr	r3, [pc, #44]	; (8002fd8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f023 020f 	bic.w	r2, r3, #15
 8002fb0:	4909      	ldr	r1, [pc, #36]	; (8002fd8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002fb8:	4b07      	ldr	r3, [pc, #28]	; (8002fd8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f003 030f 	and.w	r3, r3, #15
 8002fc0:	693a      	ldr	r2, [r7, #16]
 8002fc2:	429a      	cmp	r2, r3
 8002fc4:	d001      	beq.n	8002fca <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e000      	b.n	8002fcc <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8002fca:	2300      	movs	r3, #0
}
 8002fcc:	4618      	mov	r0, r3
 8002fce:	3718      	adds	r7, #24
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bd80      	pop	{r7, pc}
 8002fd4:	40021000 	.word	0x40021000
 8002fd8:	40022000 	.word	0x40022000

08002fdc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b087      	sub	sp, #28
 8002fe0:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002fe2:	4b2d      	ldr	r3, [pc, #180]	; (8003098 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002fe4:	68db      	ldr	r3, [r3, #12]
 8002fe6:	f003 0303 	and.w	r3, r3, #3
 8002fea:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	2b03      	cmp	r3, #3
 8002ff0:	d00b      	beq.n	800300a <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	2b03      	cmp	r3, #3
 8002ff6:	d825      	bhi.n	8003044 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	2b01      	cmp	r3, #1
 8002ffc:	d008      	beq.n	8003010 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	2b02      	cmp	r3, #2
 8003002:	d11f      	bne.n	8003044 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8003004:	4b25      	ldr	r3, [pc, #148]	; (800309c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003006:	613b      	str	r3, [r7, #16]
    break;
 8003008:	e01f      	b.n	800304a <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 800300a:	4b24      	ldr	r3, [pc, #144]	; (800309c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800300c:	613b      	str	r3, [r7, #16]
    break;
 800300e:	e01c      	b.n	800304a <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003010:	4b21      	ldr	r3, [pc, #132]	; (8003098 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f003 0308 	and.w	r3, r3, #8
 8003018:	2b00      	cmp	r3, #0
 800301a:	d107      	bne.n	800302c <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800301c:	4b1e      	ldr	r3, [pc, #120]	; (8003098 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800301e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003022:	0a1b      	lsrs	r3, r3, #8
 8003024:	f003 030f 	and.w	r3, r3, #15
 8003028:	617b      	str	r3, [r7, #20]
 800302a:	e005      	b.n	8003038 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800302c:	4b1a      	ldr	r3, [pc, #104]	; (8003098 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	091b      	lsrs	r3, r3, #4
 8003032:	f003 030f 	and.w	r3, r3, #15
 8003036:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8003038:	4a19      	ldr	r2, [pc, #100]	; (80030a0 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003040:	613b      	str	r3, [r7, #16]
    break;
 8003042:	e002      	b.n	800304a <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8003044:	2300      	movs	r3, #0
 8003046:	613b      	str	r3, [r7, #16]
    break;
 8003048:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800304a:	4b13      	ldr	r3, [pc, #76]	; (8003098 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800304c:	68db      	ldr	r3, [r3, #12]
 800304e:	091b      	lsrs	r3, r3, #4
 8003050:	f003 030f 	and.w	r3, r3, #15
 8003054:	3301      	adds	r3, #1
 8003056:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003058:	4b0f      	ldr	r3, [pc, #60]	; (8003098 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800305a:	68db      	ldr	r3, [r3, #12]
 800305c:	0a1b      	lsrs	r3, r3, #8
 800305e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003062:	693a      	ldr	r2, [r7, #16]
 8003064:	fb03 f202 	mul.w	r2, r3, r2
 8003068:	68bb      	ldr	r3, [r7, #8]
 800306a:	fbb2 f3f3 	udiv	r3, r2, r3
 800306e:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003070:	4b09      	ldr	r3, [pc, #36]	; (8003098 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003072:	68db      	ldr	r3, [r3, #12]
 8003074:	0e5b      	lsrs	r3, r3, #25
 8003076:	f003 0303 	and.w	r3, r3, #3
 800307a:	3301      	adds	r3, #1
 800307c:	005b      	lsls	r3, r3, #1
 800307e:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8003080:	693a      	ldr	r2, [r7, #16]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	fbb2 f3f3 	udiv	r3, r2, r3
 8003088:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800308a:	683b      	ldr	r3, [r7, #0]
}
 800308c:	4618      	mov	r0, r3
 800308e:	371c      	adds	r7, #28
 8003090:	46bd      	mov	sp, r7
 8003092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003096:	4770      	bx	lr
 8003098:	40021000 	.word	0x40021000
 800309c:	00f42400 	.word	0x00f42400
 80030a0:	08007cd8 	.word	0x08007cd8

080030a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b086      	sub	sp, #24
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80030ac:	2300      	movs	r3, #0
 80030ae:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80030b0:	2300      	movs	r3, #0
 80030b2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d040      	beq.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80030c4:	2b80      	cmp	r3, #128	; 0x80
 80030c6:	d02a      	beq.n	800311e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80030c8:	2b80      	cmp	r3, #128	; 0x80
 80030ca:	d825      	bhi.n	8003118 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80030cc:	2b60      	cmp	r3, #96	; 0x60
 80030ce:	d026      	beq.n	800311e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80030d0:	2b60      	cmp	r3, #96	; 0x60
 80030d2:	d821      	bhi.n	8003118 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80030d4:	2b40      	cmp	r3, #64	; 0x40
 80030d6:	d006      	beq.n	80030e6 <HAL_RCCEx_PeriphCLKConfig+0x42>
 80030d8:	2b40      	cmp	r3, #64	; 0x40
 80030da:	d81d      	bhi.n	8003118 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d009      	beq.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0x50>
 80030e0:	2b20      	cmp	r3, #32
 80030e2:	d010      	beq.n	8003106 <HAL_RCCEx_PeriphCLKConfig+0x62>
 80030e4:	e018      	b.n	8003118 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80030e6:	4b89      	ldr	r3, [pc, #548]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80030e8:	68db      	ldr	r3, [r3, #12]
 80030ea:	4a88      	ldr	r2, [pc, #544]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80030ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030f0:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80030f2:	e015      	b.n	8003120 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	3304      	adds	r3, #4
 80030f8:	2100      	movs	r1, #0
 80030fa:	4618      	mov	r0, r3
 80030fc:	f001 fa82 	bl	8004604 <RCCEx_PLLSAI1_Config>
 8003100:	4603      	mov	r3, r0
 8003102:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003104:	e00c      	b.n	8003120 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	3320      	adds	r3, #32
 800310a:	2100      	movs	r1, #0
 800310c:	4618      	mov	r0, r3
 800310e:	f001 fb6d 	bl	80047ec <RCCEx_PLLSAI2_Config>
 8003112:	4603      	mov	r3, r0
 8003114:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003116:	e003      	b.n	8003120 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003118:	2301      	movs	r3, #1
 800311a:	74fb      	strb	r3, [r7, #19]
      break;
 800311c:	e000      	b.n	8003120 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 800311e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003120:	7cfb      	ldrb	r3, [r7, #19]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d10b      	bne.n	800313e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003126:	4b79      	ldr	r3, [pc, #484]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003128:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800312c:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003134:	4975      	ldr	r1, [pc, #468]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003136:	4313      	orrs	r3, r2
 8003138:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800313c:	e001      	b.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800313e:	7cfb      	ldrb	r3, [r7, #19]
 8003140:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800314a:	2b00      	cmp	r3, #0
 800314c:	d047      	beq.n	80031de <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003152:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003156:	d030      	beq.n	80031ba <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003158:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800315c:	d82a      	bhi.n	80031b4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800315e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003162:	d02a      	beq.n	80031ba <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003164:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003168:	d824      	bhi.n	80031b4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800316a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800316e:	d008      	beq.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8003170:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003174:	d81e      	bhi.n	80031b4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003176:	2b00      	cmp	r3, #0
 8003178:	d00a      	beq.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800317a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800317e:	d010      	beq.n	80031a2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003180:	e018      	b.n	80031b4 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003182:	4b62      	ldr	r3, [pc, #392]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003184:	68db      	ldr	r3, [r3, #12]
 8003186:	4a61      	ldr	r2, [pc, #388]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003188:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800318c:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800318e:	e015      	b.n	80031bc <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	3304      	adds	r3, #4
 8003194:	2100      	movs	r1, #0
 8003196:	4618      	mov	r0, r3
 8003198:	f001 fa34 	bl	8004604 <RCCEx_PLLSAI1_Config>
 800319c:	4603      	mov	r3, r0
 800319e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80031a0:	e00c      	b.n	80031bc <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	3320      	adds	r3, #32
 80031a6:	2100      	movs	r1, #0
 80031a8:	4618      	mov	r0, r3
 80031aa:	f001 fb1f 	bl	80047ec <RCCEx_PLLSAI2_Config>
 80031ae:	4603      	mov	r3, r0
 80031b0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80031b2:	e003      	b.n	80031bc <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80031b4:	2301      	movs	r3, #1
 80031b6:	74fb      	strb	r3, [r7, #19]
      break;
 80031b8:	e000      	b.n	80031bc <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 80031ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 80031bc:	7cfb      	ldrb	r3, [r7, #19]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d10b      	bne.n	80031da <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80031c2:	4b52      	ldr	r3, [pc, #328]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80031c4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80031c8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031d0:	494e      	ldr	r1, [pc, #312]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80031d2:	4313      	orrs	r3, r2
 80031d4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80031d8:	e001      	b.n	80031de <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031da:	7cfb      	ldrb	r3, [r7, #19]
 80031dc:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	f000 809f 	beq.w	800332a <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031ec:	2300      	movs	r3, #0
 80031ee:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80031f0:	4b46      	ldr	r3, [pc, #280]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80031f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d101      	bne.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 80031fc:	2301      	movs	r3, #1
 80031fe:	e000      	b.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003200:	2300      	movs	r3, #0
 8003202:	2b00      	cmp	r3, #0
 8003204:	d00d      	beq.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003206:	4b41      	ldr	r3, [pc, #260]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003208:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800320a:	4a40      	ldr	r2, [pc, #256]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800320c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003210:	6593      	str	r3, [r2, #88]	; 0x58
 8003212:	4b3e      	ldr	r3, [pc, #248]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003214:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003216:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800321a:	60bb      	str	r3, [r7, #8]
 800321c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800321e:	2301      	movs	r3, #1
 8003220:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003222:	4b3b      	ldr	r3, [pc, #236]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a3a      	ldr	r2, [pc, #232]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003228:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800322c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800322e:	f7fe faaf 	bl	8001790 <HAL_GetTick>
 8003232:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003234:	e009      	b.n	800324a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003236:	f7fe faab 	bl	8001790 <HAL_GetTick>
 800323a:	4602      	mov	r2, r0
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	1ad3      	subs	r3, r2, r3
 8003240:	2b02      	cmp	r3, #2
 8003242:	d902      	bls.n	800324a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8003244:	2303      	movs	r3, #3
 8003246:	74fb      	strb	r3, [r7, #19]
        break;
 8003248:	e005      	b.n	8003256 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800324a:	4b31      	ldr	r3, [pc, #196]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003252:	2b00      	cmp	r3, #0
 8003254:	d0ef      	beq.n	8003236 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8003256:	7cfb      	ldrb	r3, [r7, #19]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d15b      	bne.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800325c:	4b2b      	ldr	r3, [pc, #172]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800325e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003262:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003266:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003268:	697b      	ldr	r3, [r7, #20]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d01f      	beq.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003274:	697a      	ldr	r2, [r7, #20]
 8003276:	429a      	cmp	r2, r3
 8003278:	d019      	beq.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800327a:	4b24      	ldr	r3, [pc, #144]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800327c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003280:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003284:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003286:	4b21      	ldr	r3, [pc, #132]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003288:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800328c:	4a1f      	ldr	r2, [pc, #124]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800328e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003292:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003296:	4b1d      	ldr	r3, [pc, #116]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003298:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800329c:	4a1b      	ldr	r2, [pc, #108]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800329e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80032a6:	4a19      	ldr	r2, [pc, #100]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80032a8:	697b      	ldr	r3, [r7, #20]
 80032aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	f003 0301 	and.w	r3, r3, #1
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d016      	beq.n	80032e6 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032b8:	f7fe fa6a 	bl	8001790 <HAL_GetTick>
 80032bc:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032be:	e00b      	b.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032c0:	f7fe fa66 	bl	8001790 <HAL_GetTick>
 80032c4:	4602      	mov	r2, r0
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	1ad3      	subs	r3, r2, r3
 80032ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d902      	bls.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 80032d2:	2303      	movs	r3, #3
 80032d4:	74fb      	strb	r3, [r7, #19]
            break;
 80032d6:	e006      	b.n	80032e6 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032d8:	4b0c      	ldr	r3, [pc, #48]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80032da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032de:	f003 0302 	and.w	r3, r3, #2
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d0ec      	beq.n	80032c0 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 80032e6:	7cfb      	ldrb	r3, [r7, #19]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d10c      	bne.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80032ec:	4b07      	ldr	r3, [pc, #28]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80032ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032f2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80032fc:	4903      	ldr	r1, [pc, #12]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80032fe:	4313      	orrs	r3, r2
 8003300:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003304:	e008      	b.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003306:	7cfb      	ldrb	r3, [r7, #19]
 8003308:	74bb      	strb	r3, [r7, #18]
 800330a:	e005      	b.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x274>
 800330c:	40021000 	.word	0x40021000
 8003310:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003314:	7cfb      	ldrb	r3, [r7, #19]
 8003316:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003318:	7c7b      	ldrb	r3, [r7, #17]
 800331a:	2b01      	cmp	r3, #1
 800331c:	d105      	bne.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800331e:	4ba0      	ldr	r3, [pc, #640]	; (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003320:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003322:	4a9f      	ldr	r2, [pc, #636]	; (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003324:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003328:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f003 0301 	and.w	r3, r3, #1
 8003332:	2b00      	cmp	r3, #0
 8003334:	d00a      	beq.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003336:	4b9a      	ldr	r3, [pc, #616]	; (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003338:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800333c:	f023 0203 	bic.w	r2, r3, #3
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003344:	4996      	ldr	r1, [pc, #600]	; (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003346:	4313      	orrs	r3, r2
 8003348:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f003 0302 	and.w	r3, r3, #2
 8003354:	2b00      	cmp	r3, #0
 8003356:	d00a      	beq.n	800336e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003358:	4b91      	ldr	r3, [pc, #580]	; (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800335a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800335e:	f023 020c 	bic.w	r2, r3, #12
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003366:	498e      	ldr	r1, [pc, #568]	; (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003368:	4313      	orrs	r3, r2
 800336a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f003 0304 	and.w	r3, r3, #4
 8003376:	2b00      	cmp	r3, #0
 8003378:	d00a      	beq.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800337a:	4b89      	ldr	r3, [pc, #548]	; (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800337c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003380:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003388:	4985      	ldr	r1, [pc, #532]	; (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800338a:	4313      	orrs	r3, r2
 800338c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f003 0308 	and.w	r3, r3, #8
 8003398:	2b00      	cmp	r3, #0
 800339a:	d00a      	beq.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800339c:	4b80      	ldr	r3, [pc, #512]	; (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800339e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033a2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033aa:	497d      	ldr	r1, [pc, #500]	; (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80033ac:	4313      	orrs	r3, r2
 80033ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f003 0310 	and.w	r3, r3, #16
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d00a      	beq.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80033be:	4b78      	ldr	r3, [pc, #480]	; (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80033c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033c4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033cc:	4974      	ldr	r1, [pc, #464]	; (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80033ce:	4313      	orrs	r3, r2
 80033d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f003 0320 	and.w	r3, r3, #32
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d00a      	beq.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80033e0:	4b6f      	ldr	r3, [pc, #444]	; (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80033e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033e6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033ee:	496c      	ldr	r1, [pc, #432]	; (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80033f0:	4313      	orrs	r3, r2
 80033f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d00a      	beq.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003402:	4b67      	ldr	r3, [pc, #412]	; (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003404:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003408:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003410:	4963      	ldr	r1, [pc, #396]	; (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003412:	4313      	orrs	r3, r2
 8003414:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003420:	2b00      	cmp	r3, #0
 8003422:	d00a      	beq.n	800343a <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003424:	4b5e      	ldr	r3, [pc, #376]	; (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003426:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800342a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003432:	495b      	ldr	r1, [pc, #364]	; (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003434:	4313      	orrs	r3, r2
 8003436:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003442:	2b00      	cmp	r3, #0
 8003444:	d00a      	beq.n	800345c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003446:	4b56      	ldr	r3, [pc, #344]	; (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003448:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800344c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003454:	4952      	ldr	r1, [pc, #328]	; (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003456:	4313      	orrs	r3, r2
 8003458:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003464:	2b00      	cmp	r3, #0
 8003466:	d00a      	beq.n	800347e <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003468:	4b4d      	ldr	r3, [pc, #308]	; (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800346a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800346e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003476:	494a      	ldr	r1, [pc, #296]	; (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003478:	4313      	orrs	r3, r2
 800347a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003486:	2b00      	cmp	r3, #0
 8003488:	d00a      	beq.n	80034a0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800348a:	4b45      	ldr	r3, [pc, #276]	; (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800348c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003490:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003498:	4941      	ldr	r1, [pc, #260]	; (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800349a:	4313      	orrs	r3, r2
 800349c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d00a      	beq.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80034ac:	4b3c      	ldr	r3, [pc, #240]	; (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80034b2:	f023 0203 	bic.w	r2, r3, #3
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034ba:	4939      	ldr	r1, [pc, #228]	; (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034bc:	4313      	orrs	r3, r2
 80034be:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d028      	beq.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80034ce:	4b34      	ldr	r3, [pc, #208]	; (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034d4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034dc:	4930      	ldr	r1, [pc, #192]	; (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034de:	4313      	orrs	r3, r2
 80034e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034e8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80034ec:	d106      	bne.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80034ee:	4b2c      	ldr	r3, [pc, #176]	; (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034f0:	68db      	ldr	r3, [r3, #12]
 80034f2:	4a2b      	ldr	r2, [pc, #172]	; (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80034f8:	60d3      	str	r3, [r2, #12]
 80034fa:	e011      	b.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003500:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003504:	d10c      	bne.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	3304      	adds	r3, #4
 800350a:	2101      	movs	r1, #1
 800350c:	4618      	mov	r0, r3
 800350e:	f001 f879 	bl	8004604 <RCCEx_PLLSAI1_Config>
 8003512:	4603      	mov	r3, r0
 8003514:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003516:	7cfb      	ldrb	r3, [r7, #19]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d001      	beq.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 800351c:	7cfb      	ldrb	r3, [r7, #19]
 800351e:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003528:	2b00      	cmp	r3, #0
 800352a:	d04d      	beq.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003530:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003534:	d108      	bne.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8003536:	4b1a      	ldr	r3, [pc, #104]	; (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003538:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800353c:	4a18      	ldr	r2, [pc, #96]	; (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800353e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003542:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8003546:	e012      	b.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8003548:	4b15      	ldr	r3, [pc, #84]	; (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800354a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800354e:	4a14      	ldr	r2, [pc, #80]	; (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003550:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003554:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8003558:	4b11      	ldr	r3, [pc, #68]	; (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800355a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800355e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003566:	490e      	ldr	r1, [pc, #56]	; (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003568:	4313      	orrs	r3, r2
 800356a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003572:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003576:	d106      	bne.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003578:	4b09      	ldr	r3, [pc, #36]	; (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800357a:	68db      	ldr	r3, [r3, #12]
 800357c:	4a08      	ldr	r2, [pc, #32]	; (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800357e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003582:	60d3      	str	r3, [r2, #12]
 8003584:	e020      	b.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800358a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800358e:	d109      	bne.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003590:	4b03      	ldr	r3, [pc, #12]	; (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003592:	68db      	ldr	r3, [r3, #12]
 8003594:	4a02      	ldr	r2, [pc, #8]	; (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003596:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800359a:	60d3      	str	r3, [r2, #12]
 800359c:	e014      	b.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800359e:	bf00      	nop
 80035a0:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80035a8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80035ac:	d10c      	bne.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	3304      	adds	r3, #4
 80035b2:	2101      	movs	r1, #1
 80035b4:	4618      	mov	r0, r3
 80035b6:	f001 f825 	bl	8004604 <RCCEx_PLLSAI1_Config>
 80035ba:	4603      	mov	r3, r0
 80035bc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80035be:	7cfb      	ldrb	r3, [r7, #19]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d001      	beq.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 80035c4:	7cfb      	ldrb	r3, [r7, #19]
 80035c6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d028      	beq.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80035d4:	4b7a      	ldr	r3, [pc, #488]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80035d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035da:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80035e2:	4977      	ldr	r1, [pc, #476]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80035e4:	4313      	orrs	r3, r2
 80035e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80035ee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80035f2:	d106      	bne.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80035f4:	4b72      	ldr	r3, [pc, #456]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80035f6:	68db      	ldr	r3, [r3, #12]
 80035f8:	4a71      	ldr	r2, [pc, #452]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80035fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80035fe:	60d3      	str	r3, [r2, #12]
 8003600:	e011      	b.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003606:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800360a:	d10c      	bne.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	3304      	adds	r3, #4
 8003610:	2101      	movs	r1, #1
 8003612:	4618      	mov	r0, r3
 8003614:	f000 fff6 	bl	8004604 <RCCEx_PLLSAI1_Config>
 8003618:	4603      	mov	r3, r0
 800361a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800361c:	7cfb      	ldrb	r3, [r7, #19]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d001      	beq.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8003622:	7cfb      	ldrb	r3, [r7, #19]
 8003624:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800362e:	2b00      	cmp	r3, #0
 8003630:	d01e      	beq.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003632:	4b63      	ldr	r3, [pc, #396]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003634:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003638:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003642:	495f      	ldr	r1, [pc, #380]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003644:	4313      	orrs	r3, r2
 8003646:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003650:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003654:	d10c      	bne.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	3304      	adds	r3, #4
 800365a:	2102      	movs	r1, #2
 800365c:	4618      	mov	r0, r3
 800365e:	f000 ffd1 	bl	8004604 <RCCEx_PLLSAI1_Config>
 8003662:	4603      	mov	r3, r0
 8003664:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003666:	7cfb      	ldrb	r3, [r7, #19]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d001      	beq.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 800366c:	7cfb      	ldrb	r3, [r7, #19]
 800366e:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003678:	2b00      	cmp	r3, #0
 800367a:	d00b      	beq.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800367c:	4b50      	ldr	r3, [pc, #320]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800367e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003682:	f023 0204 	bic.w	r2, r3, #4
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800368c:	494c      	ldr	r1, [pc, #304]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800368e:	4313      	orrs	r3, r2
 8003690:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800369c:	2b00      	cmp	r3, #0
 800369e:	d00b      	beq.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80036a0:	4b47      	ldr	r3, [pc, #284]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80036a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80036a6:	f023 0218 	bic.w	r2, r3, #24
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036b0:	4943      	ldr	r1, [pc, #268]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80036b2:	4313      	orrs	r3, r2
 80036b4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DFSDM1_Filter0 */

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d035      	beq.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x68c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80036c4:	4b3e      	ldr	r3, [pc, #248]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a3d      	ldr	r2, [pc, #244]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80036ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036d0:	f7fe f85e 	bl	8001790 <HAL_GetTick>
 80036d4:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80036d6:	e009      	b.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80036d8:	f7fe f85a 	bl	8001790 <HAL_GetTick>
 80036dc:	4602      	mov	r2, r0
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	1ad3      	subs	r3, r2, r3
 80036e2:	2b02      	cmp	r3, #2
 80036e4:	d902      	bls.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        ret = HAL_TIMEOUT;
 80036e6:	2303      	movs	r3, #3
 80036e8:	74fb      	strb	r3, [r7, #19]
        break;
 80036ea:	e005      	b.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x654>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80036ec:	4b34      	ldr	r3, [pc, #208]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d1ef      	bne.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x634>
      }
    }

    if(ret == HAL_OK)
 80036f8:	7cfb      	ldrb	r3, [r7, #19]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d113      	bne.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0x682>
    {
      /* Configure the LTDC clock source */
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 80036fe:	4b30      	ldr	r3, [pc, #192]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003700:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003704:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800370e:	492c      	ldr	r1, [pc, #176]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003710:	4313      	orrs	r3, r2
 8003712:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	3320      	adds	r3, #32
 800371a:	2102      	movs	r1, #2
 800371c:	4618      	mov	r0, r3
 800371e:	f001 f865 	bl	80047ec <RCCEx_PLLSAI2_Config>
 8003722:	4603      	mov	r3, r0
 8003724:	74fb      	strb	r3, [r7, #19]
    }

    if(ret != HAL_OK)
 8003726:	7cfb      	ldrb	r3, [r7, #19]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d001      	beq.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* set overall return value */
      status = ret;
 800372c:	7cfb      	ldrb	r3, [r7, #19]
 800372e:	74bb      	strb	r3, [r7, #18]
#endif /* LTDC */

#if defined(DSI)

  /*-------------------------- DSI clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003738:	2b00      	cmp	r3, #0
 800373a:	d01e      	beq.n	800377a <HAL_RCCEx_PeriphCLKConfig+0x6d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DSICLKSOURCE(PeriphClkInit->DsiClockSelection));

    /* Configure the DSI clock source */
    __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 800373c:	4b20      	ldr	r3, [pc, #128]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800373e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003742:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800374c:	491c      	ldr	r1, [pc, #112]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800374e:	4313      	orrs	r3, r2
 8003750:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLLSAI2)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800375a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800375e:	d10c      	bne.n	800377a <HAL_RCCEx_PeriphCLKConfig+0x6d6>
    {
      /* PLLSAI2 input clock, parameters M, N & Q configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_Q_UPDATE);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	3320      	adds	r3, #32
 8003764:	2101      	movs	r1, #1
 8003766:	4618      	mov	r0, r3
 8003768:	f001 f840 	bl	80047ec <RCCEx_PLLSAI2_Config>
 800376c:	4603      	mov	r3, r0
 800376e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003770:	7cfb      	ldrb	r3, [r7, #19]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d001      	beq.n	800377a <HAL_RCCEx_PeriphCLKConfig+0x6d6>
      {
        /* set overall return value */
        status = ret;
 8003776:	7cfb      	ldrb	r3, [r7, #19]
 8003778:	74bb      	strb	r3, [r7, #18]
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003782:	2b00      	cmp	r3, #0
 8003784:	d017      	beq.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0x712>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003786:	4b0e      	ldr	r3, [pc, #56]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003788:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800378c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003796:	490a      	ldr	r1, [pc, #40]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003798:	4313      	orrs	r3, r2
 800379a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037a4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80037a8:	d105      	bne.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0x712>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80037aa:	4b05      	ldr	r3, [pc, #20]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80037ac:	68db      	ldr	r3, [r3, #12]
 80037ae:	4a04      	ldr	r2, [pc, #16]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80037b0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80037b4:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80037b6:	7cbb      	ldrb	r3, [r7, #18]
}
 80037b8:	4618      	mov	r0, r3
 80037ba:	3718      	adds	r7, #24
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd80      	pop	{r7, pc}
 80037c0:	40021000 	.word	0x40021000

080037c4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b088      	sub	sp, #32
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 80037cc:	2300      	movs	r3, #0
 80037ce:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80037d6:	d13e      	bne.n	8003856 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80037d8:	4bb6      	ldr	r3, [pc, #728]	; (8003ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80037da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037e2:	60fb      	str	r3, [r7, #12]

    switch(srcclk)
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80037ea:	d028      	beq.n	800383e <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80037f2:	f200 86f2 	bhi.w	80045da <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037fc:	d005      	beq.n	800380a <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003804:	d00e      	beq.n	8003824 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 8003806:	f000 bee8 	b.w	80045da <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800380a:	4baa      	ldr	r3, [pc, #680]	; (8003ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800380c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003810:	f003 0302 	and.w	r3, r3, #2
 8003814:	2b02      	cmp	r3, #2
 8003816:	f040 86e2 	bne.w	80045de <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
        frequency = LSE_VALUE;
 800381a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800381e:	61fb      	str	r3, [r7, #28]
      break;
 8003820:	f000 bedd 	b.w	80045de <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8003824:	4ba3      	ldr	r3, [pc, #652]	; (8003ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8003826:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800382a:	f003 0302 	and.w	r3, r3, #2
 800382e:	2b02      	cmp	r3, #2
 8003830:	f040 86d7 	bne.w	80045e2 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
          frequency = LSI_VALUE;
 8003834:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8003838:	61fb      	str	r3, [r7, #28]
      break;
 800383a:	f000 bed2 	b.w	80045e2 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800383e:	4b9d      	ldr	r3, [pc, #628]	; (8003ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003846:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800384a:	f040 86cc 	bne.w	80045e6 <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
        frequency = HSE_VALUE / 32U;
 800384e:	4b9a      	ldr	r3, [pc, #616]	; (8003ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003850:	61fb      	str	r3, [r7, #28]
      break;
 8003852:	f000 bec8 	b.w	80045e6 <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003856:	4b97      	ldr	r3, [pc, #604]	; (8003ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8003858:	68db      	ldr	r3, [r3, #12]
 800385a:	f003 0303 	and.w	r3, r3, #3
 800385e:	613b      	str	r3, [r7, #16]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 8003860:	693b      	ldr	r3, [r7, #16]
 8003862:	2b03      	cmp	r3, #3
 8003864:	d036      	beq.n	80038d4 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	2b03      	cmp	r3, #3
 800386a:	d840      	bhi.n	80038ee <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 800386c:	693b      	ldr	r3, [r7, #16]
 800386e:	2b01      	cmp	r3, #1
 8003870:	d003      	beq.n	800387a <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	2b02      	cmp	r3, #2
 8003876:	d020      	beq.n	80038ba <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8003878:	e039      	b.n	80038ee <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800387a:	4b8e      	ldr	r3, [pc, #568]	; (8003ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f003 0302 	and.w	r3, r3, #2
 8003882:	2b02      	cmp	r3, #2
 8003884:	d116      	bne.n	80038b4 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8003886:	4b8b      	ldr	r3, [pc, #556]	; (8003ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f003 0308 	and.w	r3, r3, #8
 800388e:	2b00      	cmp	r3, #0
 8003890:	d005      	beq.n	800389e <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 8003892:	4b88      	ldr	r3, [pc, #544]	; (8003ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	091b      	lsrs	r3, r3, #4
 8003898:	f003 030f 	and.w	r3, r3, #15
 800389c:	e005      	b.n	80038aa <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 800389e:	4b85      	ldr	r3, [pc, #532]	; (8003ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80038a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038a4:	0a1b      	lsrs	r3, r3, #8
 80038a6:	f003 030f 	and.w	r3, r3, #15
 80038aa:	4a84      	ldr	r2, [pc, #528]	; (8003abc <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80038ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038b0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80038b2:	e01f      	b.n	80038f4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 80038b4:	2300      	movs	r3, #0
 80038b6:	61bb      	str	r3, [r7, #24]
      break;
 80038b8:	e01c      	b.n	80038f4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80038ba:	4b7e      	ldr	r3, [pc, #504]	; (8003ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038c6:	d102      	bne.n	80038ce <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 80038c8:	4b7d      	ldr	r3, [pc, #500]	; (8003ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 80038ca:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80038cc:	e012      	b.n	80038f4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 80038ce:	2300      	movs	r3, #0
 80038d0:	61bb      	str	r3, [r7, #24]
      break;
 80038d2:	e00f      	b.n	80038f4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80038d4:	4b77      	ldr	r3, [pc, #476]	; (8003ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038dc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80038e0:	d102      	bne.n	80038e8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 80038e2:	4b77      	ldr	r3, [pc, #476]	; (8003ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 80038e4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80038e6:	e005      	b.n	80038f4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 80038e8:	2300      	movs	r3, #0
 80038ea:	61bb      	str	r3, [r7, #24]
      break;
 80038ec:	e002      	b.n	80038f4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 80038ee:	2300      	movs	r3, #0
 80038f0:	61bb      	str	r3, [r7, #24]
      break;
 80038f2:	bf00      	nop
    }

    switch(PeriphClk)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80038fa:	f000 8604 	beq.w	8004506 <HAL_RCCEx_GetPeriphCLKFreq+0xd42>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003904:	f200 8671 	bhi.w	80045ea <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800390e:	f000 8467 	beq.w	80041e0 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003918:	f200 8667 	bhi.w	80045ea <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003922:	f000 852f 	beq.w	8004384 <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800392c:	f200 865d 	bhi.w	80045ea <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003936:	f000 8185 	beq.w	8003c44 <HAL_RCCEx_GetPeriphCLKFreq+0x480>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003940:	f200 8653 	bhi.w	80045ea <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800394a:	f000 80cb 	beq.w	8003ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x320>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003954:	f200 8649 	bhi.w	80045ea <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800395e:	f000 842e 	beq.w	80041be <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003968:	f200 863f 	bhi.w	80045ea <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003972:	f000 83e2 	beq.w	800413a <HAL_RCCEx_GetPeriphCLKFreq+0x976>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800397c:	f200 8635 	bhi.w	80045ea <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003986:	f000 80ad 	beq.w	8003ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x320>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003990:	f200 862b 	bhi.w	80045ea <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800399a:	f000 809b 	beq.w	8003ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x310>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039a4:	f200 8621 	bhi.w	80045ea <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80039ae:	f000 8089 	beq.w	8003ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x300>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80039b8:	f200 8617 	bhi.w	80045ea <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039c2:	f000 8552 	beq.w	800446a <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039cc:	f200 860d 	bhi.w	80045ea <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039d6:	f000 84fe 	beq.w	80043d6 <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039e0:	f200 8603 	bhi.w	80045ea <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039ea:	f000 849f 	beq.w	800432c <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039f4:	f200 85f9 	bhi.w	80045ea <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2b80      	cmp	r3, #128	; 0x80
 80039fc:	f000 846a 	beq.w	80042d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2b80      	cmp	r3, #128	; 0x80
 8003a04:	f200 85f1 	bhi.w	80045ea <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2b20      	cmp	r3, #32
 8003a0c:	d84c      	bhi.n	8003aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	f000 85ea 	beq.w	80045ea <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	3b01      	subs	r3, #1
 8003a1a:	2b1f      	cmp	r3, #31
 8003a1c:	f200 85e5 	bhi.w	80045ea <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003a20:	a201      	add	r2, pc, #4	; (adr r2, 8003a28 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 8003a22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a26:	bf00      	nop
 8003a28:	08003e39 	.word	0x08003e39
 8003a2c:	08003ea7 	.word	0x08003ea7
 8003a30:	080045eb 	.word	0x080045eb
 8003a34:	08003f3b 	.word	0x08003f3b
 8003a38:	080045eb 	.word	0x080045eb
 8003a3c:	080045eb 	.word	0x080045eb
 8003a40:	080045eb 	.word	0x080045eb
 8003a44:	08003fb3 	.word	0x08003fb3
 8003a48:	080045eb 	.word	0x080045eb
 8003a4c:	080045eb 	.word	0x080045eb
 8003a50:	080045eb 	.word	0x080045eb
 8003a54:	080045eb 	.word	0x080045eb
 8003a58:	080045eb 	.word	0x080045eb
 8003a5c:	080045eb 	.word	0x080045eb
 8003a60:	080045eb 	.word	0x080045eb
 8003a64:	08004037 	.word	0x08004037
 8003a68:	080045eb 	.word	0x080045eb
 8003a6c:	080045eb 	.word	0x080045eb
 8003a70:	080045eb 	.word	0x080045eb
 8003a74:	080045eb 	.word	0x080045eb
 8003a78:	080045eb 	.word	0x080045eb
 8003a7c:	080045eb 	.word	0x080045eb
 8003a80:	080045eb 	.word	0x080045eb
 8003a84:	080045eb 	.word	0x080045eb
 8003a88:	080045eb 	.word	0x080045eb
 8003a8c:	080045eb 	.word	0x080045eb
 8003a90:	080045eb 	.word	0x080045eb
 8003a94:	080045eb 	.word	0x080045eb
 8003a98:	080045eb 	.word	0x080045eb
 8003a9c:	080045eb 	.word	0x080045eb
 8003aa0:	080045eb 	.word	0x080045eb
 8003aa4:	080040b9 	.word	0x080040b9
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2b40      	cmp	r3, #64	; 0x40
 8003aac:	f000 83e6 	beq.w	800427c <HAL_RCCEx_GetPeriphCLKFreq+0xab8>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 8003ab0:	f000 bd9b 	b.w	80045ea <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003ab4:	40021000 	.word	0x40021000
 8003ab8:	0007a120 	.word	0x0007a120
 8003abc:	08007cd8 	.word	0x08007cd8
 8003ac0:	00f42400 	.word	0x00f42400
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8003ac4:	69b9      	ldr	r1, [r7, #24]
 8003ac6:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003aca:	f000 ff83 	bl	80049d4 <RCCEx_GetSAIxPeriphCLKFreq>
 8003ace:	61f8      	str	r0, [r7, #28]
      break;
 8003ad0:	f000 bd8e 	b.w	80045f0 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 8003ad4:	69b9      	ldr	r1, [r7, #24]
 8003ad6:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003ada:	f000 ff7b 	bl	80049d4 <RCCEx_GetSAIxPeriphCLKFreq>
 8003ade:	61f8      	str	r0, [r7, #28]
      break;
 8003ae0:	f000 bd86 	b.w	80045f0 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8003ae4:	4b9a      	ldr	r3, [pc, #616]	; (8003d50 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003ae6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aea:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8003aee:	60fb      	str	r3, [r7, #12]
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003af6:	d015      	beq.n	8003b24 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003afe:	f200 8092 	bhi.w	8003c26 <HAL_RCCEx_GetPeriphCLKFreq+0x462>
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003b08:	d029      	beq.n	8003b5e <HAL_RCCEx_GetPeriphCLKFreq+0x39a>
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003b10:	f200 8089 	bhi.w	8003c26 <HAL_RCCEx_GetPeriphCLKFreq+0x462>
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d07b      	beq.n	8003c12 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003b20:	d04a      	beq.n	8003bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
          break;
 8003b22:	e080      	b.n	8003c26 <HAL_RCCEx_GetPeriphCLKFreq+0x462>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8003b24:	4b8a      	ldr	r3, [pc, #552]	; (8003d50 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f003 0302 	and.w	r3, r3, #2
 8003b2c:	2b02      	cmp	r3, #2
 8003b2e:	d17d      	bne.n	8003c2c <HAL_RCCEx_GetPeriphCLKFreq+0x468>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8003b30:	4b87      	ldr	r3, [pc, #540]	; (8003d50 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f003 0308 	and.w	r3, r3, #8
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d005      	beq.n	8003b48 <HAL_RCCEx_GetPeriphCLKFreq+0x384>
 8003b3c:	4b84      	ldr	r3, [pc, #528]	; (8003d50 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	091b      	lsrs	r3, r3, #4
 8003b42:	f003 030f 	and.w	r3, r3, #15
 8003b46:	e005      	b.n	8003b54 <HAL_RCCEx_GetPeriphCLKFreq+0x390>
 8003b48:	4b81      	ldr	r3, [pc, #516]	; (8003d50 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003b4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b4e:	0a1b      	lsrs	r3, r3, #8
 8003b50:	f003 030f 	and.w	r3, r3, #15
 8003b54:	4a7f      	ldr	r2, [pc, #508]	; (8003d54 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8003b56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b5a:	61fb      	str	r3, [r7, #28]
          break;
 8003b5c:	e066      	b.n	8003c2c <HAL_RCCEx_GetPeriphCLKFreq+0x468>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8003b5e:	4b7c      	ldr	r3, [pc, #496]	; (8003d50 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b66:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003b6a:	d162      	bne.n	8003c32 <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8003b6c:	4b78      	ldr	r3, [pc, #480]	; (8003d50 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003b6e:	68db      	ldr	r3, [r3, #12]
 8003b70:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b74:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b78:	d15b      	bne.n	8003c32 <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8003b7a:	4b75      	ldr	r3, [pc, #468]	; (8003d50 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003b7c:	68db      	ldr	r3, [r3, #12]
 8003b7e:	0a1b      	lsrs	r3, r3, #8
 8003b80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b84:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8003b86:	69bb      	ldr	r3, [r7, #24]
 8003b88:	68ba      	ldr	r2, [r7, #8]
 8003b8a:	fb03 f202 	mul.w	r2, r3, r2
 8003b8e:	4b70      	ldr	r3, [pc, #448]	; (8003d50 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003b90:	68db      	ldr	r3, [r3, #12]
 8003b92:	091b      	lsrs	r3, r3, #4
 8003b94:	f003 030f 	and.w	r3, r3, #15
 8003b98:	3301      	adds	r3, #1
 8003b9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b9e:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8003ba0:	4b6b      	ldr	r3, [pc, #428]	; (8003d50 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003ba2:	68db      	ldr	r3, [r3, #12]
 8003ba4:	0d5b      	lsrs	r3, r3, #21
 8003ba6:	f003 0303 	and.w	r3, r3, #3
 8003baa:	3301      	adds	r3, #1
 8003bac:	005b      	lsls	r3, r3, #1
 8003bae:	69ba      	ldr	r2, [r7, #24]
 8003bb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bb4:	61fb      	str	r3, [r7, #28]
          break;
 8003bb6:	e03c      	b.n	8003c32 <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8003bb8:	4b65      	ldr	r3, [pc, #404]	; (8003d50 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003bc0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003bc4:	d138      	bne.n	8003c38 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8003bc6:	4b62      	ldr	r3, [pc, #392]	; (8003d50 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003bc8:	691b      	ldr	r3, [r3, #16]
 8003bca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003bce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003bd2:	d131      	bne.n	8003c38 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8003bd4:	4b5e      	ldr	r3, [pc, #376]	; (8003d50 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003bd6:	691b      	ldr	r3, [r3, #16]
 8003bd8:	0a1b      	lsrs	r3, r3, #8
 8003bda:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003bde:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8003be0:	69bb      	ldr	r3, [r7, #24]
 8003be2:	68ba      	ldr	r2, [r7, #8]
 8003be4:	fb03 f202 	mul.w	r2, r3, r2
 8003be8:	4b59      	ldr	r3, [pc, #356]	; (8003d50 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003bea:	691b      	ldr	r3, [r3, #16]
 8003bec:	091b      	lsrs	r3, r3, #4
 8003bee:	f003 030f 	and.w	r3, r3, #15
 8003bf2:	3301      	adds	r3, #1
 8003bf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bf8:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8003bfa:	4b55      	ldr	r3, [pc, #340]	; (8003d50 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003bfc:	691b      	ldr	r3, [r3, #16]
 8003bfe:	0d5b      	lsrs	r3, r3, #21
 8003c00:	f003 0303 	and.w	r3, r3, #3
 8003c04:	3301      	adds	r3, #1
 8003c06:	005b      	lsls	r3, r3, #1
 8003c08:	69ba      	ldr	r2, [r7, #24]
 8003c0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c0e:	61fb      	str	r3, [r7, #28]
          break;
 8003c10:	e012      	b.n	8003c38 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 8003c12:	4b4f      	ldr	r3, [pc, #316]	; (8003d50 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003c14:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003c18:	f003 0302 	and.w	r3, r3, #2
 8003c1c:	2b02      	cmp	r3, #2
 8003c1e:	d10e      	bne.n	8003c3e <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
            frequency = HSI48_VALUE;
 8003c20:	4b4d      	ldr	r3, [pc, #308]	; (8003d58 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8003c22:	61fb      	str	r3, [r7, #28]
          break;
 8003c24:	e00b      	b.n	8003c3e <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
          break;
 8003c26:	bf00      	nop
 8003c28:	f000 bce2 	b.w	80045f0 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8003c2c:	bf00      	nop
 8003c2e:	f000 bcdf 	b.w	80045f0 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8003c32:	bf00      	nop
 8003c34:	f000 bcdc 	b.w	80045f0 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8003c38:	bf00      	nop
 8003c3a:	f000 bcd9 	b.w	80045f0 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8003c3e:	bf00      	nop
        break;
 8003c40:	f000 bcd6 	b.w	80045f0 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      if(HAL_IS_BIT_SET(RCC->CCIPR2, RCC_CCIPR2_SDMMCSEL))  /* PLL "P" ? */
 8003c44:	4b42      	ldr	r3, [pc, #264]	; (8003d50 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003c46:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003c4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c4e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003c52:	d13d      	bne.n	8003cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8003c54:	4b3e      	ldr	r3, [pc, #248]	; (8003d50 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c5c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003c60:	f040 84c5 	bne.w	80045ee <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLPEN))
 8003c64:	4b3a      	ldr	r3, [pc, #232]	; (8003d50 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003c66:	68db      	ldr	r3, [r3, #12]
 8003c68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c70:	f040 84bd 	bne.w	80045ee <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8003c74:	4b36      	ldr	r3, [pc, #216]	; (8003d50 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003c76:	68db      	ldr	r3, [r3, #12]
 8003c78:	0a1b      	lsrs	r3, r3, #8
 8003c7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c7e:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8003c80:	69bb      	ldr	r3, [r7, #24]
 8003c82:	68ba      	ldr	r2, [r7, #8]
 8003c84:	fb03 f202 	mul.w	r2, r3, r2
 8003c88:	4b31      	ldr	r3, [pc, #196]	; (8003d50 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003c8a:	68db      	ldr	r3, [r3, #12]
 8003c8c:	091b      	lsrs	r3, r3, #4
 8003c8e:	f003 030f 	and.w	r3, r3, #15
 8003c92:	3301      	adds	r3, #1
 8003c94:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c98:	61bb      	str	r3, [r7, #24]
            pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 8003c9a:	4b2d      	ldr	r3, [pc, #180]	; (8003d50 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003c9c:	68db      	ldr	r3, [r3, #12]
 8003c9e:	0edb      	lsrs	r3, r3, #27
 8003ca0:	f003 031f 	and.w	r3, r3, #31
 8003ca4:	617b      	str	r3, [r7, #20]
            if(pllp == 0U)
 8003ca6:	697b      	ldr	r3, [r7, #20]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d10a      	bne.n	8003cc2 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
              if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8003cac:	4b28      	ldr	r3, [pc, #160]	; (8003d50 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003cae:	68db      	ldr	r3, [r3, #12]
 8003cb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d002      	beq.n	8003cbe <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
                pllp = 17U;
 8003cb8:	2311      	movs	r3, #17
 8003cba:	617b      	str	r3, [r7, #20]
 8003cbc:	e001      	b.n	8003cc2 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
                pllp = 7U;
 8003cbe:	2307      	movs	r3, #7
 8003cc0:	617b      	str	r3, [r7, #20]
            frequency = (pllvco / pllp);
 8003cc2:	69ba      	ldr	r2, [r7, #24]
 8003cc4:	697b      	ldr	r3, [r7, #20]
 8003cc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cca:	61fb      	str	r3, [r7, #28]
      break;
 8003ccc:	f000 bc8f 	b.w	80045ee <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8003cd0:	4b1f      	ldr	r3, [pc, #124]	; (8003d50 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003cd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cd6:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8003cda:	60fb      	str	r3, [r7, #12]
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003ce2:	d016      	beq.n	8003d12 <HAL_RCCEx_GetPeriphCLKFreq+0x54e>
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003cea:	f200 809b 	bhi.w	8003e24 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003cf4:	d032      	beq.n	8003d5c <HAL_RCCEx_GetPeriphCLKFreq+0x598>
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003cfc:	f200 8092 	bhi.w	8003e24 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	f000 8084 	beq.w	8003e10 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003d0e:	d052      	beq.n	8003db6 <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
          break;
 8003d10:	e088      	b.n	8003e24 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8003d12:	4b0f      	ldr	r3, [pc, #60]	; (8003d50 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f003 0302 	and.w	r3, r3, #2
 8003d1a:	2b02      	cmp	r3, #2
 8003d1c:	f040 8084 	bne.w	8003e28 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8003d20:	4b0b      	ldr	r3, [pc, #44]	; (8003d50 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f003 0308 	and.w	r3, r3, #8
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d005      	beq.n	8003d38 <HAL_RCCEx_GetPeriphCLKFreq+0x574>
 8003d2c:	4b08      	ldr	r3, [pc, #32]	; (8003d50 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	091b      	lsrs	r3, r3, #4
 8003d32:	f003 030f 	and.w	r3, r3, #15
 8003d36:	e005      	b.n	8003d44 <HAL_RCCEx_GetPeriphCLKFreq+0x580>
 8003d38:	4b05      	ldr	r3, [pc, #20]	; (8003d50 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003d3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d3e:	0a1b      	lsrs	r3, r3, #8
 8003d40:	f003 030f 	and.w	r3, r3, #15
 8003d44:	4a03      	ldr	r2, [pc, #12]	; (8003d54 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8003d46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d4a:	61fb      	str	r3, [r7, #28]
          break;
 8003d4c:	e06c      	b.n	8003e28 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 8003d4e:	bf00      	nop
 8003d50:	40021000 	.word	0x40021000
 8003d54:	08007cd8 	.word	0x08007cd8
 8003d58:	02dc6c00 	.word	0x02dc6c00
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8003d5c:	4ba5      	ldr	r3, [pc, #660]	; (8003ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d64:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003d68:	d160      	bne.n	8003e2c <HAL_RCCEx_GetPeriphCLKFreq+0x668>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8003d6a:	4ba2      	ldr	r3, [pc, #648]	; (8003ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8003d6c:	68db      	ldr	r3, [r3, #12]
 8003d6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d72:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d76:	d159      	bne.n	8003e2c <HAL_RCCEx_GetPeriphCLKFreq+0x668>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8003d78:	4b9e      	ldr	r3, [pc, #632]	; (8003ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8003d7a:	68db      	ldr	r3, [r3, #12]
 8003d7c:	0a1b      	lsrs	r3, r3, #8
 8003d7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d82:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8003d84:	69bb      	ldr	r3, [r7, #24]
 8003d86:	68ba      	ldr	r2, [r7, #8]
 8003d88:	fb03 f202 	mul.w	r2, r3, r2
 8003d8c:	4b99      	ldr	r3, [pc, #612]	; (8003ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8003d8e:	68db      	ldr	r3, [r3, #12]
 8003d90:	091b      	lsrs	r3, r3, #4
 8003d92:	f003 030f 	and.w	r3, r3, #15
 8003d96:	3301      	adds	r3, #1
 8003d98:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d9c:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8003d9e:	4b95      	ldr	r3, [pc, #596]	; (8003ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8003da0:	68db      	ldr	r3, [r3, #12]
 8003da2:	0d5b      	lsrs	r3, r3, #21
 8003da4:	f003 0303 	and.w	r3, r3, #3
 8003da8:	3301      	adds	r3, #1
 8003daa:	005b      	lsls	r3, r3, #1
 8003dac:	69ba      	ldr	r2, [r7, #24]
 8003dae:	fbb2 f3f3 	udiv	r3, r2, r3
 8003db2:	61fb      	str	r3, [r7, #28]
          break;
 8003db4:	e03a      	b.n	8003e2c <HAL_RCCEx_GetPeriphCLKFreq+0x668>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8003db6:	4b8f      	ldr	r3, [pc, #572]	; (8003ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003dbe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003dc2:	d135      	bne.n	8003e30 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8003dc4:	4b8b      	ldr	r3, [pc, #556]	; (8003ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8003dc6:	691b      	ldr	r3, [r3, #16]
 8003dc8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003dcc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003dd0:	d12e      	bne.n	8003e30 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8003dd2:	4b88      	ldr	r3, [pc, #544]	; (8003ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8003dd4:	691b      	ldr	r3, [r3, #16]
 8003dd6:	0a1b      	lsrs	r3, r3, #8
 8003dd8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ddc:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8003dde:	69bb      	ldr	r3, [r7, #24]
 8003de0:	68ba      	ldr	r2, [r7, #8]
 8003de2:	fb03 f202 	mul.w	r2, r3, r2
 8003de6:	4b83      	ldr	r3, [pc, #524]	; (8003ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8003de8:	691b      	ldr	r3, [r3, #16]
 8003dea:	091b      	lsrs	r3, r3, #4
 8003dec:	f003 030f 	and.w	r3, r3, #15
 8003df0:	3301      	adds	r3, #1
 8003df2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003df6:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8003df8:	4b7e      	ldr	r3, [pc, #504]	; (8003ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8003dfa:	691b      	ldr	r3, [r3, #16]
 8003dfc:	0d5b      	lsrs	r3, r3, #21
 8003dfe:	f003 0303 	and.w	r3, r3, #3
 8003e02:	3301      	adds	r3, #1
 8003e04:	005b      	lsls	r3, r3, #1
 8003e06:	69ba      	ldr	r2, [r7, #24]
 8003e08:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e0c:	61fb      	str	r3, [r7, #28]
          break;
 8003e0e:	e00f      	b.n	8003e30 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 8003e10:	4b78      	ldr	r3, [pc, #480]	; (8003ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8003e12:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003e16:	f003 0302 	and.w	r3, r3, #2
 8003e1a:	2b02      	cmp	r3, #2
 8003e1c:	d10a      	bne.n	8003e34 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
            frequency = HSI48_VALUE;
 8003e1e:	4b76      	ldr	r3, [pc, #472]	; (8003ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8003e20:	61fb      	str	r3, [r7, #28]
          break;
 8003e22:	e007      	b.n	8003e34 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
          break;
 8003e24:	bf00      	nop
 8003e26:	e3e2      	b.n	80045ee <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          break;
 8003e28:	bf00      	nop
 8003e2a:	e3e0      	b.n	80045ee <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          break;
 8003e2c:	bf00      	nop
 8003e2e:	e3de      	b.n	80045ee <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          break;
 8003e30:	bf00      	nop
 8003e32:	e3dc      	b.n	80045ee <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          break;
 8003e34:	bf00      	nop
      break;
 8003e36:	e3da      	b.n	80045ee <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8003e38:	4b6e      	ldr	r3, [pc, #440]	; (8003ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8003e3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e3e:	f003 0303 	and.w	r3, r3, #3
 8003e42:	60fb      	str	r3, [r7, #12]
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	2b03      	cmp	r3, #3
 8003e48:	d827      	bhi.n	8003e9a <HAL_RCCEx_GetPeriphCLKFreq+0x6d6>
 8003e4a:	a201      	add	r2, pc, #4	; (adr r2, 8003e50 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>)
 8003e4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e50:	08003e61 	.word	0x08003e61
 8003e54:	08003e69 	.word	0x08003e69
 8003e58:	08003e71 	.word	0x08003e71
 8003e5c:	08003e85 	.word	0x08003e85
          frequency = HAL_RCC_GetPCLK2Freq();
 8003e60:	f7ff f84c 	bl	8002efc <HAL_RCC_GetPCLK2Freq>
 8003e64:	61f8      	str	r0, [r7, #28]
          break;
 8003e66:	e01d      	b.n	8003ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
          frequency = HAL_RCC_GetSysClockFreq();
 8003e68:	f7fe ff9c 	bl	8002da4 <HAL_RCC_GetSysClockFreq>
 8003e6c:	61f8      	str	r0, [r7, #28]
          break;
 8003e6e:	e019      	b.n	8003ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003e70:	4b60      	ldr	r3, [pc, #384]	; (8003ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e7c:	d10f      	bne.n	8003e9e <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
            frequency = HSI_VALUE;
 8003e7e:	4b5f      	ldr	r3, [pc, #380]	; (8003ffc <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8003e80:	61fb      	str	r3, [r7, #28]
          break;
 8003e82:	e00c      	b.n	8003e9e <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003e84:	4b5b      	ldr	r3, [pc, #364]	; (8003ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8003e86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e8a:	f003 0302 	and.w	r3, r3, #2
 8003e8e:	2b02      	cmp	r3, #2
 8003e90:	d107      	bne.n	8003ea2 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
            frequency = LSE_VALUE;
 8003e92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e96:	61fb      	str	r3, [r7, #28]
          break;
 8003e98:	e003      	b.n	8003ea2 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
          break;
 8003e9a:	bf00      	nop
 8003e9c:	e3a8      	b.n	80045f0 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8003e9e:	bf00      	nop
 8003ea0:	e3a6      	b.n	80045f0 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8003ea2:	bf00      	nop
        break;
 8003ea4:	e3a4      	b.n	80045f0 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8003ea6:	4b53      	ldr	r3, [pc, #332]	; (8003ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8003ea8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eac:	f003 030c 	and.w	r3, r3, #12
 8003eb0:	60fb      	str	r3, [r7, #12]
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	2b0c      	cmp	r3, #12
 8003eb6:	d83a      	bhi.n	8003f2e <HAL_RCCEx_GetPeriphCLKFreq+0x76a>
 8003eb8:	a201      	add	r2, pc, #4	; (adr r2, 8003ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>)
 8003eba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ebe:	bf00      	nop
 8003ec0:	08003ef5 	.word	0x08003ef5
 8003ec4:	08003f2f 	.word	0x08003f2f
 8003ec8:	08003f2f 	.word	0x08003f2f
 8003ecc:	08003f2f 	.word	0x08003f2f
 8003ed0:	08003efd 	.word	0x08003efd
 8003ed4:	08003f2f 	.word	0x08003f2f
 8003ed8:	08003f2f 	.word	0x08003f2f
 8003edc:	08003f2f 	.word	0x08003f2f
 8003ee0:	08003f05 	.word	0x08003f05
 8003ee4:	08003f2f 	.word	0x08003f2f
 8003ee8:	08003f2f 	.word	0x08003f2f
 8003eec:	08003f2f 	.word	0x08003f2f
 8003ef0:	08003f19 	.word	0x08003f19
          frequency = HAL_RCC_GetPCLK1Freq();
 8003ef4:	f7fe ffec 	bl	8002ed0 <HAL_RCC_GetPCLK1Freq>
 8003ef8:	61f8      	str	r0, [r7, #28]
          break;
 8003efa:	e01d      	b.n	8003f38 <HAL_RCCEx_GetPeriphCLKFreq+0x774>
          frequency = HAL_RCC_GetSysClockFreq();
 8003efc:	f7fe ff52 	bl	8002da4 <HAL_RCC_GetSysClockFreq>
 8003f00:	61f8      	str	r0, [r7, #28]
          break;
 8003f02:	e019      	b.n	8003f38 <HAL_RCCEx_GetPeriphCLKFreq+0x774>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003f04:	4b3b      	ldr	r3, [pc, #236]	; (8003ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f10:	d10f      	bne.n	8003f32 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
            frequency = HSI_VALUE;
 8003f12:	4b3a      	ldr	r3, [pc, #232]	; (8003ffc <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8003f14:	61fb      	str	r3, [r7, #28]
          break;
 8003f16:	e00c      	b.n	8003f32 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003f18:	4b36      	ldr	r3, [pc, #216]	; (8003ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8003f1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f1e:	f003 0302 	and.w	r3, r3, #2
 8003f22:	2b02      	cmp	r3, #2
 8003f24:	d107      	bne.n	8003f36 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
            frequency = LSE_VALUE;
 8003f26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f2a:	61fb      	str	r3, [r7, #28]
          break;
 8003f2c:	e003      	b.n	8003f36 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
          break;
 8003f2e:	bf00      	nop
 8003f30:	e35e      	b.n	80045f0 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8003f32:	bf00      	nop
 8003f34:	e35c      	b.n	80045f0 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8003f36:	bf00      	nop
        break;
 8003f38:	e35a      	b.n	80045f0 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8003f3a:	4b2e      	ldr	r3, [pc, #184]	; (8003ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8003f3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f40:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003f44:	60fb      	str	r3, [r7, #12]
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	2b30      	cmp	r3, #48	; 0x30
 8003f4a:	d021      	beq.n	8003f90 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	2b30      	cmp	r3, #48	; 0x30
 8003f50:	d829      	bhi.n	8003fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	2b20      	cmp	r3, #32
 8003f56:	d011      	beq.n	8003f7c <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	2b20      	cmp	r3, #32
 8003f5c:	d823      	bhi.n	8003fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d003      	beq.n	8003f6c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	2b10      	cmp	r3, #16
 8003f68:	d004      	beq.n	8003f74 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>
          break;
 8003f6a:	e01c      	b.n	8003fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
          frequency = HAL_RCC_GetPCLK1Freq();
 8003f6c:	f7fe ffb0 	bl	8002ed0 <HAL_RCC_GetPCLK1Freq>
 8003f70:	61f8      	str	r0, [r7, #28]
          break;
 8003f72:	e01d      	b.n	8003fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ec>
          frequency = HAL_RCC_GetSysClockFreq();
 8003f74:	f7fe ff16 	bl	8002da4 <HAL_RCC_GetSysClockFreq>
 8003f78:	61f8      	str	r0, [r7, #28]
          break;
 8003f7a:	e019      	b.n	8003fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ec>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003f7c:	4b1d      	ldr	r3, [pc, #116]	; (8003ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f88:	d10f      	bne.n	8003faa <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
            frequency = HSI_VALUE;
 8003f8a:	4b1c      	ldr	r3, [pc, #112]	; (8003ffc <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8003f8c:	61fb      	str	r3, [r7, #28]
          break;
 8003f8e:	e00c      	b.n	8003faa <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003f90:	4b18      	ldr	r3, [pc, #96]	; (8003ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8003f92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f96:	f003 0302 	and.w	r3, r3, #2
 8003f9a:	2b02      	cmp	r3, #2
 8003f9c:	d107      	bne.n	8003fae <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
            frequency = LSE_VALUE;
 8003f9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003fa2:	61fb      	str	r3, [r7, #28]
          break;
 8003fa4:	e003      	b.n	8003fae <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
          break;
 8003fa6:	bf00      	nop
 8003fa8:	e322      	b.n	80045f0 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8003faa:	bf00      	nop
 8003fac:	e320      	b.n	80045f0 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8003fae:	bf00      	nop
        break;
 8003fb0:	e31e      	b.n	80045f0 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8003fb2:	4b10      	ldr	r3, [pc, #64]	; (8003ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8003fb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fb8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003fbc:	60fb      	str	r3, [r7, #12]
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	2bc0      	cmp	r3, #192	; 0xc0
 8003fc2:	d027      	beq.n	8004014 <HAL_RCCEx_GetPeriphCLKFreq+0x850>
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	2bc0      	cmp	r3, #192	; 0xc0
 8003fc8:	d82f      	bhi.n	800402a <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	2b80      	cmp	r3, #128	; 0x80
 8003fce:	d017      	beq.n	8004000 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	2b80      	cmp	r3, #128	; 0x80
 8003fd4:	d829      	bhi.n	800402a <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d003      	beq.n	8003fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	2b40      	cmp	r3, #64	; 0x40
 8003fe0:	d004      	beq.n	8003fec <HAL_RCCEx_GetPeriphCLKFreq+0x828>
          break;
 8003fe2:	e022      	b.n	800402a <HAL_RCCEx_GetPeriphCLKFreq+0x866>
          frequency = HAL_RCC_GetPCLK1Freq();
 8003fe4:	f7fe ff74 	bl	8002ed0 <HAL_RCC_GetPCLK1Freq>
 8003fe8:	61f8      	str	r0, [r7, #28]
          break;
 8003fea:	e023      	b.n	8004034 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
          frequency = HAL_RCC_GetSysClockFreq();
 8003fec:	f7fe feda 	bl	8002da4 <HAL_RCC_GetSysClockFreq>
 8003ff0:	61f8      	str	r0, [r7, #28]
          break;
 8003ff2:	e01f      	b.n	8004034 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
 8003ff4:	40021000 	.word	0x40021000
 8003ff8:	02dc6c00 	.word	0x02dc6c00
 8003ffc:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004000:	4b9b      	ldr	r3, [pc, #620]	; (8004270 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004008:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800400c:	d10f      	bne.n	800402e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
            frequency = HSI_VALUE;
 800400e:	4b99      	ldr	r3, [pc, #612]	; (8004274 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8004010:	61fb      	str	r3, [r7, #28]
          break;
 8004012:	e00c      	b.n	800402e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004014:	4b96      	ldr	r3, [pc, #600]	; (8004270 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8004016:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800401a:	f003 0302 	and.w	r3, r3, #2
 800401e:	2b02      	cmp	r3, #2
 8004020:	d107      	bne.n	8004032 <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
            frequency = LSE_VALUE;
 8004022:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004026:	61fb      	str	r3, [r7, #28]
          break;
 8004028:	e003      	b.n	8004032 <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
          break;
 800402a:	bf00      	nop
 800402c:	e2e0      	b.n	80045f0 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800402e:	bf00      	nop
 8004030:	e2de      	b.n	80045f0 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004032:	bf00      	nop
        break;
 8004034:	e2dc      	b.n	80045f0 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8004036:	4b8e      	ldr	r3, [pc, #568]	; (8004270 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8004038:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800403c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004040:	60fb      	str	r3, [r7, #12]
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004048:	d025      	beq.n	8004096 <HAL_RCCEx_GetPeriphCLKFreq+0x8d2>
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004050:	d82c      	bhi.n	80040ac <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004058:	d013      	beq.n	8004082 <HAL_RCCEx_GetPeriphCLKFreq+0x8be>
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004060:	d824      	bhi.n	80040ac <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d004      	beq.n	8004072 <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800406e:	d004      	beq.n	800407a <HAL_RCCEx_GetPeriphCLKFreq+0x8b6>
          break;
 8004070:	e01c      	b.n	80040ac <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004072:	f7fe ff2d 	bl	8002ed0 <HAL_RCC_GetPCLK1Freq>
 8004076:	61f8      	str	r0, [r7, #28]
          break;
 8004078:	e01d      	b.n	80040b6 <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
          frequency = HAL_RCC_GetSysClockFreq();
 800407a:	f7fe fe93 	bl	8002da4 <HAL_RCC_GetSysClockFreq>
 800407e:	61f8      	str	r0, [r7, #28]
          break;
 8004080:	e019      	b.n	80040b6 <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004082:	4b7b      	ldr	r3, [pc, #492]	; (8004270 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800408a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800408e:	d10f      	bne.n	80040b0 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
            frequency = HSI_VALUE;
 8004090:	4b78      	ldr	r3, [pc, #480]	; (8004274 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8004092:	61fb      	str	r3, [r7, #28]
          break;
 8004094:	e00c      	b.n	80040b0 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004096:	4b76      	ldr	r3, [pc, #472]	; (8004270 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8004098:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800409c:	f003 0302 	and.w	r3, r3, #2
 80040a0:	2b02      	cmp	r3, #2
 80040a2:	d107      	bne.n	80040b4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
            frequency = LSE_VALUE;
 80040a4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80040a8:	61fb      	str	r3, [r7, #28]
          break;
 80040aa:	e003      	b.n	80040b4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          break;
 80040ac:	bf00      	nop
 80040ae:	e29f      	b.n	80045f0 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80040b0:	bf00      	nop
 80040b2:	e29d      	b.n	80045f0 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80040b4:	bf00      	nop
        break;
 80040b6:	e29b      	b.n	80045f0 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 80040b8:	4b6d      	ldr	r3, [pc, #436]	; (8004270 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80040ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040be:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80040c2:	60fb      	str	r3, [r7, #12]
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80040ca:	d025      	beq.n	8004118 <HAL_RCCEx_GetPeriphCLKFreq+0x954>
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80040d2:	d82c      	bhi.n	800412e <HAL_RCCEx_GetPeriphCLKFreq+0x96a>
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040da:	d013      	beq.n	8004104 <HAL_RCCEx_GetPeriphCLKFreq+0x940>
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040e2:	d824      	bhi.n	800412e <HAL_RCCEx_GetPeriphCLKFreq+0x96a>
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d004      	beq.n	80040f4 <HAL_RCCEx_GetPeriphCLKFreq+0x930>
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040f0:	d004      	beq.n	80040fc <HAL_RCCEx_GetPeriphCLKFreq+0x938>
          break;
 80040f2:	e01c      	b.n	800412e <HAL_RCCEx_GetPeriphCLKFreq+0x96a>
          frequency = HAL_RCC_GetPCLK1Freq();
 80040f4:	f7fe feec 	bl	8002ed0 <HAL_RCC_GetPCLK1Freq>
 80040f8:	61f8      	str	r0, [r7, #28]
          break;
 80040fa:	e01d      	b.n	8004138 <HAL_RCCEx_GetPeriphCLKFreq+0x974>
          frequency = HAL_RCC_GetSysClockFreq();
 80040fc:	f7fe fe52 	bl	8002da4 <HAL_RCC_GetSysClockFreq>
 8004100:	61f8      	str	r0, [r7, #28]
          break;
 8004102:	e019      	b.n	8004138 <HAL_RCCEx_GetPeriphCLKFreq+0x974>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004104:	4b5a      	ldr	r3, [pc, #360]	; (8004270 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800410c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004110:	d10f      	bne.n	8004132 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
            frequency = HSI_VALUE;
 8004112:	4b58      	ldr	r3, [pc, #352]	; (8004274 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8004114:	61fb      	str	r3, [r7, #28]
          break;
 8004116:	e00c      	b.n	8004132 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004118:	4b55      	ldr	r3, [pc, #340]	; (8004270 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 800411a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800411e:	f003 0302 	and.w	r3, r3, #2
 8004122:	2b02      	cmp	r3, #2
 8004124:	d107      	bne.n	8004136 <HAL_RCCEx_GetPeriphCLKFreq+0x972>
            frequency = LSE_VALUE;
 8004126:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800412a:	61fb      	str	r3, [r7, #28]
          break;
 800412c:	e003      	b.n	8004136 <HAL_RCCEx_GetPeriphCLKFreq+0x972>
          break;
 800412e:	bf00      	nop
 8004130:	e25e      	b.n	80045f0 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004132:	bf00      	nop
 8004134:	e25c      	b.n	80045f0 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004136:	bf00      	nop
        break;
 8004138:	e25a      	b.n	80045f0 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800413a:	4b4d      	ldr	r3, [pc, #308]	; (8004270 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 800413c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004140:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004144:	60fb      	str	r3, [r7, #12]
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800414c:	d007      	beq.n	800415e <HAL_RCCEx_GetPeriphCLKFreq+0x99a>
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004154:	d12f      	bne.n	80041b6 <HAL_RCCEx_GetPeriphCLKFreq+0x9f2>
          frequency = HAL_RCC_GetSysClockFreq();
 8004156:	f7fe fe25 	bl	8002da4 <HAL_RCC_GetSysClockFreq>
 800415a:	61f8      	str	r0, [r7, #28]
          break;
 800415c:	e02e      	b.n	80041bc <HAL_RCCEx_GetPeriphCLKFreq+0x9f8>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 800415e:	4b44      	ldr	r3, [pc, #272]	; (8004270 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004166:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800416a:	d126      	bne.n	80041ba <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
 800416c:	4b40      	ldr	r3, [pc, #256]	; (8004270 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 800416e:	691b      	ldr	r3, [r3, #16]
 8004170:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004174:	2b00      	cmp	r3, #0
 8004176:	d020      	beq.n	80041ba <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8004178:	4b3d      	ldr	r3, [pc, #244]	; (8004270 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 800417a:	691b      	ldr	r3, [r3, #16]
 800417c:	0a1b      	lsrs	r3, r3, #8
 800417e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004182:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8004184:	69bb      	ldr	r3, [r7, #24]
 8004186:	68ba      	ldr	r2, [r7, #8]
 8004188:	fb03 f202 	mul.w	r2, r3, r2
 800418c:	4b38      	ldr	r3, [pc, #224]	; (8004270 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 800418e:	691b      	ldr	r3, [r3, #16]
 8004190:	091b      	lsrs	r3, r3, #4
 8004192:	f003 030f 	and.w	r3, r3, #15
 8004196:	3301      	adds	r3, #1
 8004198:	fbb2 f3f3 	udiv	r3, r2, r3
 800419c:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 800419e:	4b34      	ldr	r3, [pc, #208]	; (8004270 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80041a0:	691b      	ldr	r3, [r3, #16]
 80041a2:	0e5b      	lsrs	r3, r3, #25
 80041a4:	f003 0303 	and.w	r3, r3, #3
 80041a8:	3301      	adds	r3, #1
 80041aa:	005b      	lsls	r3, r3, #1
 80041ac:	69ba      	ldr	r2, [r7, #24]
 80041ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80041b2:	61fb      	str	r3, [r7, #28]
          break;
 80041b4:	e001      	b.n	80041ba <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
          break;
 80041b6:	bf00      	nop
 80041b8:	e21a      	b.n	80045f0 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80041ba:	bf00      	nop
        break;
 80041bc:	e218      	b.n	80045f0 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 80041be:	4b2c      	ldr	r3, [pc, #176]	; (8004270 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80041c0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80041c4:	f003 0304 	and.w	r3, r3, #4
 80041c8:	60fb      	str	r3, [r7, #12]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d103      	bne.n	80041d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa14>
          frequency = HAL_RCC_GetPCLK2Freq();
 80041d0:	f7fe fe94 	bl	8002efc <HAL_RCC_GetPCLK2Freq>
 80041d4:	61f8      	str	r0, [r7, #28]
        break;
 80041d6:	e20b      	b.n	80045f0 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          frequency = HAL_RCC_GetSysClockFreq();
 80041d8:	f7fe fde4 	bl	8002da4 <HAL_RCC_GetSysClockFreq>
 80041dc:	61f8      	str	r0, [r7, #28]
        break;
 80041de:	e207      	b.n	80045f0 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
 80041e0:	4b23      	ldr	r3, [pc, #140]	; (8004270 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80041e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80041e6:	f003 0318 	and.w	r3, r3, #24
 80041ea:	60fb      	str	r3, [r7, #12]
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	2b10      	cmp	r3, #16
 80041f0:	d010      	beq.n	8004214 <HAL_RCCEx_GetPeriphCLKFreq+0xa50>
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	2b10      	cmp	r3, #16
 80041f6:	d834      	bhi.n	8004262 <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d003      	beq.n	8004206 <HAL_RCCEx_GetPeriphCLKFreq+0xa42>
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	2b08      	cmp	r3, #8
 8004202:	d024      	beq.n	800424e <HAL_RCCEx_GetPeriphCLKFreq+0xa8a>
          break;
 8004204:	e02d      	b.n	8004262 <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
          frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8004206:	69b9      	ldr	r1, [r7, #24]
 8004208:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800420c:	f000 fbe2 	bl	80049d4 <RCCEx_GetSAIxPeriphCLKFreq>
 8004210:	61f8      	str	r0, [r7, #28]
          break;
 8004212:	e02b      	b.n	800426c <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8004214:	4b16      	ldr	r3, [pc, #88]	; (8004270 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f003 0302 	and.w	r3, r3, #2
 800421c:	2b02      	cmp	r3, #2
 800421e:	d122      	bne.n	8004266 <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8004220:	4b13      	ldr	r3, [pc, #76]	; (8004270 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f003 0308 	and.w	r3, r3, #8
 8004228:	2b00      	cmp	r3, #0
 800422a:	d005      	beq.n	8004238 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
 800422c:	4b10      	ldr	r3, [pc, #64]	; (8004270 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	091b      	lsrs	r3, r3, #4
 8004232:	f003 030f 	and.w	r3, r3, #15
 8004236:	e005      	b.n	8004244 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 8004238:	4b0d      	ldr	r3, [pc, #52]	; (8004270 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 800423a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800423e:	0a1b      	lsrs	r3, r3, #8
 8004240:	f003 030f 	and.w	r3, r3, #15
 8004244:	4a0c      	ldr	r2, [pc, #48]	; (8004278 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8004246:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800424a:	61fb      	str	r3, [r7, #28]
          break;
 800424c:	e00b      	b.n	8004266 <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800424e:	4b08      	ldr	r3, [pc, #32]	; (8004270 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004256:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800425a:	d106      	bne.n	800426a <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
            frequency = HSI_VALUE;
 800425c:	4b05      	ldr	r3, [pc, #20]	; (8004274 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800425e:	61fb      	str	r3, [r7, #28]
          break;
 8004260:	e003      	b.n	800426a <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
          break;
 8004262:	bf00      	nop
 8004264:	e1c4      	b.n	80045f0 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004266:	bf00      	nop
 8004268:	e1c2      	b.n	80045f0 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800426a:	bf00      	nop
        break;
 800426c:	e1c0      	b.n	80045f0 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
 800426e:	bf00      	nop
 8004270:	40021000 	.word	0x40021000
 8004274:	00f42400 	.word	0x00f42400
 8004278:	08007cd8 	.word	0x08007cd8
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800427c:	4b96      	ldr	r3, [pc, #600]	; (80044d8 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 800427e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004282:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004286:	60fb      	str	r3, [r7, #12]
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800428e:	d013      	beq.n	80042b8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004296:	d819      	bhi.n	80042cc <HAL_RCCEx_GetPeriphCLKFreq+0xb08>
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d004      	beq.n	80042a8 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042a4:	d004      	beq.n	80042b0 <HAL_RCCEx_GetPeriphCLKFreq+0xaec>
          break;
 80042a6:	e011      	b.n	80042cc <HAL_RCCEx_GetPeriphCLKFreq+0xb08>
          frequency = HAL_RCC_GetPCLK1Freq();
 80042a8:	f7fe fe12 	bl	8002ed0 <HAL_RCC_GetPCLK1Freq>
 80042ac:	61f8      	str	r0, [r7, #28]
          break;
 80042ae:	e010      	b.n	80042d2 <HAL_RCCEx_GetPeriphCLKFreq+0xb0e>
          frequency = HAL_RCC_GetSysClockFreq();
 80042b0:	f7fe fd78 	bl	8002da4 <HAL_RCC_GetSysClockFreq>
 80042b4:	61f8      	str	r0, [r7, #28]
          break;
 80042b6:	e00c      	b.n	80042d2 <HAL_RCCEx_GetPeriphCLKFreq+0xb0e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80042b8:	4b87      	ldr	r3, [pc, #540]	; (80044d8 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042c4:	d104      	bne.n	80042d0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
            frequency = HSI_VALUE;
 80042c6:	4b85      	ldr	r3, [pc, #532]	; (80044dc <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80042c8:	61fb      	str	r3, [r7, #28]
          break;
 80042ca:	e001      	b.n	80042d0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
          break;
 80042cc:	bf00      	nop
 80042ce:	e18f      	b.n	80045f0 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80042d0:	bf00      	nop
        break;
 80042d2:	e18d      	b.n	80045f0 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 80042d4:	4b80      	ldr	r3, [pc, #512]	; (80044d8 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 80042d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042da:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80042de:	60fb      	str	r3, [r7, #12]
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042e6:	d013      	beq.n	8004310 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042ee:	d819      	bhi.n	8004324 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d004      	beq.n	8004300 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80042fc:	d004      	beq.n	8004308 <HAL_RCCEx_GetPeriphCLKFreq+0xb44>
          break;
 80042fe:	e011      	b.n	8004324 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004300:	f7fe fde6 	bl	8002ed0 <HAL_RCC_GetPCLK1Freq>
 8004304:	61f8      	str	r0, [r7, #28]
          break;
 8004306:	e010      	b.n	800432a <HAL_RCCEx_GetPeriphCLKFreq+0xb66>
          frequency = HAL_RCC_GetSysClockFreq();
 8004308:	f7fe fd4c 	bl	8002da4 <HAL_RCC_GetSysClockFreq>
 800430c:	61f8      	str	r0, [r7, #28]
          break;
 800430e:	e00c      	b.n	800432a <HAL_RCCEx_GetPeriphCLKFreq+0xb66>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004310:	4b71      	ldr	r3, [pc, #452]	; (80044d8 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004318:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800431c:	d104      	bne.n	8004328 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
            frequency = HSI_VALUE;
 800431e:	4b6f      	ldr	r3, [pc, #444]	; (80044dc <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8004320:	61fb      	str	r3, [r7, #28]
          break;
 8004322:	e001      	b.n	8004328 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
          break;
 8004324:	bf00      	nop
 8004326:	e163      	b.n	80045f0 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004328:	bf00      	nop
        break;
 800432a:	e161      	b.n	80045f0 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800432c:	4b6a      	ldr	r3, [pc, #424]	; (80044d8 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 800432e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004332:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004336:	60fb      	str	r3, [r7, #12]
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800433e:	d013      	beq.n	8004368 <HAL_RCCEx_GetPeriphCLKFreq+0xba4>
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004346:	d819      	bhi.n	800437c <HAL_RCCEx_GetPeriphCLKFreq+0xbb8>
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d004      	beq.n	8004358 <HAL_RCCEx_GetPeriphCLKFreq+0xb94>
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004354:	d004      	beq.n	8004360 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>
          break;
 8004356:	e011      	b.n	800437c <HAL_RCCEx_GetPeriphCLKFreq+0xbb8>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004358:	f7fe fdba 	bl	8002ed0 <HAL_RCC_GetPCLK1Freq>
 800435c:	61f8      	str	r0, [r7, #28]
          break;
 800435e:	e010      	b.n	8004382 <HAL_RCCEx_GetPeriphCLKFreq+0xbbe>
          frequency = HAL_RCC_GetSysClockFreq();
 8004360:	f7fe fd20 	bl	8002da4 <HAL_RCC_GetSysClockFreq>
 8004364:	61f8      	str	r0, [r7, #28]
          break;
 8004366:	e00c      	b.n	8004382 <HAL_RCCEx_GetPeriphCLKFreq+0xbbe>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004368:	4b5b      	ldr	r3, [pc, #364]	; (80044d8 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004370:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004374:	d104      	bne.n	8004380 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
            frequency = HSI_VALUE;
 8004376:	4b59      	ldr	r3, [pc, #356]	; (80044dc <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8004378:	61fb      	str	r3, [r7, #28]
          break;
 800437a:	e001      	b.n	8004380 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
          break;
 800437c:	bf00      	nop
 800437e:	e137      	b.n	80045f0 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004380:	bf00      	nop
        break;
 8004382:	e135      	b.n	80045f0 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8004384:	4b54      	ldr	r3, [pc, #336]	; (80044d8 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8004386:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800438a:	f003 0303 	and.w	r3, r3, #3
 800438e:	60fb      	str	r3, [r7, #12]
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	2b02      	cmp	r3, #2
 8004394:	d011      	beq.n	80043ba <HAL_RCCEx_GetPeriphCLKFreq+0xbf6>
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	2b02      	cmp	r3, #2
 800439a:	d818      	bhi.n	80043ce <HAL_RCCEx_GetPeriphCLKFreq+0xc0a>
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d003      	beq.n	80043aa <HAL_RCCEx_GetPeriphCLKFreq+0xbe6>
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	2b01      	cmp	r3, #1
 80043a6:	d004      	beq.n	80043b2 <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
          break;
 80043a8:	e011      	b.n	80043ce <HAL_RCCEx_GetPeriphCLKFreq+0xc0a>
          frequency = HAL_RCC_GetPCLK1Freq();
 80043aa:	f7fe fd91 	bl	8002ed0 <HAL_RCC_GetPCLK1Freq>
 80043ae:	61f8      	str	r0, [r7, #28]
          break;
 80043b0:	e010      	b.n	80043d4 <HAL_RCCEx_GetPeriphCLKFreq+0xc10>
          frequency = HAL_RCC_GetSysClockFreq();
 80043b2:	f7fe fcf7 	bl	8002da4 <HAL_RCC_GetSysClockFreq>
 80043b6:	61f8      	str	r0, [r7, #28]
          break;
 80043b8:	e00c      	b.n	80043d4 <HAL_RCCEx_GetPeriphCLKFreq+0xc10>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80043ba:	4b47      	ldr	r3, [pc, #284]	; (80044d8 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043c6:	d104      	bne.n	80043d2 <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
            frequency = HSI_VALUE;
 80043c8:	4b44      	ldr	r3, [pc, #272]	; (80044dc <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80043ca:	61fb      	str	r3, [r7, #28]
          break;
 80043cc:	e001      	b.n	80043d2 <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
          break;
 80043ce:	bf00      	nop
 80043d0:	e10e      	b.n	80045f0 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80043d2:	bf00      	nop
        break;
 80043d4:	e10c      	b.n	80045f0 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 80043d6:	4b40      	ldr	r3, [pc, #256]	; (80044d8 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 80043d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043dc:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80043e0:	60fb      	str	r3, [r7, #12]
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80043e8:	d02c      	beq.n	8004444 <HAL_RCCEx_GetPeriphCLKFreq+0xc80>
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80043f0:	d833      	bhi.n	800445a <HAL_RCCEx_GetPeriphCLKFreq+0xc96>
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80043f8:	d01a      	beq.n	8004430 <HAL_RCCEx_GetPeriphCLKFreq+0xc6c>
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004400:	d82b      	bhi.n	800445a <HAL_RCCEx_GetPeriphCLKFreq+0xc96>
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d004      	beq.n	8004412 <HAL_RCCEx_GetPeriphCLKFreq+0xc4e>
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800440e:	d004      	beq.n	800441a <HAL_RCCEx_GetPeriphCLKFreq+0xc56>
          break;
 8004410:	e023      	b.n	800445a <HAL_RCCEx_GetPeriphCLKFreq+0xc96>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004412:	f7fe fd5d 	bl	8002ed0 <HAL_RCC_GetPCLK1Freq>
 8004416:	61f8      	str	r0, [r7, #28]
          break;
 8004418:	e026      	b.n	8004468 <HAL_RCCEx_GetPeriphCLKFreq+0xca4>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800441a:	4b2f      	ldr	r3, [pc, #188]	; (80044d8 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 800441c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004420:	f003 0302 	and.w	r3, r3, #2
 8004424:	2b02      	cmp	r3, #2
 8004426:	d11a      	bne.n	800445e <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
              frequency = LSI_VALUE;
 8004428:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800442c:	61fb      	str	r3, [r7, #28]
          break;
 800442e:	e016      	b.n	800445e <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004430:	4b29      	ldr	r3, [pc, #164]	; (80044d8 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004438:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800443c:	d111      	bne.n	8004462 <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
            frequency = HSI_VALUE;
 800443e:	4b27      	ldr	r3, [pc, #156]	; (80044dc <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8004440:	61fb      	str	r3, [r7, #28]
          break;
 8004442:	e00e      	b.n	8004462 <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004444:	4b24      	ldr	r3, [pc, #144]	; (80044d8 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8004446:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800444a:	f003 0302 	and.w	r3, r3, #2
 800444e:	2b02      	cmp	r3, #2
 8004450:	d109      	bne.n	8004466 <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
            frequency = LSE_VALUE;
 8004452:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004456:	61fb      	str	r3, [r7, #28]
          break;
 8004458:	e005      	b.n	8004466 <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
          break;
 800445a:	bf00      	nop
 800445c:	e0c8      	b.n	80045f0 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800445e:	bf00      	nop
 8004460:	e0c6      	b.n	80045f0 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004462:	bf00      	nop
 8004464:	e0c4      	b.n	80045f0 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004466:	bf00      	nop
        break;
 8004468:	e0c2      	b.n	80045f0 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800446a:	4b1b      	ldr	r3, [pc, #108]	; (80044d8 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 800446c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004470:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004474:	60fb      	str	r3, [r7, #12]
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800447c:	d030      	beq.n	80044e0 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004484:	d837      	bhi.n	80044f6 <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800448c:	d01a      	beq.n	80044c4 <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004494:	d82f      	bhi.n	80044f6 <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d004      	beq.n	80044a6 <HAL_RCCEx_GetPeriphCLKFreq+0xce2>
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80044a2:	d004      	beq.n	80044ae <HAL_RCCEx_GetPeriphCLKFreq+0xcea>
          break;
 80044a4:	e027      	b.n	80044f6 <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
          frequency = HAL_RCC_GetPCLK1Freq();
 80044a6:	f7fe fd13 	bl	8002ed0 <HAL_RCC_GetPCLK1Freq>
 80044aa:	61f8      	str	r0, [r7, #28]
          break;
 80044ac:	e02a      	b.n	8004504 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80044ae:	4b0a      	ldr	r3, [pc, #40]	; (80044d8 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 80044b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80044b4:	f003 0302 	and.w	r3, r3, #2
 80044b8:	2b02      	cmp	r3, #2
 80044ba:	d11e      	bne.n	80044fa <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
              frequency = LSI_VALUE;
 80044bc:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80044c0:	61fb      	str	r3, [r7, #28]
          break;
 80044c2:	e01a      	b.n	80044fa <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80044c4:	4b04      	ldr	r3, [pc, #16]	; (80044d8 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044d0:	d115      	bne.n	80044fe <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
            frequency = HSI_VALUE;
 80044d2:	4b02      	ldr	r3, [pc, #8]	; (80044dc <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80044d4:	61fb      	str	r3, [r7, #28]
          break;
 80044d6:	e012      	b.n	80044fe <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
 80044d8:	40021000 	.word	0x40021000
 80044dc:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80044e0:	4b46      	ldr	r3, [pc, #280]	; (80045fc <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 80044e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044e6:	f003 0302 	and.w	r3, r3, #2
 80044ea:	2b02      	cmp	r3, #2
 80044ec:	d109      	bne.n	8004502 <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
            frequency = LSE_VALUE;
 80044ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044f2:	61fb      	str	r3, [r7, #28]
          break;
 80044f4:	e005      	b.n	8004502 <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
          break;
 80044f6:	bf00      	nop
 80044f8:	e07a      	b.n	80045f0 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80044fa:	bf00      	nop
 80044fc:	e078      	b.n	80045f0 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80044fe:	bf00      	nop
 8004500:	e076      	b.n	80045f0 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004502:	bf00      	nop
        break;
 8004504:	e074      	b.n	80045f0 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8004506:	4b3d      	ldr	r3, [pc, #244]	; (80045fc <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8004508:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800450c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004510:	60fb      	str	r3, [r7, #12]
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004518:	d02c      	beq.n	8004574 <HAL_RCCEx_GetPeriphCLKFreq+0xdb0>
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004520:	d855      	bhi.n	80045ce <HAL_RCCEx_GetPeriphCLKFreq+0xe0a>
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d004      	beq.n	8004532 <HAL_RCCEx_GetPeriphCLKFreq+0xd6e>
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800452e:	d004      	beq.n	800453a <HAL_RCCEx_GetPeriphCLKFreq+0xd76>
          break;
 8004530:	e04d      	b.n	80045ce <HAL_RCCEx_GetPeriphCLKFreq+0xe0a>
          frequency = HAL_RCC_GetSysClockFreq();
 8004532:	f7fe fc37 	bl	8002da4 <HAL_RCC_GetSysClockFreq>
 8004536:	61f8      	str	r0, [r7, #28]
          break;
 8004538:	e04e      	b.n	80045d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe14>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800453a:	4b30      	ldr	r3, [pc, #192]	; (80045fc <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f003 0302 	and.w	r3, r3, #2
 8004542:	2b02      	cmp	r3, #2
 8004544:	d145      	bne.n	80045d2 <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8004546:	4b2d      	ldr	r3, [pc, #180]	; (80045fc <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f003 0308 	and.w	r3, r3, #8
 800454e:	2b00      	cmp	r3, #0
 8004550:	d005      	beq.n	800455e <HAL_RCCEx_GetPeriphCLKFreq+0xd9a>
 8004552:	4b2a      	ldr	r3, [pc, #168]	; (80045fc <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	091b      	lsrs	r3, r3, #4
 8004558:	f003 030f 	and.w	r3, r3, #15
 800455c:	e005      	b.n	800456a <HAL_RCCEx_GetPeriphCLKFreq+0xda6>
 800455e:	4b27      	ldr	r3, [pc, #156]	; (80045fc <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8004560:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004564:	0a1b      	lsrs	r3, r3, #8
 8004566:	f003 030f 	and.w	r3, r3, #15
 800456a:	4a25      	ldr	r2, [pc, #148]	; (8004600 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800456c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004570:	61fb      	str	r3, [r7, #28]
          break;
 8004572:	e02e      	b.n	80045d2 <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8004574:	4b21      	ldr	r3, [pc, #132]	; (80045fc <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800457c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004580:	d129      	bne.n	80045d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8004582:	4b1e      	ldr	r3, [pc, #120]	; (80045fc <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8004584:	68db      	ldr	r3, [r3, #12]
 8004586:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800458a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800458e:	d122      	bne.n	80045d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8004590:	4b1a      	ldr	r3, [pc, #104]	; (80045fc <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8004592:	68db      	ldr	r3, [r3, #12]
 8004594:	0a1b      	lsrs	r3, r3, #8
 8004596:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800459a:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800459c:	69bb      	ldr	r3, [r7, #24]
 800459e:	68ba      	ldr	r2, [r7, #8]
 80045a0:	fb03 f202 	mul.w	r2, r3, r2
 80045a4:	4b15      	ldr	r3, [pc, #84]	; (80045fc <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 80045a6:	68db      	ldr	r3, [r3, #12]
 80045a8:	091b      	lsrs	r3, r3, #4
 80045aa:	f003 030f 	and.w	r3, r3, #15
 80045ae:	3301      	adds	r3, #1
 80045b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80045b4:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 80045b6:	4b11      	ldr	r3, [pc, #68]	; (80045fc <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 80045b8:	68db      	ldr	r3, [r3, #12]
 80045ba:	0d5b      	lsrs	r3, r3, #21
 80045bc:	f003 0303 	and.w	r3, r3, #3
 80045c0:	3301      	adds	r3, #1
 80045c2:	005b      	lsls	r3, r3, #1
 80045c4:	69ba      	ldr	r2, [r7, #24]
 80045c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80045ca:	61fb      	str	r3, [r7, #28]
          break;
 80045cc:	e003      	b.n	80045d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
          break;
 80045ce:	bf00      	nop
 80045d0:	e00e      	b.n	80045f0 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80045d2:	bf00      	nop
 80045d4:	e00c      	b.n	80045f0 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80045d6:	bf00      	nop
        break;
 80045d8:	e00a      	b.n	80045f0 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 80045da:	bf00      	nop
 80045dc:	e008      	b.n	80045f0 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 80045de:	bf00      	nop
 80045e0:	e006      	b.n	80045f0 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 80045e2:	bf00      	nop
 80045e4:	e004      	b.n	80045f0 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 80045e6:	bf00      	nop
 80045e8:	e002      	b.n	80045f0 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 80045ea:	bf00      	nop
 80045ec:	e000      	b.n	80045f0 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 80045ee:	bf00      	nop
    }
  }

  return(frequency);
 80045f0:	69fb      	ldr	r3, [r7, #28]
}
 80045f2:	4618      	mov	r0, r3
 80045f4:	3720      	adds	r7, #32
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bd80      	pop	{r7, pc}
 80045fa:	bf00      	nop
 80045fc:	40021000 	.word	0x40021000
 8004600:	08007cd8 	.word	0x08007cd8

08004604 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b084      	sub	sp, #16
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
 800460c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800460e:	2300      	movs	r3, #0
 8004610:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004612:	4b72      	ldr	r3, [pc, #456]	; (80047dc <RCCEx_PLLSAI1_Config+0x1d8>)
 8004614:	68db      	ldr	r3, [r3, #12]
 8004616:	f003 0303 	and.w	r3, r3, #3
 800461a:	2b00      	cmp	r3, #0
 800461c:	d00e      	beq.n	800463c <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800461e:	4b6f      	ldr	r3, [pc, #444]	; (80047dc <RCCEx_PLLSAI1_Config+0x1d8>)
 8004620:	68db      	ldr	r3, [r3, #12]
 8004622:	f003 0203 	and.w	r2, r3, #3
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	429a      	cmp	r2, r3
 800462c:	d103      	bne.n	8004636 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
       ||
 8004632:	2b00      	cmp	r3, #0
 8004634:	d142      	bne.n	80046bc <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8004636:	2301      	movs	r3, #1
 8004638:	73fb      	strb	r3, [r7, #15]
 800463a:	e03f      	b.n	80046bc <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	2b03      	cmp	r3, #3
 8004642:	d018      	beq.n	8004676 <RCCEx_PLLSAI1_Config+0x72>
 8004644:	2b03      	cmp	r3, #3
 8004646:	d825      	bhi.n	8004694 <RCCEx_PLLSAI1_Config+0x90>
 8004648:	2b01      	cmp	r3, #1
 800464a:	d002      	beq.n	8004652 <RCCEx_PLLSAI1_Config+0x4e>
 800464c:	2b02      	cmp	r3, #2
 800464e:	d009      	beq.n	8004664 <RCCEx_PLLSAI1_Config+0x60>
 8004650:	e020      	b.n	8004694 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004652:	4b62      	ldr	r3, [pc, #392]	; (80047dc <RCCEx_PLLSAI1_Config+0x1d8>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f003 0302 	and.w	r3, r3, #2
 800465a:	2b00      	cmp	r3, #0
 800465c:	d11d      	bne.n	800469a <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 800465e:	2301      	movs	r3, #1
 8004660:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004662:	e01a      	b.n	800469a <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004664:	4b5d      	ldr	r3, [pc, #372]	; (80047dc <RCCEx_PLLSAI1_Config+0x1d8>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800466c:	2b00      	cmp	r3, #0
 800466e:	d116      	bne.n	800469e <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8004670:	2301      	movs	r3, #1
 8004672:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004674:	e013      	b.n	800469e <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004676:	4b59      	ldr	r3, [pc, #356]	; (80047dc <RCCEx_PLLSAI1_Config+0x1d8>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800467e:	2b00      	cmp	r3, #0
 8004680:	d10f      	bne.n	80046a2 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004682:	4b56      	ldr	r3, [pc, #344]	; (80047dc <RCCEx_PLLSAI1_Config+0x1d8>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800468a:	2b00      	cmp	r3, #0
 800468c:	d109      	bne.n	80046a2 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 800468e:	2301      	movs	r3, #1
 8004690:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004692:	e006      	b.n	80046a2 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8004694:	2301      	movs	r3, #1
 8004696:	73fb      	strb	r3, [r7, #15]
      break;
 8004698:	e004      	b.n	80046a4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800469a:	bf00      	nop
 800469c:	e002      	b.n	80046a4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800469e:	bf00      	nop
 80046a0:	e000      	b.n	80046a4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80046a2:	bf00      	nop
    }

    if(status == HAL_OK)
 80046a4:	7bfb      	ldrb	r3, [r7, #15]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d108      	bne.n	80046bc <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 80046aa:	4b4c      	ldr	r3, [pc, #304]	; (80047dc <RCCEx_PLLSAI1_Config+0x1d8>)
 80046ac:	68db      	ldr	r3, [r3, #12]
 80046ae:	f023 0203 	bic.w	r2, r3, #3
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4949      	ldr	r1, [pc, #292]	; (80047dc <RCCEx_PLLSAI1_Config+0x1d8>)
 80046b8:	4313      	orrs	r3, r2
 80046ba:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80046bc:	7bfb      	ldrb	r3, [r7, #15]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	f040 8086 	bne.w	80047d0 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80046c4:	4b45      	ldr	r3, [pc, #276]	; (80047dc <RCCEx_PLLSAI1_Config+0x1d8>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a44      	ldr	r2, [pc, #272]	; (80047dc <RCCEx_PLLSAI1_Config+0x1d8>)
 80046ca:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80046ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046d0:	f7fd f85e 	bl	8001790 <HAL_GetTick>
 80046d4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80046d6:	e009      	b.n	80046ec <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80046d8:	f7fd f85a 	bl	8001790 <HAL_GetTick>
 80046dc:	4602      	mov	r2, r0
 80046de:	68bb      	ldr	r3, [r7, #8]
 80046e0:	1ad3      	subs	r3, r2, r3
 80046e2:	2b02      	cmp	r3, #2
 80046e4:	d902      	bls.n	80046ec <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80046e6:	2303      	movs	r3, #3
 80046e8:	73fb      	strb	r3, [r7, #15]
        break;
 80046ea:	e005      	b.n	80046f8 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80046ec:	4b3b      	ldr	r3, [pc, #236]	; (80047dc <RCCEx_PLLSAI1_Config+0x1d8>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d1ef      	bne.n	80046d8 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80046f8:	7bfb      	ldrb	r3, [r7, #15]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d168      	bne.n	80047d0 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d113      	bne.n	800472c <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004704:	4b35      	ldr	r3, [pc, #212]	; (80047dc <RCCEx_PLLSAI1_Config+0x1d8>)
 8004706:	691a      	ldr	r2, [r3, #16]
 8004708:	4b35      	ldr	r3, [pc, #212]	; (80047e0 <RCCEx_PLLSAI1_Config+0x1dc>)
 800470a:	4013      	ands	r3, r2
 800470c:	687a      	ldr	r2, [r7, #4]
 800470e:	6892      	ldr	r2, [r2, #8]
 8004710:	0211      	lsls	r1, r2, #8
 8004712:	687a      	ldr	r2, [r7, #4]
 8004714:	68d2      	ldr	r2, [r2, #12]
 8004716:	06d2      	lsls	r2, r2, #27
 8004718:	4311      	orrs	r1, r2
 800471a:	687a      	ldr	r2, [r7, #4]
 800471c:	6852      	ldr	r2, [r2, #4]
 800471e:	3a01      	subs	r2, #1
 8004720:	0112      	lsls	r2, r2, #4
 8004722:	430a      	orrs	r2, r1
 8004724:	492d      	ldr	r1, [pc, #180]	; (80047dc <RCCEx_PLLSAI1_Config+0x1d8>)
 8004726:	4313      	orrs	r3, r2
 8004728:	610b      	str	r3, [r1, #16]
 800472a:	e02d      	b.n	8004788 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	2b01      	cmp	r3, #1
 8004730:	d115      	bne.n	800475e <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004732:	4b2a      	ldr	r3, [pc, #168]	; (80047dc <RCCEx_PLLSAI1_Config+0x1d8>)
 8004734:	691a      	ldr	r2, [r3, #16]
 8004736:	4b2b      	ldr	r3, [pc, #172]	; (80047e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004738:	4013      	ands	r3, r2
 800473a:	687a      	ldr	r2, [r7, #4]
 800473c:	6892      	ldr	r2, [r2, #8]
 800473e:	0211      	lsls	r1, r2, #8
 8004740:	687a      	ldr	r2, [r7, #4]
 8004742:	6912      	ldr	r2, [r2, #16]
 8004744:	0852      	lsrs	r2, r2, #1
 8004746:	3a01      	subs	r2, #1
 8004748:	0552      	lsls	r2, r2, #21
 800474a:	4311      	orrs	r1, r2
 800474c:	687a      	ldr	r2, [r7, #4]
 800474e:	6852      	ldr	r2, [r2, #4]
 8004750:	3a01      	subs	r2, #1
 8004752:	0112      	lsls	r2, r2, #4
 8004754:	430a      	orrs	r2, r1
 8004756:	4921      	ldr	r1, [pc, #132]	; (80047dc <RCCEx_PLLSAI1_Config+0x1d8>)
 8004758:	4313      	orrs	r3, r2
 800475a:	610b      	str	r3, [r1, #16]
 800475c:	e014      	b.n	8004788 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800475e:	4b1f      	ldr	r3, [pc, #124]	; (80047dc <RCCEx_PLLSAI1_Config+0x1d8>)
 8004760:	691a      	ldr	r2, [r3, #16]
 8004762:	4b21      	ldr	r3, [pc, #132]	; (80047e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004764:	4013      	ands	r3, r2
 8004766:	687a      	ldr	r2, [r7, #4]
 8004768:	6892      	ldr	r2, [r2, #8]
 800476a:	0211      	lsls	r1, r2, #8
 800476c:	687a      	ldr	r2, [r7, #4]
 800476e:	6952      	ldr	r2, [r2, #20]
 8004770:	0852      	lsrs	r2, r2, #1
 8004772:	3a01      	subs	r2, #1
 8004774:	0652      	lsls	r2, r2, #25
 8004776:	4311      	orrs	r1, r2
 8004778:	687a      	ldr	r2, [r7, #4]
 800477a:	6852      	ldr	r2, [r2, #4]
 800477c:	3a01      	subs	r2, #1
 800477e:	0112      	lsls	r2, r2, #4
 8004780:	430a      	orrs	r2, r1
 8004782:	4916      	ldr	r1, [pc, #88]	; (80047dc <RCCEx_PLLSAI1_Config+0x1d8>)
 8004784:	4313      	orrs	r3, r2
 8004786:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004788:	4b14      	ldr	r3, [pc, #80]	; (80047dc <RCCEx_PLLSAI1_Config+0x1d8>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a13      	ldr	r2, [pc, #76]	; (80047dc <RCCEx_PLLSAI1_Config+0x1d8>)
 800478e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004792:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004794:	f7fc fffc 	bl	8001790 <HAL_GetTick>
 8004798:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800479a:	e009      	b.n	80047b0 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800479c:	f7fc fff8 	bl	8001790 <HAL_GetTick>
 80047a0:	4602      	mov	r2, r0
 80047a2:	68bb      	ldr	r3, [r7, #8]
 80047a4:	1ad3      	subs	r3, r2, r3
 80047a6:	2b02      	cmp	r3, #2
 80047a8:	d902      	bls.n	80047b0 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80047aa:	2303      	movs	r3, #3
 80047ac:	73fb      	strb	r3, [r7, #15]
          break;
 80047ae:	e005      	b.n	80047bc <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80047b0:	4b0a      	ldr	r3, [pc, #40]	; (80047dc <RCCEx_PLLSAI1_Config+0x1d8>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d0ef      	beq.n	800479c <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80047bc:	7bfb      	ldrb	r3, [r7, #15]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d106      	bne.n	80047d0 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80047c2:	4b06      	ldr	r3, [pc, #24]	; (80047dc <RCCEx_PLLSAI1_Config+0x1d8>)
 80047c4:	691a      	ldr	r2, [r3, #16]
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	699b      	ldr	r3, [r3, #24]
 80047ca:	4904      	ldr	r1, [pc, #16]	; (80047dc <RCCEx_PLLSAI1_Config+0x1d8>)
 80047cc:	4313      	orrs	r3, r2
 80047ce:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80047d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80047d2:	4618      	mov	r0, r3
 80047d4:	3710      	adds	r7, #16
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bd80      	pop	{r7, pc}
 80047da:	bf00      	nop
 80047dc:	40021000 	.word	0x40021000
 80047e0:	07ff800f 	.word	0x07ff800f
 80047e4:	ff9f800f 	.word	0xff9f800f
 80047e8:	f9ff800f 	.word	0xf9ff800f

080047ec <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b084      	sub	sp, #16
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
 80047f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80047f6:	2300      	movs	r3, #0
 80047f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80047fa:	4b72      	ldr	r3, [pc, #456]	; (80049c4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80047fc:	68db      	ldr	r3, [r3, #12]
 80047fe:	f003 0303 	and.w	r3, r3, #3
 8004802:	2b00      	cmp	r3, #0
 8004804:	d00e      	beq.n	8004824 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004806:	4b6f      	ldr	r3, [pc, #444]	; (80049c4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004808:	68db      	ldr	r3, [r3, #12]
 800480a:	f003 0203 	and.w	r2, r3, #3
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	429a      	cmp	r2, r3
 8004814:	d103      	bne.n	800481e <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
       ||
 800481a:	2b00      	cmp	r3, #0
 800481c:	d142      	bne.n	80048a4 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 800481e:	2301      	movs	r3, #1
 8004820:	73fb      	strb	r3, [r7, #15]
 8004822:	e03f      	b.n	80048a4 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	2b03      	cmp	r3, #3
 800482a:	d018      	beq.n	800485e <RCCEx_PLLSAI2_Config+0x72>
 800482c:	2b03      	cmp	r3, #3
 800482e:	d825      	bhi.n	800487c <RCCEx_PLLSAI2_Config+0x90>
 8004830:	2b01      	cmp	r3, #1
 8004832:	d002      	beq.n	800483a <RCCEx_PLLSAI2_Config+0x4e>
 8004834:	2b02      	cmp	r3, #2
 8004836:	d009      	beq.n	800484c <RCCEx_PLLSAI2_Config+0x60>
 8004838:	e020      	b.n	800487c <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800483a:	4b62      	ldr	r3, [pc, #392]	; (80049c4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f003 0302 	and.w	r3, r3, #2
 8004842:	2b00      	cmp	r3, #0
 8004844:	d11d      	bne.n	8004882 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8004846:	2301      	movs	r3, #1
 8004848:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800484a:	e01a      	b.n	8004882 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800484c:	4b5d      	ldr	r3, [pc, #372]	; (80049c4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004854:	2b00      	cmp	r3, #0
 8004856:	d116      	bne.n	8004886 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8004858:	2301      	movs	r3, #1
 800485a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800485c:	e013      	b.n	8004886 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800485e:	4b59      	ldr	r3, [pc, #356]	; (80049c4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004866:	2b00      	cmp	r3, #0
 8004868:	d10f      	bne.n	800488a <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800486a:	4b56      	ldr	r3, [pc, #344]	; (80049c4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004872:	2b00      	cmp	r3, #0
 8004874:	d109      	bne.n	800488a <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8004876:	2301      	movs	r3, #1
 8004878:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800487a:	e006      	b.n	800488a <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 800487c:	2301      	movs	r3, #1
 800487e:	73fb      	strb	r3, [r7, #15]
      break;
 8004880:	e004      	b.n	800488c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004882:	bf00      	nop
 8004884:	e002      	b.n	800488c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004886:	bf00      	nop
 8004888:	e000      	b.n	800488c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800488a:	bf00      	nop
    }

    if(status == HAL_OK)
 800488c:	7bfb      	ldrb	r3, [r7, #15]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d108      	bne.n	80048a4 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8004892:	4b4c      	ldr	r3, [pc, #304]	; (80049c4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004894:	68db      	ldr	r3, [r3, #12]
 8004896:	f023 0203 	bic.w	r2, r3, #3
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4949      	ldr	r1, [pc, #292]	; (80049c4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80048a0:	4313      	orrs	r3, r2
 80048a2:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80048a4:	7bfb      	ldrb	r3, [r7, #15]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	f040 8086 	bne.w	80049b8 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80048ac:	4b45      	ldr	r3, [pc, #276]	; (80049c4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4a44      	ldr	r2, [pc, #272]	; (80049c4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80048b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048b8:	f7fc ff6a 	bl	8001790 <HAL_GetTick>
 80048bc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80048be:	e009      	b.n	80048d4 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80048c0:	f7fc ff66 	bl	8001790 <HAL_GetTick>
 80048c4:	4602      	mov	r2, r0
 80048c6:	68bb      	ldr	r3, [r7, #8]
 80048c8:	1ad3      	subs	r3, r2, r3
 80048ca:	2b02      	cmp	r3, #2
 80048cc:	d902      	bls.n	80048d4 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80048ce:	2303      	movs	r3, #3
 80048d0:	73fb      	strb	r3, [r7, #15]
        break;
 80048d2:	e005      	b.n	80048e0 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80048d4:	4b3b      	ldr	r3, [pc, #236]	; (80049c4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d1ef      	bne.n	80048c0 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80048e0:	7bfb      	ldrb	r3, [r7, #15]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d168      	bne.n	80049b8 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d113      	bne.n	8004914 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80048ec:	4b35      	ldr	r3, [pc, #212]	; (80049c4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80048ee:	695a      	ldr	r2, [r3, #20]
 80048f0:	4b35      	ldr	r3, [pc, #212]	; (80049c8 <RCCEx_PLLSAI2_Config+0x1dc>)
 80048f2:	4013      	ands	r3, r2
 80048f4:	687a      	ldr	r2, [r7, #4]
 80048f6:	6892      	ldr	r2, [r2, #8]
 80048f8:	0211      	lsls	r1, r2, #8
 80048fa:	687a      	ldr	r2, [r7, #4]
 80048fc:	68d2      	ldr	r2, [r2, #12]
 80048fe:	06d2      	lsls	r2, r2, #27
 8004900:	4311      	orrs	r1, r2
 8004902:	687a      	ldr	r2, [r7, #4]
 8004904:	6852      	ldr	r2, [r2, #4]
 8004906:	3a01      	subs	r2, #1
 8004908:	0112      	lsls	r2, r2, #4
 800490a:	430a      	orrs	r2, r1
 800490c:	492d      	ldr	r1, [pc, #180]	; (80049c4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800490e:	4313      	orrs	r3, r2
 8004910:	614b      	str	r3, [r1, #20]
 8004912:	e02d      	b.n	8004970 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	2b01      	cmp	r3, #1
 8004918:	d115      	bne.n	8004946 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800491a:	4b2a      	ldr	r3, [pc, #168]	; (80049c4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800491c:	695a      	ldr	r2, [r3, #20]
 800491e:	4b2b      	ldr	r3, [pc, #172]	; (80049cc <RCCEx_PLLSAI2_Config+0x1e0>)
 8004920:	4013      	ands	r3, r2
 8004922:	687a      	ldr	r2, [r7, #4]
 8004924:	6892      	ldr	r2, [r2, #8]
 8004926:	0211      	lsls	r1, r2, #8
 8004928:	687a      	ldr	r2, [r7, #4]
 800492a:	6912      	ldr	r2, [r2, #16]
 800492c:	0852      	lsrs	r2, r2, #1
 800492e:	3a01      	subs	r2, #1
 8004930:	0552      	lsls	r2, r2, #21
 8004932:	4311      	orrs	r1, r2
 8004934:	687a      	ldr	r2, [r7, #4]
 8004936:	6852      	ldr	r2, [r2, #4]
 8004938:	3a01      	subs	r2, #1
 800493a:	0112      	lsls	r2, r2, #4
 800493c:	430a      	orrs	r2, r1
 800493e:	4921      	ldr	r1, [pc, #132]	; (80049c4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004940:	4313      	orrs	r3, r2
 8004942:	614b      	str	r3, [r1, #20]
 8004944:	e014      	b.n	8004970 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004946:	4b1f      	ldr	r3, [pc, #124]	; (80049c4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004948:	695a      	ldr	r2, [r3, #20]
 800494a:	4b21      	ldr	r3, [pc, #132]	; (80049d0 <RCCEx_PLLSAI2_Config+0x1e4>)
 800494c:	4013      	ands	r3, r2
 800494e:	687a      	ldr	r2, [r7, #4]
 8004950:	6892      	ldr	r2, [r2, #8]
 8004952:	0211      	lsls	r1, r2, #8
 8004954:	687a      	ldr	r2, [r7, #4]
 8004956:	6952      	ldr	r2, [r2, #20]
 8004958:	0852      	lsrs	r2, r2, #1
 800495a:	3a01      	subs	r2, #1
 800495c:	0652      	lsls	r2, r2, #25
 800495e:	4311      	orrs	r1, r2
 8004960:	687a      	ldr	r2, [r7, #4]
 8004962:	6852      	ldr	r2, [r2, #4]
 8004964:	3a01      	subs	r2, #1
 8004966:	0112      	lsls	r2, r2, #4
 8004968:	430a      	orrs	r2, r1
 800496a:	4916      	ldr	r1, [pc, #88]	; (80049c4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800496c:	4313      	orrs	r3, r2
 800496e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004970:	4b14      	ldr	r3, [pc, #80]	; (80049c4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a13      	ldr	r2, [pc, #76]	; (80049c4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004976:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800497a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800497c:	f7fc ff08 	bl	8001790 <HAL_GetTick>
 8004980:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004982:	e009      	b.n	8004998 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004984:	f7fc ff04 	bl	8001790 <HAL_GetTick>
 8004988:	4602      	mov	r2, r0
 800498a:	68bb      	ldr	r3, [r7, #8]
 800498c:	1ad3      	subs	r3, r2, r3
 800498e:	2b02      	cmp	r3, #2
 8004990:	d902      	bls.n	8004998 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8004992:	2303      	movs	r3, #3
 8004994:	73fb      	strb	r3, [r7, #15]
          break;
 8004996:	e005      	b.n	80049a4 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004998:	4b0a      	ldr	r3, [pc, #40]	; (80049c4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d0ef      	beq.n	8004984 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80049a4:	7bfb      	ldrb	r3, [r7, #15]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d106      	bne.n	80049b8 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80049aa:	4b06      	ldr	r3, [pc, #24]	; (80049c4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80049ac:	695a      	ldr	r2, [r3, #20]
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	699b      	ldr	r3, [r3, #24]
 80049b2:	4904      	ldr	r1, [pc, #16]	; (80049c4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80049b4:	4313      	orrs	r3, r2
 80049b6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80049b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80049ba:	4618      	mov	r0, r3
 80049bc:	3710      	adds	r7, #16
 80049be:	46bd      	mov	sp, r7
 80049c0:	bd80      	pop	{r7, pc}
 80049c2:	bf00      	nop
 80049c4:	40021000 	.word	0x40021000
 80049c8:	07ff800f 	.word	0x07ff800f
 80049cc:	ff9f800f 	.word	0xff9f800f
 80049d0:	f9ff800f 	.word	0xf9ff800f

080049d4 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 80049d4:	b480      	push	{r7}
 80049d6:	b089      	sub	sp, #36	; 0x24
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
 80049dc:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 80049de:	2300      	movs	r3, #0
 80049e0:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 80049e2:	2300      	movs	r3, #0
 80049e4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 80049e6:	2300      	movs	r3, #0
 80049e8:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049f0:	d10b      	bne.n	8004a0a <RCCEx_GetSAIxPeriphCLKFreq+0x36>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 80049f2:	4b7e      	ldr	r3, [pc, #504]	; (8004bec <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80049f4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80049f8:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 80049fc:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 80049fe:	69bb      	ldr	r3, [r7, #24]
 8004a00:	2b60      	cmp	r3, #96	; 0x60
 8004a02:	d112      	bne.n	8004a2a <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8004a04:	4b7a      	ldr	r3, [pc, #488]	; (8004bf0 <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 8004a06:	61fb      	str	r3, [r7, #28]
 8004a08:	e00f      	b.n	8004a2a <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a10:	d10b      	bne.n	8004a2a <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8004a12:	4b76      	ldr	r3, [pc, #472]	; (8004bec <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004a14:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004a18:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004a1c:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 8004a1e:	69bb      	ldr	r3, [r7, #24]
 8004a20:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a24:	d101      	bne.n	8004a2a <RCCEx_GetSAIxPeriphCLKFreq+0x56>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 8004a26:	4b72      	ldr	r3, [pc, #456]	; (8004bf0 <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 8004a28:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 8004a2a:	69fb      	ldr	r3, [r7, #28]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	f040 80d6 	bne.w	8004bde <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
  {
    pllvco = InputFrequency;
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 8004a36:	69bb      	ldr	r3, [r7, #24]
 8004a38:	2b40      	cmp	r3, #64	; 0x40
 8004a3a:	d003      	beq.n	8004a44 <RCCEx_GetSAIxPeriphCLKFreq+0x70>
 8004a3c:	69bb      	ldr	r3, [r7, #24]
 8004a3e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a42:	d13b      	bne.n	8004abc <RCCEx_GetSAIxPeriphCLKFreq+0xe8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8004a44:	4b69      	ldr	r3, [pc, #420]	; (8004bec <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a4c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004a50:	f040 80c4 	bne.w	8004bdc <RCCEx_GetSAIxPeriphCLKFreq+0x208>
 8004a54:	4b65      	ldr	r3, [pc, #404]	; (8004bec <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004a56:	68db      	ldr	r3, [r3, #12]
 8004a58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	f000 80bd 	beq.w	8004bdc <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004a62:	4b62      	ldr	r3, [pc, #392]	; (8004bec <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004a64:	68db      	ldr	r3, [r3, #12]
 8004a66:	091b      	lsrs	r3, r3, #4
 8004a68:	f003 030f 	and.w	r3, r3, #15
 8004a6c:	3301      	adds	r3, #1
 8004a6e:	693a      	ldr	r2, [r7, #16]
 8004a70:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a74:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8004a76:	4b5d      	ldr	r3, [pc, #372]	; (8004bec <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004a78:	68db      	ldr	r3, [r3, #12]
 8004a7a:	0a1b      	lsrs	r3, r3, #8
 8004a7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a80:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 8004a82:	4b5a      	ldr	r3, [pc, #360]	; (8004bec <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004a84:	68db      	ldr	r3, [r3, #12]
 8004a86:	0edb      	lsrs	r3, r3, #27
 8004a88:	f003 031f 	and.w	r3, r3, #31
 8004a8c:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8004a8e:	697b      	ldr	r3, [r7, #20]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d10a      	bne.n	8004aaa <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8004a94:	4b55      	ldr	r3, [pc, #340]	; (8004bec <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004a96:	68db      	ldr	r3, [r3, #12]
 8004a98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d002      	beq.n	8004aa6 <RCCEx_GetSAIxPeriphCLKFreq+0xd2>
          {
            pllp = 17U;
 8004aa0:	2311      	movs	r3, #17
 8004aa2:	617b      	str	r3, [r7, #20]
 8004aa4:	e001      	b.n	8004aaa <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
          }
          else
          {
            pllp = 7U;
 8004aa6:	2307      	movs	r3, #7
 8004aa8:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8004aaa:	693b      	ldr	r3, [r7, #16]
 8004aac:	68fa      	ldr	r2, [r7, #12]
 8004aae:	fb03 f202 	mul.w	r2, r3, r2
 8004ab2:	697b      	ldr	r3, [r7, #20]
 8004ab4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ab8:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8004aba:	e08f      	b.n	8004bdc <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 8004abc:	69bb      	ldr	r3, [r7, #24]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d13a      	bne.n	8004b38 <RCCEx_GetSAIxPeriphCLKFreq+0x164>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 8004ac2:	4b4a      	ldr	r3, [pc, #296]	; (8004bec <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004aca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ace:	f040 8086 	bne.w	8004bde <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 8004ad2:	4b46      	ldr	r3, [pc, #280]	; (8004bec <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004ad4:	691b      	ldr	r3, [r3, #16]
 8004ad6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d07f      	beq.n	8004bde <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8004ade:	4b43      	ldr	r3, [pc, #268]	; (8004bec <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004ae0:	691b      	ldr	r3, [r3, #16]
 8004ae2:	091b      	lsrs	r3, r3, #4
 8004ae4:	f003 030f 	and.w	r3, r3, #15
 8004ae8:	3301      	adds	r3, #1
 8004aea:	693a      	ldr	r2, [r7, #16]
 8004aec:	fbb2 f3f3 	udiv	r3, r2, r3
 8004af0:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8004af2:	4b3e      	ldr	r3, [pc, #248]	; (8004bec <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004af4:	691b      	ldr	r3, [r3, #16]
 8004af6:	0a1b      	lsrs	r3, r3, #8
 8004af8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004afc:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 8004afe:	4b3b      	ldr	r3, [pc, #236]	; (8004bec <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004b00:	691b      	ldr	r3, [r3, #16]
 8004b02:	0edb      	lsrs	r3, r3, #27
 8004b04:	f003 031f 	and.w	r3, r3, #31
 8004b08:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8004b0a:	697b      	ldr	r3, [r7, #20]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d10a      	bne.n	8004b26 <RCCEx_GetSAIxPeriphCLKFreq+0x152>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 8004b10:	4b36      	ldr	r3, [pc, #216]	; (8004bec <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004b12:	691b      	ldr	r3, [r3, #16]
 8004b14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d002      	beq.n	8004b22 <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
          {
            pllp = 17U;
 8004b1c:	2311      	movs	r3, #17
 8004b1e:	617b      	str	r3, [r7, #20]
 8004b20:	e001      	b.n	8004b26 <RCCEx_GetSAIxPeriphCLKFreq+0x152>
          }
          else
          {
            pllp = 7U;
 8004b22:	2307      	movs	r3, #7
 8004b24:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8004b26:	693b      	ldr	r3, [r7, #16]
 8004b28:	68fa      	ldr	r2, [r7, #12]
 8004b2a:	fb03 f202 	mul.w	r2, r3, r2
 8004b2e:	697b      	ldr	r3, [r7, #20]
 8004b30:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b34:	61fb      	str	r3, [r7, #28]
 8004b36:	e052      	b.n	8004bde <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      }
    }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    else if((srcclk == RCC_SAI1CLKSOURCE_HSI) || (srcclk == RCC_SAI2CLKSOURCE_HSI))
 8004b38:	69bb      	ldr	r3, [r7, #24]
 8004b3a:	2b80      	cmp	r3, #128	; 0x80
 8004b3c:	d003      	beq.n	8004b46 <RCCEx_GetSAIxPeriphCLKFreq+0x172>
 8004b3e:	69bb      	ldr	r3, [r7, #24]
 8004b40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b44:	d109      	bne.n	8004b5a <RCCEx_GetSAIxPeriphCLKFreq+0x186>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004b46:	4b29      	ldr	r3, [pc, #164]	; (8004bec <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b52:	d144      	bne.n	8004bde <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
        frequency = HSI_VALUE;
 8004b54:	4b27      	ldr	r3, [pc, #156]	; (8004bf4 <RCCEx_GetSAIxPeriphCLKFreq+0x220>)
 8004b56:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004b58:	e041      	b.n	8004bde <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 8004b5a:	69bb      	ldr	r3, [r7, #24]
 8004b5c:	2b20      	cmp	r3, #32
 8004b5e:	d003      	beq.n	8004b68 <RCCEx_GetSAIxPeriphCLKFreq+0x194>
 8004b60:	69bb      	ldr	r3, [r7, #24]
 8004b62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b66:	d13a      	bne.n	8004bde <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 8004b68:	4b20      	ldr	r3, [pc, #128]	; (8004bec <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004b70:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b74:	d133      	bne.n	8004bde <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 8004b76:	4b1d      	ldr	r3, [pc, #116]	; (8004bec <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004b78:	695b      	ldr	r3, [r3, #20]
 8004b7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d02d      	beq.n	8004bde <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
 8004b82:	4b1a      	ldr	r3, [pc, #104]	; (8004bec <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004b84:	695b      	ldr	r3, [r3, #20]
 8004b86:	091b      	lsrs	r3, r3, #4
 8004b88:	f003 030f 	and.w	r3, r3, #15
 8004b8c:	3301      	adds	r3, #1
 8004b8e:	693a      	ldr	r2, [r7, #16]
 8004b90:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b94:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8004b96:	4b15      	ldr	r3, [pc, #84]	; (8004bec <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004b98:	695b      	ldr	r3, [r3, #20]
 8004b9a:	0a1b      	lsrs	r3, r3, #8
 8004b9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ba0:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
 8004ba2:	4b12      	ldr	r3, [pc, #72]	; (8004bec <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004ba4:	695b      	ldr	r3, [r3, #20]
 8004ba6:	0edb      	lsrs	r3, r3, #27
 8004ba8:	f003 031f 	and.w	r3, r3, #31
 8004bac:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8004bae:	697b      	ldr	r3, [r7, #20]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d10a      	bne.n	8004bca <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 8004bb4:	4b0d      	ldr	r3, [pc, #52]	; (8004bec <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004bb6:	695b      	ldr	r3, [r3, #20]
 8004bb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d002      	beq.n	8004bc6 <RCCEx_GetSAIxPeriphCLKFreq+0x1f2>
          {
            pllp = 17U;
 8004bc0:	2311      	movs	r3, #17
 8004bc2:	617b      	str	r3, [r7, #20]
 8004bc4:	e001      	b.n	8004bca <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
          }
          else
          {
            pllp = 7U;
 8004bc6:	2307      	movs	r3, #7
 8004bc8:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8004bca:	693b      	ldr	r3, [r7, #16]
 8004bcc:	68fa      	ldr	r2, [r7, #12]
 8004bce:	fb03 f202 	mul.w	r2, r3, r2
 8004bd2:	697b      	ldr	r3, [r7, #20]
 8004bd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bd8:	61fb      	str	r3, [r7, #28]
 8004bda:	e000      	b.n	8004bde <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8004bdc:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 8004bde:	69fb      	ldr	r3, [r7, #28]
}
 8004be0:	4618      	mov	r0, r3
 8004be2:	3724      	adds	r7, #36	; 0x24
 8004be4:	46bd      	mov	sp, r7
 8004be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bea:	4770      	bx	lr
 8004bec:	40021000 	.word	0x40021000
 8004bf0:	001fff68 	.word	0x001fff68
 8004bf4:	00f42400 	.word	0x00f42400

08004bf8 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b08a      	sub	sp, #40	; 0x28
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
#endif /* SAI2 */
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d101      	bne.n	8004c0a <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 8004c06:	2301      	movs	r3, #1
 8004c08:	e1c7      	b.n	8004f9a <HAL_SAI_Init+0x3a2>

#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004c10:	2b01      	cmp	r3, #1
 8004c12:	d10e      	bne.n	8004c32 <HAL_SAI_Init+0x3a>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 sub-block A, in master RX mode with free protocol */
    if ((hsai->Instance != SAI1_Block_A) ||
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4a81      	ldr	r2, [pc, #516]	; (8004e20 <HAL_SAI_Init+0x228>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d107      	bne.n	8004c2e <HAL_SAI_Init+0x36>
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	685b      	ldr	r3, [r3, #4]
    if ((hsai->Instance != SAI1_Block_A) ||
 8004c22:	2b01      	cmp	r3, #1
 8004c24:	d103      	bne.n	8004c2e <HAL_SAI_Init+0x36>
        (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d001      	beq.n	8004c32 <HAL_SAI_Init+0x3a>
    {
      return HAL_ERROR;
 8004c2e:	2301      	movs	r3, #1
 8004c30:	e1b3      	b.n	8004f9a <HAL_SAI_Init+0x3a2>
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  if (hsai->State == HAL_SAI_STATE_RESET)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 8004c38:	b2db      	uxtb	r3, r3
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d106      	bne.n	8004c4c <HAL_SAI_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2200      	movs	r2, #0
 8004c42:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8004c46:	6878      	ldr	r0, [r7, #4]
 8004c48:	f7fc fc58 	bl	80014fc <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 8004c4c:	6878      	ldr	r0, [r7, #4]
 8004c4e:	f000 f9b1 	bl	8004fb4 <SAI_Disable>
 8004c52:	4603      	mov	r3, r0
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d001      	beq.n	8004c5c <HAL_SAI_Init+0x64>
  {
    return HAL_ERROR;
 8004c58:	2301      	movs	r3, #1
 8004c5a:	e19e      	b.n	8004f9a <HAL_SAI_Init+0x3a2>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2202      	movs	r2, #2
 8004c60:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
#if defined(SAI2)
  switch (hsai->Init.SynchroExt)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	68db      	ldr	r3, [r3, #12]
 8004c68:	2b02      	cmp	r3, #2
 8004c6a:	d00c      	beq.n	8004c86 <HAL_SAI_Init+0x8e>
 8004c6c:	2b02      	cmp	r3, #2
 8004c6e:	d80d      	bhi.n	8004c8c <HAL_SAI_Init+0x94>
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d002      	beq.n	8004c7a <HAL_SAI_Init+0x82>
 8004c74:	2b01      	cmp	r3, #1
 8004c76:	d003      	beq.n	8004c80 <HAL_SAI_Init+0x88>
 8004c78:	e008      	b.n	8004c8c <HAL_SAI_Init+0x94>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8004c7e:	e008      	b.n	8004c92 <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8004c80:	2310      	movs	r3, #16
 8004c82:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8004c84:	e005      	b.n	8004c92 <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8004c86:	2320      	movs	r3, #32
 8004c88:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8004c8a:	e002      	b.n	8004c92 <HAL_SAI_Init+0x9a>
    default :
      tmpregisterGCR = 0;
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8004c90:	bf00      	nop
  }
#endif /* SAI2 */

  switch (hsai->Init.Synchro)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	689b      	ldr	r3, [r3, #8]
 8004c96:	2b03      	cmp	r3, #3
 8004c98:	d81d      	bhi.n	8004cd6 <HAL_SAI_Init+0xde>
 8004c9a:	a201      	add	r2, pc, #4	; (adr r2, 8004ca0 <HAL_SAI_Init+0xa8>)
 8004c9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ca0:	08004cb1 	.word	0x08004cb1
 8004ca4:	08004cb7 	.word	0x08004cb7
 8004ca8:	08004cbf 	.word	0x08004cbf
 8004cac:	08004cc7 	.word	0x08004cc7
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	61fb      	str	r3, [r7, #28]
      break;
 8004cb4:	e012      	b.n	8004cdc <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8004cb6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004cba:	61fb      	str	r3, [r7, #28]
      break;
 8004cbc:	e00e      	b.n	8004cdc <HAL_SAI_Init+0xe4>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8004cbe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004cc2:	61fb      	str	r3, [r7, #28]
      break;
 8004cc4:	e00a      	b.n	8004cdc <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8004cc6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004cca:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8004ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cce:	f043 0301 	orr.w	r3, r3, #1
 8004cd2:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8004cd4:	e002      	b.n	8004cdc <HAL_SAI_Init+0xe4>
#endif /* SAI2 */
    default :
      syncen_bits = 0;
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	61fb      	str	r3, [r7, #28]
      break;
 8004cda:	bf00      	nop
  }

#if defined(SAI2)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4a4f      	ldr	r2, [pc, #316]	; (8004e20 <HAL_SAI_Init+0x228>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d004      	beq.n	8004cf0 <HAL_SAI_Init+0xf8>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4a4e      	ldr	r2, [pc, #312]	; (8004e24 <HAL_SAI_Init+0x22c>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d103      	bne.n	8004cf8 <HAL_SAI_Init+0x100>
  {
    SAI1->GCR = tmpregisterGCR;
 8004cf0:	4a4d      	ldr	r2, [pc, #308]	; (8004e28 <HAL_SAI_Init+0x230>)
 8004cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cf4:	6013      	str	r3, [r2, #0]
 8004cf6:	e002      	b.n	8004cfe <HAL_SAI_Init+0x106>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8004cf8:	4a4c      	ldr	r2, [pc, #304]	; (8004e2c <HAL_SAI_Init+0x234>)
 8004cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cfc:	6013      	str	r3, [r2, #0]
  }
#else
  SAI1->GCR = 0;
#endif /* SAI2 */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	69db      	ldr	r3, [r3, #28]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d073      	beq.n	8004dee <HAL_SAI_Init+0x1f6>
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4a45      	ldr	r2, [pc, #276]	; (8004e20 <HAL_SAI_Init+0x228>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d004      	beq.n	8004d1a <HAL_SAI_Init+0x122>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4a43      	ldr	r2, [pc, #268]	; (8004e24 <HAL_SAI_Init+0x22c>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d105      	bne.n	8004d26 <HAL_SAI_Init+0x12e>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8004d1a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004d1e:	f7fe fd51 	bl	80037c4 <HAL_RCCEx_GetPeriphCLKFreq>
 8004d22:	61b8      	str	r0, [r7, #24]
 8004d24:	e004      	b.n	8004d30 <HAL_SAI_Init+0x138>
    }
    else
    {
      /* SAI2_Block_A or SAI2_Block_B */
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8004d26:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8004d2a:	f7fe fd4b 	bl	80037c4 <HAL_RCCEx_GetPeriphCLKFreq>
 8004d2e:	61b8      	str	r0, [r7, #24]
    /* Configure Master Clock Divider using the following formula :
       - If NOMCK = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NOMCK = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	695b      	ldr	r3, [r3, #20]
 8004d34:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004d38:	d120      	bne.n	8004d7c <HAL_SAI_Init+0x184>
    {
      /* NOMCK = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d3e:	2b04      	cmp	r3, #4
 8004d40:	d102      	bne.n	8004d48 <HAL_SAI_Init+0x150>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = 64U;
 8004d42:	2340      	movs	r3, #64	; 0x40
 8004d44:	613b      	str	r3, [r7, #16]
 8004d46:	e00a      	b.n	8004d5e <HAL_SAI_Init+0x166>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d4c:	2b08      	cmp	r3, #8
 8004d4e:	d103      	bne.n	8004d58 <HAL_SAI_Init+0x160>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = 256U;
 8004d50:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004d54:	613b      	str	r3, [r7, #16]
 8004d56:	e002      	b.n	8004d5e <HAL_SAI_Init+0x166>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d5c:	613b      	str	r3, [r7, #16]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 8004d5e:	69ba      	ldr	r2, [r7, #24]
 8004d60:	4613      	mov	r3, r2
 8004d62:	009b      	lsls	r3, r3, #2
 8004d64:	4413      	add	r3, r2
 8004d66:	005b      	lsls	r3, r3, #1
 8004d68:	4619      	mov	r1, r3
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	69db      	ldr	r3, [r3, #28]
 8004d6e:	693a      	ldr	r2, [r7, #16]
 8004d70:	fb02 f303 	mul.w	r3, r2, r3
 8004d74:	fbb1 f3f3 	udiv	r3, r1, r3
 8004d78:	617b      	str	r3, [r7, #20]
 8004d7a:	e017      	b.n	8004dac <HAL_SAI_Init+0x1b4>
    }
    else
    {
      /* NOMCK = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d80:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004d84:	d101      	bne.n	8004d8a <HAL_SAI_Init+0x192>
 8004d86:	2302      	movs	r3, #2
 8004d88:	e000      	b.n	8004d8c <HAL_SAI_Init+0x194>
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	60fb      	str	r3, [r7, #12]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 8004d8e:	69ba      	ldr	r2, [r7, #24]
 8004d90:	4613      	mov	r3, r2
 8004d92:	009b      	lsls	r3, r3, #2
 8004d94:	4413      	add	r3, r2
 8004d96:	005b      	lsls	r3, r3, #1
 8004d98:	4619      	mov	r1, r3
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	69db      	ldr	r3, [r3, #28]
 8004d9e:	68fa      	ldr	r2, [r7, #12]
 8004da0:	fb02 f303 	mul.w	r3, r2, r3
 8004da4:	021b      	lsls	r3, r3, #8
 8004da6:	fbb1 f3f3 	udiv	r3, r1, r3
 8004daa:	617b      	str	r3, [r7, #20]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 8004dac:	697b      	ldr	r3, [r7, #20]
 8004dae:	4a20      	ldr	r2, [pc, #128]	; (8004e30 <HAL_SAI_Init+0x238>)
 8004db0:	fba2 2303 	umull	r2, r3, r2, r3
 8004db4:	08da      	lsrs	r2, r3, #3
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8004dba:	6979      	ldr	r1, [r7, #20]
 8004dbc:	4b1c      	ldr	r3, [pc, #112]	; (8004e30 <HAL_SAI_Init+0x238>)
 8004dbe:	fba3 2301 	umull	r2, r3, r3, r1
 8004dc2:	08da      	lsrs	r2, r3, #3
 8004dc4:	4613      	mov	r3, r2
 8004dc6:	009b      	lsls	r3, r3, #2
 8004dc8:	4413      	add	r3, r2
 8004dca:	005b      	lsls	r3, r3, #1
 8004dcc:	1aca      	subs	r2, r1, r3
 8004dce:	2a08      	cmp	r2, #8
 8004dd0:	d904      	bls.n	8004ddc <HAL_SAI_Init+0x1e4>
    {
      hsai->Init.Mckdiv += 1U;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6a1b      	ldr	r3, [r3, #32]
 8004dd6:	1c5a      	adds	r2, r3, #1
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	621a      	str	r2, [r3, #32]
    }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
    /* STM32L4P5xx || STM32L4Q5xx */

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004de0:	2b04      	cmp	r3, #4
 8004de2:	d104      	bne.n	8004dee <HAL_SAI_Init+0x1f6>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6a1b      	ldr	r3, [r3, #32]
 8004de8:	085a      	lsrs	r2, r3, #1
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	685b      	ldr	r3, [r3, #4]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d003      	beq.n	8004dfe <HAL_SAI_Init+0x206>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	685b      	ldr	r3, [r3, #4]
 8004dfa:	2b02      	cmp	r3, #2
 8004dfc:	d109      	bne.n	8004e12 <HAL_SAI_Init+0x21a>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e02:	2b01      	cmp	r3, #1
 8004e04:	d101      	bne.n	8004e0a <HAL_SAI_Init+0x212>
 8004e06:	2300      	movs	r3, #0
 8004e08:	e001      	b.n	8004e0e <HAL_SAI_Init+0x216>
 8004e0a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004e0e:	623b      	str	r3, [r7, #32]
 8004e10:	e012      	b.n	8004e38 <HAL_SAI_Init+0x240>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e16:	2b01      	cmp	r3, #1
 8004e18:	d10c      	bne.n	8004e34 <HAL_SAI_Init+0x23c>
 8004e1a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004e1e:	e00a      	b.n	8004e36 <HAL_SAI_Init+0x23e>
 8004e20:	40015404 	.word	0x40015404
 8004e24:	40015424 	.word	0x40015424
 8004e28:	40015400 	.word	0x40015400
 8004e2c:	40015800 	.word	0x40015800
 8004e30:	cccccccd 	.word	0xcccccccd
 8004e34:	2300      	movs	r3, #0
 8004e36:	623b      	str	r3, [r7, #32]

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	6819      	ldr	r1, [r3, #0]
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681a      	ldr	r2, [r3, #0]
 8004e42:	4b58      	ldr	r3, [pc, #352]	; (8004fa4 <HAL_SAI_Init+0x3ac>)
 8004e44:	400b      	ands	r3, r1
 8004e46:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NOMCK | SAI_xCR1_MCKDIV | SAI_xCR1_OSR);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	6819      	ldr	r1, [r3, #0]
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	685a      	ldr	r2, [r3, #4]
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e56:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004e5c:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e62:	431a      	orrs	r2, r3
 8004e64:	6a3b      	ldr	r3, [r7, #32]
 8004e66:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 8004e68:	69fb      	ldr	r3, [r7, #28]
 8004e6a:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                          ckstr_bits | syncen_bits |                             \
 8004e70:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	691b      	ldr	r3, [r3, #16]
 8004e76:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8004e7c:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6a1b      	ldr	r3, [r3, #32]
 8004e82:	051b      	lsls	r3, r3, #20
 8004e84:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8004e8a:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	430a      	orrs	r2, r1
 8004e92:	601a      	str	r2, [r3, #0]
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	685b      	ldr	r3, [r3, #4]
 8004e9a:	687a      	ldr	r2, [r7, #4]
 8004e9c:	6812      	ldr	r2, [r2, #0]
 8004e9e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8004ea2:	f023 030f 	bic.w	r3, r3, #15
 8004ea6:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	6859      	ldr	r1, [r3, #4]
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	699a      	ldr	r2, [r3, #24]
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eb6:	431a      	orrs	r2, r3
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ebc:	431a      	orrs	r2, r3
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	430a      	orrs	r2, r1
 8004ec4:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	6899      	ldr	r1, [r3, #8]
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681a      	ldr	r2, [r3, #0]
 8004ed0:	4b35      	ldr	r3, [pc, #212]	; (8004fa8 <HAL_SAI_Init+0x3b0>)
 8004ed2:	400b      	ands	r3, r1
 8004ed4:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	6899      	ldr	r1, [r3, #8]
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ee0:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8004ee6:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
                           hsai->FrameInit.FSOffset |
 8004eec:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSDefinition |
 8004ef2:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ef8:	3b01      	subs	r3, #1
 8004efa:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8004efc:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	430a      	orrs	r2, r1
 8004f04:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	68d9      	ldr	r1, [r3, #12]
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681a      	ldr	r2, [r3, #0]
 8004f10:	f24f 0320 	movw	r3, #61472	; 0xf020
 8004f14:	400b      	ands	r3, r1
 8004f16:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	68d9      	ldr	r1, [r3, #12]
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f26:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f2c:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8004f2e:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f34:	3b01      	subs	r3, #1
 8004f36:	021b      	lsls	r3, r3, #8
 8004f38:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	430a      	orrs	r2, r1
 8004f40:	60da      	str	r2, [r3, #12]

#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  /* SAI PDM Configuration ---------------------------------------------------*/
  if (hsai->Instance == SAI1_Block_A)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4a19      	ldr	r2, [pc, #100]	; (8004fac <HAL_SAI_Init+0x3b4>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d119      	bne.n	8004f80 <HAL_SAI_Init+0x388>
  {
    /* Disable PDM interface */
    SAI1->PDMCR &= ~(SAI_PDMCR_PDMEN);
 8004f4c:	4b18      	ldr	r3, [pc, #96]	; (8004fb0 <HAL_SAI_Init+0x3b8>)
 8004f4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f50:	4a17      	ldr	r2, [pc, #92]	; (8004fb0 <HAL_SAI_Init+0x3b8>)
 8004f52:	f023 0301 	bic.w	r3, r3, #1
 8004f56:	6453      	str	r3, [r2, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004f5e:	2b01      	cmp	r3, #1
 8004f60:	d10e      	bne.n	8004f80 <HAL_SAI_Init+0x388>
    {
      /* Configure and enable PDM interface */
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6bda      	ldr	r2, [r3, #60]	; 0x3c
                     ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f6a:	3b01      	subs	r3, #1
 8004f6c:	011b      	lsls	r3, r3, #4
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8004f6e:	4910      	ldr	r1, [pc, #64]	; (8004fb0 <HAL_SAI_Init+0x3b8>)
 8004f70:	4313      	orrs	r3, r2
 8004f72:	644b      	str	r3, [r1, #68]	; 0x44
      SAI1->PDMCR |= SAI_PDMCR_PDMEN;
 8004f74:	4b0e      	ldr	r3, [pc, #56]	; (8004fb0 <HAL_SAI_Init+0x3b8>)
 8004f76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f78:	4a0d      	ldr	r2, [pc, #52]	; (8004fb0 <HAL_SAI_Init+0x3b8>)
 8004f7a:	f043 0301 	orr.w	r3, r3, #1
 8004f7e:	6453      	str	r3, [r2, #68]	; 0x44
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2200      	movs	r2, #0
 8004f84:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2201      	movs	r2, #1
 8004f8c:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2200      	movs	r2, #0
 8004f94:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c

  return HAL_OK;
 8004f98:	2300      	movs	r3, #0
}
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	3728      	adds	r7, #40	; 0x28
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bd80      	pop	{r7, pc}
 8004fa2:	bf00      	nop
 8004fa4:	f805c010 	.word	0xf805c010
 8004fa8:	fff88000 	.word	0xfff88000
 8004fac:	40015404 	.word	0x40015404
 8004fb0:	40015400 	.word	0x40015400

08004fb4 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8004fb4:	b480      	push	{r7}
 8004fb6:	b085      	sub	sp, #20
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8004fbc:	4b18      	ldr	r3, [pc, #96]	; (8005020 <SAI_Disable+0x6c>)
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4a18      	ldr	r2, [pc, #96]	; (8005024 <SAI_Disable+0x70>)
 8004fc2:	fba2 2303 	umull	r2, r3, r2, r3
 8004fc6:	0b1b      	lsrs	r3, r3, #12
 8004fc8:	009b      	lsls	r3, r3, #2
 8004fca:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8004fcc:	2300      	movs	r3, #0
 8004fce:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	681a      	ldr	r2, [r3, #0]
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004fde:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d10a      	bne.n	8004ffc <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fec:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      status = HAL_TIMEOUT;
 8004ff6:	2303      	movs	r3, #3
 8004ff8:	72fb      	strb	r3, [r7, #11]
      break;
 8004ffa:	e009      	b.n	8005010 <SAI_Disable+0x5c>
    }
    count--;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	3b01      	subs	r3, #1
 8005000:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800500c:	2b00      	cmp	r3, #0
 800500e:	d1e7      	bne.n	8004fe0 <SAI_Disable+0x2c>

  return status;
 8005010:	7afb      	ldrb	r3, [r7, #11]
}
 8005012:	4618      	mov	r0, r3
 8005014:	3714      	adds	r7, #20
 8005016:	46bd      	mov	sp, r7
 8005018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501c:	4770      	bx	lr
 800501e:	bf00      	nop
 8005020:	20000000 	.word	0x20000000
 8005024:	95cbec1b 	.word	0x95cbec1b

08005028 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8005028:	b580      	push	{r7, lr}
 800502a:	b08a      	sub	sp, #40	; 0x28
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;
#endif

  /* Check the SD handle allocation */
  if(hsd == NULL)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d101      	bne.n	800503a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8005036:	2301      	movs	r3, #1
 8005038:	e078      	b.n	800512c <HAL_SD_Init+0x104>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005040:	b2db      	uxtb	r3, r3
 8005042:	2b00      	cmp	r3, #0
 8005044:	d105      	bne.n	8005052 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2200      	movs	r2, #0
 800504a:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800504c:	6878      	ldr	r0, [r7, #4]
 800504e:	f7fc f821 	bl	8001094 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2203      	movs	r2, #3
 8005056:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800505a:	6878      	ldr	r0, [r7, #4]
 800505c:	f000 f86a 	bl	8005134 <HAL_SD_InitCard>
 8005060:	4603      	mov	r3, r0
 8005062:	2b00      	cmp	r3, #0
 8005064:	d001      	beq.n	800506a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8005066:	2301      	movs	r3, #1
 8005068:	e060      	b.n	800512c <HAL_SD_Init+0x104>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800506a:	f107 0308 	add.w	r3, r7, #8
 800506e:	4619      	mov	r1, r3
 8005070:	6878      	ldr	r0, [r7, #4]
 8005072:	f000 faa5 	bl	80055c0 <HAL_SD_GetCardStatus>
 8005076:	4603      	mov	r3, r0
 8005078:	2b00      	cmp	r3, #0
 800507a:	d001      	beq.n	8005080 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 800507c:	2301      	movs	r3, #1
 800507e:	e055      	b.n	800512c <HAL_SD_Init+0x104>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8005080:	7e3b      	ldrb	r3, [r7, #24]
 8005082:	b2db      	uxtb	r3, r3
 8005084:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8005086:	7e7b      	ldrb	r3, [r7, #25]
 8005088:	b2db      	uxtb	r3, r3
 800508a:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005090:	2b01      	cmp	r3, #1
 8005092:	d10a      	bne.n	80050aa <HAL_SD_Init+0x82>
 8005094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005096:	2b00      	cmp	r3, #0
 8005098:	d102      	bne.n	80050a0 <HAL_SD_Init+0x78>
 800509a:	6a3b      	ldr	r3, [r7, #32]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d004      	beq.n	80050aa <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80050a6:	65da      	str	r2, [r3, #92]	; 0x5c
 80050a8:	e00b      	b.n	80050c2 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050ae:	2b01      	cmp	r3, #1
 80050b0:	d104      	bne.n	80050bc <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80050b8:	65da      	str	r2, [r3, #92]	; 0x5c
 80050ba:	e002      	b.n	80050c2 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2200      	movs	r2, #0
 80050c0:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }
  /* Configure the bus wide */
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	68db      	ldr	r3, [r3, #12]
 80050c6:	4619      	mov	r1, r3
 80050c8:	6878      	ldr	r0, [r7, #4]
 80050ca:	f000 fb2f 	bl	800572c <HAL_SD_ConfigWideBusOperation>
 80050ce:	4603      	mov	r3, r0
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d001      	beq.n	80050d8 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 80050d4:	2301      	movs	r3, #1
 80050d6:	e029      	b.n	800512c <HAL_SD_Init+0x104>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 80050d8:	f7fc fb5a 	bl	8001790 <HAL_GetTick>
 80050dc:	61f8      	str	r0, [r7, #28]
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 80050de:	e014      	b.n	800510a <HAL_SD_Init+0xe2>
  {
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
 80050e0:	f7fc fb56 	bl	8001790 <HAL_GetTick>
 80050e4:	4602      	mov	r2, r0
 80050e6:	69fb      	ldr	r3, [r7, #28]
 80050e8:	1ad3      	subs	r3, r2, r3
 80050ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80050ee:	d10c      	bne.n	800510a <HAL_SD_Init+0xe2>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80050f6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2201      	movs	r2, #1
 80050fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2200      	movs	r2, #0
 8005104:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 8005106:	2303      	movs	r3, #3
 8005108:	e010      	b.n	800512c <HAL_SD_Init+0x104>
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800510a:	6878      	ldr	r0, [r7, #4]
 800510c:	f000 fc22 	bl	8005954 <HAL_SD_GetCardState>
 8005110:	4603      	mov	r3, r0
 8005112:	2b04      	cmp	r3, #4
 8005114:	d1e4      	bne.n	80050e0 <HAL_SD_Init+0xb8>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2200      	movs	r2, #0
 800511a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2200      	movs	r2, #0
 8005120:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2201      	movs	r2, #1
 8005126:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800512a:	2300      	movs	r3, #0
}
 800512c:	4618      	mov	r0, r3
 800512e:	3728      	adds	r7, #40	; 0x28
 8005130:	46bd      	mov	sp, r7
 8005132:	bd80      	pop	{r7, pc}

08005134 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005134:	b5b0      	push	{r4, r5, r7, lr}
 8005136:	b08e      	sub	sp, #56	; 0x38
 8005138:	af04      	add	r7, sp, #16
 800513a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800513c:	2300      	movs	r3, #0
 800513e:	60bb      	str	r3, [r7, #8]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8005140:	2300      	movs	r3, #0
 8005142:	60fb      	str	r3, [r7, #12]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8005144:	2300      	movs	r3, #0
 8005146:	613b      	str	r3, [r7, #16]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8005148:	2300      	movs	r3, #0
 800514a:	617b      	str	r3, [r7, #20]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 800514c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8005150:	f7fe fb38 	bl	80037c4 <HAL_RCCEx_GetPeriphCLKFreq>
 8005154:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 8005156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005158:	2b00      	cmp	r3, #0
 800515a:	d109      	bne.n	8005170 <HAL_SD_InitCard+0x3c>
  {
      hsd->State = HAL_SD_STATE_READY;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2201      	movs	r2, #1
 8005160:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800516a:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800516c:	2301      	movs	r3, #1
 800516e:	e079      	b.n	8005264 <HAL_SD_InitCard+0x130>
  }
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockDiv = ((sdmmc_clk / SD_INIT_FREQ) - 2U);
#else
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8005170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005172:	0a1b      	lsrs	r3, r3, #8
 8005174:	4a3d      	ldr	r2, [pc, #244]	; (800526c <HAL_SD_InitCard+0x138>)
 8005176:	fba2 2303 	umull	r2, r3, r2, r3
 800517a:	091b      	lsrs	r3, r3, #4
 800517c:	61bb      	str	r3, [r7, #24]
#endif

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  Init.Transceiver = hsd->Init.Transceiver;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	699b      	ldr	r3, [r3, #24]
 8005182:	61fb      	str	r3, [r7, #28]
  if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	699b      	ldr	r3, [r3, #24]
 8005188:	2b01      	cmp	r3, #1
 800518a:	d107      	bne.n	800519c <HAL_SD_InitCard+0x68>
  {
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	681a      	ldr	r2, [r3, #0]
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f042 0210 	orr.w	r2, r2, #16
 800519a:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681d      	ldr	r5, [r3, #0]
 80051a0:	466c      	mov	r4, sp
 80051a2:	f107 0314 	add.w	r3, r7, #20
 80051a6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80051aa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80051ae:	f107 0308 	add.w	r3, r7, #8
 80051b2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80051b4:	4628      	mov	r0, r5
 80051b6:	f002 f837 	bl	8007228 <SDMMC_Init>
  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	4618      	mov	r0, r3
 80051c0:	f002 f869 	bl	8007296 <SDMMC_PowerState_ON>
  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  sdmmc_clk = sdmmc_clk/(Init.ClockDiv + 2U);
#else
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
 80051c4:	69bb      	ldr	r3, [r7, #24]
 80051c6:	005b      	lsls	r3, r3, #1
 80051c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80051ce:	627b      	str	r3, [r7, #36]	; 0x24
#endif
  HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 80051d0:	4a27      	ldr	r2, [pc, #156]	; (8005270 <HAL_SD_InitCard+0x13c>)
 80051d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80051d8:	3301      	adds	r3, #1
 80051da:	4618      	mov	r0, r3
 80051dc:	f7fc fae4 	bl	80017a8 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80051e0:	6878      	ldr	r0, [r7, #4]
 80051e2:	f000 fc97 	bl	8005b14 <SD_PowerON>
 80051e6:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80051e8:	6a3b      	ldr	r3, [r7, #32]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d00b      	beq.n	8005206 <HAL_SD_InitCard+0xd2>
  {
    hsd->State = HAL_SD_STATE_READY;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2201      	movs	r2, #1
 80051f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80051fa:	6a3b      	ldr	r3, [r7, #32]
 80051fc:	431a      	orrs	r2, r3
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005202:	2301      	movs	r3, #1
 8005204:	e02e      	b.n	8005264 <HAL_SD_InitCard+0x130>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8005206:	6878      	ldr	r0, [r7, #4]
 8005208:	f000 fbc4 	bl	8005994 <SD_InitCard>
 800520c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800520e:	6a3b      	ldr	r3, [r7, #32]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d00b      	beq.n	800522c <HAL_SD_InitCard+0xf8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2201      	movs	r2, #1
 8005218:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005220:	6a3b      	ldr	r3, [r7, #32]
 8005222:	431a      	orrs	r2, r3
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005228:	2301      	movs	r3, #1
 800522a:	e01b      	b.n	8005264 <HAL_SD_InitCard+0x130>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005234:	4618      	mov	r0, r3
 8005236:	f002 f8c5 	bl	80073c4 <SDMMC_CmdBlockLength>
 800523a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800523c:	6a3b      	ldr	r3, [r7, #32]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d00f      	beq.n	8005262 <HAL_SD_InitCard+0x12e>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4a0b      	ldr	r2, [pc, #44]	; (8005274 <HAL_SD_InitCard+0x140>)
 8005248:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800524e:	6a3b      	ldr	r3, [r7, #32]
 8005250:	431a      	orrs	r2, r3
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2201      	movs	r2, #1
 800525a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800525e:	2301      	movs	r3, #1
 8005260:	e000      	b.n	8005264 <HAL_SD_InitCard+0x130>
  }

  return HAL_OK;
 8005262:	2300      	movs	r3, #0
}
 8005264:	4618      	mov	r0, r3
 8005266:	3728      	adds	r7, #40	; 0x28
 8005268:	46bd      	mov	sp, r7
 800526a:	bdb0      	pop	{r4, r5, r7, pc}
 800526c:	014f8b59 	.word	0x014f8b59
 8005270:	00012110 	.word	0x00012110
 8005274:	1fe00fff 	.word	0x1fe00fff

08005278 <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8005278:	b480      	push	{r7}
 800527a:	b083      	sub	sp, #12
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
 8005280:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005286:	0f9b      	lsrs	r3, r3, #30
 8005288:	b2da      	uxtb	r2, r3
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005292:	0e9b      	lsrs	r3, r3, #26
 8005294:	b2db      	uxtb	r3, r3
 8005296:	f003 030f 	and.w	r3, r3, #15
 800529a:	b2da      	uxtb	r2, r3
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052a4:	0e1b      	lsrs	r3, r3, #24
 80052a6:	b2db      	uxtb	r3, r3
 80052a8:	f003 0303 	and.w	r3, r3, #3
 80052ac:	b2da      	uxtb	r2, r3
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052b6:	0c1b      	lsrs	r3, r3, #16
 80052b8:	b2da      	uxtb	r2, r3
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052c2:	0a1b      	lsrs	r3, r3, #8
 80052c4:	b2da      	uxtb	r2, r3
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052ce:	b2da      	uxtb	r2, r3
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80052d8:	0d1b      	lsrs	r3, r3, #20
 80052da:	b29a      	uxth	r2, r3
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80052e4:	0c1b      	lsrs	r3, r3, #16
 80052e6:	b2db      	uxtb	r3, r3
 80052e8:	f003 030f 	and.w	r3, r3, #15
 80052ec:	b2da      	uxtb	r2, r3
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80052f6:	0bdb      	lsrs	r3, r3, #15
 80052f8:	b2db      	uxtb	r3, r3
 80052fa:	f003 0301 	and.w	r3, r3, #1
 80052fe:	b2da      	uxtb	r2, r3
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005308:	0b9b      	lsrs	r3, r3, #14
 800530a:	b2db      	uxtb	r3, r3
 800530c:	f003 0301 	and.w	r3, r3, #1
 8005310:	b2da      	uxtb	r2, r3
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800531a:	0b5b      	lsrs	r3, r3, #13
 800531c:	b2db      	uxtb	r3, r3
 800531e:	f003 0301 	and.w	r3, r3, #1
 8005322:	b2da      	uxtb	r2, r3
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800532c:	0b1b      	lsrs	r3, r3, #12
 800532e:	b2db      	uxtb	r3, r3
 8005330:	f003 0301 	and.w	r3, r3, #1
 8005334:	b2da      	uxtb	r2, r3
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	2200      	movs	r2, #0
 800533e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005344:	2b00      	cmp	r3, #0
 8005346:	d163      	bne.n	8005410 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800534c:	009a      	lsls	r2, r3, #2
 800534e:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005352:	4013      	ands	r3, r2
 8005354:	687a      	ldr	r2, [r7, #4]
 8005356:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005358:	0f92      	lsrs	r2, r2, #30
 800535a:	431a      	orrs	r2, r3
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005364:	0edb      	lsrs	r3, r3, #27
 8005366:	b2db      	uxtb	r3, r3
 8005368:	f003 0307 	and.w	r3, r3, #7
 800536c:	b2da      	uxtb	r2, r3
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005376:	0e1b      	lsrs	r3, r3, #24
 8005378:	b2db      	uxtb	r3, r3
 800537a:	f003 0307 	and.w	r3, r3, #7
 800537e:	b2da      	uxtb	r2, r3
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005388:	0d5b      	lsrs	r3, r3, #21
 800538a:	b2db      	uxtb	r3, r3
 800538c:	f003 0307 	and.w	r3, r3, #7
 8005390:	b2da      	uxtb	r2, r3
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800539a:	0c9b      	lsrs	r3, r3, #18
 800539c:	b2db      	uxtb	r3, r3
 800539e:	f003 0307 	and.w	r3, r3, #7
 80053a2:	b2da      	uxtb	r2, r3
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80053ac:	0bdb      	lsrs	r3, r3, #15
 80053ae:	b2db      	uxtb	r3, r3
 80053b0:	f003 0307 	and.w	r3, r3, #7
 80053b4:	b2da      	uxtb	r2, r3
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	691b      	ldr	r3, [r3, #16]
 80053be:	1c5a      	adds	r2, r3, #1
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	7e1b      	ldrb	r3, [r3, #24]
 80053c8:	b2db      	uxtb	r3, r3
 80053ca:	f003 0307 	and.w	r3, r3, #7
 80053ce:	3302      	adds	r3, #2
 80053d0:	2201      	movs	r2, #1
 80053d2:	fa02 f303 	lsl.w	r3, r2, r3
 80053d6:	687a      	ldr	r2, [r7, #4]
 80053d8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80053da:	fb03 f202 	mul.w	r2, r3, r2
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	7a1b      	ldrb	r3, [r3, #8]
 80053e6:	b2db      	uxtb	r3, r3
 80053e8:	f003 030f 	and.w	r3, r3, #15
 80053ec:	2201      	movs	r2, #1
 80053ee:	409a      	lsls	r2, r3
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	651a      	str	r2, [r3, #80]	; 0x50

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053f8:	687a      	ldr	r2, [r7, #4]
 80053fa:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80053fc:	0a52      	lsrs	r2, r2, #9
 80053fe:	fb03 f202 	mul.w	r2, r3, r2
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockSize = 512U;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	f44f 7200 	mov.w	r2, #512	; 0x200
 800540c:	659a      	str	r2, [r3, #88]	; 0x58
 800540e:	e031      	b.n	8005474 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005414:	2b01      	cmp	r3, #1
 8005416:	d11d      	bne.n	8005454 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800541c:	041b      	lsls	r3, r3, #16
 800541e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005426:	0c1b      	lsrs	r3, r3, #16
 8005428:	431a      	orrs	r2, r3
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	691b      	ldr	r3, [r3, #16]
 8005432:	3301      	adds	r3, #1
 8005434:	029a      	lsls	r2, r3, #10
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 512U;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005448:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	659a      	str	r2, [r3, #88]	; 0x58
 8005452:	e00f      	b.n	8005474 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	4a58      	ldr	r2, [pc, #352]	; (80055bc <HAL_SD_GetCardCSD+0x344>)
 800545a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005460:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2201      	movs	r2, #1
 800546c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005470:	2301      	movs	r3, #1
 8005472:	e09d      	b.n	80055b0 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005478:	0b9b      	lsrs	r3, r3, #14
 800547a:	b2db      	uxtb	r3, r3
 800547c:	f003 0301 	and.w	r3, r3, #1
 8005480:	b2da      	uxtb	r2, r3
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800548a:	09db      	lsrs	r3, r3, #7
 800548c:	b2db      	uxtb	r3, r3
 800548e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005492:	b2da      	uxtb	r2, r3
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800549c:	b2db      	uxtb	r3, r3
 800549e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80054a2:	b2da      	uxtb	r2, r3
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80054ac:	0fdb      	lsrs	r3, r3, #31
 80054ae:	b2da      	uxtb	r2, r3
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80054b8:	0f5b      	lsrs	r3, r3, #29
 80054ba:	b2db      	uxtb	r3, r3
 80054bc:	f003 0303 	and.w	r3, r3, #3
 80054c0:	b2da      	uxtb	r2, r3
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80054ca:	0e9b      	lsrs	r3, r3, #26
 80054cc:	b2db      	uxtb	r3, r3
 80054ce:	f003 0307 	and.w	r3, r3, #7
 80054d2:	b2da      	uxtb	r2, r3
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80054dc:	0d9b      	lsrs	r3, r3, #22
 80054de:	b2db      	uxtb	r3, r3
 80054e0:	f003 030f 	and.w	r3, r3, #15
 80054e4:	b2da      	uxtb	r2, r3
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80054ee:	0d5b      	lsrs	r3, r3, #21
 80054f0:	b2db      	uxtb	r3, r3
 80054f2:	f003 0301 	and.w	r3, r3, #1
 80054f6:	b2da      	uxtb	r2, r3
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	2200      	movs	r2, #0
 8005502:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800550a:	0c1b      	lsrs	r3, r3, #16
 800550c:	b2db      	uxtb	r3, r3
 800550e:	f003 0301 	and.w	r3, r3, #1
 8005512:	b2da      	uxtb	r2, r3
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800551e:	0bdb      	lsrs	r3, r3, #15
 8005520:	b2db      	uxtb	r3, r3
 8005522:	f003 0301 	and.w	r3, r3, #1
 8005526:	b2da      	uxtb	r2, r3
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005532:	0b9b      	lsrs	r3, r3, #14
 8005534:	b2db      	uxtb	r3, r3
 8005536:	f003 0301 	and.w	r3, r3, #1
 800553a:	b2da      	uxtb	r2, r3
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005546:	0b5b      	lsrs	r3, r3, #13
 8005548:	b2db      	uxtb	r3, r3
 800554a:	f003 0301 	and.w	r3, r3, #1
 800554e:	b2da      	uxtb	r2, r3
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800555a:	0b1b      	lsrs	r3, r3, #12
 800555c:	b2db      	uxtb	r3, r3
 800555e:	f003 0301 	and.w	r3, r3, #1
 8005562:	b2da      	uxtb	r2, r3
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800556e:	0a9b      	lsrs	r3, r3, #10
 8005570:	b2db      	uxtb	r3, r3
 8005572:	f003 0303 	and.w	r3, r3, #3
 8005576:	b2da      	uxtb	r2, r3
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005582:	0a1b      	lsrs	r3, r3, #8
 8005584:	b2db      	uxtb	r3, r3
 8005586:	f003 0303 	and.w	r3, r3, #3
 800558a:	b2da      	uxtb	r2, r3
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005596:	085b      	lsrs	r3, r3, #1
 8005598:	b2db      	uxtb	r3, r3
 800559a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800559e:	b2da      	uxtb	r2, r3
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	2201      	movs	r2, #1
 80055aa:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80055ae:	2300      	movs	r3, #0
}
 80055b0:	4618      	mov	r0, r3
 80055b2:	370c      	adds	r7, #12
 80055b4:	46bd      	mov	sp, r7
 80055b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ba:	4770      	bx	lr
 80055bc:	1fe00fff 	.word	0x1fe00fff

080055c0 <HAL_SD_GetCardStatus>:
  * @param  pStatus Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b094      	sub	sp, #80	; 0x50
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
 80055c8:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 80055ca:	2300      	movs	r3, #0
 80055cc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  errorstate = SD_SendSDStatus(hsd, sd_status);
 80055d0:	f107 0308 	add.w	r3, r7, #8
 80055d4:	4619      	mov	r1, r3
 80055d6:	6878      	ldr	r0, [r7, #4]
 80055d8:	f000 fba8 	bl	8005d2c <SD_SendSDStatus>
 80055dc:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 80055de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d011      	beq.n	8005608 <HAL_SD_GetCardStatus+0x48>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	4a4f      	ldr	r2, [pc, #316]	; (8005728 <HAL_SD_GetCardStatus+0x168>)
 80055ea:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80055f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80055f2:	431a      	orrs	r2, r3
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2201      	movs	r2, #1
 80055fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8005600:	2301      	movs	r3, #1
 8005602:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8005606:	e070      	b.n	80056ea <HAL_SD_GetCardStatus+0x12a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	099b      	lsrs	r3, r3, #6
 800560c:	b2db      	uxtb	r3, r3
 800560e:	f003 0303 	and.w	r3, r3, #3
 8005612:	b2da      	uxtb	r2, r3
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8005618:	68bb      	ldr	r3, [r7, #8]
 800561a:	095b      	lsrs	r3, r3, #5
 800561c:	b2db      	uxtb	r3, r3
 800561e:	f003 0301 	and.w	r3, r3, #1
 8005622:	b2da      	uxtb	r2, r3
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	0a1b      	lsrs	r3, r3, #8
 800562c:	b29b      	uxth	r3, r3
 800562e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005632:	b29a      	uxth	r2, r3
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	0e1b      	lsrs	r3, r3, #24
 8005638:	b29b      	uxth	r3, r3
 800563a:	4313      	orrs	r3, r2
 800563c:	b29a      	uxth	r2, r3
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	061a      	lsls	r2, r3, #24
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	021b      	lsls	r3, r3, #8
 800564a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800564e:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	0a1b      	lsrs	r3, r3, #8
 8005654:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8005658:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	0e1b      	lsrs	r3, r3, #24
 800565e:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8005664:	693b      	ldr	r3, [r7, #16]
 8005666:	b2da      	uxtb	r2, r3
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800566c:	693b      	ldr	r3, [r7, #16]
 800566e:	0a1b      	lsrs	r3, r3, #8
 8005670:	b2da      	uxtb	r2, r3
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8005676:	693b      	ldr	r3, [r7, #16]
 8005678:	0d1b      	lsrs	r3, r3, #20
 800567a:	b2db      	uxtb	r3, r3
 800567c:	f003 030f 	and.w	r3, r3, #15
 8005680:	b2da      	uxtb	r2, r3
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8005686:	693b      	ldr	r3, [r7, #16]
 8005688:	0c1b      	lsrs	r3, r3, #16
 800568a:	b29b      	uxth	r3, r3
 800568c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005690:	b29a      	uxth	r2, r3
 8005692:	697b      	ldr	r3, [r7, #20]
 8005694:	b29b      	uxth	r3, r3
 8005696:	b2db      	uxtb	r3, r3
 8005698:	b29b      	uxth	r3, r3
 800569a:	4313      	orrs	r3, r2
 800569c:	b29a      	uxth	r2, r3
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 80056a2:	697b      	ldr	r3, [r7, #20]
 80056a4:	0a9b      	lsrs	r3, r3, #10
 80056a6:	b2db      	uxtb	r3, r3
 80056a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80056ac:	b2da      	uxtb	r2, r3
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 80056b2:	697b      	ldr	r3, [r7, #20]
 80056b4:	0a1b      	lsrs	r3, r3, #8
 80056b6:	b2db      	uxtb	r3, r3
 80056b8:	f003 0303 	and.w	r3, r3, #3
 80056bc:	b2da      	uxtb	r2, r3
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	73da      	strb	r2, [r3, #15]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 80056c2:	697b      	ldr	r3, [r7, #20]
 80056c4:	091b      	lsrs	r3, r3, #4
 80056c6:	b2db      	uxtb	r3, r3
 80056c8:	f003 030f 	and.w	r3, r3, #15
 80056cc:	b2da      	uxtb	r2, r3
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 80056d2:	697b      	ldr	r3, [r7, #20]
 80056d4:	b2db      	uxtb	r3, r3
 80056d6:	f003 030f 	and.w	r3, r3, #15
 80056da:	b2da      	uxtb	r2, r3
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 80056e0:	69bb      	ldr	r3, [r7, #24]
 80056e2:	0e1b      	lsrs	r3, r3, #24
 80056e4:	b2da      	uxtb	r2, r3
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	749a      	strb	r2, [r3, #18]
#endif
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f44f 7100 	mov.w	r1, #512	; 0x200
 80056f2:	4618      	mov	r0, r3
 80056f4:	f001 fe66 	bl	80073c4 <SDMMC_CmdBlockLength>
 80056f8:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 80056fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d00d      	beq.n	800571c <HAL_SD_GetCardStatus+0x15c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	4a08      	ldr	r2, [pc, #32]	; (8005728 <HAL_SD_GetCardStatus+0x168>)
 8005706:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800570c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2201      	movs	r2, #1
 8005712:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8005716:	2301      	movs	r3, #1
 8005718:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }

  return status;
 800571c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8005720:	4618      	mov	r0, r3
 8005722:	3750      	adds	r7, #80	; 0x50
 8005724:	46bd      	mov	sp, r7
 8005726:	bd80      	pop	{r7, pc}
 8005728:	1fe00fff 	.word	0x1fe00fff

0800572c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800572c:	b5b0      	push	{r4, r5, r7, lr}
 800572e:	b090      	sub	sp, #64	; 0x40
 8005730:	af04      	add	r7, sp, #16
 8005732:	6078      	str	r0, [r7, #4]
 8005734:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 8005736:	2300      	movs	r3, #0
 8005738:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2203      	movs	r2, #3
 8005740:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005748:	2b03      	cmp	r3, #3
 800574a:	d02e      	beq.n	80057aa <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005752:	d106      	bne.n	8005762 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005758:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	639a      	str	r2, [r3, #56]	; 0x38
 8005760:	e029      	b.n	80057b6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005768:	d10a      	bne.n	8005780 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800576a:	6878      	ldr	r0, [r7, #4]
 800576c:	f000 fbd6 	bl	8005f1c <SD_WideBus_Enable>
 8005770:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005778:	431a      	orrs	r2, r3
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	639a      	str	r2, [r3, #56]	; 0x38
 800577e:	e01a      	b.n	80057b6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d10a      	bne.n	800579c <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8005786:	6878      	ldr	r0, [r7, #4]
 8005788:	f000 fc13 	bl	8005fb2 <SD_WideBus_Disable>
 800578c:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005794:	431a      	orrs	r2, r3
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	639a      	str	r2, [r3, #56]	; 0x38
 800579a:	e00c      	b.n	80057b6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057a0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	639a      	str	r2, [r3, #56]	; 0x38
 80057a8:	e005      	b.n	80057b6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057ae:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d007      	beq.n	80057ce <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	4a60      	ldr	r2, [pc, #384]	; (8005944 <HAL_SD_ConfigWideBusOperation+0x218>)
 80057c4:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 80057c6:	2301      	movs	r3, #1
 80057c8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80057cc:	e097      	b.n	80058fe <HAL_SD_ConfigWideBusOperation+0x1d2>
  }
  else
  {
    sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 80057ce:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80057d2:	f7fd fff7 	bl	80037c4 <HAL_RCCEx_GetPeriphCLKFreq>
 80057d6:	6278      	str	r0, [r7, #36]	; 0x24
    if (sdmmc_clk != 0U)
 80057d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057da:	2b00      	cmp	r3, #0
 80057dc:	f000 8086 	beq.w	80058ec <HAL_SD_ConfigWideBusOperation+0x1c0>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	685b      	ldr	r3, [r3, #4]
 80057e4:	60fb      	str	r3, [r7, #12]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
      Init.ClockBypass         = hsd->Init.ClockBypass;
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	689b      	ldr	r3, [r3, #8]
 80057ea:	613b      	str	r3, [r7, #16]
      Init.BusWide             = WideMode;
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	617b      	str	r3, [r7, #20]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	691b      	ldr	r3, [r3, #16]
 80057f4:	61bb      	str	r3, [r7, #24]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	695a      	ldr	r2, [r3, #20]
 80057fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057fc:	4952      	ldr	r1, [pc, #328]	; (8005948 <HAL_SD_ConfigWideBusOperation+0x21c>)
 80057fe:	fba1 1303 	umull	r1, r3, r1, r3
 8005802:	0e1b      	lsrs	r3, r3, #24
 8005804:	429a      	cmp	r2, r3
 8005806:	d303      	bcc.n	8005810 <HAL_SD_ConfigWideBusOperation+0xe4>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	695b      	ldr	r3, [r3, #20]
 800580c:	61fb      	str	r3, [r7, #28]
 800580e:	e05a      	b.n	80058c6 <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005814:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005818:	d103      	bne.n	8005822 <HAL_SD_ConfigWideBusOperation+0xf6>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	695b      	ldr	r3, [r3, #20]
 800581e:	61fb      	str	r3, [r7, #28]
 8005820:	e051      	b.n	80058c6 <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005826:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800582a:	d126      	bne.n	800587a <HAL_SD_ConfigWideBusOperation+0x14e>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	695b      	ldr	r3, [r3, #20]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d10e      	bne.n	8005852 <HAL_SD_ConfigWideBusOperation+0x126>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 8005834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005836:	4a45      	ldr	r2, [pc, #276]	; (800594c <HAL_SD_ConfigWideBusOperation+0x220>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d906      	bls.n	800584a <HAL_SD_ConfigWideBusOperation+0x11e>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800583c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800583e:	4a42      	ldr	r2, [pc, #264]	; (8005948 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8005840:	fba2 2303 	umull	r2, r3, r2, r3
 8005844:	0e5b      	lsrs	r3, r3, #25
 8005846:	61fb      	str	r3, [r7, #28]
 8005848:	e03d      	b.n	80058c6 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	695b      	ldr	r3, [r3, #20]
 800584e:	61fb      	str	r3, [r7, #28]
 8005850:	e039      	b.n	80058c6 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	695b      	ldr	r3, [r3, #20]
 8005856:	005b      	lsls	r3, r3, #1
 8005858:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800585a:	fbb2 f3f3 	udiv	r3, r2, r3
 800585e:	4a3b      	ldr	r2, [pc, #236]	; (800594c <HAL_SD_ConfigWideBusOperation+0x220>)
 8005860:	4293      	cmp	r3, r2
 8005862:	d906      	bls.n	8005872 <HAL_SD_ConfigWideBusOperation+0x146>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8005864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005866:	4a38      	ldr	r2, [pc, #224]	; (8005948 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8005868:	fba2 2303 	umull	r2, r3, r2, r3
 800586c:	0e5b      	lsrs	r3, r3, #25
 800586e:	61fb      	str	r3, [r7, #28]
 8005870:	e029      	b.n	80058c6 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	695b      	ldr	r3, [r3, #20]
 8005876:	61fb      	str	r3, [r7, #28]
 8005878:	e025      	b.n	80058c6 <HAL_SD_ConfigWideBusOperation+0x19a>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	695b      	ldr	r3, [r3, #20]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d10e      	bne.n	80058a0 <HAL_SD_ConfigWideBusOperation+0x174>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 8005882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005884:	4a32      	ldr	r2, [pc, #200]	; (8005950 <HAL_SD_ConfigWideBusOperation+0x224>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d906      	bls.n	8005898 <HAL_SD_ConfigWideBusOperation+0x16c>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800588a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800588c:	4a2e      	ldr	r2, [pc, #184]	; (8005948 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800588e:	fba2 2303 	umull	r2, r3, r2, r3
 8005892:	0e1b      	lsrs	r3, r3, #24
 8005894:	61fb      	str	r3, [r7, #28]
 8005896:	e016      	b.n	80058c6 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	695b      	ldr	r3, [r3, #20]
 800589c:	61fb      	str	r3, [r7, #28]
 800589e:	e012      	b.n	80058c6 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	695b      	ldr	r3, [r3, #20]
 80058a4:	005b      	lsls	r3, r3, #1
 80058a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80058ac:	4a28      	ldr	r2, [pc, #160]	; (8005950 <HAL_SD_ConfigWideBusOperation+0x224>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d906      	bls.n	80058c0 <HAL_SD_ConfigWideBusOperation+0x194>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 80058b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058b4:	4a24      	ldr	r2, [pc, #144]	; (8005948 <HAL_SD_ConfigWideBusOperation+0x21c>)
 80058b6:	fba2 2303 	umull	r2, r3, r2, r3
 80058ba:	0e1b      	lsrs	r3, r3, #24
 80058bc:	61fb      	str	r3, [r7, #28]
 80058be:	e002      	b.n	80058c6 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	695b      	ldr	r3, [r3, #20]
 80058c4:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      Init.Transceiver = hsd->Init.Transceiver;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	699b      	ldr	r3, [r3, #24]
 80058ca:	623b      	str	r3, [r7, #32]
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
      }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

      (void)SDMMC_Init(hsd->Instance, Init);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681d      	ldr	r5, [r3, #0]
 80058d0:	466c      	mov	r4, sp
 80058d2:	f107 0318 	add.w	r3, r7, #24
 80058d6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80058da:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80058de:	f107 030c 	add.w	r3, r7, #12
 80058e2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80058e4:	4628      	mov	r0, r5
 80058e6:	f001 fc9f 	bl	8007228 <SDMMC_Init>
 80058ea:	e008      	b.n	80058fe <HAL_SD_ConfigWideBusOperation+0x1d2>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058f0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	639a      	str	r2, [r3, #56]	; 0x38
      status = HAL_ERROR;
 80058f8:	2301      	movs	r3, #1
 80058fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005906:	4618      	mov	r0, r3
 8005908:	f001 fd5c 	bl	80073c4 <SDMMC_CmdBlockLength>
 800590c:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800590e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005910:	2b00      	cmp	r3, #0
 8005912:	d00c      	beq.n	800592e <HAL_SD_ConfigWideBusOperation+0x202>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	4a0a      	ldr	r2, [pc, #40]	; (8005944 <HAL_SD_ConfigWideBusOperation+0x218>)
 800591a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005922:	431a      	orrs	r2, r3
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8005928:	2301      	movs	r3, #1
 800592a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2201      	movs	r2, #1
 8005932:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8005936:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800593a:	4618      	mov	r0, r3
 800593c:	3730      	adds	r7, #48	; 0x30
 800593e:	46bd      	mov	sp, r7
 8005940:	bdb0      	pop	{r4, r5, r7, pc}
 8005942:	bf00      	nop
 8005944:	1fe00fff 	.word	0x1fe00fff
 8005948:	55e63b89 	.word	0x55e63b89
 800594c:	02faf080 	.word	0x02faf080
 8005950:	017d7840 	.word	0x017d7840

08005954 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b086      	sub	sp, #24
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800595c:	2300      	movs	r3, #0
 800595e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8005960:	f107 030c 	add.w	r3, r7, #12
 8005964:	4619      	mov	r1, r3
 8005966:	6878      	ldr	r0, [r7, #4]
 8005968:	f000 fab0 	bl	8005ecc <SD_SendStatus>
 800596c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800596e:	697b      	ldr	r3, [r7, #20]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d005      	beq.n	8005980 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005978:	697b      	ldr	r3, [r7, #20]
 800597a:	431a      	orrs	r2, r3
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	0a5b      	lsrs	r3, r3, #9
 8005984:	f003 030f 	and.w	r3, r3, #15
 8005988:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800598a:	693b      	ldr	r3, [r7, #16]
}
 800598c:	4618      	mov	r0, r3
 800598e:	3718      	adds	r7, #24
 8005990:	46bd      	mov	sp, r7
 8005992:	bd80      	pop	{r7, pc}

08005994 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005994:	b5b0      	push	{r4, r5, r7, lr}
 8005996:	b090      	sub	sp, #64	; 0x40
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800599c:	2301      	movs	r3, #1
 800599e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	4618      	mov	r0, r3
 80059a6:	f001 fc88 	bl	80072ba <SDMMC_GetPowerState>
 80059aa:	4603      	mov	r3, r0
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d102      	bne.n	80059b6 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80059b0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80059b4:	e0a9      	b.n	8005b0a <SD_InitCard+0x176>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059ba:	2b03      	cmp	r3, #3
 80059bc:	d02e      	beq.n	8005a1c <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	4618      	mov	r0, r3
 80059c4:	f001 fe0b 	bl	80075de <SDMMC_CmdSendCID>
 80059c8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80059ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d001      	beq.n	80059d4 <SD_InitCard+0x40>
    {
      return errorstate;
 80059d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059d2:	e09a      	b.n	8005b0a <SD_InitCard+0x176>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	2100      	movs	r1, #0
 80059da:	4618      	mov	r0, r3
 80059dc:	f001 fcb3 	bl	8007346 <SDMMC_GetResponse>
 80059e0:	4602      	mov	r2, r0
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	2104      	movs	r1, #4
 80059ec:	4618      	mov	r0, r3
 80059ee:	f001 fcaa 	bl	8007346 <SDMMC_GetResponse>
 80059f2:	4602      	mov	r2, r0
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	2108      	movs	r1, #8
 80059fe:	4618      	mov	r0, r3
 8005a00:	f001 fca1 	bl	8007346 <SDMMC_GetResponse>
 8005a04:	4602      	mov	r2, r0
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	210c      	movs	r1, #12
 8005a10:	4618      	mov	r0, r3
 8005a12:	f001 fc98 	bl	8007346 <SDMMC_GetResponse>
 8005a16:	4602      	mov	r2, r0
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	67da      	str	r2, [r3, #124]	; 0x7c
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a20:	2b03      	cmp	r3, #3
 8005a22:	d00d      	beq.n	8005a40 <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f107 020e 	add.w	r2, r7, #14
 8005a2c:	4611      	mov	r1, r2
 8005a2e:	4618      	mov	r0, r3
 8005a30:	f001 fe14 	bl	800765c <SDMMC_CmdSetRelAdd>
 8005a34:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005a36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d001      	beq.n	8005a40 <SD_InitCard+0xac>
    {
      return errorstate;
 8005a3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a3e:	e064      	b.n	8005b0a <SD_InitCard+0x176>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a44:	2b03      	cmp	r3, #3
 8005a46:	d036      	beq.n	8005ab6 <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8005a48:	89fb      	ldrh	r3, [r7, #14]
 8005a4a:	461a      	mov	r2, r3
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	649a      	str	r2, [r3, #72]	; 0x48

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681a      	ldr	r2, [r3, #0]
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a58:	041b      	lsls	r3, r3, #16
 8005a5a:	4619      	mov	r1, r3
 8005a5c:	4610      	mov	r0, r2
 8005a5e:	f001 fddd 	bl	800761c <SDMMC_CmdSendCSD>
 8005a62:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005a64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d001      	beq.n	8005a6e <SD_InitCard+0xda>
    {
      return errorstate;
 8005a6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a6c:	e04d      	b.n	8005b0a <SD_InitCard+0x176>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	2100      	movs	r1, #0
 8005a74:	4618      	mov	r0, r3
 8005a76:	f001 fc66 	bl	8007346 <SDMMC_GetResponse>
 8005a7a:	4602      	mov	r2, r0
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	2104      	movs	r1, #4
 8005a86:	4618      	mov	r0, r3
 8005a88:	f001 fc5d 	bl	8007346 <SDMMC_GetResponse>
 8005a8c:	4602      	mov	r2, r0
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	2108      	movs	r1, #8
 8005a98:	4618      	mov	r0, r3
 8005a9a:	f001 fc54 	bl	8007346 <SDMMC_GetResponse>
 8005a9e:	4602      	mov	r2, r0
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	210c      	movs	r1, #12
 8005aaa:	4618      	mov	r0, r3
 8005aac:	f001 fc4b 	bl	8007346 <SDMMC_GetResponse>
 8005ab0:	4602      	mov	r2, r0
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	66da      	str	r2, [r3, #108]	; 0x6c
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	2104      	movs	r1, #4
 8005abc:	4618      	mov	r0, r3
 8005abe:	f001 fc42 	bl	8007346 <SDMMC_GetResponse>
 8005ac2:	4603      	mov	r3, r0
 8005ac4:	0d1a      	lsrs	r2, r3, #20
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8005aca:	f107 0310 	add.w	r3, r7, #16
 8005ace:	4619      	mov	r1, r3
 8005ad0:	6878      	ldr	r0, [r7, #4]
 8005ad2:	f7ff fbd1 	bl	8005278 <HAL_SD_GetCardCSD>
 8005ad6:	4603      	mov	r3, r0
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d002      	beq.n	8005ae2 <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005adc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005ae0:	e013      	b.n	8005b0a <SD_InitCard+0x176>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6819      	ldr	r1, [r3, #0]
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005aea:	041b      	lsls	r3, r3, #16
 8005aec:	2200      	movs	r2, #0
 8005aee:	461c      	mov	r4, r3
 8005af0:	4615      	mov	r5, r2
 8005af2:	4622      	mov	r2, r4
 8005af4:	462b      	mov	r3, r5
 8005af6:	4608      	mov	r0, r1
 8005af8:	f001 fc87 	bl	800740a <SDMMC_CmdSelDesel>
 8005afc:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8005afe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d001      	beq.n	8005b08 <SD_InitCard+0x174>
  {
    return errorstate;
 8005b04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b06:	e000      	b.n	8005b0a <SD_InitCard+0x176>
  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8005b08:	2300      	movs	r3, #0
}
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	3740      	adds	r7, #64	; 0x40
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	bdb0      	pop	{r4, r5, r7, pc}
	...

08005b14 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b088      	sub	sp, #32
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	60fb      	str	r3, [r7, #12]
  uint32_t response = 0U, validvoltage = 0U;
 8005b20:	2300      	movs	r3, #0
 8005b22:	61fb      	str	r3, [r7, #28]
 8005b24:	2300      	movs	r3, #0
 8005b26:	61bb      	str	r3, [r7, #24]
  uint32_t errorstate;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t tickstart = HAL_GetTick();
 8005b28:	f7fb fe32 	bl	8001790 <HAL_GetTick>
 8005b2c:	6178      	str	r0, [r7, #20]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	4618      	mov	r0, r3
 8005b34:	f001 fc8d 	bl	8007452 <SDMMC_CmdGoIdleState>
 8005b38:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005b3a:	693b      	ldr	r3, [r7, #16]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d001      	beq.n	8005b44 <SD_PowerON+0x30>
  {
    return errorstate;
 8005b40:	693b      	ldr	r3, [r7, #16]
 8005b42:	e0ed      	b.n	8005d20 <SD_PowerON+0x20c>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	4618      	mov	r0, r3
 8005b4a:	f001 fca0 	bl	800748e <SDMMC_CmdOperCond>
 8005b4e:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005b50:	693b      	ldr	r3, [r7, #16]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d00d      	beq.n	8005b72 <SD_PowerON+0x5e>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2200      	movs	r2, #0
 8005b5a:	641a      	str	r2, [r3, #64]	; 0x40
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	4618      	mov	r0, r3
 8005b62:	f001 fc76 	bl	8007452 <SDMMC_CmdGoIdleState>
 8005b66:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005b68:	693b      	ldr	r3, [r7, #16]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d004      	beq.n	8005b78 <SD_PowerON+0x64>
    {
      return errorstate;
 8005b6e:	693b      	ldr	r3, [r7, #16]
 8005b70:	e0d6      	b.n	8005d20 <SD_PowerON+0x20c>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2201      	movs	r2, #1
 8005b76:	641a      	str	r2, [r3, #64]	; 0x40
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b7c:	2b01      	cmp	r3, #1
 8005b7e:	d137      	bne.n	8005bf0 <SD_PowerON+0xdc>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	2100      	movs	r1, #0
 8005b86:	4618      	mov	r0, r3
 8005b88:	f001 fca1 	bl	80074ce <SDMMC_CmdAppCommand>
 8005b8c:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005b8e:	693b      	ldr	r3, [r7, #16]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d02d      	beq.n	8005bf0 <SD_PowerON+0xdc>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005b94:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005b98:	e0c2      	b.n	8005d20 <SD_PowerON+0x20c>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	2100      	movs	r1, #0
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	f001 fc94 	bl	80074ce <SDMMC_CmdAppCommand>
 8005ba6:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005ba8:	693b      	ldr	r3, [r7, #16]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d001      	beq.n	8005bb2 <SD_PowerON+0x9e>
    {
      return errorstate;
 8005bae:	693b      	ldr	r3, [r7, #16]
 8005bb0:	e0b6      	b.n	8005d20 <SD_PowerON+0x20c>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	495c      	ldr	r1, [pc, #368]	; (8005d28 <SD_PowerON+0x214>)
 8005bb8:	4618      	mov	r0, r3
 8005bba:	f001 fcab 	bl	8007514 <SDMMC_CmdAppOperCommand>
 8005bbe:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005bc0:	693b      	ldr	r3, [r7, #16]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d002      	beq.n	8005bcc <SD_PowerON+0xb8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005bc6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005bca:	e0a9      	b.n	8005d20 <SD_PowerON+0x20c>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	2100      	movs	r1, #0
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	f001 fbb7 	bl	8007346 <SDMMC_GetResponse>
 8005bd8:	61f8      	str	r0, [r7, #28]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8005bda:	69fb      	ldr	r3, [r7, #28]
 8005bdc:	0fdb      	lsrs	r3, r3, #31
 8005bde:	2b01      	cmp	r3, #1
 8005be0:	d101      	bne.n	8005be6 <SD_PowerON+0xd2>
 8005be2:	2301      	movs	r3, #1
 8005be4:	e000      	b.n	8005be8 <SD_PowerON+0xd4>
 8005be6:	2300      	movs	r3, #0
 8005be8:	61bb      	str	r3, [r7, #24]

    count++;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	3301      	adds	r3, #1
 8005bee:	60fb      	str	r3, [r7, #12]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d802      	bhi.n	8005c00 <SD_PowerON+0xec>
 8005bfa:	69bb      	ldr	r3, [r7, #24]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d0cc      	beq.n	8005b9a <SD_PowerON+0x86>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d902      	bls.n	8005c10 <SD_PowerON+0xfc>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8005c0a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005c0e:	e087      	b.n	8005d20 <SD_PowerON+0x20c>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8005c10:	69fb      	ldr	r3, [r7, #28]
 8005c12:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d07e      	beq.n	8005d18 <SD_PowerON+0x204>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2201      	movs	r2, #1
 8005c1e:	63da      	str	r2, [r3, #60]	; 0x3c
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	699b      	ldr	r3, [r3, #24]
 8005c24:	2b01      	cmp	r3, #1
 8005c26:	d17a      	bne.n	8005d1e <SD_PowerON+0x20a>
    {
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 8005c28:	69fb      	ldr	r3, [r7, #28]
 8005c2a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d075      	beq.n	8005d1e <SD_PowerON+0x20a>
      {
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c38:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Start switching procedue */
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	681a      	ldr	r2, [r3, #0]
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f042 0208 	orr.w	r2, r2, #8
 8005c48:	601a      	str	r2, [r3, #0]

        /* Send CMD11 to switch 1.8V mode */
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	4618      	mov	r0, r3
 8005c50:	f001 fd6b 	bl	800772a <SDMMC_CmdVoltageSwitch>
 8005c54:	6138      	str	r0, [r7, #16]
        if(errorstate != HAL_SD_ERROR_NONE)
 8005c56:	693b      	ldr	r3, [r7, #16]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d00c      	beq.n	8005c76 <SD_PowerON+0x162>
        {
          return errorstate;
 8005c5c:	693b      	ldr	r3, [r7, #16]
 8005c5e:	e05f      	b.n	8005d20 <SD_PowerON+0x20c>
        }

        /* Check to CKSTOP */
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
        {
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8005c60:	f7fb fd96 	bl	8001790 <HAL_GetTick>
 8005c64:	4602      	mov	r2, r0
 8005c66:	697b      	ldr	r3, [r7, #20]
 8005c68:	1ad3      	subs	r3, r2, r3
 8005c6a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005c6e:	d102      	bne.n	8005c76 <SD_PowerON+0x162>
          {
            return HAL_SD_ERROR_TIMEOUT;
 8005c70:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005c74:	e054      	b.n	8005d20 <SD_PowerON+0x20c>
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c7c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005c80:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005c84:	d1ec      	bne.n	8005c60 <SD_PowerON+0x14c>
          }
        }

        /* Clear CKSTOP Flag */
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8005c8e:	639a      	str	r2, [r3, #56]	; 0x38

        /* Check to BusyD0 */
        if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005c9a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c9e:	d002      	beq.n	8005ca6 <SD_PowerON+0x192>
        {
          /* Error when activate Voltage Switch in SDMMC Peripheral */
          return SDMMC_ERROR_UNSUPPORTED_FEATURE;
 8005ca0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005ca4:	e03c      	b.n	8005d20 <SD_PowerON+0x20c>
        {
          /* Enable Transceiver Switch PIN */
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->DriveTransceiver_1_8V_Callback(SET);
#else
          HAL_SDEx_DriveTransceiver_1_8V_Callback(SET);
 8005ca6:	2001      	movs	r0, #1
 8005ca8:	f000 fa9e 	bl	80061e8 <HAL_SDEx_DriveTransceiver_1_8V_Callback>
#endif

          /* Switch ready */
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	681a      	ldr	r2, [r3, #0]
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f042 0204 	orr.w	r2, r2, #4
 8005cba:	601a      	str	r2, [r3, #0]

          /* Check VSWEND Flag */
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 8005cbc:	e00a      	b.n	8005cd4 <SD_PowerON+0x1c0>
          {
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8005cbe:	f7fb fd67 	bl	8001790 <HAL_GetTick>
 8005cc2:	4602      	mov	r2, r0
 8005cc4:	697b      	ldr	r3, [r7, #20]
 8005cc6:	1ad3      	subs	r3, r2, r3
 8005cc8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ccc:	d102      	bne.n	8005cd4 <SD_PowerON+0x1c0>
            {
              return HAL_SD_ERROR_TIMEOUT;
 8005cce:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005cd2:	e025      	b.n	8005d20 <SD_PowerON+0x20c>
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cde:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005ce2:	d1ec      	bne.n	8005cbe <SD_PowerON+0x1aa>
            }
          }

          /* Clear VSWEND Flag */
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005cec:	639a      	str	r2, [r3, #56]	; 0x38

          /* Check BusyD0 status */
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cf4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005cf8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005cfc:	d102      	bne.n	8005d04 <SD_PowerON+0x1f0>
          {
            /* Error when enabling 1.8V mode */
            return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8005cfe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005d02:	e00d      	b.n	8005d20 <SD_PowerON+0x20c>
          }
          /* Switch to 1.8V OK */

          /* Disable VSWITCH FLAG from SDMMC Peripheral */
          hsd->Instance->POWER = 0x13U;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	2213      	movs	r2, #19
 8005d0a:	601a      	str	r2, [r3, #0]

          /* Clean Status flags */
          hsd->Instance->ICR = 0xFFFFFFFFU;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005d14:	639a      	str	r2, [r3, #56]	; 0x38
 8005d16:	e002      	b.n	8005d1e <SD_PowerON+0x20a>
    }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	63da      	str	r2, [r3, #60]	; 0x3c
  }


  return HAL_SD_ERROR_NONE;
 8005d1e:	2300      	movs	r3, #0
}
 8005d20:	4618      	mov	r0, r3
 8005d22:	3720      	adds	r7, #32
 8005d24:	46bd      	mov	sp, r7
 8005d26:	bd80      	pop	{r7, pc}
 8005d28:	c1100000 	.word	0xc1100000

08005d2c <SD_SendSDStatus>:
  * @param  pSDstatus Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b08c      	sub	sp, #48	; 0x30
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
 8005d34:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8005d36:	f7fb fd2b 	bl	8001790 <HAL_GetTick>
 8005d3a:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	2100      	movs	r1, #0
 8005d46:	4618      	mov	r0, r3
 8005d48:	f001 fafd 	bl	8007346 <SDMMC_GetResponse>
 8005d4c:	4603      	mov	r3, r0
 8005d4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d52:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005d56:	d102      	bne.n	8005d5e <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8005d58:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005d5c:	e0b0      	b.n	8005ec0 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	2140      	movs	r1, #64	; 0x40
 8005d64:	4618      	mov	r0, r3
 8005d66:	f001 fb2d 	bl	80073c4 <SDMMC_CmdBlockLength>
 8005d6a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005d6c:	6a3b      	ldr	r3, [r7, #32]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d005      	beq.n	8005d7e <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8005d7a:	6a3b      	ldr	r3, [r7, #32]
 8005d7c:	e0a0      	b.n	8005ec0 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681a      	ldr	r2, [r3, #0]
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d86:	041b      	lsls	r3, r3, #16
 8005d88:	4619      	mov	r1, r3
 8005d8a:	4610      	mov	r0, r2
 8005d8c:	f001 fb9f 	bl	80074ce <SDMMC_CmdAppCommand>
 8005d90:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005d92:	6a3b      	ldr	r3, [r7, #32]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d005      	beq.n	8005da4 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8005da0:	6a3b      	ldr	r3, [r7, #32]
 8005da2:	e08d      	b.n	8005ec0 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005da4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005da8:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 8005daa:	2340      	movs	r3, #64	; 0x40
 8005dac:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8005dae:	2360      	movs	r3, #96	; 0x60
 8005db0:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8005db2:	2302      	movs	r3, #2
 8005db4:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8005db6:	2300      	movs	r3, #0
 8005db8:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8005dba:	2301      	movs	r3, #1
 8005dbc:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f107 0208 	add.w	r2, r7, #8
 8005dc6:	4611      	mov	r1, r2
 8005dc8:	4618      	mov	r0, r3
 8005dca:	f001 facf 	bl	800736c <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	f001 fc87 	bl	80076e6 <SDMMC_CmdStatusRegister>
 8005dd8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005dda:	6a3b      	ldr	r3, [r7, #32]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d02b      	beq.n	8005e38 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8005de8:	6a3b      	ldr	r3, [r7, #32]
 8005dea:	e069      	b.n	8005ec0 <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
#else
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005df2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d013      	beq.n	8005e22 <SD_SendSDStatus+0xf6>
    {
      for(count = 0U; count < 8U; count++)
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005dfe:	e00d      	b.n	8005e1c <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	4618      	mov	r0, r3
 8005e06:	f001 fa39 	bl	800727c <SDMMC_ReadFIFO>
 8005e0a:	4602      	mov	r2, r0
 8005e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e0e:	601a      	str	r2, [r3, #0]
        pData++;
 8005e10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e12:	3304      	adds	r3, #4
 8005e14:	62bb      	str	r3, [r7, #40]	; 0x28
      for(count = 0U; count < 8U; count++)
 8005e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e18:	3301      	adds	r3, #1
 8005e1a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005e1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e1e:	2b07      	cmp	r3, #7
 8005e20:	d9ee      	bls.n	8005e00 <SD_SendSDStatus+0xd4>
      }
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8005e22:	f7fb fcb5 	bl	8001790 <HAL_GetTick>
 8005e26:	4602      	mov	r2, r0
 8005e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e2a:	1ad3      	subs	r3, r2, r3
 8005e2c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005e30:	d102      	bne.n	8005e38 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8005e32:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005e36:	e043      	b.n	8005ec0 <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e3e:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d0d2      	beq.n	8005dec <SD_SendSDStatus+0xc0>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e4c:	f003 0308 	and.w	r3, r3, #8
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d001      	beq.n	8005e58 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8005e54:	2308      	movs	r3, #8
 8005e56:	e033      	b.n	8005ec0 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e5e:	f003 0302 	and.w	r3, r3, #2
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d001      	beq.n	8005e6a <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8005e66:	2302      	movs	r3, #2
 8005e68:	e02a      	b.n	8005ec0 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e70:	f003 0320 	and.w	r3, r3, #32
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d017      	beq.n	8005ea8 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8005e78:	2320      	movs	r3, #32
 8005e7a:	e021      	b.n	8005ec0 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
#else
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)))
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	4618      	mov	r0, r3
 8005e82:	f001 f9fb 	bl	800727c <SDMMC_ReadFIFO>
 8005e86:	4602      	mov	r2, r0
 8005e88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e8a:	601a      	str	r2, [r3, #0]
    pData++;
 8005e8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e8e:	3304      	adds	r3, #4
 8005e90:	62bb      	str	r3, [r7, #40]	; 0x28

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8005e92:	f7fb fc7d 	bl	8001790 <HAL_GetTick>
 8005e96:	4602      	mov	r2, r0
 8005e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e9a:	1ad3      	subs	r3, r2, r3
 8005e9c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ea0:	d102      	bne.n	8005ea8 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8005ea2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005ea6:	e00b      	b.n	8005ec0 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005eae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d1e2      	bne.n	8005e7c <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	4a03      	ldr	r2, [pc, #12]	; (8005ec8 <SD_SendSDStatus+0x19c>)
 8005ebc:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 8005ebe:	2300      	movs	r3, #0
}
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	3730      	adds	r7, #48	; 0x30
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	bd80      	pop	{r7, pc}
 8005ec8:	18000f3a 	.word	0x18000f3a

08005ecc <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b084      	sub	sp, #16
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
 8005ed4:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d102      	bne.n	8005ee2 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8005edc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005ee0:	e018      	b.n	8005f14 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681a      	ldr	r2, [r3, #0]
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005eea:	041b      	lsls	r3, r3, #16
 8005eec:	4619      	mov	r1, r3
 8005eee:	4610      	mov	r0, r2
 8005ef0:	f001 fbd6 	bl	80076a0 <SDMMC_CmdSendStatus>
 8005ef4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d001      	beq.n	8005f00 <SD_SendStatus+0x34>
  {
    return errorstate;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	e009      	b.n	8005f14 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	2100      	movs	r1, #0
 8005f06:	4618      	mov	r0, r3
 8005f08:	f001 fa1d 	bl	8007346 <SDMMC_GetResponse>
 8005f0c:	4602      	mov	r2, r0
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8005f12:	2300      	movs	r3, #0
}
 8005f14:	4618      	mov	r0, r3
 8005f16:	3710      	adds	r7, #16
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	bd80      	pop	{r7, pc}

08005f1c <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b086      	sub	sp, #24
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8005f24:	2300      	movs	r3, #0
 8005f26:	60fb      	str	r3, [r7, #12]
 8005f28:	2300      	movs	r3, #0
 8005f2a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	2100      	movs	r1, #0
 8005f32:	4618      	mov	r0, r3
 8005f34:	f001 fa07 	bl	8007346 <SDMMC_GetResponse>
 8005f38:	4603      	mov	r3, r0
 8005f3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f3e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005f42:	d102      	bne.n	8005f4a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8005f44:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005f48:	e02f      	b.n	8005faa <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8005f4a:	f107 030c 	add.w	r3, r7, #12
 8005f4e:	4619      	mov	r1, r3
 8005f50:	6878      	ldr	r0, [r7, #4]
 8005f52:	f000 f879 	bl	8006048 <SD_FindSCR>
 8005f56:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005f58:	697b      	ldr	r3, [r7, #20]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d001      	beq.n	8005f62 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8005f5e:	697b      	ldr	r3, [r7, #20]
 8005f60:	e023      	b.n	8005faa <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8005f62:	693b      	ldr	r3, [r7, #16]
 8005f64:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d01c      	beq.n	8005fa6 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681a      	ldr	r2, [r3, #0]
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f74:	041b      	lsls	r3, r3, #16
 8005f76:	4619      	mov	r1, r3
 8005f78:	4610      	mov	r0, r2
 8005f7a:	f001 faa8 	bl	80074ce <SDMMC_CmdAppCommand>
 8005f7e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005f80:	697b      	ldr	r3, [r7, #20]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d001      	beq.n	8005f8a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8005f86:	697b      	ldr	r3, [r7, #20]
 8005f88:	e00f      	b.n	8005faa <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	2102      	movs	r1, #2
 8005f90:	4618      	mov	r0, r3
 8005f92:	f001 fadf 	bl	8007554 <SDMMC_CmdBusWidth>
 8005f96:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005f98:	697b      	ldr	r3, [r7, #20]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d001      	beq.n	8005fa2 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8005f9e:	697b      	ldr	r3, [r7, #20]
 8005fa0:	e003      	b.n	8005faa <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	e001      	b.n	8005faa <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005fa6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8005faa:	4618      	mov	r0, r3
 8005fac:	3718      	adds	r7, #24
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	bd80      	pop	{r7, pc}

08005fb2 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8005fb2:	b580      	push	{r7, lr}
 8005fb4:	b086      	sub	sp, #24
 8005fb6:	af00      	add	r7, sp, #0
 8005fb8:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8005fba:	2300      	movs	r3, #0
 8005fbc:	60fb      	str	r3, [r7, #12]
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	2100      	movs	r1, #0
 8005fc8:	4618      	mov	r0, r3
 8005fca:	f001 f9bc 	bl	8007346 <SDMMC_GetResponse>
 8005fce:	4603      	mov	r3, r0
 8005fd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005fd4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005fd8:	d102      	bne.n	8005fe0 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8005fda:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005fde:	e02f      	b.n	8006040 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8005fe0:	f107 030c 	add.w	r3, r7, #12
 8005fe4:	4619      	mov	r1, r3
 8005fe6:	6878      	ldr	r0, [r7, #4]
 8005fe8:	f000 f82e 	bl	8006048 <SD_FindSCR>
 8005fec:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005fee:	697b      	ldr	r3, [r7, #20]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d001      	beq.n	8005ff8 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8005ff4:	697b      	ldr	r3, [r7, #20]
 8005ff6:	e023      	b.n	8006040 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8005ff8:	693b      	ldr	r3, [r7, #16]
 8005ffa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d01c      	beq.n	800603c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681a      	ldr	r2, [r3, #0]
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800600a:	041b      	lsls	r3, r3, #16
 800600c:	4619      	mov	r1, r3
 800600e:	4610      	mov	r0, r2
 8006010:	f001 fa5d 	bl	80074ce <SDMMC_CmdAppCommand>
 8006014:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006016:	697b      	ldr	r3, [r7, #20]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d001      	beq.n	8006020 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800601c:	697b      	ldr	r3, [r7, #20]
 800601e:	e00f      	b.n	8006040 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	2100      	movs	r1, #0
 8006026:	4618      	mov	r0, r3
 8006028:	f001 fa94 	bl	8007554 <SDMMC_CmdBusWidth>
 800602c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800602e:	697b      	ldr	r3, [r7, #20]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d001      	beq.n	8006038 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8006034:	697b      	ldr	r3, [r7, #20]
 8006036:	e003      	b.n	8006040 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8006038:	2300      	movs	r3, #0
 800603a:	e001      	b.n	8006040 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800603c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8006040:	4618      	mov	r0, r3
 8006042:	3718      	adds	r7, #24
 8006044:	46bd      	mov	sp, r7
 8006046:	bd80      	pop	{r7, pc}

08006048 <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8006048:	b580      	push	{r7, lr}
 800604a:	b08e      	sub	sp, #56	; 0x38
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
 8006050:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8006052:	f7fb fb9d 	bl	8001790 <HAL_GetTick>
 8006056:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8006058:	2300      	movs	r3, #0
 800605a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800605c:	2300      	movs	r3, #0
 800605e:	60bb      	str	r3, [r7, #8]
 8006060:	2300      	movs	r3, #0
 8006062:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	2108      	movs	r1, #8
 800606e:	4618      	mov	r0, r3
 8006070:	f001 f9a8 	bl	80073c4 <SDMMC_CmdBlockLength>
 8006074:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8006076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006078:	2b00      	cmp	r3, #0
 800607a:	d001      	beq.n	8006080 <SD_FindSCR+0x38>
  {
    return errorstate;
 800607c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800607e:	e0ad      	b.n	80061dc <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681a      	ldr	r2, [r3, #0]
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006088:	041b      	lsls	r3, r3, #16
 800608a:	4619      	mov	r1, r3
 800608c:	4610      	mov	r0, r2
 800608e:	f001 fa1e 	bl	80074ce <SDMMC_CmdAppCommand>
 8006092:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8006094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006096:	2b00      	cmp	r3, #0
 8006098:	d001      	beq.n	800609e <SD_FindSCR+0x56>
  {
    return errorstate;
 800609a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800609c:	e09e      	b.n	80061dc <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800609e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80060a2:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 80060a4:	2308      	movs	r3, #8
 80060a6:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 80060a8:	2330      	movs	r3, #48	; 0x30
 80060aa:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80060ac:	2302      	movs	r3, #2
 80060ae:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80060b0:	2300      	movs	r3, #0
 80060b2:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80060b4:	2301      	movs	r3, #1
 80060b6:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f107 0210 	add.w	r2, r7, #16
 80060c0:	4611      	mov	r1, r2
 80060c2:	4618      	mov	r0, r3
 80060c4:	f001 f952 	bl	800736c <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	4618      	mov	r0, r3
 80060ce:	f001 fa64 	bl	800759a <SDMMC_CmdSendSCR>
 80060d2:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80060d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d027      	beq.n	800612a <SD_FindSCR+0xe2>
  {
    return errorstate;
 80060da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060dc:	e07e      	b.n	80061dc <SD_FindSCR+0x194>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
  {
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060e4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d113      	bne.n	8006114 <SD_FindSCR+0xcc>
 80060ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d110      	bne.n	8006114 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	4618      	mov	r0, r3
 80060f8:	f001 f8c0 	bl	800727c <SDMMC_ReadFIFO>
 80060fc:	4603      	mov	r3, r0
 80060fe:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	4618      	mov	r0, r3
 8006106:	f001 f8b9 	bl	800727c <SDMMC_ReadFIFO>
 800610a:	4603      	mov	r3, r0
 800610c:	60fb      	str	r3, [r7, #12]
      index++;
 800610e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006110:	3301      	adds	r3, #1
 8006112:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8006114:	f7fb fb3c 	bl	8001790 <HAL_GetTick>
 8006118:	4602      	mov	r2, r0
 800611a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800611c:	1ad3      	subs	r3, r2, r3
 800611e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006122:	d102      	bne.n	800612a <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8006124:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006128:	e058      	b.n	80061dc <SD_FindSCR+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006130:	f240 532a 	movw	r3, #1322	; 0x52a
 8006134:	4013      	ands	r3, r2
 8006136:	2b00      	cmp	r3, #0
 8006138:	d0d1      	beq.n	80060de <SD_FindSCR+0x96>
      return HAL_SD_ERROR_TIMEOUT;
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006140:	f003 0308 	and.w	r3, r3, #8
 8006144:	2b00      	cmp	r3, #0
 8006146:	d005      	beq.n	8006154 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	2208      	movs	r2, #8
 800614e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8006150:	2308      	movs	r3, #8
 8006152:	e043      	b.n	80061dc <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800615a:	f003 0302 	and.w	r3, r3, #2
 800615e:	2b00      	cmp	r3, #0
 8006160:	d005      	beq.n	800616e <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	2202      	movs	r2, #2
 8006168:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800616a:	2302      	movs	r3, #2
 800616c:	e036      	b.n	80061dc <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006174:	f003 0320 	and.w	r3, r3, #32
 8006178:	2b00      	cmp	r3, #0
 800617a:	d005      	beq.n	8006188 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	2220      	movs	r2, #32
 8006182:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8006184:	2320      	movs	r3, #32
 8006186:	e029      	b.n	80061dc <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	4a15      	ldr	r2, [pc, #84]	; (80061e4 <SD_FindSCR+0x19c>)
 800618e:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	061a      	lsls	r2, r3, #24
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	021b      	lsls	r3, r3, #8
 8006198:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800619c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	0a1b      	lsrs	r3, r3, #8
 80061a2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80061a6:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	0e1b      	lsrs	r3, r3, #24
 80061ac:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80061ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061b0:	601a      	str	r2, [r3, #0]
    scr++;
 80061b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061b4:	3304      	adds	r3, #4
 80061b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80061b8:	68bb      	ldr	r3, [r7, #8]
 80061ba:	061a      	lsls	r2, r3, #24
 80061bc:	68bb      	ldr	r3, [r7, #8]
 80061be:	021b      	lsls	r3, r3, #8
 80061c0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80061c4:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80061c6:	68bb      	ldr	r3, [r7, #8]
 80061c8:	0a1b      	lsrs	r3, r3, #8
 80061ca:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80061ce:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80061d0:	68bb      	ldr	r3, [r7, #8]
 80061d2:	0e1b      	lsrs	r3, r3, #24
 80061d4:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80061d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061d8:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80061da:	2300      	movs	r3, #0
}
 80061dc:	4618      	mov	r0, r3
 80061de:	3738      	adds	r7, #56	; 0x38
 80061e0:	46bd      	mov	sp, r7
 80061e2:	bd80      	pop	{r7, pc}
 80061e4:	18000f3a 	.word	0x18000f3a

080061e8 <HAL_SDEx_DriveTransceiver_1_8V_Callback>:
  * @brief  Enable/Disable the SD Transceiver 1.8V Mode Callback.
  * @param  status Voltage Switch State
  * @retval None
  */
__weak void HAL_SDEx_DriveTransceiver_1_8V_Callback(FlagStatus status)
{
 80061e8:	b480      	push	{r7}
 80061ea:	b083      	sub	sp, #12
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	4603      	mov	r3, r0
 80061f0:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SD_EnableTransciver could be implemented in the user file
   */
}
 80061f2:	bf00      	nop
 80061f4:	370c      	adds	r7, #12
 80061f6:	46bd      	mov	sp, r7
 80061f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fc:	4770      	bx	lr

080061fe <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80061fe:	b580      	push	{r7, lr}
 8006200:	b084      	sub	sp, #16
 8006202:	af00      	add	r7, sp, #0
 8006204:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d101      	bne.n	8006210 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800620c:	2301      	movs	r3, #1
 800620e:	e095      	b.n	800633c <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006214:	2b00      	cmp	r3, #0
 8006216:	d108      	bne.n	800622a <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	685b      	ldr	r3, [r3, #4]
 800621c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006220:	d009      	beq.n	8006236 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2200      	movs	r2, #0
 8006226:	61da      	str	r2, [r3, #28]
 8006228:	e005      	b.n	8006236 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	2200      	movs	r2, #0
 800622e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2200      	movs	r2, #0
 8006234:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	2200      	movs	r2, #0
 800623a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006242:	b2db      	uxtb	r3, r3
 8006244:	2b00      	cmp	r3, #0
 8006246:	d106      	bne.n	8006256 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2200      	movs	r2, #0
 800624c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006250:	6878      	ldr	r0, [r7, #4]
 8006252:	f7fa ffa3 	bl	800119c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	2202      	movs	r2, #2
 800625a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	681a      	ldr	r2, [r3, #0]
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800626c:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	68db      	ldr	r3, [r3, #12]
 8006272:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006276:	d902      	bls.n	800627e <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006278:	2300      	movs	r3, #0
 800627a:	60fb      	str	r3, [r7, #12]
 800627c:	e002      	b.n	8006284 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800627e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006282:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	68db      	ldr	r3, [r3, #12]
 8006288:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800628c:	d007      	beq.n	800629e <HAL_SPI_Init+0xa0>
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	68db      	ldr	r3, [r3, #12]
 8006292:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006296:	d002      	beq.n	800629e <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2200      	movs	r2, #0
 800629c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	685b      	ldr	r3, [r3, #4]
 80062a2:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	689b      	ldr	r3, [r3, #8]
 80062aa:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80062ae:	431a      	orrs	r2, r3
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	691b      	ldr	r3, [r3, #16]
 80062b4:	f003 0302 	and.w	r3, r3, #2
 80062b8:	431a      	orrs	r2, r3
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	695b      	ldr	r3, [r3, #20]
 80062be:	f003 0301 	and.w	r3, r3, #1
 80062c2:	431a      	orrs	r2, r3
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	699b      	ldr	r3, [r3, #24]
 80062c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80062cc:	431a      	orrs	r2, r3
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	69db      	ldr	r3, [r3, #28]
 80062d2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80062d6:	431a      	orrs	r2, r3
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	6a1b      	ldr	r3, [r3, #32]
 80062dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062e0:	ea42 0103 	orr.w	r1, r2, r3
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062e8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	430a      	orrs	r2, r1
 80062f2:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	699b      	ldr	r3, [r3, #24]
 80062f8:	0c1b      	lsrs	r3, r3, #16
 80062fa:	f003 0204 	and.w	r2, r3, #4
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006302:	f003 0310 	and.w	r3, r3, #16
 8006306:	431a      	orrs	r2, r3
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800630c:	f003 0308 	and.w	r3, r3, #8
 8006310:	431a      	orrs	r2, r3
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	68db      	ldr	r3, [r3, #12]
 8006316:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800631a:	ea42 0103 	orr.w	r1, r2, r3
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	430a      	orrs	r2, r1
 800632a:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2200      	movs	r2, #0
 8006330:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	2201      	movs	r2, #1
 8006336:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800633a:	2300      	movs	r3, #0
}
 800633c:	4618      	mov	r0, r3
 800633e:	3710      	adds	r7, #16
 8006340:	46bd      	mov	sp, r7
 8006342:	bd80      	pop	{r7, pc}

08006344 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b084      	sub	sp, #16
 8006348:	af00      	add	r7, sp, #0
 800634a:	60f8      	str	r0, [r7, #12]
 800634c:	60b9      	str	r1, [r7, #8]
 800634e:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d101      	bne.n	800635a <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 8006356:	2301      	movs	r3, #1
 8006358:	e038      	b.n	80063cc <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8006360:	b2db      	uxtb	r3, r3
 8006362:	2b00      	cmp	r3, #0
 8006364:	d106      	bne.n	8006374 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	2200      	movs	r2, #0
 800636a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 800636e:	68f8      	ldr	r0, [r7, #12]
 8006370:	f7fb f8ba 	bl	80014e8 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	681a      	ldr	r2, [r3, #0]
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	3308      	adds	r3, #8
 800637c:	4619      	mov	r1, r3
 800637e:	4610      	mov	r0, r2
 8006380:	f000 fe2c 	bl	8006fdc <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	6818      	ldr	r0, [r3, #0]
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	689b      	ldr	r3, [r3, #8]
 800638c:	461a      	mov	r2, r3
 800638e:	68b9      	ldr	r1, [r7, #8]
 8006390:	f000 febe 	bl	8007110 <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	6858      	ldr	r0, [r3, #4]
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	689a      	ldr	r2, [r3, #8]
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063a0:	6879      	ldr	r1, [r7, #4]
 80063a2:	f000 ff07 	bl	80071b4 <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	68fa      	ldr	r2, [r7, #12]
 80063ac:	6892      	ldr	r2, [r2, #8]
 80063ae:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	68fa      	ldr	r2, [r7, #12]
 80063b8:	6892      	ldr	r2, [r2, #8]
 80063ba:	f041 0101 	orr.w	r1, r1, #1
 80063be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	2201      	movs	r2, #1
 80063c6:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  return HAL_OK;
 80063ca:	2300      	movs	r3, #0
}
 80063cc:	4618      	mov	r0, r3
 80063ce:	3710      	adds	r7, #16
 80063d0:	46bd      	mov	sp, r7
 80063d2:	bd80      	pop	{r7, pc}

080063d4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b082      	sub	sp, #8
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d101      	bne.n	80063e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80063e2:	2301      	movs	r3, #1
 80063e4:	e042      	b.n	800646c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d106      	bne.n	80063fe <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2200      	movs	r2, #0
 80063f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80063f8:	6878      	ldr	r0, [r7, #4]
 80063fa:	f7fa ff31 	bl	8001260 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	2224      	movs	r2, #36	; 0x24
 8006402:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	681a      	ldr	r2, [r3, #0]
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f022 0201 	bic.w	r2, r2, #1
 8006414:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006416:	6878      	ldr	r0, [r7, #4]
 8006418:	f000 f82c 	bl	8006474 <UART_SetConfig>
 800641c:	4603      	mov	r3, r0
 800641e:	2b01      	cmp	r3, #1
 8006420:	d101      	bne.n	8006426 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006422:	2301      	movs	r3, #1
 8006424:	e022      	b.n	800646c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800642a:	2b00      	cmp	r3, #0
 800642c:	d002      	beq.n	8006434 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800642e:	6878      	ldr	r0, [r7, #4]
 8006430:	f000 fb1c 	bl	8006a6c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	685a      	ldr	r2, [r3, #4]
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006442:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	689a      	ldr	r2, [r3, #8]
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006452:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	681a      	ldr	r2, [r3, #0]
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f042 0201 	orr.w	r2, r2, #1
 8006462:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006464:	6878      	ldr	r0, [r7, #4]
 8006466:	f000 fba3 	bl	8006bb0 <UART_CheckIdleState>
 800646a:	4603      	mov	r3, r0
}
 800646c:	4618      	mov	r0, r3
 800646e:	3708      	adds	r7, #8
 8006470:	46bd      	mov	sp, r7
 8006472:	bd80      	pop	{r7, pc}

08006474 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006474:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006478:	b08c      	sub	sp, #48	; 0x30
 800647a:	af00      	add	r7, sp, #0
 800647c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800647e:	2300      	movs	r3, #0
 8006480:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006484:	697b      	ldr	r3, [r7, #20]
 8006486:	689a      	ldr	r2, [r3, #8]
 8006488:	697b      	ldr	r3, [r7, #20]
 800648a:	691b      	ldr	r3, [r3, #16]
 800648c:	431a      	orrs	r2, r3
 800648e:	697b      	ldr	r3, [r7, #20]
 8006490:	695b      	ldr	r3, [r3, #20]
 8006492:	431a      	orrs	r2, r3
 8006494:	697b      	ldr	r3, [r7, #20]
 8006496:	69db      	ldr	r3, [r3, #28]
 8006498:	4313      	orrs	r3, r2
 800649a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800649c:	697b      	ldr	r3, [r7, #20]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	681a      	ldr	r2, [r3, #0]
 80064a2:	4baa      	ldr	r3, [pc, #680]	; (800674c <UART_SetConfig+0x2d8>)
 80064a4:	4013      	ands	r3, r2
 80064a6:	697a      	ldr	r2, [r7, #20]
 80064a8:	6812      	ldr	r2, [r2, #0]
 80064aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80064ac:	430b      	orrs	r3, r1
 80064ae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80064b0:	697b      	ldr	r3, [r7, #20]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	685b      	ldr	r3, [r3, #4]
 80064b6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80064ba:	697b      	ldr	r3, [r7, #20]
 80064bc:	68da      	ldr	r2, [r3, #12]
 80064be:	697b      	ldr	r3, [r7, #20]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	430a      	orrs	r2, r1
 80064c4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80064c6:	697b      	ldr	r3, [r7, #20]
 80064c8:	699b      	ldr	r3, [r3, #24]
 80064ca:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80064cc:	697b      	ldr	r3, [r7, #20]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	4a9f      	ldr	r2, [pc, #636]	; (8006750 <UART_SetConfig+0x2dc>)
 80064d2:	4293      	cmp	r3, r2
 80064d4:	d004      	beq.n	80064e0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80064d6:	697b      	ldr	r3, [r7, #20]
 80064d8:	6a1b      	ldr	r3, [r3, #32]
 80064da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80064dc:	4313      	orrs	r3, r2
 80064de:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80064e0:	697b      	ldr	r3, [r7, #20]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	689b      	ldr	r3, [r3, #8]
 80064e6:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80064ea:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80064ee:	697a      	ldr	r2, [r7, #20]
 80064f0:	6812      	ldr	r2, [r2, #0]
 80064f2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80064f4:	430b      	orrs	r3, r1
 80064f6:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80064f8:	697b      	ldr	r3, [r7, #20]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064fe:	f023 010f 	bic.w	r1, r3, #15
 8006502:	697b      	ldr	r3, [r7, #20]
 8006504:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006506:	697b      	ldr	r3, [r7, #20]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	430a      	orrs	r2, r1
 800650c:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800650e:	697b      	ldr	r3, [r7, #20]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	4a90      	ldr	r2, [pc, #576]	; (8006754 <UART_SetConfig+0x2e0>)
 8006514:	4293      	cmp	r3, r2
 8006516:	d125      	bne.n	8006564 <UART_SetConfig+0xf0>
 8006518:	4b8f      	ldr	r3, [pc, #572]	; (8006758 <UART_SetConfig+0x2e4>)
 800651a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800651e:	f003 0303 	and.w	r3, r3, #3
 8006522:	2b03      	cmp	r3, #3
 8006524:	d81a      	bhi.n	800655c <UART_SetConfig+0xe8>
 8006526:	a201      	add	r2, pc, #4	; (adr r2, 800652c <UART_SetConfig+0xb8>)
 8006528:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800652c:	0800653d 	.word	0x0800653d
 8006530:	0800654d 	.word	0x0800654d
 8006534:	08006545 	.word	0x08006545
 8006538:	08006555 	.word	0x08006555
 800653c:	2301      	movs	r3, #1
 800653e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006542:	e116      	b.n	8006772 <UART_SetConfig+0x2fe>
 8006544:	2302      	movs	r3, #2
 8006546:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800654a:	e112      	b.n	8006772 <UART_SetConfig+0x2fe>
 800654c:	2304      	movs	r3, #4
 800654e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006552:	e10e      	b.n	8006772 <UART_SetConfig+0x2fe>
 8006554:	2308      	movs	r3, #8
 8006556:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800655a:	e10a      	b.n	8006772 <UART_SetConfig+0x2fe>
 800655c:	2310      	movs	r3, #16
 800655e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006562:	e106      	b.n	8006772 <UART_SetConfig+0x2fe>
 8006564:	697b      	ldr	r3, [r7, #20]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	4a7c      	ldr	r2, [pc, #496]	; (800675c <UART_SetConfig+0x2e8>)
 800656a:	4293      	cmp	r3, r2
 800656c:	d138      	bne.n	80065e0 <UART_SetConfig+0x16c>
 800656e:	4b7a      	ldr	r3, [pc, #488]	; (8006758 <UART_SetConfig+0x2e4>)
 8006570:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006574:	f003 030c 	and.w	r3, r3, #12
 8006578:	2b0c      	cmp	r3, #12
 800657a:	d82d      	bhi.n	80065d8 <UART_SetConfig+0x164>
 800657c:	a201      	add	r2, pc, #4	; (adr r2, 8006584 <UART_SetConfig+0x110>)
 800657e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006582:	bf00      	nop
 8006584:	080065b9 	.word	0x080065b9
 8006588:	080065d9 	.word	0x080065d9
 800658c:	080065d9 	.word	0x080065d9
 8006590:	080065d9 	.word	0x080065d9
 8006594:	080065c9 	.word	0x080065c9
 8006598:	080065d9 	.word	0x080065d9
 800659c:	080065d9 	.word	0x080065d9
 80065a0:	080065d9 	.word	0x080065d9
 80065a4:	080065c1 	.word	0x080065c1
 80065a8:	080065d9 	.word	0x080065d9
 80065ac:	080065d9 	.word	0x080065d9
 80065b0:	080065d9 	.word	0x080065d9
 80065b4:	080065d1 	.word	0x080065d1
 80065b8:	2300      	movs	r3, #0
 80065ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80065be:	e0d8      	b.n	8006772 <UART_SetConfig+0x2fe>
 80065c0:	2302      	movs	r3, #2
 80065c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80065c6:	e0d4      	b.n	8006772 <UART_SetConfig+0x2fe>
 80065c8:	2304      	movs	r3, #4
 80065ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80065ce:	e0d0      	b.n	8006772 <UART_SetConfig+0x2fe>
 80065d0:	2308      	movs	r3, #8
 80065d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80065d6:	e0cc      	b.n	8006772 <UART_SetConfig+0x2fe>
 80065d8:	2310      	movs	r3, #16
 80065da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80065de:	e0c8      	b.n	8006772 <UART_SetConfig+0x2fe>
 80065e0:	697b      	ldr	r3, [r7, #20]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	4a5e      	ldr	r2, [pc, #376]	; (8006760 <UART_SetConfig+0x2ec>)
 80065e6:	4293      	cmp	r3, r2
 80065e8:	d125      	bne.n	8006636 <UART_SetConfig+0x1c2>
 80065ea:	4b5b      	ldr	r3, [pc, #364]	; (8006758 <UART_SetConfig+0x2e4>)
 80065ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065f0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80065f4:	2b30      	cmp	r3, #48	; 0x30
 80065f6:	d016      	beq.n	8006626 <UART_SetConfig+0x1b2>
 80065f8:	2b30      	cmp	r3, #48	; 0x30
 80065fa:	d818      	bhi.n	800662e <UART_SetConfig+0x1ba>
 80065fc:	2b20      	cmp	r3, #32
 80065fe:	d00a      	beq.n	8006616 <UART_SetConfig+0x1a2>
 8006600:	2b20      	cmp	r3, #32
 8006602:	d814      	bhi.n	800662e <UART_SetConfig+0x1ba>
 8006604:	2b00      	cmp	r3, #0
 8006606:	d002      	beq.n	800660e <UART_SetConfig+0x19a>
 8006608:	2b10      	cmp	r3, #16
 800660a:	d008      	beq.n	800661e <UART_SetConfig+0x1aa>
 800660c:	e00f      	b.n	800662e <UART_SetConfig+0x1ba>
 800660e:	2300      	movs	r3, #0
 8006610:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006614:	e0ad      	b.n	8006772 <UART_SetConfig+0x2fe>
 8006616:	2302      	movs	r3, #2
 8006618:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800661c:	e0a9      	b.n	8006772 <UART_SetConfig+0x2fe>
 800661e:	2304      	movs	r3, #4
 8006620:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006624:	e0a5      	b.n	8006772 <UART_SetConfig+0x2fe>
 8006626:	2308      	movs	r3, #8
 8006628:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800662c:	e0a1      	b.n	8006772 <UART_SetConfig+0x2fe>
 800662e:	2310      	movs	r3, #16
 8006630:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006634:	e09d      	b.n	8006772 <UART_SetConfig+0x2fe>
 8006636:	697b      	ldr	r3, [r7, #20]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	4a4a      	ldr	r2, [pc, #296]	; (8006764 <UART_SetConfig+0x2f0>)
 800663c:	4293      	cmp	r3, r2
 800663e:	d125      	bne.n	800668c <UART_SetConfig+0x218>
 8006640:	4b45      	ldr	r3, [pc, #276]	; (8006758 <UART_SetConfig+0x2e4>)
 8006642:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006646:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800664a:	2bc0      	cmp	r3, #192	; 0xc0
 800664c:	d016      	beq.n	800667c <UART_SetConfig+0x208>
 800664e:	2bc0      	cmp	r3, #192	; 0xc0
 8006650:	d818      	bhi.n	8006684 <UART_SetConfig+0x210>
 8006652:	2b80      	cmp	r3, #128	; 0x80
 8006654:	d00a      	beq.n	800666c <UART_SetConfig+0x1f8>
 8006656:	2b80      	cmp	r3, #128	; 0x80
 8006658:	d814      	bhi.n	8006684 <UART_SetConfig+0x210>
 800665a:	2b00      	cmp	r3, #0
 800665c:	d002      	beq.n	8006664 <UART_SetConfig+0x1f0>
 800665e:	2b40      	cmp	r3, #64	; 0x40
 8006660:	d008      	beq.n	8006674 <UART_SetConfig+0x200>
 8006662:	e00f      	b.n	8006684 <UART_SetConfig+0x210>
 8006664:	2300      	movs	r3, #0
 8006666:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800666a:	e082      	b.n	8006772 <UART_SetConfig+0x2fe>
 800666c:	2302      	movs	r3, #2
 800666e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006672:	e07e      	b.n	8006772 <UART_SetConfig+0x2fe>
 8006674:	2304      	movs	r3, #4
 8006676:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800667a:	e07a      	b.n	8006772 <UART_SetConfig+0x2fe>
 800667c:	2308      	movs	r3, #8
 800667e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006682:	e076      	b.n	8006772 <UART_SetConfig+0x2fe>
 8006684:	2310      	movs	r3, #16
 8006686:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800668a:	e072      	b.n	8006772 <UART_SetConfig+0x2fe>
 800668c:	697b      	ldr	r3, [r7, #20]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	4a35      	ldr	r2, [pc, #212]	; (8006768 <UART_SetConfig+0x2f4>)
 8006692:	4293      	cmp	r3, r2
 8006694:	d12a      	bne.n	80066ec <UART_SetConfig+0x278>
 8006696:	4b30      	ldr	r3, [pc, #192]	; (8006758 <UART_SetConfig+0x2e4>)
 8006698:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800669c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80066a0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80066a4:	d01a      	beq.n	80066dc <UART_SetConfig+0x268>
 80066a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80066aa:	d81b      	bhi.n	80066e4 <UART_SetConfig+0x270>
 80066ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80066b0:	d00c      	beq.n	80066cc <UART_SetConfig+0x258>
 80066b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80066b6:	d815      	bhi.n	80066e4 <UART_SetConfig+0x270>
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d003      	beq.n	80066c4 <UART_SetConfig+0x250>
 80066bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80066c0:	d008      	beq.n	80066d4 <UART_SetConfig+0x260>
 80066c2:	e00f      	b.n	80066e4 <UART_SetConfig+0x270>
 80066c4:	2300      	movs	r3, #0
 80066c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80066ca:	e052      	b.n	8006772 <UART_SetConfig+0x2fe>
 80066cc:	2302      	movs	r3, #2
 80066ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80066d2:	e04e      	b.n	8006772 <UART_SetConfig+0x2fe>
 80066d4:	2304      	movs	r3, #4
 80066d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80066da:	e04a      	b.n	8006772 <UART_SetConfig+0x2fe>
 80066dc:	2308      	movs	r3, #8
 80066de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80066e2:	e046      	b.n	8006772 <UART_SetConfig+0x2fe>
 80066e4:	2310      	movs	r3, #16
 80066e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80066ea:	e042      	b.n	8006772 <UART_SetConfig+0x2fe>
 80066ec:	697b      	ldr	r3, [r7, #20]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	4a17      	ldr	r2, [pc, #92]	; (8006750 <UART_SetConfig+0x2dc>)
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d13a      	bne.n	800676c <UART_SetConfig+0x2f8>
 80066f6:	4b18      	ldr	r3, [pc, #96]	; (8006758 <UART_SetConfig+0x2e4>)
 80066f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066fc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006700:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006704:	d01a      	beq.n	800673c <UART_SetConfig+0x2c8>
 8006706:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800670a:	d81b      	bhi.n	8006744 <UART_SetConfig+0x2d0>
 800670c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006710:	d00c      	beq.n	800672c <UART_SetConfig+0x2b8>
 8006712:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006716:	d815      	bhi.n	8006744 <UART_SetConfig+0x2d0>
 8006718:	2b00      	cmp	r3, #0
 800671a:	d003      	beq.n	8006724 <UART_SetConfig+0x2b0>
 800671c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006720:	d008      	beq.n	8006734 <UART_SetConfig+0x2c0>
 8006722:	e00f      	b.n	8006744 <UART_SetConfig+0x2d0>
 8006724:	2300      	movs	r3, #0
 8006726:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800672a:	e022      	b.n	8006772 <UART_SetConfig+0x2fe>
 800672c:	2302      	movs	r3, #2
 800672e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006732:	e01e      	b.n	8006772 <UART_SetConfig+0x2fe>
 8006734:	2304      	movs	r3, #4
 8006736:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800673a:	e01a      	b.n	8006772 <UART_SetConfig+0x2fe>
 800673c:	2308      	movs	r3, #8
 800673e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006742:	e016      	b.n	8006772 <UART_SetConfig+0x2fe>
 8006744:	2310      	movs	r3, #16
 8006746:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800674a:	e012      	b.n	8006772 <UART_SetConfig+0x2fe>
 800674c:	cfff69f3 	.word	0xcfff69f3
 8006750:	40008000 	.word	0x40008000
 8006754:	40013800 	.word	0x40013800
 8006758:	40021000 	.word	0x40021000
 800675c:	40004400 	.word	0x40004400
 8006760:	40004800 	.word	0x40004800
 8006764:	40004c00 	.word	0x40004c00
 8006768:	40005000 	.word	0x40005000
 800676c:	2310      	movs	r3, #16
 800676e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006772:	697b      	ldr	r3, [r7, #20]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	4aae      	ldr	r2, [pc, #696]	; (8006a30 <UART_SetConfig+0x5bc>)
 8006778:	4293      	cmp	r3, r2
 800677a:	f040 8097 	bne.w	80068ac <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800677e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006782:	2b08      	cmp	r3, #8
 8006784:	d823      	bhi.n	80067ce <UART_SetConfig+0x35a>
 8006786:	a201      	add	r2, pc, #4	; (adr r2, 800678c <UART_SetConfig+0x318>)
 8006788:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800678c:	080067b1 	.word	0x080067b1
 8006790:	080067cf 	.word	0x080067cf
 8006794:	080067b9 	.word	0x080067b9
 8006798:	080067cf 	.word	0x080067cf
 800679c:	080067bf 	.word	0x080067bf
 80067a0:	080067cf 	.word	0x080067cf
 80067a4:	080067cf 	.word	0x080067cf
 80067a8:	080067cf 	.word	0x080067cf
 80067ac:	080067c7 	.word	0x080067c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80067b0:	f7fc fb8e 	bl	8002ed0 <HAL_RCC_GetPCLK1Freq>
 80067b4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80067b6:	e010      	b.n	80067da <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80067b8:	4b9e      	ldr	r3, [pc, #632]	; (8006a34 <UART_SetConfig+0x5c0>)
 80067ba:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80067bc:	e00d      	b.n	80067da <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80067be:	f7fc faf1 	bl	8002da4 <HAL_RCC_GetSysClockFreq>
 80067c2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80067c4:	e009      	b.n	80067da <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80067c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80067ca:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80067cc:	e005      	b.n	80067da <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80067ce:	2300      	movs	r3, #0
 80067d0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80067d2:	2301      	movs	r3, #1
 80067d4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80067d8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80067da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067dc:	2b00      	cmp	r3, #0
 80067de:	f000 8130 	beq.w	8006a42 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80067e2:	697b      	ldr	r3, [r7, #20]
 80067e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067e6:	4a94      	ldr	r2, [pc, #592]	; (8006a38 <UART_SetConfig+0x5c4>)
 80067e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80067ec:	461a      	mov	r2, r3
 80067ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067f0:	fbb3 f3f2 	udiv	r3, r3, r2
 80067f4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80067f6:	697b      	ldr	r3, [r7, #20]
 80067f8:	685a      	ldr	r2, [r3, #4]
 80067fa:	4613      	mov	r3, r2
 80067fc:	005b      	lsls	r3, r3, #1
 80067fe:	4413      	add	r3, r2
 8006800:	69ba      	ldr	r2, [r7, #24]
 8006802:	429a      	cmp	r2, r3
 8006804:	d305      	bcc.n	8006812 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006806:	697b      	ldr	r3, [r7, #20]
 8006808:	685b      	ldr	r3, [r3, #4]
 800680a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800680c:	69ba      	ldr	r2, [r7, #24]
 800680e:	429a      	cmp	r2, r3
 8006810:	d903      	bls.n	800681a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8006812:	2301      	movs	r3, #1
 8006814:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006818:	e113      	b.n	8006a42 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800681a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800681c:	2200      	movs	r2, #0
 800681e:	60bb      	str	r3, [r7, #8]
 8006820:	60fa      	str	r2, [r7, #12]
 8006822:	697b      	ldr	r3, [r7, #20]
 8006824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006826:	4a84      	ldr	r2, [pc, #528]	; (8006a38 <UART_SetConfig+0x5c4>)
 8006828:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800682c:	b29b      	uxth	r3, r3
 800682e:	2200      	movs	r2, #0
 8006830:	603b      	str	r3, [r7, #0]
 8006832:	607a      	str	r2, [r7, #4]
 8006834:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006838:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800683c:	f7f9 fcde 	bl	80001fc <__aeabi_uldivmod>
 8006840:	4602      	mov	r2, r0
 8006842:	460b      	mov	r3, r1
 8006844:	4610      	mov	r0, r2
 8006846:	4619      	mov	r1, r3
 8006848:	f04f 0200 	mov.w	r2, #0
 800684c:	f04f 0300 	mov.w	r3, #0
 8006850:	020b      	lsls	r3, r1, #8
 8006852:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006856:	0202      	lsls	r2, r0, #8
 8006858:	6979      	ldr	r1, [r7, #20]
 800685a:	6849      	ldr	r1, [r1, #4]
 800685c:	0849      	lsrs	r1, r1, #1
 800685e:	2000      	movs	r0, #0
 8006860:	460c      	mov	r4, r1
 8006862:	4605      	mov	r5, r0
 8006864:	eb12 0804 	adds.w	r8, r2, r4
 8006868:	eb43 0905 	adc.w	r9, r3, r5
 800686c:	697b      	ldr	r3, [r7, #20]
 800686e:	685b      	ldr	r3, [r3, #4]
 8006870:	2200      	movs	r2, #0
 8006872:	469a      	mov	sl, r3
 8006874:	4693      	mov	fp, r2
 8006876:	4652      	mov	r2, sl
 8006878:	465b      	mov	r3, fp
 800687a:	4640      	mov	r0, r8
 800687c:	4649      	mov	r1, r9
 800687e:	f7f9 fcbd 	bl	80001fc <__aeabi_uldivmod>
 8006882:	4602      	mov	r2, r0
 8006884:	460b      	mov	r3, r1
 8006886:	4613      	mov	r3, r2
 8006888:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800688a:	6a3b      	ldr	r3, [r7, #32]
 800688c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006890:	d308      	bcc.n	80068a4 <UART_SetConfig+0x430>
 8006892:	6a3b      	ldr	r3, [r7, #32]
 8006894:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006898:	d204      	bcs.n	80068a4 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800689a:	697b      	ldr	r3, [r7, #20]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	6a3a      	ldr	r2, [r7, #32]
 80068a0:	60da      	str	r2, [r3, #12]
 80068a2:	e0ce      	b.n	8006a42 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80068a4:	2301      	movs	r3, #1
 80068a6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80068aa:	e0ca      	b.n	8006a42 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80068ac:	697b      	ldr	r3, [r7, #20]
 80068ae:	69db      	ldr	r3, [r3, #28]
 80068b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80068b4:	d166      	bne.n	8006984 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80068b6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80068ba:	2b08      	cmp	r3, #8
 80068bc:	d827      	bhi.n	800690e <UART_SetConfig+0x49a>
 80068be:	a201      	add	r2, pc, #4	; (adr r2, 80068c4 <UART_SetConfig+0x450>)
 80068c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068c4:	080068e9 	.word	0x080068e9
 80068c8:	080068f1 	.word	0x080068f1
 80068cc:	080068f9 	.word	0x080068f9
 80068d0:	0800690f 	.word	0x0800690f
 80068d4:	080068ff 	.word	0x080068ff
 80068d8:	0800690f 	.word	0x0800690f
 80068dc:	0800690f 	.word	0x0800690f
 80068e0:	0800690f 	.word	0x0800690f
 80068e4:	08006907 	.word	0x08006907
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80068e8:	f7fc faf2 	bl	8002ed0 <HAL_RCC_GetPCLK1Freq>
 80068ec:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80068ee:	e014      	b.n	800691a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80068f0:	f7fc fb04 	bl	8002efc <HAL_RCC_GetPCLK2Freq>
 80068f4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80068f6:	e010      	b.n	800691a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80068f8:	4b4e      	ldr	r3, [pc, #312]	; (8006a34 <UART_SetConfig+0x5c0>)
 80068fa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80068fc:	e00d      	b.n	800691a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80068fe:	f7fc fa51 	bl	8002da4 <HAL_RCC_GetSysClockFreq>
 8006902:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006904:	e009      	b.n	800691a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006906:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800690a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800690c:	e005      	b.n	800691a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800690e:	2300      	movs	r3, #0
 8006910:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006912:	2301      	movs	r3, #1
 8006914:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006918:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800691a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800691c:	2b00      	cmp	r3, #0
 800691e:	f000 8090 	beq.w	8006a42 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006922:	697b      	ldr	r3, [r7, #20]
 8006924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006926:	4a44      	ldr	r2, [pc, #272]	; (8006a38 <UART_SetConfig+0x5c4>)
 8006928:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800692c:	461a      	mov	r2, r3
 800692e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006930:	fbb3 f3f2 	udiv	r3, r3, r2
 8006934:	005a      	lsls	r2, r3, #1
 8006936:	697b      	ldr	r3, [r7, #20]
 8006938:	685b      	ldr	r3, [r3, #4]
 800693a:	085b      	lsrs	r3, r3, #1
 800693c:	441a      	add	r2, r3
 800693e:	697b      	ldr	r3, [r7, #20]
 8006940:	685b      	ldr	r3, [r3, #4]
 8006942:	fbb2 f3f3 	udiv	r3, r2, r3
 8006946:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006948:	6a3b      	ldr	r3, [r7, #32]
 800694a:	2b0f      	cmp	r3, #15
 800694c:	d916      	bls.n	800697c <UART_SetConfig+0x508>
 800694e:	6a3b      	ldr	r3, [r7, #32]
 8006950:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006954:	d212      	bcs.n	800697c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006956:	6a3b      	ldr	r3, [r7, #32]
 8006958:	b29b      	uxth	r3, r3
 800695a:	f023 030f 	bic.w	r3, r3, #15
 800695e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006960:	6a3b      	ldr	r3, [r7, #32]
 8006962:	085b      	lsrs	r3, r3, #1
 8006964:	b29b      	uxth	r3, r3
 8006966:	f003 0307 	and.w	r3, r3, #7
 800696a:	b29a      	uxth	r2, r3
 800696c:	8bfb      	ldrh	r3, [r7, #30]
 800696e:	4313      	orrs	r3, r2
 8006970:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006972:	697b      	ldr	r3, [r7, #20]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	8bfa      	ldrh	r2, [r7, #30]
 8006978:	60da      	str	r2, [r3, #12]
 800697a:	e062      	b.n	8006a42 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800697c:	2301      	movs	r3, #1
 800697e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006982:	e05e      	b.n	8006a42 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006984:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006988:	2b08      	cmp	r3, #8
 800698a:	d828      	bhi.n	80069de <UART_SetConfig+0x56a>
 800698c:	a201      	add	r2, pc, #4	; (adr r2, 8006994 <UART_SetConfig+0x520>)
 800698e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006992:	bf00      	nop
 8006994:	080069b9 	.word	0x080069b9
 8006998:	080069c1 	.word	0x080069c1
 800699c:	080069c9 	.word	0x080069c9
 80069a0:	080069df 	.word	0x080069df
 80069a4:	080069cf 	.word	0x080069cf
 80069a8:	080069df 	.word	0x080069df
 80069ac:	080069df 	.word	0x080069df
 80069b0:	080069df 	.word	0x080069df
 80069b4:	080069d7 	.word	0x080069d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80069b8:	f7fc fa8a 	bl	8002ed0 <HAL_RCC_GetPCLK1Freq>
 80069bc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80069be:	e014      	b.n	80069ea <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80069c0:	f7fc fa9c 	bl	8002efc <HAL_RCC_GetPCLK2Freq>
 80069c4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80069c6:	e010      	b.n	80069ea <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80069c8:	4b1a      	ldr	r3, [pc, #104]	; (8006a34 <UART_SetConfig+0x5c0>)
 80069ca:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80069cc:	e00d      	b.n	80069ea <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80069ce:	f7fc f9e9 	bl	8002da4 <HAL_RCC_GetSysClockFreq>
 80069d2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80069d4:	e009      	b.n	80069ea <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80069d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80069da:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80069dc:	e005      	b.n	80069ea <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80069de:	2300      	movs	r3, #0
 80069e0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80069e2:	2301      	movs	r3, #1
 80069e4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80069e8:	bf00      	nop
    }

    if (pclk != 0U)
 80069ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d028      	beq.n	8006a42 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80069f0:	697b      	ldr	r3, [r7, #20]
 80069f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069f4:	4a10      	ldr	r2, [pc, #64]	; (8006a38 <UART_SetConfig+0x5c4>)
 80069f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80069fa:	461a      	mov	r2, r3
 80069fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069fe:	fbb3 f2f2 	udiv	r2, r3, r2
 8006a02:	697b      	ldr	r3, [r7, #20]
 8006a04:	685b      	ldr	r3, [r3, #4]
 8006a06:	085b      	lsrs	r3, r3, #1
 8006a08:	441a      	add	r2, r3
 8006a0a:	697b      	ldr	r3, [r7, #20]
 8006a0c:	685b      	ldr	r3, [r3, #4]
 8006a0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a12:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006a14:	6a3b      	ldr	r3, [r7, #32]
 8006a16:	2b0f      	cmp	r3, #15
 8006a18:	d910      	bls.n	8006a3c <UART_SetConfig+0x5c8>
 8006a1a:	6a3b      	ldr	r3, [r7, #32]
 8006a1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a20:	d20c      	bcs.n	8006a3c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006a22:	6a3b      	ldr	r3, [r7, #32]
 8006a24:	b29a      	uxth	r2, r3
 8006a26:	697b      	ldr	r3, [r7, #20]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	60da      	str	r2, [r3, #12]
 8006a2c:	e009      	b.n	8006a42 <UART_SetConfig+0x5ce>
 8006a2e:	bf00      	nop
 8006a30:	40008000 	.word	0x40008000
 8006a34:	00f42400 	.word	0x00f42400
 8006a38:	08007d08 	.word	0x08007d08
      }
      else
      {
        ret = HAL_ERROR;
 8006a3c:	2301      	movs	r3, #1
 8006a3e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006a42:	697b      	ldr	r3, [r7, #20]
 8006a44:	2201      	movs	r2, #1
 8006a46:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006a4a:	697b      	ldr	r3, [r7, #20]
 8006a4c:	2201      	movs	r2, #1
 8006a4e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006a52:	697b      	ldr	r3, [r7, #20]
 8006a54:	2200      	movs	r2, #0
 8006a56:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8006a58:	697b      	ldr	r3, [r7, #20]
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8006a5e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8006a62:	4618      	mov	r0, r3
 8006a64:	3730      	adds	r7, #48	; 0x30
 8006a66:	46bd      	mov	sp, r7
 8006a68:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08006a6c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006a6c:	b480      	push	{r7}
 8006a6e:	b083      	sub	sp, #12
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a78:	f003 0301 	and.w	r3, r3, #1
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d00a      	beq.n	8006a96 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	685b      	ldr	r3, [r3, #4]
 8006a86:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	430a      	orrs	r2, r1
 8006a94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a9a:	f003 0302 	and.w	r3, r3, #2
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d00a      	beq.n	8006ab8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	685b      	ldr	r3, [r3, #4]
 8006aa8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	430a      	orrs	r2, r1
 8006ab6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006abc:	f003 0304 	and.w	r3, r3, #4
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d00a      	beq.n	8006ada <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	685b      	ldr	r3, [r3, #4]
 8006aca:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	430a      	orrs	r2, r1
 8006ad8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ade:	f003 0308 	and.w	r3, r3, #8
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d00a      	beq.n	8006afc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	685b      	ldr	r3, [r3, #4]
 8006aec:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	430a      	orrs	r2, r1
 8006afa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b00:	f003 0310 	and.w	r3, r3, #16
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d00a      	beq.n	8006b1e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	689b      	ldr	r3, [r3, #8]
 8006b0e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	430a      	orrs	r2, r1
 8006b1c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b22:	f003 0320 	and.w	r3, r3, #32
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d00a      	beq.n	8006b40 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	689b      	ldr	r3, [r3, #8]
 8006b30:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	430a      	orrs	r2, r1
 8006b3e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d01a      	beq.n	8006b82 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	685b      	ldr	r3, [r3, #4]
 8006b52:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	430a      	orrs	r2, r1
 8006b60:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b66:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006b6a:	d10a      	bne.n	8006b82 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	685b      	ldr	r3, [r3, #4]
 8006b72:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	430a      	orrs	r2, r1
 8006b80:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d00a      	beq.n	8006ba4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	685b      	ldr	r3, [r3, #4]
 8006b94:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	430a      	orrs	r2, r1
 8006ba2:	605a      	str	r2, [r3, #4]
  }
}
 8006ba4:	bf00      	nop
 8006ba6:	370c      	adds	r7, #12
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bae:	4770      	bx	lr

08006bb0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b086      	sub	sp, #24
 8006bb4:	af02      	add	r7, sp, #8
 8006bb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2200      	movs	r2, #0
 8006bbc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006bc0:	f7fa fde6 	bl	8001790 <HAL_GetTick>
 8006bc4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f003 0308 	and.w	r3, r3, #8
 8006bd0:	2b08      	cmp	r3, #8
 8006bd2:	d10e      	bne.n	8006bf2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006bd4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006bd8:	9300      	str	r3, [sp, #0]
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	2200      	movs	r2, #0
 8006bde:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006be2:	6878      	ldr	r0, [r7, #4]
 8006be4:	f000 f82f 	bl	8006c46 <UART_WaitOnFlagUntilTimeout>
 8006be8:	4603      	mov	r3, r0
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d001      	beq.n	8006bf2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006bee:	2303      	movs	r3, #3
 8006bf0:	e025      	b.n	8006c3e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f003 0304 	and.w	r3, r3, #4
 8006bfc:	2b04      	cmp	r3, #4
 8006bfe:	d10e      	bne.n	8006c1e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006c00:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006c04:	9300      	str	r3, [sp, #0]
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	2200      	movs	r2, #0
 8006c0a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006c0e:	6878      	ldr	r0, [r7, #4]
 8006c10:	f000 f819 	bl	8006c46 <UART_WaitOnFlagUntilTimeout>
 8006c14:	4603      	mov	r3, r0
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d001      	beq.n	8006c1e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006c1a:	2303      	movs	r3, #3
 8006c1c:	e00f      	b.n	8006c3e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	2220      	movs	r2, #32
 8006c22:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	2220      	movs	r2, #32
 8006c2a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	2200      	movs	r2, #0
 8006c32:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2200      	movs	r2, #0
 8006c38:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006c3c:	2300      	movs	r3, #0
}
 8006c3e:	4618      	mov	r0, r3
 8006c40:	3710      	adds	r7, #16
 8006c42:	46bd      	mov	sp, r7
 8006c44:	bd80      	pop	{r7, pc}

08006c46 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006c46:	b580      	push	{r7, lr}
 8006c48:	b09c      	sub	sp, #112	; 0x70
 8006c4a:	af00      	add	r7, sp, #0
 8006c4c:	60f8      	str	r0, [r7, #12]
 8006c4e:	60b9      	str	r1, [r7, #8]
 8006c50:	603b      	str	r3, [r7, #0]
 8006c52:	4613      	mov	r3, r2
 8006c54:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c56:	e0a9      	b.n	8006dac <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c58:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006c5a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006c5e:	f000 80a5 	beq.w	8006dac <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c62:	f7fa fd95 	bl	8001790 <HAL_GetTick>
 8006c66:	4602      	mov	r2, r0
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	1ad3      	subs	r3, r2, r3
 8006c6c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006c6e:	429a      	cmp	r2, r3
 8006c70:	d302      	bcc.n	8006c78 <UART_WaitOnFlagUntilTimeout+0x32>
 8006c72:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d140      	bne.n	8006cfa <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c80:	e853 3f00 	ldrex	r3, [r3]
 8006c84:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006c86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c88:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006c8c:	667b      	str	r3, [r7, #100]	; 0x64
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	461a      	mov	r2, r3
 8006c94:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006c96:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006c98:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c9a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006c9c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006c9e:	e841 2300 	strex	r3, r2, [r1]
 8006ca2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006ca4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d1e6      	bne.n	8006c78 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	3308      	adds	r3, #8
 8006cb0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cb4:	e853 3f00 	ldrex	r3, [r3]
 8006cb8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006cba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cbc:	f023 0301 	bic.w	r3, r3, #1
 8006cc0:	663b      	str	r3, [r7, #96]	; 0x60
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	3308      	adds	r3, #8
 8006cc8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006cca:	64ba      	str	r2, [r7, #72]	; 0x48
 8006ccc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cce:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006cd0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006cd2:	e841 2300 	strex	r3, r2, [r1]
 8006cd6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006cd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d1e5      	bne.n	8006caa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	2220      	movs	r2, #32
 8006ce2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	2220      	movs	r2, #32
 8006cea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8006cf6:	2303      	movs	r3, #3
 8006cf8:	e069      	b.n	8006dce <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f003 0304 	and.w	r3, r3, #4
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d051      	beq.n	8006dac <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	69db      	ldr	r3, [r3, #28]
 8006d0e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006d12:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d16:	d149      	bne.n	8006dac <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006d20:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d2a:	e853 3f00 	ldrex	r3, [r3]
 8006d2e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d32:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006d36:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	461a      	mov	r2, r3
 8006d3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d40:	637b      	str	r3, [r7, #52]	; 0x34
 8006d42:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d44:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006d46:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006d48:	e841 2300 	strex	r3, r2, [r1]
 8006d4c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006d4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d1e6      	bne.n	8006d22 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	3308      	adds	r3, #8
 8006d5a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d5c:	697b      	ldr	r3, [r7, #20]
 8006d5e:	e853 3f00 	ldrex	r3, [r3]
 8006d62:	613b      	str	r3, [r7, #16]
   return(result);
 8006d64:	693b      	ldr	r3, [r7, #16]
 8006d66:	f023 0301 	bic.w	r3, r3, #1
 8006d6a:	66bb      	str	r3, [r7, #104]	; 0x68
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	3308      	adds	r3, #8
 8006d72:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006d74:	623a      	str	r2, [r7, #32]
 8006d76:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d78:	69f9      	ldr	r1, [r7, #28]
 8006d7a:	6a3a      	ldr	r2, [r7, #32]
 8006d7c:	e841 2300 	strex	r3, r2, [r1]
 8006d80:	61bb      	str	r3, [r7, #24]
   return(result);
 8006d82:	69bb      	ldr	r3, [r7, #24]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d1e5      	bne.n	8006d54 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	2220      	movs	r2, #32
 8006d8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	2220      	movs	r2, #32
 8006d94:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	2220      	movs	r2, #32
 8006d9c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	2200      	movs	r2, #0
 8006da4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8006da8:	2303      	movs	r3, #3
 8006daa:	e010      	b.n	8006dce <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	69da      	ldr	r2, [r3, #28]
 8006db2:	68bb      	ldr	r3, [r7, #8]
 8006db4:	4013      	ands	r3, r2
 8006db6:	68ba      	ldr	r2, [r7, #8]
 8006db8:	429a      	cmp	r2, r3
 8006dba:	bf0c      	ite	eq
 8006dbc:	2301      	moveq	r3, #1
 8006dbe:	2300      	movne	r3, #0
 8006dc0:	b2db      	uxtb	r3, r3
 8006dc2:	461a      	mov	r2, r3
 8006dc4:	79fb      	ldrb	r3, [r7, #7]
 8006dc6:	429a      	cmp	r2, r3
 8006dc8:	f43f af46 	beq.w	8006c58 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006dcc:	2300      	movs	r3, #0
}
 8006dce:	4618      	mov	r0, r3
 8006dd0:	3770      	adds	r7, #112	; 0x70
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	bd80      	pop	{r7, pc}

08006dd6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006dd6:	b480      	push	{r7}
 8006dd8:	b085      	sub	sp, #20
 8006dda:	af00      	add	r7, sp, #0
 8006ddc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006de4:	2b01      	cmp	r3, #1
 8006de6:	d101      	bne.n	8006dec <HAL_UARTEx_DisableFifoMode+0x16>
 8006de8:	2302      	movs	r3, #2
 8006dea:	e027      	b.n	8006e3c <HAL_UARTEx_DisableFifoMode+0x66>
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2201      	movs	r2, #1
 8006df0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2224      	movs	r2, #36	; 0x24
 8006df8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	681a      	ldr	r2, [r3, #0]
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f022 0201 	bic.w	r2, r2, #1
 8006e12:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006e1a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2200      	movs	r2, #0
 8006e20:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	68fa      	ldr	r2, [r7, #12]
 8006e28:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	2220      	movs	r2, #32
 8006e2e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	2200      	movs	r2, #0
 8006e36:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006e3a:	2300      	movs	r3, #0
}
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	3714      	adds	r7, #20
 8006e40:	46bd      	mov	sp, r7
 8006e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e46:	4770      	bx	lr

08006e48 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b084      	sub	sp, #16
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
 8006e50:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006e58:	2b01      	cmp	r3, #1
 8006e5a:	d101      	bne.n	8006e60 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006e5c:	2302      	movs	r3, #2
 8006e5e:	e02d      	b.n	8006ebc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2201      	movs	r2, #1
 8006e64:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2224      	movs	r2, #36	; 0x24
 8006e6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	681a      	ldr	r2, [r3, #0]
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	f022 0201 	bic.w	r2, r2, #1
 8006e86:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	689b      	ldr	r3, [r3, #8]
 8006e8e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	683a      	ldr	r2, [r7, #0]
 8006e98:	430a      	orrs	r2, r1
 8006e9a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006e9c:	6878      	ldr	r0, [r7, #4]
 8006e9e:	f000 f84f 	bl	8006f40 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	68fa      	ldr	r2, [r7, #12]
 8006ea8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	2220      	movs	r2, #32
 8006eae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006eba:	2300      	movs	r3, #0
}
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	3710      	adds	r7, #16
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	bd80      	pop	{r7, pc}

08006ec4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b084      	sub	sp, #16
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
 8006ecc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006ed4:	2b01      	cmp	r3, #1
 8006ed6:	d101      	bne.n	8006edc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006ed8:	2302      	movs	r3, #2
 8006eda:	e02d      	b.n	8006f38 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2201      	movs	r2, #1
 8006ee0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2224      	movs	r2, #36	; 0x24
 8006ee8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	681a      	ldr	r2, [r3, #0]
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f022 0201 	bic.w	r2, r2, #1
 8006f02:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	689b      	ldr	r3, [r3, #8]
 8006f0a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	683a      	ldr	r2, [r7, #0]
 8006f14:	430a      	orrs	r2, r1
 8006f16:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006f18:	6878      	ldr	r0, [r7, #4]
 8006f1a:	f000 f811 	bl	8006f40 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	68fa      	ldr	r2, [r7, #12]
 8006f24:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	2220      	movs	r2, #32
 8006f2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	2200      	movs	r2, #0
 8006f32:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006f36:	2300      	movs	r3, #0
}
 8006f38:	4618      	mov	r0, r3
 8006f3a:	3710      	adds	r7, #16
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	bd80      	pop	{r7, pc}

08006f40 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006f40:	b480      	push	{r7}
 8006f42:	b085      	sub	sp, #20
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d108      	bne.n	8006f62 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2201      	movs	r2, #1
 8006f54:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2201      	movs	r2, #1
 8006f5c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006f60:	e031      	b.n	8006fc6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006f62:	2308      	movs	r3, #8
 8006f64:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006f66:	2308      	movs	r3, #8
 8006f68:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	689b      	ldr	r3, [r3, #8]
 8006f70:	0e5b      	lsrs	r3, r3, #25
 8006f72:	b2db      	uxtb	r3, r3
 8006f74:	f003 0307 	and.w	r3, r3, #7
 8006f78:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	689b      	ldr	r3, [r3, #8]
 8006f80:	0f5b      	lsrs	r3, r3, #29
 8006f82:	b2db      	uxtb	r3, r3
 8006f84:	f003 0307 	and.w	r3, r3, #7
 8006f88:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006f8a:	7bbb      	ldrb	r3, [r7, #14]
 8006f8c:	7b3a      	ldrb	r2, [r7, #12]
 8006f8e:	4911      	ldr	r1, [pc, #68]	; (8006fd4 <UARTEx_SetNbDataToProcess+0x94>)
 8006f90:	5c8a      	ldrb	r2, [r1, r2]
 8006f92:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006f96:	7b3a      	ldrb	r2, [r7, #12]
 8006f98:	490f      	ldr	r1, [pc, #60]	; (8006fd8 <UARTEx_SetNbDataToProcess+0x98>)
 8006f9a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006f9c:	fb93 f3f2 	sdiv	r3, r3, r2
 8006fa0:	b29a      	uxth	r2, r3
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006fa8:	7bfb      	ldrb	r3, [r7, #15]
 8006faa:	7b7a      	ldrb	r2, [r7, #13]
 8006fac:	4909      	ldr	r1, [pc, #36]	; (8006fd4 <UARTEx_SetNbDataToProcess+0x94>)
 8006fae:	5c8a      	ldrb	r2, [r1, r2]
 8006fb0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006fb4:	7b7a      	ldrb	r2, [r7, #13]
 8006fb6:	4908      	ldr	r1, [pc, #32]	; (8006fd8 <UARTEx_SetNbDataToProcess+0x98>)
 8006fb8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006fba:	fb93 f3f2 	sdiv	r3, r3, r2
 8006fbe:	b29a      	uxth	r2, r3
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006fc6:	bf00      	nop
 8006fc8:	3714      	adds	r7, #20
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd0:	4770      	bx	lr
 8006fd2:	bf00      	nop
 8006fd4:	08007d20 	.word	0x08007d20
 8006fd8:	08007d28 	.word	0x08007d28

08006fdc <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    FMC_NORSRAM_InitTypeDef *Init)
{
 8006fdc:	b480      	push	{r7}
 8006fde:	b087      	sub	sp, #28
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
 8006fe4:	6039      	str	r1, [r7, #0]
#if defined(FMC_PCSCNTR_CSCOUNT)
  assert_param(IS_FUNCTIONAL_STATE(Init->MaxChipSelectPulse));
#endif /* FMC_PCSCNTR_CSCOUNT */

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8006fe6:	683b      	ldr	r3, [r7, #0]
 8006fe8:	681a      	ldr	r2, [r3, #0]
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ff0:	683a      	ldr	r2, [r7, #0]
 8006ff2:	6812      	ldr	r2, [r2, #0]
 8006ff4:	f023 0101 	bic.w	r1, r3, #1
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 8006ffe:	683b      	ldr	r3, [r7, #0]
 8007000:	689b      	ldr	r3, [r3, #8]
 8007002:	2b08      	cmp	r3, #8
 8007004:	d102      	bne.n	800700c <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8007006:	2340      	movs	r3, #64	; 0x40
 8007008:	617b      	str	r3, [r7, #20]
 800700a:	e001      	b.n	8007010 <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 800700c:	2300      	movs	r3, #0
 800700e:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8007014:	697b      	ldr	r3, [r7, #20]
 8007016:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8007018:	683b      	ldr	r3, [r7, #0]
 800701a:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 800701c:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8007022:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8007028:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 800702a:	683b      	ldr	r3, [r7, #0]
 800702c:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 800702e:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	699b      	ldr	r3, [r3, #24]
              Init->WaitSignalPolarity      | \
 8007034:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8007036:	683b      	ldr	r3, [r7, #0]
 8007038:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalActive        | \
 800703a:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	6a1b      	ldr	r3, [r3, #32]
              Init->WriteOperation          | \
 8007040:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8007042:	683b      	ldr	r3, [r7, #0]
 8007044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WaitSignal              | \
 8007046:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8007048:	683b      	ldr	r3, [r7, #0]
 800704a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->ExtendedMode            | \
 800704c:	431a      	orrs	r2, r3
              Init->WriteBurst);
 800704e:	683b      	ldr	r3, [r7, #0]
 8007050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  btcr_reg = (flashaccess                   | \
 8007052:	4313      	orrs	r3, r2
 8007054:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->ContinuousClock;
 8007056:	683b      	ldr	r3, [r7, #0]
 8007058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800705a:	693a      	ldr	r2, [r7, #16]
 800705c:	4313      	orrs	r3, r2
 800705e:	613b      	str	r3, [r7, #16]
#if defined(FMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
 8007060:	683b      	ldr	r3, [r7, #0]
 8007062:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007064:	693a      	ldr	r2, [r7, #16]
 8007066:	4313      	orrs	r3, r2
 8007068:	613b      	str	r3, [r7, #16]
#endif /* FMC_BCR1_WFDIS */
#if defined(FMC_BCRx_NBLSET)
  btcr_reg |= Init->NBLSetupTime;
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800706e:	693a      	ldr	r2, [r7, #16]
 8007070:	4313      	orrs	r3, r2
 8007072:	613b      	str	r3, [r7, #16]
#endif /* FMC_BCRx_NBLSET */
  btcr_reg |= Init->PageSize;
 8007074:	683b      	ldr	r3, [r7, #0]
 8007076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007078:	693a      	ldr	r2, [r7, #16]
 800707a:	4313      	orrs	r3, r2
 800707c:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCRx_MBKEN                |
 800707e:	4b23      	ldr	r3, [pc, #140]	; (800710c <FMC_NORSRAM_Init+0x130>)
 8007080:	60fb      	str	r3, [r7, #12]
          FMC_BCRx_WAITEN               |
          FMC_BCRx_EXTMOD               |
          FMC_BCRx_ASYNCWAIT            |
          FMC_BCRx_CBURSTRW);

  mask |= FMC_BCR1_CCLKEN;
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007088:	60fb      	str	r3, [r7, #12]
#if defined(FMC_BCR1_WFDIS)
  mask |= FMC_BCR1_WFDIS;
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007090:	60fb      	str	r3, [r7, #12]
#endif /* FMC_BCR1_WFDIS */
#if defined(FMC_BCRx_NBLSET)
  mask |= FMC_BCRx_NBLSET;
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	f443 0340 	orr.w	r3, r3, #12582912	; 0xc00000
 8007098:	60fb      	str	r3, [r7, #12]
#endif /* FMC_BCRx_NBLSET */
  mask |= FMC_BCRx_CPSIZE;
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 80070a0:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	681a      	ldr	r2, [r3, #0]
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	43db      	mvns	r3, r3
 80070b0:	ea02 0103 	and.w	r1, r2, r3
 80070b4:	683b      	ldr	r3, [r7, #0]
 80070b6:	681a      	ldr	r2, [r3, #0]
 80070b8:	693b      	ldr	r3, [r7, #16]
 80070ba:	4319      	orrs	r1, r3
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 80070c2:	683b      	ldr	r3, [r7, #0]
 80070c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80070ca:	d10c      	bne.n	80070e6 <FMC_NORSRAM_Init+0x10a>
 80070cc:	683b      	ldr	r3, [r7, #0]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d008      	beq.n	80070e6 <FMC_NORSRAM_Init+0x10a>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070e0:	431a      	orrs	r2, r3
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	601a      	str	r2, [r3, #0]
  }
#if defined(FMC_BCR1_WFDIS)

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 80070e6:	683b      	ldr	r3, [r7, #0]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d006      	beq.n	80070fc <FMC_NORSRAM_Init+0x120>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681a      	ldr	r2, [r3, #0]
 80070f2:	683b      	ldr	r3, [r7, #0]
 80070f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070f6:	431a      	orrs	r2, r3
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	601a      	str	r2, [r3, #0]
        break;
    }
  }
#endif /* FMC_PCSCNTR_CSCOUNT */

  return HAL_OK;
 80070fc:	2300      	movs	r3, #0
}
 80070fe:	4618      	mov	r0, r3
 8007100:	371c      	adds	r7, #28
 8007102:	46bd      	mov	sp, r7
 8007104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007108:	4770      	bx	lr
 800710a:	bf00      	nop
 800710c:	0008fb7f 	.word	0x0008fb7f

08007110 <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8007110:	b480      	push	{r7}
 8007112:	b087      	sub	sp, #28
 8007114:	af00      	add	r7, sp, #0
 8007116:	60f8      	str	r0, [r7, #12]
 8007118:	60b9      	str	r1, [r7, #8]
 800711a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Set FMC_NORSRAM device timing parameters */
#if defined(FMC_BTRx_DATAHLD)
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	1c5a      	adds	r2, r3, #1
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007126:	68bb      	ldr	r3, [r7, #8]
 8007128:	681a      	ldr	r2, [r3, #0]
 800712a:	68bb      	ldr	r3, [r7, #8]
 800712c:	685b      	ldr	r3, [r3, #4]
 800712e:	011b      	lsls	r3, r3, #4
 8007130:	431a      	orrs	r2, r3
 8007132:	68bb      	ldr	r3, [r7, #8]
 8007134:	689b      	ldr	r3, [r3, #8]
 8007136:	021b      	lsls	r3, r3, #8
 8007138:	431a      	orrs	r2, r3
 800713a:	68bb      	ldr	r3, [r7, #8]
 800713c:	68db      	ldr	r3, [r3, #12]
 800713e:	079b      	lsls	r3, r3, #30
 8007140:	431a      	orrs	r2, r3
 8007142:	68bb      	ldr	r3, [r7, #8]
 8007144:	691b      	ldr	r3, [r3, #16]
 8007146:	041b      	lsls	r3, r3, #16
 8007148:	431a      	orrs	r2, r3
 800714a:	68bb      	ldr	r3, [r7, #8]
 800714c:	695b      	ldr	r3, [r3, #20]
 800714e:	3b01      	subs	r3, #1
 8007150:	051b      	lsls	r3, r3, #20
 8007152:	431a      	orrs	r2, r3
 8007154:	68bb      	ldr	r3, [r7, #8]
 8007156:	699b      	ldr	r3, [r3, #24]
 8007158:	3b02      	subs	r3, #2
 800715a:	061b      	lsls	r3, r3, #24
 800715c:	ea42 0103 	orr.w	r1, r2, r3
 8007160:	68bb      	ldr	r3, [r7, #8]
 8007162:	69db      	ldr	r3, [r3, #28]
 8007164:	687a      	ldr	r2, [r7, #4]
 8007166:	3201      	adds	r2, #1
 8007168:	4319      	orrs	r1, r3
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));
#endif /* FMC_BTRx_DATAHLD */

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007178:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800717c:	d113      	bne.n	80071a6 <FMC_NORSRAM_Timing_Init+0x96>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTRx_CLKDIV_Pos));
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	685b      	ldr	r3, [r3, #4]
 8007182:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007186:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTRx_CLKDIV_Pos);
 8007188:	68bb      	ldr	r3, [r7, #8]
 800718a:	695b      	ldr	r3, [r3, #20]
 800718c:	3b01      	subs	r3, #1
 800718e:	051b      	lsls	r3, r3, #20
 8007190:	697a      	ldr	r2, [r7, #20]
 8007192:	4313      	orrs	r3, r2
 8007194:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTRx_CLKDIV, tmpr);
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	685b      	ldr	r3, [r3, #4]
 800719a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800719e:	697b      	ldr	r3, [r7, #20]
 80071a0:	431a      	orrs	r2, r3
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80071a6:	2300      	movs	r3, #0
}
 80071a8:	4618      	mov	r0, r3
 80071aa:	371c      	adds	r7, #28
 80071ac:	46bd      	mov	sp, r7
 80071ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b2:	4770      	bx	lr

080071b4 <FMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 80071b4:	b480      	push	{r7}
 80071b6:	b085      	sub	sp, #20
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	60f8      	str	r0, [r7, #12]
 80071bc:	60b9      	str	r1, [r7, #8]
 80071be:	607a      	str	r2, [r7, #4]
 80071c0:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 80071c2:	683b      	ldr	r3, [r7, #0]
 80071c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80071c8:	d121      	bne.n	800720e <FMC_NORSRAM_Extended_Timing_Init+0x5a>
    assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
#if defined(FMC_BTRx_DATAHLD)
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	687a      	ldr	r2, [r7, #4]
 80071ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071d2:	f003 627f 	and.w	r2, r3, #267386880	; 0xff00000
 80071d6:	68bb      	ldr	r3, [r7, #8]
 80071d8:	6819      	ldr	r1, [r3, #0]
 80071da:	68bb      	ldr	r3, [r7, #8]
 80071dc:	685b      	ldr	r3, [r3, #4]
 80071de:	011b      	lsls	r3, r3, #4
 80071e0:	4319      	orrs	r1, r3
 80071e2:	68bb      	ldr	r3, [r7, #8]
 80071e4:	689b      	ldr	r3, [r3, #8]
 80071e6:	021b      	lsls	r3, r3, #8
 80071e8:	4319      	orrs	r1, r3
 80071ea:	68bb      	ldr	r3, [r7, #8]
 80071ec:	68db      	ldr	r3, [r3, #12]
 80071ee:	079b      	lsls	r3, r3, #30
 80071f0:	4319      	orrs	r1, r3
 80071f2:	68bb      	ldr	r3, [r7, #8]
 80071f4:	69db      	ldr	r3, [r3, #28]
 80071f6:	4319      	orrs	r1, r3
 80071f8:	68bb      	ldr	r3, [r7, #8]
 80071fa:	691b      	ldr	r3, [r3, #16]
 80071fc:	041b      	lsls	r3, r3, #16
 80071fe:	430b      	orrs	r3, r1
 8007200:	ea42 0103 	orr.w	r1, r2, r3
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	687a      	ldr	r2, [r7, #4]
 8007208:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800720c:	e005      	b.n	800721a <FMC_NORSRAM_Extended_Timing_Init+0x66>
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTRx_BUSTURN_Pos)));
#endif /* FMC_BTRx_DATAHLD */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	687a      	ldr	r2, [r7, #4]
 8007212:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8007216:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 800721a:	2300      	movs	r3, #0
}
 800721c:	4618      	mov	r0, r3
 800721e:	3714      	adds	r7, #20
 8007220:	46bd      	mov	sp, r7
 8007222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007226:	4770      	bx	lr

08007228 <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8007228:	b084      	sub	sp, #16
 800722a:	b480      	push	{r7}
 800722c:	b085      	sub	sp, #20
 800722e:	af00      	add	r7, sp, #0
 8007230:	6078      	str	r0, [r7, #4]
 8007232:	f107 001c 	add.w	r0, r7, #28
 8007236:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800723a:	2300      	movs	r3, #0
 800723c:	60fb      	str	r3, [r7, #12]

  /* Set SDMMC configuration parameters */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  tmpreg |= Init.ClockBypass;
#endif
  tmpreg |= (Init.ClockEdge           |\
 800723e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 8007240:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8007242:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8007244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      |\
 8007246:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8007248:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             |\
 800724a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800724c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl |\
 800724e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8007250:	68fa      	ldr	r2, [r7, #12]
 8007252:	4313      	orrs	r3, r2
 8007254:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	685a      	ldr	r2, [r3, #4]
 800725a:	4b07      	ldr	r3, [pc, #28]	; (8007278 <SDMMC_Init+0x50>)
 800725c:	4013      	ands	r3, r2
 800725e:	68fa      	ldr	r2, [r7, #12]
 8007260:	431a      	orrs	r2, r3
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8007266:	2300      	movs	r3, #0
}
 8007268:	4618      	mov	r0, r3
 800726a:	3714      	adds	r7, #20
 800726c:	46bd      	mov	sp, r7
 800726e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007272:	b004      	add	sp, #16
 8007274:	4770      	bx	lr
 8007276:	bf00      	nop
 8007278:	ffc02c00 	.word	0xffc02c00

0800727c <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800727c:	b480      	push	{r7}
 800727e:	b083      	sub	sp, #12
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800728a:	4618      	mov	r0, r3
 800728c:	370c      	adds	r7, #12
 800728e:	46bd      	mov	sp, r7
 8007290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007294:	4770      	bx	lr

08007296 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8007296:	b580      	push	{r7, lr}
 8007298:	b082      	sub	sp, #8
 800729a:	af00      	add	r7, sp, #0
 800729c:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	f043 0203 	orr.w	r2, r3, #3
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	601a      	str	r2, [r3, #0]
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 80072aa:	2002      	movs	r0, #2
 80072ac:	f7fa fa7c 	bl	80017a8 <HAL_Delay>

  return HAL_OK;
 80072b0:	2300      	movs	r3, #0
}
 80072b2:	4618      	mov	r0, r3
 80072b4:	3708      	adds	r7, #8
 80072b6:	46bd      	mov	sp, r7
 80072b8:	bd80      	pop	{r7, pc}

080072ba <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 80072ba:	b480      	push	{r7}
 80072bc:	b083      	sub	sp, #12
 80072be:	af00      	add	r7, sp, #0
 80072c0:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	f003 0303 	and.w	r3, r3, #3
}
 80072ca:	4618      	mov	r0, r3
 80072cc:	370c      	adds	r7, #12
 80072ce:	46bd      	mov	sp, r7
 80072d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d4:	4770      	bx	lr
	...

080072d8 <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 80072d8:	b480      	push	{r7}
 80072da:	b085      	sub	sp, #20
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]
 80072e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80072e2:	2300      	movs	r3, #0
 80072e4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 80072e6:	683b      	ldr	r3, [r7, #0]
 80072e8:	681a      	ldr	r2, [r3, #0]
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80072ee:	683b      	ldr	r3, [r7, #0]
 80072f0:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80072f2:	683b      	ldr	r3, [r7, #0]
 80072f4:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80072f6:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80072f8:	683b      	ldr	r3, [r7, #0]
 80072fa:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80072fc:	431a      	orrs	r2, r3
                       Command->CPSM);
 80072fe:	683b      	ldr	r3, [r7, #0]
 8007300:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8007302:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007304:	68fa      	ldr	r2, [r7, #12]
 8007306:	4313      	orrs	r3, r2
 8007308:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	68da      	ldr	r2, [r3, #12]
 800730e:	4b06      	ldr	r3, [pc, #24]	; (8007328 <SDMMC_SendCommand+0x50>)
 8007310:	4013      	ands	r3, r2
 8007312:	68fa      	ldr	r2, [r7, #12]
 8007314:	431a      	orrs	r2, r3
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800731a:	2300      	movs	r3, #0
}
 800731c:	4618      	mov	r0, r3
 800731e:	3714      	adds	r7, #20
 8007320:	46bd      	mov	sp, r7
 8007322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007326:	4770      	bx	lr
 8007328:	fffee0c0 	.word	0xfffee0c0

0800732c <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800732c:	b480      	push	{r7}
 800732e:	b083      	sub	sp, #12
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	691b      	ldr	r3, [r3, #16]
 8007338:	b2db      	uxtb	r3, r3
}
 800733a:	4618      	mov	r0, r3
 800733c:	370c      	adds	r7, #12
 800733e:	46bd      	mov	sp, r7
 8007340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007344:	4770      	bx	lr

08007346 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8007346:	b480      	push	{r7}
 8007348:	b085      	sub	sp, #20
 800734a:	af00      	add	r7, sp, #0
 800734c:	6078      	str	r0, [r7, #4]
 800734e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	3314      	adds	r3, #20
 8007354:	461a      	mov	r2, r3
 8007356:	683b      	ldr	r3, [r7, #0]
 8007358:	4413      	add	r3, r2
 800735a:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	681b      	ldr	r3, [r3, #0]
}
 8007360:	4618      	mov	r0, r3
 8007362:	3714      	adds	r7, #20
 8007364:	46bd      	mov	sp, r7
 8007366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736a:	4770      	bx	lr

0800736c <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800736c:	b480      	push	{r7}
 800736e:	b085      	sub	sp, #20
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
 8007374:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8007376:	2300      	movs	r3, #0
 8007378:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	681a      	ldr	r2, [r3, #0]
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8007382:	683b      	ldr	r3, [r7, #0]
 8007384:	685a      	ldr	r2, [r3, #4]
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800738a:	683b      	ldr	r3, [r7, #0]
 800738c:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800738e:	683b      	ldr	r3, [r7, #0]
 8007390:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007392:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8007394:	683b      	ldr	r3, [r7, #0]
 8007396:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8007398:	431a      	orrs	r2, r3
                       Data->DPSM);
 800739a:	683b      	ldr	r3, [r7, #0]
 800739c:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800739e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80073a0:	68fa      	ldr	r2, [r7, #12]
 80073a2:	4313      	orrs	r3, r2
 80073a4:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073aa:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	431a      	orrs	r2, r3
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80073b6:	2300      	movs	r3, #0

}
 80073b8:	4618      	mov	r0, r3
 80073ba:	3714      	adds	r7, #20
 80073bc:	46bd      	mov	sp, r7
 80073be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c2:	4770      	bx	lr

080073c4 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b088      	sub	sp, #32
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
 80073cc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80073ce:	683b      	ldr	r3, [r7, #0]
 80073d0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80073d2:	2310      	movs	r3, #16
 80073d4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80073d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80073da:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80073dc:	2300      	movs	r3, #0
 80073de:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80073e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80073e4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80073e6:	f107 0308 	add.w	r3, r7, #8
 80073ea:	4619      	mov	r1, r3
 80073ec:	6878      	ldr	r0, [r7, #4]
 80073ee:	f7ff ff73 	bl	80072d8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 80073f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80073f6:	2110      	movs	r1, #16
 80073f8:	6878      	ldr	r0, [r7, #4]
 80073fa:	f000 f9b9 	bl	8007770 <SDMMC_GetCmdResp1>
 80073fe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007400:	69fb      	ldr	r3, [r7, #28]
}
 8007402:	4618      	mov	r0, r3
 8007404:	3720      	adds	r7, #32
 8007406:	46bd      	mov	sp, r7
 8007408:	bd80      	pop	{r7, pc}

0800740a <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  addr Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800740a:	b580      	push	{r7, lr}
 800740c:	b08a      	sub	sp, #40	; 0x28
 800740e:	af00      	add	r7, sp, #0
 8007410:	60f8      	str	r0, [r7, #12]
 8007412:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8007416:	683b      	ldr	r3, [r7, #0]
 8007418:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800741a:	2307      	movs	r3, #7
 800741c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800741e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007422:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007424:	2300      	movs	r3, #0
 8007426:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007428:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800742c:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800742e:	f107 0310 	add.w	r3, r7, #16
 8007432:	4619      	mov	r1, r3
 8007434:	68f8      	ldr	r0, [r7, #12]
 8007436:	f7ff ff4f 	bl	80072d8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800743a:	f241 3288 	movw	r2, #5000	; 0x1388
 800743e:	2107      	movs	r1, #7
 8007440:	68f8      	ldr	r0, [r7, #12]
 8007442:	f000 f995 	bl	8007770 <SDMMC_GetCmdResp1>
 8007446:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8007448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800744a:	4618      	mov	r0, r3
 800744c:	3728      	adds	r7, #40	; 0x28
 800744e:	46bd      	mov	sp, r7
 8007450:	bd80      	pop	{r7, pc}

08007452 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8007452:	b580      	push	{r7, lr}
 8007454:	b088      	sub	sp, #32
 8007456:	af00      	add	r7, sp, #0
 8007458:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800745a:	2300      	movs	r3, #0
 800745c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800745e:	2300      	movs	r3, #0
 8007460:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8007462:	2300      	movs	r3, #0
 8007464:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007466:	2300      	movs	r3, #0
 8007468:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800746a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800746e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007470:	f107 0308 	add.w	r3, r7, #8
 8007474:	4619      	mov	r1, r3
 8007476:	6878      	ldr	r0, [r7, #4]
 8007478:	f7ff ff2e 	bl	80072d8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800747c:	6878      	ldr	r0, [r7, #4]
 800747e:	f000 fbb9 	bl	8007bf4 <SDMMC_GetCmdError>
 8007482:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007484:	69fb      	ldr	r3, [r7, #28]
}
 8007486:	4618      	mov	r0, r3
 8007488:	3720      	adds	r7, #32
 800748a:	46bd      	mov	sp, r7
 800748c:	bd80      	pop	{r7, pc}

0800748e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800748e:	b580      	push	{r7, lr}
 8007490:	b088      	sub	sp, #32
 8007492:	af00      	add	r7, sp, #0
 8007494:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8007496:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800749a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800749c:	2308      	movs	r3, #8
 800749e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80074a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80074a4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80074a6:	2300      	movs	r3, #0
 80074a8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80074aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80074ae:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80074b0:	f107 0308 	add.w	r3, r7, #8
 80074b4:	4619      	mov	r1, r3
 80074b6:	6878      	ldr	r0, [r7, #4]
 80074b8:	f7ff ff0e 	bl	80072d8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 80074bc:	6878      	ldr	r0, [r7, #4]
 80074be:	f000 fb4b 	bl	8007b58 <SDMMC_GetCmdResp7>
 80074c2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80074c4:	69fb      	ldr	r3, [r7, #28]
}
 80074c6:	4618      	mov	r0, r3
 80074c8:	3720      	adds	r7, #32
 80074ca:	46bd      	mov	sp, r7
 80074cc:	bd80      	pop	{r7, pc}

080074ce <SDMMC_CmdAppCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80074ce:	b580      	push	{r7, lr}
 80074d0:	b088      	sub	sp, #32
 80074d2:	af00      	add	r7, sp, #0
 80074d4:	6078      	str	r0, [r7, #4]
 80074d6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80074d8:	683b      	ldr	r3, [r7, #0]
 80074da:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80074dc:	2337      	movs	r3, #55	; 0x37
 80074de:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80074e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80074e4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80074e6:	2300      	movs	r3, #0
 80074e8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80074ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80074ee:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80074f0:	f107 0308 	add.w	r3, r7, #8
 80074f4:	4619      	mov	r1, r3
 80074f6:	6878      	ldr	r0, [r7, #4]
 80074f8:	f7ff feee 	bl	80072d8 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 80074fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8007500:	2137      	movs	r1, #55	; 0x37
 8007502:	6878      	ldr	r0, [r7, #4]
 8007504:	f000 f934 	bl	8007770 <SDMMC_GetCmdResp1>
 8007508:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800750a:	69fb      	ldr	r3, [r7, #28]
}
 800750c:	4618      	mov	r0, r3
 800750e:	3720      	adds	r7, #32
 8007510:	46bd      	mov	sp, r7
 8007512:	bd80      	pop	{r7, pc}

08007514 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8007514:	b580      	push	{r7, lr}
 8007516:	b088      	sub	sp, #32
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
 800751c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  sdmmc_cmdinit.Argument         = Argument;
 800751e:	683b      	ldr	r3, [r7, #0]
 8007520:	60bb      	str	r3, [r7, #8]
#else
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8007522:	2329      	movs	r3, #41	; 0x29
 8007524:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007526:	f44f 7380 	mov.w	r3, #256	; 0x100
 800752a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800752c:	2300      	movs	r3, #0
 800752e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007530:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007534:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007536:	f107 0308 	add.w	r3, r7, #8
 800753a:	4619      	mov	r1, r3
 800753c:	6878      	ldr	r0, [r7, #4]
 800753e:	f7ff fecb 	bl	80072d8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8007542:	6878      	ldr	r0, [r7, #4]
 8007544:	f000 fa50 	bl	80079e8 <SDMMC_GetCmdResp3>
 8007548:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800754a:	69fb      	ldr	r3, [r7, #28]
}
 800754c:	4618      	mov	r0, r3
 800754e:	3720      	adds	r7, #32
 8007550:	46bd      	mov	sp, r7
 8007552:	bd80      	pop	{r7, pc}

08007554 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  BusWidth BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8007554:	b580      	push	{r7, lr}
 8007556:	b088      	sub	sp, #32
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
 800755c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800755e:	683b      	ldr	r3, [r7, #0]
 8007560:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8007562:	2306      	movs	r3, #6
 8007564:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007566:	f44f 7380 	mov.w	r3, #256	; 0x100
 800756a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800756c:	2300      	movs	r3, #0
 800756e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007570:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007574:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007576:	f107 0308 	add.w	r3, r7, #8
 800757a:	4619      	mov	r1, r3
 800757c:	6878      	ldr	r0, [r7, #4]
 800757e:	f7ff feab 	bl	80072d8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8007582:	f241 3288 	movw	r2, #5000	; 0x1388
 8007586:	2106      	movs	r1, #6
 8007588:	6878      	ldr	r0, [r7, #4]
 800758a:	f000 f8f1 	bl	8007770 <SDMMC_GetCmdResp1>
 800758e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007590:	69fb      	ldr	r3, [r7, #28]
}
 8007592:	4618      	mov	r0, r3
 8007594:	3720      	adds	r7, #32
 8007596:	46bd      	mov	sp, r7
 8007598:	bd80      	pop	{r7, pc}

0800759a <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800759a:	b580      	push	{r7, lr}
 800759c:	b088      	sub	sp, #32
 800759e:	af00      	add	r7, sp, #0
 80075a0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 80075a2:	2300      	movs	r3, #0
 80075a4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80075a6:	2333      	movs	r3, #51	; 0x33
 80075a8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80075aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80075ae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80075b0:	2300      	movs	r3, #0
 80075b2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80075b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80075b8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80075ba:	f107 0308 	add.w	r3, r7, #8
 80075be:	4619      	mov	r1, r3
 80075c0:	6878      	ldr	r0, [r7, #4]
 80075c2:	f7ff fe89 	bl	80072d8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 80075c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80075ca:	2133      	movs	r1, #51	; 0x33
 80075cc:	6878      	ldr	r0, [r7, #4]
 80075ce:	f000 f8cf 	bl	8007770 <SDMMC_GetCmdResp1>
 80075d2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80075d4:	69fb      	ldr	r3, [r7, #28]
}
 80075d6:	4618      	mov	r0, r3
 80075d8:	3720      	adds	r7, #32
 80075da:	46bd      	mov	sp, r7
 80075dc:	bd80      	pop	{r7, pc}

080075de <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 80075de:	b580      	push	{r7, lr}
 80075e0:	b088      	sub	sp, #32
 80075e2:	af00      	add	r7, sp, #0
 80075e4:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80075e6:	2300      	movs	r3, #0
 80075e8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80075ea:	2302      	movs	r3, #2
 80075ec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80075ee:	f44f 7340 	mov.w	r3, #768	; 0x300
 80075f2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80075f4:	2300      	movs	r3, #0
 80075f6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80075f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80075fc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80075fe:	f107 0308 	add.w	r3, r7, #8
 8007602:	4619      	mov	r1, r3
 8007604:	6878      	ldr	r0, [r7, #4]
 8007606:	f7ff fe67 	bl	80072d8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800760a:	6878      	ldr	r0, [r7, #4]
 800760c:	f000 f9a2 	bl	8007954 <SDMMC_GetCmdResp2>
 8007610:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007612:	69fb      	ldr	r3, [r7, #28]
}
 8007614:	4618      	mov	r0, r3
 8007616:	3720      	adds	r7, #32
 8007618:	46bd      	mov	sp, r7
 800761a:	bd80      	pop	{r7, pc}

0800761c <SDMMC_CmdSendCSD>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800761c:	b580      	push	{r7, lr}
 800761e:	b088      	sub	sp, #32
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
 8007624:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8007626:	683b      	ldr	r3, [r7, #0]
 8007628:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800762a:	2309      	movs	r3, #9
 800762c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800762e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8007632:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007634:	2300      	movs	r3, #0
 8007636:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007638:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800763c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800763e:	f107 0308 	add.w	r3, r7, #8
 8007642:	4619      	mov	r1, r3
 8007644:	6878      	ldr	r0, [r7, #4]
 8007646:	f7ff fe47 	bl	80072d8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800764a:	6878      	ldr	r0, [r7, #4]
 800764c:	f000 f982 	bl	8007954 <SDMMC_GetCmdResp2>
 8007650:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007652:	69fb      	ldr	r3, [r7, #28]
}
 8007654:	4618      	mov	r0, r3
 8007656:	3720      	adds	r7, #32
 8007658:	46bd      	mov	sp, r7
 800765a:	bd80      	pop	{r7, pc}

0800765c <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pRCA Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800765c:	b580      	push	{r7, lr}
 800765e:	b088      	sub	sp, #32
 8007660:	af00      	add	r7, sp, #0
 8007662:	6078      	str	r0, [r7, #4]
 8007664:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8007666:	2300      	movs	r3, #0
 8007668:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800766a:	2303      	movs	r3, #3
 800766c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800766e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007672:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007674:	2300      	movs	r3, #0
 8007676:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007678:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800767c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800767e:	f107 0308 	add.w	r3, r7, #8
 8007682:	4619      	mov	r1, r3
 8007684:	6878      	ldr	r0, [r7, #4]
 8007686:	f7ff fe27 	bl	80072d8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800768a:	683a      	ldr	r2, [r7, #0]
 800768c:	2103      	movs	r1, #3
 800768e:	6878      	ldr	r0, [r7, #4]
 8007690:	f000 f9ea 	bl	8007a68 <SDMMC_GetCmdResp6>
 8007694:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007696:	69fb      	ldr	r3, [r7, #28]
}
 8007698:	4618      	mov	r0, r3
 800769a:	3720      	adds	r7, #32
 800769c:	46bd      	mov	sp, r7
 800769e:	bd80      	pop	{r7, pc}

080076a0 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80076a0:	b580      	push	{r7, lr}
 80076a2:	b088      	sub	sp, #32
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
 80076a8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 80076aa:	683b      	ldr	r3, [r7, #0]
 80076ac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80076ae:	230d      	movs	r3, #13
 80076b0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80076b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80076b6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80076b8:	2300      	movs	r3, #0
 80076ba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80076bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80076c0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80076c2:	f107 0308 	add.w	r3, r7, #8
 80076c6:	4619      	mov	r1, r3
 80076c8:	6878      	ldr	r0, [r7, #4]
 80076ca:	f7ff fe05 	bl	80072d8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 80076ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80076d2:	210d      	movs	r1, #13
 80076d4:	6878      	ldr	r0, [r7, #4]
 80076d6:	f000 f84b 	bl	8007770 <SDMMC_GetCmdResp1>
 80076da:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80076dc:	69fb      	ldr	r3, [r7, #28]
}
 80076de:	4618      	mov	r0, r3
 80076e0:	3720      	adds	r7, #32
 80076e2:	46bd      	mov	sp, r7
 80076e4:	bd80      	pop	{r7, pc}

080076e6 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 80076e6:	b580      	push	{r7, lr}
 80076e8:	b088      	sub	sp, #32
 80076ea:	af00      	add	r7, sp, #0
 80076ec:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 80076ee:	2300      	movs	r3, #0
 80076f0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 80076f2:	230d      	movs	r3, #13
 80076f4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80076f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80076fa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80076fc:	2300      	movs	r3, #0
 80076fe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007700:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007704:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007706:	f107 0308 	add.w	r3, r7, #8
 800770a:	4619      	mov	r1, r3
 800770c:	6878      	ldr	r0, [r7, #4]
 800770e:	f7ff fde3 	bl	80072d8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 8007712:	f241 3288 	movw	r2, #5000	; 0x1388
 8007716:	210d      	movs	r1, #13
 8007718:	6878      	ldr	r0, [r7, #4]
 800771a:	f000 f829 	bl	8007770 <SDMMC_GetCmdResp1>
 800771e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007720:	69fb      	ldr	r3, [r7, #28]
}
 8007722:	4618      	mov	r0, r3
 8007724:	3720      	adds	r7, #32
 8007726:	46bd      	mov	sp, r7
 8007728:	bd80      	pop	{r7, pc}

0800772a <SDMMC_CmdVoltageSwitch>:
  *         condition register (OCR)
  * @param  None
  * @retval HAL status
  */
uint32_t SDMMC_CmdVoltageSwitch(SDMMC_TypeDef *SDMMCx)
{
 800772a:	b580      	push	{r7, lr}
 800772c:	b088      	sub	sp, #32
 800772e:	af00      	add	r7, sp, #0
 8007730:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0x00000000;
 8007732:	2300      	movs	r3, #0
 8007734:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 8007736:	230b      	movs	r3, #11
 8007738:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800773a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800773e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007740:	2300      	movs	r3, #0
 8007742:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007744:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007748:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800774a:	f107 0308 	add.w	r3, r7, #8
 800774e:	4619      	mov	r1, r3
 8007750:	6878      	ldr	r0, [r7, #4]
 8007752:	f7ff fdc1 	bl	80072d8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 8007756:	f241 3288 	movw	r2, #5000	; 0x1388
 800775a:	210b      	movs	r1, #11
 800775c:	6878      	ldr	r0, [r7, #4]
 800775e:	f000 f807 	bl	8007770 <SDMMC_GetCmdResp1>
 8007762:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007764:	69fb      	ldr	r3, [r7, #28]
}
 8007766:	4618      	mov	r0, r3
 8007768:	3720      	adds	r7, #32
 800776a:	46bd      	mov	sp, r7
 800776c:	bd80      	pop	{r7, pc}
	...

08007770 <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8007770:	b580      	push	{r7, lr}
 8007772:	b088      	sub	sp, #32
 8007774:	af00      	add	r7, sp, #0
 8007776:	60f8      	str	r0, [r7, #12]
 8007778:	460b      	mov	r3, r1
 800777a:	607a      	str	r2, [r7, #4]
 800777c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800777e:	4b70      	ldr	r3, [pc, #448]	; (8007940 <SDMMC_GetCmdResp1+0x1d0>)
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	4a70      	ldr	r2, [pc, #448]	; (8007944 <SDMMC_GetCmdResp1+0x1d4>)
 8007784:	fba2 2303 	umull	r2, r3, r2, r3
 8007788:	0a5a      	lsrs	r2, r3, #9
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	fb02 f303 	mul.w	r3, r2, r3
 8007790:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8007792:	69fb      	ldr	r3, [r7, #28]
 8007794:	1e5a      	subs	r2, r3, #1
 8007796:	61fa      	str	r2, [r7, #28]
 8007798:	2b00      	cmp	r3, #0
 800779a:	d102      	bne.n	80077a2 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800779c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80077a0:	e0c9      	b.n	8007936 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077a6:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 80077a8:	69ba      	ldr	r2, [r7, #24]
 80077aa:	4b67      	ldr	r3, [pc, #412]	; (8007948 <SDMMC_GetCmdResp1+0x1d8>)
 80077ac:	4013      	ands	r3, r2
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d0ef      	beq.n	8007792 <SDMMC_GetCmdResp1+0x22>
 80077b2:	69bb      	ldr	r3, [r7, #24]
 80077b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d1ea      	bne.n	8007792 <SDMMC_GetCmdResp1+0x22>
#else
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077c0:	f003 0304 	and.w	r3, r3, #4
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d004      	beq.n	80077d2 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	2204      	movs	r2, #4
 80077cc:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80077ce:	2304      	movs	r3, #4
 80077d0:	e0b1      	b.n	8007936 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077d6:	f003 0301 	and.w	r3, r3, #1
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d004      	beq.n	80077e8 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	2201      	movs	r2, #1
 80077e2:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80077e4:	2301      	movs	r3, #1
 80077e6:	e0a6      	b.n	8007936 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	4a58      	ldr	r2, [pc, #352]	; (800794c <SDMMC_GetCmdResp1+0x1dc>)
 80077ec:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80077ee:	68f8      	ldr	r0, [r7, #12]
 80077f0:	f7ff fd9c 	bl	800732c <SDMMC_GetCommandResponse>
 80077f4:	4603      	mov	r3, r0
 80077f6:	461a      	mov	r2, r3
 80077f8:	7afb      	ldrb	r3, [r7, #11]
 80077fa:	4293      	cmp	r3, r2
 80077fc:	d001      	beq.n	8007802 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80077fe:	2301      	movs	r3, #1
 8007800:	e099      	b.n	8007936 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8007802:	2100      	movs	r1, #0
 8007804:	68f8      	ldr	r0, [r7, #12]
 8007806:	f7ff fd9e 	bl	8007346 <SDMMC_GetResponse>
 800780a:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800780c:	697a      	ldr	r2, [r7, #20]
 800780e:	4b50      	ldr	r3, [pc, #320]	; (8007950 <SDMMC_GetCmdResp1+0x1e0>)
 8007810:	4013      	ands	r3, r2
 8007812:	2b00      	cmp	r3, #0
 8007814:	d101      	bne.n	800781a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8007816:	2300      	movs	r3, #0
 8007818:	e08d      	b.n	8007936 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800781a:	697b      	ldr	r3, [r7, #20]
 800781c:	2b00      	cmp	r3, #0
 800781e:	da02      	bge.n	8007826 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8007820:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007824:	e087      	b.n	8007936 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8007826:	697b      	ldr	r3, [r7, #20]
 8007828:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800782c:	2b00      	cmp	r3, #0
 800782e:	d001      	beq.n	8007834 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8007830:	2340      	movs	r3, #64	; 0x40
 8007832:	e080      	b.n	8007936 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8007834:	697b      	ldr	r3, [r7, #20]
 8007836:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800783a:	2b00      	cmp	r3, #0
 800783c:	d001      	beq.n	8007842 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800783e:	2380      	movs	r3, #128	; 0x80
 8007840:	e079      	b.n	8007936 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8007842:	697b      	ldr	r3, [r7, #20]
 8007844:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007848:	2b00      	cmp	r3, #0
 800784a:	d002      	beq.n	8007852 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800784c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007850:	e071      	b.n	8007936 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8007852:	697b      	ldr	r3, [r7, #20]
 8007854:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007858:	2b00      	cmp	r3, #0
 800785a:	d002      	beq.n	8007862 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800785c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007860:	e069      	b.n	8007936 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8007862:	697b      	ldr	r3, [r7, #20]
 8007864:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007868:	2b00      	cmp	r3, #0
 800786a:	d002      	beq.n	8007872 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800786c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007870:	e061      	b.n	8007936 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8007872:	697b      	ldr	r3, [r7, #20]
 8007874:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007878:	2b00      	cmp	r3, #0
 800787a:	d002      	beq.n	8007882 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800787c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007880:	e059      	b.n	8007936 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8007882:	697b      	ldr	r3, [r7, #20]
 8007884:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007888:	2b00      	cmp	r3, #0
 800788a:	d002      	beq.n	8007892 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800788c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007890:	e051      	b.n	8007936 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8007892:	697b      	ldr	r3, [r7, #20]
 8007894:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007898:	2b00      	cmp	r3, #0
 800789a:	d002      	beq.n	80078a2 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800789c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80078a0:	e049      	b.n	8007936 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80078a2:	697b      	ldr	r3, [r7, #20]
 80078a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d002      	beq.n	80078b2 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80078ac:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80078b0:	e041      	b.n	8007936 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80078b2:	697b      	ldr	r3, [r7, #20]
 80078b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d002      	beq.n	80078c2 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 80078bc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80078c0:	e039      	b.n	8007936 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80078c2:	697b      	ldr	r3, [r7, #20]
 80078c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d002      	beq.n	80078d2 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80078cc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80078d0:	e031      	b.n	8007936 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80078d2:	697b      	ldr	r3, [r7, #20]
 80078d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d002      	beq.n	80078e2 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80078dc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80078e0:	e029      	b.n	8007936 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80078e2:	697b      	ldr	r3, [r7, #20]
 80078e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d002      	beq.n	80078f2 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80078ec:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80078f0:	e021      	b.n	8007936 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80078f2:	697b      	ldr	r3, [r7, #20]
 80078f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d002      	beq.n	8007902 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80078fc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8007900:	e019      	b.n	8007936 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8007902:	697b      	ldr	r3, [r7, #20]
 8007904:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007908:	2b00      	cmp	r3, #0
 800790a:	d002      	beq.n	8007912 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800790c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007910:	e011      	b.n	8007936 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8007912:	697b      	ldr	r3, [r7, #20]
 8007914:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007918:	2b00      	cmp	r3, #0
 800791a:	d002      	beq.n	8007922 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800791c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007920:	e009      	b.n	8007936 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8007922:	697b      	ldr	r3, [r7, #20]
 8007924:	f003 0308 	and.w	r3, r3, #8
 8007928:	2b00      	cmp	r3, #0
 800792a:	d002      	beq.n	8007932 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800792c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8007930:	e001      	b.n	8007936 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8007932:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8007936:	4618      	mov	r0, r3
 8007938:	3720      	adds	r7, #32
 800793a:	46bd      	mov	sp, r7
 800793c:	bd80      	pop	{r7, pc}
 800793e:	bf00      	nop
 8007940:	20000000 	.word	0x20000000
 8007944:	10624dd3 	.word	0x10624dd3
 8007948:	00200045 	.word	0x00200045
 800794c:	002000c5 	.word	0x002000c5
 8007950:	fdffe008 	.word	0xfdffe008

08007954 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8007954:	b480      	push	{r7}
 8007956:	b085      	sub	sp, #20
 8007958:	af00      	add	r7, sp, #0
 800795a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800795c:	4b1f      	ldr	r3, [pc, #124]	; (80079dc <SDMMC_GetCmdResp2+0x88>)
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	4a1f      	ldr	r2, [pc, #124]	; (80079e0 <SDMMC_GetCmdResp2+0x8c>)
 8007962:	fba2 2303 	umull	r2, r3, r2, r3
 8007966:	0a5b      	lsrs	r3, r3, #9
 8007968:	f241 3288 	movw	r2, #5000	; 0x1388
 800796c:	fb02 f303 	mul.w	r3, r2, r3
 8007970:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	1e5a      	subs	r2, r3, #1
 8007976:	60fa      	str	r2, [r7, #12]
 8007978:	2b00      	cmp	r3, #0
 800797a:	d102      	bne.n	8007982 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800797c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007980:	e026      	b.n	80079d0 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007986:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007988:	68bb      	ldr	r3, [r7, #8]
 800798a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800798e:	2b00      	cmp	r3, #0
 8007990:	d0ef      	beq.n	8007972 <SDMMC_GetCmdResp2+0x1e>
 8007992:	68bb      	ldr	r3, [r7, #8]
 8007994:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007998:	2b00      	cmp	r3, #0
 800799a:	d1ea      	bne.n	8007972 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079a0:	f003 0304 	and.w	r3, r3, #4
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d004      	beq.n	80079b2 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	2204      	movs	r2, #4
 80079ac:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80079ae:	2304      	movs	r3, #4
 80079b0:	e00e      	b.n	80079d0 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079b6:	f003 0301 	and.w	r3, r3, #1
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d004      	beq.n	80079c8 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	2201      	movs	r2, #1
 80079c2:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80079c4:	2301      	movs	r3, #1
 80079c6:	e003      	b.n	80079d0 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	4a06      	ldr	r2, [pc, #24]	; (80079e4 <SDMMC_GetCmdResp2+0x90>)
 80079cc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80079ce:	2300      	movs	r3, #0
}
 80079d0:	4618      	mov	r0, r3
 80079d2:	3714      	adds	r7, #20
 80079d4:	46bd      	mov	sp, r7
 80079d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079da:	4770      	bx	lr
 80079dc:	20000000 	.word	0x20000000
 80079e0:	10624dd3 	.word	0x10624dd3
 80079e4:	002000c5 	.word	0x002000c5

080079e8 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 80079e8:	b480      	push	{r7}
 80079ea:	b085      	sub	sp, #20
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80079f0:	4b1a      	ldr	r3, [pc, #104]	; (8007a5c <SDMMC_GetCmdResp3+0x74>)
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	4a1a      	ldr	r2, [pc, #104]	; (8007a60 <SDMMC_GetCmdResp3+0x78>)
 80079f6:	fba2 2303 	umull	r2, r3, r2, r3
 80079fa:	0a5b      	lsrs	r3, r3, #9
 80079fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a00:	fb02 f303 	mul.w	r3, r2, r3
 8007a04:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	1e5a      	subs	r2, r3, #1
 8007a0a:	60fa      	str	r2, [r7, #12]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d102      	bne.n	8007a16 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007a10:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007a14:	e01b      	b.n	8007a4e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a1a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007a1c:	68bb      	ldr	r3, [r7, #8]
 8007a1e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d0ef      	beq.n	8007a06 <SDMMC_GetCmdResp3+0x1e>
 8007a26:	68bb      	ldr	r3, [r7, #8]
 8007a28:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d1ea      	bne.n	8007a06 <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a34:	f003 0304 	and.w	r3, r3, #4
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d004      	beq.n	8007a46 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	2204      	movs	r2, #4
 8007a40:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007a42:	2304      	movs	r3, #4
 8007a44:	e003      	b.n	8007a4e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	4a06      	ldr	r2, [pc, #24]	; (8007a64 <SDMMC_GetCmdResp3+0x7c>)
 8007a4a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8007a4c:	2300      	movs	r3, #0
}
 8007a4e:	4618      	mov	r0, r3
 8007a50:	3714      	adds	r7, #20
 8007a52:	46bd      	mov	sp, r7
 8007a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a58:	4770      	bx	lr
 8007a5a:	bf00      	nop
 8007a5c:	20000000 	.word	0x20000000
 8007a60:	10624dd3 	.word	0x10624dd3
 8007a64:	002000c5 	.word	0x002000c5

08007a68 <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	b088      	sub	sp, #32
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	60f8      	str	r0, [r7, #12]
 8007a70:	460b      	mov	r3, r1
 8007a72:	607a      	str	r2, [r7, #4]
 8007a74:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007a76:	4b35      	ldr	r3, [pc, #212]	; (8007b4c <SDMMC_GetCmdResp6+0xe4>)
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	4a35      	ldr	r2, [pc, #212]	; (8007b50 <SDMMC_GetCmdResp6+0xe8>)
 8007a7c:	fba2 2303 	umull	r2, r3, r2, r3
 8007a80:	0a5b      	lsrs	r3, r3, #9
 8007a82:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a86:	fb02 f303 	mul.w	r3, r2, r3
 8007a8a:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8007a8c:	69fb      	ldr	r3, [r7, #28]
 8007a8e:	1e5a      	subs	r2, r3, #1
 8007a90:	61fa      	str	r2, [r7, #28]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d102      	bne.n	8007a9c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007a96:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007a9a:	e052      	b.n	8007b42 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007aa0:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007aa2:	69bb      	ldr	r3, [r7, #24]
 8007aa4:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d0ef      	beq.n	8007a8c <SDMMC_GetCmdResp6+0x24>
 8007aac:	69bb      	ldr	r3, [r7, #24]
 8007aae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d1ea      	bne.n	8007a8c <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007aba:	f003 0304 	and.w	r3, r3, #4
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d004      	beq.n	8007acc <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	2204      	movs	r2, #4
 8007ac6:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007ac8:	2304      	movs	r3, #4
 8007aca:	e03a      	b.n	8007b42 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ad0:	f003 0301 	and.w	r3, r3, #1
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d004      	beq.n	8007ae2 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	2201      	movs	r2, #1
 8007adc:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007ade:	2301      	movs	r3, #1
 8007ae0:	e02f      	b.n	8007b42 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8007ae2:	68f8      	ldr	r0, [r7, #12]
 8007ae4:	f7ff fc22 	bl	800732c <SDMMC_GetCommandResponse>
 8007ae8:	4603      	mov	r3, r0
 8007aea:	461a      	mov	r2, r3
 8007aec:	7afb      	ldrb	r3, [r7, #11]
 8007aee:	4293      	cmp	r3, r2
 8007af0:	d001      	beq.n	8007af6 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007af2:	2301      	movs	r3, #1
 8007af4:	e025      	b.n	8007b42 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	4a16      	ldr	r2, [pc, #88]	; (8007b54 <SDMMC_GetCmdResp6+0xec>)
 8007afa:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8007afc:	2100      	movs	r1, #0
 8007afe:	68f8      	ldr	r0, [r7, #12]
 8007b00:	f7ff fc21 	bl	8007346 <SDMMC_GetResponse>
 8007b04:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8007b06:	697b      	ldr	r3, [r7, #20]
 8007b08:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d106      	bne.n	8007b1e <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8007b10:	697b      	ldr	r3, [r7, #20]
 8007b12:	0c1b      	lsrs	r3, r3, #16
 8007b14:	b29a      	uxth	r2, r3
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	e011      	b.n	8007b42 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8007b1e:	697b      	ldr	r3, [r7, #20]
 8007b20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d002      	beq.n	8007b2e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007b28:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007b2c:	e009      	b.n	8007b42 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8007b2e:	697b      	ldr	r3, [r7, #20]
 8007b30:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d002      	beq.n	8007b3e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007b38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007b3c:	e001      	b.n	8007b42 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8007b3e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8007b42:	4618      	mov	r0, r3
 8007b44:	3720      	adds	r7, #32
 8007b46:	46bd      	mov	sp, r7
 8007b48:	bd80      	pop	{r7, pc}
 8007b4a:	bf00      	nop
 8007b4c:	20000000 	.word	0x20000000
 8007b50:	10624dd3 	.word	0x10624dd3
 8007b54:	002000c5 	.word	0x002000c5

08007b58 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8007b58:	b480      	push	{r7}
 8007b5a:	b085      	sub	sp, #20
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007b60:	4b22      	ldr	r3, [pc, #136]	; (8007bec <SDMMC_GetCmdResp7+0x94>)
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	4a22      	ldr	r2, [pc, #136]	; (8007bf0 <SDMMC_GetCmdResp7+0x98>)
 8007b66:	fba2 2303 	umull	r2, r3, r2, r3
 8007b6a:	0a5b      	lsrs	r3, r3, #9
 8007b6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b70:	fb02 f303 	mul.w	r3, r2, r3
 8007b74:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	1e5a      	subs	r2, r3, #1
 8007b7a:	60fa      	str	r2, [r7, #12]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d102      	bne.n	8007b86 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007b80:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007b84:	e02c      	b.n	8007be0 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b8a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007b8c:	68bb      	ldr	r3, [r7, #8]
 8007b8e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d0ef      	beq.n	8007b76 <SDMMC_GetCmdResp7+0x1e>
 8007b96:	68bb      	ldr	r3, [r7, #8]
 8007b98:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d1ea      	bne.n	8007b76 <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ba4:	f003 0304 	and.w	r3, r3, #4
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d004      	beq.n	8007bb6 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	2204      	movs	r2, #4
 8007bb0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007bb2:	2304      	movs	r3, #4
 8007bb4:	e014      	b.n	8007be0 <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bba:	f003 0301 	and.w	r3, r3, #1
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d004      	beq.n	8007bcc <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	2201      	movs	r2, #1
 8007bc6:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007bc8:	2301      	movs	r3, #1
 8007bca:	e009      	b.n	8007be0 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d002      	beq.n	8007bde <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	2240      	movs	r2, #64	; 0x40
 8007bdc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8007bde:	2300      	movs	r3, #0

}
 8007be0:	4618      	mov	r0, r3
 8007be2:	3714      	adds	r7, #20
 8007be4:	46bd      	mov	sp, r7
 8007be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bea:	4770      	bx	lr
 8007bec:	20000000 	.word	0x20000000
 8007bf0:	10624dd3 	.word	0x10624dd3

08007bf4 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8007bf4:	b480      	push	{r7}
 8007bf6:	b085      	sub	sp, #20
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007bfc:	4b11      	ldr	r3, [pc, #68]	; (8007c44 <SDMMC_GetCmdError+0x50>)
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	4a11      	ldr	r2, [pc, #68]	; (8007c48 <SDMMC_GetCmdError+0x54>)
 8007c02:	fba2 2303 	umull	r2, r3, r2, r3
 8007c06:	0a5b      	lsrs	r3, r3, #9
 8007c08:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c0c:	fb02 f303 	mul.w	r3, r2, r3
 8007c10:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	1e5a      	subs	r2, r3, #1
 8007c16:	60fa      	str	r2, [r7, #12]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d102      	bne.n	8007c22 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007c1c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007c20:	e009      	b.n	8007c36 <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d0f1      	beq.n	8007c12 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	4a06      	ldr	r2, [pc, #24]	; (8007c4c <SDMMC_GetCmdError+0x58>)
 8007c32:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 8007c34:	2300      	movs	r3, #0
}
 8007c36:	4618      	mov	r0, r3
 8007c38:	3714      	adds	r7, #20
 8007c3a:	46bd      	mov	sp, r7
 8007c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c40:	4770      	bx	lr
 8007c42:	bf00      	nop
 8007c44:	20000000 	.word	0x20000000
 8007c48:	10624dd3 	.word	0x10624dd3
 8007c4c:	002000c5 	.word	0x002000c5

08007c50 <__libc_init_array>:
 8007c50:	b570      	push	{r4, r5, r6, lr}
 8007c52:	4d0d      	ldr	r5, [pc, #52]	; (8007c88 <__libc_init_array+0x38>)
 8007c54:	4c0d      	ldr	r4, [pc, #52]	; (8007c8c <__libc_init_array+0x3c>)
 8007c56:	1b64      	subs	r4, r4, r5
 8007c58:	10a4      	asrs	r4, r4, #2
 8007c5a:	2600      	movs	r6, #0
 8007c5c:	42a6      	cmp	r6, r4
 8007c5e:	d109      	bne.n	8007c74 <__libc_init_array+0x24>
 8007c60:	4d0b      	ldr	r5, [pc, #44]	; (8007c90 <__libc_init_array+0x40>)
 8007c62:	4c0c      	ldr	r4, [pc, #48]	; (8007c94 <__libc_init_array+0x44>)
 8007c64:	f000 f820 	bl	8007ca8 <_init>
 8007c68:	1b64      	subs	r4, r4, r5
 8007c6a:	10a4      	asrs	r4, r4, #2
 8007c6c:	2600      	movs	r6, #0
 8007c6e:	42a6      	cmp	r6, r4
 8007c70:	d105      	bne.n	8007c7e <__libc_init_array+0x2e>
 8007c72:	bd70      	pop	{r4, r5, r6, pc}
 8007c74:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c78:	4798      	blx	r3
 8007c7a:	3601      	adds	r6, #1
 8007c7c:	e7ee      	b.n	8007c5c <__libc_init_array+0xc>
 8007c7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c82:	4798      	blx	r3
 8007c84:	3601      	adds	r6, #1
 8007c86:	e7f2      	b.n	8007c6e <__libc_init_array+0x1e>
 8007c88:	08007d38 	.word	0x08007d38
 8007c8c:	08007d38 	.word	0x08007d38
 8007c90:	08007d38 	.word	0x08007d38
 8007c94:	08007d3c 	.word	0x08007d3c

08007c98 <memset>:
 8007c98:	4402      	add	r2, r0
 8007c9a:	4603      	mov	r3, r0
 8007c9c:	4293      	cmp	r3, r2
 8007c9e:	d100      	bne.n	8007ca2 <memset+0xa>
 8007ca0:	4770      	bx	lr
 8007ca2:	f803 1b01 	strb.w	r1, [r3], #1
 8007ca6:	e7f9      	b.n	8007c9c <memset+0x4>

08007ca8 <_init>:
 8007ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007caa:	bf00      	nop
 8007cac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007cae:	bc08      	pop	{r3}
 8007cb0:	469e      	mov	lr, r3
 8007cb2:	4770      	bx	lr

08007cb4 <_fini>:
 8007cb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cb6:	bf00      	nop
 8007cb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007cba:	bc08      	pop	{r3}
 8007cbc:	469e      	mov	lr, r3
 8007cbe:	4770      	bx	lr
