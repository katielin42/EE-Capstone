
STM32_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008184  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08008340  08008340  00018340  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080083b0  080083b0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080083b0  080083b0  000183b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080083b8  080083b8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080083b8  080083b8  000183b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080083bc  080083bc  000183bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080083c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000870  2000000c  080083cc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000087c  080083cc  0002087c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e123  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000035da  00000000  00000000  0003e15f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001878  00000000  00000000  00041740  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001738  00000000  00000000  00042fb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00032f6a  00000000  00000000  000446f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e6bb  00000000  00000000  0007765a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0012d22d  00000000  00000000  00095d15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001c2f42  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006910  00000000  00000000  001c2f94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	2000000c 	.word	0x2000000c
 80001d8:	00000000 	.word	0x00000000
 80001dc:	08008328 	.word	0x08008328

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000010 	.word	0x20000010
 80001f8:	08008328 	.word	0x08008328

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800020c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000210:	f000 b974 	b.w	80004fc <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9d08      	ldr	r5, [sp, #32]
 8000232:	4604      	mov	r4, r0
 8000234:	468e      	mov	lr, r1
 8000236:	2b00      	cmp	r3, #0
 8000238:	d14d      	bne.n	80002d6 <__udivmoddi4+0xaa>
 800023a:	428a      	cmp	r2, r1
 800023c:	4694      	mov	ip, r2
 800023e:	d969      	bls.n	8000314 <__udivmoddi4+0xe8>
 8000240:	fab2 f282 	clz	r2, r2
 8000244:	b152      	cbz	r2, 800025c <__udivmoddi4+0x30>
 8000246:	fa01 f302 	lsl.w	r3, r1, r2
 800024a:	f1c2 0120 	rsb	r1, r2, #32
 800024e:	fa20 f101 	lsr.w	r1, r0, r1
 8000252:	fa0c fc02 	lsl.w	ip, ip, r2
 8000256:	ea41 0e03 	orr.w	lr, r1, r3
 800025a:	4094      	lsls	r4, r2
 800025c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000260:	0c21      	lsrs	r1, r4, #16
 8000262:	fbbe f6f8 	udiv	r6, lr, r8
 8000266:	fa1f f78c 	uxth.w	r7, ip
 800026a:	fb08 e316 	mls	r3, r8, r6, lr
 800026e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000272:	fb06 f107 	mul.w	r1, r6, r7
 8000276:	4299      	cmp	r1, r3
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x64>
 800027a:	eb1c 0303 	adds.w	r3, ip, r3
 800027e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000282:	f080 811f 	bcs.w	80004c4 <__udivmoddi4+0x298>
 8000286:	4299      	cmp	r1, r3
 8000288:	f240 811c 	bls.w	80004c4 <__udivmoddi4+0x298>
 800028c:	3e02      	subs	r6, #2
 800028e:	4463      	add	r3, ip
 8000290:	1a5b      	subs	r3, r3, r1
 8000292:	b2a4      	uxth	r4, r4
 8000294:	fbb3 f0f8 	udiv	r0, r3, r8
 8000298:	fb08 3310 	mls	r3, r8, r0, r3
 800029c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a0:	fb00 f707 	mul.w	r7, r0, r7
 80002a4:	42a7      	cmp	r7, r4
 80002a6:	d90a      	bls.n	80002be <__udivmoddi4+0x92>
 80002a8:	eb1c 0404 	adds.w	r4, ip, r4
 80002ac:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002b0:	f080 810a 	bcs.w	80004c8 <__udivmoddi4+0x29c>
 80002b4:	42a7      	cmp	r7, r4
 80002b6:	f240 8107 	bls.w	80004c8 <__udivmoddi4+0x29c>
 80002ba:	4464      	add	r4, ip
 80002bc:	3802      	subs	r0, #2
 80002be:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c2:	1be4      	subs	r4, r4, r7
 80002c4:	2600      	movs	r6, #0
 80002c6:	b11d      	cbz	r5, 80002d0 <__udivmoddi4+0xa4>
 80002c8:	40d4      	lsrs	r4, r2
 80002ca:	2300      	movs	r3, #0
 80002cc:	e9c5 4300 	strd	r4, r3, [r5]
 80002d0:	4631      	mov	r1, r6
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d909      	bls.n	80002ee <__udivmoddi4+0xc2>
 80002da:	2d00      	cmp	r5, #0
 80002dc:	f000 80ef 	beq.w	80004be <__udivmoddi4+0x292>
 80002e0:	2600      	movs	r6, #0
 80002e2:	e9c5 0100 	strd	r0, r1, [r5]
 80002e6:	4630      	mov	r0, r6
 80002e8:	4631      	mov	r1, r6
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	fab3 f683 	clz	r6, r3
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	d14a      	bne.n	800038c <__udivmoddi4+0x160>
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xd4>
 80002fa:	4282      	cmp	r2, r0
 80002fc:	f200 80f9 	bhi.w	80004f2 <__udivmoddi4+0x2c6>
 8000300:	1a84      	subs	r4, r0, r2
 8000302:	eb61 0303 	sbc.w	r3, r1, r3
 8000306:	2001      	movs	r0, #1
 8000308:	469e      	mov	lr, r3
 800030a:	2d00      	cmp	r5, #0
 800030c:	d0e0      	beq.n	80002d0 <__udivmoddi4+0xa4>
 800030e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000312:	e7dd      	b.n	80002d0 <__udivmoddi4+0xa4>
 8000314:	b902      	cbnz	r2, 8000318 <__udivmoddi4+0xec>
 8000316:	deff      	udf	#255	; 0xff
 8000318:	fab2 f282 	clz	r2, r2
 800031c:	2a00      	cmp	r2, #0
 800031e:	f040 8092 	bne.w	8000446 <__udivmoddi4+0x21a>
 8000322:	eba1 010c 	sub.w	r1, r1, ip
 8000326:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032a:	fa1f fe8c 	uxth.w	lr, ip
 800032e:	2601      	movs	r6, #1
 8000330:	0c20      	lsrs	r0, r4, #16
 8000332:	fbb1 f3f7 	udiv	r3, r1, r7
 8000336:	fb07 1113 	mls	r1, r7, r3, r1
 800033a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800033e:	fb0e f003 	mul.w	r0, lr, r3
 8000342:	4288      	cmp	r0, r1
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x12c>
 8000346:	eb1c 0101 	adds.w	r1, ip, r1
 800034a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x12a>
 8000350:	4288      	cmp	r0, r1
 8000352:	f200 80cb 	bhi.w	80004ec <__udivmoddi4+0x2c0>
 8000356:	4643      	mov	r3, r8
 8000358:	1a09      	subs	r1, r1, r0
 800035a:	b2a4      	uxth	r4, r4
 800035c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000360:	fb07 1110 	mls	r1, r7, r0, r1
 8000364:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000368:	fb0e fe00 	mul.w	lr, lr, r0
 800036c:	45a6      	cmp	lr, r4
 800036e:	d908      	bls.n	8000382 <__udivmoddi4+0x156>
 8000370:	eb1c 0404 	adds.w	r4, ip, r4
 8000374:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000378:	d202      	bcs.n	8000380 <__udivmoddi4+0x154>
 800037a:	45a6      	cmp	lr, r4
 800037c:	f200 80bb 	bhi.w	80004f6 <__udivmoddi4+0x2ca>
 8000380:	4608      	mov	r0, r1
 8000382:	eba4 040e 	sub.w	r4, r4, lr
 8000386:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800038a:	e79c      	b.n	80002c6 <__udivmoddi4+0x9a>
 800038c:	f1c6 0720 	rsb	r7, r6, #32
 8000390:	40b3      	lsls	r3, r6
 8000392:	fa22 fc07 	lsr.w	ip, r2, r7
 8000396:	ea4c 0c03 	orr.w	ip, ip, r3
 800039a:	fa20 f407 	lsr.w	r4, r0, r7
 800039e:	fa01 f306 	lsl.w	r3, r1, r6
 80003a2:	431c      	orrs	r4, r3
 80003a4:	40f9      	lsrs	r1, r7
 80003a6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003aa:	fa00 f306 	lsl.w	r3, r0, r6
 80003ae:	fbb1 f8f9 	udiv	r8, r1, r9
 80003b2:	0c20      	lsrs	r0, r4, #16
 80003b4:	fa1f fe8c 	uxth.w	lr, ip
 80003b8:	fb09 1118 	mls	r1, r9, r8, r1
 80003bc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c0:	fb08 f00e 	mul.w	r0, r8, lr
 80003c4:	4288      	cmp	r0, r1
 80003c6:	fa02 f206 	lsl.w	r2, r2, r6
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b8>
 80003cc:	eb1c 0101 	adds.w	r1, ip, r1
 80003d0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003d4:	f080 8088 	bcs.w	80004e8 <__udivmoddi4+0x2bc>
 80003d8:	4288      	cmp	r0, r1
 80003da:	f240 8085 	bls.w	80004e8 <__udivmoddi4+0x2bc>
 80003de:	f1a8 0802 	sub.w	r8, r8, #2
 80003e2:	4461      	add	r1, ip
 80003e4:	1a09      	subs	r1, r1, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003ec:	fb09 1110 	mls	r1, r9, r0, r1
 80003f0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003f4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003f8:	458e      	cmp	lr, r1
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1e2>
 80003fc:	eb1c 0101 	adds.w	r1, ip, r1
 8000400:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000404:	d26c      	bcs.n	80004e0 <__udivmoddi4+0x2b4>
 8000406:	458e      	cmp	lr, r1
 8000408:	d96a      	bls.n	80004e0 <__udivmoddi4+0x2b4>
 800040a:	3802      	subs	r0, #2
 800040c:	4461      	add	r1, ip
 800040e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000412:	fba0 9402 	umull	r9, r4, r0, r2
 8000416:	eba1 010e 	sub.w	r1, r1, lr
 800041a:	42a1      	cmp	r1, r4
 800041c:	46c8      	mov	r8, r9
 800041e:	46a6      	mov	lr, r4
 8000420:	d356      	bcc.n	80004d0 <__udivmoddi4+0x2a4>
 8000422:	d053      	beq.n	80004cc <__udivmoddi4+0x2a0>
 8000424:	b15d      	cbz	r5, 800043e <__udivmoddi4+0x212>
 8000426:	ebb3 0208 	subs.w	r2, r3, r8
 800042a:	eb61 010e 	sbc.w	r1, r1, lr
 800042e:	fa01 f707 	lsl.w	r7, r1, r7
 8000432:	fa22 f306 	lsr.w	r3, r2, r6
 8000436:	40f1      	lsrs	r1, r6
 8000438:	431f      	orrs	r7, r3
 800043a:	e9c5 7100 	strd	r7, r1, [r5]
 800043e:	2600      	movs	r6, #0
 8000440:	4631      	mov	r1, r6
 8000442:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000446:	f1c2 0320 	rsb	r3, r2, #32
 800044a:	40d8      	lsrs	r0, r3
 800044c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000450:	fa21 f303 	lsr.w	r3, r1, r3
 8000454:	4091      	lsls	r1, r2
 8000456:	4301      	orrs	r1, r0
 8000458:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800045c:	fa1f fe8c 	uxth.w	lr, ip
 8000460:	fbb3 f0f7 	udiv	r0, r3, r7
 8000464:	fb07 3610 	mls	r6, r7, r0, r3
 8000468:	0c0b      	lsrs	r3, r1, #16
 800046a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800046e:	fb00 f60e 	mul.w	r6, r0, lr
 8000472:	429e      	cmp	r6, r3
 8000474:	fa04 f402 	lsl.w	r4, r4, r2
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x260>
 800047a:	eb1c 0303 	adds.w	r3, ip, r3
 800047e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000482:	d22f      	bcs.n	80004e4 <__udivmoddi4+0x2b8>
 8000484:	429e      	cmp	r6, r3
 8000486:	d92d      	bls.n	80004e4 <__udivmoddi4+0x2b8>
 8000488:	3802      	subs	r0, #2
 800048a:	4463      	add	r3, ip
 800048c:	1b9b      	subs	r3, r3, r6
 800048e:	b289      	uxth	r1, r1
 8000490:	fbb3 f6f7 	udiv	r6, r3, r7
 8000494:	fb07 3316 	mls	r3, r7, r6, r3
 8000498:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049c:	fb06 f30e 	mul.w	r3, r6, lr
 80004a0:	428b      	cmp	r3, r1
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x28a>
 80004a4:	eb1c 0101 	adds.w	r1, ip, r1
 80004a8:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80004ac:	d216      	bcs.n	80004dc <__udivmoddi4+0x2b0>
 80004ae:	428b      	cmp	r3, r1
 80004b0:	d914      	bls.n	80004dc <__udivmoddi4+0x2b0>
 80004b2:	3e02      	subs	r6, #2
 80004b4:	4461      	add	r1, ip
 80004b6:	1ac9      	subs	r1, r1, r3
 80004b8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004bc:	e738      	b.n	8000330 <__udivmoddi4+0x104>
 80004be:	462e      	mov	r6, r5
 80004c0:	4628      	mov	r0, r5
 80004c2:	e705      	b.n	80002d0 <__udivmoddi4+0xa4>
 80004c4:	4606      	mov	r6, r0
 80004c6:	e6e3      	b.n	8000290 <__udivmoddi4+0x64>
 80004c8:	4618      	mov	r0, r3
 80004ca:	e6f8      	b.n	80002be <__udivmoddi4+0x92>
 80004cc:	454b      	cmp	r3, r9
 80004ce:	d2a9      	bcs.n	8000424 <__udivmoddi4+0x1f8>
 80004d0:	ebb9 0802 	subs.w	r8, r9, r2
 80004d4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004d8:	3801      	subs	r0, #1
 80004da:	e7a3      	b.n	8000424 <__udivmoddi4+0x1f8>
 80004dc:	4646      	mov	r6, r8
 80004de:	e7ea      	b.n	80004b6 <__udivmoddi4+0x28a>
 80004e0:	4620      	mov	r0, r4
 80004e2:	e794      	b.n	800040e <__udivmoddi4+0x1e2>
 80004e4:	4640      	mov	r0, r8
 80004e6:	e7d1      	b.n	800048c <__udivmoddi4+0x260>
 80004e8:	46d0      	mov	r8, sl
 80004ea:	e77b      	b.n	80003e4 <__udivmoddi4+0x1b8>
 80004ec:	3b02      	subs	r3, #2
 80004ee:	4461      	add	r1, ip
 80004f0:	e732      	b.n	8000358 <__udivmoddi4+0x12c>
 80004f2:	4630      	mov	r0, r6
 80004f4:	e709      	b.n	800030a <__udivmoddi4+0xde>
 80004f6:	4464      	add	r4, ip
 80004f8:	3802      	subs	r0, #2
 80004fa:	e742      	b.n	8000382 <__udivmoddi4+0x156>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000504:	f001 f909 	bl	800171a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000508:	f000 f813 	bl	8000532 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800050c:	f000 fa98 	bl	8000a40 <MX_GPIO_Init>
  MX_FMC_Init();
 8000510:	f000 fa30 	bl	8000974 <MX_FMC_Init>
  MX_I2C1_Init();
 8000514:	f000 f860 	bl	80005d8 <MX_I2C1_Init>
  MX_SAI1_Init();
 8000518:	f000 f89e 	bl	8000658 <MX_SAI1_Init>
  MX_SDMMC1_SD_Init();
 800051c:	f000 f904 	bl	8000728 <MX_SDMMC1_SD_Init>
  MX_SPI2_Init();
 8000520:	f000 f928 	bl	8000774 <MX_SPI2_Init>
  MX_USART2_UART_Init();
 8000524:	f000 f964 	bl	80007f0 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000528:	f000 f9ae 	bl	8000888 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800052c:	f000 f9f8 	bl	8000920 <MX_USB_OTG_FS_PCD_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000530:	e7fe      	b.n	8000530 <main+0x30>

08000532 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000532:	b580      	push	{r7, lr}
 8000534:	b096      	sub	sp, #88	; 0x58
 8000536:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000538:	f107 0314 	add.w	r3, r7, #20
 800053c:	2244      	movs	r2, #68	; 0x44
 800053e:	2100      	movs	r1, #0
 8000540:	4618      	mov	r0, r3
 8000542:	f007 fee9 	bl	8008318 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000546:	463b      	mov	r3, r7
 8000548:	2200      	movs	r2, #0
 800054a:	601a      	str	r2, [r3, #0]
 800054c:	605a      	str	r2, [r3, #4]
 800054e:	609a      	str	r2, [r3, #8]
 8000550:	60da      	str	r2, [r3, #12]
 8000552:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8000554:	2000      	movs	r0, #0
 8000556:	f001 fe97 	bl	8002288 <HAL_PWREx_ControlVoltageScaling>
 800055a:	4603      	mov	r3, r0
 800055c:	2b00      	cmp	r3, #0
 800055e:	d001      	beq.n	8000564 <SystemClock_Config+0x32>
  {
    Error_Handler();
 8000560:	f000 fc8c 	bl	8000e7c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_MSI;
 8000564:	2330      	movs	r3, #48	; 0x30
 8000566:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000568:	2301      	movs	r3, #1
 800056a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800056c:	2301      	movs	r3, #1
 800056e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000570:	2300      	movs	r3, #0
 8000572:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000574:	2360      	movs	r3, #96	; 0x60
 8000576:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000578:	2302      	movs	r3, #2
 800057a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800057c:	2301      	movs	r3, #1
 800057e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000580:	2301      	movs	r3, #1
 8000582:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000584:	233c      	movs	r3, #60	; 0x3c
 8000586:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV5;
 8000588:	2305      	movs	r3, #5
 800058a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800058c:	2302      	movs	r3, #2
 800058e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000590:	2302      	movs	r3, #2
 8000592:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000594:	f107 0314 	add.w	r3, r7, #20
 8000598:	4618      	mov	r0, r3
 800059a:	f001 ff39 	bl	8002410 <HAL_RCC_OscConfig>
 800059e:	4603      	mov	r3, r0
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d001      	beq.n	80005a8 <SystemClock_Config+0x76>
  {
    Error_Handler();
 80005a4:	f000 fc6a 	bl	8000e7c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005a8:	230f      	movs	r3, #15
 80005aa:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005ac:	2303      	movs	r3, #3
 80005ae:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005b0:	2300      	movs	r3, #0
 80005b2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005b4:	2300      	movs	r3, #0
 80005b6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005b8:	2300      	movs	r3, #0
 80005ba:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005bc:	463b      	mov	r3, r7
 80005be:	2105      	movs	r1, #5
 80005c0:	4618      	mov	r0, r3
 80005c2:	f002 fb3f 	bl	8002c44 <HAL_RCC_ClockConfig>
 80005c6:	4603      	mov	r3, r0
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d001      	beq.n	80005d0 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80005cc:	f000 fc56 	bl	8000e7c <Error_Handler>
  }
}
 80005d0:	bf00      	nop
 80005d2:	3758      	adds	r7, #88	; 0x58
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}

080005d8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005dc:	4b1b      	ldr	r3, [pc, #108]	; (800064c <MX_I2C1_Init+0x74>)
 80005de:	4a1c      	ldr	r2, [pc, #112]	; (8000650 <MX_I2C1_Init+0x78>)
 80005e0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 80005e2:	4b1a      	ldr	r3, [pc, #104]	; (800064c <MX_I2C1_Init+0x74>)
 80005e4:	4a1b      	ldr	r2, [pc, #108]	; (8000654 <MX_I2C1_Init+0x7c>)
 80005e6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80005e8:	4b18      	ldr	r3, [pc, #96]	; (800064c <MX_I2C1_Init+0x74>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005ee:	4b17      	ldr	r3, [pc, #92]	; (800064c <MX_I2C1_Init+0x74>)
 80005f0:	2201      	movs	r2, #1
 80005f2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005f4:	4b15      	ldr	r3, [pc, #84]	; (800064c <MX_I2C1_Init+0x74>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80005fa:	4b14      	ldr	r3, [pc, #80]	; (800064c <MX_I2C1_Init+0x74>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000600:	4b12      	ldr	r3, [pc, #72]	; (800064c <MX_I2C1_Init+0x74>)
 8000602:	2200      	movs	r2, #0
 8000604:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000606:	4b11      	ldr	r3, [pc, #68]	; (800064c <MX_I2C1_Init+0x74>)
 8000608:	2200      	movs	r2, #0
 800060a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800060c:	4b0f      	ldr	r3, [pc, #60]	; (800064c <MX_I2C1_Init+0x74>)
 800060e:	2200      	movs	r2, #0
 8000610:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000612:	480e      	ldr	r0, [pc, #56]	; (800064c <MX_I2C1_Init+0x74>)
 8000614:	f001 fbaa 	bl	8001d6c <HAL_I2C_Init>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800061e:	f000 fc2d 	bl	8000e7c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000622:	2100      	movs	r1, #0
 8000624:	4809      	ldr	r0, [pc, #36]	; (800064c <MX_I2C1_Init+0x74>)
 8000626:	f001 fc30 	bl	8001e8a <HAL_I2CEx_ConfigAnalogFilter>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d001      	beq.n	8000634 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000630:	f000 fc24 	bl	8000e7c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000634:	2100      	movs	r1, #0
 8000636:	4805      	ldr	r0, [pc, #20]	; (800064c <MX_I2C1_Init+0x74>)
 8000638:	f001 fc72 	bl	8001f20 <HAL_I2CEx_ConfigDigitalFilter>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d001      	beq.n	8000646 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000642:	f000 fc1b 	bl	8000e7c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000646:	bf00      	nop
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	20000028 	.word	0x20000028
 8000650:	40005400 	.word	0x40005400
 8000654:	307075b1 	.word	0x307075b1

08000658 <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 800065c:	4b2f      	ldr	r3, [pc, #188]	; (800071c <MX_SAI1_Init+0xc4>)
 800065e:	4a30      	ldr	r2, [pc, #192]	; (8000720 <MX_SAI1_Init+0xc8>)
 8000660:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 8000662:	4b2e      	ldr	r3, [pc, #184]	; (800071c <MX_SAI1_Init+0xc4>)
 8000664:	2200      	movs	r2, #0
 8000666:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8000668:	4b2c      	ldr	r3, [pc, #176]	; (800071c <MX_SAI1_Init+0xc4>)
 800066a:	2200      	movs	r2, #0
 800066c:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_8;
 800066e:	4b2b      	ldr	r3, [pc, #172]	; (800071c <MX_SAI1_Init+0xc4>)
 8000670:	2240      	movs	r2, #64	; 0x40
 8000672:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000674:	4b29      	ldr	r3, [pc, #164]	; (800071c <MX_SAI1_Init+0xc4>)
 8000676:	2200      	movs	r2, #0
 8000678:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 800067a:	4b28      	ldr	r3, [pc, #160]	; (800071c <MX_SAI1_Init+0xc4>)
 800067c:	2200      	movs	r2, #0
 800067e:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8000680:	4b26      	ldr	r3, [pc, #152]	; (800071c <MX_SAI1_Init+0xc4>)
 8000682:	2200      	movs	r2, #0
 8000684:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000686:	4b25      	ldr	r3, [pc, #148]	; (800071c <MX_SAI1_Init+0xc4>)
 8000688:	2200      	movs	r2, #0
 800068a:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 800068c:	4b23      	ldr	r3, [pc, #140]	; (800071c <MX_SAI1_Init+0xc4>)
 800068e:	2200      	movs	r2, #0
 8000690:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.MckOverSampling = SAI_MCK_OVERSAMPLING_DISABLE;
 8000692:	4b22      	ldr	r3, [pc, #136]	; (800071c <MX_SAI1_Init+0xc4>)
 8000694:	2200      	movs	r2, #0
 8000696:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000698:	4b20      	ldr	r3, [pc, #128]	; (800071c <MX_SAI1_Init+0xc4>)
 800069a:	2200      	movs	r2, #0
 800069c:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 800069e:	4b1f      	ldr	r3, [pc, #124]	; (800071c <MX_SAI1_Init+0xc4>)
 80006a0:	4a20      	ldr	r2, [pc, #128]	; (8000724 <MX_SAI1_Init+0xcc>)
 80006a2:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80006a4:	4b1d      	ldr	r3, [pc, #116]	; (800071c <MX_SAI1_Init+0xc4>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 80006aa:	4b1c      	ldr	r3, [pc, #112]	; (800071c <MX_SAI1_Init+0xc4>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 80006b0:	4b1a      	ldr	r3, [pc, #104]	; (800071c <MX_SAI1_Init+0xc4>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80006b6:	4b19      	ldr	r3, [pc, #100]	; (800071c <MX_SAI1_Init+0xc4>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.Init.PdmInit.Activation = DISABLE;
 80006bc:	4b17      	ldr	r3, [pc, #92]	; (800071c <MX_SAI1_Init+0xc4>)
 80006be:	2200      	movs	r2, #0
 80006c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsai_BlockA1.Init.PdmInit.MicPairsNbr = 0;
 80006c4:	4b15      	ldr	r3, [pc, #84]	; (800071c <MX_SAI1_Init+0xc4>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA1.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 80006ca:	4b14      	ldr	r3, [pc, #80]	; (800071c <MX_SAI1_Init+0xc4>)
 80006cc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80006d0:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA1.FrameInit.FrameLength = 8;
 80006d2:	4b12      	ldr	r3, [pc, #72]	; (800071c <MX_SAI1_Init+0xc4>)
 80006d4:	2208      	movs	r2, #8
 80006d6:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 80006d8:	4b10      	ldr	r3, [pc, #64]	; (800071c <MX_SAI1_Init+0xc4>)
 80006da:	2201      	movs	r2, #1
 80006dc:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 80006de:	4b0f      	ldr	r3, [pc, #60]	; (800071c <MX_SAI1_Init+0xc4>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80006e4:	4b0d      	ldr	r3, [pc, #52]	; (800071c <MX_SAI1_Init+0xc4>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 80006ea:	4b0c      	ldr	r3, [pc, #48]	; (800071c <MX_SAI1_Init+0xc4>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 80006f0:	4b0a      	ldr	r3, [pc, #40]	; (800071c <MX_SAI1_Init+0xc4>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	665a      	str	r2, [r3, #100]	; 0x64
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 80006f6:	4b09      	ldr	r3, [pc, #36]	; (800071c <MX_SAI1_Init+0xc4>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_BlockA1.SlotInit.SlotNumber = 1;
 80006fc:	4b07      	ldr	r3, [pc, #28]	; (800071c <MX_SAI1_Init+0xc4>)
 80006fe:	2201      	movs	r2, #1
 8000700:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_BlockA1.SlotInit.SlotActive = 0x00000000;
 8000702:	4b06      	ldr	r3, [pc, #24]	; (800071c <MX_SAI1_Init+0xc4>)
 8000704:	2200      	movs	r2, #0
 8000706:	671a      	str	r2, [r3, #112]	; 0x70
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 8000708:	4804      	ldr	r0, [pc, #16]	; (800071c <MX_SAI1_Init+0xc4>)
 800070a:	f004 faff 	bl	8004d0c <HAL_SAI_Init>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <MX_SAI1_Init+0xc0>
  {
    Error_Handler();
 8000714:	f000 fbb2 	bl	8000e7c <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8000718:	bf00      	nop
 800071a:	bd80      	pop	{r7, pc}
 800071c:	2000007c 	.word	0x2000007c
 8000720:	40015404 	.word	0x40015404
 8000724:	0002ee00 	.word	0x0002ee00

08000728 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 800072c:	4b0f      	ldr	r3, [pc, #60]	; (800076c <MX_SDMMC1_SD_Init+0x44>)
 800072e:	4a10      	ldr	r2, [pc, #64]	; (8000770 <MX_SDMMC1_SD_Init+0x48>)
 8000730:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000732:	4b0e      	ldr	r3, [pc, #56]	; (800076c <MX_SDMMC1_SD_Init+0x44>)
 8000734:	2200      	movs	r2, #0
 8000736:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000738:	4b0c      	ldr	r3, [pc, #48]	; (800076c <MX_SDMMC1_SD_Init+0x44>)
 800073a:	2200      	movs	r2, #0
 800073c:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 800073e:	4b0b      	ldr	r3, [pc, #44]	; (800076c <MX_SDMMC1_SD_Init+0x44>)
 8000740:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000744:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000746:	4b09      	ldr	r3, [pc, #36]	; (800076c <MX_SDMMC1_SD_Init+0x44>)
 8000748:	2200      	movs	r2, #0
 800074a:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 800074c:	4b07      	ldr	r3, [pc, #28]	; (800076c <MX_SDMMC1_SD_Init+0x44>)
 800074e:	2200      	movs	r2, #0
 8000750:	615a      	str	r2, [r3, #20]
  hsd1.Init.Transceiver = SDMMC_TRANSCEIVER_DISABLE;
 8000752:	4b06      	ldr	r3, [pc, #24]	; (800076c <MX_SDMMC1_SD_Init+0x44>)
 8000754:	2200      	movs	r2, #0
 8000756:	619a      	str	r2, [r3, #24]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 8000758:	4804      	ldr	r0, [pc, #16]	; (800076c <MX_SDMMC1_SD_Init+0x44>)
 800075a:	f004 fcef 	bl	800513c <HAL_SD_Init>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d001      	beq.n	8000768 <MX_SDMMC1_SD_Init+0x40>
  {
    Error_Handler();
 8000764:	f000 fb8a 	bl	8000e7c <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000768:	bf00      	nop
 800076a:	bd80      	pop	{r7, pc}
 800076c:	20000110 	.word	0x20000110
 8000770:	50062400 	.word	0x50062400

08000774 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000778:	4b1b      	ldr	r3, [pc, #108]	; (80007e8 <MX_SPI2_Init+0x74>)
 800077a:	4a1c      	ldr	r2, [pc, #112]	; (80007ec <MX_SPI2_Init+0x78>)
 800077c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800077e:	4b1a      	ldr	r3, [pc, #104]	; (80007e8 <MX_SPI2_Init+0x74>)
 8000780:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000784:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000786:	4b18      	ldr	r3, [pc, #96]	; (80007e8 <MX_SPI2_Init+0x74>)
 8000788:	2200      	movs	r2, #0
 800078a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 800078c:	4b16      	ldr	r3, [pc, #88]	; (80007e8 <MX_SPI2_Init+0x74>)
 800078e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000792:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000794:	4b14      	ldr	r3, [pc, #80]	; (80007e8 <MX_SPI2_Init+0x74>)
 8000796:	2200      	movs	r2, #0
 8000798:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800079a:	4b13      	ldr	r3, [pc, #76]	; (80007e8 <MX_SPI2_Init+0x74>)
 800079c:	2200      	movs	r2, #0
 800079e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80007a0:	4b11      	ldr	r3, [pc, #68]	; (80007e8 <MX_SPI2_Init+0x74>)
 80007a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007a6:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80007a8:	4b0f      	ldr	r3, [pc, #60]	; (80007e8 <MX_SPI2_Init+0x74>)
 80007aa:	2208      	movs	r2, #8
 80007ac:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007ae:	4b0e      	ldr	r3, [pc, #56]	; (80007e8 <MX_SPI2_Init+0x74>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80007b4:	4b0c      	ldr	r3, [pc, #48]	; (80007e8 <MX_SPI2_Init+0x74>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007ba:	4b0b      	ldr	r3, [pc, #44]	; (80007e8 <MX_SPI2_Init+0x74>)
 80007bc:	2200      	movs	r2, #0
 80007be:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80007c0:	4b09      	ldr	r3, [pc, #36]	; (80007e8 <MX_SPI2_Init+0x74>)
 80007c2:	2207      	movs	r2, #7
 80007c4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80007c6:	4b08      	ldr	r3, [pc, #32]	; (80007e8 <MX_SPI2_Init+0x74>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80007cc:	4b06      	ldr	r3, [pc, #24]	; (80007e8 <MX_SPI2_Init+0x74>)
 80007ce:	2208      	movs	r2, #8
 80007d0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80007d2:	4805      	ldr	r0, [pc, #20]	; (80007e8 <MX_SPI2_Init+0x74>)
 80007d4:	f005 fd9d 	bl	8006312 <HAL_SPI_Init>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80007de:	f000 fb4d 	bl	8000e7c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80007e2:	bf00      	nop
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	20000190 	.word	0x20000190
 80007ec:	40003800 	.word	0x40003800

080007f0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007f4:	4b22      	ldr	r3, [pc, #136]	; (8000880 <MX_USART2_UART_Init+0x90>)
 80007f6:	4a23      	ldr	r2, [pc, #140]	; (8000884 <MX_USART2_UART_Init+0x94>)
 80007f8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007fa:	4b21      	ldr	r3, [pc, #132]	; (8000880 <MX_USART2_UART_Init+0x90>)
 80007fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000800:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000802:	4b1f      	ldr	r3, [pc, #124]	; (8000880 <MX_USART2_UART_Init+0x90>)
 8000804:	2200      	movs	r2, #0
 8000806:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000808:	4b1d      	ldr	r3, [pc, #116]	; (8000880 <MX_USART2_UART_Init+0x90>)
 800080a:	2200      	movs	r2, #0
 800080c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800080e:	4b1c      	ldr	r3, [pc, #112]	; (8000880 <MX_USART2_UART_Init+0x90>)
 8000810:	2200      	movs	r2, #0
 8000812:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000814:	4b1a      	ldr	r3, [pc, #104]	; (8000880 <MX_USART2_UART_Init+0x90>)
 8000816:	220c      	movs	r2, #12
 8000818:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800081a:	4b19      	ldr	r3, [pc, #100]	; (8000880 <MX_USART2_UART_Init+0x90>)
 800081c:	2200      	movs	r2, #0
 800081e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000820:	4b17      	ldr	r3, [pc, #92]	; (8000880 <MX_USART2_UART_Init+0x90>)
 8000822:	2200      	movs	r2, #0
 8000824:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000826:	4b16      	ldr	r3, [pc, #88]	; (8000880 <MX_USART2_UART_Init+0x90>)
 8000828:	2200      	movs	r2, #0
 800082a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800082c:	4b14      	ldr	r3, [pc, #80]	; (8000880 <MX_USART2_UART_Init+0x90>)
 800082e:	2200      	movs	r2, #0
 8000830:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000832:	4b13      	ldr	r3, [pc, #76]	; (8000880 <MX_USART2_UART_Init+0x90>)
 8000834:	2200      	movs	r2, #0
 8000836:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000838:	4811      	ldr	r0, [pc, #68]	; (8000880 <MX_USART2_UART_Init+0x90>)
 800083a:	f005 fe55 	bl	80064e8 <HAL_UART_Init>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d001      	beq.n	8000848 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000844:	f000 fb1a 	bl	8000e7c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000848:	2100      	movs	r1, #0
 800084a:	480d      	ldr	r0, [pc, #52]	; (8000880 <MX_USART2_UART_Init+0x90>)
 800084c:	f006 fb86 	bl	8006f5c <HAL_UARTEx_SetTxFifoThreshold>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000856:	f000 fb11 	bl	8000e7c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800085a:	2100      	movs	r1, #0
 800085c:	4808      	ldr	r0, [pc, #32]	; (8000880 <MX_USART2_UART_Init+0x90>)
 800085e:	f006 fbbb 	bl	8006fd8 <HAL_UARTEx_SetRxFifoThreshold>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000868:	f000 fb08 	bl	8000e7c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800086c:	4804      	ldr	r0, [pc, #16]	; (8000880 <MX_USART2_UART_Init+0x90>)
 800086e:	f006 fb3c 	bl	8006eea <HAL_UARTEx_DisableFifoMode>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000878:	f000 fb00 	bl	8000e7c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800087c:	bf00      	nop
 800087e:	bd80      	pop	{r7, pc}
 8000880:	200001f4 	.word	0x200001f4
 8000884:	40004400 	.word	0x40004400

08000888 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800088c:	4b22      	ldr	r3, [pc, #136]	; (8000918 <MX_USART3_UART_Init+0x90>)
 800088e:	4a23      	ldr	r2, [pc, #140]	; (800091c <MX_USART3_UART_Init+0x94>)
 8000890:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000892:	4b21      	ldr	r3, [pc, #132]	; (8000918 <MX_USART3_UART_Init+0x90>)
 8000894:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000898:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800089a:	4b1f      	ldr	r3, [pc, #124]	; (8000918 <MX_USART3_UART_Init+0x90>)
 800089c:	2200      	movs	r2, #0
 800089e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80008a0:	4b1d      	ldr	r3, [pc, #116]	; (8000918 <MX_USART3_UART_Init+0x90>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80008a6:	4b1c      	ldr	r3, [pc, #112]	; (8000918 <MX_USART3_UART_Init+0x90>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80008ac:	4b1a      	ldr	r3, [pc, #104]	; (8000918 <MX_USART3_UART_Init+0x90>)
 80008ae:	220c      	movs	r2, #12
 80008b0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008b2:	4b19      	ldr	r3, [pc, #100]	; (8000918 <MX_USART3_UART_Init+0x90>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80008b8:	4b17      	ldr	r3, [pc, #92]	; (8000918 <MX_USART3_UART_Init+0x90>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008be:	4b16      	ldr	r3, [pc, #88]	; (8000918 <MX_USART3_UART_Init+0x90>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008c4:	4b14      	ldr	r3, [pc, #80]	; (8000918 <MX_USART3_UART_Init+0x90>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008ca:	4b13      	ldr	r3, [pc, #76]	; (8000918 <MX_USART3_UART_Init+0x90>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80008d0:	4811      	ldr	r0, [pc, #68]	; (8000918 <MX_USART3_UART_Init+0x90>)
 80008d2:	f005 fe09 	bl	80064e8 <HAL_UART_Init>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80008dc:	f000 face 	bl	8000e7c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008e0:	2100      	movs	r1, #0
 80008e2:	480d      	ldr	r0, [pc, #52]	; (8000918 <MX_USART3_UART_Init+0x90>)
 80008e4:	f006 fb3a 	bl	8006f5c <HAL_UARTEx_SetTxFifoThreshold>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80008ee:	f000 fac5 	bl	8000e7c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008f2:	2100      	movs	r1, #0
 80008f4:	4808      	ldr	r0, [pc, #32]	; (8000918 <MX_USART3_UART_Init+0x90>)
 80008f6:	f006 fb6f 	bl	8006fd8 <HAL_UARTEx_SetRxFifoThreshold>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d001      	beq.n	8000904 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000900:	f000 fabc 	bl	8000e7c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000904:	4804      	ldr	r0, [pc, #16]	; (8000918 <MX_USART3_UART_Init+0x90>)
 8000906:	f006 faf0 	bl	8006eea <HAL_UARTEx_DisableFifoMode>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d001      	beq.n	8000914 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000910:	f000 fab4 	bl	8000e7c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000914:	bf00      	nop
 8000916:	bd80      	pop	{r7, pc}
 8000918:	20000284 	.word	0x20000284
 800091c:	40004800 	.word	0x40004800

08000920 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000924:	4b12      	ldr	r3, [pc, #72]	; (8000970 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000926:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800092a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800092c:	4b10      	ldr	r3, [pc, #64]	; (8000970 <MX_USB_OTG_FS_PCD_Init+0x50>)
 800092e:	2206      	movs	r2, #6
 8000930:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000932:	4b0f      	ldr	r3, [pc, #60]	; (8000970 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000934:	2202      	movs	r2, #2
 8000936:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000938:	4b0d      	ldr	r3, [pc, #52]	; (8000970 <MX_USB_OTG_FS_PCD_Init+0x50>)
 800093a:	2200      	movs	r2, #0
 800093c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800093e:	4b0c      	ldr	r3, [pc, #48]	; (8000970 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000940:	2200      	movs	r2, #0
 8000942:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000944:	4b0a      	ldr	r3, [pc, #40]	; (8000970 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000946:	2200      	movs	r2, #0
 8000948:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800094a:	4b09      	ldr	r3, [pc, #36]	; (8000970 <MX_USB_OTG_FS_PCD_Init+0x50>)
 800094c:	2200      	movs	r2, #0
 800094e:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000950:	4b07      	ldr	r3, [pc, #28]	; (8000970 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000952:	2200      	movs	r2, #0
 8000954:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000956:	4b06      	ldr	r3, [pc, #24]	; (8000970 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000958:	2200      	movs	r2, #0
 800095a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800095c:	4804      	ldr	r0, [pc, #16]	; (8000970 <MX_USB_OTG_FS_PCD_Init+0x50>)
 800095e:	f001 fb2b 	bl	8001fb8 <HAL_PCD_Init>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <MX_USB_OTG_FS_PCD_Init+0x4c>
  {
    Error_Handler();
 8000968:	f000 fa88 	bl	8000e7c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800096c:	bf00      	nop
 800096e:	bd80      	pop	{r7, pc}
 8000970:	20000314 	.word	0x20000314

08000974 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b088      	sub	sp, #32
 8000978:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 800097a:	463b      	mov	r3, r7
 800097c:	2220      	movs	r2, #32
 800097e:	2100      	movs	r1, #0
 8000980:	4618      	mov	r0, r3
 8000982:	f007 fcc9 	bl	8008318 <memset>

  /* USER CODE END FMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 8000986:	4b2c      	ldr	r3, [pc, #176]	; (8000a38 <MX_FMC_Init+0xc4>)
 8000988:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 800098c:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 800098e:	4b2a      	ldr	r3, [pc, #168]	; (8000a38 <MX_FMC_Init+0xc4>)
 8000990:	4a2a      	ldr	r2, [pc, #168]	; (8000a3c <MX_FMC_Init+0xc8>)
 8000992:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FMC_NORSRAM_BANK1;
 8000994:	4b28      	ldr	r3, [pc, #160]	; (8000a38 <MX_FMC_Init+0xc4>)
 8000996:	2200      	movs	r2, #0
 8000998:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 800099a:	4b27      	ldr	r3, [pc, #156]	; (8000a38 <MX_FMC_Init+0xc4>)
 800099c:	2200      	movs	r2, #0
 800099e:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FMC_MEMORY_TYPE_PSRAM;
 80009a0:	4b25      	ldr	r3, [pc, #148]	; (8000a38 <MX_FMC_Init+0xc4>)
 80009a2:	2204      	movs	r2, #4
 80009a4:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 80009a6:	4b24      	ldr	r3, [pc, #144]	; (8000a38 <MX_FMC_Init+0xc4>)
 80009a8:	2210      	movs	r2, #16
 80009aa:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_ENABLE;
 80009ac:	4b22      	ldr	r3, [pc, #136]	; (8000a38 <MX_FMC_Init+0xc4>)
 80009ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80009b2:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 80009b4:	4b20      	ldr	r3, [pc, #128]	; (8000a38 <MX_FMC_Init+0xc4>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 80009ba:	4b1f      	ldr	r3, [pc, #124]	; (8000a38 <MX_FMC_Init+0xc4>)
 80009bc:	2200      	movs	r2, #0
 80009be:	621a      	str	r2, [r3, #32]
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_DISABLE;
 80009c0:	4b1d      	ldr	r3, [pc, #116]	; (8000a38 <MX_FMC_Init+0xc4>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_ENABLE;
 80009c6:	4b1c      	ldr	r3, [pc, #112]	; (8000a38 <MX_FMC_Init+0xc4>)
 80009c8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80009cc:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 80009ce:	4b1a      	ldr	r3, [pc, #104]	; (8000a38 <MX_FMC_Init+0xc4>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 80009d4:	4b18      	ldr	r3, [pc, #96]	; (8000a38 <MX_FMC_Init+0xc4>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.WriteBurst = FMC_WRITE_BURST_ENABLE;
 80009da:	4b17      	ldr	r3, [pc, #92]	; (8000a38 <MX_FMC_Init+0xc4>)
 80009dc:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80009e0:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 80009e2:	4b15      	ldr	r3, [pc, #84]	; (8000a38 <MX_FMC_Init+0xc4>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 80009e8:	4b13      	ldr	r3, [pc, #76]	; (8000a38 <MX_FMC_Init+0xc4>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.NBLSetupTime = 0;
 80009ee:	4b12      	ldr	r3, [pc, #72]	; (8000a38 <MX_FMC_Init+0xc4>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	645a      	str	r2, [r3, #68]	; 0x44
  hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 80009f4:	4b10      	ldr	r3, [pc, #64]	; (8000a38 <MX_FMC_Init+0xc4>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	641a      	str	r2, [r3, #64]	; 0x40
  /* Timing */
  Timing.AddressSetupTime = 15;
 80009fa:	230f      	movs	r3, #15
 80009fc:	603b      	str	r3, [r7, #0]
  Timing.AddressHoldTime = 15;
 80009fe:	230f      	movs	r3, #15
 8000a00:	607b      	str	r3, [r7, #4]
  Timing.DataSetupTime = 255;
 8000a02:	23ff      	movs	r3, #255	; 0xff
 8000a04:	60bb      	str	r3, [r7, #8]
  Timing.DataHoldTime = 0;
 8000a06:	2300      	movs	r3, #0
 8000a08:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8000a0a:	230f      	movs	r3, #15
 8000a0c:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8000a0e:	2310      	movs	r3, #16
 8000a10:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 2;
 8000a12:	2302      	movs	r3, #2
 8000a14:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 8000a16:	2300      	movs	r3, #0
 8000a18:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8000a1a:	463b      	mov	r3, r7
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	4619      	mov	r1, r3
 8000a20:	4805      	ldr	r0, [pc, #20]	; (8000a38 <MX_FMC_Init+0xc4>)
 8000a22:	f005 fd19 	bl	8006458 <HAL_SRAM_Init>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d001      	beq.n	8000a30 <MX_FMC_Init+0xbc>
  {
    Error_Handler( );
 8000a2c:	f000 fa26 	bl	8000e7c <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000a30:	bf00      	nop
 8000a32:	3720      	adds	r7, #32
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	20000820 	.word	0x20000820
 8000a3c:	a0000104 	.word	0xa0000104

08000a40 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b08e      	sub	sp, #56	; 0x38
 8000a44:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	601a      	str	r2, [r3, #0]
 8000a4e:	605a      	str	r2, [r3, #4]
 8000a50:	609a      	str	r2, [r3, #8]
 8000a52:	60da      	str	r2, [r3, #12]
 8000a54:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000a56:	4bb2      	ldr	r3, [pc, #712]	; (8000d20 <MX_GPIO_Init+0x2e0>)
 8000a58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a5a:	4ab1      	ldr	r2, [pc, #708]	; (8000d20 <MX_GPIO_Init+0x2e0>)
 8000a5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a62:	4baf      	ldr	r3, [pc, #700]	; (8000d20 <MX_GPIO_Init+0x2e0>)
 8000a64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a6a:	623b      	str	r3, [r7, #32]
 8000a6c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a6e:	4bac      	ldr	r3, [pc, #688]	; (8000d20 <MX_GPIO_Init+0x2e0>)
 8000a70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a72:	4aab      	ldr	r2, [pc, #684]	; (8000d20 <MX_GPIO_Init+0x2e0>)
 8000a74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a7a:	4ba9      	ldr	r3, [pc, #676]	; (8000d20 <MX_GPIO_Init+0x2e0>)
 8000a7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a82:	61fb      	str	r3, [r7, #28]
 8000a84:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a86:	4ba6      	ldr	r3, [pc, #664]	; (8000d20 <MX_GPIO_Init+0x2e0>)
 8000a88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a8a:	4aa5      	ldr	r2, [pc, #660]	; (8000d20 <MX_GPIO_Init+0x2e0>)
 8000a8c:	f043 0310 	orr.w	r3, r3, #16
 8000a90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a92:	4ba3      	ldr	r3, [pc, #652]	; (8000d20 <MX_GPIO_Init+0x2e0>)
 8000a94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a96:	f003 0310 	and.w	r3, r3, #16
 8000a9a:	61bb      	str	r3, [r7, #24]
 8000a9c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a9e:	4ba0      	ldr	r3, [pc, #640]	; (8000d20 <MX_GPIO_Init+0x2e0>)
 8000aa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aa2:	4a9f      	ldr	r2, [pc, #636]	; (8000d20 <MX_GPIO_Init+0x2e0>)
 8000aa4:	f043 0302 	orr.w	r3, r3, #2
 8000aa8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000aaa:	4b9d      	ldr	r3, [pc, #628]	; (8000d20 <MX_GPIO_Init+0x2e0>)
 8000aac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aae:	f003 0302 	and.w	r3, r3, #2
 8000ab2:	617b      	str	r3, [r7, #20]
 8000ab4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ab6:	4b9a      	ldr	r3, [pc, #616]	; (8000d20 <MX_GPIO_Init+0x2e0>)
 8000ab8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aba:	4a99      	ldr	r2, [pc, #612]	; (8000d20 <MX_GPIO_Init+0x2e0>)
 8000abc:	f043 0301 	orr.w	r3, r3, #1
 8000ac0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ac2:	4b97      	ldr	r3, [pc, #604]	; (8000d20 <MX_GPIO_Init+0x2e0>)
 8000ac4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ac6:	f003 0301 	and.w	r3, r3, #1
 8000aca:	613b      	str	r3, [r7, #16]
 8000acc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ace:	4b94      	ldr	r3, [pc, #592]	; (8000d20 <MX_GPIO_Init+0x2e0>)
 8000ad0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ad2:	4a93      	ldr	r2, [pc, #588]	; (8000d20 <MX_GPIO_Init+0x2e0>)
 8000ad4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ad8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ada:	4b91      	ldr	r3, [pc, #580]	; (8000d20 <MX_GPIO_Init+0x2e0>)
 8000adc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ade:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ae2:	60fb      	str	r3, [r7, #12]
 8000ae4:	68fb      	ldr	r3, [r7, #12]
  HAL_PWREx_EnableVddIO2();
 8000ae6:	f001 fc83 	bl	80023f0 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000aea:	4b8d      	ldr	r3, [pc, #564]	; (8000d20 <MX_GPIO_Init+0x2e0>)
 8000aec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aee:	4a8c      	ldr	r2, [pc, #560]	; (8000d20 <MX_GPIO_Init+0x2e0>)
 8000af0:	f043 0308 	orr.w	r3, r3, #8
 8000af4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000af6:	4b8a      	ldr	r3, [pc, #552]	; (8000d20 <MX_GPIO_Init+0x2e0>)
 8000af8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000afa:	f003 0308 	and.w	r3, r3, #8
 8000afe:	60bb      	str	r3, [r7, #8]
 8000b00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b02:	4b87      	ldr	r3, [pc, #540]	; (8000d20 <MX_GPIO_Init+0x2e0>)
 8000b04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b06:	4a86      	ldr	r2, [pc, #536]	; (8000d20 <MX_GPIO_Init+0x2e0>)
 8000b08:	f043 0304 	orr.w	r3, r3, #4
 8000b0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b0e:	4b84      	ldr	r3, [pc, #528]	; (8000d20 <MX_GPIO_Init+0x2e0>)
 8000b10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b12:	f003 0304 	and.w	r3, r3, #4
 8000b16:	607b      	str	r3, [r7, #4]
 8000b18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b1a:	4b81      	ldr	r3, [pc, #516]	; (8000d20 <MX_GPIO_Init+0x2e0>)
 8000b1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b1e:	4a80      	ldr	r2, [pc, #512]	; (8000d20 <MX_GPIO_Init+0x2e0>)
 8000b20:	f043 0320 	orr.w	r3, r3, #32
 8000b24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b26:	4b7e      	ldr	r3, [pc, #504]	; (8000d20 <MX_GPIO_Init+0x2e0>)
 8000b28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b2a:	f003 0320 	and.w	r3, r3, #32
 8000b2e:	603b      	str	r3, [r7, #0]
 8000b30:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, MIC_VDD_Pin|DSI_SPI_USART_CS_Pin|LED_GREEN_Pin, GPIO_PIN_RESET);
 8000b32:	2200      	movs	r2, #0
 8000b34:	f244 0114 	movw	r1, #16404	; 0x4014
 8000b38:	487a      	ldr	r0, [pc, #488]	; (8000d24 <MX_GPIO_Init+0x2e4>)
 8000b3a:	f001 f8ff 	bl	8001d3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(JOY_SEL_GPIO_Port, JOY_SEL_Pin, GPIO_PIN_RESET);
 8000b3e:	2200      	movs	r2, #0
 8000b40:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b44:	4878      	ldr	r0, [pc, #480]	; (8000d28 <MX_GPIO_Init+0x2e8>)
 8000b46:	f001 f8f9 	bl	8001d3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_RESET);
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	2140      	movs	r1, #64	; 0x40
 8000b4e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b52:	f001 f8f3 	bl	8001d3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MFX_WAKEUP_GPIO_Port, MFX_WAKEUP_Pin, GPIO_PIN_RESET);
 8000b56:	2200      	movs	r2, #0
 8000b58:	2104      	movs	r1, #4
 8000b5a:	4874      	ldr	r0, [pc, #464]	; (8000d2c <MX_GPIO_Init+0x2ec>)
 8000b5c:	f001 f8ee 	bl	8001d3c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OCTOSPIM_P2_IO1_Pin OCTOSPIM_P2_IO2_Pin OCTOSPIM_P2_CLK_Pin OCTOSPIM_P2_IO0_Pin */
  GPIO_InitStruct.Pin = OCTOSPIM_P2_IO1_Pin|OCTOSPIM_P2_IO2_Pin|OCTOSPIM_P2_CLK_Pin|OCTOSPIM_P2_IO0_Pin;
 8000b60:	f44f 6364 	mov.w	r3, #3648	; 0xe40
 8000b64:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b66:	2302      	movs	r3, #2
 8000b68:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b6e:	2303      	movs	r3, #3
 8000b70:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPIM_P2;
 8000b72:	2305      	movs	r3, #5
 8000b74:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000b76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	486c      	ldr	r0, [pc, #432]	; (8000d30 <MX_GPIO_Init+0x2f0>)
 8000b7e:	f000 ff4b 	bl	8001a18 <HAL_GPIO_Init>

  /*Configure GPIO pins : MIC_VDD_Pin DSI_SPI_USART_CS_Pin LED_GREEN_Pin */
  GPIO_InitStruct.Pin = MIC_VDD_Pin|DSI_SPI_USART_CS_Pin|LED_GREEN_Pin;
 8000b82:	f244 0314 	movw	r3, #16404	; 0x4014
 8000b86:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b88:	2301      	movs	r3, #1
 8000b8a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b90:	2300      	movs	r3, #0
 8000b92:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000b94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b98:	4619      	mov	r1, r3
 8000b9a:	4862      	ldr	r0, [pc, #392]	; (8000d24 <MX_GPIO_Init+0x2e4>)
 8000b9c:	f000 ff3c 	bl	8001a18 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8000ba0:	2310      	movs	r3, #16
 8000ba2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba4:	2302      	movs	r3, #2
 8000ba6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bac:	2300      	movs	r3, #0
 8000bae:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000bb0:	2302      	movs	r3, #2
 8000bb2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8000bb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bb8:	4619      	mov	r1, r3
 8000bba:	485c      	ldr	r0, [pc, #368]	; (8000d2c <MX_GPIO_Init+0x2ec>)
 8000bbc:	f000 ff2c 	bl	8001a18 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D7_Pin DCMI_D5_Pin DCMI_VSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_D7_Pin|DCMI_D5_Pin|DCMI_VSYNC_Pin;
 8000bc0:	23b0      	movs	r3, #176	; 0xb0
 8000bc2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc4:	2302      	movs	r3, #2
 8000bc6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 8000bd0:	230a      	movs	r3, #10
 8000bd2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000bd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bd8:	4619      	mov	r1, r3
 8000bda:	4855      	ldr	r0, [pc, #340]	; (8000d30 <MX_GPIO_Init+0x2f0>)
 8000bdc:	f000 ff1c 	bl	8001a18 <HAL_GPIO_Init>

  /*Configure GPIO pins : OCTOSPIM_P2_IO6_Pin OCTOSPIM_P2_DQS_Pin OCTOSPIM_P2_IO7_Pin OCTOSPIM_P2_CS_Pin */
  GPIO_InitStruct.Pin = OCTOSPIM_P2_IO6_Pin|OCTOSPIM_P2_DQS_Pin|OCTOSPIM_P2_IO7_Pin|OCTOSPIM_P2_CS_Pin;
 8000be0:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 8000be4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be6:	2302      	movs	r3, #2
 8000be8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bea:	2300      	movs	r3, #0
 8000bec:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bee:	2303      	movs	r3, #3
 8000bf0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPIM_P2;
 8000bf2:	2305      	movs	r3, #5
 8000bf4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000bf6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	484d      	ldr	r0, [pc, #308]	; (8000d34 <MX_GPIO_Init+0x2f4>)
 8000bfe:	f000 ff0b 	bl	8001a18 <HAL_GPIO_Init>

  /*Configure GPIO pin : MFX_IRQ_OUT_Pin */
  GPIO_InitStruct.Pin = MFX_IRQ_OUT_Pin;
 8000c02:	2302      	movs	r3, #2
 8000c04:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c06:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c0a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(MFX_IRQ_OUT_GPIO_Port, &GPIO_InitStruct);
 8000c10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c14:	4619      	mov	r1, r3
 8000c16:	4846      	ldr	r0, [pc, #280]	; (8000d30 <MX_GPIO_Init+0x2f0>)
 8000c18:	f000 fefe 	bl	8001a18 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D3_Pin DCMI_PIXCLK_Pin DCMI_D2_Pin */
  GPIO_InitStruct.Pin = DCMI_D3_Pin|DCMI_PIXCLK_Pin|DCMI_D2_Pin;
 8000c1c:	f44f 53c1 	mov.w	r3, #6176	; 0x1820
 8000c20:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c22:	2302      	movs	r3, #2
 8000c24:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c26:	2300      	movs	r3, #0
 8000c28:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 8000c2e:	230a      	movs	r3, #10
 8000c30:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000c32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c36:	4619      	mov	r1, r3
 8000c38:	483a      	ldr	r0, [pc, #232]	; (8000d24 <MX_GPIO_Init+0x2e4>)
 8000c3a:	f000 feed 	bl	8001a18 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D9_Pin;
 8000c3e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c42:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c44:	2302      	movs	r3, #2
 8000c46:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8000c50:	2303      	movs	r3, #3
 8000c52:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D9_GPIO_Port, &GPIO_InitStruct);
 8000c54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c58:	4619      	mov	r1, r3
 8000c5a:	4832      	ldr	r0, [pc, #200]	; (8000d24 <MX_GPIO_Init+0x2e4>)
 8000c5c:	f000 fedc 	bl	8001a18 <HAL_GPIO_Init>

  /*Configure GPIO pins : OCTOPSIM_P2_IO4_Pin OCTOSPIM_P2_IO5_Pin OCTOSPI_P2_IO3_Pin */
  GPIO_InitStruct.Pin = OCTOPSIM_P2_IO4_Pin|OCTOSPIM_P2_IO5_Pin|OCTOSPI_P2_IO3_Pin;
 8000c60:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000c64:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c66:	2302      	movs	r3, #2
 8000c68:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c6e:	2303      	movs	r3, #3
 8000c70:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPIM_P2;
 8000c72:	2305      	movs	r3, #5
 8000c74:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000c76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	4829      	ldr	r0, [pc, #164]	; (8000d24 <MX_GPIO_Init+0x2e4>)
 8000c7e:	f000 fecb 	bl	8001a18 <HAL_GPIO_Init>

  /*Configure GPIO pin : JOY_SEL_Pin */
  GPIO_InitStruct.Pin = JOY_SEL_Pin;
 8000c82:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c86:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c88:	2301      	movs	r3, #1
 8000c8a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c90:	2300      	movs	r3, #0
 8000c92:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(JOY_SEL_GPIO_Port, &GPIO_InitStruct);
 8000c94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c98:	4619      	mov	r1, r3
 8000c9a:	4823      	ldr	r0, [pc, #140]	; (8000d28 <MX_GPIO_Init+0x2e8>)
 8000c9c:	f000 febc 	bl	8001a18 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_14_Pin ARD_15_Pin */
  GPIO_InitStruct.Pin = ARD_14_Pin|ARD_15_Pin;
 8000ca0:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000ca4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ca6:	2312      	movs	r3, #18
 8000ca8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000caa:	2300      	movs	r3, #0
 8000cac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cae:	2303      	movs	r3, #3
 8000cb0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000cb2:	2304      	movs	r3, #4
 8000cb4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000cb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cba:	4619      	mov	r1, r3
 8000cbc:	481d      	ldr	r0, [pc, #116]	; (8000d34 <MX_GPIO_Init+0x2f4>)
 8000cbe:	f000 feab 	bl	8001a18 <HAL_GPIO_Init>

  /*Configure GPIO pin : STMOD_INT_Pin */
  GPIO_InitStruct.Pin = STMOD_INT_Pin;
 8000cc2:	2340      	movs	r3, #64	; 0x40
 8000cc4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000cc6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000cca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(STMOD_INT_GPIO_Port, &GPIO_InitStruct);
 8000cd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	4814      	ldr	r0, [pc, #80]	; (8000d28 <MX_GPIO_Init+0x2e8>)
 8000cd8:	f000 fe9e 	bl	8001a18 <HAL_GPIO_Init>

  /*Configure GPIO pins : DFDATIN3_Pin DF_CKOUT_Pin */
  GPIO_InitStruct.Pin = DFDATIN3_Pin|DF_CKOUT_Pin;
 8000cdc:	2384      	movs	r3, #132	; 0x84
 8000cde:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce0:	2302      	movs	r3, #2
 8000ce2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000cec:	2306      	movs	r3, #6
 8000cee:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cf0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	480c      	ldr	r0, [pc, #48]	; (8000d28 <MX_GPIO_Init+0x2e8>)
 8000cf8:	f000 fe8e 	bl	8001a18 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D0_Pin ARD_D1_Pin */
  GPIO_InitStruct.Pin = ARD_D0_Pin|ARD_D1_Pin;
 8000cfc:	2303      	movs	r3, #3
 8000cfe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d00:	2302      	movs	r3, #2
 8000d02:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d04:	2300      	movs	r3, #0
 8000d06:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d08:	2303      	movs	r3, #3
 8000d0a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000d0c:	2308      	movs	r3, #8
 8000d0e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d14:	4619      	mov	r1, r3
 8000d16:	4804      	ldr	r0, [pc, #16]	; (8000d28 <MX_GPIO_Init+0x2e8>)
 8000d18:	f000 fe7e 	bl	8001a18 <HAL_GPIO_Init>
 8000d1c:	e00c      	b.n	8000d38 <MX_GPIO_Init+0x2f8>
 8000d1e:	bf00      	nop
 8000d20:	40021000 	.word	0x40021000
 8000d24:	48001c00 	.word	0x48001c00
 8000d28:	48000800 	.word	0x48000800
 8000d2c:	48000400 	.word	0x48000400
 8000d30:	48002000 	.word	0x48002000
 8000d34:	48001800 	.word	0x48001800

  /*Configure GPIO pins : ARD_A2_Pin ARD_A1_Pin */
  GPIO_InitStruct.Pin = ARD_A2_Pin|ARD_A1_Pin;
 8000d38:	2318      	movs	r3, #24
 8000d3a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000d3c:	230b      	movs	r3, #11
 8000d3e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d40:	2300      	movs	r3, #0
 8000d42:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d48:	4619      	mov	r1, r3
 8000d4a:	4849      	ldr	r0, [pc, #292]	; (8000e70 <MX_GPIO_Init+0x430>)
 8000d4c:	f000 fe64 	bl	8001a18 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A4_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A4_Pin|ARD_A0_Pin;
 8000d50:	2381      	movs	r3, #129	; 0x81
 8000d52:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000d54:	230b      	movs	r3, #11
 8000d56:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d60:	4619      	mov	r1, r3
 8000d62:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d66:	f000 fe57 	bl	8001a18 <HAL_GPIO_Init>

  /*Configure GPIO pin : STMOD_PWM_Pin */
  GPIO_InitStruct.Pin = STMOD_PWM_Pin;
 8000d6a:	2320      	movs	r3, #32
 8000d6c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d6e:	2302      	movs	r3, #2
 8000d70:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d72:	2300      	movs	r3, #0
 8000d74:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d76:	2300      	movs	r3, #0
 8000d78:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(STMOD_PWM_GPIO_Port, &GPIO_InitStruct);
 8000d7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d82:	4619      	mov	r1, r3
 8000d84:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d88:	f000 fe46 	bl	8001a18 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_CS_Pin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin;
 8000d8c:	2340      	movs	r3, #64	; 0x40
 8000d8e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d90:	2301      	movs	r3, #1
 8000d92:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d94:	2300      	movs	r3, #0
 8000d96:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 8000d9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000da0:	4619      	mov	r1, r3
 8000da2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000da6:	f000 fe37 	bl	8001a18 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D5_Pin */
  GPIO_InitStruct.Pin = ARD_D5_Pin;
 8000daa:	2302      	movs	r3, #2
 8000dac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dae:	2302      	movs	r3, #2
 8000db0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db2:	2300      	movs	r3, #0
 8000db4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db6:	2300      	movs	r3, #0
 8000db8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8000dba:	2302      	movs	r3, #2
 8000dbc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D5_GPIO_Port, &GPIO_InitStruct);
 8000dbe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dc8:	f000 fe26 	bl	8001a18 <HAL_GPIO_Init>

  /*Configure GPIO pin : DSI_TE_Pin */
  GPIO_InitStruct.Pin = DSI_TE_Pin;
 8000dcc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000dd0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd2:	2302      	movs	r3, #2
 8000dd4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_DSI;
 8000dde:	230b      	movs	r3, #11
 8000de0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(DSI_TE_GPIO_Port, &GPIO_InitStruct);
 8000de2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000de6:	4619      	mov	r1, r3
 8000de8:	4822      	ldr	r0, [pc, #136]	; (8000e74 <MX_GPIO_Init+0x434>)
 8000dea:	f000 fe15 	bl	8001a18 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_HSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin;
 8000dee:	2310      	movs	r3, #16
 8000df0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df2:	2302      	movs	r3, #2
 8000df4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df6:	2300      	movs	r3, #0
 8000df8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 8000dfe:	230a      	movs	r3, #10
 8000e00:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(DCMI_HSYNC_GPIO_Port, &GPIO_InitStruct);
 8000e02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e06:	4619      	mov	r1, r3
 8000e08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e0c:	f000 fe04 	bl	8001a18 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_A3_Pin */
  GPIO_InitStruct.Pin = ARD_A3_Pin;
 8000e10:	2301      	movs	r3, #1
 8000e12:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000e14:	230b      	movs	r3, #11
 8000e16:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ARD_A3_GPIO_Port, &GPIO_InitStruct);
 8000e1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e20:	4619      	mov	r1, r3
 8000e22:	4815      	ldr	r0, [pc, #84]	; (8000e78 <MX_GPIO_Init+0x438>)
 8000e24:	f000 fdf8 	bl	8001a18 <HAL_GPIO_Init>

  /*Configure GPIO pin : MFX_WAKEUP_Pin */
  GPIO_InitStruct.Pin = MFX_WAKEUP_Pin;
 8000e28:	2304      	movs	r3, #4
 8000e2a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e2c:	2301      	movs	r3, #1
 8000e2e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e30:	2300      	movs	r3, #0
 8000e32:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e34:	2300      	movs	r3, #0
 8000e36:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(MFX_WAKEUP_GPIO_Port, &GPIO_InitStruct);
 8000e38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	480e      	ldr	r0, [pc, #56]	; (8000e78 <MX_GPIO_Init+0x438>)
 8000e40:	f000 fdea 	bl	8001a18 <HAL_GPIO_Init>

  /*Configure GPIO pin : DFDATIN1_Pin */
  GPIO_InitStruct.Pin = DFDATIN1_Pin;
 8000e44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e48:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e4a:	2302      	movs	r3, #2
 8000e4c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e52:	2300      	movs	r3, #0
 8000e54:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000e56:	2306      	movs	r3, #6
 8000e58:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(DFDATIN1_GPIO_Port, &GPIO_InitStruct);
 8000e5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e5e:	4619      	mov	r1, r3
 8000e60:	4805      	ldr	r0, [pc, #20]	; (8000e78 <MX_GPIO_Init+0x438>)
 8000e62:	f000 fdd9 	bl	8001a18 <HAL_GPIO_Init>

}
 8000e66:	bf00      	nop
 8000e68:	3738      	adds	r7, #56	; 0x38
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	48000800 	.word	0x48000800
 8000e74:	48001400 	.word	0x48001400
 8000e78:	48000400 	.word	0x48000400

08000e7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e80:	b672      	cpsid	i
}
 8000e82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e84:	e7fe      	b.n	8000e84 <Error_Handler+0x8>
	...

08000e88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b083      	sub	sp, #12
 8000e8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e8e:	4b0f      	ldr	r3, [pc, #60]	; (8000ecc <HAL_MspInit+0x44>)
 8000e90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e92:	4a0e      	ldr	r2, [pc, #56]	; (8000ecc <HAL_MspInit+0x44>)
 8000e94:	f043 0301 	orr.w	r3, r3, #1
 8000e98:	6613      	str	r3, [r2, #96]	; 0x60
 8000e9a:	4b0c      	ldr	r3, [pc, #48]	; (8000ecc <HAL_MspInit+0x44>)
 8000e9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e9e:	f003 0301 	and.w	r3, r3, #1
 8000ea2:	607b      	str	r3, [r7, #4]
 8000ea4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ea6:	4b09      	ldr	r3, [pc, #36]	; (8000ecc <HAL_MspInit+0x44>)
 8000ea8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eaa:	4a08      	ldr	r2, [pc, #32]	; (8000ecc <HAL_MspInit+0x44>)
 8000eac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000eb0:	6593      	str	r3, [r2, #88]	; 0x58
 8000eb2:	4b06      	ldr	r3, [pc, #24]	; (8000ecc <HAL_MspInit+0x44>)
 8000eb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eba:	603b      	str	r3, [r7, #0]
 8000ebc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ebe:	bf00      	nop
 8000ec0:	370c      	adds	r7, #12
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	40021000 	.word	0x40021000

08000ed0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b0b2      	sub	sp, #200	; 0xc8
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000edc:	2200      	movs	r2, #0
 8000ede:	601a      	str	r2, [r3, #0]
 8000ee0:	605a      	str	r2, [r3, #4]
 8000ee2:	609a      	str	r2, [r3, #8]
 8000ee4:	60da      	str	r2, [r3, #12]
 8000ee6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ee8:	f107 0318 	add.w	r3, r7, #24
 8000eec:	229c      	movs	r2, #156	; 0x9c
 8000eee:	2100      	movs	r1, #0
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f007 fa11 	bl	8008318 <memset>
  if(hi2c->Instance==I2C1)
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	4a33      	ldr	r2, [pc, #204]	; (8000fc8 <HAL_I2C_MspInit+0xf8>)
 8000efc:	4293      	cmp	r3, r2
 8000efe:	d15e      	bne.n	8000fbe <HAL_I2C_MspInit+0xee>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000f00:	2340      	movs	r3, #64	; 0x40
 8000f02:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000f04:	2300      	movs	r3, #0
 8000f06:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f08:	f107 0318 	add.w	r3, r7, #24
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f002 f953 	bl	80031b8 <HAL_RCCEx_PeriphCLKConfig>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d001      	beq.n	8000f1c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000f18:	f7ff ffb0 	bl	8000e7c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f1c:	4b2b      	ldr	r3, [pc, #172]	; (8000fcc <HAL_I2C_MspInit+0xfc>)
 8000f1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f20:	4a2a      	ldr	r2, [pc, #168]	; (8000fcc <HAL_I2C_MspInit+0xfc>)
 8000f22:	f043 0302 	orr.w	r3, r3, #2
 8000f26:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f28:	4b28      	ldr	r3, [pc, #160]	; (8000fcc <HAL_I2C_MspInit+0xfc>)
 8000f2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f2c:	f003 0302 	and.w	r3, r3, #2
 8000f30:	617b      	str	r3, [r7, #20]
 8000f32:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f34:	4b25      	ldr	r3, [pc, #148]	; (8000fcc <HAL_I2C_MspInit+0xfc>)
 8000f36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f38:	4a24      	ldr	r2, [pc, #144]	; (8000fcc <HAL_I2C_MspInit+0xfc>)
 8000f3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f3e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f40:	4b22      	ldr	r3, [pc, #136]	; (8000fcc <HAL_I2C_MspInit+0xfc>)
 8000f42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f48:	613b      	str	r3, [r7, #16]
 8000f4a:	693b      	ldr	r3, [r7, #16]
    HAL_PWREx_EnableVddIO2();
 8000f4c:	f001 fa50 	bl	80023f0 <HAL_PWREx_EnableVddIO2>
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PG13     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin;
 8000f50:	2340      	movs	r3, #64	; 0x40
 8000f52:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f56:	2312      	movs	r3, #18
 8000f58:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f62:	2303      	movs	r3, #3
 8000f64:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f68:	2304      	movs	r3, #4
 8000f6a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(I2C1_SCL_GPIO_Port, &GPIO_InitStruct);
 8000f6e:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000f72:	4619      	mov	r1, r3
 8000f74:	4816      	ldr	r0, [pc, #88]	; (8000fd0 <HAL_I2C_MspInit+0x100>)
 8000f76:	f000 fd4f 	bl	8001a18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C1_SDA_Pin;
 8000f7a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f7e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f82:	2312      	movs	r3, #18
 8000f84:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f88:	2301      	movs	r3, #1
 8000f8a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f8e:	2303      	movs	r3, #3
 8000f90:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f94:	2304      	movs	r3, #4
 8000f96:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(I2C1_SDA_GPIO_Port, &GPIO_InitStruct);
 8000f9a:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	480c      	ldr	r0, [pc, #48]	; (8000fd4 <HAL_I2C_MspInit+0x104>)
 8000fa2:	f000 fd39 	bl	8001a18 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000fa6:	4b09      	ldr	r3, [pc, #36]	; (8000fcc <HAL_I2C_MspInit+0xfc>)
 8000fa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000faa:	4a08      	ldr	r2, [pc, #32]	; (8000fcc <HAL_I2C_MspInit+0xfc>)
 8000fac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000fb0:	6593      	str	r3, [r2, #88]	; 0x58
 8000fb2:	4b06      	ldr	r3, [pc, #24]	; (8000fcc <HAL_I2C_MspInit+0xfc>)
 8000fb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fb6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fba:	60fb      	str	r3, [r7, #12]
 8000fbc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000fbe:	bf00      	nop
 8000fc0:	37c8      	adds	r7, #200	; 0xc8
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	40005400 	.word	0x40005400
 8000fcc:	40021000 	.word	0x40021000
 8000fd0:	48000400 	.word	0x48000400
 8000fd4:	48001800 	.word	0x48001800

08000fd8 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b0b2      	sub	sp, #200	; 0xc8
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	601a      	str	r2, [r3, #0]
 8000fe8:	605a      	str	r2, [r3, #4]
 8000fea:	609a      	str	r2, [r3, #8]
 8000fec:	60da      	str	r2, [r3, #12]
 8000fee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ff0:	f107 0318 	add.w	r3, r7, #24
 8000ff4:	229c      	movs	r2, #156	; 0x9c
 8000ff6:	2100      	movs	r1, #0
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f007 f98d 	bl	8008318 <memset>
  if(hsd->Instance==SDMMC1)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	4a33      	ldr	r2, [pc, #204]	; (80010d0 <HAL_SD_MspInit+0xf8>)
 8001004:	4293      	cmp	r3, r2
 8001006:	d15f      	bne.n	80010c8 <HAL_SD_MspInit+0xf0>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1;
 8001008:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800100c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_PLLP;
 800100e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001012:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001016:	f107 0318 	add.w	r3, r7, #24
 800101a:	4618      	mov	r0, r3
 800101c:	f002 f8cc 	bl	80031b8 <HAL_RCCEx_PeriphCLKConfig>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d001      	beq.n	800102a <HAL_SD_MspInit+0x52>
    {
      Error_Handler();
 8001026:	f7ff ff29 	bl	8000e7c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800102a:	4b2a      	ldr	r3, [pc, #168]	; (80010d4 <HAL_SD_MspInit+0xfc>)
 800102c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800102e:	4a29      	ldr	r2, [pc, #164]	; (80010d4 <HAL_SD_MspInit+0xfc>)
 8001030:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001034:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001036:	4b27      	ldr	r3, [pc, #156]	; (80010d4 <HAL_SD_MspInit+0xfc>)
 8001038:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800103a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800103e:	617b      	str	r3, [r7, #20]
 8001040:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001042:	4b24      	ldr	r3, [pc, #144]	; (80010d4 <HAL_SD_MspInit+0xfc>)
 8001044:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001046:	4a23      	ldr	r2, [pc, #140]	; (80010d4 <HAL_SD_MspInit+0xfc>)
 8001048:	f043 0308 	orr.w	r3, r3, #8
 800104c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800104e:	4b21      	ldr	r3, [pc, #132]	; (80010d4 <HAL_SD_MspInit+0xfc>)
 8001050:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001052:	f003 0308 	and.w	r3, r3, #8
 8001056:	613b      	str	r3, [r7, #16]
 8001058:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800105a:	4b1e      	ldr	r3, [pc, #120]	; (80010d4 <HAL_SD_MspInit+0xfc>)
 800105c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800105e:	4a1d      	ldr	r2, [pc, #116]	; (80010d4 <HAL_SD_MspInit+0xfc>)
 8001060:	f043 0304 	orr.w	r3, r3, #4
 8001064:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001066:	4b1b      	ldr	r3, [pc, #108]	; (80010d4 <HAL_SD_MspInit+0xfc>)
 8001068:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800106a:	f003 0304 	and.w	r3, r3, #4
 800106e:	60fb      	str	r3, [r7, #12]
 8001070:	68fb      	ldr	r3, [r7, #12]
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PC8     ------> SDMMC1_D0
    PC9     ------> SDMMC1_D1
    */
    GPIO_InitStruct.Pin = uSD_CMD_Pin;
 8001072:	2304      	movs	r3, #4
 8001074:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001078:	2302      	movs	r3, #2
 800107a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107e:	2300      	movs	r3, #0
 8001080:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001084:	2303      	movs	r3, #3
 8001086:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800108a:	230c      	movs	r3, #12
 800108c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(uSD_CMD_GPIO_Port, &GPIO_InitStruct);
 8001090:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001094:	4619      	mov	r1, r3
 8001096:	4810      	ldr	r0, [pc, #64]	; (80010d8 <HAL_SD_MspInit+0x100>)
 8001098:	f000 fcbe 	bl	8001a18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = uSD_D2_Pin|uSD_D3_Pin|uSD_CLK_Pin|uSD_D0_Pin
 800109c:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80010a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
                          |uSD_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a4:	2302      	movs	r3, #2
 80010a6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010aa:	2300      	movs	r3, #0
 80010ac:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010b0:	2303      	movs	r3, #3
 80010b2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80010b6:	230c      	movs	r3, #12
 80010b8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010bc:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80010c0:	4619      	mov	r1, r3
 80010c2:	4806      	ldr	r0, [pc, #24]	; (80010dc <HAL_SD_MspInit+0x104>)
 80010c4:	f000 fca8 	bl	8001a18 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 80010c8:	bf00      	nop
 80010ca:	37c8      	adds	r7, #200	; 0xc8
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	50062400 	.word	0x50062400
 80010d4:	40021000 	.word	0x40021000
 80010d8:	48000c00 	.word	0x48000c00
 80010dc:	48000800 	.word	0x48000800

080010e0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b08a      	sub	sp, #40	; 0x28
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e8:	f107 0314 	add.w	r3, r7, #20
 80010ec:	2200      	movs	r2, #0
 80010ee:	601a      	str	r2, [r3, #0]
 80010f0:	605a      	str	r2, [r3, #4]
 80010f2:	609a      	str	r2, [r3, #8]
 80010f4:	60da      	str	r2, [r3, #12]
 80010f6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	4a25      	ldr	r2, [pc, #148]	; (8001194 <HAL_SPI_MspInit+0xb4>)
 80010fe:	4293      	cmp	r3, r2
 8001100:	d144      	bne.n	800118c <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001102:	4b25      	ldr	r3, [pc, #148]	; (8001198 <HAL_SPI_MspInit+0xb8>)
 8001104:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001106:	4a24      	ldr	r2, [pc, #144]	; (8001198 <HAL_SPI_MspInit+0xb8>)
 8001108:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800110c:	6593      	str	r3, [r2, #88]	; 0x58
 800110e:	4b22      	ldr	r3, [pc, #136]	; (8001198 <HAL_SPI_MspInit+0xb8>)
 8001110:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001112:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001116:	613b      	str	r3, [r7, #16]
 8001118:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 800111a:	4b1f      	ldr	r3, [pc, #124]	; (8001198 <HAL_SPI_MspInit+0xb8>)
 800111c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800111e:	4a1e      	ldr	r2, [pc, #120]	; (8001198 <HAL_SPI_MspInit+0xb8>)
 8001120:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001124:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001126:	4b1c      	ldr	r3, [pc, #112]	; (8001198 <HAL_SPI_MspInit+0xb8>)
 8001128:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800112a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800112e:	60fb      	str	r3, [r7, #12]
 8001130:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001132:	4b19      	ldr	r3, [pc, #100]	; (8001198 <HAL_SPI_MspInit+0xb8>)
 8001134:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001136:	4a18      	ldr	r2, [pc, #96]	; (8001198 <HAL_SPI_MspInit+0xb8>)
 8001138:	f043 0302 	orr.w	r3, r3, #2
 800113c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800113e:	4b16      	ldr	r3, [pc, #88]	; (8001198 <HAL_SPI_MspInit+0xb8>)
 8001140:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001142:	f003 0302 	and.w	r3, r3, #2
 8001146:	60bb      	str	r3, [r7, #8]
 8001148:	68bb      	ldr	r3, [r7, #8]
    PI0     ------> SPI2_NSS
    PB15     ------> SPI2_MOSI
    PB14     ------> SPI2_MISO
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = ARD_10_Pin;
 800114a:	2301      	movs	r3, #1
 800114c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800114e:	2302      	movs	r3, #2
 8001150:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001152:	2300      	movs	r3, #0
 8001154:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001156:	2303      	movs	r3, #3
 8001158:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800115a:	2305      	movs	r3, #5
 800115c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARD_10_GPIO_Port, &GPIO_InitStruct);
 800115e:	f107 0314 	add.w	r3, r7, #20
 8001162:	4619      	mov	r1, r3
 8001164:	480d      	ldr	r0, [pc, #52]	; (800119c <HAL_SPI_MspInit+0xbc>)
 8001166:	f000 fc57 	bl	8001a18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI_MOSI_Pin|SPI2_MISO_Pin|SPI2_CLK_Pin;
 800116a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800116e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001170:	2302      	movs	r3, #2
 8001172:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001174:	2300      	movs	r3, #0
 8001176:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001178:	2303      	movs	r3, #3
 800117a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800117c:	2305      	movs	r3, #5
 800117e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001180:	f107 0314 	add.w	r3, r7, #20
 8001184:	4619      	mov	r1, r3
 8001186:	4806      	ldr	r0, [pc, #24]	; (80011a0 <HAL_SPI_MspInit+0xc0>)
 8001188:	f000 fc46 	bl	8001a18 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800118c:	bf00      	nop
 800118e:	3728      	adds	r7, #40	; 0x28
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	40003800 	.word	0x40003800
 8001198:	40021000 	.word	0x40021000
 800119c:	48002000 	.word	0x48002000
 80011a0:	48000400 	.word	0x48000400

080011a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b0b4      	sub	sp, #208	; 0xd0
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ac:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80011b0:	2200      	movs	r2, #0
 80011b2:	601a      	str	r2, [r3, #0]
 80011b4:	605a      	str	r2, [r3, #4]
 80011b6:	609a      	str	r2, [r3, #8]
 80011b8:	60da      	str	r2, [r3, #12]
 80011ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011bc:	f107 0320 	add.w	r3, r7, #32
 80011c0:	229c      	movs	r2, #156	; 0x9c
 80011c2:	2100      	movs	r1, #0
 80011c4:	4618      	mov	r0, r3
 80011c6:	f007 f8a7 	bl	8008318 <memset>
  if(huart->Instance==USART2)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	4a54      	ldr	r2, [pc, #336]	; (8001320 <HAL_UART_MspInit+0x17c>)
 80011d0:	4293      	cmp	r3, r2
 80011d2:	d13c      	bne.n	800124e <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80011d4:	2302      	movs	r3, #2
 80011d6:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80011d8:	2300      	movs	r3, #0
 80011da:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011dc:	f107 0320 	add.w	r3, r7, #32
 80011e0:	4618      	mov	r0, r3
 80011e2:	f001 ffe9 	bl	80031b8 <HAL_RCCEx_PeriphCLKConfig>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d001      	beq.n	80011f0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80011ec:	f7ff fe46 	bl	8000e7c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80011f0:	4b4c      	ldr	r3, [pc, #304]	; (8001324 <HAL_UART_MspInit+0x180>)
 80011f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011f4:	4a4b      	ldr	r2, [pc, #300]	; (8001324 <HAL_UART_MspInit+0x180>)
 80011f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011fa:	6593      	str	r3, [r2, #88]	; 0x58
 80011fc:	4b49      	ldr	r3, [pc, #292]	; (8001324 <HAL_UART_MspInit+0x180>)
 80011fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001200:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001204:	61fb      	str	r3, [r7, #28]
 8001206:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001208:	4b46      	ldr	r3, [pc, #280]	; (8001324 <HAL_UART_MspInit+0x180>)
 800120a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800120c:	4a45      	ldr	r2, [pc, #276]	; (8001324 <HAL_UART_MspInit+0x180>)
 800120e:	f043 0301 	orr.w	r3, r3, #1
 8001212:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001214:	4b43      	ldr	r3, [pc, #268]	; (8001324 <HAL_UART_MspInit+0x180>)
 8001216:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001218:	f003 0301 	and.w	r3, r3, #1
 800121c:	61bb      	str	r3, [r7, #24]
 800121e:	69bb      	ldr	r3, [r7, #24]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = USART2_RX_Pin|USART2_TX_Pin;
 8001220:	230c      	movs	r3, #12
 8001222:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001226:	2302      	movs	r3, #2
 8001228:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122c:	2300      	movs	r3, #0
 800122e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001232:	2303      	movs	r3, #3
 8001234:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001238:	2307      	movs	r3, #7
 800123a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800123e:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001242:	4619      	mov	r1, r3
 8001244:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001248:	f000 fbe6 	bl	8001a18 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800124c:	e063      	b.n	8001316 <HAL_UART_MspInit+0x172>
  else if(huart->Instance==USART3)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4a35      	ldr	r2, [pc, #212]	; (8001328 <HAL_UART_MspInit+0x184>)
 8001254:	4293      	cmp	r3, r2
 8001256:	d15e      	bne.n	8001316 <HAL_UART_MspInit+0x172>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001258:	2304      	movs	r3, #4
 800125a:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800125c:	2300      	movs	r3, #0
 800125e:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001260:	f107 0320 	add.w	r3, r7, #32
 8001264:	4618      	mov	r0, r3
 8001266:	f001 ffa7 	bl	80031b8 <HAL_RCCEx_PeriphCLKConfig>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d001      	beq.n	8001274 <HAL_UART_MspInit+0xd0>
      Error_Handler();
 8001270:	f7ff fe04 	bl	8000e7c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001274:	4b2b      	ldr	r3, [pc, #172]	; (8001324 <HAL_UART_MspInit+0x180>)
 8001276:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001278:	4a2a      	ldr	r2, [pc, #168]	; (8001324 <HAL_UART_MspInit+0x180>)
 800127a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800127e:	6593      	str	r3, [r2, #88]	; 0x58
 8001280:	4b28      	ldr	r3, [pc, #160]	; (8001324 <HAL_UART_MspInit+0x180>)
 8001282:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001284:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001288:	617b      	str	r3, [r7, #20]
 800128a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800128c:	4b25      	ldr	r3, [pc, #148]	; (8001324 <HAL_UART_MspInit+0x180>)
 800128e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001290:	4a24      	ldr	r2, [pc, #144]	; (8001324 <HAL_UART_MspInit+0x180>)
 8001292:	f043 0301 	orr.w	r3, r3, #1
 8001296:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001298:	4b22      	ldr	r3, [pc, #136]	; (8001324 <HAL_UART_MspInit+0x180>)
 800129a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800129c:	f003 0301 	and.w	r3, r3, #1
 80012a0:	613b      	str	r3, [r7, #16]
 80012a2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012a4:	4b1f      	ldr	r3, [pc, #124]	; (8001324 <HAL_UART_MspInit+0x180>)
 80012a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012a8:	4a1e      	ldr	r2, [pc, #120]	; (8001324 <HAL_UART_MspInit+0x180>)
 80012aa:	f043 0302 	orr.w	r3, r3, #2
 80012ae:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012b0:	4b1c      	ldr	r3, [pc, #112]	; (8001324 <HAL_UART_MspInit+0x180>)
 80012b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012b4:	f003 0302 	and.w	r3, r3, #2
 80012b8:	60fb      	str	r3, [r7, #12]
 80012ba:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART3_RTS_Pin;
 80012bc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80012c0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c4:	2302      	movs	r3, #2
 80012c6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ca:	2300      	movs	r3, #0
 80012cc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012d0:	2303      	movs	r3, #3
 80012d2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80012d6:	2307      	movs	r3, #7
 80012d8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(USART3_RTS_GPIO_Port, &GPIO_InitStruct);
 80012dc:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80012e0:	4619      	mov	r1, r3
 80012e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012e6:	f000 fb97 	bl	8001a18 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = USART3_RX_Pin|USART3_TX_Pin;
 80012ea:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80012ee:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f2:	2302      	movs	r3, #2
 80012f4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f8:	2300      	movs	r3, #0
 80012fa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012fe:	2303      	movs	r3, #3
 8001300:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001304:	2307      	movs	r3, #7
 8001306:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800130a:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800130e:	4619      	mov	r1, r3
 8001310:	4806      	ldr	r0, [pc, #24]	; (800132c <HAL_UART_MspInit+0x188>)
 8001312:	f000 fb81 	bl	8001a18 <HAL_GPIO_Init>
}
 8001316:	bf00      	nop
 8001318:	37d0      	adds	r7, #208	; 0xd0
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	40004400 	.word	0x40004400
 8001324:	40021000 	.word	0x40021000
 8001328:	40004800 	.word	0x40004800
 800132c:	48000400 	.word	0x48000400

08001330 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b0b2      	sub	sp, #200	; 0xc8
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001338:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800133c:	2200      	movs	r2, #0
 800133e:	601a      	str	r2, [r3, #0]
 8001340:	605a      	str	r2, [r3, #4]
 8001342:	609a      	str	r2, [r3, #8]
 8001344:	60da      	str	r2, [r3, #12]
 8001346:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001348:	f107 0318 	add.w	r3, r7, #24
 800134c:	229c      	movs	r2, #156	; 0x9c
 800134e:	2100      	movs	r1, #0
 8001350:	4618      	mov	r0, r3
 8001352:	f006 ffe1 	bl	8008318 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800135e:	d16c      	bne.n	800143a <HAL_PCD_MspInit+0x10a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001360:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001364:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8001366:	2300      	movs	r3, #0
 8001368:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800136c:	f107 0318 	add.w	r3, r7, #24
 8001370:	4618      	mov	r0, r3
 8001372:	f001 ff21 	bl	80031b8 <HAL_RCCEx_PeriphCLKConfig>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d001      	beq.n	8001380 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800137c:	f7ff fd7e 	bl	8000e7c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001380:	4b30      	ldr	r3, [pc, #192]	; (8001444 <HAL_PCD_MspInit+0x114>)
 8001382:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001384:	4a2f      	ldr	r2, [pc, #188]	; (8001444 <HAL_PCD_MspInit+0x114>)
 8001386:	f043 0301 	orr.w	r3, r3, #1
 800138a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800138c:	4b2d      	ldr	r3, [pc, #180]	; (8001444 <HAL_PCD_MspInit+0x114>)
 800138e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001390:	f003 0301 	and.w	r3, r3, #1
 8001394:	617b      	str	r3, [r7, #20]
 8001396:	697b      	ldr	r3, [r7, #20]
    PA10     ------> USB_OTG_FS_ID
    PA12     ------> USB_OTG_FS_DP
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    */
    GPIO_InitStruct.Pin = USB_OTGFS_ID_Pin|USB_OTG_FS_DP_Pin|USB_OTGFS_DM_Pin;
 8001398:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800139c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013a0:	2302      	movs	r3, #2
 80013a2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a6:	2300      	movs	r3, #0
 80013a8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013ac:	2303      	movs	r3, #3
 80013ae:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80013b2:	230a      	movs	r3, #10
 80013b4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013b8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80013bc:	4619      	mov	r1, r3
 80013be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013c2:	f000 fb29 	bl	8001a18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTGFS_VBUS_Pin;
 80013c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013ca:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013ce:	2300      	movs	r3, #0
 80013d0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d4:	2300      	movs	r3, #0
 80013d6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(USB_OTGFS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80013da:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80013de:	4619      	mov	r1, r3
 80013e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013e4:	f000 fb18 	bl	8001a18 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80013e8:	4b16      	ldr	r3, [pc, #88]	; (8001444 <HAL_PCD_MspInit+0x114>)
 80013ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ec:	4a15      	ldr	r2, [pc, #84]	; (8001444 <HAL_PCD_MspInit+0x114>)
 80013ee:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80013f2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013f4:	4b13      	ldr	r3, [pc, #76]	; (8001444 <HAL_PCD_MspInit+0x114>)
 80013f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013fc:	613b      	str	r3, [r7, #16]
 80013fe:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001400:	4b10      	ldr	r3, [pc, #64]	; (8001444 <HAL_PCD_MspInit+0x114>)
 8001402:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001404:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001408:	2b00      	cmp	r3, #0
 800140a:	d114      	bne.n	8001436 <HAL_PCD_MspInit+0x106>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800140c:	4b0d      	ldr	r3, [pc, #52]	; (8001444 <HAL_PCD_MspInit+0x114>)
 800140e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001410:	4a0c      	ldr	r2, [pc, #48]	; (8001444 <HAL_PCD_MspInit+0x114>)
 8001412:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001416:	6593      	str	r3, [r2, #88]	; 0x58
 8001418:	4b0a      	ldr	r3, [pc, #40]	; (8001444 <HAL_PCD_MspInit+0x114>)
 800141a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800141c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001420:	60fb      	str	r3, [r7, #12]
 8001422:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 8001424:	f000 ffd4 	bl	80023d0 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001428:	4b06      	ldr	r3, [pc, #24]	; (8001444 <HAL_PCD_MspInit+0x114>)
 800142a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800142c:	4a05      	ldr	r2, [pc, #20]	; (8001444 <HAL_PCD_MspInit+0x114>)
 800142e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001432:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001434:	e001      	b.n	800143a <HAL_PCD_MspInit+0x10a>
      HAL_PWREx_EnableVddUSB();
 8001436:	f000 ffcb 	bl	80023d0 <HAL_PWREx_EnableVddUSB>
}
 800143a:	bf00      	nop
 800143c:	37c8      	adds	r7, #200	; 0xc8
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	40021000 	.word	0x40021000

08001448 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001448:	b580      	push	{r7, lr}
 800144a:	b086      	sub	sp, #24
 800144c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800144e:	1d3b      	adds	r3, r7, #4
 8001450:	2200      	movs	r2, #0
 8001452:	601a      	str	r2, [r3, #0]
 8001454:	605a      	str	r2, [r3, #4]
 8001456:	609a      	str	r2, [r3, #8]
 8001458:	60da      	str	r2, [r3, #12]
 800145a:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 800145c:	4b32      	ldr	r3, [pc, #200]	; (8001528 <HAL_FMC_MspInit+0xe0>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d15d      	bne.n	8001520 <HAL_FMC_MspInit+0xd8>
    return;
  }
  FMC_Initialized = 1;
 8001464:	4b30      	ldr	r3, [pc, #192]	; (8001528 <HAL_FMC_MspInit+0xe0>)
 8001466:	2201      	movs	r2, #1
 8001468:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800146a:	4b30      	ldr	r3, [pc, #192]	; (800152c <HAL_FMC_MspInit+0xe4>)
 800146c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800146e:	4a2f      	ldr	r2, [pc, #188]	; (800152c <HAL_FMC_MspInit+0xe4>)
 8001470:	f043 0301 	orr.w	r3, r3, #1
 8001474:	6513      	str	r3, [r2, #80]	; 0x50
 8001476:	4b2d      	ldr	r3, [pc, #180]	; (800152c <HAL_FMC_MspInit+0xe4>)
 8001478:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800147a:	f003 0301 	and.w	r3, r3, #1
 800147e:	603b      	str	r3, [r7, #0]
 8001480:	683b      	ldr	r3, [r7, #0]
  PF13   ------> FMC_A7
  PE12   ------> FMC_D9
  PF12   ------> FMC_A6
  PE11   ------> FMC_D8
  */
  GPIO_InitStruct.Pin = PSRAM_NBL0_Pin|PSRAM_NBL1_Pin|PSRAM_A20_Pin|PSRAM_A19_Pin
 8001482:	f64f 739b 	movw	r3, #65435	; 0xff9b
 8001486:	607b      	str	r3, [r7, #4]
                          |D7_Pin|D6_Pin|D12_Pin|D5_Pin
                          |D11_Pin|D4_Pin|D10_Pin|D9_Pin
                          |D8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001488:	2302      	movs	r3, #2
 800148a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148c:	2300      	movs	r3, #0
 800148e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001490:	2303      	movs	r3, #3
 8001492:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001494:	230c      	movs	r3, #12
 8001496:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001498:	1d3b      	adds	r3, r7, #4
 800149a:	4619      	mov	r1, r3
 800149c:	4824      	ldr	r0, [pc, #144]	; (8001530 <HAL_FMC_MspInit+0xe8>)
 800149e:	f000 fabb 	bl	8001a18 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D2_Pin|PSRAM_OE_Pin|D3_Pin|PSRAM_WE_Pin
 80014a2:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 80014a6:	607b      	str	r3, [r7, #4]
                          |PSRAM_WAIT_Pin|PSRAM_CLK_Pin|PSRAM_NE1_Pin|PSRAM_A18_Pin
                          |D1_Pin|D0_Pin|PSRAM_A17_Pin|PSRAM_A16_Pin
                          |D15_Pin|D14_Pin|D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014a8:	2302      	movs	r3, #2
 80014aa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ac:	2300      	movs	r3, #0
 80014ae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014b0:	2303      	movs	r3, #3
 80014b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80014b4:	230c      	movs	r3, #12
 80014b6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014b8:	1d3b      	adds	r3, r7, #4
 80014ba:	4619      	mov	r1, r3
 80014bc:	481d      	ldr	r0, [pc, #116]	; (8001534 <HAL_FMC_MspInit+0xec>)
 80014be:	f000 faab 	bl	8001a18 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = PSRAM_ADV_Pin;
 80014c2:	2380      	movs	r3, #128	; 0x80
 80014c4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c6:	2302      	movs	r3, #2
 80014c8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ca:	2300      	movs	r3, #0
 80014cc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014ce:	2303      	movs	r3, #3
 80014d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80014d2:	230c      	movs	r3, #12
 80014d4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(PSRAM_ADV_GPIO_Port, &GPIO_InitStruct);
 80014d6:	1d3b      	adds	r3, r7, #4
 80014d8:	4619      	mov	r1, r3
 80014da:	4817      	ldr	r0, [pc, #92]	; (8001538 <HAL_FMC_MspInit+0xf0>)
 80014dc:	f000 fa9c 	bl	8001a18 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = PSRAM_A2_Pin|PSRAM_A1_Pin|PSRAM_A0_Pin|PSRAM_A3_Pin
 80014e0:	f24f 033f 	movw	r3, #61503	; 0xf03f
 80014e4:	607b      	str	r3, [r7, #4]
                          |PSRAM_A4_Pin|PSRAM_A5_Pin|PSRAM_A9_Pin|PSRAM_A8_Pin
                          |PSRAM_A7_Pin|PSRAM_A6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e6:	2302      	movs	r3, #2
 80014e8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ea:	2300      	movs	r3, #0
 80014ec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014ee:	2303      	movs	r3, #3
 80014f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80014f2:	230c      	movs	r3, #12
 80014f4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80014f6:	1d3b      	adds	r3, r7, #4
 80014f8:	4619      	mov	r1, r3
 80014fa:	4810      	ldr	r0, [pc, #64]	; (800153c <HAL_FMC_MspInit+0xf4>)
 80014fc:	f000 fa8c 	bl	8001a18 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = PSRAM_A14_Pin|PSRAM_A13_Pin|PSRAM_A15_Pin|PSRAM_A11_Pin
 8001500:	233f      	movs	r3, #63	; 0x3f
 8001502:	607b      	str	r3, [r7, #4]
                          |PSRAM_A12_Pin|PSRAM_A10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001504:	2302      	movs	r3, #2
 8001506:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001508:	2300      	movs	r3, #0
 800150a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800150c:	2303      	movs	r3, #3
 800150e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001510:	230c      	movs	r3, #12
 8001512:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001514:	1d3b      	adds	r3, r7, #4
 8001516:	4619      	mov	r1, r3
 8001518:	4809      	ldr	r0, [pc, #36]	; (8001540 <HAL_FMC_MspInit+0xf8>)
 800151a:	f000 fa7d 	bl	8001a18 <HAL_GPIO_Init>
 800151e:	e000      	b.n	8001522 <HAL_FMC_MspInit+0xda>
    return;
 8001520:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001522:	3718      	adds	r7, #24
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}
 8001528:	20000870 	.word	0x20000870
 800152c:	40021000 	.word	0x40021000
 8001530:	48001000 	.word	0x48001000
 8001534:	48000c00 	.word	0x48000c00
 8001538:	48000400 	.word	0x48000400
 800153c:	48001400 	.word	0x48001400
 8001540:	48001800 	.word	0x48001800

08001544 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8001544:	b580      	push	{r7, lr}
 8001546:	b082      	sub	sp, #8
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 800154c:	f7ff ff7c 	bl	8001448 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001550:	bf00      	nop
 8001552:	3708      	adds	r7, #8
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}

08001558 <HAL_SAI_MspInit>:
}

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b0b0      	sub	sp, #192	; 0xc0
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001560:	f107 0310 	add.w	r3, r7, #16
 8001564:	229c      	movs	r2, #156	; 0x9c
 8001566:	2100      	movs	r1, #0
 8001568:	4618      	mov	r0, r3
 800156a:	f006 fed5 	bl	8008318 <memset>
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4a32      	ldr	r2, [pc, #200]	; (800163c <HAL_SAI_MspInit+0xe4>)
 8001574:	4293      	cmp	r3, r2
 8001576:	d15d      	bne.n	8001634 <HAL_SAI_MspInit+0xdc>
    {
    /* Peripheral clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 8001578:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800157c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
 800157e:	2300      	movs	r3, #0
 8001580:	67fb      	str	r3, [r7, #124]	; 0x7c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001582:	2301      	movs	r3, #1
 8001584:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001586:	2301      	movs	r3, #1
 8001588:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 800158a:	2310      	movs	r3, #16
 800158c:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 800158e:	2302      	movs	r3, #2
 8001590:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001592:	2302      	movs	r3, #2
 8001594:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001596:	2302      	movs	r3, #2
 8001598:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK;
 800159a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800159e:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015a0:	f107 0310 	add.w	r3, r7, #16
 80015a4:	4618      	mov	r0, r3
 80015a6:	f001 fe07 	bl	80031b8 <HAL_RCCEx_PeriphCLKConfig>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d001      	beq.n	80015b4 <HAL_SAI_MspInit+0x5c>
    {
      Error_Handler();
 80015b0:	f7ff fc64 	bl	8000e7c <Error_Handler>
    }

    if (SAI1_client == 0)
 80015b4:	4b22      	ldr	r3, [pc, #136]	; (8001640 <HAL_SAI_MspInit+0xe8>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d10b      	bne.n	80015d4 <HAL_SAI_MspInit+0x7c>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 80015bc:	4b21      	ldr	r3, [pc, #132]	; (8001644 <HAL_SAI_MspInit+0xec>)
 80015be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015c0:	4a20      	ldr	r2, [pc, #128]	; (8001644 <HAL_SAI_MspInit+0xec>)
 80015c2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80015c6:	6613      	str	r3, [r2, #96]	; 0x60
 80015c8:	4b1e      	ldr	r3, [pc, #120]	; (8001644 <HAL_SAI_MspInit+0xec>)
 80015ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015d0:	60fb      	str	r3, [r7, #12]
 80015d2:	68fb      	ldr	r3, [r7, #12]
    }
    SAI1_client ++;
 80015d4:	4b1a      	ldr	r3, [pc, #104]	; (8001640 <HAL_SAI_MspInit+0xe8>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	3301      	adds	r3, #1
 80015da:	4a19      	ldr	r2, [pc, #100]	; (8001640 <HAL_SAI_MspInit+0xe8>)
 80015dc:	6013      	str	r3, [r2, #0]
    PE2     ------> SAI1_MCLK_A
    PB9     ------> SAI1_FS_A
    PE6     ------> SAI1_SD_A
    PE5     ------> SAI1_SCK_A
    */
    GPIO_InitStruct.Pin = SAI1_SDB_Pin|SAI1_FSA_Pin;
 80015de:	f44f 7308 	mov.w	r3, #544	; 0x220
 80015e2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e6:	2302      	movs	r3, #2
 80015e8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ec:	2300      	movs	r3, #0
 80015ee:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015f2:	2300      	movs	r3, #0
 80015f4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 80015f8:	230d      	movs	r3, #13
 80015fa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015fe:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001602:	4619      	mov	r1, r3
 8001604:	4810      	ldr	r0, [pc, #64]	; (8001648 <HAL_SAI_MspInit+0xf0>)
 8001606:	f000 fa07 	bl	8001a18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SAI1_MCKA_Pin|SAI1_SDA_Pin|SAI1_SCKA_Pin;
 800160a:	2364      	movs	r3, #100	; 0x64
 800160c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001610:	2302      	movs	r3, #2
 8001612:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001616:	2300      	movs	r3, #0
 8001618:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800161c:	2300      	movs	r3, #0
 800161e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8001622:	230d      	movs	r3, #13
 8001624:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001628:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800162c:	4619      	mov	r1, r3
 800162e:	4807      	ldr	r0, [pc, #28]	; (800164c <HAL_SAI_MspInit+0xf4>)
 8001630:	f000 f9f2 	bl	8001a18 <HAL_GPIO_Init>

    }
}
 8001634:	bf00      	nop
 8001636:	37c0      	adds	r7, #192	; 0xc0
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}
 800163c:	40015404 	.word	0x40015404
 8001640:	20000874 	.word	0x20000874
 8001644:	40021000 	.word	0x40021000
 8001648:	48000400 	.word	0x48000400
 800164c:	48001000 	.word	0x48001000

08001650 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001650:	b480      	push	{r7}
 8001652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001654:	e7fe      	b.n	8001654 <NMI_Handler+0x4>

08001656 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001656:	b480      	push	{r7}
 8001658:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800165a:	e7fe      	b.n	800165a <HardFault_Handler+0x4>

0800165c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001660:	e7fe      	b.n	8001660 <MemManage_Handler+0x4>

08001662 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001662:	b480      	push	{r7}
 8001664:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001666:	e7fe      	b.n	8001666 <BusFault_Handler+0x4>

08001668 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800166c:	e7fe      	b.n	800166c <UsageFault_Handler+0x4>

0800166e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800166e:	b480      	push	{r7}
 8001670:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001672:	bf00      	nop
 8001674:	46bd      	mov	sp, r7
 8001676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167a:	4770      	bx	lr

0800167c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001680:	bf00      	nop
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr

0800168a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800168a:	b480      	push	{r7}
 800168c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800168e:	bf00      	nop
 8001690:	46bd      	mov	sp, r7
 8001692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001696:	4770      	bx	lr

08001698 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800169c:	f000 f892 	bl	80017c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016a0:	bf00      	nop
 80016a2:	bd80      	pop	{r7, pc}

080016a4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80016a8:	4b06      	ldr	r3, [pc, #24]	; (80016c4 <SystemInit+0x20>)
 80016aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016ae:	4a05      	ldr	r2, [pc, #20]	; (80016c4 <SystemInit+0x20>)
 80016b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80016b8:	bf00      	nop
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr
 80016c2:	bf00      	nop
 80016c4:	e000ed00 	.word	0xe000ed00

080016c8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80016c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001700 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80016cc:	f7ff ffea 	bl	80016a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016d0:	480c      	ldr	r0, [pc, #48]	; (8001704 <LoopForever+0x6>)
  ldr r1, =_edata
 80016d2:	490d      	ldr	r1, [pc, #52]	; (8001708 <LoopForever+0xa>)
  ldr r2, =_sidata
 80016d4:	4a0d      	ldr	r2, [pc, #52]	; (800170c <LoopForever+0xe>)
  movs r3, #0
 80016d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016d8:	e002      	b.n	80016e0 <LoopCopyDataInit>

080016da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016de:	3304      	adds	r3, #4

080016e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016e4:	d3f9      	bcc.n	80016da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016e6:	4a0a      	ldr	r2, [pc, #40]	; (8001710 <LoopForever+0x12>)
  ldr r4, =_ebss
 80016e8:	4c0a      	ldr	r4, [pc, #40]	; (8001714 <LoopForever+0x16>)
  movs r3, #0
 80016ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016ec:	e001      	b.n	80016f2 <LoopFillZerobss>

080016ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016f0:	3204      	adds	r2, #4

080016f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016f4:	d3fb      	bcc.n	80016ee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80016f6:	f006 fdeb 	bl	80082d0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80016fa:	f7fe ff01 	bl	8000500 <main>

080016fe <LoopForever>:

LoopForever:
    b LoopForever
 80016fe:	e7fe      	b.n	80016fe <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001700:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001704:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001708:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800170c:	080083c0 	.word	0x080083c0
  ldr r2, =_sbss
 8001710:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001714:	2000087c 	.word	0x2000087c

08001718 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001718:	e7fe      	b.n	8001718 <ADC1_IRQHandler>

0800171a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800171a:	b580      	push	{r7, lr}
 800171c:	b082      	sub	sp, #8
 800171e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001720:	2300      	movs	r3, #0
 8001722:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001724:	2003      	movs	r0, #3
 8001726:	f000 f943 	bl	80019b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800172a:	2000      	movs	r0, #0
 800172c:	f000 f80e 	bl	800174c <HAL_InitTick>
 8001730:	4603      	mov	r3, r0
 8001732:	2b00      	cmp	r3, #0
 8001734:	d002      	beq.n	800173c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001736:	2301      	movs	r3, #1
 8001738:	71fb      	strb	r3, [r7, #7]
 800173a:	e001      	b.n	8001740 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800173c:	f7ff fba4 	bl	8000e88 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001740:	79fb      	ldrb	r3, [r7, #7]
}
 8001742:	4618      	mov	r0, r3
 8001744:	3708      	adds	r7, #8
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
	...

0800174c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b084      	sub	sp, #16
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001754:	2300      	movs	r3, #0
 8001756:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001758:	4b17      	ldr	r3, [pc, #92]	; (80017b8 <HAL_InitTick+0x6c>)
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d023      	beq.n	80017a8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001760:	4b16      	ldr	r3, [pc, #88]	; (80017bc <HAL_InitTick+0x70>)
 8001762:	681a      	ldr	r2, [r3, #0]
 8001764:	4b14      	ldr	r3, [pc, #80]	; (80017b8 <HAL_InitTick+0x6c>)
 8001766:	781b      	ldrb	r3, [r3, #0]
 8001768:	4619      	mov	r1, r3
 800176a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800176e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001772:	fbb2 f3f3 	udiv	r3, r2, r3
 8001776:	4618      	mov	r0, r3
 8001778:	f000 f941 	bl	80019fe <HAL_SYSTICK_Config>
 800177c:	4603      	mov	r3, r0
 800177e:	2b00      	cmp	r3, #0
 8001780:	d10f      	bne.n	80017a2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2b0f      	cmp	r3, #15
 8001786:	d809      	bhi.n	800179c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001788:	2200      	movs	r2, #0
 800178a:	6879      	ldr	r1, [r7, #4]
 800178c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001790:	f000 f919 	bl	80019c6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001794:	4a0a      	ldr	r2, [pc, #40]	; (80017c0 <HAL_InitTick+0x74>)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6013      	str	r3, [r2, #0]
 800179a:	e007      	b.n	80017ac <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800179c:	2301      	movs	r3, #1
 800179e:	73fb      	strb	r3, [r7, #15]
 80017a0:	e004      	b.n	80017ac <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80017a2:	2301      	movs	r3, #1
 80017a4:	73fb      	strb	r3, [r7, #15]
 80017a6:	e001      	b.n	80017ac <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80017a8:	2301      	movs	r3, #1
 80017aa:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80017ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	3710      	adds	r7, #16
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	20000008 	.word	0x20000008
 80017bc:	20000000 	.word	0x20000000
 80017c0:	20000004 	.word	0x20000004

080017c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80017c8:	4b06      	ldr	r3, [pc, #24]	; (80017e4 <HAL_IncTick+0x20>)
 80017ca:	781b      	ldrb	r3, [r3, #0]
 80017cc:	461a      	mov	r2, r3
 80017ce:	4b06      	ldr	r3, [pc, #24]	; (80017e8 <HAL_IncTick+0x24>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4413      	add	r3, r2
 80017d4:	4a04      	ldr	r2, [pc, #16]	; (80017e8 <HAL_IncTick+0x24>)
 80017d6:	6013      	str	r3, [r2, #0]
}
 80017d8:	bf00      	nop
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr
 80017e2:	bf00      	nop
 80017e4:	20000008 	.word	0x20000008
 80017e8:	20000878 	.word	0x20000878

080017ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
  return uwTick;
 80017f0:	4b03      	ldr	r3, [pc, #12]	; (8001800 <HAL_GetTick+0x14>)
 80017f2:	681b      	ldr	r3, [r3, #0]
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr
 80017fe:	bf00      	nop
 8001800:	20000878 	.word	0x20000878

08001804 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b084      	sub	sp, #16
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800180c:	f7ff ffee 	bl	80017ec <HAL_GetTick>
 8001810:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800181c:	d005      	beq.n	800182a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800181e:	4b0a      	ldr	r3, [pc, #40]	; (8001848 <HAL_Delay+0x44>)
 8001820:	781b      	ldrb	r3, [r3, #0]
 8001822:	461a      	mov	r2, r3
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	4413      	add	r3, r2
 8001828:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800182a:	bf00      	nop
 800182c:	f7ff ffde 	bl	80017ec <HAL_GetTick>
 8001830:	4602      	mov	r2, r0
 8001832:	68bb      	ldr	r3, [r7, #8]
 8001834:	1ad3      	subs	r3, r2, r3
 8001836:	68fa      	ldr	r2, [r7, #12]
 8001838:	429a      	cmp	r2, r3
 800183a:	d8f7      	bhi.n	800182c <HAL_Delay+0x28>
  {
  }
}
 800183c:	bf00      	nop
 800183e:	bf00      	nop
 8001840:	3710      	adds	r7, #16
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	20000008 	.word	0x20000008

0800184c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800184c:	b480      	push	{r7}
 800184e:	b085      	sub	sp, #20
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	f003 0307 	and.w	r3, r3, #7
 800185a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800185c:	4b0c      	ldr	r3, [pc, #48]	; (8001890 <__NVIC_SetPriorityGrouping+0x44>)
 800185e:	68db      	ldr	r3, [r3, #12]
 8001860:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001862:	68ba      	ldr	r2, [r7, #8]
 8001864:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001868:	4013      	ands	r3, r2
 800186a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001870:	68bb      	ldr	r3, [r7, #8]
 8001872:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001874:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001878:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800187c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800187e:	4a04      	ldr	r2, [pc, #16]	; (8001890 <__NVIC_SetPriorityGrouping+0x44>)
 8001880:	68bb      	ldr	r3, [r7, #8]
 8001882:	60d3      	str	r3, [r2, #12]
}
 8001884:	bf00      	nop
 8001886:	3714      	adds	r7, #20
 8001888:	46bd      	mov	sp, r7
 800188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188e:	4770      	bx	lr
 8001890:	e000ed00 	.word	0xe000ed00

08001894 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001898:	4b04      	ldr	r3, [pc, #16]	; (80018ac <__NVIC_GetPriorityGrouping+0x18>)
 800189a:	68db      	ldr	r3, [r3, #12]
 800189c:	0a1b      	lsrs	r3, r3, #8
 800189e:	f003 0307 	and.w	r3, r3, #7
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr
 80018ac:	e000ed00 	.word	0xe000ed00

080018b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b083      	sub	sp, #12
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	4603      	mov	r3, r0
 80018b8:	6039      	str	r1, [r7, #0]
 80018ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	db0a      	blt.n	80018da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	b2da      	uxtb	r2, r3
 80018c8:	490c      	ldr	r1, [pc, #48]	; (80018fc <__NVIC_SetPriority+0x4c>)
 80018ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ce:	0112      	lsls	r2, r2, #4
 80018d0:	b2d2      	uxtb	r2, r2
 80018d2:	440b      	add	r3, r1
 80018d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018d8:	e00a      	b.n	80018f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	b2da      	uxtb	r2, r3
 80018de:	4908      	ldr	r1, [pc, #32]	; (8001900 <__NVIC_SetPriority+0x50>)
 80018e0:	79fb      	ldrb	r3, [r7, #7]
 80018e2:	f003 030f 	and.w	r3, r3, #15
 80018e6:	3b04      	subs	r3, #4
 80018e8:	0112      	lsls	r2, r2, #4
 80018ea:	b2d2      	uxtb	r2, r2
 80018ec:	440b      	add	r3, r1
 80018ee:	761a      	strb	r2, [r3, #24]
}
 80018f0:	bf00      	nop
 80018f2:	370c      	adds	r7, #12
 80018f4:	46bd      	mov	sp, r7
 80018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fa:	4770      	bx	lr
 80018fc:	e000e100 	.word	0xe000e100
 8001900:	e000ed00 	.word	0xe000ed00

08001904 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001904:	b480      	push	{r7}
 8001906:	b089      	sub	sp, #36	; 0x24
 8001908:	af00      	add	r7, sp, #0
 800190a:	60f8      	str	r0, [r7, #12]
 800190c:	60b9      	str	r1, [r7, #8]
 800190e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	f003 0307 	and.w	r3, r3, #7
 8001916:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001918:	69fb      	ldr	r3, [r7, #28]
 800191a:	f1c3 0307 	rsb	r3, r3, #7
 800191e:	2b04      	cmp	r3, #4
 8001920:	bf28      	it	cs
 8001922:	2304      	movcs	r3, #4
 8001924:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001926:	69fb      	ldr	r3, [r7, #28]
 8001928:	3304      	adds	r3, #4
 800192a:	2b06      	cmp	r3, #6
 800192c:	d902      	bls.n	8001934 <NVIC_EncodePriority+0x30>
 800192e:	69fb      	ldr	r3, [r7, #28]
 8001930:	3b03      	subs	r3, #3
 8001932:	e000      	b.n	8001936 <NVIC_EncodePriority+0x32>
 8001934:	2300      	movs	r3, #0
 8001936:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001938:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800193c:	69bb      	ldr	r3, [r7, #24]
 800193e:	fa02 f303 	lsl.w	r3, r2, r3
 8001942:	43da      	mvns	r2, r3
 8001944:	68bb      	ldr	r3, [r7, #8]
 8001946:	401a      	ands	r2, r3
 8001948:	697b      	ldr	r3, [r7, #20]
 800194a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800194c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	fa01 f303 	lsl.w	r3, r1, r3
 8001956:	43d9      	mvns	r1, r3
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800195c:	4313      	orrs	r3, r2
         );
}
 800195e:	4618      	mov	r0, r3
 8001960:	3724      	adds	r7, #36	; 0x24
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr
	...

0800196c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b082      	sub	sp, #8
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	3b01      	subs	r3, #1
 8001978:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800197c:	d301      	bcc.n	8001982 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800197e:	2301      	movs	r3, #1
 8001980:	e00f      	b.n	80019a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001982:	4a0a      	ldr	r2, [pc, #40]	; (80019ac <SysTick_Config+0x40>)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	3b01      	subs	r3, #1
 8001988:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800198a:	210f      	movs	r1, #15
 800198c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001990:	f7ff ff8e 	bl	80018b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001994:	4b05      	ldr	r3, [pc, #20]	; (80019ac <SysTick_Config+0x40>)
 8001996:	2200      	movs	r2, #0
 8001998:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800199a:	4b04      	ldr	r3, [pc, #16]	; (80019ac <SysTick_Config+0x40>)
 800199c:	2207      	movs	r2, #7
 800199e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019a0:	2300      	movs	r3, #0
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	3708      	adds	r7, #8
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	e000e010 	.word	0xe000e010

080019b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019b8:	6878      	ldr	r0, [r7, #4]
 80019ba:	f7ff ff47 	bl	800184c <__NVIC_SetPriorityGrouping>
}
 80019be:	bf00      	nop
 80019c0:	3708      	adds	r7, #8
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}

080019c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019c6:	b580      	push	{r7, lr}
 80019c8:	b086      	sub	sp, #24
 80019ca:	af00      	add	r7, sp, #0
 80019cc:	4603      	mov	r3, r0
 80019ce:	60b9      	str	r1, [r7, #8]
 80019d0:	607a      	str	r2, [r7, #4]
 80019d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80019d4:	2300      	movs	r3, #0
 80019d6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80019d8:	f7ff ff5c 	bl	8001894 <__NVIC_GetPriorityGrouping>
 80019dc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019de:	687a      	ldr	r2, [r7, #4]
 80019e0:	68b9      	ldr	r1, [r7, #8]
 80019e2:	6978      	ldr	r0, [r7, #20]
 80019e4:	f7ff ff8e 	bl	8001904 <NVIC_EncodePriority>
 80019e8:	4602      	mov	r2, r0
 80019ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019ee:	4611      	mov	r1, r2
 80019f0:	4618      	mov	r0, r3
 80019f2:	f7ff ff5d 	bl	80018b0 <__NVIC_SetPriority>
}
 80019f6:	bf00      	nop
 80019f8:	3718      	adds	r7, #24
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}

080019fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019fe:	b580      	push	{r7, lr}
 8001a00:	b082      	sub	sp, #8
 8001a02:	af00      	add	r7, sp, #0
 8001a04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a06:	6878      	ldr	r0, [r7, #4]
 8001a08:	f7ff ffb0 	bl	800196c <SysTick_Config>
 8001a0c:	4603      	mov	r3, r0
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	3708      	adds	r7, #8
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
	...

08001a18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b087      	sub	sp, #28
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
 8001a20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a22:	2300      	movs	r3, #0
 8001a24:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a26:	e166      	b.n	8001cf6 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	681a      	ldr	r2, [r3, #0]
 8001a2c:	2101      	movs	r1, #1
 8001a2e:	697b      	ldr	r3, [r7, #20]
 8001a30:	fa01 f303 	lsl.w	r3, r1, r3
 8001a34:	4013      	ands	r3, r2
 8001a36:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	f000 8158 	beq.w	8001cf0 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	f003 0303 	and.w	r3, r3, #3
 8001a48:	2b01      	cmp	r3, #1
 8001a4a:	d005      	beq.n	8001a58 <HAL_GPIO_Init+0x40>
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	f003 0303 	and.w	r3, r3, #3
 8001a54:	2b02      	cmp	r3, #2
 8001a56:	d130      	bne.n	8001aba <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	689b      	ldr	r3, [r3, #8]
 8001a5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001a5e:	697b      	ldr	r3, [r7, #20]
 8001a60:	005b      	lsls	r3, r3, #1
 8001a62:	2203      	movs	r2, #3
 8001a64:	fa02 f303 	lsl.w	r3, r2, r3
 8001a68:	43db      	mvns	r3, r3
 8001a6a:	693a      	ldr	r2, [r7, #16]
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	68da      	ldr	r2, [r3, #12]
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	005b      	lsls	r3, r3, #1
 8001a78:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7c:	693a      	ldr	r2, [r7, #16]
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	693a      	ldr	r2, [r7, #16]
 8001a86:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001a8e:	2201      	movs	r2, #1
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	fa02 f303 	lsl.w	r3, r2, r3
 8001a96:	43db      	mvns	r3, r3
 8001a98:	693a      	ldr	r2, [r7, #16]
 8001a9a:	4013      	ands	r3, r2
 8001a9c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	091b      	lsrs	r3, r3, #4
 8001aa4:	f003 0201 	and.w	r2, r3, #1
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8001aae:	693a      	ldr	r2, [r7, #16]
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	693a      	ldr	r2, [r7, #16]
 8001ab8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	f003 0303 	and.w	r3, r3, #3
 8001ac2:	2b03      	cmp	r3, #3
 8001ac4:	d017      	beq.n	8001af6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	68db      	ldr	r3, [r3, #12]
 8001aca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	005b      	lsls	r3, r3, #1
 8001ad0:	2203      	movs	r2, #3
 8001ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad6:	43db      	mvns	r3, r3
 8001ad8:	693a      	ldr	r2, [r7, #16]
 8001ada:	4013      	ands	r3, r2
 8001adc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	689a      	ldr	r2, [r3, #8]
 8001ae2:	697b      	ldr	r3, [r7, #20]
 8001ae4:	005b      	lsls	r3, r3, #1
 8001ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aea:	693a      	ldr	r2, [r7, #16]
 8001aec:	4313      	orrs	r3, r2
 8001aee:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	693a      	ldr	r2, [r7, #16]
 8001af4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	f003 0303 	and.w	r3, r3, #3
 8001afe:	2b02      	cmp	r3, #2
 8001b00:	d123      	bne.n	8001b4a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001b02:	697b      	ldr	r3, [r7, #20]
 8001b04:	08da      	lsrs	r2, r3, #3
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	3208      	adds	r2, #8
 8001b0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b0e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	f003 0307 	and.w	r3, r3, #7
 8001b16:	009b      	lsls	r3, r3, #2
 8001b18:	220f      	movs	r2, #15
 8001b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1e:	43db      	mvns	r3, r3
 8001b20:	693a      	ldr	r2, [r7, #16]
 8001b22:	4013      	ands	r3, r2
 8001b24:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	691a      	ldr	r2, [r3, #16]
 8001b2a:	697b      	ldr	r3, [r7, #20]
 8001b2c:	f003 0307 	and.w	r3, r3, #7
 8001b30:	009b      	lsls	r3, r3, #2
 8001b32:	fa02 f303 	lsl.w	r3, r2, r3
 8001b36:	693a      	ldr	r2, [r7, #16]
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	08da      	lsrs	r2, r3, #3
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	3208      	adds	r2, #8
 8001b44:	6939      	ldr	r1, [r7, #16]
 8001b46:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	005b      	lsls	r3, r3, #1
 8001b54:	2203      	movs	r2, #3
 8001b56:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5a:	43db      	mvns	r3, r3
 8001b5c:	693a      	ldr	r2, [r7, #16]
 8001b5e:	4013      	ands	r3, r2
 8001b60:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	f003 0203 	and.w	r2, r3, #3
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	005b      	lsls	r3, r3, #1
 8001b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b72:	693a      	ldr	r2, [r7, #16]
 8001b74:	4313      	orrs	r3, r2
 8001b76:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	693a      	ldr	r2, [r7, #16]
 8001b7c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	f000 80b2 	beq.w	8001cf0 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b8c:	4b61      	ldr	r3, [pc, #388]	; (8001d14 <HAL_GPIO_Init+0x2fc>)
 8001b8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b90:	4a60      	ldr	r2, [pc, #384]	; (8001d14 <HAL_GPIO_Init+0x2fc>)
 8001b92:	f043 0301 	orr.w	r3, r3, #1
 8001b96:	6613      	str	r3, [r2, #96]	; 0x60
 8001b98:	4b5e      	ldr	r3, [pc, #376]	; (8001d14 <HAL_GPIO_Init+0x2fc>)
 8001b9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b9c:	f003 0301 	and.w	r3, r3, #1
 8001ba0:	60bb      	str	r3, [r7, #8]
 8001ba2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001ba4:	4a5c      	ldr	r2, [pc, #368]	; (8001d18 <HAL_GPIO_Init+0x300>)
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	089b      	lsrs	r3, r3, #2
 8001baa:	3302      	adds	r3, #2
 8001bac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bb0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	f003 0303 	and.w	r3, r3, #3
 8001bb8:	009b      	lsls	r3, r3, #2
 8001bba:	220f      	movs	r2, #15
 8001bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc0:	43db      	mvns	r3, r3
 8001bc2:	693a      	ldr	r2, [r7, #16]
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001bce:	d02b      	beq.n	8001c28 <HAL_GPIO_Init+0x210>
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	4a52      	ldr	r2, [pc, #328]	; (8001d1c <HAL_GPIO_Init+0x304>)
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d025      	beq.n	8001c24 <HAL_GPIO_Init+0x20c>
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	4a51      	ldr	r2, [pc, #324]	; (8001d20 <HAL_GPIO_Init+0x308>)
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d01f      	beq.n	8001c20 <HAL_GPIO_Init+0x208>
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	4a50      	ldr	r2, [pc, #320]	; (8001d24 <HAL_GPIO_Init+0x30c>)
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d019      	beq.n	8001c1c <HAL_GPIO_Init+0x204>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	4a4f      	ldr	r2, [pc, #316]	; (8001d28 <HAL_GPIO_Init+0x310>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d013      	beq.n	8001c18 <HAL_GPIO_Init+0x200>
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	4a4e      	ldr	r2, [pc, #312]	; (8001d2c <HAL_GPIO_Init+0x314>)
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d00d      	beq.n	8001c14 <HAL_GPIO_Init+0x1fc>
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	4a4d      	ldr	r2, [pc, #308]	; (8001d30 <HAL_GPIO_Init+0x318>)
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d007      	beq.n	8001c10 <HAL_GPIO_Init+0x1f8>
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	4a4c      	ldr	r2, [pc, #304]	; (8001d34 <HAL_GPIO_Init+0x31c>)
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d101      	bne.n	8001c0c <HAL_GPIO_Init+0x1f4>
 8001c08:	2307      	movs	r3, #7
 8001c0a:	e00e      	b.n	8001c2a <HAL_GPIO_Init+0x212>
 8001c0c:	2308      	movs	r3, #8
 8001c0e:	e00c      	b.n	8001c2a <HAL_GPIO_Init+0x212>
 8001c10:	2306      	movs	r3, #6
 8001c12:	e00a      	b.n	8001c2a <HAL_GPIO_Init+0x212>
 8001c14:	2305      	movs	r3, #5
 8001c16:	e008      	b.n	8001c2a <HAL_GPIO_Init+0x212>
 8001c18:	2304      	movs	r3, #4
 8001c1a:	e006      	b.n	8001c2a <HAL_GPIO_Init+0x212>
 8001c1c:	2303      	movs	r3, #3
 8001c1e:	e004      	b.n	8001c2a <HAL_GPIO_Init+0x212>
 8001c20:	2302      	movs	r3, #2
 8001c22:	e002      	b.n	8001c2a <HAL_GPIO_Init+0x212>
 8001c24:	2301      	movs	r3, #1
 8001c26:	e000      	b.n	8001c2a <HAL_GPIO_Init+0x212>
 8001c28:	2300      	movs	r3, #0
 8001c2a:	697a      	ldr	r2, [r7, #20]
 8001c2c:	f002 0203 	and.w	r2, r2, #3
 8001c30:	0092      	lsls	r2, r2, #2
 8001c32:	4093      	lsls	r3, r2
 8001c34:	693a      	ldr	r2, [r7, #16]
 8001c36:	4313      	orrs	r3, r2
 8001c38:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001c3a:	4937      	ldr	r1, [pc, #220]	; (8001d18 <HAL_GPIO_Init+0x300>)
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	089b      	lsrs	r3, r3, #2
 8001c40:	3302      	adds	r3, #2
 8001c42:	693a      	ldr	r2, [r7, #16]
 8001c44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001c48:	4b3b      	ldr	r3, [pc, #236]	; (8001d38 <HAL_GPIO_Init+0x320>)
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	43db      	mvns	r3, r3
 8001c52:	693a      	ldr	r2, [r7, #16]
 8001c54:	4013      	ands	r3, r2
 8001c56:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d003      	beq.n	8001c6c <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001c64:	693a      	ldr	r2, [r7, #16]
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001c6c:	4a32      	ldr	r2, [pc, #200]	; (8001d38 <HAL_GPIO_Init+0x320>)
 8001c6e:	693b      	ldr	r3, [r7, #16]
 8001c70:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001c72:	4b31      	ldr	r3, [pc, #196]	; (8001d38 <HAL_GPIO_Init+0x320>)
 8001c74:	68db      	ldr	r3, [r3, #12]
 8001c76:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	43db      	mvns	r3, r3
 8001c7c:	693a      	ldr	r2, [r7, #16]
 8001c7e:	4013      	ands	r3, r2
 8001c80:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d003      	beq.n	8001c96 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8001c8e:	693a      	ldr	r2, [r7, #16]
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	4313      	orrs	r3, r2
 8001c94:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001c96:	4a28      	ldr	r2, [pc, #160]	; (8001d38 <HAL_GPIO_Init+0x320>)
 8001c98:	693b      	ldr	r3, [r7, #16]
 8001c9a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001c9c:	4b26      	ldr	r3, [pc, #152]	; (8001d38 <HAL_GPIO_Init+0x320>)
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	43db      	mvns	r3, r3
 8001ca6:	693a      	ldr	r2, [r7, #16]
 8001ca8:	4013      	ands	r3, r2
 8001caa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d003      	beq.n	8001cc0 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001cb8:	693a      	ldr	r2, [r7, #16]
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001cc0:	4a1d      	ldr	r2, [pc, #116]	; (8001d38 <HAL_GPIO_Init+0x320>)
 8001cc2:	693b      	ldr	r3, [r7, #16]
 8001cc4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001cc6:	4b1c      	ldr	r3, [pc, #112]	; (8001d38 <HAL_GPIO_Init+0x320>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	43db      	mvns	r3, r3
 8001cd0:	693a      	ldr	r2, [r7, #16]
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d003      	beq.n	8001cea <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8001ce2:	693a      	ldr	r2, [r7, #16]
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001cea:	4a13      	ldr	r2, [pc, #76]	; (8001d38 <HAL_GPIO_Init+0x320>)
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	3301      	adds	r3, #1
 8001cf4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	697b      	ldr	r3, [r7, #20]
 8001cfc:	fa22 f303 	lsr.w	r3, r2, r3
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	f47f ae91 	bne.w	8001a28 <HAL_GPIO_Init+0x10>
  }
}
 8001d06:	bf00      	nop
 8001d08:	bf00      	nop
 8001d0a:	371c      	adds	r7, #28
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d12:	4770      	bx	lr
 8001d14:	40021000 	.word	0x40021000
 8001d18:	40010000 	.word	0x40010000
 8001d1c:	48000400 	.word	0x48000400
 8001d20:	48000800 	.word	0x48000800
 8001d24:	48000c00 	.word	0x48000c00
 8001d28:	48001000 	.word	0x48001000
 8001d2c:	48001400 	.word	0x48001400
 8001d30:	48001800 	.word	0x48001800
 8001d34:	48001c00 	.word	0x48001c00
 8001d38:	40010400 	.word	0x40010400

08001d3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b083      	sub	sp, #12
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
 8001d44:	460b      	mov	r3, r1
 8001d46:	807b      	strh	r3, [r7, #2]
 8001d48:	4613      	mov	r3, r2
 8001d4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d4c:	787b      	ldrb	r3, [r7, #1]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d003      	beq.n	8001d5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001d52:	887a      	ldrh	r2, [r7, #2]
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001d58:	e002      	b.n	8001d60 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001d5a:	887a      	ldrh	r2, [r7, #2]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001d60:	bf00      	nop
 8001d62:	370c      	adds	r7, #12
 8001d64:	46bd      	mov	sp, r7
 8001d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6a:	4770      	bx	lr

08001d6c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b082      	sub	sp, #8
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d101      	bne.n	8001d7e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e081      	b.n	8001e82 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d84:	b2db      	uxtb	r3, r3
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d106      	bne.n	8001d98 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001d92:	6878      	ldr	r0, [r7, #4]
 8001d94:	f7ff f89c 	bl	8000ed0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2224      	movs	r2, #36	; 0x24
 8001d9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	681a      	ldr	r2, [r3, #0]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f022 0201 	bic.w	r2, r2, #1
 8001dae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	685a      	ldr	r2, [r3, #4]
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001dbc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	689a      	ldr	r2, [r3, #8]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001dcc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	68db      	ldr	r3, [r3, #12]
 8001dd2:	2b01      	cmp	r3, #1
 8001dd4:	d107      	bne.n	8001de6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	689a      	ldr	r2, [r3, #8]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001de2:	609a      	str	r2, [r3, #8]
 8001de4:	e006      	b.n	8001df4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	689a      	ldr	r2, [r3, #8]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001df2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	68db      	ldr	r3, [r3, #12]
 8001df8:	2b02      	cmp	r3, #2
 8001dfa:	d104      	bne.n	8001e06 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001e04:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	687a      	ldr	r2, [r7, #4]
 8001e0e:	6812      	ldr	r2, [r2, #0]
 8001e10:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001e14:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e18:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	68da      	ldr	r2, [r3, #12]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001e28:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	691a      	ldr	r2, [r3, #16]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	695b      	ldr	r3, [r3, #20]
 8001e32:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	699b      	ldr	r3, [r3, #24]
 8001e3a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	430a      	orrs	r2, r1
 8001e42:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	69d9      	ldr	r1, [r3, #28]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6a1a      	ldr	r2, [r3, #32]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	430a      	orrs	r2, r1
 8001e52:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	681a      	ldr	r2, [r3, #0]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f042 0201 	orr.w	r2, r2, #1
 8001e62:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2200      	movs	r2, #0
 8001e68:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2220      	movs	r2, #32
 8001e6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2200      	movs	r2, #0
 8001e76:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001e80:	2300      	movs	r3, #0
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	3708      	adds	r7, #8
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}

08001e8a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001e8a:	b480      	push	{r7}
 8001e8c:	b083      	sub	sp, #12
 8001e8e:	af00      	add	r7, sp, #0
 8001e90:	6078      	str	r0, [r7, #4]
 8001e92:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e9a:	b2db      	uxtb	r3, r3
 8001e9c:	2b20      	cmp	r3, #32
 8001e9e:	d138      	bne.n	8001f12 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001ea6:	2b01      	cmp	r3, #1
 8001ea8:	d101      	bne.n	8001eae <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001eaa:	2302      	movs	r3, #2
 8001eac:	e032      	b.n	8001f14 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2201      	movs	r2, #1
 8001eb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2224      	movs	r2, #36	; 0x24
 8001eba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	681a      	ldr	r2, [r3, #0]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f022 0201 	bic.w	r2, r2, #1
 8001ecc:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	681a      	ldr	r2, [r3, #0]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001edc:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	6819      	ldr	r1, [r3, #0]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	683a      	ldr	r2, [r7, #0]
 8001eea:	430a      	orrs	r2, r1
 8001eec:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	681a      	ldr	r2, [r3, #0]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f042 0201 	orr.w	r2, r2, #1
 8001efc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2220      	movs	r2, #32
 8001f02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2200      	movs	r2, #0
 8001f0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	e000      	b.n	8001f14 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001f12:	2302      	movs	r3, #2
  }
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	370c      	adds	r7, #12
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr

08001f20 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b085      	sub	sp, #20
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
 8001f28:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f30:	b2db      	uxtb	r3, r3
 8001f32:	2b20      	cmp	r3, #32
 8001f34:	d139      	bne.n	8001faa <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001f3c:	2b01      	cmp	r3, #1
 8001f3e:	d101      	bne.n	8001f44 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001f40:	2302      	movs	r3, #2
 8001f42:	e033      	b.n	8001fac <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2201      	movs	r2, #1
 8001f48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2224      	movs	r2, #36	; 0x24
 8001f50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	681a      	ldr	r2, [r3, #0]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f022 0201 	bic.w	r2, r2, #1
 8001f62:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001f72:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	021b      	lsls	r3, r3, #8
 8001f78:	68fa      	ldr	r2, [r7, #12]
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	68fa      	ldr	r2, [r7, #12]
 8001f84:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f042 0201 	orr.w	r2, r2, #1
 8001f94:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2220      	movs	r2, #32
 8001f9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	e000      	b.n	8001fac <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001faa:	2302      	movs	r3, #2
  }
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	3714      	adds	r7, #20
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb6:	4770      	bx	lr

08001fb8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001fb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fba:	b08f      	sub	sp, #60	; 0x3c
 8001fbc:	af0a      	add	r7, sp, #40	; 0x28
 8001fbe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d101      	bne.n	8001fca <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e116      	b.n	80021f8 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001fd6:	b2db      	uxtb	r3, r3
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d106      	bne.n	8001fea <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2200      	movs	r2, #0
 8001fe0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001fe4:	6878      	ldr	r0, [r7, #4]
 8001fe6:	f7ff f9a3 	bl	8001330 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2203      	movs	r2, #3
 8001fee:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001ff2:	68bb      	ldr	r3, [r7, #8]
 8001ff4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ff6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d102      	bne.n	8002004 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2200      	movs	r2, #0
 8002002:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4618      	mov	r0, r3
 800200a:	f005 fed7 	bl	8007dbc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	603b      	str	r3, [r7, #0]
 8002014:	687e      	ldr	r6, [r7, #4]
 8002016:	466d      	mov	r5, sp
 8002018:	f106 0410 	add.w	r4, r6, #16
 800201c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800201e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002020:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002022:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002024:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002028:	e885 0003 	stmia.w	r5, {r0, r1}
 800202c:	1d33      	adds	r3, r6, #4
 800202e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002030:	6838      	ldr	r0, [r7, #0]
 8002032:	f005 fe97 	bl	8007d64 <USB_CoreInit>
 8002036:	4603      	mov	r3, r0
 8002038:	2b00      	cmp	r3, #0
 800203a:	d005      	beq.n	8002048 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2202      	movs	r2, #2
 8002040:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002044:	2301      	movs	r3, #1
 8002046:	e0d7      	b.n	80021f8 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	2100      	movs	r1, #0
 800204e:	4618      	mov	r0, r3
 8002050:	f005 fec5 	bl	8007dde <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002054:	2300      	movs	r3, #0
 8002056:	73fb      	strb	r3, [r7, #15]
 8002058:	e04a      	b.n	80020f0 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800205a:	7bfa      	ldrb	r2, [r7, #15]
 800205c:	6879      	ldr	r1, [r7, #4]
 800205e:	4613      	mov	r3, r2
 8002060:	00db      	lsls	r3, r3, #3
 8002062:	4413      	add	r3, r2
 8002064:	009b      	lsls	r3, r3, #2
 8002066:	440b      	add	r3, r1
 8002068:	333d      	adds	r3, #61	; 0x3d
 800206a:	2201      	movs	r2, #1
 800206c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800206e:	7bfa      	ldrb	r2, [r7, #15]
 8002070:	6879      	ldr	r1, [r7, #4]
 8002072:	4613      	mov	r3, r2
 8002074:	00db      	lsls	r3, r3, #3
 8002076:	4413      	add	r3, r2
 8002078:	009b      	lsls	r3, r3, #2
 800207a:	440b      	add	r3, r1
 800207c:	333c      	adds	r3, #60	; 0x3c
 800207e:	7bfa      	ldrb	r2, [r7, #15]
 8002080:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002082:	7bfa      	ldrb	r2, [r7, #15]
 8002084:	7bfb      	ldrb	r3, [r7, #15]
 8002086:	b298      	uxth	r0, r3
 8002088:	6879      	ldr	r1, [r7, #4]
 800208a:	4613      	mov	r3, r2
 800208c:	00db      	lsls	r3, r3, #3
 800208e:	4413      	add	r3, r2
 8002090:	009b      	lsls	r3, r3, #2
 8002092:	440b      	add	r3, r1
 8002094:	3344      	adds	r3, #68	; 0x44
 8002096:	4602      	mov	r2, r0
 8002098:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800209a:	7bfa      	ldrb	r2, [r7, #15]
 800209c:	6879      	ldr	r1, [r7, #4]
 800209e:	4613      	mov	r3, r2
 80020a0:	00db      	lsls	r3, r3, #3
 80020a2:	4413      	add	r3, r2
 80020a4:	009b      	lsls	r3, r3, #2
 80020a6:	440b      	add	r3, r1
 80020a8:	3340      	adds	r3, #64	; 0x40
 80020aa:	2200      	movs	r2, #0
 80020ac:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80020ae:	7bfa      	ldrb	r2, [r7, #15]
 80020b0:	6879      	ldr	r1, [r7, #4]
 80020b2:	4613      	mov	r3, r2
 80020b4:	00db      	lsls	r3, r3, #3
 80020b6:	4413      	add	r3, r2
 80020b8:	009b      	lsls	r3, r3, #2
 80020ba:	440b      	add	r3, r1
 80020bc:	3348      	adds	r3, #72	; 0x48
 80020be:	2200      	movs	r2, #0
 80020c0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80020c2:	7bfa      	ldrb	r2, [r7, #15]
 80020c4:	6879      	ldr	r1, [r7, #4]
 80020c6:	4613      	mov	r3, r2
 80020c8:	00db      	lsls	r3, r3, #3
 80020ca:	4413      	add	r3, r2
 80020cc:	009b      	lsls	r3, r3, #2
 80020ce:	440b      	add	r3, r1
 80020d0:	334c      	adds	r3, #76	; 0x4c
 80020d2:	2200      	movs	r2, #0
 80020d4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80020d6:	7bfa      	ldrb	r2, [r7, #15]
 80020d8:	6879      	ldr	r1, [r7, #4]
 80020da:	4613      	mov	r3, r2
 80020dc:	00db      	lsls	r3, r3, #3
 80020de:	4413      	add	r3, r2
 80020e0:	009b      	lsls	r3, r3, #2
 80020e2:	440b      	add	r3, r1
 80020e4:	3354      	adds	r3, #84	; 0x54
 80020e6:	2200      	movs	r2, #0
 80020e8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020ea:	7bfb      	ldrb	r3, [r7, #15]
 80020ec:	3301      	adds	r3, #1
 80020ee:	73fb      	strb	r3, [r7, #15]
 80020f0:	7bfa      	ldrb	r2, [r7, #15]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	429a      	cmp	r2, r3
 80020f8:	d3af      	bcc.n	800205a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020fa:	2300      	movs	r3, #0
 80020fc:	73fb      	strb	r3, [r7, #15]
 80020fe:	e044      	b.n	800218a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002100:	7bfa      	ldrb	r2, [r7, #15]
 8002102:	6879      	ldr	r1, [r7, #4]
 8002104:	4613      	mov	r3, r2
 8002106:	00db      	lsls	r3, r3, #3
 8002108:	4413      	add	r3, r2
 800210a:	009b      	lsls	r3, r3, #2
 800210c:	440b      	add	r3, r1
 800210e:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002112:	2200      	movs	r2, #0
 8002114:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002116:	7bfa      	ldrb	r2, [r7, #15]
 8002118:	6879      	ldr	r1, [r7, #4]
 800211a:	4613      	mov	r3, r2
 800211c:	00db      	lsls	r3, r3, #3
 800211e:	4413      	add	r3, r2
 8002120:	009b      	lsls	r3, r3, #2
 8002122:	440b      	add	r3, r1
 8002124:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002128:	7bfa      	ldrb	r2, [r7, #15]
 800212a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800212c:	7bfa      	ldrb	r2, [r7, #15]
 800212e:	6879      	ldr	r1, [r7, #4]
 8002130:	4613      	mov	r3, r2
 8002132:	00db      	lsls	r3, r3, #3
 8002134:	4413      	add	r3, r2
 8002136:	009b      	lsls	r3, r3, #2
 8002138:	440b      	add	r3, r1
 800213a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800213e:	2200      	movs	r2, #0
 8002140:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002142:	7bfa      	ldrb	r2, [r7, #15]
 8002144:	6879      	ldr	r1, [r7, #4]
 8002146:	4613      	mov	r3, r2
 8002148:	00db      	lsls	r3, r3, #3
 800214a:	4413      	add	r3, r2
 800214c:	009b      	lsls	r3, r3, #2
 800214e:	440b      	add	r3, r1
 8002150:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002154:	2200      	movs	r2, #0
 8002156:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002158:	7bfa      	ldrb	r2, [r7, #15]
 800215a:	6879      	ldr	r1, [r7, #4]
 800215c:	4613      	mov	r3, r2
 800215e:	00db      	lsls	r3, r3, #3
 8002160:	4413      	add	r3, r2
 8002162:	009b      	lsls	r3, r3, #2
 8002164:	440b      	add	r3, r1
 8002166:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800216a:	2200      	movs	r2, #0
 800216c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800216e:	7bfa      	ldrb	r2, [r7, #15]
 8002170:	6879      	ldr	r1, [r7, #4]
 8002172:	4613      	mov	r3, r2
 8002174:	00db      	lsls	r3, r3, #3
 8002176:	4413      	add	r3, r2
 8002178:	009b      	lsls	r3, r3, #2
 800217a:	440b      	add	r3, r1
 800217c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002180:	2200      	movs	r2, #0
 8002182:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002184:	7bfb      	ldrb	r3, [r7, #15]
 8002186:	3301      	adds	r3, #1
 8002188:	73fb      	strb	r3, [r7, #15]
 800218a:	7bfa      	ldrb	r2, [r7, #15]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	429a      	cmp	r2, r3
 8002192:	d3b5      	bcc.n	8002100 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	603b      	str	r3, [r7, #0]
 800219a:	687e      	ldr	r6, [r7, #4]
 800219c:	466d      	mov	r5, sp
 800219e:	f106 0410 	add.w	r4, r6, #16
 80021a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021aa:	e894 0003 	ldmia.w	r4, {r0, r1}
 80021ae:	e885 0003 	stmia.w	r5, {r0, r1}
 80021b2:	1d33      	adds	r3, r6, #4
 80021b4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80021b6:	6838      	ldr	r0, [r7, #0]
 80021b8:	f005 fe5e 	bl	8007e78 <USB_DevInit>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d005      	beq.n	80021ce <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2202      	movs	r2, #2
 80021c6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	e014      	b.n	80021f8 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2200      	movs	r2, #0
 80021d2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2201      	movs	r2, #1
 80021da:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e2:	2b01      	cmp	r3, #1
 80021e4:	d102      	bne.n	80021ec <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80021e6:	6878      	ldr	r0, [r7, #4]
 80021e8:	f000 f80a 	bl	8002200 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4618      	mov	r0, r3
 80021f2:	f006 f80a 	bl	800820a <USB_DevDisconnect>

  return HAL_OK;
 80021f6:	2300      	movs	r3, #0
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	3714      	adds	r7, #20
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002200 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002200:	b480      	push	{r7}
 8002202:	b085      	sub	sp, #20
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2201      	movs	r2, #1
 8002212:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2200      	movs	r2, #0
 800221a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	699b      	ldr	r3, [r3, #24]
 8002222:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800222e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002232:	f043 0303 	orr.w	r3, r3, #3
 8002236:	68fa      	ldr	r2, [r7, #12]
 8002238:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800223a:	2300      	movs	r3, #0
}
 800223c:	4618      	mov	r0, r3
 800223e:	3714      	adds	r7, #20
 8002240:	46bd      	mov	sp, r7
 8002242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002246:	4770      	bx	lr

08002248 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002248:	b480      	push	{r7}
 800224a:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800224c:	4b0d      	ldr	r3, [pc, #52]	; (8002284 <HAL_PWREx_GetVoltageRange+0x3c>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002254:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002258:	d102      	bne.n	8002260 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 800225a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800225e:	e00b      	b.n	8002278 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8002260:	4b08      	ldr	r3, [pc, #32]	; (8002284 <HAL_PWREx_GetVoltageRange+0x3c>)
 8002262:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002266:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800226a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800226e:	d102      	bne.n	8002276 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8002270:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002274:	e000      	b.n	8002278 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8002276:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8002278:	4618      	mov	r0, r3
 800227a:	46bd      	mov	sp, r7
 800227c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002280:	4770      	bx	lr
 8002282:	bf00      	nop
 8002284:	40007000 	.word	0x40007000

08002288 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002288:	b480      	push	{r7}
 800228a:	b085      	sub	sp, #20
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d141      	bne.n	800231a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002296:	4b4b      	ldr	r3, [pc, #300]	; (80023c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800229e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022a2:	d131      	bne.n	8002308 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80022a4:	4b47      	ldr	r3, [pc, #284]	; (80023c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80022aa:	4a46      	ldr	r2, [pc, #280]	; (80023c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80022b0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80022b4:	4b43      	ldr	r3, [pc, #268]	; (80023c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80022bc:	4a41      	ldr	r2, [pc, #260]	; (80023c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80022c2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80022c4:	4b40      	ldr	r3, [pc, #256]	; (80023c8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	2232      	movs	r2, #50	; 0x32
 80022ca:	fb02 f303 	mul.w	r3, r2, r3
 80022ce:	4a3f      	ldr	r2, [pc, #252]	; (80023cc <HAL_PWREx_ControlVoltageScaling+0x144>)
 80022d0:	fba2 2303 	umull	r2, r3, r2, r3
 80022d4:	0c9b      	lsrs	r3, r3, #18
 80022d6:	3301      	adds	r3, #1
 80022d8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80022da:	e002      	b.n	80022e2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	3b01      	subs	r3, #1
 80022e0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80022e2:	4b38      	ldr	r3, [pc, #224]	; (80023c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022e4:	695b      	ldr	r3, [r3, #20]
 80022e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022ee:	d102      	bne.n	80022f6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d1f2      	bne.n	80022dc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80022f6:	4b33      	ldr	r3, [pc, #204]	; (80023c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022f8:	695b      	ldr	r3, [r3, #20]
 80022fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002302:	d158      	bne.n	80023b6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002304:	2303      	movs	r3, #3
 8002306:	e057      	b.n	80023b8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002308:	4b2e      	ldr	r3, [pc, #184]	; (80023c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800230a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800230e:	4a2d      	ldr	r2, [pc, #180]	; (80023c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002310:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002314:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002318:	e04d      	b.n	80023b6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002320:	d141      	bne.n	80023a6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002322:	4b28      	ldr	r3, [pc, #160]	; (80023c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800232a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800232e:	d131      	bne.n	8002394 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002330:	4b24      	ldr	r3, [pc, #144]	; (80023c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002332:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002336:	4a23      	ldr	r2, [pc, #140]	; (80023c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002338:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800233c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002340:	4b20      	ldr	r3, [pc, #128]	; (80023c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002348:	4a1e      	ldr	r2, [pc, #120]	; (80023c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800234a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800234e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002350:	4b1d      	ldr	r3, [pc, #116]	; (80023c8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	2232      	movs	r2, #50	; 0x32
 8002356:	fb02 f303 	mul.w	r3, r2, r3
 800235a:	4a1c      	ldr	r2, [pc, #112]	; (80023cc <HAL_PWREx_ControlVoltageScaling+0x144>)
 800235c:	fba2 2303 	umull	r2, r3, r2, r3
 8002360:	0c9b      	lsrs	r3, r3, #18
 8002362:	3301      	adds	r3, #1
 8002364:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002366:	e002      	b.n	800236e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	3b01      	subs	r3, #1
 800236c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800236e:	4b15      	ldr	r3, [pc, #84]	; (80023c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002370:	695b      	ldr	r3, [r3, #20]
 8002372:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002376:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800237a:	d102      	bne.n	8002382 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d1f2      	bne.n	8002368 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002382:	4b10      	ldr	r3, [pc, #64]	; (80023c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002384:	695b      	ldr	r3, [r3, #20]
 8002386:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800238a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800238e:	d112      	bne.n	80023b6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002390:	2303      	movs	r3, #3
 8002392:	e011      	b.n	80023b8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002394:	4b0b      	ldr	r3, [pc, #44]	; (80023c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002396:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800239a:	4a0a      	ldr	r2, [pc, #40]	; (80023c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800239c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023a0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80023a4:	e007      	b.n	80023b6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80023a6:	4b07      	ldr	r3, [pc, #28]	; (80023c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80023ae:	4a05      	ldr	r2, [pc, #20]	; (80023c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023b0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80023b4:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80023b6:	2300      	movs	r3, #0
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	3714      	adds	r7, #20
 80023bc:	46bd      	mov	sp, r7
 80023be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c2:	4770      	bx	lr
 80023c4:	40007000 	.word	0x40007000
 80023c8:	20000000 	.word	0x20000000
 80023cc:	431bde83 	.word	0x431bde83

080023d0 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80023d0:	b480      	push	{r7}
 80023d2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80023d4:	4b05      	ldr	r3, [pc, #20]	; (80023ec <HAL_PWREx_EnableVddUSB+0x1c>)
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	4a04      	ldr	r2, [pc, #16]	; (80023ec <HAL_PWREx_EnableVddUSB+0x1c>)
 80023da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80023de:	6053      	str	r3, [r2, #4]
}
 80023e0:	bf00      	nop
 80023e2:	46bd      	mov	sp, r7
 80023e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e8:	4770      	bx	lr
 80023ea:	bf00      	nop
 80023ec:	40007000 	.word	0x40007000

080023f0 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80023f0:	b480      	push	{r7}
 80023f2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80023f4:	4b05      	ldr	r3, [pc, #20]	; (800240c <HAL_PWREx_EnableVddIO2+0x1c>)
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	4a04      	ldr	r2, [pc, #16]	; (800240c <HAL_PWREx_EnableVddIO2+0x1c>)
 80023fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80023fe:	6053      	str	r3, [r2, #4]
}
 8002400:	bf00      	nop
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr
 800240a:	bf00      	nop
 800240c:	40007000 	.word	0x40007000

08002410 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b088      	sub	sp, #32
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d102      	bne.n	8002424 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	f000 bc08 	b.w	8002c34 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002424:	4b96      	ldr	r3, [pc, #600]	; (8002680 <HAL_RCC_OscConfig+0x270>)
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	f003 030c 	and.w	r3, r3, #12
 800242c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800242e:	4b94      	ldr	r3, [pc, #592]	; (8002680 <HAL_RCC_OscConfig+0x270>)
 8002430:	68db      	ldr	r3, [r3, #12]
 8002432:	f003 0303 	and.w	r3, r3, #3
 8002436:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f003 0310 	and.w	r3, r3, #16
 8002440:	2b00      	cmp	r3, #0
 8002442:	f000 80e4 	beq.w	800260e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002446:	69bb      	ldr	r3, [r7, #24]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d007      	beq.n	800245c <HAL_RCC_OscConfig+0x4c>
 800244c:	69bb      	ldr	r3, [r7, #24]
 800244e:	2b0c      	cmp	r3, #12
 8002450:	f040 808b 	bne.w	800256a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	2b01      	cmp	r3, #1
 8002458:	f040 8087 	bne.w	800256a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800245c:	4b88      	ldr	r3, [pc, #544]	; (8002680 <HAL_RCC_OscConfig+0x270>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f003 0302 	and.w	r3, r3, #2
 8002464:	2b00      	cmp	r3, #0
 8002466:	d005      	beq.n	8002474 <HAL_RCC_OscConfig+0x64>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	699b      	ldr	r3, [r3, #24]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d101      	bne.n	8002474 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002470:	2301      	movs	r3, #1
 8002472:	e3df      	b.n	8002c34 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6a1a      	ldr	r2, [r3, #32]
 8002478:	4b81      	ldr	r3, [pc, #516]	; (8002680 <HAL_RCC_OscConfig+0x270>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f003 0308 	and.w	r3, r3, #8
 8002480:	2b00      	cmp	r3, #0
 8002482:	d004      	beq.n	800248e <HAL_RCC_OscConfig+0x7e>
 8002484:	4b7e      	ldr	r3, [pc, #504]	; (8002680 <HAL_RCC_OscConfig+0x270>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800248c:	e005      	b.n	800249a <HAL_RCC_OscConfig+0x8a>
 800248e:	4b7c      	ldr	r3, [pc, #496]	; (8002680 <HAL_RCC_OscConfig+0x270>)
 8002490:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002494:	091b      	lsrs	r3, r3, #4
 8002496:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800249a:	4293      	cmp	r3, r2
 800249c:	d223      	bcs.n	80024e6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6a1b      	ldr	r3, [r3, #32]
 80024a2:	4618      	mov	r0, r3
 80024a4:	f000 fdca 	bl	800303c <RCC_SetFlashLatencyFromMSIRange>
 80024a8:	4603      	mov	r3, r0
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d001      	beq.n	80024b2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	e3c0      	b.n	8002c34 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80024b2:	4b73      	ldr	r3, [pc, #460]	; (8002680 <HAL_RCC_OscConfig+0x270>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a72      	ldr	r2, [pc, #456]	; (8002680 <HAL_RCC_OscConfig+0x270>)
 80024b8:	f043 0308 	orr.w	r3, r3, #8
 80024bc:	6013      	str	r3, [r2, #0]
 80024be:	4b70      	ldr	r3, [pc, #448]	; (8002680 <HAL_RCC_OscConfig+0x270>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6a1b      	ldr	r3, [r3, #32]
 80024ca:	496d      	ldr	r1, [pc, #436]	; (8002680 <HAL_RCC_OscConfig+0x270>)
 80024cc:	4313      	orrs	r3, r2
 80024ce:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80024d0:	4b6b      	ldr	r3, [pc, #428]	; (8002680 <HAL_RCC_OscConfig+0x270>)
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	69db      	ldr	r3, [r3, #28]
 80024dc:	021b      	lsls	r3, r3, #8
 80024de:	4968      	ldr	r1, [pc, #416]	; (8002680 <HAL_RCC_OscConfig+0x270>)
 80024e0:	4313      	orrs	r3, r2
 80024e2:	604b      	str	r3, [r1, #4]
 80024e4:	e025      	b.n	8002532 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80024e6:	4b66      	ldr	r3, [pc, #408]	; (8002680 <HAL_RCC_OscConfig+0x270>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a65      	ldr	r2, [pc, #404]	; (8002680 <HAL_RCC_OscConfig+0x270>)
 80024ec:	f043 0308 	orr.w	r3, r3, #8
 80024f0:	6013      	str	r3, [r2, #0]
 80024f2:	4b63      	ldr	r3, [pc, #396]	; (8002680 <HAL_RCC_OscConfig+0x270>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6a1b      	ldr	r3, [r3, #32]
 80024fe:	4960      	ldr	r1, [pc, #384]	; (8002680 <HAL_RCC_OscConfig+0x270>)
 8002500:	4313      	orrs	r3, r2
 8002502:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002504:	4b5e      	ldr	r3, [pc, #376]	; (8002680 <HAL_RCC_OscConfig+0x270>)
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	69db      	ldr	r3, [r3, #28]
 8002510:	021b      	lsls	r3, r3, #8
 8002512:	495b      	ldr	r1, [pc, #364]	; (8002680 <HAL_RCC_OscConfig+0x270>)
 8002514:	4313      	orrs	r3, r2
 8002516:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002518:	69bb      	ldr	r3, [r7, #24]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d109      	bne.n	8002532 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6a1b      	ldr	r3, [r3, #32]
 8002522:	4618      	mov	r0, r3
 8002524:	f000 fd8a 	bl	800303c <RCC_SetFlashLatencyFromMSIRange>
 8002528:	4603      	mov	r3, r0
 800252a:	2b00      	cmp	r3, #0
 800252c:	d001      	beq.n	8002532 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	e380      	b.n	8002c34 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002532:	f000 fcc1 	bl	8002eb8 <HAL_RCC_GetSysClockFreq>
 8002536:	4602      	mov	r2, r0
 8002538:	4b51      	ldr	r3, [pc, #324]	; (8002680 <HAL_RCC_OscConfig+0x270>)
 800253a:	689b      	ldr	r3, [r3, #8]
 800253c:	091b      	lsrs	r3, r3, #4
 800253e:	f003 030f 	and.w	r3, r3, #15
 8002542:	4950      	ldr	r1, [pc, #320]	; (8002684 <HAL_RCC_OscConfig+0x274>)
 8002544:	5ccb      	ldrb	r3, [r1, r3]
 8002546:	f003 031f 	and.w	r3, r3, #31
 800254a:	fa22 f303 	lsr.w	r3, r2, r3
 800254e:	4a4e      	ldr	r2, [pc, #312]	; (8002688 <HAL_RCC_OscConfig+0x278>)
 8002550:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002552:	4b4e      	ldr	r3, [pc, #312]	; (800268c <HAL_RCC_OscConfig+0x27c>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4618      	mov	r0, r3
 8002558:	f7ff f8f8 	bl	800174c <HAL_InitTick>
 800255c:	4603      	mov	r3, r0
 800255e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002560:	7bfb      	ldrb	r3, [r7, #15]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d052      	beq.n	800260c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002566:	7bfb      	ldrb	r3, [r7, #15]
 8002568:	e364      	b.n	8002c34 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	699b      	ldr	r3, [r3, #24]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d032      	beq.n	80025d8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002572:	4b43      	ldr	r3, [pc, #268]	; (8002680 <HAL_RCC_OscConfig+0x270>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4a42      	ldr	r2, [pc, #264]	; (8002680 <HAL_RCC_OscConfig+0x270>)
 8002578:	f043 0301 	orr.w	r3, r3, #1
 800257c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800257e:	f7ff f935 	bl	80017ec <HAL_GetTick>
 8002582:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002584:	e008      	b.n	8002598 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002586:	f7ff f931 	bl	80017ec <HAL_GetTick>
 800258a:	4602      	mov	r2, r0
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	1ad3      	subs	r3, r2, r3
 8002590:	2b02      	cmp	r3, #2
 8002592:	d901      	bls.n	8002598 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002594:	2303      	movs	r3, #3
 8002596:	e34d      	b.n	8002c34 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002598:	4b39      	ldr	r3, [pc, #228]	; (8002680 <HAL_RCC_OscConfig+0x270>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f003 0302 	and.w	r3, r3, #2
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d0f0      	beq.n	8002586 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80025a4:	4b36      	ldr	r3, [pc, #216]	; (8002680 <HAL_RCC_OscConfig+0x270>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a35      	ldr	r2, [pc, #212]	; (8002680 <HAL_RCC_OscConfig+0x270>)
 80025aa:	f043 0308 	orr.w	r3, r3, #8
 80025ae:	6013      	str	r3, [r2, #0]
 80025b0:	4b33      	ldr	r3, [pc, #204]	; (8002680 <HAL_RCC_OscConfig+0x270>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6a1b      	ldr	r3, [r3, #32]
 80025bc:	4930      	ldr	r1, [pc, #192]	; (8002680 <HAL_RCC_OscConfig+0x270>)
 80025be:	4313      	orrs	r3, r2
 80025c0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80025c2:	4b2f      	ldr	r3, [pc, #188]	; (8002680 <HAL_RCC_OscConfig+0x270>)
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	69db      	ldr	r3, [r3, #28]
 80025ce:	021b      	lsls	r3, r3, #8
 80025d0:	492b      	ldr	r1, [pc, #172]	; (8002680 <HAL_RCC_OscConfig+0x270>)
 80025d2:	4313      	orrs	r3, r2
 80025d4:	604b      	str	r3, [r1, #4]
 80025d6:	e01a      	b.n	800260e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80025d8:	4b29      	ldr	r3, [pc, #164]	; (8002680 <HAL_RCC_OscConfig+0x270>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a28      	ldr	r2, [pc, #160]	; (8002680 <HAL_RCC_OscConfig+0x270>)
 80025de:	f023 0301 	bic.w	r3, r3, #1
 80025e2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80025e4:	f7ff f902 	bl	80017ec <HAL_GetTick>
 80025e8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80025ea:	e008      	b.n	80025fe <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80025ec:	f7ff f8fe 	bl	80017ec <HAL_GetTick>
 80025f0:	4602      	mov	r2, r0
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	1ad3      	subs	r3, r2, r3
 80025f6:	2b02      	cmp	r3, #2
 80025f8:	d901      	bls.n	80025fe <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80025fa:	2303      	movs	r3, #3
 80025fc:	e31a      	b.n	8002c34 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80025fe:	4b20      	ldr	r3, [pc, #128]	; (8002680 <HAL_RCC_OscConfig+0x270>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f003 0302 	and.w	r3, r3, #2
 8002606:	2b00      	cmp	r3, #0
 8002608:	d1f0      	bne.n	80025ec <HAL_RCC_OscConfig+0x1dc>
 800260a:	e000      	b.n	800260e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800260c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f003 0301 	and.w	r3, r3, #1
 8002616:	2b00      	cmp	r3, #0
 8002618:	d073      	beq.n	8002702 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800261a:	69bb      	ldr	r3, [r7, #24]
 800261c:	2b08      	cmp	r3, #8
 800261e:	d005      	beq.n	800262c <HAL_RCC_OscConfig+0x21c>
 8002620:	69bb      	ldr	r3, [r7, #24]
 8002622:	2b0c      	cmp	r3, #12
 8002624:	d10e      	bne.n	8002644 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	2b03      	cmp	r3, #3
 800262a:	d10b      	bne.n	8002644 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800262c:	4b14      	ldr	r3, [pc, #80]	; (8002680 <HAL_RCC_OscConfig+0x270>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002634:	2b00      	cmp	r3, #0
 8002636:	d063      	beq.n	8002700 <HAL_RCC_OscConfig+0x2f0>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d15f      	bne.n	8002700 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	e2f7      	b.n	8002c34 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800264c:	d106      	bne.n	800265c <HAL_RCC_OscConfig+0x24c>
 800264e:	4b0c      	ldr	r3, [pc, #48]	; (8002680 <HAL_RCC_OscConfig+0x270>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a0b      	ldr	r2, [pc, #44]	; (8002680 <HAL_RCC_OscConfig+0x270>)
 8002654:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002658:	6013      	str	r3, [r2, #0]
 800265a:	e025      	b.n	80026a8 <HAL_RCC_OscConfig+0x298>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002664:	d114      	bne.n	8002690 <HAL_RCC_OscConfig+0x280>
 8002666:	4b06      	ldr	r3, [pc, #24]	; (8002680 <HAL_RCC_OscConfig+0x270>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a05      	ldr	r2, [pc, #20]	; (8002680 <HAL_RCC_OscConfig+0x270>)
 800266c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002670:	6013      	str	r3, [r2, #0]
 8002672:	4b03      	ldr	r3, [pc, #12]	; (8002680 <HAL_RCC_OscConfig+0x270>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a02      	ldr	r2, [pc, #8]	; (8002680 <HAL_RCC_OscConfig+0x270>)
 8002678:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800267c:	6013      	str	r3, [r2, #0]
 800267e:	e013      	b.n	80026a8 <HAL_RCC_OscConfig+0x298>
 8002680:	40021000 	.word	0x40021000
 8002684:	08008340 	.word	0x08008340
 8002688:	20000000 	.word	0x20000000
 800268c:	20000004 	.word	0x20000004
 8002690:	4ba0      	ldr	r3, [pc, #640]	; (8002914 <HAL_RCC_OscConfig+0x504>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a9f      	ldr	r2, [pc, #636]	; (8002914 <HAL_RCC_OscConfig+0x504>)
 8002696:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800269a:	6013      	str	r3, [r2, #0]
 800269c:	4b9d      	ldr	r3, [pc, #628]	; (8002914 <HAL_RCC_OscConfig+0x504>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a9c      	ldr	r2, [pc, #624]	; (8002914 <HAL_RCC_OscConfig+0x504>)
 80026a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d013      	beq.n	80026d8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026b0:	f7ff f89c 	bl	80017ec <HAL_GetTick>
 80026b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026b6:	e008      	b.n	80026ca <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026b8:	f7ff f898 	bl	80017ec <HAL_GetTick>
 80026bc:	4602      	mov	r2, r0
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	1ad3      	subs	r3, r2, r3
 80026c2:	2b64      	cmp	r3, #100	; 0x64
 80026c4:	d901      	bls.n	80026ca <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80026c6:	2303      	movs	r3, #3
 80026c8:	e2b4      	b.n	8002c34 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026ca:	4b92      	ldr	r3, [pc, #584]	; (8002914 <HAL_RCC_OscConfig+0x504>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d0f0      	beq.n	80026b8 <HAL_RCC_OscConfig+0x2a8>
 80026d6:	e014      	b.n	8002702 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026d8:	f7ff f888 	bl	80017ec <HAL_GetTick>
 80026dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80026de:	e008      	b.n	80026f2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026e0:	f7ff f884 	bl	80017ec <HAL_GetTick>
 80026e4:	4602      	mov	r2, r0
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	1ad3      	subs	r3, r2, r3
 80026ea:	2b64      	cmp	r3, #100	; 0x64
 80026ec:	d901      	bls.n	80026f2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80026ee:	2303      	movs	r3, #3
 80026f0:	e2a0      	b.n	8002c34 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80026f2:	4b88      	ldr	r3, [pc, #544]	; (8002914 <HAL_RCC_OscConfig+0x504>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d1f0      	bne.n	80026e0 <HAL_RCC_OscConfig+0x2d0>
 80026fe:	e000      	b.n	8002702 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002700:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f003 0302 	and.w	r3, r3, #2
 800270a:	2b00      	cmp	r3, #0
 800270c:	d060      	beq.n	80027d0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800270e:	69bb      	ldr	r3, [r7, #24]
 8002710:	2b04      	cmp	r3, #4
 8002712:	d005      	beq.n	8002720 <HAL_RCC_OscConfig+0x310>
 8002714:	69bb      	ldr	r3, [r7, #24]
 8002716:	2b0c      	cmp	r3, #12
 8002718:	d119      	bne.n	800274e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	2b02      	cmp	r3, #2
 800271e:	d116      	bne.n	800274e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002720:	4b7c      	ldr	r3, [pc, #496]	; (8002914 <HAL_RCC_OscConfig+0x504>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002728:	2b00      	cmp	r3, #0
 800272a:	d005      	beq.n	8002738 <HAL_RCC_OscConfig+0x328>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	68db      	ldr	r3, [r3, #12]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d101      	bne.n	8002738 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002734:	2301      	movs	r3, #1
 8002736:	e27d      	b.n	8002c34 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002738:	4b76      	ldr	r3, [pc, #472]	; (8002914 <HAL_RCC_OscConfig+0x504>)
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	691b      	ldr	r3, [r3, #16]
 8002744:	061b      	lsls	r3, r3, #24
 8002746:	4973      	ldr	r1, [pc, #460]	; (8002914 <HAL_RCC_OscConfig+0x504>)
 8002748:	4313      	orrs	r3, r2
 800274a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800274c:	e040      	b.n	80027d0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	68db      	ldr	r3, [r3, #12]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d023      	beq.n	800279e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002756:	4b6f      	ldr	r3, [pc, #444]	; (8002914 <HAL_RCC_OscConfig+0x504>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a6e      	ldr	r2, [pc, #440]	; (8002914 <HAL_RCC_OscConfig+0x504>)
 800275c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002760:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002762:	f7ff f843 	bl	80017ec <HAL_GetTick>
 8002766:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002768:	e008      	b.n	800277c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800276a:	f7ff f83f 	bl	80017ec <HAL_GetTick>
 800276e:	4602      	mov	r2, r0
 8002770:	693b      	ldr	r3, [r7, #16]
 8002772:	1ad3      	subs	r3, r2, r3
 8002774:	2b02      	cmp	r3, #2
 8002776:	d901      	bls.n	800277c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002778:	2303      	movs	r3, #3
 800277a:	e25b      	b.n	8002c34 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800277c:	4b65      	ldr	r3, [pc, #404]	; (8002914 <HAL_RCC_OscConfig+0x504>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002784:	2b00      	cmp	r3, #0
 8002786:	d0f0      	beq.n	800276a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002788:	4b62      	ldr	r3, [pc, #392]	; (8002914 <HAL_RCC_OscConfig+0x504>)
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	691b      	ldr	r3, [r3, #16]
 8002794:	061b      	lsls	r3, r3, #24
 8002796:	495f      	ldr	r1, [pc, #380]	; (8002914 <HAL_RCC_OscConfig+0x504>)
 8002798:	4313      	orrs	r3, r2
 800279a:	604b      	str	r3, [r1, #4]
 800279c:	e018      	b.n	80027d0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800279e:	4b5d      	ldr	r3, [pc, #372]	; (8002914 <HAL_RCC_OscConfig+0x504>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a5c      	ldr	r2, [pc, #368]	; (8002914 <HAL_RCC_OscConfig+0x504>)
 80027a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80027a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027aa:	f7ff f81f 	bl	80017ec <HAL_GetTick>
 80027ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80027b0:	e008      	b.n	80027c4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027b2:	f7ff f81b 	bl	80017ec <HAL_GetTick>
 80027b6:	4602      	mov	r2, r0
 80027b8:	693b      	ldr	r3, [r7, #16]
 80027ba:	1ad3      	subs	r3, r2, r3
 80027bc:	2b02      	cmp	r3, #2
 80027be:	d901      	bls.n	80027c4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80027c0:	2303      	movs	r3, #3
 80027c2:	e237      	b.n	8002c34 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80027c4:	4b53      	ldr	r3, [pc, #332]	; (8002914 <HAL_RCC_OscConfig+0x504>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d1f0      	bne.n	80027b2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f003 0308 	and.w	r3, r3, #8
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d03c      	beq.n	8002856 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	695b      	ldr	r3, [r3, #20]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d01c      	beq.n	800281e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027e4:	4b4b      	ldr	r3, [pc, #300]	; (8002914 <HAL_RCC_OscConfig+0x504>)
 80027e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027ea:	4a4a      	ldr	r2, [pc, #296]	; (8002914 <HAL_RCC_OscConfig+0x504>)
 80027ec:	f043 0301 	orr.w	r3, r3, #1
 80027f0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027f4:	f7fe fffa 	bl	80017ec <HAL_GetTick>
 80027f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80027fa:	e008      	b.n	800280e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027fc:	f7fe fff6 	bl	80017ec <HAL_GetTick>
 8002800:	4602      	mov	r2, r0
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	1ad3      	subs	r3, r2, r3
 8002806:	2b02      	cmp	r3, #2
 8002808:	d901      	bls.n	800280e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800280a:	2303      	movs	r3, #3
 800280c:	e212      	b.n	8002c34 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800280e:	4b41      	ldr	r3, [pc, #260]	; (8002914 <HAL_RCC_OscConfig+0x504>)
 8002810:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002814:	f003 0302 	and.w	r3, r3, #2
 8002818:	2b00      	cmp	r3, #0
 800281a:	d0ef      	beq.n	80027fc <HAL_RCC_OscConfig+0x3ec>
 800281c:	e01b      	b.n	8002856 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800281e:	4b3d      	ldr	r3, [pc, #244]	; (8002914 <HAL_RCC_OscConfig+0x504>)
 8002820:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002824:	4a3b      	ldr	r2, [pc, #236]	; (8002914 <HAL_RCC_OscConfig+0x504>)
 8002826:	f023 0301 	bic.w	r3, r3, #1
 800282a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800282e:	f7fe ffdd 	bl	80017ec <HAL_GetTick>
 8002832:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002834:	e008      	b.n	8002848 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002836:	f7fe ffd9 	bl	80017ec <HAL_GetTick>
 800283a:	4602      	mov	r2, r0
 800283c:	693b      	ldr	r3, [r7, #16]
 800283e:	1ad3      	subs	r3, r2, r3
 8002840:	2b02      	cmp	r3, #2
 8002842:	d901      	bls.n	8002848 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002844:	2303      	movs	r3, #3
 8002846:	e1f5      	b.n	8002c34 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002848:	4b32      	ldr	r3, [pc, #200]	; (8002914 <HAL_RCC_OscConfig+0x504>)
 800284a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800284e:	f003 0302 	and.w	r3, r3, #2
 8002852:	2b00      	cmp	r3, #0
 8002854:	d1ef      	bne.n	8002836 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f003 0304 	and.w	r3, r3, #4
 800285e:	2b00      	cmp	r3, #0
 8002860:	f000 80a6 	beq.w	80029b0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002864:	2300      	movs	r3, #0
 8002866:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002868:	4b2a      	ldr	r3, [pc, #168]	; (8002914 <HAL_RCC_OscConfig+0x504>)
 800286a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800286c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002870:	2b00      	cmp	r3, #0
 8002872:	d10d      	bne.n	8002890 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002874:	4b27      	ldr	r3, [pc, #156]	; (8002914 <HAL_RCC_OscConfig+0x504>)
 8002876:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002878:	4a26      	ldr	r2, [pc, #152]	; (8002914 <HAL_RCC_OscConfig+0x504>)
 800287a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800287e:	6593      	str	r3, [r2, #88]	; 0x58
 8002880:	4b24      	ldr	r3, [pc, #144]	; (8002914 <HAL_RCC_OscConfig+0x504>)
 8002882:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002884:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002888:	60bb      	str	r3, [r7, #8]
 800288a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800288c:	2301      	movs	r3, #1
 800288e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002890:	4b21      	ldr	r3, [pc, #132]	; (8002918 <HAL_RCC_OscConfig+0x508>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002898:	2b00      	cmp	r3, #0
 800289a:	d118      	bne.n	80028ce <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800289c:	4b1e      	ldr	r3, [pc, #120]	; (8002918 <HAL_RCC_OscConfig+0x508>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a1d      	ldr	r2, [pc, #116]	; (8002918 <HAL_RCC_OscConfig+0x508>)
 80028a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028a6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028a8:	f7fe ffa0 	bl	80017ec <HAL_GetTick>
 80028ac:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80028ae:	e008      	b.n	80028c2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028b0:	f7fe ff9c 	bl	80017ec <HAL_GetTick>
 80028b4:	4602      	mov	r2, r0
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	1ad3      	subs	r3, r2, r3
 80028ba:	2b02      	cmp	r3, #2
 80028bc:	d901      	bls.n	80028c2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80028be:	2303      	movs	r3, #3
 80028c0:	e1b8      	b.n	8002c34 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80028c2:	4b15      	ldr	r3, [pc, #84]	; (8002918 <HAL_RCC_OscConfig+0x508>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d0f0      	beq.n	80028b0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	689b      	ldr	r3, [r3, #8]
 80028d2:	2b01      	cmp	r3, #1
 80028d4:	d108      	bne.n	80028e8 <HAL_RCC_OscConfig+0x4d8>
 80028d6:	4b0f      	ldr	r3, [pc, #60]	; (8002914 <HAL_RCC_OscConfig+0x504>)
 80028d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028dc:	4a0d      	ldr	r2, [pc, #52]	; (8002914 <HAL_RCC_OscConfig+0x504>)
 80028de:	f043 0301 	orr.w	r3, r3, #1
 80028e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80028e6:	e029      	b.n	800293c <HAL_RCC_OscConfig+0x52c>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	2b05      	cmp	r3, #5
 80028ee:	d115      	bne.n	800291c <HAL_RCC_OscConfig+0x50c>
 80028f0:	4b08      	ldr	r3, [pc, #32]	; (8002914 <HAL_RCC_OscConfig+0x504>)
 80028f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028f6:	4a07      	ldr	r2, [pc, #28]	; (8002914 <HAL_RCC_OscConfig+0x504>)
 80028f8:	f043 0304 	orr.w	r3, r3, #4
 80028fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002900:	4b04      	ldr	r3, [pc, #16]	; (8002914 <HAL_RCC_OscConfig+0x504>)
 8002902:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002906:	4a03      	ldr	r2, [pc, #12]	; (8002914 <HAL_RCC_OscConfig+0x504>)
 8002908:	f043 0301 	orr.w	r3, r3, #1
 800290c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002910:	e014      	b.n	800293c <HAL_RCC_OscConfig+0x52c>
 8002912:	bf00      	nop
 8002914:	40021000 	.word	0x40021000
 8002918:	40007000 	.word	0x40007000
 800291c:	4b9d      	ldr	r3, [pc, #628]	; (8002b94 <HAL_RCC_OscConfig+0x784>)
 800291e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002922:	4a9c      	ldr	r2, [pc, #624]	; (8002b94 <HAL_RCC_OscConfig+0x784>)
 8002924:	f023 0301 	bic.w	r3, r3, #1
 8002928:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800292c:	4b99      	ldr	r3, [pc, #612]	; (8002b94 <HAL_RCC_OscConfig+0x784>)
 800292e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002932:	4a98      	ldr	r2, [pc, #608]	; (8002b94 <HAL_RCC_OscConfig+0x784>)
 8002934:	f023 0304 	bic.w	r3, r3, #4
 8002938:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d016      	beq.n	8002972 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002944:	f7fe ff52 	bl	80017ec <HAL_GetTick>
 8002948:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800294a:	e00a      	b.n	8002962 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800294c:	f7fe ff4e 	bl	80017ec <HAL_GetTick>
 8002950:	4602      	mov	r2, r0
 8002952:	693b      	ldr	r3, [r7, #16]
 8002954:	1ad3      	subs	r3, r2, r3
 8002956:	f241 3288 	movw	r2, #5000	; 0x1388
 800295a:	4293      	cmp	r3, r2
 800295c:	d901      	bls.n	8002962 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800295e:	2303      	movs	r3, #3
 8002960:	e168      	b.n	8002c34 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002962:	4b8c      	ldr	r3, [pc, #560]	; (8002b94 <HAL_RCC_OscConfig+0x784>)
 8002964:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002968:	f003 0302 	and.w	r3, r3, #2
 800296c:	2b00      	cmp	r3, #0
 800296e:	d0ed      	beq.n	800294c <HAL_RCC_OscConfig+0x53c>
 8002970:	e015      	b.n	800299e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002972:	f7fe ff3b 	bl	80017ec <HAL_GetTick>
 8002976:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002978:	e00a      	b.n	8002990 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800297a:	f7fe ff37 	bl	80017ec <HAL_GetTick>
 800297e:	4602      	mov	r2, r0
 8002980:	693b      	ldr	r3, [r7, #16]
 8002982:	1ad3      	subs	r3, r2, r3
 8002984:	f241 3288 	movw	r2, #5000	; 0x1388
 8002988:	4293      	cmp	r3, r2
 800298a:	d901      	bls.n	8002990 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800298c:	2303      	movs	r3, #3
 800298e:	e151      	b.n	8002c34 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002990:	4b80      	ldr	r3, [pc, #512]	; (8002b94 <HAL_RCC_OscConfig+0x784>)
 8002992:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002996:	f003 0302 	and.w	r3, r3, #2
 800299a:	2b00      	cmp	r3, #0
 800299c:	d1ed      	bne.n	800297a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800299e:	7ffb      	ldrb	r3, [r7, #31]
 80029a0:	2b01      	cmp	r3, #1
 80029a2:	d105      	bne.n	80029b0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029a4:	4b7b      	ldr	r3, [pc, #492]	; (8002b94 <HAL_RCC_OscConfig+0x784>)
 80029a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029a8:	4a7a      	ldr	r2, [pc, #488]	; (8002b94 <HAL_RCC_OscConfig+0x784>)
 80029aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029ae:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f003 0320 	and.w	r3, r3, #32
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d03c      	beq.n	8002a36 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d01c      	beq.n	80029fe <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80029c4:	4b73      	ldr	r3, [pc, #460]	; (8002b94 <HAL_RCC_OscConfig+0x784>)
 80029c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80029ca:	4a72      	ldr	r2, [pc, #456]	; (8002b94 <HAL_RCC_OscConfig+0x784>)
 80029cc:	f043 0301 	orr.w	r3, r3, #1
 80029d0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029d4:	f7fe ff0a 	bl	80017ec <HAL_GetTick>
 80029d8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80029da:	e008      	b.n	80029ee <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80029dc:	f7fe ff06 	bl	80017ec <HAL_GetTick>
 80029e0:	4602      	mov	r2, r0
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	1ad3      	subs	r3, r2, r3
 80029e6:	2b02      	cmp	r3, #2
 80029e8:	d901      	bls.n	80029ee <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80029ea:	2303      	movs	r3, #3
 80029ec:	e122      	b.n	8002c34 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80029ee:	4b69      	ldr	r3, [pc, #420]	; (8002b94 <HAL_RCC_OscConfig+0x784>)
 80029f0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80029f4:	f003 0302 	and.w	r3, r3, #2
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d0ef      	beq.n	80029dc <HAL_RCC_OscConfig+0x5cc>
 80029fc:	e01b      	b.n	8002a36 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80029fe:	4b65      	ldr	r3, [pc, #404]	; (8002b94 <HAL_RCC_OscConfig+0x784>)
 8002a00:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002a04:	4a63      	ldr	r2, [pc, #396]	; (8002b94 <HAL_RCC_OscConfig+0x784>)
 8002a06:	f023 0301 	bic.w	r3, r3, #1
 8002a0a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a0e:	f7fe feed 	bl	80017ec <HAL_GetTick>
 8002a12:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002a14:	e008      	b.n	8002a28 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002a16:	f7fe fee9 	bl	80017ec <HAL_GetTick>
 8002a1a:	4602      	mov	r2, r0
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	1ad3      	subs	r3, r2, r3
 8002a20:	2b02      	cmp	r3, #2
 8002a22:	d901      	bls.n	8002a28 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002a24:	2303      	movs	r3, #3
 8002a26:	e105      	b.n	8002c34 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002a28:	4b5a      	ldr	r3, [pc, #360]	; (8002b94 <HAL_RCC_OscConfig+0x784>)
 8002a2a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002a2e:	f003 0302 	and.w	r3, r3, #2
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d1ef      	bne.n	8002a16 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	f000 80f9 	beq.w	8002c32 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a44:	2b02      	cmp	r3, #2
 8002a46:	f040 80cf 	bne.w	8002be8 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002a4a:	4b52      	ldr	r3, [pc, #328]	; (8002b94 <HAL_RCC_OscConfig+0x784>)
 8002a4c:	68db      	ldr	r3, [r3, #12]
 8002a4e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	f003 0203 	and.w	r2, r3, #3
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a5a:	429a      	cmp	r2, r3
 8002a5c:	d12c      	bne.n	8002ab8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002a5e:	697b      	ldr	r3, [r7, #20]
 8002a60:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a68:	3b01      	subs	r3, #1
 8002a6a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a6c:	429a      	cmp	r2, r3
 8002a6e:	d123      	bne.n	8002ab8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a7a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002a7c:	429a      	cmp	r2, r3
 8002a7e:	d11b      	bne.n	8002ab8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002a80:	697b      	ldr	r3, [r7, #20]
 8002a82:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a8a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a8c:	429a      	cmp	r2, r3
 8002a8e:	d113      	bne.n	8002ab8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a90:	697b      	ldr	r3, [r7, #20]
 8002a92:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a9a:	085b      	lsrs	r3, r3, #1
 8002a9c:	3b01      	subs	r3, #1
 8002a9e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	d109      	bne.n	8002ab8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aae:	085b      	lsrs	r3, r3, #1
 8002ab0:	3b01      	subs	r3, #1
 8002ab2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ab4:	429a      	cmp	r2, r3
 8002ab6:	d071      	beq.n	8002b9c <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002ab8:	69bb      	ldr	r3, [r7, #24]
 8002aba:	2b0c      	cmp	r3, #12
 8002abc:	d068      	beq.n	8002b90 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002abe:	4b35      	ldr	r3, [pc, #212]	; (8002b94 <HAL_RCC_OscConfig+0x784>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d105      	bne.n	8002ad6 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002aca:	4b32      	ldr	r3, [pc, #200]	; (8002b94 <HAL_RCC_OscConfig+0x784>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d001      	beq.n	8002ada <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e0ac      	b.n	8002c34 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002ada:	4b2e      	ldr	r3, [pc, #184]	; (8002b94 <HAL_RCC_OscConfig+0x784>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a2d      	ldr	r2, [pc, #180]	; (8002b94 <HAL_RCC_OscConfig+0x784>)
 8002ae0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ae4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002ae6:	f7fe fe81 	bl	80017ec <HAL_GetTick>
 8002aea:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002aec:	e008      	b.n	8002b00 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002aee:	f7fe fe7d 	bl	80017ec <HAL_GetTick>
 8002af2:	4602      	mov	r2, r0
 8002af4:	693b      	ldr	r3, [r7, #16]
 8002af6:	1ad3      	subs	r3, r2, r3
 8002af8:	2b02      	cmp	r3, #2
 8002afa:	d901      	bls.n	8002b00 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8002afc:	2303      	movs	r3, #3
 8002afe:	e099      	b.n	8002c34 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b00:	4b24      	ldr	r3, [pc, #144]	; (8002b94 <HAL_RCC_OscConfig+0x784>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d1f0      	bne.n	8002aee <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b0c:	4b21      	ldr	r3, [pc, #132]	; (8002b94 <HAL_RCC_OscConfig+0x784>)
 8002b0e:	68da      	ldr	r2, [r3, #12]
 8002b10:	4b21      	ldr	r3, [pc, #132]	; (8002b98 <HAL_RCC_OscConfig+0x788>)
 8002b12:	4013      	ands	r3, r2
 8002b14:	687a      	ldr	r2, [r7, #4]
 8002b16:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002b18:	687a      	ldr	r2, [r7, #4]
 8002b1a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002b1c:	3a01      	subs	r2, #1
 8002b1e:	0112      	lsls	r2, r2, #4
 8002b20:	4311      	orrs	r1, r2
 8002b22:	687a      	ldr	r2, [r7, #4]
 8002b24:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002b26:	0212      	lsls	r2, r2, #8
 8002b28:	4311      	orrs	r1, r2
 8002b2a:	687a      	ldr	r2, [r7, #4]
 8002b2c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002b2e:	0852      	lsrs	r2, r2, #1
 8002b30:	3a01      	subs	r2, #1
 8002b32:	0552      	lsls	r2, r2, #21
 8002b34:	4311      	orrs	r1, r2
 8002b36:	687a      	ldr	r2, [r7, #4]
 8002b38:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002b3a:	0852      	lsrs	r2, r2, #1
 8002b3c:	3a01      	subs	r2, #1
 8002b3e:	0652      	lsls	r2, r2, #25
 8002b40:	4311      	orrs	r1, r2
 8002b42:	687a      	ldr	r2, [r7, #4]
 8002b44:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002b46:	06d2      	lsls	r2, r2, #27
 8002b48:	430a      	orrs	r2, r1
 8002b4a:	4912      	ldr	r1, [pc, #72]	; (8002b94 <HAL_RCC_OscConfig+0x784>)
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002b50:	4b10      	ldr	r3, [pc, #64]	; (8002b94 <HAL_RCC_OscConfig+0x784>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a0f      	ldr	r2, [pc, #60]	; (8002b94 <HAL_RCC_OscConfig+0x784>)
 8002b56:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b5a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002b5c:	4b0d      	ldr	r3, [pc, #52]	; (8002b94 <HAL_RCC_OscConfig+0x784>)
 8002b5e:	68db      	ldr	r3, [r3, #12]
 8002b60:	4a0c      	ldr	r2, [pc, #48]	; (8002b94 <HAL_RCC_OscConfig+0x784>)
 8002b62:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b66:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002b68:	f7fe fe40 	bl	80017ec <HAL_GetTick>
 8002b6c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b6e:	e008      	b.n	8002b82 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b70:	f7fe fe3c 	bl	80017ec <HAL_GetTick>
 8002b74:	4602      	mov	r2, r0
 8002b76:	693b      	ldr	r3, [r7, #16]
 8002b78:	1ad3      	subs	r3, r2, r3
 8002b7a:	2b02      	cmp	r3, #2
 8002b7c:	d901      	bls.n	8002b82 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8002b7e:	2303      	movs	r3, #3
 8002b80:	e058      	b.n	8002c34 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b82:	4b04      	ldr	r3, [pc, #16]	; (8002b94 <HAL_RCC_OscConfig+0x784>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d0f0      	beq.n	8002b70 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002b8e:	e050      	b.n	8002c32 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002b90:	2301      	movs	r3, #1
 8002b92:	e04f      	b.n	8002c34 <HAL_RCC_OscConfig+0x824>
 8002b94:	40021000 	.word	0x40021000
 8002b98:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b9c:	4b27      	ldr	r3, [pc, #156]	; (8002c3c <HAL_RCC_OscConfig+0x82c>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d144      	bne.n	8002c32 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002ba8:	4b24      	ldr	r3, [pc, #144]	; (8002c3c <HAL_RCC_OscConfig+0x82c>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a23      	ldr	r2, [pc, #140]	; (8002c3c <HAL_RCC_OscConfig+0x82c>)
 8002bae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002bb2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002bb4:	4b21      	ldr	r3, [pc, #132]	; (8002c3c <HAL_RCC_OscConfig+0x82c>)
 8002bb6:	68db      	ldr	r3, [r3, #12]
 8002bb8:	4a20      	ldr	r2, [pc, #128]	; (8002c3c <HAL_RCC_OscConfig+0x82c>)
 8002bba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002bbe:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002bc0:	f7fe fe14 	bl	80017ec <HAL_GetTick>
 8002bc4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bc6:	e008      	b.n	8002bda <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bc8:	f7fe fe10 	bl	80017ec <HAL_GetTick>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	693b      	ldr	r3, [r7, #16]
 8002bd0:	1ad3      	subs	r3, r2, r3
 8002bd2:	2b02      	cmp	r3, #2
 8002bd4:	d901      	bls.n	8002bda <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8002bd6:	2303      	movs	r3, #3
 8002bd8:	e02c      	b.n	8002c34 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bda:	4b18      	ldr	r3, [pc, #96]	; (8002c3c <HAL_RCC_OscConfig+0x82c>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d0f0      	beq.n	8002bc8 <HAL_RCC_OscConfig+0x7b8>
 8002be6:	e024      	b.n	8002c32 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002be8:	69bb      	ldr	r3, [r7, #24]
 8002bea:	2b0c      	cmp	r3, #12
 8002bec:	d01f      	beq.n	8002c2e <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bee:	4b13      	ldr	r3, [pc, #76]	; (8002c3c <HAL_RCC_OscConfig+0x82c>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a12      	ldr	r2, [pc, #72]	; (8002c3c <HAL_RCC_OscConfig+0x82c>)
 8002bf4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002bf8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bfa:	f7fe fdf7 	bl	80017ec <HAL_GetTick>
 8002bfe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c00:	e008      	b.n	8002c14 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c02:	f7fe fdf3 	bl	80017ec <HAL_GetTick>
 8002c06:	4602      	mov	r2, r0
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	1ad3      	subs	r3, r2, r3
 8002c0c:	2b02      	cmp	r3, #2
 8002c0e:	d901      	bls.n	8002c14 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8002c10:	2303      	movs	r3, #3
 8002c12:	e00f      	b.n	8002c34 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c14:	4b09      	ldr	r3, [pc, #36]	; (8002c3c <HAL_RCC_OscConfig+0x82c>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d1f0      	bne.n	8002c02 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002c20:	4b06      	ldr	r3, [pc, #24]	; (8002c3c <HAL_RCC_OscConfig+0x82c>)
 8002c22:	68da      	ldr	r2, [r3, #12]
 8002c24:	4905      	ldr	r1, [pc, #20]	; (8002c3c <HAL_RCC_OscConfig+0x82c>)
 8002c26:	4b06      	ldr	r3, [pc, #24]	; (8002c40 <HAL_RCC_OscConfig+0x830>)
 8002c28:	4013      	ands	r3, r2
 8002c2a:	60cb      	str	r3, [r1, #12]
 8002c2c:	e001      	b.n	8002c32 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e000      	b.n	8002c34 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8002c32:	2300      	movs	r3, #0
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	3720      	adds	r7, #32
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd80      	pop	{r7, pc}
 8002c3c:	40021000 	.word	0x40021000
 8002c40:	feeefffc 	.word	0xfeeefffc

08002c44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b086      	sub	sp, #24
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
 8002c4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d101      	bne.n	8002c5c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	e11d      	b.n	8002e98 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c5c:	4b90      	ldr	r3, [pc, #576]	; (8002ea0 <HAL_RCC_ClockConfig+0x25c>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f003 030f 	and.w	r3, r3, #15
 8002c64:	683a      	ldr	r2, [r7, #0]
 8002c66:	429a      	cmp	r2, r3
 8002c68:	d910      	bls.n	8002c8c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c6a:	4b8d      	ldr	r3, [pc, #564]	; (8002ea0 <HAL_RCC_ClockConfig+0x25c>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f023 020f 	bic.w	r2, r3, #15
 8002c72:	498b      	ldr	r1, [pc, #556]	; (8002ea0 <HAL_RCC_ClockConfig+0x25c>)
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	4313      	orrs	r3, r2
 8002c78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c7a:	4b89      	ldr	r3, [pc, #548]	; (8002ea0 <HAL_RCC_ClockConfig+0x25c>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f003 030f 	and.w	r3, r3, #15
 8002c82:	683a      	ldr	r2, [r7, #0]
 8002c84:	429a      	cmp	r2, r3
 8002c86:	d001      	beq.n	8002c8c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	e105      	b.n	8002e98 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f003 0302 	and.w	r3, r3, #2
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d010      	beq.n	8002cba <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	689a      	ldr	r2, [r3, #8]
 8002c9c:	4b81      	ldr	r3, [pc, #516]	; (8002ea4 <HAL_RCC_ClockConfig+0x260>)
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ca4:	429a      	cmp	r2, r3
 8002ca6:	d908      	bls.n	8002cba <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ca8:	4b7e      	ldr	r3, [pc, #504]	; (8002ea4 <HAL_RCC_ClockConfig+0x260>)
 8002caa:	689b      	ldr	r3, [r3, #8]
 8002cac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	497b      	ldr	r1, [pc, #492]	; (8002ea4 <HAL_RCC_ClockConfig+0x260>)
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f003 0301 	and.w	r3, r3, #1
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d079      	beq.n	8002dba <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	2b03      	cmp	r3, #3
 8002ccc:	d11e      	bne.n	8002d0c <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cce:	4b75      	ldr	r3, [pc, #468]	; (8002ea4 <HAL_RCC_ClockConfig+0x260>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d101      	bne.n	8002cde <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	e0dc      	b.n	8002e98 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8002cde:	f000 fa07 	bl	80030f0 <RCC_GetSysClockFreqFromPLLSource>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	4a70      	ldr	r2, [pc, #448]	; (8002ea8 <HAL_RCC_ClockConfig+0x264>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d946      	bls.n	8002d78 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002cea:	4b6e      	ldr	r3, [pc, #440]	; (8002ea4 <HAL_RCC_ClockConfig+0x260>)
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d140      	bne.n	8002d78 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002cf6:	4b6b      	ldr	r3, [pc, #428]	; (8002ea4 <HAL_RCC_ClockConfig+0x260>)
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002cfe:	4a69      	ldr	r2, [pc, #420]	; (8002ea4 <HAL_RCC_ClockConfig+0x260>)
 8002d00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d04:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002d06:	2380      	movs	r3, #128	; 0x80
 8002d08:	617b      	str	r3, [r7, #20]
 8002d0a:	e035      	b.n	8002d78 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	2b02      	cmp	r3, #2
 8002d12:	d107      	bne.n	8002d24 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d14:	4b63      	ldr	r3, [pc, #396]	; (8002ea4 <HAL_RCC_ClockConfig+0x260>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d115      	bne.n	8002d4c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002d20:	2301      	movs	r3, #1
 8002d22:	e0b9      	b.n	8002e98 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d107      	bne.n	8002d3c <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002d2c:	4b5d      	ldr	r3, [pc, #372]	; (8002ea4 <HAL_RCC_ClockConfig+0x260>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f003 0302 	and.w	r3, r3, #2
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d109      	bne.n	8002d4c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	e0ad      	b.n	8002e98 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d3c:	4b59      	ldr	r3, [pc, #356]	; (8002ea4 <HAL_RCC_ClockConfig+0x260>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d101      	bne.n	8002d4c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	e0a5      	b.n	8002e98 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8002d4c:	f000 f8b4 	bl	8002eb8 <HAL_RCC_GetSysClockFreq>
 8002d50:	4603      	mov	r3, r0
 8002d52:	4a55      	ldr	r2, [pc, #340]	; (8002ea8 <HAL_RCC_ClockConfig+0x264>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d90f      	bls.n	8002d78 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002d58:	4b52      	ldr	r3, [pc, #328]	; (8002ea4 <HAL_RCC_ClockConfig+0x260>)
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d109      	bne.n	8002d78 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002d64:	4b4f      	ldr	r3, [pc, #316]	; (8002ea4 <HAL_RCC_ClockConfig+0x260>)
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d6c:	4a4d      	ldr	r2, [pc, #308]	; (8002ea4 <HAL_RCC_ClockConfig+0x260>)
 8002d6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d72:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002d74:	2380      	movs	r3, #128	; 0x80
 8002d76:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002d78:	4b4a      	ldr	r3, [pc, #296]	; (8002ea4 <HAL_RCC_ClockConfig+0x260>)
 8002d7a:	689b      	ldr	r3, [r3, #8]
 8002d7c:	f023 0203 	bic.w	r2, r3, #3
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	4947      	ldr	r1, [pc, #284]	; (8002ea4 <HAL_RCC_ClockConfig+0x260>)
 8002d86:	4313      	orrs	r3, r2
 8002d88:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d8a:	f7fe fd2f 	bl	80017ec <HAL_GetTick>
 8002d8e:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d90:	e00a      	b.n	8002da8 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d92:	f7fe fd2b 	bl	80017ec <HAL_GetTick>
 8002d96:	4602      	mov	r2, r0
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	1ad3      	subs	r3, r2, r3
 8002d9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d901      	bls.n	8002da8 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8002da4:	2303      	movs	r3, #3
 8002da6:	e077      	b.n	8002e98 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002da8:	4b3e      	ldr	r3, [pc, #248]	; (8002ea4 <HAL_RCC_ClockConfig+0x260>)
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	f003 020c 	and.w	r2, r3, #12
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	009b      	lsls	r3, r3, #2
 8002db6:	429a      	cmp	r2, r3
 8002db8:	d1eb      	bne.n	8002d92 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	2b80      	cmp	r3, #128	; 0x80
 8002dbe:	d105      	bne.n	8002dcc <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002dc0:	4b38      	ldr	r3, [pc, #224]	; (8002ea4 <HAL_RCC_ClockConfig+0x260>)
 8002dc2:	689b      	ldr	r3, [r3, #8]
 8002dc4:	4a37      	ldr	r2, [pc, #220]	; (8002ea4 <HAL_RCC_ClockConfig+0x260>)
 8002dc6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002dca:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f003 0302 	and.w	r3, r3, #2
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d010      	beq.n	8002dfa <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	689a      	ldr	r2, [r3, #8]
 8002ddc:	4b31      	ldr	r3, [pc, #196]	; (8002ea4 <HAL_RCC_ClockConfig+0x260>)
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002de4:	429a      	cmp	r2, r3
 8002de6:	d208      	bcs.n	8002dfa <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002de8:	4b2e      	ldr	r3, [pc, #184]	; (8002ea4 <HAL_RCC_ClockConfig+0x260>)
 8002dea:	689b      	ldr	r3, [r3, #8]
 8002dec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	689b      	ldr	r3, [r3, #8]
 8002df4:	492b      	ldr	r1, [pc, #172]	; (8002ea4 <HAL_RCC_ClockConfig+0x260>)
 8002df6:	4313      	orrs	r3, r2
 8002df8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002dfa:	4b29      	ldr	r3, [pc, #164]	; (8002ea0 <HAL_RCC_ClockConfig+0x25c>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f003 030f 	and.w	r3, r3, #15
 8002e02:	683a      	ldr	r2, [r7, #0]
 8002e04:	429a      	cmp	r2, r3
 8002e06:	d210      	bcs.n	8002e2a <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e08:	4b25      	ldr	r3, [pc, #148]	; (8002ea0 <HAL_RCC_ClockConfig+0x25c>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f023 020f 	bic.w	r2, r3, #15
 8002e10:	4923      	ldr	r1, [pc, #140]	; (8002ea0 <HAL_RCC_ClockConfig+0x25c>)
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	4313      	orrs	r3, r2
 8002e16:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e18:	4b21      	ldr	r3, [pc, #132]	; (8002ea0 <HAL_RCC_ClockConfig+0x25c>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f003 030f 	and.w	r3, r3, #15
 8002e20:	683a      	ldr	r2, [r7, #0]
 8002e22:	429a      	cmp	r2, r3
 8002e24:	d001      	beq.n	8002e2a <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8002e26:	2301      	movs	r3, #1
 8002e28:	e036      	b.n	8002e98 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f003 0304 	and.w	r3, r3, #4
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d008      	beq.n	8002e48 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e36:	4b1b      	ldr	r3, [pc, #108]	; (8002ea4 <HAL_RCC_ClockConfig+0x260>)
 8002e38:	689b      	ldr	r3, [r3, #8]
 8002e3a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	68db      	ldr	r3, [r3, #12]
 8002e42:	4918      	ldr	r1, [pc, #96]	; (8002ea4 <HAL_RCC_ClockConfig+0x260>)
 8002e44:	4313      	orrs	r3, r2
 8002e46:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f003 0308 	and.w	r3, r3, #8
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d009      	beq.n	8002e68 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e54:	4b13      	ldr	r3, [pc, #76]	; (8002ea4 <HAL_RCC_ClockConfig+0x260>)
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	691b      	ldr	r3, [r3, #16]
 8002e60:	00db      	lsls	r3, r3, #3
 8002e62:	4910      	ldr	r1, [pc, #64]	; (8002ea4 <HAL_RCC_ClockConfig+0x260>)
 8002e64:	4313      	orrs	r3, r2
 8002e66:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002e68:	f000 f826 	bl	8002eb8 <HAL_RCC_GetSysClockFreq>
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	4b0d      	ldr	r3, [pc, #52]	; (8002ea4 <HAL_RCC_ClockConfig+0x260>)
 8002e70:	689b      	ldr	r3, [r3, #8]
 8002e72:	091b      	lsrs	r3, r3, #4
 8002e74:	f003 030f 	and.w	r3, r3, #15
 8002e78:	490c      	ldr	r1, [pc, #48]	; (8002eac <HAL_RCC_ClockConfig+0x268>)
 8002e7a:	5ccb      	ldrb	r3, [r1, r3]
 8002e7c:	f003 031f 	and.w	r3, r3, #31
 8002e80:	fa22 f303 	lsr.w	r3, r2, r3
 8002e84:	4a0a      	ldr	r2, [pc, #40]	; (8002eb0 <HAL_RCC_ClockConfig+0x26c>)
 8002e86:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002e88:	4b0a      	ldr	r3, [pc, #40]	; (8002eb4 <HAL_RCC_ClockConfig+0x270>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f7fe fc5d 	bl	800174c <HAL_InitTick>
 8002e92:	4603      	mov	r3, r0
 8002e94:	73fb      	strb	r3, [r7, #15]

  return status;
 8002e96:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	3718      	adds	r7, #24
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd80      	pop	{r7, pc}
 8002ea0:	40022000 	.word	0x40022000
 8002ea4:	40021000 	.word	0x40021000
 8002ea8:	04c4b400 	.word	0x04c4b400
 8002eac:	08008340 	.word	0x08008340
 8002eb0:	20000000 	.word	0x20000000
 8002eb4:	20000004 	.word	0x20000004

08002eb8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b089      	sub	sp, #36	; 0x24
 8002ebc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	61fb      	str	r3, [r7, #28]
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ec6:	4b3e      	ldr	r3, [pc, #248]	; (8002fc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	f003 030c 	and.w	r3, r3, #12
 8002ece:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ed0:	4b3b      	ldr	r3, [pc, #236]	; (8002fc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ed2:	68db      	ldr	r3, [r3, #12]
 8002ed4:	f003 0303 	and.w	r3, r3, #3
 8002ed8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d005      	beq.n	8002eec <HAL_RCC_GetSysClockFreq+0x34>
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	2b0c      	cmp	r3, #12
 8002ee4:	d121      	bne.n	8002f2a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	2b01      	cmp	r3, #1
 8002eea:	d11e      	bne.n	8002f2a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002eec:	4b34      	ldr	r3, [pc, #208]	; (8002fc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f003 0308 	and.w	r3, r3, #8
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d107      	bne.n	8002f08 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002ef8:	4b31      	ldr	r3, [pc, #196]	; (8002fc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002efa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002efe:	0a1b      	lsrs	r3, r3, #8
 8002f00:	f003 030f 	and.w	r3, r3, #15
 8002f04:	61fb      	str	r3, [r7, #28]
 8002f06:	e005      	b.n	8002f14 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002f08:	4b2d      	ldr	r3, [pc, #180]	; (8002fc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	091b      	lsrs	r3, r3, #4
 8002f0e:	f003 030f 	and.w	r3, r3, #15
 8002f12:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002f14:	4a2b      	ldr	r2, [pc, #172]	; (8002fc4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002f16:	69fb      	ldr	r3, [r7, #28]
 8002f18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f1c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d10d      	bne.n	8002f40 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002f24:	69fb      	ldr	r3, [r7, #28]
 8002f26:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002f28:	e00a      	b.n	8002f40 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	2b04      	cmp	r3, #4
 8002f2e:	d102      	bne.n	8002f36 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002f30:	4b25      	ldr	r3, [pc, #148]	; (8002fc8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002f32:	61bb      	str	r3, [r7, #24]
 8002f34:	e004      	b.n	8002f40 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	2b08      	cmp	r3, #8
 8002f3a:	d101      	bne.n	8002f40 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002f3c:	4b22      	ldr	r3, [pc, #136]	; (8002fc8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002f3e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002f40:	693b      	ldr	r3, [r7, #16]
 8002f42:	2b0c      	cmp	r3, #12
 8002f44:	d134      	bne.n	8002fb0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002f46:	4b1e      	ldr	r3, [pc, #120]	; (8002fc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f48:	68db      	ldr	r3, [r3, #12]
 8002f4a:	f003 0303 	and.w	r3, r3, #3
 8002f4e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	2b02      	cmp	r3, #2
 8002f54:	d003      	beq.n	8002f5e <HAL_RCC_GetSysClockFreq+0xa6>
 8002f56:	68bb      	ldr	r3, [r7, #8]
 8002f58:	2b03      	cmp	r3, #3
 8002f5a:	d003      	beq.n	8002f64 <HAL_RCC_GetSysClockFreq+0xac>
 8002f5c:	e005      	b.n	8002f6a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002f5e:	4b1a      	ldr	r3, [pc, #104]	; (8002fc8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002f60:	617b      	str	r3, [r7, #20]
      break;
 8002f62:	e005      	b.n	8002f70 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002f64:	4b18      	ldr	r3, [pc, #96]	; (8002fc8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002f66:	617b      	str	r3, [r7, #20]
      break;
 8002f68:	e002      	b.n	8002f70 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002f6a:	69fb      	ldr	r3, [r7, #28]
 8002f6c:	617b      	str	r3, [r7, #20]
      break;
 8002f6e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002f70:	4b13      	ldr	r3, [pc, #76]	; (8002fc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f72:	68db      	ldr	r3, [r3, #12]
 8002f74:	091b      	lsrs	r3, r3, #4
 8002f76:	f003 030f 	and.w	r3, r3, #15
 8002f7a:	3301      	adds	r3, #1
 8002f7c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002f7e:	4b10      	ldr	r3, [pc, #64]	; (8002fc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f80:	68db      	ldr	r3, [r3, #12]
 8002f82:	0a1b      	lsrs	r3, r3, #8
 8002f84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002f88:	697a      	ldr	r2, [r7, #20]
 8002f8a:	fb03 f202 	mul.w	r2, r3, r2
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f94:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002f96:	4b0a      	ldr	r3, [pc, #40]	; (8002fc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f98:	68db      	ldr	r3, [r3, #12]
 8002f9a:	0e5b      	lsrs	r3, r3, #25
 8002f9c:	f003 0303 	and.w	r3, r3, #3
 8002fa0:	3301      	adds	r3, #1
 8002fa2:	005b      	lsls	r3, r3, #1
 8002fa4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002fa6:	697a      	ldr	r2, [r7, #20]
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fae:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002fb0:	69bb      	ldr	r3, [r7, #24]
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	3724      	adds	r7, #36	; 0x24
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbc:	4770      	bx	lr
 8002fbe:	bf00      	nop
 8002fc0:	40021000 	.word	0x40021000
 8002fc4:	08008358 	.word	0x08008358
 8002fc8:	00f42400 	.word	0x00f42400

08002fcc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002fd0:	4b03      	ldr	r3, [pc, #12]	; (8002fe0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fdc:	4770      	bx	lr
 8002fde:	bf00      	nop
 8002fe0:	20000000 	.word	0x20000000

08002fe4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002fe8:	f7ff fff0 	bl	8002fcc <HAL_RCC_GetHCLKFreq>
 8002fec:	4602      	mov	r2, r0
 8002fee:	4b06      	ldr	r3, [pc, #24]	; (8003008 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ff0:	689b      	ldr	r3, [r3, #8]
 8002ff2:	0a1b      	lsrs	r3, r3, #8
 8002ff4:	f003 0307 	and.w	r3, r3, #7
 8002ff8:	4904      	ldr	r1, [pc, #16]	; (800300c <HAL_RCC_GetPCLK1Freq+0x28>)
 8002ffa:	5ccb      	ldrb	r3, [r1, r3]
 8002ffc:	f003 031f 	and.w	r3, r3, #31
 8003000:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003004:	4618      	mov	r0, r3
 8003006:	bd80      	pop	{r7, pc}
 8003008:	40021000 	.word	0x40021000
 800300c:	08008350 	.word	0x08008350

08003010 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003014:	f7ff ffda 	bl	8002fcc <HAL_RCC_GetHCLKFreq>
 8003018:	4602      	mov	r2, r0
 800301a:	4b06      	ldr	r3, [pc, #24]	; (8003034 <HAL_RCC_GetPCLK2Freq+0x24>)
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	0adb      	lsrs	r3, r3, #11
 8003020:	f003 0307 	and.w	r3, r3, #7
 8003024:	4904      	ldr	r1, [pc, #16]	; (8003038 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003026:	5ccb      	ldrb	r3, [r1, r3]
 8003028:	f003 031f 	and.w	r3, r3, #31
 800302c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003030:	4618      	mov	r0, r3
 8003032:	bd80      	pop	{r7, pc}
 8003034:	40021000 	.word	0x40021000
 8003038:	08008350 	.word	0x08008350

0800303c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b086      	sub	sp, #24
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003044:	2300      	movs	r3, #0
 8003046:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003048:	4b27      	ldr	r3, [pc, #156]	; (80030e8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800304a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800304c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003050:	2b00      	cmp	r3, #0
 8003052:	d003      	beq.n	800305c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003054:	f7ff f8f8 	bl	8002248 <HAL_PWREx_GetVoltageRange>
 8003058:	6178      	str	r0, [r7, #20]
 800305a:	e014      	b.n	8003086 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800305c:	4b22      	ldr	r3, [pc, #136]	; (80030e8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800305e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003060:	4a21      	ldr	r2, [pc, #132]	; (80030e8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003062:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003066:	6593      	str	r3, [r2, #88]	; 0x58
 8003068:	4b1f      	ldr	r3, [pc, #124]	; (80030e8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800306a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800306c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003070:	60fb      	str	r3, [r7, #12]
 8003072:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003074:	f7ff f8e8 	bl	8002248 <HAL_PWREx_GetVoltageRange>
 8003078:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800307a:	4b1b      	ldr	r3, [pc, #108]	; (80030e8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800307c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800307e:	4a1a      	ldr	r2, [pc, #104]	; (80030e8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003080:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003084:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800308c:	d10b      	bne.n	80030a6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2b80      	cmp	r3, #128	; 0x80
 8003092:	d913      	bls.n	80030bc <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2ba0      	cmp	r3, #160	; 0xa0
 8003098:	d902      	bls.n	80030a0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800309a:	2302      	movs	r3, #2
 800309c:	613b      	str	r3, [r7, #16]
 800309e:	e00d      	b.n	80030bc <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80030a0:	2301      	movs	r3, #1
 80030a2:	613b      	str	r3, [r7, #16]
 80030a4:	e00a      	b.n	80030bc <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2b7f      	cmp	r3, #127	; 0x7f
 80030aa:	d902      	bls.n	80030b2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80030ac:	2302      	movs	r3, #2
 80030ae:	613b      	str	r3, [r7, #16]
 80030b0:	e004      	b.n	80030bc <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2b70      	cmp	r3, #112	; 0x70
 80030b6:	d101      	bne.n	80030bc <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80030b8:	2301      	movs	r3, #1
 80030ba:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80030bc:	4b0b      	ldr	r3, [pc, #44]	; (80030ec <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f023 020f 	bic.w	r2, r3, #15
 80030c4:	4909      	ldr	r1, [pc, #36]	; (80030ec <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80030c6:	693b      	ldr	r3, [r7, #16]
 80030c8:	4313      	orrs	r3, r2
 80030ca:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80030cc:	4b07      	ldr	r3, [pc, #28]	; (80030ec <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f003 030f 	and.w	r3, r3, #15
 80030d4:	693a      	ldr	r2, [r7, #16]
 80030d6:	429a      	cmp	r2, r3
 80030d8:	d001      	beq.n	80030de <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	e000      	b.n	80030e0 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 80030de:	2300      	movs	r3, #0
}
 80030e0:	4618      	mov	r0, r3
 80030e2:	3718      	adds	r7, #24
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bd80      	pop	{r7, pc}
 80030e8:	40021000 	.word	0x40021000
 80030ec:	40022000 	.word	0x40022000

080030f0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b087      	sub	sp, #28
 80030f4:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80030f6:	4b2d      	ldr	r3, [pc, #180]	; (80031ac <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80030f8:	68db      	ldr	r3, [r3, #12]
 80030fa:	f003 0303 	and.w	r3, r3, #3
 80030fe:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	2b03      	cmp	r3, #3
 8003104:	d00b      	beq.n	800311e <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	2b03      	cmp	r3, #3
 800310a:	d825      	bhi.n	8003158 <RCC_GetSysClockFreqFromPLLSource+0x68>
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	2b01      	cmp	r3, #1
 8003110:	d008      	beq.n	8003124 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	2b02      	cmp	r3, #2
 8003116:	d11f      	bne.n	8003158 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8003118:	4b25      	ldr	r3, [pc, #148]	; (80031b0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800311a:	613b      	str	r3, [r7, #16]
    break;
 800311c:	e01f      	b.n	800315e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 800311e:	4b24      	ldr	r3, [pc, #144]	; (80031b0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003120:	613b      	str	r3, [r7, #16]
    break;
 8003122:	e01c      	b.n	800315e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003124:	4b21      	ldr	r3, [pc, #132]	; (80031ac <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f003 0308 	and.w	r3, r3, #8
 800312c:	2b00      	cmp	r3, #0
 800312e:	d107      	bne.n	8003140 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003130:	4b1e      	ldr	r3, [pc, #120]	; (80031ac <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003132:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003136:	0a1b      	lsrs	r3, r3, #8
 8003138:	f003 030f 	and.w	r3, r3, #15
 800313c:	617b      	str	r3, [r7, #20]
 800313e:	e005      	b.n	800314c <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003140:	4b1a      	ldr	r3, [pc, #104]	; (80031ac <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	091b      	lsrs	r3, r3, #4
 8003146:	f003 030f 	and.w	r3, r3, #15
 800314a:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 800314c:	4a19      	ldr	r2, [pc, #100]	; (80031b4 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003154:	613b      	str	r3, [r7, #16]
    break;
 8003156:	e002      	b.n	800315e <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8003158:	2300      	movs	r3, #0
 800315a:	613b      	str	r3, [r7, #16]
    break;
 800315c:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800315e:	4b13      	ldr	r3, [pc, #76]	; (80031ac <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003160:	68db      	ldr	r3, [r3, #12]
 8003162:	091b      	lsrs	r3, r3, #4
 8003164:	f003 030f 	and.w	r3, r3, #15
 8003168:	3301      	adds	r3, #1
 800316a:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800316c:	4b0f      	ldr	r3, [pc, #60]	; (80031ac <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800316e:	68db      	ldr	r3, [r3, #12]
 8003170:	0a1b      	lsrs	r3, r3, #8
 8003172:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003176:	693a      	ldr	r2, [r7, #16]
 8003178:	fb03 f202 	mul.w	r2, r3, r2
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003182:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003184:	4b09      	ldr	r3, [pc, #36]	; (80031ac <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003186:	68db      	ldr	r3, [r3, #12]
 8003188:	0e5b      	lsrs	r3, r3, #25
 800318a:	f003 0303 	and.w	r3, r3, #3
 800318e:	3301      	adds	r3, #1
 8003190:	005b      	lsls	r3, r3, #1
 8003192:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8003194:	693a      	ldr	r2, [r7, #16]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	fbb2 f3f3 	udiv	r3, r2, r3
 800319c:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800319e:	683b      	ldr	r3, [r7, #0]
}
 80031a0:	4618      	mov	r0, r3
 80031a2:	371c      	adds	r7, #28
 80031a4:	46bd      	mov	sp, r7
 80031a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031aa:	4770      	bx	lr
 80031ac:	40021000 	.word	0x40021000
 80031b0:	00f42400 	.word	0x00f42400
 80031b4:	08008358 	.word	0x08008358

080031b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b086      	sub	sp, #24
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80031c0:	2300      	movs	r3, #0
 80031c2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80031c4:	2300      	movs	r3, #0
 80031c6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d040      	beq.n	8003256 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80031d8:	2b80      	cmp	r3, #128	; 0x80
 80031da:	d02a      	beq.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80031dc:	2b80      	cmp	r3, #128	; 0x80
 80031de:	d825      	bhi.n	800322c <HAL_RCCEx_PeriphCLKConfig+0x74>
 80031e0:	2b60      	cmp	r3, #96	; 0x60
 80031e2:	d026      	beq.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80031e4:	2b60      	cmp	r3, #96	; 0x60
 80031e6:	d821      	bhi.n	800322c <HAL_RCCEx_PeriphCLKConfig+0x74>
 80031e8:	2b40      	cmp	r3, #64	; 0x40
 80031ea:	d006      	beq.n	80031fa <HAL_RCCEx_PeriphCLKConfig+0x42>
 80031ec:	2b40      	cmp	r3, #64	; 0x40
 80031ee:	d81d      	bhi.n	800322c <HAL_RCCEx_PeriphCLKConfig+0x74>
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d009      	beq.n	8003208 <HAL_RCCEx_PeriphCLKConfig+0x50>
 80031f4:	2b20      	cmp	r3, #32
 80031f6:	d010      	beq.n	800321a <HAL_RCCEx_PeriphCLKConfig+0x62>
 80031f8:	e018      	b.n	800322c <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80031fa:	4b89      	ldr	r3, [pc, #548]	; (8003420 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80031fc:	68db      	ldr	r3, [r3, #12]
 80031fe:	4a88      	ldr	r2, [pc, #544]	; (8003420 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003200:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003204:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003206:	e015      	b.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	3304      	adds	r3, #4
 800320c:	2100      	movs	r1, #0
 800320e:	4618      	mov	r0, r3
 8003210:	f001 fa82 	bl	8004718 <RCCEx_PLLSAI1_Config>
 8003214:	4603      	mov	r3, r0
 8003216:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003218:	e00c      	b.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	3320      	adds	r3, #32
 800321e:	2100      	movs	r1, #0
 8003220:	4618      	mov	r0, r3
 8003222:	f001 fb6d 	bl	8004900 <RCCEx_PLLSAI2_Config>
 8003226:	4603      	mov	r3, r0
 8003228:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800322a:	e003      	b.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800322c:	2301      	movs	r3, #1
 800322e:	74fb      	strb	r3, [r7, #19]
      break;
 8003230:	e000      	b.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8003232:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003234:	7cfb      	ldrb	r3, [r7, #19]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d10b      	bne.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800323a:	4b79      	ldr	r3, [pc, #484]	; (8003420 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800323c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003240:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003248:	4975      	ldr	r1, [pc, #468]	; (8003420 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800324a:	4313      	orrs	r3, r2
 800324c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003250:	e001      	b.n	8003256 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003252:	7cfb      	ldrb	r3, [r7, #19]
 8003254:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800325e:	2b00      	cmp	r3, #0
 8003260:	d047      	beq.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003266:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800326a:	d030      	beq.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0x116>
 800326c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003270:	d82a      	bhi.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003272:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003276:	d02a      	beq.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003278:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800327c:	d824      	bhi.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800327e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003282:	d008      	beq.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8003284:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003288:	d81e      	bhi.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800328a:	2b00      	cmp	r3, #0
 800328c:	d00a      	beq.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800328e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003292:	d010      	beq.n	80032b6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003294:	e018      	b.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003296:	4b62      	ldr	r3, [pc, #392]	; (8003420 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003298:	68db      	ldr	r3, [r3, #12]
 800329a:	4a61      	ldr	r2, [pc, #388]	; (8003420 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800329c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032a0:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80032a2:	e015      	b.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	3304      	adds	r3, #4
 80032a8:	2100      	movs	r1, #0
 80032aa:	4618      	mov	r0, r3
 80032ac:	f001 fa34 	bl	8004718 <RCCEx_PLLSAI1_Config>
 80032b0:	4603      	mov	r3, r0
 80032b2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80032b4:	e00c      	b.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	3320      	adds	r3, #32
 80032ba:	2100      	movs	r1, #0
 80032bc:	4618      	mov	r0, r3
 80032be:	f001 fb1f 	bl	8004900 <RCCEx_PLLSAI2_Config>
 80032c2:	4603      	mov	r3, r0
 80032c4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80032c6:	e003      	b.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80032c8:	2301      	movs	r3, #1
 80032ca:	74fb      	strb	r3, [r7, #19]
      break;
 80032cc:	e000      	b.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 80032ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 80032d0:	7cfb      	ldrb	r3, [r7, #19]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d10b      	bne.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80032d6:	4b52      	ldr	r3, [pc, #328]	; (8003420 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80032d8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80032dc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032e4:	494e      	ldr	r1, [pc, #312]	; (8003420 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80032e6:	4313      	orrs	r3, r2
 80032e8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80032ec:	e001      	b.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032ee:	7cfb      	ldrb	r3, [r7, #19]
 80032f0:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	f000 809f 	beq.w	800343e <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003300:	2300      	movs	r3, #0
 8003302:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003304:	4b46      	ldr	r3, [pc, #280]	; (8003420 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003306:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003308:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800330c:	2b00      	cmp	r3, #0
 800330e:	d101      	bne.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8003310:	2301      	movs	r3, #1
 8003312:	e000      	b.n	8003316 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003314:	2300      	movs	r3, #0
 8003316:	2b00      	cmp	r3, #0
 8003318:	d00d      	beq.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800331a:	4b41      	ldr	r3, [pc, #260]	; (8003420 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800331c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800331e:	4a40      	ldr	r2, [pc, #256]	; (8003420 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003320:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003324:	6593      	str	r3, [r2, #88]	; 0x58
 8003326:	4b3e      	ldr	r3, [pc, #248]	; (8003420 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003328:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800332a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800332e:	60bb      	str	r3, [r7, #8]
 8003330:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003332:	2301      	movs	r3, #1
 8003334:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003336:	4b3b      	ldr	r3, [pc, #236]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a3a      	ldr	r2, [pc, #232]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800333c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003340:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003342:	f7fe fa53 	bl	80017ec <HAL_GetTick>
 8003346:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003348:	e009      	b.n	800335e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800334a:	f7fe fa4f 	bl	80017ec <HAL_GetTick>
 800334e:	4602      	mov	r2, r0
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	1ad3      	subs	r3, r2, r3
 8003354:	2b02      	cmp	r3, #2
 8003356:	d902      	bls.n	800335e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8003358:	2303      	movs	r3, #3
 800335a:	74fb      	strb	r3, [r7, #19]
        break;
 800335c:	e005      	b.n	800336a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800335e:	4b31      	ldr	r3, [pc, #196]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003366:	2b00      	cmp	r3, #0
 8003368:	d0ef      	beq.n	800334a <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 800336a:	7cfb      	ldrb	r3, [r7, #19]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d15b      	bne.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003370:	4b2b      	ldr	r3, [pc, #172]	; (8003420 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003372:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003376:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800337a:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800337c:	697b      	ldr	r3, [r7, #20]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d01f      	beq.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003388:	697a      	ldr	r2, [r7, #20]
 800338a:	429a      	cmp	r2, r3
 800338c:	d019      	beq.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800338e:	4b24      	ldr	r3, [pc, #144]	; (8003420 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003390:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003394:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003398:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800339a:	4b21      	ldr	r3, [pc, #132]	; (8003420 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800339c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033a0:	4a1f      	ldr	r2, [pc, #124]	; (8003420 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80033a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80033aa:	4b1d      	ldr	r3, [pc, #116]	; (8003420 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80033ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033b0:	4a1b      	ldr	r2, [pc, #108]	; (8003420 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80033b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80033ba:	4a19      	ldr	r2, [pc, #100]	; (8003420 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80033bc:	697b      	ldr	r3, [r7, #20]
 80033be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	f003 0301 	and.w	r3, r3, #1
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d016      	beq.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033cc:	f7fe fa0e 	bl	80017ec <HAL_GetTick>
 80033d0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80033d2:	e00b      	b.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033d4:	f7fe fa0a 	bl	80017ec <HAL_GetTick>
 80033d8:	4602      	mov	r2, r0
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	1ad3      	subs	r3, r2, r3
 80033de:	f241 3288 	movw	r2, #5000	; 0x1388
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d902      	bls.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 80033e6:	2303      	movs	r3, #3
 80033e8:	74fb      	strb	r3, [r7, #19]
            break;
 80033ea:	e006      	b.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80033ec:	4b0c      	ldr	r3, [pc, #48]	; (8003420 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80033ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033f2:	f003 0302 	and.w	r3, r3, #2
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d0ec      	beq.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 80033fa:	7cfb      	ldrb	r3, [r7, #19]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d10c      	bne.n	800341a <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003400:	4b07      	ldr	r3, [pc, #28]	; (8003420 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003402:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003406:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003410:	4903      	ldr	r1, [pc, #12]	; (8003420 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003412:	4313      	orrs	r3, r2
 8003414:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003418:	e008      	b.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800341a:	7cfb      	ldrb	r3, [r7, #19]
 800341c:	74bb      	strb	r3, [r7, #18]
 800341e:	e005      	b.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x274>
 8003420:	40021000 	.word	0x40021000
 8003424:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003428:	7cfb      	ldrb	r3, [r7, #19]
 800342a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800342c:	7c7b      	ldrb	r3, [r7, #17]
 800342e:	2b01      	cmp	r3, #1
 8003430:	d105      	bne.n	800343e <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003432:	4ba0      	ldr	r3, [pc, #640]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003434:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003436:	4a9f      	ldr	r2, [pc, #636]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003438:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800343c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f003 0301 	and.w	r3, r3, #1
 8003446:	2b00      	cmp	r3, #0
 8003448:	d00a      	beq.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800344a:	4b9a      	ldr	r3, [pc, #616]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800344c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003450:	f023 0203 	bic.w	r2, r3, #3
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003458:	4996      	ldr	r1, [pc, #600]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800345a:	4313      	orrs	r3, r2
 800345c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f003 0302 	and.w	r3, r3, #2
 8003468:	2b00      	cmp	r3, #0
 800346a:	d00a      	beq.n	8003482 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800346c:	4b91      	ldr	r3, [pc, #580]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800346e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003472:	f023 020c 	bic.w	r2, r3, #12
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800347a:	498e      	ldr	r1, [pc, #568]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800347c:	4313      	orrs	r3, r2
 800347e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f003 0304 	and.w	r3, r3, #4
 800348a:	2b00      	cmp	r3, #0
 800348c:	d00a      	beq.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800348e:	4b89      	ldr	r3, [pc, #548]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003490:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003494:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800349c:	4985      	ldr	r1, [pc, #532]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800349e:	4313      	orrs	r3, r2
 80034a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f003 0308 	and.w	r3, r3, #8
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d00a      	beq.n	80034c6 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80034b0:	4b80      	ldr	r3, [pc, #512]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034b6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034be:	497d      	ldr	r1, [pc, #500]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034c0:	4313      	orrs	r3, r2
 80034c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f003 0310 	and.w	r3, r3, #16
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d00a      	beq.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80034d2:	4b78      	ldr	r3, [pc, #480]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034d8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034e0:	4974      	ldr	r1, [pc, #464]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034e2:	4313      	orrs	r3, r2
 80034e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f003 0320 	and.w	r3, r3, #32
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d00a      	beq.n	800350a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80034f4:	4b6f      	ldr	r3, [pc, #444]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034fa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003502:	496c      	ldr	r1, [pc, #432]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003504:	4313      	orrs	r3, r2
 8003506:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003512:	2b00      	cmp	r3, #0
 8003514:	d00a      	beq.n	800352c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003516:	4b67      	ldr	r3, [pc, #412]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003518:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800351c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003524:	4963      	ldr	r1, [pc, #396]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003526:	4313      	orrs	r3, r2
 8003528:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003534:	2b00      	cmp	r3, #0
 8003536:	d00a      	beq.n	800354e <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003538:	4b5e      	ldr	r3, [pc, #376]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800353a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800353e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003546:	495b      	ldr	r1, [pc, #364]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003548:	4313      	orrs	r3, r2
 800354a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003556:	2b00      	cmp	r3, #0
 8003558:	d00a      	beq.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800355a:	4b56      	ldr	r3, [pc, #344]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800355c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003560:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003568:	4952      	ldr	r1, [pc, #328]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800356a:	4313      	orrs	r3, r2
 800356c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003578:	2b00      	cmp	r3, #0
 800357a:	d00a      	beq.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800357c:	4b4d      	ldr	r3, [pc, #308]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800357e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003582:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800358a:	494a      	ldr	r1, [pc, #296]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800358c:	4313      	orrs	r3, r2
 800358e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800359a:	2b00      	cmp	r3, #0
 800359c:	d00a      	beq.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800359e:	4b45      	ldr	r3, [pc, #276]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035a4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035ac:	4941      	ldr	r1, [pc, #260]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035ae:	4313      	orrs	r3, r2
 80035b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d00a      	beq.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80035c0:	4b3c      	ldr	r3, [pc, #240]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80035c6:	f023 0203 	bic.w	r2, r3, #3
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035ce:	4939      	ldr	r1, [pc, #228]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035d0:	4313      	orrs	r3, r2
 80035d2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d028      	beq.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80035e2:	4b34      	ldr	r3, [pc, #208]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035e8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035f0:	4930      	ldr	r1, [pc, #192]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035f2:	4313      	orrs	r3, r2
 80035f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035fc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003600:	d106      	bne.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003602:	4b2c      	ldr	r3, [pc, #176]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003604:	68db      	ldr	r3, [r3, #12]
 8003606:	4a2b      	ldr	r2, [pc, #172]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003608:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800360c:	60d3      	str	r3, [r2, #12]
 800360e:	e011      	b.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003614:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003618:	d10c      	bne.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	3304      	adds	r3, #4
 800361e:	2101      	movs	r1, #1
 8003620:	4618      	mov	r0, r3
 8003622:	f001 f879 	bl	8004718 <RCCEx_PLLSAI1_Config>
 8003626:	4603      	mov	r3, r0
 8003628:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800362a:	7cfb      	ldrb	r3, [r7, #19]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d001      	beq.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8003630:	7cfb      	ldrb	r3, [r7, #19]
 8003632:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800363c:	2b00      	cmp	r3, #0
 800363e:	d04d      	beq.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003644:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003648:	d108      	bne.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 800364a:	4b1a      	ldr	r3, [pc, #104]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800364c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003650:	4a18      	ldr	r2, [pc, #96]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003652:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003656:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800365a:	e012      	b.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 800365c:	4b15      	ldr	r3, [pc, #84]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800365e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003662:	4a14      	ldr	r2, [pc, #80]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003664:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003668:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800366c:	4b11      	ldr	r3, [pc, #68]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800366e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003672:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800367a:	490e      	ldr	r1, [pc, #56]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800367c:	4313      	orrs	r3, r2
 800367e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003686:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800368a:	d106      	bne.n	800369a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800368c:	4b09      	ldr	r3, [pc, #36]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800368e:	68db      	ldr	r3, [r3, #12]
 8003690:	4a08      	ldr	r2, [pc, #32]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003692:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003696:	60d3      	str	r3, [r2, #12]
 8003698:	e020      	b.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800369e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80036a2:	d109      	bne.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80036a4:	4b03      	ldr	r3, [pc, #12]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80036a6:	68db      	ldr	r3, [r3, #12]
 80036a8:	4a02      	ldr	r2, [pc, #8]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80036aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036ae:	60d3      	str	r3, [r2, #12]
 80036b0:	e014      	b.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x524>
 80036b2:	bf00      	nop
 80036b4:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80036bc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80036c0:	d10c      	bne.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	3304      	adds	r3, #4
 80036c6:	2101      	movs	r1, #1
 80036c8:	4618      	mov	r0, r3
 80036ca:	f001 f825 	bl	8004718 <RCCEx_PLLSAI1_Config>
 80036ce:	4603      	mov	r3, r0
 80036d0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80036d2:	7cfb      	ldrb	r3, [r7, #19]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d001      	beq.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 80036d8:	7cfb      	ldrb	r3, [r7, #19]
 80036da:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d028      	beq.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80036e8:	4b7a      	ldr	r3, [pc, #488]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80036ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036ee:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80036f6:	4977      	ldr	r1, [pc, #476]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80036f8:	4313      	orrs	r3, r2
 80036fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003702:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003706:	d106      	bne.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003708:	4b72      	ldr	r3, [pc, #456]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800370a:	68db      	ldr	r3, [r3, #12]
 800370c:	4a71      	ldr	r2, [pc, #452]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800370e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003712:	60d3      	str	r3, [r2, #12]
 8003714:	e011      	b.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800371a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800371e:	d10c      	bne.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	3304      	adds	r3, #4
 8003724:	2101      	movs	r1, #1
 8003726:	4618      	mov	r0, r3
 8003728:	f000 fff6 	bl	8004718 <RCCEx_PLLSAI1_Config>
 800372c:	4603      	mov	r3, r0
 800372e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003730:	7cfb      	ldrb	r3, [r7, #19]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d001      	beq.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8003736:	7cfb      	ldrb	r3, [r7, #19]
 8003738:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003742:	2b00      	cmp	r3, #0
 8003744:	d01e      	beq.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003746:	4b63      	ldr	r3, [pc, #396]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003748:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800374c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003756:	495f      	ldr	r1, [pc, #380]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003758:	4313      	orrs	r3, r2
 800375a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003764:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003768:	d10c      	bne.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	3304      	adds	r3, #4
 800376e:	2102      	movs	r1, #2
 8003770:	4618      	mov	r0, r3
 8003772:	f000 ffd1 	bl	8004718 <RCCEx_PLLSAI1_Config>
 8003776:	4603      	mov	r3, r0
 8003778:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800377a:	7cfb      	ldrb	r3, [r7, #19]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d001      	beq.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8003780:	7cfb      	ldrb	r3, [r7, #19]
 8003782:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800378c:	2b00      	cmp	r3, #0
 800378e:	d00b      	beq.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003790:	4b50      	ldr	r3, [pc, #320]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003792:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003796:	f023 0204 	bic.w	r2, r3, #4
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037a0:	494c      	ldr	r1, [pc, #304]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80037a2:	4313      	orrs	r3, r2
 80037a4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d00b      	beq.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80037b4:	4b47      	ldr	r3, [pc, #284]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80037b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80037ba:	f023 0218 	bic.w	r2, r3, #24
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037c4:	4943      	ldr	r1, [pc, #268]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80037c6:	4313      	orrs	r3, r2
 80037c8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DFSDM1_Filter0 */

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d035      	beq.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0x68c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80037d8:	4b3e      	ldr	r3, [pc, #248]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a3d      	ldr	r2, [pc, #244]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80037de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037e2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037e4:	f7fe f802 	bl	80017ec <HAL_GetTick>
 80037e8:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80037ea:	e009      	b.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80037ec:	f7fd fffe 	bl	80017ec <HAL_GetTick>
 80037f0:	4602      	mov	r2, r0
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	1ad3      	subs	r3, r2, r3
 80037f6:	2b02      	cmp	r3, #2
 80037f8:	d902      	bls.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        ret = HAL_TIMEOUT;
 80037fa:	2303      	movs	r3, #3
 80037fc:	74fb      	strb	r3, [r7, #19]
        break;
 80037fe:	e005      	b.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x654>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003800:	4b34      	ldr	r3, [pc, #208]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003808:	2b00      	cmp	r3, #0
 800380a:	d1ef      	bne.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x634>
      }
    }

    if(ret == HAL_OK)
 800380c:	7cfb      	ldrb	r3, [r7, #19]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d113      	bne.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x682>
    {
      /* Configure the LTDC clock source */
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 8003812:	4b30      	ldr	r3, [pc, #192]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003814:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003818:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003822:	492c      	ldr	r1, [pc, #176]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003824:	4313      	orrs	r3, r2
 8003826:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	3320      	adds	r3, #32
 800382e:	2102      	movs	r1, #2
 8003830:	4618      	mov	r0, r3
 8003832:	f001 f865 	bl	8004900 <RCCEx_PLLSAI2_Config>
 8003836:	4603      	mov	r3, r0
 8003838:	74fb      	strb	r3, [r7, #19]
    }

    if(ret != HAL_OK)
 800383a:	7cfb      	ldrb	r3, [r7, #19]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d001      	beq.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* set overall return value */
      status = ret;
 8003840:	7cfb      	ldrb	r3, [r7, #19]
 8003842:	74bb      	strb	r3, [r7, #18]
#endif /* LTDC */

#if defined(DSI)

  /*-------------------------- DSI clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800384c:	2b00      	cmp	r3, #0
 800384e:	d01e      	beq.n	800388e <HAL_RCCEx_PeriphCLKConfig+0x6d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DSICLKSOURCE(PeriphClkInit->DsiClockSelection));

    /* Configure the DSI clock source */
    __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8003850:	4b20      	ldr	r3, [pc, #128]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003852:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003856:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003860:	491c      	ldr	r1, [pc, #112]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003862:	4313      	orrs	r3, r2
 8003864:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLLSAI2)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800386e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003872:	d10c      	bne.n	800388e <HAL_RCCEx_PeriphCLKConfig+0x6d6>
    {
      /* PLLSAI2 input clock, parameters M, N & Q configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_Q_UPDATE);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	3320      	adds	r3, #32
 8003878:	2101      	movs	r1, #1
 800387a:	4618      	mov	r0, r3
 800387c:	f001 f840 	bl	8004900 <RCCEx_PLLSAI2_Config>
 8003880:	4603      	mov	r3, r0
 8003882:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003884:	7cfb      	ldrb	r3, [r7, #19]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d001      	beq.n	800388e <HAL_RCCEx_PeriphCLKConfig+0x6d6>
      {
        /* set overall return value */
        status = ret;
 800388a:	7cfb      	ldrb	r3, [r7, #19]
 800388c:	74bb      	strb	r3, [r7, #18]
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003896:	2b00      	cmp	r3, #0
 8003898:	d017      	beq.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0x712>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800389a:	4b0e      	ldr	r3, [pc, #56]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800389c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80038a0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038aa:	490a      	ldr	r1, [pc, #40]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80038ac:	4313      	orrs	r3, r2
 80038ae:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038b8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80038bc:	d105      	bne.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0x712>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80038be:	4b05      	ldr	r3, [pc, #20]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80038c0:	68db      	ldr	r3, [r3, #12]
 80038c2:	4a04      	ldr	r2, [pc, #16]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80038c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80038c8:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80038ca:	7cbb      	ldrb	r3, [r7, #18]
}
 80038cc:	4618      	mov	r0, r3
 80038ce:	3718      	adds	r7, #24
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bd80      	pop	{r7, pc}
 80038d4:	40021000 	.word	0x40021000

080038d8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b088      	sub	sp, #32
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 80038e0:	2300      	movs	r3, #0
 80038e2:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80038ea:	d13e      	bne.n	800396a <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80038ec:	4bb6      	ldr	r3, [pc, #728]	; (8003bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80038ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038f6:	60fb      	str	r3, [r7, #12]

    switch(srcclk)
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80038fe:	d028      	beq.n	8003952 <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003906:	f200 86f2 	bhi.w	80046ee <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003910:	d005      	beq.n	800391e <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003918:	d00e      	beq.n	8003938 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 800391a:	f000 bee8 	b.w	80046ee <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800391e:	4baa      	ldr	r3, [pc, #680]	; (8003bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8003920:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003924:	f003 0302 	and.w	r3, r3, #2
 8003928:	2b02      	cmp	r3, #2
 800392a:	f040 86e2 	bne.w	80046f2 <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
        frequency = LSE_VALUE;
 800392e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003932:	61fb      	str	r3, [r7, #28]
      break;
 8003934:	f000 bedd 	b.w	80046f2 <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8003938:	4ba3      	ldr	r3, [pc, #652]	; (8003bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800393a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800393e:	f003 0302 	and.w	r3, r3, #2
 8003942:	2b02      	cmp	r3, #2
 8003944:	f040 86d7 	bne.w	80046f6 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
          frequency = LSI_VALUE;
 8003948:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800394c:	61fb      	str	r3, [r7, #28]
      break;
 800394e:	f000 bed2 	b.w	80046f6 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8003952:	4b9d      	ldr	r3, [pc, #628]	; (8003bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800395a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800395e:	f040 86cc 	bne.w	80046fa <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
        frequency = HSE_VALUE / 32U;
 8003962:	4b9a      	ldr	r3, [pc, #616]	; (8003bcc <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003964:	61fb      	str	r3, [r7, #28]
      break;
 8003966:	f000 bec8 	b.w	80046fa <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800396a:	4b97      	ldr	r3, [pc, #604]	; (8003bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800396c:	68db      	ldr	r3, [r3, #12]
 800396e:	f003 0303 	and.w	r3, r3, #3
 8003972:	613b      	str	r3, [r7, #16]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 8003974:	693b      	ldr	r3, [r7, #16]
 8003976:	2b03      	cmp	r3, #3
 8003978:	d036      	beq.n	80039e8 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	2b03      	cmp	r3, #3
 800397e:	d840      	bhi.n	8003a02 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	2b01      	cmp	r3, #1
 8003984:	d003      	beq.n	800398e <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	2b02      	cmp	r3, #2
 800398a:	d020      	beq.n	80039ce <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 800398c:	e039      	b.n	8003a02 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800398e:	4b8e      	ldr	r3, [pc, #568]	; (8003bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f003 0302 	and.w	r3, r3, #2
 8003996:	2b02      	cmp	r3, #2
 8003998:	d116      	bne.n	80039c8 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800399a:	4b8b      	ldr	r3, [pc, #556]	; (8003bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f003 0308 	and.w	r3, r3, #8
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d005      	beq.n	80039b2 <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 80039a6:	4b88      	ldr	r3, [pc, #544]	; (8003bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	091b      	lsrs	r3, r3, #4
 80039ac:	f003 030f 	and.w	r3, r3, #15
 80039b0:	e005      	b.n	80039be <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 80039b2:	4b85      	ldr	r3, [pc, #532]	; (8003bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80039b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039b8:	0a1b      	lsrs	r3, r3, #8
 80039ba:	f003 030f 	and.w	r3, r3, #15
 80039be:	4a84      	ldr	r2, [pc, #528]	; (8003bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80039c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039c4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80039c6:	e01f      	b.n	8003a08 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 80039c8:	2300      	movs	r3, #0
 80039ca:	61bb      	str	r3, [r7, #24]
      break;
 80039cc:	e01c      	b.n	8003a08 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80039ce:	4b7e      	ldr	r3, [pc, #504]	; (8003bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039da:	d102      	bne.n	80039e2 <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 80039dc:	4b7d      	ldr	r3, [pc, #500]	; (8003bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 80039de:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80039e0:	e012      	b.n	8003a08 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 80039e2:	2300      	movs	r3, #0
 80039e4:	61bb      	str	r3, [r7, #24]
      break;
 80039e6:	e00f      	b.n	8003a08 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80039e8:	4b77      	ldr	r3, [pc, #476]	; (8003bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039f0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80039f4:	d102      	bne.n	80039fc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 80039f6:	4b77      	ldr	r3, [pc, #476]	; (8003bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 80039f8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80039fa:	e005      	b.n	8003a08 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 80039fc:	2300      	movs	r3, #0
 80039fe:	61bb      	str	r3, [r7, #24]
      break;
 8003a00:	e002      	b.n	8003a08 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 8003a02:	2300      	movs	r3, #0
 8003a04:	61bb      	str	r3, [r7, #24]
      break;
 8003a06:	bf00      	nop
    }

    switch(PeriphClk)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003a0e:	f000 8604 	beq.w	800461a <HAL_RCCEx_GetPeriphCLKFreq+0xd42>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003a18:	f200 8671 	bhi.w	80046fe <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003a22:	f000 8467 	beq.w	80042f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003a2c:	f200 8667 	bhi.w	80046fe <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a36:	f000 852f 	beq.w	8004498 <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a40:	f200 865d 	bhi.w	80046fe <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003a4a:	f000 8185 	beq.w	8003d58 <HAL_RCCEx_GetPeriphCLKFreq+0x480>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003a54:	f200 8653 	bhi.w	80046fe <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003a5e:	f000 80cb 	beq.w	8003bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x320>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003a68:	f200 8649 	bhi.w	80046fe <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a72:	f000 842e 	beq.w	80042d2 <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a7c:	f200 863f 	bhi.w	80046fe <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a86:	f000 83e2 	beq.w	800424e <HAL_RCCEx_GetPeriphCLKFreq+0x976>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a90:	f200 8635 	bhi.w	80046fe <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a9a:	f000 80ad 	beq.w	8003bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x320>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003aa4:	f200 862b 	bhi.w	80046fe <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003aae:	f000 809b 	beq.w	8003be8 <HAL_RCCEx_GetPeriphCLKFreq+0x310>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ab8:	f200 8621 	bhi.w	80046fe <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ac2:	f000 8089 	beq.w	8003bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x300>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003acc:	f200 8617 	bhi.w	80046fe <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ad6:	f000 8552 	beq.w	800457e <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ae0:	f200 860d 	bhi.w	80046fe <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003aea:	f000 84fe 	beq.w	80044ea <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003af4:	f200 8603 	bhi.w	80046fe <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003afe:	f000 849f 	beq.w	8004440 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b08:	f200 85f9 	bhi.w	80046fe <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2b80      	cmp	r3, #128	; 0x80
 8003b10:	f000 846a 	beq.w	80043e8 <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2b80      	cmp	r3, #128	; 0x80
 8003b18:	f200 85f1 	bhi.w	80046fe <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2b20      	cmp	r3, #32
 8003b20:	d84c      	bhi.n	8003bbc <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	f000 85ea 	beq.w	80046fe <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	3b01      	subs	r3, #1
 8003b2e:	2b1f      	cmp	r3, #31
 8003b30:	f200 85e5 	bhi.w	80046fe <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003b34:	a201      	add	r2, pc, #4	; (adr r2, 8003b3c <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 8003b36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b3a:	bf00      	nop
 8003b3c:	08003f4d 	.word	0x08003f4d
 8003b40:	08003fbb 	.word	0x08003fbb
 8003b44:	080046ff 	.word	0x080046ff
 8003b48:	0800404f 	.word	0x0800404f
 8003b4c:	080046ff 	.word	0x080046ff
 8003b50:	080046ff 	.word	0x080046ff
 8003b54:	080046ff 	.word	0x080046ff
 8003b58:	080040c7 	.word	0x080040c7
 8003b5c:	080046ff 	.word	0x080046ff
 8003b60:	080046ff 	.word	0x080046ff
 8003b64:	080046ff 	.word	0x080046ff
 8003b68:	080046ff 	.word	0x080046ff
 8003b6c:	080046ff 	.word	0x080046ff
 8003b70:	080046ff 	.word	0x080046ff
 8003b74:	080046ff 	.word	0x080046ff
 8003b78:	0800414b 	.word	0x0800414b
 8003b7c:	080046ff 	.word	0x080046ff
 8003b80:	080046ff 	.word	0x080046ff
 8003b84:	080046ff 	.word	0x080046ff
 8003b88:	080046ff 	.word	0x080046ff
 8003b8c:	080046ff 	.word	0x080046ff
 8003b90:	080046ff 	.word	0x080046ff
 8003b94:	080046ff 	.word	0x080046ff
 8003b98:	080046ff 	.word	0x080046ff
 8003b9c:	080046ff 	.word	0x080046ff
 8003ba0:	080046ff 	.word	0x080046ff
 8003ba4:	080046ff 	.word	0x080046ff
 8003ba8:	080046ff 	.word	0x080046ff
 8003bac:	080046ff 	.word	0x080046ff
 8003bb0:	080046ff 	.word	0x080046ff
 8003bb4:	080046ff 	.word	0x080046ff
 8003bb8:	080041cd 	.word	0x080041cd
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2b40      	cmp	r3, #64	; 0x40
 8003bc0:	f000 83e6 	beq.w	8004390 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 8003bc4:	f000 bd9b 	b.w	80046fe <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003bc8:	40021000 	.word	0x40021000
 8003bcc:	0007a120 	.word	0x0007a120
 8003bd0:	08008358 	.word	0x08008358
 8003bd4:	00f42400 	.word	0x00f42400
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8003bd8:	69b9      	ldr	r1, [r7, #24]
 8003bda:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003bde:	f000 ff83 	bl	8004ae8 <RCCEx_GetSAIxPeriphCLKFreq>
 8003be2:	61f8      	str	r0, [r7, #28]
      break;
 8003be4:	f000 bd8e 	b.w	8004704 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 8003be8:	69b9      	ldr	r1, [r7, #24]
 8003bea:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003bee:	f000 ff7b 	bl	8004ae8 <RCCEx_GetSAIxPeriphCLKFreq>
 8003bf2:	61f8      	str	r0, [r7, #28]
      break;
 8003bf4:	f000 bd86 	b.w	8004704 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8003bf8:	4b9a      	ldr	r3, [pc, #616]	; (8003e64 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003bfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bfe:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8003c02:	60fb      	str	r3, [r7, #12]
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003c0a:	d015      	beq.n	8003c38 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003c12:	f200 8092 	bhi.w	8003d3a <HAL_RCCEx_GetPeriphCLKFreq+0x462>
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c1c:	d029      	beq.n	8003c72 <HAL_RCCEx_GetPeriphCLKFreq+0x39a>
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c24:	f200 8089 	bhi.w	8003d3a <HAL_RCCEx_GetPeriphCLKFreq+0x462>
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d07b      	beq.n	8003d26 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003c34:	d04a      	beq.n	8003ccc <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
          break;
 8003c36:	e080      	b.n	8003d3a <HAL_RCCEx_GetPeriphCLKFreq+0x462>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8003c38:	4b8a      	ldr	r3, [pc, #552]	; (8003e64 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f003 0302 	and.w	r3, r3, #2
 8003c40:	2b02      	cmp	r3, #2
 8003c42:	d17d      	bne.n	8003d40 <HAL_RCCEx_GetPeriphCLKFreq+0x468>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8003c44:	4b87      	ldr	r3, [pc, #540]	; (8003e64 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f003 0308 	and.w	r3, r3, #8
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d005      	beq.n	8003c5c <HAL_RCCEx_GetPeriphCLKFreq+0x384>
 8003c50:	4b84      	ldr	r3, [pc, #528]	; (8003e64 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	091b      	lsrs	r3, r3, #4
 8003c56:	f003 030f 	and.w	r3, r3, #15
 8003c5a:	e005      	b.n	8003c68 <HAL_RCCEx_GetPeriphCLKFreq+0x390>
 8003c5c:	4b81      	ldr	r3, [pc, #516]	; (8003e64 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003c5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c62:	0a1b      	lsrs	r3, r3, #8
 8003c64:	f003 030f 	and.w	r3, r3, #15
 8003c68:	4a7f      	ldr	r2, [pc, #508]	; (8003e68 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8003c6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c6e:	61fb      	str	r3, [r7, #28]
          break;
 8003c70:	e066      	b.n	8003d40 <HAL_RCCEx_GetPeriphCLKFreq+0x468>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8003c72:	4b7c      	ldr	r3, [pc, #496]	; (8003e64 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c7a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003c7e:	d162      	bne.n	8003d46 <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8003c80:	4b78      	ldr	r3, [pc, #480]	; (8003e64 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003c82:	68db      	ldr	r3, [r3, #12]
 8003c84:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c88:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c8c:	d15b      	bne.n	8003d46 <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8003c8e:	4b75      	ldr	r3, [pc, #468]	; (8003e64 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003c90:	68db      	ldr	r3, [r3, #12]
 8003c92:	0a1b      	lsrs	r3, r3, #8
 8003c94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c98:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8003c9a:	69bb      	ldr	r3, [r7, #24]
 8003c9c:	68ba      	ldr	r2, [r7, #8]
 8003c9e:	fb03 f202 	mul.w	r2, r3, r2
 8003ca2:	4b70      	ldr	r3, [pc, #448]	; (8003e64 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003ca4:	68db      	ldr	r3, [r3, #12]
 8003ca6:	091b      	lsrs	r3, r3, #4
 8003ca8:	f003 030f 	and.w	r3, r3, #15
 8003cac:	3301      	adds	r3, #1
 8003cae:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cb2:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8003cb4:	4b6b      	ldr	r3, [pc, #428]	; (8003e64 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003cb6:	68db      	ldr	r3, [r3, #12]
 8003cb8:	0d5b      	lsrs	r3, r3, #21
 8003cba:	f003 0303 	and.w	r3, r3, #3
 8003cbe:	3301      	adds	r3, #1
 8003cc0:	005b      	lsls	r3, r3, #1
 8003cc2:	69ba      	ldr	r2, [r7, #24]
 8003cc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cc8:	61fb      	str	r3, [r7, #28]
          break;
 8003cca:	e03c      	b.n	8003d46 <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8003ccc:	4b65      	ldr	r3, [pc, #404]	; (8003e64 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003cd4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003cd8:	d138      	bne.n	8003d4c <HAL_RCCEx_GetPeriphCLKFreq+0x474>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8003cda:	4b62      	ldr	r3, [pc, #392]	; (8003e64 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003cdc:	691b      	ldr	r3, [r3, #16]
 8003cde:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ce2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ce6:	d131      	bne.n	8003d4c <HAL_RCCEx_GetPeriphCLKFreq+0x474>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8003ce8:	4b5e      	ldr	r3, [pc, #376]	; (8003e64 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003cea:	691b      	ldr	r3, [r3, #16]
 8003cec:	0a1b      	lsrs	r3, r3, #8
 8003cee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003cf2:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8003cf4:	69bb      	ldr	r3, [r7, #24]
 8003cf6:	68ba      	ldr	r2, [r7, #8]
 8003cf8:	fb03 f202 	mul.w	r2, r3, r2
 8003cfc:	4b59      	ldr	r3, [pc, #356]	; (8003e64 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003cfe:	691b      	ldr	r3, [r3, #16]
 8003d00:	091b      	lsrs	r3, r3, #4
 8003d02:	f003 030f 	and.w	r3, r3, #15
 8003d06:	3301      	adds	r3, #1
 8003d08:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d0c:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8003d0e:	4b55      	ldr	r3, [pc, #340]	; (8003e64 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003d10:	691b      	ldr	r3, [r3, #16]
 8003d12:	0d5b      	lsrs	r3, r3, #21
 8003d14:	f003 0303 	and.w	r3, r3, #3
 8003d18:	3301      	adds	r3, #1
 8003d1a:	005b      	lsls	r3, r3, #1
 8003d1c:	69ba      	ldr	r2, [r7, #24]
 8003d1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d22:	61fb      	str	r3, [r7, #28]
          break;
 8003d24:	e012      	b.n	8003d4c <HAL_RCCEx_GetPeriphCLKFreq+0x474>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 8003d26:	4b4f      	ldr	r3, [pc, #316]	; (8003e64 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003d28:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003d2c:	f003 0302 	and.w	r3, r3, #2
 8003d30:	2b02      	cmp	r3, #2
 8003d32:	d10e      	bne.n	8003d52 <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
            frequency = HSI48_VALUE;
 8003d34:	4b4d      	ldr	r3, [pc, #308]	; (8003e6c <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8003d36:	61fb      	str	r3, [r7, #28]
          break;
 8003d38:	e00b      	b.n	8003d52 <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
          break;
 8003d3a:	bf00      	nop
 8003d3c:	f000 bce2 	b.w	8004704 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8003d40:	bf00      	nop
 8003d42:	f000 bcdf 	b.w	8004704 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8003d46:	bf00      	nop
 8003d48:	f000 bcdc 	b.w	8004704 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8003d4c:	bf00      	nop
 8003d4e:	f000 bcd9 	b.w	8004704 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8003d52:	bf00      	nop
        break;
 8003d54:	f000 bcd6 	b.w	8004704 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      if(HAL_IS_BIT_SET(RCC->CCIPR2, RCC_CCIPR2_SDMMCSEL))  /* PLL "P" ? */
 8003d58:	4b42      	ldr	r3, [pc, #264]	; (8003e64 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003d5a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003d5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d62:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003d66:	d13d      	bne.n	8003de4 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8003d68:	4b3e      	ldr	r3, [pc, #248]	; (8003e64 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d70:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003d74:	f040 84c5 	bne.w	8004702 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLPEN))
 8003d78:	4b3a      	ldr	r3, [pc, #232]	; (8003e64 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003d7a:	68db      	ldr	r3, [r3, #12]
 8003d7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d84:	f040 84bd 	bne.w	8004702 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8003d88:	4b36      	ldr	r3, [pc, #216]	; (8003e64 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003d8a:	68db      	ldr	r3, [r3, #12]
 8003d8c:	0a1b      	lsrs	r3, r3, #8
 8003d8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d92:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8003d94:	69bb      	ldr	r3, [r7, #24]
 8003d96:	68ba      	ldr	r2, [r7, #8]
 8003d98:	fb03 f202 	mul.w	r2, r3, r2
 8003d9c:	4b31      	ldr	r3, [pc, #196]	; (8003e64 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003d9e:	68db      	ldr	r3, [r3, #12]
 8003da0:	091b      	lsrs	r3, r3, #4
 8003da2:	f003 030f 	and.w	r3, r3, #15
 8003da6:	3301      	adds	r3, #1
 8003da8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dac:	61bb      	str	r3, [r7, #24]
            pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 8003dae:	4b2d      	ldr	r3, [pc, #180]	; (8003e64 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003db0:	68db      	ldr	r3, [r3, #12]
 8003db2:	0edb      	lsrs	r3, r3, #27
 8003db4:	f003 031f 	and.w	r3, r3, #31
 8003db8:	617b      	str	r3, [r7, #20]
            if(pllp == 0U)
 8003dba:	697b      	ldr	r3, [r7, #20]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d10a      	bne.n	8003dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
              if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8003dc0:	4b28      	ldr	r3, [pc, #160]	; (8003e64 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003dc2:	68db      	ldr	r3, [r3, #12]
 8003dc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d002      	beq.n	8003dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
                pllp = 17U;
 8003dcc:	2311      	movs	r3, #17
 8003dce:	617b      	str	r3, [r7, #20]
 8003dd0:	e001      	b.n	8003dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
                pllp = 7U;
 8003dd2:	2307      	movs	r3, #7
 8003dd4:	617b      	str	r3, [r7, #20]
            frequency = (pllvco / pllp);
 8003dd6:	69ba      	ldr	r2, [r7, #24]
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dde:	61fb      	str	r3, [r7, #28]
      break;
 8003de0:	f000 bc8f 	b.w	8004702 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8003de4:	4b1f      	ldr	r3, [pc, #124]	; (8003e64 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003de6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dea:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8003dee:	60fb      	str	r3, [r7, #12]
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003df6:	d016      	beq.n	8003e26 <HAL_RCCEx_GetPeriphCLKFreq+0x54e>
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003dfe:	f200 809b 	bhi.w	8003f38 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e08:	d032      	beq.n	8003e70 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e10:	f200 8092 	bhi.w	8003f38 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	f000 8084 	beq.w	8003f24 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003e22:	d052      	beq.n	8003eca <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
          break;
 8003e24:	e088      	b.n	8003f38 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8003e26:	4b0f      	ldr	r3, [pc, #60]	; (8003e64 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f003 0302 	and.w	r3, r3, #2
 8003e2e:	2b02      	cmp	r3, #2
 8003e30:	f040 8084 	bne.w	8003f3c <HAL_RCCEx_GetPeriphCLKFreq+0x664>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8003e34:	4b0b      	ldr	r3, [pc, #44]	; (8003e64 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f003 0308 	and.w	r3, r3, #8
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d005      	beq.n	8003e4c <HAL_RCCEx_GetPeriphCLKFreq+0x574>
 8003e40:	4b08      	ldr	r3, [pc, #32]	; (8003e64 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	091b      	lsrs	r3, r3, #4
 8003e46:	f003 030f 	and.w	r3, r3, #15
 8003e4a:	e005      	b.n	8003e58 <HAL_RCCEx_GetPeriphCLKFreq+0x580>
 8003e4c:	4b05      	ldr	r3, [pc, #20]	; (8003e64 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003e4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e52:	0a1b      	lsrs	r3, r3, #8
 8003e54:	f003 030f 	and.w	r3, r3, #15
 8003e58:	4a03      	ldr	r2, [pc, #12]	; (8003e68 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8003e5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e5e:	61fb      	str	r3, [r7, #28]
          break;
 8003e60:	e06c      	b.n	8003f3c <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 8003e62:	bf00      	nop
 8003e64:	40021000 	.word	0x40021000
 8003e68:	08008358 	.word	0x08008358
 8003e6c:	02dc6c00 	.word	0x02dc6c00
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8003e70:	4ba5      	ldr	r3, [pc, #660]	; (8004108 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e78:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003e7c:	d160      	bne.n	8003f40 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8003e7e:	4ba2      	ldr	r3, [pc, #648]	; (8004108 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8003e80:	68db      	ldr	r3, [r3, #12]
 8003e82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e86:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e8a:	d159      	bne.n	8003f40 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8003e8c:	4b9e      	ldr	r3, [pc, #632]	; (8004108 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8003e8e:	68db      	ldr	r3, [r3, #12]
 8003e90:	0a1b      	lsrs	r3, r3, #8
 8003e92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e96:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8003e98:	69bb      	ldr	r3, [r7, #24]
 8003e9a:	68ba      	ldr	r2, [r7, #8]
 8003e9c:	fb03 f202 	mul.w	r2, r3, r2
 8003ea0:	4b99      	ldr	r3, [pc, #612]	; (8004108 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8003ea2:	68db      	ldr	r3, [r3, #12]
 8003ea4:	091b      	lsrs	r3, r3, #4
 8003ea6:	f003 030f 	and.w	r3, r3, #15
 8003eaa:	3301      	adds	r3, #1
 8003eac:	fbb2 f3f3 	udiv	r3, r2, r3
 8003eb0:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8003eb2:	4b95      	ldr	r3, [pc, #596]	; (8004108 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8003eb4:	68db      	ldr	r3, [r3, #12]
 8003eb6:	0d5b      	lsrs	r3, r3, #21
 8003eb8:	f003 0303 	and.w	r3, r3, #3
 8003ebc:	3301      	adds	r3, #1
 8003ebe:	005b      	lsls	r3, r3, #1
 8003ec0:	69ba      	ldr	r2, [r7, #24]
 8003ec2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ec6:	61fb      	str	r3, [r7, #28]
          break;
 8003ec8:	e03a      	b.n	8003f40 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8003eca:	4b8f      	ldr	r3, [pc, #572]	; (8004108 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ed2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003ed6:	d135      	bne.n	8003f44 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8003ed8:	4b8b      	ldr	r3, [pc, #556]	; (8004108 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8003eda:	691b      	ldr	r3, [r3, #16]
 8003edc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ee0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ee4:	d12e      	bne.n	8003f44 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8003ee6:	4b88      	ldr	r3, [pc, #544]	; (8004108 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8003ee8:	691b      	ldr	r3, [r3, #16]
 8003eea:	0a1b      	lsrs	r3, r3, #8
 8003eec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ef0:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8003ef2:	69bb      	ldr	r3, [r7, #24]
 8003ef4:	68ba      	ldr	r2, [r7, #8]
 8003ef6:	fb03 f202 	mul.w	r2, r3, r2
 8003efa:	4b83      	ldr	r3, [pc, #524]	; (8004108 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8003efc:	691b      	ldr	r3, [r3, #16]
 8003efe:	091b      	lsrs	r3, r3, #4
 8003f00:	f003 030f 	and.w	r3, r3, #15
 8003f04:	3301      	adds	r3, #1
 8003f06:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f0a:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8003f0c:	4b7e      	ldr	r3, [pc, #504]	; (8004108 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8003f0e:	691b      	ldr	r3, [r3, #16]
 8003f10:	0d5b      	lsrs	r3, r3, #21
 8003f12:	f003 0303 	and.w	r3, r3, #3
 8003f16:	3301      	adds	r3, #1
 8003f18:	005b      	lsls	r3, r3, #1
 8003f1a:	69ba      	ldr	r2, [r7, #24]
 8003f1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f20:	61fb      	str	r3, [r7, #28]
          break;
 8003f22:	e00f      	b.n	8003f44 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 8003f24:	4b78      	ldr	r3, [pc, #480]	; (8004108 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8003f26:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003f2a:	f003 0302 	and.w	r3, r3, #2
 8003f2e:	2b02      	cmp	r3, #2
 8003f30:	d10a      	bne.n	8003f48 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
            frequency = HSI48_VALUE;
 8003f32:	4b76      	ldr	r3, [pc, #472]	; (800410c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8003f34:	61fb      	str	r3, [r7, #28]
          break;
 8003f36:	e007      	b.n	8003f48 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
          break;
 8003f38:	bf00      	nop
 8003f3a:	e3e2      	b.n	8004702 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          break;
 8003f3c:	bf00      	nop
 8003f3e:	e3e0      	b.n	8004702 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          break;
 8003f40:	bf00      	nop
 8003f42:	e3de      	b.n	8004702 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          break;
 8003f44:	bf00      	nop
 8003f46:	e3dc      	b.n	8004702 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          break;
 8003f48:	bf00      	nop
      break;
 8003f4a:	e3da      	b.n	8004702 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8003f4c:	4b6e      	ldr	r3, [pc, #440]	; (8004108 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8003f4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f52:	f003 0303 	and.w	r3, r3, #3
 8003f56:	60fb      	str	r3, [r7, #12]
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	2b03      	cmp	r3, #3
 8003f5c:	d827      	bhi.n	8003fae <HAL_RCCEx_GetPeriphCLKFreq+0x6d6>
 8003f5e:	a201      	add	r2, pc, #4	; (adr r2, 8003f64 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>)
 8003f60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f64:	08003f75 	.word	0x08003f75
 8003f68:	08003f7d 	.word	0x08003f7d
 8003f6c:	08003f85 	.word	0x08003f85
 8003f70:	08003f99 	.word	0x08003f99
          frequency = HAL_RCC_GetPCLK2Freq();
 8003f74:	f7ff f84c 	bl	8003010 <HAL_RCC_GetPCLK2Freq>
 8003f78:	61f8      	str	r0, [r7, #28]
          break;
 8003f7a:	e01d      	b.n	8003fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
          frequency = HAL_RCC_GetSysClockFreq();
 8003f7c:	f7fe ff9c 	bl	8002eb8 <HAL_RCC_GetSysClockFreq>
 8003f80:	61f8      	str	r0, [r7, #28]
          break;
 8003f82:	e019      	b.n	8003fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003f84:	4b60      	ldr	r3, [pc, #384]	; (8004108 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f90:	d10f      	bne.n	8003fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
            frequency = HSI_VALUE;
 8003f92:	4b5f      	ldr	r3, [pc, #380]	; (8004110 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8003f94:	61fb      	str	r3, [r7, #28]
          break;
 8003f96:	e00c      	b.n	8003fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003f98:	4b5b      	ldr	r3, [pc, #364]	; (8004108 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8003f9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f9e:	f003 0302 	and.w	r3, r3, #2
 8003fa2:	2b02      	cmp	r3, #2
 8003fa4:	d107      	bne.n	8003fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
            frequency = LSE_VALUE;
 8003fa6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003faa:	61fb      	str	r3, [r7, #28]
          break;
 8003fac:	e003      	b.n	8003fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
          break;
 8003fae:	bf00      	nop
 8003fb0:	e3a8      	b.n	8004704 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8003fb2:	bf00      	nop
 8003fb4:	e3a6      	b.n	8004704 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8003fb6:	bf00      	nop
        break;
 8003fb8:	e3a4      	b.n	8004704 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8003fba:	4b53      	ldr	r3, [pc, #332]	; (8004108 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8003fbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fc0:	f003 030c 	and.w	r3, r3, #12
 8003fc4:	60fb      	str	r3, [r7, #12]
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	2b0c      	cmp	r3, #12
 8003fca:	d83a      	bhi.n	8004042 <HAL_RCCEx_GetPeriphCLKFreq+0x76a>
 8003fcc:	a201      	add	r2, pc, #4	; (adr r2, 8003fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>)
 8003fce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fd2:	bf00      	nop
 8003fd4:	08004009 	.word	0x08004009
 8003fd8:	08004043 	.word	0x08004043
 8003fdc:	08004043 	.word	0x08004043
 8003fe0:	08004043 	.word	0x08004043
 8003fe4:	08004011 	.word	0x08004011
 8003fe8:	08004043 	.word	0x08004043
 8003fec:	08004043 	.word	0x08004043
 8003ff0:	08004043 	.word	0x08004043
 8003ff4:	08004019 	.word	0x08004019
 8003ff8:	08004043 	.word	0x08004043
 8003ffc:	08004043 	.word	0x08004043
 8004000:	08004043 	.word	0x08004043
 8004004:	0800402d 	.word	0x0800402d
          frequency = HAL_RCC_GetPCLK1Freq();
 8004008:	f7fe ffec 	bl	8002fe4 <HAL_RCC_GetPCLK1Freq>
 800400c:	61f8      	str	r0, [r7, #28]
          break;
 800400e:	e01d      	b.n	800404c <HAL_RCCEx_GetPeriphCLKFreq+0x774>
          frequency = HAL_RCC_GetSysClockFreq();
 8004010:	f7fe ff52 	bl	8002eb8 <HAL_RCC_GetSysClockFreq>
 8004014:	61f8      	str	r0, [r7, #28]
          break;
 8004016:	e019      	b.n	800404c <HAL_RCCEx_GetPeriphCLKFreq+0x774>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004018:	4b3b      	ldr	r3, [pc, #236]	; (8004108 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004020:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004024:	d10f      	bne.n	8004046 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
            frequency = HSI_VALUE;
 8004026:	4b3a      	ldr	r3, [pc, #232]	; (8004110 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8004028:	61fb      	str	r3, [r7, #28]
          break;
 800402a:	e00c      	b.n	8004046 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800402c:	4b36      	ldr	r3, [pc, #216]	; (8004108 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800402e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004032:	f003 0302 	and.w	r3, r3, #2
 8004036:	2b02      	cmp	r3, #2
 8004038:	d107      	bne.n	800404a <HAL_RCCEx_GetPeriphCLKFreq+0x772>
            frequency = LSE_VALUE;
 800403a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800403e:	61fb      	str	r3, [r7, #28]
          break;
 8004040:	e003      	b.n	800404a <HAL_RCCEx_GetPeriphCLKFreq+0x772>
          break;
 8004042:	bf00      	nop
 8004044:	e35e      	b.n	8004704 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004046:	bf00      	nop
 8004048:	e35c      	b.n	8004704 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800404a:	bf00      	nop
        break;
 800404c:	e35a      	b.n	8004704 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800404e:	4b2e      	ldr	r3, [pc, #184]	; (8004108 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004050:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004054:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004058:	60fb      	str	r3, [r7, #12]
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	2b30      	cmp	r3, #48	; 0x30
 800405e:	d021      	beq.n	80040a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	2b30      	cmp	r3, #48	; 0x30
 8004064:	d829      	bhi.n	80040ba <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	2b20      	cmp	r3, #32
 800406a:	d011      	beq.n	8004090 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	2b20      	cmp	r3, #32
 8004070:	d823      	bhi.n	80040ba <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d003      	beq.n	8004080 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	2b10      	cmp	r3, #16
 800407c:	d004      	beq.n	8004088 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>
          break;
 800407e:	e01c      	b.n	80040ba <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004080:	f7fe ffb0 	bl	8002fe4 <HAL_RCC_GetPCLK1Freq>
 8004084:	61f8      	str	r0, [r7, #28]
          break;
 8004086:	e01d      	b.n	80040c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ec>
          frequency = HAL_RCC_GetSysClockFreq();
 8004088:	f7fe ff16 	bl	8002eb8 <HAL_RCC_GetSysClockFreq>
 800408c:	61f8      	str	r0, [r7, #28]
          break;
 800408e:	e019      	b.n	80040c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ec>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004090:	4b1d      	ldr	r3, [pc, #116]	; (8004108 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004098:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800409c:	d10f      	bne.n	80040be <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
            frequency = HSI_VALUE;
 800409e:	4b1c      	ldr	r3, [pc, #112]	; (8004110 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 80040a0:	61fb      	str	r3, [r7, #28]
          break;
 80040a2:	e00c      	b.n	80040be <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80040a4:	4b18      	ldr	r3, [pc, #96]	; (8004108 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80040a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040aa:	f003 0302 	and.w	r3, r3, #2
 80040ae:	2b02      	cmp	r3, #2
 80040b0:	d107      	bne.n	80040c2 <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
            frequency = LSE_VALUE;
 80040b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80040b6:	61fb      	str	r3, [r7, #28]
          break;
 80040b8:	e003      	b.n	80040c2 <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
          break;
 80040ba:	bf00      	nop
 80040bc:	e322      	b.n	8004704 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80040be:	bf00      	nop
 80040c0:	e320      	b.n	8004704 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80040c2:	bf00      	nop
        break;
 80040c4:	e31e      	b.n	8004704 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 80040c6:	4b10      	ldr	r3, [pc, #64]	; (8004108 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80040c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040cc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80040d0:	60fb      	str	r3, [r7, #12]
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	2bc0      	cmp	r3, #192	; 0xc0
 80040d6:	d027      	beq.n	8004128 <HAL_RCCEx_GetPeriphCLKFreq+0x850>
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	2bc0      	cmp	r3, #192	; 0xc0
 80040dc:	d82f      	bhi.n	800413e <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	2b80      	cmp	r3, #128	; 0x80
 80040e2:	d017      	beq.n	8004114 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	2b80      	cmp	r3, #128	; 0x80
 80040e8:	d829      	bhi.n	800413e <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d003      	beq.n	80040f8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	2b40      	cmp	r3, #64	; 0x40
 80040f4:	d004      	beq.n	8004100 <HAL_RCCEx_GetPeriphCLKFreq+0x828>
          break;
 80040f6:	e022      	b.n	800413e <HAL_RCCEx_GetPeriphCLKFreq+0x866>
          frequency = HAL_RCC_GetPCLK1Freq();
 80040f8:	f7fe ff74 	bl	8002fe4 <HAL_RCC_GetPCLK1Freq>
 80040fc:	61f8      	str	r0, [r7, #28]
          break;
 80040fe:	e023      	b.n	8004148 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
          frequency = HAL_RCC_GetSysClockFreq();
 8004100:	f7fe feda 	bl	8002eb8 <HAL_RCC_GetSysClockFreq>
 8004104:	61f8      	str	r0, [r7, #28]
          break;
 8004106:	e01f      	b.n	8004148 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
 8004108:	40021000 	.word	0x40021000
 800410c:	02dc6c00 	.word	0x02dc6c00
 8004110:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004114:	4b9b      	ldr	r3, [pc, #620]	; (8004384 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800411c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004120:	d10f      	bne.n	8004142 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
            frequency = HSI_VALUE;
 8004122:	4b99      	ldr	r3, [pc, #612]	; (8004388 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8004124:	61fb      	str	r3, [r7, #28]
          break;
 8004126:	e00c      	b.n	8004142 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004128:	4b96      	ldr	r3, [pc, #600]	; (8004384 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 800412a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800412e:	f003 0302 	and.w	r3, r3, #2
 8004132:	2b02      	cmp	r3, #2
 8004134:	d107      	bne.n	8004146 <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
            frequency = LSE_VALUE;
 8004136:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800413a:	61fb      	str	r3, [r7, #28]
          break;
 800413c:	e003      	b.n	8004146 <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
          break;
 800413e:	bf00      	nop
 8004140:	e2e0      	b.n	8004704 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004142:	bf00      	nop
 8004144:	e2de      	b.n	8004704 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004146:	bf00      	nop
        break;
 8004148:	e2dc      	b.n	8004704 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800414a:	4b8e      	ldr	r3, [pc, #568]	; (8004384 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 800414c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004150:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004154:	60fb      	str	r3, [r7, #12]
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800415c:	d025      	beq.n	80041aa <HAL_RCCEx_GetPeriphCLKFreq+0x8d2>
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004164:	d82c      	bhi.n	80041c0 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800416c:	d013      	beq.n	8004196 <HAL_RCCEx_GetPeriphCLKFreq+0x8be>
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004174:	d824      	bhi.n	80041c0 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d004      	beq.n	8004186 <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004182:	d004      	beq.n	800418e <HAL_RCCEx_GetPeriphCLKFreq+0x8b6>
          break;
 8004184:	e01c      	b.n	80041c0 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004186:	f7fe ff2d 	bl	8002fe4 <HAL_RCC_GetPCLK1Freq>
 800418a:	61f8      	str	r0, [r7, #28]
          break;
 800418c:	e01d      	b.n	80041ca <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
          frequency = HAL_RCC_GetSysClockFreq();
 800418e:	f7fe fe93 	bl	8002eb8 <HAL_RCC_GetSysClockFreq>
 8004192:	61f8      	str	r0, [r7, #28]
          break;
 8004194:	e019      	b.n	80041ca <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004196:	4b7b      	ldr	r3, [pc, #492]	; (8004384 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800419e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041a2:	d10f      	bne.n	80041c4 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
            frequency = HSI_VALUE;
 80041a4:	4b78      	ldr	r3, [pc, #480]	; (8004388 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80041a6:	61fb      	str	r3, [r7, #28]
          break;
 80041a8:	e00c      	b.n	80041c4 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80041aa:	4b76      	ldr	r3, [pc, #472]	; (8004384 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80041ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041b0:	f003 0302 	and.w	r3, r3, #2
 80041b4:	2b02      	cmp	r3, #2
 80041b6:	d107      	bne.n	80041c8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
            frequency = LSE_VALUE;
 80041b8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80041bc:	61fb      	str	r3, [r7, #28]
          break;
 80041be:	e003      	b.n	80041c8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          break;
 80041c0:	bf00      	nop
 80041c2:	e29f      	b.n	8004704 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80041c4:	bf00      	nop
 80041c6:	e29d      	b.n	8004704 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80041c8:	bf00      	nop
        break;
 80041ca:	e29b      	b.n	8004704 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 80041cc:	4b6d      	ldr	r3, [pc, #436]	; (8004384 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80041ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041d2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80041d6:	60fb      	str	r3, [r7, #12]
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80041de:	d025      	beq.n	800422c <HAL_RCCEx_GetPeriphCLKFreq+0x954>
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80041e6:	d82c      	bhi.n	8004242 <HAL_RCCEx_GetPeriphCLKFreq+0x96a>
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041ee:	d013      	beq.n	8004218 <HAL_RCCEx_GetPeriphCLKFreq+0x940>
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041f6:	d824      	bhi.n	8004242 <HAL_RCCEx_GetPeriphCLKFreq+0x96a>
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d004      	beq.n	8004208 <HAL_RCCEx_GetPeriphCLKFreq+0x930>
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004204:	d004      	beq.n	8004210 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
          break;
 8004206:	e01c      	b.n	8004242 <HAL_RCCEx_GetPeriphCLKFreq+0x96a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004208:	f7fe feec 	bl	8002fe4 <HAL_RCC_GetPCLK1Freq>
 800420c:	61f8      	str	r0, [r7, #28]
          break;
 800420e:	e01d      	b.n	800424c <HAL_RCCEx_GetPeriphCLKFreq+0x974>
          frequency = HAL_RCC_GetSysClockFreq();
 8004210:	f7fe fe52 	bl	8002eb8 <HAL_RCC_GetSysClockFreq>
 8004214:	61f8      	str	r0, [r7, #28]
          break;
 8004216:	e019      	b.n	800424c <HAL_RCCEx_GetPeriphCLKFreq+0x974>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004218:	4b5a      	ldr	r3, [pc, #360]	; (8004384 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004220:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004224:	d10f      	bne.n	8004246 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
            frequency = HSI_VALUE;
 8004226:	4b58      	ldr	r3, [pc, #352]	; (8004388 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8004228:	61fb      	str	r3, [r7, #28]
          break;
 800422a:	e00c      	b.n	8004246 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800422c:	4b55      	ldr	r3, [pc, #340]	; (8004384 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 800422e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004232:	f003 0302 	and.w	r3, r3, #2
 8004236:	2b02      	cmp	r3, #2
 8004238:	d107      	bne.n	800424a <HAL_RCCEx_GetPeriphCLKFreq+0x972>
            frequency = LSE_VALUE;
 800423a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800423e:	61fb      	str	r3, [r7, #28]
          break;
 8004240:	e003      	b.n	800424a <HAL_RCCEx_GetPeriphCLKFreq+0x972>
          break;
 8004242:	bf00      	nop
 8004244:	e25e      	b.n	8004704 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004246:	bf00      	nop
 8004248:	e25c      	b.n	8004704 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800424a:	bf00      	nop
        break;
 800424c:	e25a      	b.n	8004704 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800424e:	4b4d      	ldr	r3, [pc, #308]	; (8004384 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8004250:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004254:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004258:	60fb      	str	r3, [r7, #12]
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004260:	d007      	beq.n	8004272 <HAL_RCCEx_GetPeriphCLKFreq+0x99a>
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004268:	d12f      	bne.n	80042ca <HAL_RCCEx_GetPeriphCLKFreq+0x9f2>
          frequency = HAL_RCC_GetSysClockFreq();
 800426a:	f7fe fe25 	bl	8002eb8 <HAL_RCC_GetSysClockFreq>
 800426e:	61f8      	str	r0, [r7, #28]
          break;
 8004270:	e02e      	b.n	80042d0 <HAL_RCCEx_GetPeriphCLKFreq+0x9f8>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 8004272:	4b44      	ldr	r3, [pc, #272]	; (8004384 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800427a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800427e:	d126      	bne.n	80042ce <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
 8004280:	4b40      	ldr	r3, [pc, #256]	; (8004384 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8004282:	691b      	ldr	r3, [r3, #16]
 8004284:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004288:	2b00      	cmp	r3, #0
 800428a:	d020      	beq.n	80042ce <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800428c:	4b3d      	ldr	r3, [pc, #244]	; (8004384 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 800428e:	691b      	ldr	r3, [r3, #16]
 8004290:	0a1b      	lsrs	r3, r3, #8
 8004292:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004296:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8004298:	69bb      	ldr	r3, [r7, #24]
 800429a:	68ba      	ldr	r2, [r7, #8]
 800429c:	fb03 f202 	mul.w	r2, r3, r2
 80042a0:	4b38      	ldr	r3, [pc, #224]	; (8004384 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80042a2:	691b      	ldr	r3, [r3, #16]
 80042a4:	091b      	lsrs	r3, r3, #4
 80042a6:	f003 030f 	and.w	r3, r3, #15
 80042aa:	3301      	adds	r3, #1
 80042ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80042b0:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 80042b2:	4b34      	ldr	r3, [pc, #208]	; (8004384 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80042b4:	691b      	ldr	r3, [r3, #16]
 80042b6:	0e5b      	lsrs	r3, r3, #25
 80042b8:	f003 0303 	and.w	r3, r3, #3
 80042bc:	3301      	adds	r3, #1
 80042be:	005b      	lsls	r3, r3, #1
 80042c0:	69ba      	ldr	r2, [r7, #24]
 80042c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80042c6:	61fb      	str	r3, [r7, #28]
          break;
 80042c8:	e001      	b.n	80042ce <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
          break;
 80042ca:	bf00      	nop
 80042cc:	e21a      	b.n	8004704 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80042ce:	bf00      	nop
        break;
 80042d0:	e218      	b.n	8004704 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 80042d2:	4b2c      	ldr	r3, [pc, #176]	; (8004384 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80042d4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80042d8:	f003 0304 	and.w	r3, r3, #4
 80042dc:	60fb      	str	r3, [r7, #12]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d103      	bne.n	80042ec <HAL_RCCEx_GetPeriphCLKFreq+0xa14>
          frequency = HAL_RCC_GetPCLK2Freq();
 80042e4:	f7fe fe94 	bl	8003010 <HAL_RCC_GetPCLK2Freq>
 80042e8:	61f8      	str	r0, [r7, #28]
        break;
 80042ea:	e20b      	b.n	8004704 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          frequency = HAL_RCC_GetSysClockFreq();
 80042ec:	f7fe fde4 	bl	8002eb8 <HAL_RCC_GetSysClockFreq>
 80042f0:	61f8      	str	r0, [r7, #28]
        break;
 80042f2:	e207      	b.n	8004704 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
 80042f4:	4b23      	ldr	r3, [pc, #140]	; (8004384 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80042f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80042fa:	f003 0318 	and.w	r3, r3, #24
 80042fe:	60fb      	str	r3, [r7, #12]
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	2b10      	cmp	r3, #16
 8004304:	d010      	beq.n	8004328 <HAL_RCCEx_GetPeriphCLKFreq+0xa50>
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	2b10      	cmp	r3, #16
 800430a:	d834      	bhi.n	8004376 <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d003      	beq.n	800431a <HAL_RCCEx_GetPeriphCLKFreq+0xa42>
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	2b08      	cmp	r3, #8
 8004316:	d024      	beq.n	8004362 <HAL_RCCEx_GetPeriphCLKFreq+0xa8a>
          break;
 8004318:	e02d      	b.n	8004376 <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
          frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 800431a:	69b9      	ldr	r1, [r7, #24]
 800431c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004320:	f000 fbe2 	bl	8004ae8 <RCCEx_GetSAIxPeriphCLKFreq>
 8004324:	61f8      	str	r0, [r7, #28]
          break;
 8004326:	e02b      	b.n	8004380 <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8004328:	4b16      	ldr	r3, [pc, #88]	; (8004384 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f003 0302 	and.w	r3, r3, #2
 8004330:	2b02      	cmp	r3, #2
 8004332:	d122      	bne.n	800437a <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8004334:	4b13      	ldr	r3, [pc, #76]	; (8004384 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f003 0308 	and.w	r3, r3, #8
 800433c:	2b00      	cmp	r3, #0
 800433e:	d005      	beq.n	800434c <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
 8004340:	4b10      	ldr	r3, [pc, #64]	; (8004384 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	091b      	lsrs	r3, r3, #4
 8004346:	f003 030f 	and.w	r3, r3, #15
 800434a:	e005      	b.n	8004358 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 800434c:	4b0d      	ldr	r3, [pc, #52]	; (8004384 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 800434e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004352:	0a1b      	lsrs	r3, r3, #8
 8004354:	f003 030f 	and.w	r3, r3, #15
 8004358:	4a0c      	ldr	r2, [pc, #48]	; (800438c <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 800435a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800435e:	61fb      	str	r3, [r7, #28]
          break;
 8004360:	e00b      	b.n	800437a <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004362:	4b08      	ldr	r3, [pc, #32]	; (8004384 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800436a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800436e:	d106      	bne.n	800437e <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
            frequency = HSI_VALUE;
 8004370:	4b05      	ldr	r3, [pc, #20]	; (8004388 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8004372:	61fb      	str	r3, [r7, #28]
          break;
 8004374:	e003      	b.n	800437e <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
          break;
 8004376:	bf00      	nop
 8004378:	e1c4      	b.n	8004704 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800437a:	bf00      	nop
 800437c:	e1c2      	b.n	8004704 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800437e:	bf00      	nop
        break;
 8004380:	e1c0      	b.n	8004704 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
 8004382:	bf00      	nop
 8004384:	40021000 	.word	0x40021000
 8004388:	00f42400 	.word	0x00f42400
 800438c:	08008358 	.word	0x08008358
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8004390:	4b96      	ldr	r3, [pc, #600]	; (80045ec <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8004392:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004396:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800439a:	60fb      	str	r3, [r7, #12]
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043a2:	d013      	beq.n	80043cc <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043aa:	d819      	bhi.n	80043e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d004      	beq.n	80043bc <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043b8:	d004      	beq.n	80043c4 <HAL_RCCEx_GetPeriphCLKFreq+0xaec>
          break;
 80043ba:	e011      	b.n	80043e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>
          frequency = HAL_RCC_GetPCLK1Freq();
 80043bc:	f7fe fe12 	bl	8002fe4 <HAL_RCC_GetPCLK1Freq>
 80043c0:	61f8      	str	r0, [r7, #28]
          break;
 80043c2:	e010      	b.n	80043e6 <HAL_RCCEx_GetPeriphCLKFreq+0xb0e>
          frequency = HAL_RCC_GetSysClockFreq();
 80043c4:	f7fe fd78 	bl	8002eb8 <HAL_RCC_GetSysClockFreq>
 80043c8:	61f8      	str	r0, [r7, #28]
          break;
 80043ca:	e00c      	b.n	80043e6 <HAL_RCCEx_GetPeriphCLKFreq+0xb0e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80043cc:	4b87      	ldr	r3, [pc, #540]	; (80045ec <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043d8:	d104      	bne.n	80043e4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
            frequency = HSI_VALUE;
 80043da:	4b85      	ldr	r3, [pc, #532]	; (80045f0 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80043dc:	61fb      	str	r3, [r7, #28]
          break;
 80043de:	e001      	b.n	80043e4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
          break;
 80043e0:	bf00      	nop
 80043e2:	e18f      	b.n	8004704 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80043e4:	bf00      	nop
        break;
 80043e6:	e18d      	b.n	8004704 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 80043e8:	4b80      	ldr	r3, [pc, #512]	; (80045ec <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 80043ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043ee:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80043f2:	60fb      	str	r3, [r7, #12]
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043fa:	d013      	beq.n	8004424 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004402:	d819      	bhi.n	8004438 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d004      	beq.n	8004414 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004410:	d004      	beq.n	800441c <HAL_RCCEx_GetPeriphCLKFreq+0xb44>
          break;
 8004412:	e011      	b.n	8004438 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004414:	f7fe fde6 	bl	8002fe4 <HAL_RCC_GetPCLK1Freq>
 8004418:	61f8      	str	r0, [r7, #28]
          break;
 800441a:	e010      	b.n	800443e <HAL_RCCEx_GetPeriphCLKFreq+0xb66>
          frequency = HAL_RCC_GetSysClockFreq();
 800441c:	f7fe fd4c 	bl	8002eb8 <HAL_RCC_GetSysClockFreq>
 8004420:	61f8      	str	r0, [r7, #28]
          break;
 8004422:	e00c      	b.n	800443e <HAL_RCCEx_GetPeriphCLKFreq+0xb66>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004424:	4b71      	ldr	r3, [pc, #452]	; (80045ec <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800442c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004430:	d104      	bne.n	800443c <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
            frequency = HSI_VALUE;
 8004432:	4b6f      	ldr	r3, [pc, #444]	; (80045f0 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8004434:	61fb      	str	r3, [r7, #28]
          break;
 8004436:	e001      	b.n	800443c <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
          break;
 8004438:	bf00      	nop
 800443a:	e163      	b.n	8004704 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800443c:	bf00      	nop
        break;
 800443e:	e161      	b.n	8004704 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8004440:	4b6a      	ldr	r3, [pc, #424]	; (80045ec <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8004442:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004446:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800444a:	60fb      	str	r3, [r7, #12]
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004452:	d013      	beq.n	800447c <HAL_RCCEx_GetPeriphCLKFreq+0xba4>
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800445a:	d819      	bhi.n	8004490 <HAL_RCCEx_GetPeriphCLKFreq+0xbb8>
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d004      	beq.n	800446c <HAL_RCCEx_GetPeriphCLKFreq+0xb94>
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004468:	d004      	beq.n	8004474 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>
          break;
 800446a:	e011      	b.n	8004490 <HAL_RCCEx_GetPeriphCLKFreq+0xbb8>
          frequency = HAL_RCC_GetPCLK1Freq();
 800446c:	f7fe fdba 	bl	8002fe4 <HAL_RCC_GetPCLK1Freq>
 8004470:	61f8      	str	r0, [r7, #28]
          break;
 8004472:	e010      	b.n	8004496 <HAL_RCCEx_GetPeriphCLKFreq+0xbbe>
          frequency = HAL_RCC_GetSysClockFreq();
 8004474:	f7fe fd20 	bl	8002eb8 <HAL_RCC_GetSysClockFreq>
 8004478:	61f8      	str	r0, [r7, #28]
          break;
 800447a:	e00c      	b.n	8004496 <HAL_RCCEx_GetPeriphCLKFreq+0xbbe>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800447c:	4b5b      	ldr	r3, [pc, #364]	; (80045ec <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004484:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004488:	d104      	bne.n	8004494 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
            frequency = HSI_VALUE;
 800448a:	4b59      	ldr	r3, [pc, #356]	; (80045f0 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800448c:	61fb      	str	r3, [r7, #28]
          break;
 800448e:	e001      	b.n	8004494 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
          break;
 8004490:	bf00      	nop
 8004492:	e137      	b.n	8004704 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004494:	bf00      	nop
        break;
 8004496:	e135      	b.n	8004704 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8004498:	4b54      	ldr	r3, [pc, #336]	; (80045ec <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 800449a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800449e:	f003 0303 	and.w	r3, r3, #3
 80044a2:	60fb      	str	r3, [r7, #12]
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	2b02      	cmp	r3, #2
 80044a8:	d011      	beq.n	80044ce <HAL_RCCEx_GetPeriphCLKFreq+0xbf6>
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	2b02      	cmp	r3, #2
 80044ae:	d818      	bhi.n	80044e2 <HAL_RCCEx_GetPeriphCLKFreq+0xc0a>
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d003      	beq.n	80044be <HAL_RCCEx_GetPeriphCLKFreq+0xbe6>
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	2b01      	cmp	r3, #1
 80044ba:	d004      	beq.n	80044c6 <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
          break;
 80044bc:	e011      	b.n	80044e2 <HAL_RCCEx_GetPeriphCLKFreq+0xc0a>
          frequency = HAL_RCC_GetPCLK1Freq();
 80044be:	f7fe fd91 	bl	8002fe4 <HAL_RCC_GetPCLK1Freq>
 80044c2:	61f8      	str	r0, [r7, #28]
          break;
 80044c4:	e010      	b.n	80044e8 <HAL_RCCEx_GetPeriphCLKFreq+0xc10>
          frequency = HAL_RCC_GetSysClockFreq();
 80044c6:	f7fe fcf7 	bl	8002eb8 <HAL_RCC_GetSysClockFreq>
 80044ca:	61f8      	str	r0, [r7, #28]
          break;
 80044cc:	e00c      	b.n	80044e8 <HAL_RCCEx_GetPeriphCLKFreq+0xc10>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80044ce:	4b47      	ldr	r3, [pc, #284]	; (80045ec <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044da:	d104      	bne.n	80044e6 <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
            frequency = HSI_VALUE;
 80044dc:	4b44      	ldr	r3, [pc, #272]	; (80045f0 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80044de:	61fb      	str	r3, [r7, #28]
          break;
 80044e0:	e001      	b.n	80044e6 <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
          break;
 80044e2:	bf00      	nop
 80044e4:	e10e      	b.n	8004704 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80044e6:	bf00      	nop
        break;
 80044e8:	e10c      	b.n	8004704 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 80044ea:	4b40      	ldr	r3, [pc, #256]	; (80045ec <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 80044ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044f0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80044f4:	60fb      	str	r3, [r7, #12]
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80044fc:	d02c      	beq.n	8004558 <HAL_RCCEx_GetPeriphCLKFreq+0xc80>
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004504:	d833      	bhi.n	800456e <HAL_RCCEx_GetPeriphCLKFreq+0xc96>
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800450c:	d01a      	beq.n	8004544 <HAL_RCCEx_GetPeriphCLKFreq+0xc6c>
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004514:	d82b      	bhi.n	800456e <HAL_RCCEx_GetPeriphCLKFreq+0xc96>
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d004      	beq.n	8004526 <HAL_RCCEx_GetPeriphCLKFreq+0xc4e>
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004522:	d004      	beq.n	800452e <HAL_RCCEx_GetPeriphCLKFreq+0xc56>
          break;
 8004524:	e023      	b.n	800456e <HAL_RCCEx_GetPeriphCLKFreq+0xc96>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004526:	f7fe fd5d 	bl	8002fe4 <HAL_RCC_GetPCLK1Freq>
 800452a:	61f8      	str	r0, [r7, #28]
          break;
 800452c:	e026      	b.n	800457c <HAL_RCCEx_GetPeriphCLKFreq+0xca4>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800452e:	4b2f      	ldr	r3, [pc, #188]	; (80045ec <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8004530:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004534:	f003 0302 	and.w	r3, r3, #2
 8004538:	2b02      	cmp	r3, #2
 800453a:	d11a      	bne.n	8004572 <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
              frequency = LSI_VALUE;
 800453c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8004540:	61fb      	str	r3, [r7, #28]
          break;
 8004542:	e016      	b.n	8004572 <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004544:	4b29      	ldr	r3, [pc, #164]	; (80045ec <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800454c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004550:	d111      	bne.n	8004576 <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
            frequency = HSI_VALUE;
 8004552:	4b27      	ldr	r3, [pc, #156]	; (80045f0 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8004554:	61fb      	str	r3, [r7, #28]
          break;
 8004556:	e00e      	b.n	8004576 <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004558:	4b24      	ldr	r3, [pc, #144]	; (80045ec <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 800455a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800455e:	f003 0302 	and.w	r3, r3, #2
 8004562:	2b02      	cmp	r3, #2
 8004564:	d109      	bne.n	800457a <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
            frequency = LSE_VALUE;
 8004566:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800456a:	61fb      	str	r3, [r7, #28]
          break;
 800456c:	e005      	b.n	800457a <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
          break;
 800456e:	bf00      	nop
 8004570:	e0c8      	b.n	8004704 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004572:	bf00      	nop
 8004574:	e0c6      	b.n	8004704 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004576:	bf00      	nop
 8004578:	e0c4      	b.n	8004704 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800457a:	bf00      	nop
        break;
 800457c:	e0c2      	b.n	8004704 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800457e:	4b1b      	ldr	r3, [pc, #108]	; (80045ec <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8004580:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004584:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004588:	60fb      	str	r3, [r7, #12]
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004590:	d030      	beq.n	80045f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004598:	d837      	bhi.n	800460a <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80045a0:	d01a      	beq.n	80045d8 <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80045a8:	d82f      	bhi.n	800460a <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d004      	beq.n	80045ba <HAL_RCCEx_GetPeriphCLKFreq+0xce2>
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80045b6:	d004      	beq.n	80045c2 <HAL_RCCEx_GetPeriphCLKFreq+0xcea>
          break;
 80045b8:	e027      	b.n	800460a <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
          frequency = HAL_RCC_GetPCLK1Freq();
 80045ba:	f7fe fd13 	bl	8002fe4 <HAL_RCC_GetPCLK1Freq>
 80045be:	61f8      	str	r0, [r7, #28]
          break;
 80045c0:	e02a      	b.n	8004618 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80045c2:	4b0a      	ldr	r3, [pc, #40]	; (80045ec <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 80045c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80045c8:	f003 0302 	and.w	r3, r3, #2
 80045cc:	2b02      	cmp	r3, #2
 80045ce:	d11e      	bne.n	800460e <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
              frequency = LSI_VALUE;
 80045d0:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80045d4:	61fb      	str	r3, [r7, #28]
          break;
 80045d6:	e01a      	b.n	800460e <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80045d8:	4b04      	ldr	r3, [pc, #16]	; (80045ec <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045e4:	d115      	bne.n	8004612 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
            frequency = HSI_VALUE;
 80045e6:	4b02      	ldr	r3, [pc, #8]	; (80045f0 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80045e8:	61fb      	str	r3, [r7, #28]
          break;
 80045ea:	e012      	b.n	8004612 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
 80045ec:	40021000 	.word	0x40021000
 80045f0:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80045f4:	4b46      	ldr	r3, [pc, #280]	; (8004710 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 80045f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045fa:	f003 0302 	and.w	r3, r3, #2
 80045fe:	2b02      	cmp	r3, #2
 8004600:	d109      	bne.n	8004616 <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
            frequency = LSE_VALUE;
 8004602:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004606:	61fb      	str	r3, [r7, #28]
          break;
 8004608:	e005      	b.n	8004616 <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
          break;
 800460a:	bf00      	nop
 800460c:	e07a      	b.n	8004704 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800460e:	bf00      	nop
 8004610:	e078      	b.n	8004704 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004612:	bf00      	nop
 8004614:	e076      	b.n	8004704 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004616:	bf00      	nop
        break;
 8004618:	e074      	b.n	8004704 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800461a:	4b3d      	ldr	r3, [pc, #244]	; (8004710 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 800461c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004620:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004624:	60fb      	str	r3, [r7, #12]
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800462c:	d02c      	beq.n	8004688 <HAL_RCCEx_GetPeriphCLKFreq+0xdb0>
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004634:	d855      	bhi.n	80046e2 <HAL_RCCEx_GetPeriphCLKFreq+0xe0a>
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d004      	beq.n	8004646 <HAL_RCCEx_GetPeriphCLKFreq+0xd6e>
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004642:	d004      	beq.n	800464e <HAL_RCCEx_GetPeriphCLKFreq+0xd76>
          break;
 8004644:	e04d      	b.n	80046e2 <HAL_RCCEx_GetPeriphCLKFreq+0xe0a>
          frequency = HAL_RCC_GetSysClockFreq();
 8004646:	f7fe fc37 	bl	8002eb8 <HAL_RCC_GetSysClockFreq>
 800464a:	61f8      	str	r0, [r7, #28]
          break;
 800464c:	e04e      	b.n	80046ec <HAL_RCCEx_GetPeriphCLKFreq+0xe14>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800464e:	4b30      	ldr	r3, [pc, #192]	; (8004710 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f003 0302 	and.w	r3, r3, #2
 8004656:	2b02      	cmp	r3, #2
 8004658:	d145      	bne.n	80046e6 <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800465a:	4b2d      	ldr	r3, [pc, #180]	; (8004710 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f003 0308 	and.w	r3, r3, #8
 8004662:	2b00      	cmp	r3, #0
 8004664:	d005      	beq.n	8004672 <HAL_RCCEx_GetPeriphCLKFreq+0xd9a>
 8004666:	4b2a      	ldr	r3, [pc, #168]	; (8004710 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	091b      	lsrs	r3, r3, #4
 800466c:	f003 030f 	and.w	r3, r3, #15
 8004670:	e005      	b.n	800467e <HAL_RCCEx_GetPeriphCLKFreq+0xda6>
 8004672:	4b27      	ldr	r3, [pc, #156]	; (8004710 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8004674:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004678:	0a1b      	lsrs	r3, r3, #8
 800467a:	f003 030f 	and.w	r3, r3, #15
 800467e:	4a25      	ldr	r2, [pc, #148]	; (8004714 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8004680:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004684:	61fb      	str	r3, [r7, #28]
          break;
 8004686:	e02e      	b.n	80046e6 <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8004688:	4b21      	ldr	r3, [pc, #132]	; (8004710 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004690:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004694:	d129      	bne.n	80046ea <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8004696:	4b1e      	ldr	r3, [pc, #120]	; (8004710 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8004698:	68db      	ldr	r3, [r3, #12]
 800469a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800469e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80046a2:	d122      	bne.n	80046ea <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80046a4:	4b1a      	ldr	r3, [pc, #104]	; (8004710 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 80046a6:	68db      	ldr	r3, [r3, #12]
 80046a8:	0a1b      	lsrs	r3, r3, #8
 80046aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80046ae:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80046b0:	69bb      	ldr	r3, [r7, #24]
 80046b2:	68ba      	ldr	r2, [r7, #8]
 80046b4:	fb03 f202 	mul.w	r2, r3, r2
 80046b8:	4b15      	ldr	r3, [pc, #84]	; (8004710 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 80046ba:	68db      	ldr	r3, [r3, #12]
 80046bc:	091b      	lsrs	r3, r3, #4
 80046be:	f003 030f 	and.w	r3, r3, #15
 80046c2:	3301      	adds	r3, #1
 80046c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80046c8:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 80046ca:	4b11      	ldr	r3, [pc, #68]	; (8004710 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 80046cc:	68db      	ldr	r3, [r3, #12]
 80046ce:	0d5b      	lsrs	r3, r3, #21
 80046d0:	f003 0303 	and.w	r3, r3, #3
 80046d4:	3301      	adds	r3, #1
 80046d6:	005b      	lsls	r3, r3, #1
 80046d8:	69ba      	ldr	r2, [r7, #24]
 80046da:	fbb2 f3f3 	udiv	r3, r2, r3
 80046de:	61fb      	str	r3, [r7, #28]
          break;
 80046e0:	e003      	b.n	80046ea <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
          break;
 80046e2:	bf00      	nop
 80046e4:	e00e      	b.n	8004704 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80046e6:	bf00      	nop
 80046e8:	e00c      	b.n	8004704 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80046ea:	bf00      	nop
        break;
 80046ec:	e00a      	b.n	8004704 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 80046ee:	bf00      	nop
 80046f0:	e008      	b.n	8004704 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 80046f2:	bf00      	nop
 80046f4:	e006      	b.n	8004704 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 80046f6:	bf00      	nop
 80046f8:	e004      	b.n	8004704 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 80046fa:	bf00      	nop
 80046fc:	e002      	b.n	8004704 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 80046fe:	bf00      	nop
 8004700:	e000      	b.n	8004704 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 8004702:	bf00      	nop
    }
  }

  return(frequency);
 8004704:	69fb      	ldr	r3, [r7, #28]
}
 8004706:	4618      	mov	r0, r3
 8004708:	3720      	adds	r7, #32
 800470a:	46bd      	mov	sp, r7
 800470c:	bd80      	pop	{r7, pc}
 800470e:	bf00      	nop
 8004710:	40021000 	.word	0x40021000
 8004714:	08008358 	.word	0x08008358

08004718 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b084      	sub	sp, #16
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
 8004720:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004722:	2300      	movs	r3, #0
 8004724:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004726:	4b72      	ldr	r3, [pc, #456]	; (80048f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004728:	68db      	ldr	r3, [r3, #12]
 800472a:	f003 0303 	and.w	r3, r3, #3
 800472e:	2b00      	cmp	r3, #0
 8004730:	d00e      	beq.n	8004750 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004732:	4b6f      	ldr	r3, [pc, #444]	; (80048f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004734:	68db      	ldr	r3, [r3, #12]
 8004736:	f003 0203 	and.w	r2, r3, #3
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	429a      	cmp	r2, r3
 8004740:	d103      	bne.n	800474a <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
       ||
 8004746:	2b00      	cmp	r3, #0
 8004748:	d142      	bne.n	80047d0 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800474a:	2301      	movs	r3, #1
 800474c:	73fb      	strb	r3, [r7, #15]
 800474e:	e03f      	b.n	80047d0 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	2b03      	cmp	r3, #3
 8004756:	d018      	beq.n	800478a <RCCEx_PLLSAI1_Config+0x72>
 8004758:	2b03      	cmp	r3, #3
 800475a:	d825      	bhi.n	80047a8 <RCCEx_PLLSAI1_Config+0x90>
 800475c:	2b01      	cmp	r3, #1
 800475e:	d002      	beq.n	8004766 <RCCEx_PLLSAI1_Config+0x4e>
 8004760:	2b02      	cmp	r3, #2
 8004762:	d009      	beq.n	8004778 <RCCEx_PLLSAI1_Config+0x60>
 8004764:	e020      	b.n	80047a8 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004766:	4b62      	ldr	r3, [pc, #392]	; (80048f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f003 0302 	and.w	r3, r3, #2
 800476e:	2b00      	cmp	r3, #0
 8004770:	d11d      	bne.n	80047ae <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8004772:	2301      	movs	r3, #1
 8004774:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004776:	e01a      	b.n	80047ae <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004778:	4b5d      	ldr	r3, [pc, #372]	; (80048f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004780:	2b00      	cmp	r3, #0
 8004782:	d116      	bne.n	80047b2 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8004784:	2301      	movs	r3, #1
 8004786:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004788:	e013      	b.n	80047b2 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800478a:	4b59      	ldr	r3, [pc, #356]	; (80048f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004792:	2b00      	cmp	r3, #0
 8004794:	d10f      	bne.n	80047b6 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004796:	4b56      	ldr	r3, [pc, #344]	; (80048f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d109      	bne.n	80047b6 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 80047a2:	2301      	movs	r3, #1
 80047a4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80047a6:	e006      	b.n	80047b6 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 80047a8:	2301      	movs	r3, #1
 80047aa:	73fb      	strb	r3, [r7, #15]
      break;
 80047ac:	e004      	b.n	80047b8 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80047ae:	bf00      	nop
 80047b0:	e002      	b.n	80047b8 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80047b2:	bf00      	nop
 80047b4:	e000      	b.n	80047b8 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80047b6:	bf00      	nop
    }

    if(status == HAL_OK)
 80047b8:	7bfb      	ldrb	r3, [r7, #15]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d108      	bne.n	80047d0 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 80047be:	4b4c      	ldr	r3, [pc, #304]	; (80048f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80047c0:	68db      	ldr	r3, [r3, #12]
 80047c2:	f023 0203 	bic.w	r2, r3, #3
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4949      	ldr	r1, [pc, #292]	; (80048f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80047cc:	4313      	orrs	r3, r2
 80047ce:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80047d0:	7bfb      	ldrb	r3, [r7, #15]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	f040 8086 	bne.w	80048e4 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80047d8:	4b45      	ldr	r3, [pc, #276]	; (80048f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4a44      	ldr	r2, [pc, #272]	; (80048f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80047de:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80047e2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047e4:	f7fd f802 	bl	80017ec <HAL_GetTick>
 80047e8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80047ea:	e009      	b.n	8004800 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80047ec:	f7fc fffe 	bl	80017ec <HAL_GetTick>
 80047f0:	4602      	mov	r2, r0
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	1ad3      	subs	r3, r2, r3
 80047f6:	2b02      	cmp	r3, #2
 80047f8:	d902      	bls.n	8004800 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80047fa:	2303      	movs	r3, #3
 80047fc:	73fb      	strb	r3, [r7, #15]
        break;
 80047fe:	e005      	b.n	800480c <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004800:	4b3b      	ldr	r3, [pc, #236]	; (80048f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004808:	2b00      	cmp	r3, #0
 800480a:	d1ef      	bne.n	80047ec <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800480c:	7bfb      	ldrb	r3, [r7, #15]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d168      	bne.n	80048e4 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d113      	bne.n	8004840 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004818:	4b35      	ldr	r3, [pc, #212]	; (80048f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800481a:	691a      	ldr	r2, [r3, #16]
 800481c:	4b35      	ldr	r3, [pc, #212]	; (80048f4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800481e:	4013      	ands	r3, r2
 8004820:	687a      	ldr	r2, [r7, #4]
 8004822:	6892      	ldr	r2, [r2, #8]
 8004824:	0211      	lsls	r1, r2, #8
 8004826:	687a      	ldr	r2, [r7, #4]
 8004828:	68d2      	ldr	r2, [r2, #12]
 800482a:	06d2      	lsls	r2, r2, #27
 800482c:	4311      	orrs	r1, r2
 800482e:	687a      	ldr	r2, [r7, #4]
 8004830:	6852      	ldr	r2, [r2, #4]
 8004832:	3a01      	subs	r2, #1
 8004834:	0112      	lsls	r2, r2, #4
 8004836:	430a      	orrs	r2, r1
 8004838:	492d      	ldr	r1, [pc, #180]	; (80048f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800483a:	4313      	orrs	r3, r2
 800483c:	610b      	str	r3, [r1, #16]
 800483e:	e02d      	b.n	800489c <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	2b01      	cmp	r3, #1
 8004844:	d115      	bne.n	8004872 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004846:	4b2a      	ldr	r3, [pc, #168]	; (80048f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004848:	691a      	ldr	r2, [r3, #16]
 800484a:	4b2b      	ldr	r3, [pc, #172]	; (80048f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800484c:	4013      	ands	r3, r2
 800484e:	687a      	ldr	r2, [r7, #4]
 8004850:	6892      	ldr	r2, [r2, #8]
 8004852:	0211      	lsls	r1, r2, #8
 8004854:	687a      	ldr	r2, [r7, #4]
 8004856:	6912      	ldr	r2, [r2, #16]
 8004858:	0852      	lsrs	r2, r2, #1
 800485a:	3a01      	subs	r2, #1
 800485c:	0552      	lsls	r2, r2, #21
 800485e:	4311      	orrs	r1, r2
 8004860:	687a      	ldr	r2, [r7, #4]
 8004862:	6852      	ldr	r2, [r2, #4]
 8004864:	3a01      	subs	r2, #1
 8004866:	0112      	lsls	r2, r2, #4
 8004868:	430a      	orrs	r2, r1
 800486a:	4921      	ldr	r1, [pc, #132]	; (80048f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800486c:	4313      	orrs	r3, r2
 800486e:	610b      	str	r3, [r1, #16]
 8004870:	e014      	b.n	800489c <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004872:	4b1f      	ldr	r3, [pc, #124]	; (80048f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004874:	691a      	ldr	r2, [r3, #16]
 8004876:	4b21      	ldr	r3, [pc, #132]	; (80048fc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004878:	4013      	ands	r3, r2
 800487a:	687a      	ldr	r2, [r7, #4]
 800487c:	6892      	ldr	r2, [r2, #8]
 800487e:	0211      	lsls	r1, r2, #8
 8004880:	687a      	ldr	r2, [r7, #4]
 8004882:	6952      	ldr	r2, [r2, #20]
 8004884:	0852      	lsrs	r2, r2, #1
 8004886:	3a01      	subs	r2, #1
 8004888:	0652      	lsls	r2, r2, #25
 800488a:	4311      	orrs	r1, r2
 800488c:	687a      	ldr	r2, [r7, #4]
 800488e:	6852      	ldr	r2, [r2, #4]
 8004890:	3a01      	subs	r2, #1
 8004892:	0112      	lsls	r2, r2, #4
 8004894:	430a      	orrs	r2, r1
 8004896:	4916      	ldr	r1, [pc, #88]	; (80048f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004898:	4313      	orrs	r3, r2
 800489a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800489c:	4b14      	ldr	r3, [pc, #80]	; (80048f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4a13      	ldr	r2, [pc, #76]	; (80048f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80048a2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80048a6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048a8:	f7fc ffa0 	bl	80017ec <HAL_GetTick>
 80048ac:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80048ae:	e009      	b.n	80048c4 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80048b0:	f7fc ff9c 	bl	80017ec <HAL_GetTick>
 80048b4:	4602      	mov	r2, r0
 80048b6:	68bb      	ldr	r3, [r7, #8]
 80048b8:	1ad3      	subs	r3, r2, r3
 80048ba:	2b02      	cmp	r3, #2
 80048bc:	d902      	bls.n	80048c4 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80048be:	2303      	movs	r3, #3
 80048c0:	73fb      	strb	r3, [r7, #15]
          break;
 80048c2:	e005      	b.n	80048d0 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80048c4:	4b0a      	ldr	r3, [pc, #40]	; (80048f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d0ef      	beq.n	80048b0 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80048d0:	7bfb      	ldrb	r3, [r7, #15]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d106      	bne.n	80048e4 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80048d6:	4b06      	ldr	r3, [pc, #24]	; (80048f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80048d8:	691a      	ldr	r2, [r3, #16]
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	699b      	ldr	r3, [r3, #24]
 80048de:	4904      	ldr	r1, [pc, #16]	; (80048f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80048e0:	4313      	orrs	r3, r2
 80048e2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80048e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80048e6:	4618      	mov	r0, r3
 80048e8:	3710      	adds	r7, #16
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bd80      	pop	{r7, pc}
 80048ee:	bf00      	nop
 80048f0:	40021000 	.word	0x40021000
 80048f4:	07ff800f 	.word	0x07ff800f
 80048f8:	ff9f800f 	.word	0xff9f800f
 80048fc:	f9ff800f 	.word	0xf9ff800f

08004900 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b084      	sub	sp, #16
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
 8004908:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800490a:	2300      	movs	r3, #0
 800490c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800490e:	4b72      	ldr	r3, [pc, #456]	; (8004ad8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004910:	68db      	ldr	r3, [r3, #12]
 8004912:	f003 0303 	and.w	r3, r3, #3
 8004916:	2b00      	cmp	r3, #0
 8004918:	d00e      	beq.n	8004938 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800491a:	4b6f      	ldr	r3, [pc, #444]	; (8004ad8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800491c:	68db      	ldr	r3, [r3, #12]
 800491e:	f003 0203 	and.w	r2, r3, #3
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	429a      	cmp	r2, r3
 8004928:	d103      	bne.n	8004932 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
       ||
 800492e:	2b00      	cmp	r3, #0
 8004930:	d142      	bne.n	80049b8 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8004932:	2301      	movs	r3, #1
 8004934:	73fb      	strb	r3, [r7, #15]
 8004936:	e03f      	b.n	80049b8 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	2b03      	cmp	r3, #3
 800493e:	d018      	beq.n	8004972 <RCCEx_PLLSAI2_Config+0x72>
 8004940:	2b03      	cmp	r3, #3
 8004942:	d825      	bhi.n	8004990 <RCCEx_PLLSAI2_Config+0x90>
 8004944:	2b01      	cmp	r3, #1
 8004946:	d002      	beq.n	800494e <RCCEx_PLLSAI2_Config+0x4e>
 8004948:	2b02      	cmp	r3, #2
 800494a:	d009      	beq.n	8004960 <RCCEx_PLLSAI2_Config+0x60>
 800494c:	e020      	b.n	8004990 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800494e:	4b62      	ldr	r3, [pc, #392]	; (8004ad8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f003 0302 	and.w	r3, r3, #2
 8004956:	2b00      	cmp	r3, #0
 8004958:	d11d      	bne.n	8004996 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 800495a:	2301      	movs	r3, #1
 800495c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800495e:	e01a      	b.n	8004996 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004960:	4b5d      	ldr	r3, [pc, #372]	; (8004ad8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004968:	2b00      	cmp	r3, #0
 800496a:	d116      	bne.n	800499a <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 800496c:	2301      	movs	r3, #1
 800496e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004970:	e013      	b.n	800499a <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004972:	4b59      	ldr	r3, [pc, #356]	; (8004ad8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800497a:	2b00      	cmp	r3, #0
 800497c:	d10f      	bne.n	800499e <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800497e:	4b56      	ldr	r3, [pc, #344]	; (8004ad8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004986:	2b00      	cmp	r3, #0
 8004988:	d109      	bne.n	800499e <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 800498a:	2301      	movs	r3, #1
 800498c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800498e:	e006      	b.n	800499e <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8004990:	2301      	movs	r3, #1
 8004992:	73fb      	strb	r3, [r7, #15]
      break;
 8004994:	e004      	b.n	80049a0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004996:	bf00      	nop
 8004998:	e002      	b.n	80049a0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800499a:	bf00      	nop
 800499c:	e000      	b.n	80049a0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800499e:	bf00      	nop
    }

    if(status == HAL_OK)
 80049a0:	7bfb      	ldrb	r3, [r7, #15]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d108      	bne.n	80049b8 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 80049a6:	4b4c      	ldr	r3, [pc, #304]	; (8004ad8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80049a8:	68db      	ldr	r3, [r3, #12]
 80049aa:	f023 0203 	bic.w	r2, r3, #3
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4949      	ldr	r1, [pc, #292]	; (8004ad8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80049b4:	4313      	orrs	r3, r2
 80049b6:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80049b8:	7bfb      	ldrb	r3, [r7, #15]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	f040 8086 	bne.w	8004acc <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80049c0:	4b45      	ldr	r3, [pc, #276]	; (8004ad8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4a44      	ldr	r2, [pc, #272]	; (8004ad8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80049c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80049ca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049cc:	f7fc ff0e 	bl	80017ec <HAL_GetTick>
 80049d0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80049d2:	e009      	b.n	80049e8 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80049d4:	f7fc ff0a 	bl	80017ec <HAL_GetTick>
 80049d8:	4602      	mov	r2, r0
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	1ad3      	subs	r3, r2, r3
 80049de:	2b02      	cmp	r3, #2
 80049e0:	d902      	bls.n	80049e8 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80049e2:	2303      	movs	r3, #3
 80049e4:	73fb      	strb	r3, [r7, #15]
        break;
 80049e6:	e005      	b.n	80049f4 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80049e8:	4b3b      	ldr	r3, [pc, #236]	; (8004ad8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d1ef      	bne.n	80049d4 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80049f4:	7bfb      	ldrb	r3, [r7, #15]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d168      	bne.n	8004acc <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d113      	bne.n	8004a28 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004a00:	4b35      	ldr	r3, [pc, #212]	; (8004ad8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004a02:	695a      	ldr	r2, [r3, #20]
 8004a04:	4b35      	ldr	r3, [pc, #212]	; (8004adc <RCCEx_PLLSAI2_Config+0x1dc>)
 8004a06:	4013      	ands	r3, r2
 8004a08:	687a      	ldr	r2, [r7, #4]
 8004a0a:	6892      	ldr	r2, [r2, #8]
 8004a0c:	0211      	lsls	r1, r2, #8
 8004a0e:	687a      	ldr	r2, [r7, #4]
 8004a10:	68d2      	ldr	r2, [r2, #12]
 8004a12:	06d2      	lsls	r2, r2, #27
 8004a14:	4311      	orrs	r1, r2
 8004a16:	687a      	ldr	r2, [r7, #4]
 8004a18:	6852      	ldr	r2, [r2, #4]
 8004a1a:	3a01      	subs	r2, #1
 8004a1c:	0112      	lsls	r2, r2, #4
 8004a1e:	430a      	orrs	r2, r1
 8004a20:	492d      	ldr	r1, [pc, #180]	; (8004ad8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004a22:	4313      	orrs	r3, r2
 8004a24:	614b      	str	r3, [r1, #20]
 8004a26:	e02d      	b.n	8004a84 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	2b01      	cmp	r3, #1
 8004a2c:	d115      	bne.n	8004a5a <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004a2e:	4b2a      	ldr	r3, [pc, #168]	; (8004ad8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004a30:	695a      	ldr	r2, [r3, #20]
 8004a32:	4b2b      	ldr	r3, [pc, #172]	; (8004ae0 <RCCEx_PLLSAI2_Config+0x1e0>)
 8004a34:	4013      	ands	r3, r2
 8004a36:	687a      	ldr	r2, [r7, #4]
 8004a38:	6892      	ldr	r2, [r2, #8]
 8004a3a:	0211      	lsls	r1, r2, #8
 8004a3c:	687a      	ldr	r2, [r7, #4]
 8004a3e:	6912      	ldr	r2, [r2, #16]
 8004a40:	0852      	lsrs	r2, r2, #1
 8004a42:	3a01      	subs	r2, #1
 8004a44:	0552      	lsls	r2, r2, #21
 8004a46:	4311      	orrs	r1, r2
 8004a48:	687a      	ldr	r2, [r7, #4]
 8004a4a:	6852      	ldr	r2, [r2, #4]
 8004a4c:	3a01      	subs	r2, #1
 8004a4e:	0112      	lsls	r2, r2, #4
 8004a50:	430a      	orrs	r2, r1
 8004a52:	4921      	ldr	r1, [pc, #132]	; (8004ad8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004a54:	4313      	orrs	r3, r2
 8004a56:	614b      	str	r3, [r1, #20]
 8004a58:	e014      	b.n	8004a84 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004a5a:	4b1f      	ldr	r3, [pc, #124]	; (8004ad8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004a5c:	695a      	ldr	r2, [r3, #20]
 8004a5e:	4b21      	ldr	r3, [pc, #132]	; (8004ae4 <RCCEx_PLLSAI2_Config+0x1e4>)
 8004a60:	4013      	ands	r3, r2
 8004a62:	687a      	ldr	r2, [r7, #4]
 8004a64:	6892      	ldr	r2, [r2, #8]
 8004a66:	0211      	lsls	r1, r2, #8
 8004a68:	687a      	ldr	r2, [r7, #4]
 8004a6a:	6952      	ldr	r2, [r2, #20]
 8004a6c:	0852      	lsrs	r2, r2, #1
 8004a6e:	3a01      	subs	r2, #1
 8004a70:	0652      	lsls	r2, r2, #25
 8004a72:	4311      	orrs	r1, r2
 8004a74:	687a      	ldr	r2, [r7, #4]
 8004a76:	6852      	ldr	r2, [r2, #4]
 8004a78:	3a01      	subs	r2, #1
 8004a7a:	0112      	lsls	r2, r2, #4
 8004a7c:	430a      	orrs	r2, r1
 8004a7e:	4916      	ldr	r1, [pc, #88]	; (8004ad8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004a80:	4313      	orrs	r3, r2
 8004a82:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004a84:	4b14      	ldr	r3, [pc, #80]	; (8004ad8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a13      	ldr	r2, [pc, #76]	; (8004ad8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004a8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a8e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a90:	f7fc feac 	bl	80017ec <HAL_GetTick>
 8004a94:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004a96:	e009      	b.n	8004aac <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004a98:	f7fc fea8 	bl	80017ec <HAL_GetTick>
 8004a9c:	4602      	mov	r2, r0
 8004a9e:	68bb      	ldr	r3, [r7, #8]
 8004aa0:	1ad3      	subs	r3, r2, r3
 8004aa2:	2b02      	cmp	r3, #2
 8004aa4:	d902      	bls.n	8004aac <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8004aa6:	2303      	movs	r3, #3
 8004aa8:	73fb      	strb	r3, [r7, #15]
          break;
 8004aaa:	e005      	b.n	8004ab8 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004aac:	4b0a      	ldr	r3, [pc, #40]	; (8004ad8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d0ef      	beq.n	8004a98 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8004ab8:	7bfb      	ldrb	r3, [r7, #15]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d106      	bne.n	8004acc <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004abe:	4b06      	ldr	r3, [pc, #24]	; (8004ad8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004ac0:	695a      	ldr	r2, [r3, #20]
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	699b      	ldr	r3, [r3, #24]
 8004ac6:	4904      	ldr	r1, [pc, #16]	; (8004ad8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004acc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ace:	4618      	mov	r0, r3
 8004ad0:	3710      	adds	r7, #16
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	bd80      	pop	{r7, pc}
 8004ad6:	bf00      	nop
 8004ad8:	40021000 	.word	0x40021000
 8004adc:	07ff800f 	.word	0x07ff800f
 8004ae0:	ff9f800f 	.word	0xff9f800f
 8004ae4:	f9ff800f 	.word	0xf9ff800f

08004ae8 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 8004ae8:	b480      	push	{r7}
 8004aea:	b089      	sub	sp, #36	; 0x24
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
 8004af0:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 8004af2:	2300      	movs	r3, #0
 8004af4:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 8004af6:	2300      	movs	r3, #0
 8004af8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 8004afa:	2300      	movs	r3, #0
 8004afc:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b04:	d10b      	bne.n	8004b1e <RCCEx_GetSAIxPeriphCLKFreq+0x36>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8004b06:	4b7e      	ldr	r3, [pc, #504]	; (8004d00 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004b08:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004b0c:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8004b10:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 8004b12:	69bb      	ldr	r3, [r7, #24]
 8004b14:	2b60      	cmp	r3, #96	; 0x60
 8004b16:	d112      	bne.n	8004b3e <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8004b18:	4b7a      	ldr	r3, [pc, #488]	; (8004d04 <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 8004b1a:	61fb      	str	r3, [r7, #28]
 8004b1c:	e00f      	b.n	8004b3e <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b24:	d10b      	bne.n	8004b3e <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8004b26:	4b76      	ldr	r3, [pc, #472]	; (8004d00 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004b28:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004b2c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004b30:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 8004b32:	69bb      	ldr	r3, [r7, #24]
 8004b34:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b38:	d101      	bne.n	8004b3e <RCCEx_GetSAIxPeriphCLKFreq+0x56>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 8004b3a:	4b72      	ldr	r3, [pc, #456]	; (8004d04 <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 8004b3c:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 8004b3e:	69fb      	ldr	r3, [r7, #28]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	f040 80d6 	bne.w	8004cf2 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
  {
    pllvco = InputFrequency;
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 8004b4a:	69bb      	ldr	r3, [r7, #24]
 8004b4c:	2b40      	cmp	r3, #64	; 0x40
 8004b4e:	d003      	beq.n	8004b58 <RCCEx_GetSAIxPeriphCLKFreq+0x70>
 8004b50:	69bb      	ldr	r3, [r7, #24]
 8004b52:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b56:	d13b      	bne.n	8004bd0 <RCCEx_GetSAIxPeriphCLKFreq+0xe8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8004b58:	4b69      	ldr	r3, [pc, #420]	; (8004d00 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b60:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004b64:	f040 80c4 	bne.w	8004cf0 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
 8004b68:	4b65      	ldr	r3, [pc, #404]	; (8004d00 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004b6a:	68db      	ldr	r3, [r3, #12]
 8004b6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	f000 80bd 	beq.w	8004cf0 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004b76:	4b62      	ldr	r3, [pc, #392]	; (8004d00 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004b78:	68db      	ldr	r3, [r3, #12]
 8004b7a:	091b      	lsrs	r3, r3, #4
 8004b7c:	f003 030f 	and.w	r3, r3, #15
 8004b80:	3301      	adds	r3, #1
 8004b82:	693a      	ldr	r2, [r7, #16]
 8004b84:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b88:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8004b8a:	4b5d      	ldr	r3, [pc, #372]	; (8004d00 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004b8c:	68db      	ldr	r3, [r3, #12]
 8004b8e:	0a1b      	lsrs	r3, r3, #8
 8004b90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b94:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 8004b96:	4b5a      	ldr	r3, [pc, #360]	; (8004d00 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004b98:	68db      	ldr	r3, [r3, #12]
 8004b9a:	0edb      	lsrs	r3, r3, #27
 8004b9c:	f003 031f 	and.w	r3, r3, #31
 8004ba0:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8004ba2:	697b      	ldr	r3, [r7, #20]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d10a      	bne.n	8004bbe <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8004ba8:	4b55      	ldr	r3, [pc, #340]	; (8004d00 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004baa:	68db      	ldr	r3, [r3, #12]
 8004bac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d002      	beq.n	8004bba <RCCEx_GetSAIxPeriphCLKFreq+0xd2>
          {
            pllp = 17U;
 8004bb4:	2311      	movs	r3, #17
 8004bb6:	617b      	str	r3, [r7, #20]
 8004bb8:	e001      	b.n	8004bbe <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
          }
          else
          {
            pllp = 7U;
 8004bba:	2307      	movs	r3, #7
 8004bbc:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8004bbe:	693b      	ldr	r3, [r7, #16]
 8004bc0:	68fa      	ldr	r2, [r7, #12]
 8004bc2:	fb03 f202 	mul.w	r2, r3, r2
 8004bc6:	697b      	ldr	r3, [r7, #20]
 8004bc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bcc:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8004bce:	e08f      	b.n	8004cf0 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 8004bd0:	69bb      	ldr	r3, [r7, #24]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d13a      	bne.n	8004c4c <RCCEx_GetSAIxPeriphCLKFreq+0x164>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 8004bd6:	4b4a      	ldr	r3, [pc, #296]	; (8004d00 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004bde:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004be2:	f040 8086 	bne.w	8004cf2 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 8004be6:	4b46      	ldr	r3, [pc, #280]	; (8004d00 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004be8:	691b      	ldr	r3, [r3, #16]
 8004bea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d07f      	beq.n	8004cf2 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8004bf2:	4b43      	ldr	r3, [pc, #268]	; (8004d00 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004bf4:	691b      	ldr	r3, [r3, #16]
 8004bf6:	091b      	lsrs	r3, r3, #4
 8004bf8:	f003 030f 	and.w	r3, r3, #15
 8004bfc:	3301      	adds	r3, #1
 8004bfe:	693a      	ldr	r2, [r7, #16]
 8004c00:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c04:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8004c06:	4b3e      	ldr	r3, [pc, #248]	; (8004d00 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004c08:	691b      	ldr	r3, [r3, #16]
 8004c0a:	0a1b      	lsrs	r3, r3, #8
 8004c0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c10:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 8004c12:	4b3b      	ldr	r3, [pc, #236]	; (8004d00 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004c14:	691b      	ldr	r3, [r3, #16]
 8004c16:	0edb      	lsrs	r3, r3, #27
 8004c18:	f003 031f 	and.w	r3, r3, #31
 8004c1c:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8004c1e:	697b      	ldr	r3, [r7, #20]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d10a      	bne.n	8004c3a <RCCEx_GetSAIxPeriphCLKFreq+0x152>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 8004c24:	4b36      	ldr	r3, [pc, #216]	; (8004d00 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004c26:	691b      	ldr	r3, [r3, #16]
 8004c28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d002      	beq.n	8004c36 <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
          {
            pllp = 17U;
 8004c30:	2311      	movs	r3, #17
 8004c32:	617b      	str	r3, [r7, #20]
 8004c34:	e001      	b.n	8004c3a <RCCEx_GetSAIxPeriphCLKFreq+0x152>
          }
          else
          {
            pllp = 7U;
 8004c36:	2307      	movs	r3, #7
 8004c38:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8004c3a:	693b      	ldr	r3, [r7, #16]
 8004c3c:	68fa      	ldr	r2, [r7, #12]
 8004c3e:	fb03 f202 	mul.w	r2, r3, r2
 8004c42:	697b      	ldr	r3, [r7, #20]
 8004c44:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c48:	61fb      	str	r3, [r7, #28]
 8004c4a:	e052      	b.n	8004cf2 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      }
    }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    else if((srcclk == RCC_SAI1CLKSOURCE_HSI) || (srcclk == RCC_SAI2CLKSOURCE_HSI))
 8004c4c:	69bb      	ldr	r3, [r7, #24]
 8004c4e:	2b80      	cmp	r3, #128	; 0x80
 8004c50:	d003      	beq.n	8004c5a <RCCEx_GetSAIxPeriphCLKFreq+0x172>
 8004c52:	69bb      	ldr	r3, [r7, #24]
 8004c54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c58:	d109      	bne.n	8004c6e <RCCEx_GetSAIxPeriphCLKFreq+0x186>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004c5a:	4b29      	ldr	r3, [pc, #164]	; (8004d00 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c66:	d144      	bne.n	8004cf2 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
        frequency = HSI_VALUE;
 8004c68:	4b27      	ldr	r3, [pc, #156]	; (8004d08 <RCCEx_GetSAIxPeriphCLKFreq+0x220>)
 8004c6a:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004c6c:	e041      	b.n	8004cf2 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 8004c6e:	69bb      	ldr	r3, [r7, #24]
 8004c70:	2b20      	cmp	r3, #32
 8004c72:	d003      	beq.n	8004c7c <RCCEx_GetSAIxPeriphCLKFreq+0x194>
 8004c74:	69bb      	ldr	r3, [r7, #24]
 8004c76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c7a:	d13a      	bne.n	8004cf2 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 8004c7c:	4b20      	ldr	r3, [pc, #128]	; (8004d00 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004c84:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c88:	d133      	bne.n	8004cf2 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 8004c8a:	4b1d      	ldr	r3, [pc, #116]	; (8004d00 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004c8c:	695b      	ldr	r3, [r3, #20]
 8004c8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d02d      	beq.n	8004cf2 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
 8004c96:	4b1a      	ldr	r3, [pc, #104]	; (8004d00 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004c98:	695b      	ldr	r3, [r3, #20]
 8004c9a:	091b      	lsrs	r3, r3, #4
 8004c9c:	f003 030f 	and.w	r3, r3, #15
 8004ca0:	3301      	adds	r3, #1
 8004ca2:	693a      	ldr	r2, [r7, #16]
 8004ca4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ca8:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8004caa:	4b15      	ldr	r3, [pc, #84]	; (8004d00 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004cac:	695b      	ldr	r3, [r3, #20]
 8004cae:	0a1b      	lsrs	r3, r3, #8
 8004cb0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004cb4:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
 8004cb6:	4b12      	ldr	r3, [pc, #72]	; (8004d00 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004cb8:	695b      	ldr	r3, [r3, #20]
 8004cba:	0edb      	lsrs	r3, r3, #27
 8004cbc:	f003 031f 	and.w	r3, r3, #31
 8004cc0:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8004cc2:	697b      	ldr	r3, [r7, #20]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d10a      	bne.n	8004cde <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 8004cc8:	4b0d      	ldr	r3, [pc, #52]	; (8004d00 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004cca:	695b      	ldr	r3, [r3, #20]
 8004ccc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d002      	beq.n	8004cda <RCCEx_GetSAIxPeriphCLKFreq+0x1f2>
          {
            pllp = 17U;
 8004cd4:	2311      	movs	r3, #17
 8004cd6:	617b      	str	r3, [r7, #20]
 8004cd8:	e001      	b.n	8004cde <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
          }
          else
          {
            pllp = 7U;
 8004cda:	2307      	movs	r3, #7
 8004cdc:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8004cde:	693b      	ldr	r3, [r7, #16]
 8004ce0:	68fa      	ldr	r2, [r7, #12]
 8004ce2:	fb03 f202 	mul.w	r2, r3, r2
 8004ce6:	697b      	ldr	r3, [r7, #20]
 8004ce8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cec:	61fb      	str	r3, [r7, #28]
 8004cee:	e000      	b.n	8004cf2 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8004cf0:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 8004cf2:	69fb      	ldr	r3, [r7, #28]
}
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	3724      	adds	r7, #36	; 0x24
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfe:	4770      	bx	lr
 8004d00:	40021000 	.word	0x40021000
 8004d04:	001fff68 	.word	0x001fff68
 8004d08:	00f42400 	.word	0x00f42400

08004d0c <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b08a      	sub	sp, #40	; 0x28
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
#endif /* SAI2 */
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d101      	bne.n	8004d1e <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	e1c7      	b.n	80050ae <HAL_SAI_Init+0x3a2>

#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004d24:	2b01      	cmp	r3, #1
 8004d26:	d10e      	bne.n	8004d46 <HAL_SAI_Init+0x3a>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 sub-block A, in master RX mode with free protocol */
    if ((hsai->Instance != SAI1_Block_A) ||
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4a81      	ldr	r2, [pc, #516]	; (8004f34 <HAL_SAI_Init+0x228>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d107      	bne.n	8004d42 <HAL_SAI_Init+0x36>
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	685b      	ldr	r3, [r3, #4]
    if ((hsai->Instance != SAI1_Block_A) ||
 8004d36:	2b01      	cmp	r3, #1
 8004d38:	d103      	bne.n	8004d42 <HAL_SAI_Init+0x36>
        (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d001      	beq.n	8004d46 <HAL_SAI_Init+0x3a>
    {
      return HAL_ERROR;
 8004d42:	2301      	movs	r3, #1
 8004d44:	e1b3      	b.n	80050ae <HAL_SAI_Init+0x3a2>
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  if (hsai->State == HAL_SAI_STATE_RESET)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 8004d4c:	b2db      	uxtb	r3, r3
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d106      	bne.n	8004d60 <HAL_SAI_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2200      	movs	r2, #0
 8004d56:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8004d5a:	6878      	ldr	r0, [r7, #4]
 8004d5c:	f7fc fbfc 	bl	8001558 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 8004d60:	6878      	ldr	r0, [r7, #4]
 8004d62:	f000 f9b1 	bl	80050c8 <SAI_Disable>
 8004d66:	4603      	mov	r3, r0
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d001      	beq.n	8004d70 <HAL_SAI_Init+0x64>
  {
    return HAL_ERROR;
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	e19e      	b.n	80050ae <HAL_SAI_Init+0x3a2>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2202      	movs	r2, #2
 8004d74:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
#if defined(SAI2)
  switch (hsai->Init.SynchroExt)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	68db      	ldr	r3, [r3, #12]
 8004d7c:	2b02      	cmp	r3, #2
 8004d7e:	d00c      	beq.n	8004d9a <HAL_SAI_Init+0x8e>
 8004d80:	2b02      	cmp	r3, #2
 8004d82:	d80d      	bhi.n	8004da0 <HAL_SAI_Init+0x94>
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d002      	beq.n	8004d8e <HAL_SAI_Init+0x82>
 8004d88:	2b01      	cmp	r3, #1
 8004d8a:	d003      	beq.n	8004d94 <HAL_SAI_Init+0x88>
 8004d8c:	e008      	b.n	8004da0 <HAL_SAI_Init+0x94>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8004d8e:	2300      	movs	r3, #0
 8004d90:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8004d92:	e008      	b.n	8004da6 <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8004d94:	2310      	movs	r3, #16
 8004d96:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8004d98:	e005      	b.n	8004da6 <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8004d9a:	2320      	movs	r3, #32
 8004d9c:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8004d9e:	e002      	b.n	8004da6 <HAL_SAI_Init+0x9a>
    default :
      tmpregisterGCR = 0;
 8004da0:	2300      	movs	r3, #0
 8004da2:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8004da4:	bf00      	nop
  }
#endif /* SAI2 */

  switch (hsai->Init.Synchro)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	689b      	ldr	r3, [r3, #8]
 8004daa:	2b03      	cmp	r3, #3
 8004dac:	d81d      	bhi.n	8004dea <HAL_SAI_Init+0xde>
 8004dae:	a201      	add	r2, pc, #4	; (adr r2, 8004db4 <HAL_SAI_Init+0xa8>)
 8004db0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004db4:	08004dc5 	.word	0x08004dc5
 8004db8:	08004dcb 	.word	0x08004dcb
 8004dbc:	08004dd3 	.word	0x08004dd3
 8004dc0:	08004ddb 	.word	0x08004ddb
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	61fb      	str	r3, [r7, #28]
      break;
 8004dc8:	e012      	b.n	8004df0 <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8004dca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004dce:	61fb      	str	r3, [r7, #28]
      break;
 8004dd0:	e00e      	b.n	8004df0 <HAL_SAI_Init+0xe4>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8004dd2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004dd6:	61fb      	str	r3, [r7, #28]
      break;
 8004dd8:	e00a      	b.n	8004df0 <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8004dda:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004dde:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8004de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de2:	f043 0301 	orr.w	r3, r3, #1
 8004de6:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8004de8:	e002      	b.n	8004df0 <HAL_SAI_Init+0xe4>
#endif /* SAI2 */
    default :
      syncen_bits = 0;
 8004dea:	2300      	movs	r3, #0
 8004dec:	61fb      	str	r3, [r7, #28]
      break;
 8004dee:	bf00      	nop
  }

#if defined(SAI2)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4a4f      	ldr	r2, [pc, #316]	; (8004f34 <HAL_SAI_Init+0x228>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d004      	beq.n	8004e04 <HAL_SAI_Init+0xf8>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4a4e      	ldr	r2, [pc, #312]	; (8004f38 <HAL_SAI_Init+0x22c>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d103      	bne.n	8004e0c <HAL_SAI_Init+0x100>
  {
    SAI1->GCR = tmpregisterGCR;
 8004e04:	4a4d      	ldr	r2, [pc, #308]	; (8004f3c <HAL_SAI_Init+0x230>)
 8004e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e08:	6013      	str	r3, [r2, #0]
 8004e0a:	e002      	b.n	8004e12 <HAL_SAI_Init+0x106>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8004e0c:	4a4c      	ldr	r2, [pc, #304]	; (8004f40 <HAL_SAI_Init+0x234>)
 8004e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e10:	6013      	str	r3, [r2, #0]
  }
#else
  SAI1->GCR = 0;
#endif /* SAI2 */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	69db      	ldr	r3, [r3, #28]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d073      	beq.n	8004f02 <HAL_SAI_Init+0x1f6>
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4a45      	ldr	r2, [pc, #276]	; (8004f34 <HAL_SAI_Init+0x228>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d004      	beq.n	8004e2e <HAL_SAI_Init+0x122>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4a43      	ldr	r2, [pc, #268]	; (8004f38 <HAL_SAI_Init+0x22c>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d105      	bne.n	8004e3a <HAL_SAI_Init+0x12e>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8004e2e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004e32:	f7fe fd51 	bl	80038d8 <HAL_RCCEx_GetPeriphCLKFreq>
 8004e36:	61b8      	str	r0, [r7, #24]
 8004e38:	e004      	b.n	8004e44 <HAL_SAI_Init+0x138>
    }
    else
    {
      /* SAI2_Block_A or SAI2_Block_B */
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8004e3a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8004e3e:	f7fe fd4b 	bl	80038d8 <HAL_RCCEx_GetPeriphCLKFreq>
 8004e42:	61b8      	str	r0, [r7, #24]
    /* Configure Master Clock Divider using the following formula :
       - If NOMCK = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NOMCK = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	695b      	ldr	r3, [r3, #20]
 8004e48:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004e4c:	d120      	bne.n	8004e90 <HAL_SAI_Init+0x184>
    {
      /* NOMCK = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e52:	2b04      	cmp	r3, #4
 8004e54:	d102      	bne.n	8004e5c <HAL_SAI_Init+0x150>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = 64U;
 8004e56:	2340      	movs	r3, #64	; 0x40
 8004e58:	613b      	str	r3, [r7, #16]
 8004e5a:	e00a      	b.n	8004e72 <HAL_SAI_Init+0x166>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e60:	2b08      	cmp	r3, #8
 8004e62:	d103      	bne.n	8004e6c <HAL_SAI_Init+0x160>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = 256U;
 8004e64:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004e68:	613b      	str	r3, [r7, #16]
 8004e6a:	e002      	b.n	8004e72 <HAL_SAI_Init+0x166>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e70:	613b      	str	r3, [r7, #16]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 8004e72:	69ba      	ldr	r2, [r7, #24]
 8004e74:	4613      	mov	r3, r2
 8004e76:	009b      	lsls	r3, r3, #2
 8004e78:	4413      	add	r3, r2
 8004e7a:	005b      	lsls	r3, r3, #1
 8004e7c:	4619      	mov	r1, r3
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	69db      	ldr	r3, [r3, #28]
 8004e82:	693a      	ldr	r2, [r7, #16]
 8004e84:	fb02 f303 	mul.w	r3, r2, r3
 8004e88:	fbb1 f3f3 	udiv	r3, r1, r3
 8004e8c:	617b      	str	r3, [r7, #20]
 8004e8e:	e017      	b.n	8004ec0 <HAL_SAI_Init+0x1b4>
    }
    else
    {
      /* NOMCK = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e94:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004e98:	d101      	bne.n	8004e9e <HAL_SAI_Init+0x192>
 8004e9a:	2302      	movs	r3, #2
 8004e9c:	e000      	b.n	8004ea0 <HAL_SAI_Init+0x194>
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	60fb      	str	r3, [r7, #12]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 8004ea2:	69ba      	ldr	r2, [r7, #24]
 8004ea4:	4613      	mov	r3, r2
 8004ea6:	009b      	lsls	r3, r3, #2
 8004ea8:	4413      	add	r3, r2
 8004eaa:	005b      	lsls	r3, r3, #1
 8004eac:	4619      	mov	r1, r3
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	69db      	ldr	r3, [r3, #28]
 8004eb2:	68fa      	ldr	r2, [r7, #12]
 8004eb4:	fb02 f303 	mul.w	r3, r2, r3
 8004eb8:	021b      	lsls	r3, r3, #8
 8004eba:	fbb1 f3f3 	udiv	r3, r1, r3
 8004ebe:	617b      	str	r3, [r7, #20]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 8004ec0:	697b      	ldr	r3, [r7, #20]
 8004ec2:	4a20      	ldr	r2, [pc, #128]	; (8004f44 <HAL_SAI_Init+0x238>)
 8004ec4:	fba2 2303 	umull	r2, r3, r2, r3
 8004ec8:	08da      	lsrs	r2, r3, #3
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8004ece:	6979      	ldr	r1, [r7, #20]
 8004ed0:	4b1c      	ldr	r3, [pc, #112]	; (8004f44 <HAL_SAI_Init+0x238>)
 8004ed2:	fba3 2301 	umull	r2, r3, r3, r1
 8004ed6:	08da      	lsrs	r2, r3, #3
 8004ed8:	4613      	mov	r3, r2
 8004eda:	009b      	lsls	r3, r3, #2
 8004edc:	4413      	add	r3, r2
 8004ede:	005b      	lsls	r3, r3, #1
 8004ee0:	1aca      	subs	r2, r1, r3
 8004ee2:	2a08      	cmp	r2, #8
 8004ee4:	d904      	bls.n	8004ef0 <HAL_SAI_Init+0x1e4>
    {
      hsai->Init.Mckdiv += 1U;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6a1b      	ldr	r3, [r3, #32]
 8004eea:	1c5a      	adds	r2, r3, #1
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	621a      	str	r2, [r3, #32]
    }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
    /* STM32L4P5xx || STM32L4Q5xx */

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ef4:	2b04      	cmp	r3, #4
 8004ef6:	d104      	bne.n	8004f02 <HAL_SAI_Init+0x1f6>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6a1b      	ldr	r3, [r3, #32]
 8004efc:	085a      	lsrs	r2, r3, #1
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	685b      	ldr	r3, [r3, #4]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d003      	beq.n	8004f12 <HAL_SAI_Init+0x206>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	685b      	ldr	r3, [r3, #4]
 8004f0e:	2b02      	cmp	r3, #2
 8004f10:	d109      	bne.n	8004f26 <HAL_SAI_Init+0x21a>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f16:	2b01      	cmp	r3, #1
 8004f18:	d101      	bne.n	8004f1e <HAL_SAI_Init+0x212>
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	e001      	b.n	8004f22 <HAL_SAI_Init+0x216>
 8004f1e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004f22:	623b      	str	r3, [r7, #32]
 8004f24:	e012      	b.n	8004f4c <HAL_SAI_Init+0x240>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f2a:	2b01      	cmp	r3, #1
 8004f2c:	d10c      	bne.n	8004f48 <HAL_SAI_Init+0x23c>
 8004f2e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004f32:	e00a      	b.n	8004f4a <HAL_SAI_Init+0x23e>
 8004f34:	40015404 	.word	0x40015404
 8004f38:	40015424 	.word	0x40015424
 8004f3c:	40015400 	.word	0x40015400
 8004f40:	40015800 	.word	0x40015800
 8004f44:	cccccccd 	.word	0xcccccccd
 8004f48:	2300      	movs	r3, #0
 8004f4a:	623b      	str	r3, [r7, #32]

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	6819      	ldr	r1, [r3, #0]
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681a      	ldr	r2, [r3, #0]
 8004f56:	4b58      	ldr	r3, [pc, #352]	; (80050b8 <HAL_SAI_Init+0x3ac>)
 8004f58:	400b      	ands	r3, r1
 8004f5a:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NOMCK | SAI_xCR1_MCKDIV | SAI_xCR1_OSR);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	6819      	ldr	r1, [r3, #0]
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	685a      	ldr	r2, [r3, #4]
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f6a:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004f70:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f76:	431a      	orrs	r2, r3
 8004f78:	6a3b      	ldr	r3, [r7, #32]
 8004f7a:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 8004f7c:	69fb      	ldr	r3, [r7, #28]
 8004f7e:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                          ckstr_bits | syncen_bits |                             \
 8004f84:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	691b      	ldr	r3, [r3, #16]
 8004f8a:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8004f90:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6a1b      	ldr	r3, [r3, #32]
 8004f96:	051b      	lsls	r3, r3, #20
 8004f98:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8004f9e:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	430a      	orrs	r2, r1
 8004fa6:	601a      	str	r2, [r3, #0]
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	685b      	ldr	r3, [r3, #4]
 8004fae:	687a      	ldr	r2, [r7, #4]
 8004fb0:	6812      	ldr	r2, [r2, #0]
 8004fb2:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8004fb6:	f023 030f 	bic.w	r3, r3, #15
 8004fba:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	6859      	ldr	r1, [r3, #4]
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	699a      	ldr	r2, [r3, #24]
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fca:	431a      	orrs	r2, r3
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fd0:	431a      	orrs	r2, r3
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	430a      	orrs	r2, r1
 8004fd8:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	6899      	ldr	r1, [r3, #8]
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681a      	ldr	r2, [r3, #0]
 8004fe4:	4b35      	ldr	r3, [pc, #212]	; (80050bc <HAL_SAI_Init+0x3b0>)
 8004fe6:	400b      	ands	r3, r1
 8004fe8:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	6899      	ldr	r1, [r3, #8]
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ff4:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8004ffa:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
                           hsai->FrameInit.FSOffset |
 8005000:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSDefinition |
 8005006:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800500c:	3b01      	subs	r3, #1
 800500e:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8005010:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	430a      	orrs	r2, r1
 8005018:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	68d9      	ldr	r1, [r3, #12]
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681a      	ldr	r2, [r3, #0]
 8005024:	f24f 0320 	movw	r3, #61472	; 0xf020
 8005028:	400b      	ands	r3, r1
 800502a:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	68d9      	ldr	r1, [r3, #12]
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800503a:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005040:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8005042:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005048:	3b01      	subs	r3, #1
 800504a:	021b      	lsls	r3, r3, #8
 800504c:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	430a      	orrs	r2, r1
 8005054:	60da      	str	r2, [r3, #12]

#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  /* SAI PDM Configuration ---------------------------------------------------*/
  if (hsai->Instance == SAI1_Block_A)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4a19      	ldr	r2, [pc, #100]	; (80050c0 <HAL_SAI_Init+0x3b4>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d119      	bne.n	8005094 <HAL_SAI_Init+0x388>
  {
    /* Disable PDM interface */
    SAI1->PDMCR &= ~(SAI_PDMCR_PDMEN);
 8005060:	4b18      	ldr	r3, [pc, #96]	; (80050c4 <HAL_SAI_Init+0x3b8>)
 8005062:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005064:	4a17      	ldr	r2, [pc, #92]	; (80050c4 <HAL_SAI_Init+0x3b8>)
 8005066:	f023 0301 	bic.w	r3, r3, #1
 800506a:	6453      	str	r3, [r2, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005072:	2b01      	cmp	r3, #1
 8005074:	d10e      	bne.n	8005094 <HAL_SAI_Init+0x388>
    {
      /* Configure and enable PDM interface */
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6bda      	ldr	r2, [r3, #60]	; 0x3c
                     ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800507e:	3b01      	subs	r3, #1
 8005080:	011b      	lsls	r3, r3, #4
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8005082:	4910      	ldr	r1, [pc, #64]	; (80050c4 <HAL_SAI_Init+0x3b8>)
 8005084:	4313      	orrs	r3, r2
 8005086:	644b      	str	r3, [r1, #68]	; 0x44
      SAI1->PDMCR |= SAI_PDMCR_PDMEN;
 8005088:	4b0e      	ldr	r3, [pc, #56]	; (80050c4 <HAL_SAI_Init+0x3b8>)
 800508a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800508c:	4a0d      	ldr	r2, [pc, #52]	; (80050c4 <HAL_SAI_Init+0x3b8>)
 800508e:	f043 0301 	orr.w	r3, r3, #1
 8005092:	6453      	str	r3, [r2, #68]	; 0x44
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2200      	movs	r2, #0
 8005098:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2201      	movs	r2, #1
 80050a0:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2200      	movs	r2, #0
 80050a8:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c

  return HAL_OK;
 80050ac:	2300      	movs	r3, #0
}
 80050ae:	4618      	mov	r0, r3
 80050b0:	3728      	adds	r7, #40	; 0x28
 80050b2:	46bd      	mov	sp, r7
 80050b4:	bd80      	pop	{r7, pc}
 80050b6:	bf00      	nop
 80050b8:	f805c010 	.word	0xf805c010
 80050bc:	fff88000 	.word	0xfff88000
 80050c0:	40015404 	.word	0x40015404
 80050c4:	40015400 	.word	0x40015400

080050c8 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 80050c8:	b480      	push	{r7}
 80050ca:	b085      	sub	sp, #20
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 80050d0:	4b18      	ldr	r3, [pc, #96]	; (8005134 <SAI_Disable+0x6c>)
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4a18      	ldr	r2, [pc, #96]	; (8005138 <SAI_Disable+0x70>)
 80050d6:	fba2 2303 	umull	r2, r3, r2, r3
 80050da:	0b1b      	lsrs	r3, r3, #12
 80050dc:	009b      	lsls	r3, r3, #2
 80050de:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 80050e0:	2300      	movs	r3, #0
 80050e2:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	681a      	ldr	r2, [r3, #0]
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80050f2:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d10a      	bne.n	8005110 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005100:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      status = HAL_TIMEOUT;
 800510a:	2303      	movs	r3, #3
 800510c:	72fb      	strb	r3, [r7, #11]
      break;
 800510e:	e009      	b.n	8005124 <SAI_Disable+0x5c>
    }
    count--;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	3b01      	subs	r3, #1
 8005114:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005120:	2b00      	cmp	r3, #0
 8005122:	d1e7      	bne.n	80050f4 <SAI_Disable+0x2c>

  return status;
 8005124:	7afb      	ldrb	r3, [r7, #11]
}
 8005126:	4618      	mov	r0, r3
 8005128:	3714      	adds	r7, #20
 800512a:	46bd      	mov	sp, r7
 800512c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005130:	4770      	bx	lr
 8005132:	bf00      	nop
 8005134:	20000000 	.word	0x20000000
 8005138:	95cbec1b 	.word	0x95cbec1b

0800513c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b08a      	sub	sp, #40	; 0x28
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;
#endif

  /* Check the SD handle allocation */
  if(hsd == NULL)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d101      	bne.n	800514e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800514a:	2301      	movs	r3, #1
 800514c:	e078      	b.n	8005240 <HAL_SD_Init+0x104>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005154:	b2db      	uxtb	r3, r3
 8005156:	2b00      	cmp	r3, #0
 8005158:	d105      	bne.n	8005166 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2200      	movs	r2, #0
 800515e:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8005160:	6878      	ldr	r0, [r7, #4]
 8005162:	f7fb ff39 	bl	8000fd8 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2203      	movs	r2, #3
 800516a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800516e:	6878      	ldr	r0, [r7, #4]
 8005170:	f000 f86a 	bl	8005248 <HAL_SD_InitCard>
 8005174:	4603      	mov	r3, r0
 8005176:	2b00      	cmp	r3, #0
 8005178:	d001      	beq.n	800517e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800517a:	2301      	movs	r3, #1
 800517c:	e060      	b.n	8005240 <HAL_SD_Init+0x104>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800517e:	f107 0308 	add.w	r3, r7, #8
 8005182:	4619      	mov	r1, r3
 8005184:	6878      	ldr	r0, [r7, #4]
 8005186:	f000 faa5 	bl	80056d4 <HAL_SD_GetCardStatus>
 800518a:	4603      	mov	r3, r0
 800518c:	2b00      	cmp	r3, #0
 800518e:	d001      	beq.n	8005194 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 8005190:	2301      	movs	r3, #1
 8005192:	e055      	b.n	8005240 <HAL_SD_Init+0x104>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8005194:	7e3b      	ldrb	r3, [r7, #24]
 8005196:	b2db      	uxtb	r3, r3
 8005198:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800519a:	7e7b      	ldrb	r3, [r7, #25]
 800519c:	b2db      	uxtb	r3, r3
 800519e:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051a4:	2b01      	cmp	r3, #1
 80051a6:	d10a      	bne.n	80051be <HAL_SD_Init+0x82>
 80051a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d102      	bne.n	80051b4 <HAL_SD_Init+0x78>
 80051ae:	6a3b      	ldr	r3, [r7, #32]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d004      	beq.n	80051be <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80051ba:	65da      	str	r2, [r3, #92]	; 0x5c
 80051bc:	e00b      	b.n	80051d6 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051c2:	2b01      	cmp	r3, #1
 80051c4:	d104      	bne.n	80051d0 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80051cc:	65da      	str	r2, [r3, #92]	; 0x5c
 80051ce:	e002      	b.n	80051d6 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2200      	movs	r2, #0
 80051d4:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }
  /* Configure the bus wide */
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	68db      	ldr	r3, [r3, #12]
 80051da:	4619      	mov	r1, r3
 80051dc:	6878      	ldr	r0, [r7, #4]
 80051de:	f000 fb2f 	bl	8005840 <HAL_SD_ConfigWideBusOperation>
 80051e2:	4603      	mov	r3, r0
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d001      	beq.n	80051ec <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 80051e8:	2301      	movs	r3, #1
 80051ea:	e029      	b.n	8005240 <HAL_SD_Init+0x104>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 80051ec:	f7fc fafe 	bl	80017ec <HAL_GetTick>
 80051f0:	61f8      	str	r0, [r7, #28]
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 80051f2:	e014      	b.n	800521e <HAL_SD_Init+0xe2>
  {
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
 80051f4:	f7fc fafa 	bl	80017ec <HAL_GetTick>
 80051f8:	4602      	mov	r2, r0
 80051fa:	69fb      	ldr	r3, [r7, #28]
 80051fc:	1ad3      	subs	r3, r2, r3
 80051fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005202:	d10c      	bne.n	800521e <HAL_SD_Init+0xe2>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800520a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2201      	movs	r2, #1
 8005210:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2200      	movs	r2, #0
 8005218:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 800521a:	2303      	movs	r3, #3
 800521c:	e010      	b.n	8005240 <HAL_SD_Init+0x104>
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800521e:	6878      	ldr	r0, [r7, #4]
 8005220:	f000 fc22 	bl	8005a68 <HAL_SD_GetCardState>
 8005224:	4603      	mov	r3, r0
 8005226:	2b04      	cmp	r3, #4
 8005228:	d1e4      	bne.n	80051f4 <HAL_SD_Init+0xb8>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2200      	movs	r2, #0
 800522e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2200      	movs	r2, #0
 8005234:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2201      	movs	r2, #1
 800523a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800523e:	2300      	movs	r3, #0
}
 8005240:	4618      	mov	r0, r3
 8005242:	3728      	adds	r7, #40	; 0x28
 8005244:	46bd      	mov	sp, r7
 8005246:	bd80      	pop	{r7, pc}

08005248 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005248:	b5b0      	push	{r4, r5, r7, lr}
 800524a:	b08e      	sub	sp, #56	; 0x38
 800524c:	af04      	add	r7, sp, #16
 800524e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8005250:	2300      	movs	r3, #0
 8005252:	60bb      	str	r3, [r7, #8]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8005254:	2300      	movs	r3, #0
 8005256:	60fb      	str	r3, [r7, #12]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8005258:	2300      	movs	r3, #0
 800525a:	613b      	str	r3, [r7, #16]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800525c:	2300      	movs	r3, #0
 800525e:	617b      	str	r3, [r7, #20]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 8005260:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8005264:	f7fe fb38 	bl	80038d8 <HAL_RCCEx_GetPeriphCLKFreq>
 8005268:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 800526a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800526c:	2b00      	cmp	r3, #0
 800526e:	d109      	bne.n	8005284 <HAL_SD_InitCard+0x3c>
  {
      hsd->State = HAL_SD_STATE_READY;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2201      	movs	r2, #1
 8005274:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800527e:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8005280:	2301      	movs	r3, #1
 8005282:	e079      	b.n	8005378 <HAL_SD_InitCard+0x130>
  }
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockDiv = ((sdmmc_clk / SD_INIT_FREQ) - 2U);
#else
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8005284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005286:	0a1b      	lsrs	r3, r3, #8
 8005288:	4a3d      	ldr	r2, [pc, #244]	; (8005380 <HAL_SD_InitCard+0x138>)
 800528a:	fba2 2303 	umull	r2, r3, r2, r3
 800528e:	091b      	lsrs	r3, r3, #4
 8005290:	61bb      	str	r3, [r7, #24]
#endif

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  Init.Transceiver = hsd->Init.Transceiver;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	699b      	ldr	r3, [r3, #24]
 8005296:	61fb      	str	r3, [r7, #28]
  if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	699b      	ldr	r3, [r3, #24]
 800529c:	2b01      	cmp	r3, #1
 800529e:	d107      	bne.n	80052b0 <HAL_SD_InitCard+0x68>
  {
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	681a      	ldr	r2, [r3, #0]
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f042 0210 	orr.w	r2, r2, #16
 80052ae:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681d      	ldr	r5, [r3, #0]
 80052b4:	466c      	mov	r4, sp
 80052b6:	f107 0314 	add.w	r3, r7, #20
 80052ba:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80052be:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80052c2:	f107 0308 	add.w	r3, r7, #8
 80052c6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80052c8:	4628      	mov	r0, r5
 80052ca:	f002 f837 	bl	800733c <SDMMC_Init>
  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	4618      	mov	r0, r3
 80052d4:	f002 f869 	bl	80073aa <SDMMC_PowerState_ON>
  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  sdmmc_clk = sdmmc_clk/(Init.ClockDiv + 2U);
#else
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
 80052d8:	69bb      	ldr	r3, [r7, #24]
 80052da:	005b      	lsls	r3, r3, #1
 80052dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052de:	fbb2 f3f3 	udiv	r3, r2, r3
 80052e2:	627b      	str	r3, [r7, #36]	; 0x24
#endif
  HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 80052e4:	4a27      	ldr	r2, [pc, #156]	; (8005384 <HAL_SD_InitCard+0x13c>)
 80052e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80052ec:	3301      	adds	r3, #1
 80052ee:	4618      	mov	r0, r3
 80052f0:	f7fc fa88 	bl	8001804 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80052f4:	6878      	ldr	r0, [r7, #4]
 80052f6:	f000 fc97 	bl	8005c28 <SD_PowerON>
 80052fa:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80052fc:	6a3b      	ldr	r3, [r7, #32]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d00b      	beq.n	800531a <HAL_SD_InitCard+0xd2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2201      	movs	r2, #1
 8005306:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800530e:	6a3b      	ldr	r3, [r7, #32]
 8005310:	431a      	orrs	r2, r3
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005316:	2301      	movs	r3, #1
 8005318:	e02e      	b.n	8005378 <HAL_SD_InitCard+0x130>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800531a:	6878      	ldr	r0, [r7, #4]
 800531c:	f000 fbc4 	bl	8005aa8 <SD_InitCard>
 8005320:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005322:	6a3b      	ldr	r3, [r7, #32]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d00b      	beq.n	8005340 <HAL_SD_InitCard+0xf8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2201      	movs	r2, #1
 800532c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005334:	6a3b      	ldr	r3, [r7, #32]
 8005336:	431a      	orrs	r2, r3
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800533c:	2301      	movs	r3, #1
 800533e:	e01b      	b.n	8005378 <HAL_SD_InitCard+0x130>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005348:	4618      	mov	r0, r3
 800534a:	f002 f8c5 	bl	80074d8 <SDMMC_CmdBlockLength>
 800534e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005350:	6a3b      	ldr	r3, [r7, #32]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d00f      	beq.n	8005376 <HAL_SD_InitCard+0x12e>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4a0b      	ldr	r2, [pc, #44]	; (8005388 <HAL_SD_InitCard+0x140>)
 800535c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005362:	6a3b      	ldr	r3, [r7, #32]
 8005364:	431a      	orrs	r2, r3
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2201      	movs	r2, #1
 800536e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005372:	2301      	movs	r3, #1
 8005374:	e000      	b.n	8005378 <HAL_SD_InitCard+0x130>
  }

  return HAL_OK;
 8005376:	2300      	movs	r3, #0
}
 8005378:	4618      	mov	r0, r3
 800537a:	3728      	adds	r7, #40	; 0x28
 800537c:	46bd      	mov	sp, r7
 800537e:	bdb0      	pop	{r4, r5, r7, pc}
 8005380:	014f8b59 	.word	0x014f8b59
 8005384:	00012110 	.word	0x00012110
 8005388:	1fe00fff 	.word	0x1fe00fff

0800538c <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800538c:	b480      	push	{r7}
 800538e:	b083      	sub	sp, #12
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
 8005394:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800539a:	0f9b      	lsrs	r3, r3, #30
 800539c:	b2da      	uxtb	r2, r3
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053a6:	0e9b      	lsrs	r3, r3, #26
 80053a8:	b2db      	uxtb	r3, r3
 80053aa:	f003 030f 	and.w	r3, r3, #15
 80053ae:	b2da      	uxtb	r2, r3
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053b8:	0e1b      	lsrs	r3, r3, #24
 80053ba:	b2db      	uxtb	r3, r3
 80053bc:	f003 0303 	and.w	r3, r3, #3
 80053c0:	b2da      	uxtb	r2, r3
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053ca:	0c1b      	lsrs	r3, r3, #16
 80053cc:	b2da      	uxtb	r2, r3
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053d6:	0a1b      	lsrs	r3, r3, #8
 80053d8:	b2da      	uxtb	r2, r3
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053e2:	b2da      	uxtb	r2, r3
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80053ec:	0d1b      	lsrs	r3, r3, #20
 80053ee:	b29a      	uxth	r2, r3
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80053f8:	0c1b      	lsrs	r3, r3, #16
 80053fa:	b2db      	uxtb	r3, r3
 80053fc:	f003 030f 	and.w	r3, r3, #15
 8005400:	b2da      	uxtb	r2, r3
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800540a:	0bdb      	lsrs	r3, r3, #15
 800540c:	b2db      	uxtb	r3, r3
 800540e:	f003 0301 	and.w	r3, r3, #1
 8005412:	b2da      	uxtb	r2, r3
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800541c:	0b9b      	lsrs	r3, r3, #14
 800541e:	b2db      	uxtb	r3, r3
 8005420:	f003 0301 	and.w	r3, r3, #1
 8005424:	b2da      	uxtb	r2, r3
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800542e:	0b5b      	lsrs	r3, r3, #13
 8005430:	b2db      	uxtb	r3, r3
 8005432:	f003 0301 	and.w	r3, r3, #1
 8005436:	b2da      	uxtb	r2, r3
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005440:	0b1b      	lsrs	r3, r3, #12
 8005442:	b2db      	uxtb	r3, r3
 8005444:	f003 0301 	and.w	r3, r3, #1
 8005448:	b2da      	uxtb	r2, r3
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	2200      	movs	r2, #0
 8005452:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005458:	2b00      	cmp	r3, #0
 800545a:	d163      	bne.n	8005524 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005460:	009a      	lsls	r2, r3, #2
 8005462:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005466:	4013      	ands	r3, r2
 8005468:	687a      	ldr	r2, [r7, #4]
 800546a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800546c:	0f92      	lsrs	r2, r2, #30
 800546e:	431a      	orrs	r2, r3
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005478:	0edb      	lsrs	r3, r3, #27
 800547a:	b2db      	uxtb	r3, r3
 800547c:	f003 0307 	and.w	r3, r3, #7
 8005480:	b2da      	uxtb	r2, r3
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800548a:	0e1b      	lsrs	r3, r3, #24
 800548c:	b2db      	uxtb	r3, r3
 800548e:	f003 0307 	and.w	r3, r3, #7
 8005492:	b2da      	uxtb	r2, r3
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800549c:	0d5b      	lsrs	r3, r3, #21
 800549e:	b2db      	uxtb	r3, r3
 80054a0:	f003 0307 	and.w	r3, r3, #7
 80054a4:	b2da      	uxtb	r2, r3
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80054ae:	0c9b      	lsrs	r3, r3, #18
 80054b0:	b2db      	uxtb	r3, r3
 80054b2:	f003 0307 	and.w	r3, r3, #7
 80054b6:	b2da      	uxtb	r2, r3
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80054c0:	0bdb      	lsrs	r3, r3, #15
 80054c2:	b2db      	uxtb	r3, r3
 80054c4:	f003 0307 	and.w	r3, r3, #7
 80054c8:	b2da      	uxtb	r2, r3
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	691b      	ldr	r3, [r3, #16]
 80054d2:	1c5a      	adds	r2, r3, #1
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	7e1b      	ldrb	r3, [r3, #24]
 80054dc:	b2db      	uxtb	r3, r3
 80054de:	f003 0307 	and.w	r3, r3, #7
 80054e2:	3302      	adds	r3, #2
 80054e4:	2201      	movs	r2, #1
 80054e6:	fa02 f303 	lsl.w	r3, r2, r3
 80054ea:	687a      	ldr	r2, [r7, #4]
 80054ec:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80054ee:	fb03 f202 	mul.w	r2, r3, r2
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	7a1b      	ldrb	r3, [r3, #8]
 80054fa:	b2db      	uxtb	r3, r3
 80054fc:	f003 030f 	and.w	r3, r3, #15
 8005500:	2201      	movs	r2, #1
 8005502:	409a      	lsls	r2, r3
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	651a      	str	r2, [r3, #80]	; 0x50

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800550c:	687a      	ldr	r2, [r7, #4]
 800550e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005510:	0a52      	lsrs	r2, r2, #9
 8005512:	fb03 f202 	mul.w	r2, r3, r2
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockSize = 512U;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005520:	659a      	str	r2, [r3, #88]	; 0x58
 8005522:	e031      	b.n	8005588 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005528:	2b01      	cmp	r3, #1
 800552a:	d11d      	bne.n	8005568 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005530:	041b      	lsls	r3, r3, #16
 8005532:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800553a:	0c1b      	lsrs	r3, r3, #16
 800553c:	431a      	orrs	r2, r3
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	691b      	ldr	r3, [r3, #16]
 8005546:	3301      	adds	r3, #1
 8005548:	029a      	lsls	r2, r3, #10
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 512U;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	f44f 7200 	mov.w	r2, #512	; 0x200
 800555c:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	659a      	str	r2, [r3, #88]	; 0x58
 8005566:	e00f      	b.n	8005588 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4a58      	ldr	r2, [pc, #352]	; (80056d0 <HAL_SD_GetCardCSD+0x344>)
 800556e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005574:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2201      	movs	r2, #1
 8005580:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005584:	2301      	movs	r3, #1
 8005586:	e09d      	b.n	80056c4 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800558c:	0b9b      	lsrs	r3, r3, #14
 800558e:	b2db      	uxtb	r3, r3
 8005590:	f003 0301 	and.w	r3, r3, #1
 8005594:	b2da      	uxtb	r2, r3
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800559e:	09db      	lsrs	r3, r3, #7
 80055a0:	b2db      	uxtb	r3, r3
 80055a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80055a6:	b2da      	uxtb	r2, r3
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80055b0:	b2db      	uxtb	r3, r3
 80055b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80055b6:	b2da      	uxtb	r2, r3
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80055c0:	0fdb      	lsrs	r3, r3, #31
 80055c2:	b2da      	uxtb	r2, r3
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80055cc:	0f5b      	lsrs	r3, r3, #29
 80055ce:	b2db      	uxtb	r3, r3
 80055d0:	f003 0303 	and.w	r3, r3, #3
 80055d4:	b2da      	uxtb	r2, r3
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80055de:	0e9b      	lsrs	r3, r3, #26
 80055e0:	b2db      	uxtb	r3, r3
 80055e2:	f003 0307 	and.w	r3, r3, #7
 80055e6:	b2da      	uxtb	r2, r3
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80055f0:	0d9b      	lsrs	r3, r3, #22
 80055f2:	b2db      	uxtb	r3, r3
 80055f4:	f003 030f 	and.w	r3, r3, #15
 80055f8:	b2da      	uxtb	r2, r3
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005602:	0d5b      	lsrs	r3, r3, #21
 8005604:	b2db      	uxtb	r3, r3
 8005606:	f003 0301 	and.w	r3, r3, #1
 800560a:	b2da      	uxtb	r2, r3
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	2200      	movs	r2, #0
 8005616:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800561e:	0c1b      	lsrs	r3, r3, #16
 8005620:	b2db      	uxtb	r3, r3
 8005622:	f003 0301 	and.w	r3, r3, #1
 8005626:	b2da      	uxtb	r2, r3
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005632:	0bdb      	lsrs	r3, r3, #15
 8005634:	b2db      	uxtb	r3, r3
 8005636:	f003 0301 	and.w	r3, r3, #1
 800563a:	b2da      	uxtb	r2, r3
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005646:	0b9b      	lsrs	r3, r3, #14
 8005648:	b2db      	uxtb	r3, r3
 800564a:	f003 0301 	and.w	r3, r3, #1
 800564e:	b2da      	uxtb	r2, r3
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800565a:	0b5b      	lsrs	r3, r3, #13
 800565c:	b2db      	uxtb	r3, r3
 800565e:	f003 0301 	and.w	r3, r3, #1
 8005662:	b2da      	uxtb	r2, r3
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800566e:	0b1b      	lsrs	r3, r3, #12
 8005670:	b2db      	uxtb	r3, r3
 8005672:	f003 0301 	and.w	r3, r3, #1
 8005676:	b2da      	uxtb	r2, r3
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005682:	0a9b      	lsrs	r3, r3, #10
 8005684:	b2db      	uxtb	r3, r3
 8005686:	f003 0303 	and.w	r3, r3, #3
 800568a:	b2da      	uxtb	r2, r3
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005696:	0a1b      	lsrs	r3, r3, #8
 8005698:	b2db      	uxtb	r3, r3
 800569a:	f003 0303 	and.w	r3, r3, #3
 800569e:	b2da      	uxtb	r2, r3
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80056aa:	085b      	lsrs	r3, r3, #1
 80056ac:	b2db      	uxtb	r3, r3
 80056ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80056b2:	b2da      	uxtb	r2, r3
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	2201      	movs	r2, #1
 80056be:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80056c2:	2300      	movs	r3, #0
}
 80056c4:	4618      	mov	r0, r3
 80056c6:	370c      	adds	r7, #12
 80056c8:	46bd      	mov	sp, r7
 80056ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ce:	4770      	bx	lr
 80056d0:	1fe00fff 	.word	0x1fe00fff

080056d4 <HAL_SD_GetCardStatus>:
  * @param  pStatus Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b094      	sub	sp, #80	; 0x50
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
 80056dc:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 80056de:	2300      	movs	r3, #0
 80056e0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  errorstate = SD_SendSDStatus(hsd, sd_status);
 80056e4:	f107 0308 	add.w	r3, r7, #8
 80056e8:	4619      	mov	r1, r3
 80056ea:	6878      	ldr	r0, [r7, #4]
 80056ec:	f000 fba8 	bl	8005e40 <SD_SendSDStatus>
 80056f0:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 80056f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d011      	beq.n	800571c <HAL_SD_GetCardStatus+0x48>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	4a4f      	ldr	r2, [pc, #316]	; (800583c <HAL_SD_GetCardStatus+0x168>)
 80056fe:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005704:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005706:	431a      	orrs	r2, r3
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2201      	movs	r2, #1
 8005710:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8005714:	2301      	movs	r3, #1
 8005716:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800571a:	e070      	b.n	80057fe <HAL_SD_GetCardStatus+0x12a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	099b      	lsrs	r3, r3, #6
 8005720:	b2db      	uxtb	r3, r3
 8005722:	f003 0303 	and.w	r3, r3, #3
 8005726:	b2da      	uxtb	r2, r3
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800572c:	68bb      	ldr	r3, [r7, #8]
 800572e:	095b      	lsrs	r3, r3, #5
 8005730:	b2db      	uxtb	r3, r3
 8005732:	f003 0301 	and.w	r3, r3, #1
 8005736:	b2da      	uxtb	r2, r3
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	0a1b      	lsrs	r3, r3, #8
 8005740:	b29b      	uxth	r3, r3
 8005742:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005746:	b29a      	uxth	r2, r3
 8005748:	68bb      	ldr	r3, [r7, #8]
 800574a:	0e1b      	lsrs	r3, r3, #24
 800574c:	b29b      	uxth	r3, r3
 800574e:	4313      	orrs	r3, r2
 8005750:	b29a      	uxth	r2, r3
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	061a      	lsls	r2, r3, #24
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	021b      	lsls	r3, r3, #8
 800575e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005762:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	0a1b      	lsrs	r3, r3, #8
 8005768:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800576c:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	0e1b      	lsrs	r3, r3, #24
 8005772:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8005778:	693b      	ldr	r3, [r7, #16]
 800577a:	b2da      	uxtb	r2, r3
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8005780:	693b      	ldr	r3, [r7, #16]
 8005782:	0a1b      	lsrs	r3, r3, #8
 8005784:	b2da      	uxtb	r2, r3
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800578a:	693b      	ldr	r3, [r7, #16]
 800578c:	0d1b      	lsrs	r3, r3, #20
 800578e:	b2db      	uxtb	r3, r3
 8005790:	f003 030f 	and.w	r3, r3, #15
 8005794:	b2da      	uxtb	r2, r3
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800579a:	693b      	ldr	r3, [r7, #16]
 800579c:	0c1b      	lsrs	r3, r3, #16
 800579e:	b29b      	uxth	r3, r3
 80057a0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80057a4:	b29a      	uxth	r2, r3
 80057a6:	697b      	ldr	r3, [r7, #20]
 80057a8:	b29b      	uxth	r3, r3
 80057aa:	b2db      	uxtb	r3, r3
 80057ac:	b29b      	uxth	r3, r3
 80057ae:	4313      	orrs	r3, r2
 80057b0:	b29a      	uxth	r2, r3
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 80057b6:	697b      	ldr	r3, [r7, #20]
 80057b8:	0a9b      	lsrs	r3, r3, #10
 80057ba:	b2db      	uxtb	r3, r3
 80057bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80057c0:	b2da      	uxtb	r2, r3
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 80057c6:	697b      	ldr	r3, [r7, #20]
 80057c8:	0a1b      	lsrs	r3, r3, #8
 80057ca:	b2db      	uxtb	r3, r3
 80057cc:	f003 0303 	and.w	r3, r3, #3
 80057d0:	b2da      	uxtb	r2, r3
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	73da      	strb	r2, [r3, #15]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 80057d6:	697b      	ldr	r3, [r7, #20]
 80057d8:	091b      	lsrs	r3, r3, #4
 80057da:	b2db      	uxtb	r3, r3
 80057dc:	f003 030f 	and.w	r3, r3, #15
 80057e0:	b2da      	uxtb	r2, r3
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 80057e6:	697b      	ldr	r3, [r7, #20]
 80057e8:	b2db      	uxtb	r3, r3
 80057ea:	f003 030f 	and.w	r3, r3, #15
 80057ee:	b2da      	uxtb	r2, r3
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 80057f4:	69bb      	ldr	r3, [r7, #24]
 80057f6:	0e1b      	lsrs	r3, r3, #24
 80057f8:	b2da      	uxtb	r2, r3
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	749a      	strb	r2, [r3, #18]
#endif
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005806:	4618      	mov	r0, r3
 8005808:	f001 fe66 	bl	80074d8 <SDMMC_CmdBlockLength>
 800580c:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 800580e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005810:	2b00      	cmp	r3, #0
 8005812:	d00d      	beq.n	8005830 <HAL_SD_GetCardStatus+0x15c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	4a08      	ldr	r2, [pc, #32]	; (800583c <HAL_SD_GetCardStatus+0x168>)
 800581a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005820:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2201      	movs	r2, #1
 8005826:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800582a:	2301      	movs	r3, #1
 800582c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }

  return status;
 8005830:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8005834:	4618      	mov	r0, r3
 8005836:	3750      	adds	r7, #80	; 0x50
 8005838:	46bd      	mov	sp, r7
 800583a:	bd80      	pop	{r7, pc}
 800583c:	1fe00fff 	.word	0x1fe00fff

08005840 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8005840:	b5b0      	push	{r4, r5, r7, lr}
 8005842:	b090      	sub	sp, #64	; 0x40
 8005844:	af04      	add	r7, sp, #16
 8005846:	6078      	str	r0, [r7, #4]
 8005848:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 800584a:	2300      	movs	r3, #0
 800584c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2203      	movs	r2, #3
 8005854:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800585c:	2b03      	cmp	r3, #3
 800585e:	d02e      	beq.n	80058be <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005866:	d106      	bne.n	8005876 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800586c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	639a      	str	r2, [r3, #56]	; 0x38
 8005874:	e029      	b.n	80058ca <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800587c:	d10a      	bne.n	8005894 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800587e:	6878      	ldr	r0, [r7, #4]
 8005880:	f000 fbd6 	bl	8006030 <SD_WideBus_Enable>
 8005884:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800588a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800588c:	431a      	orrs	r2, r3
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	639a      	str	r2, [r3, #56]	; 0x38
 8005892:	e01a      	b.n	80058ca <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d10a      	bne.n	80058b0 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800589a:	6878      	ldr	r0, [r7, #4]
 800589c:	f000 fc13 	bl	80060c6 <SD_WideBus_Disable>
 80058a0:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80058a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058a8:	431a      	orrs	r2, r3
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	639a      	str	r2, [r3, #56]	; 0x38
 80058ae:	e00c      	b.n	80058ca <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058b4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	639a      	str	r2, [r3, #56]	; 0x38
 80058bc:	e005      	b.n	80058ca <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058c2:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d007      	beq.n	80058e2 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	4a60      	ldr	r2, [pc, #384]	; (8005a58 <HAL_SD_ConfigWideBusOperation+0x218>)
 80058d8:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 80058da:	2301      	movs	r3, #1
 80058dc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80058e0:	e097      	b.n	8005a12 <HAL_SD_ConfigWideBusOperation+0x1d2>
  }
  else
  {
    sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 80058e2:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80058e6:	f7fd fff7 	bl	80038d8 <HAL_RCCEx_GetPeriphCLKFreq>
 80058ea:	6278      	str	r0, [r7, #36]	; 0x24
    if (sdmmc_clk != 0U)
 80058ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	f000 8086 	beq.w	8005a00 <HAL_SD_ConfigWideBusOperation+0x1c0>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	685b      	ldr	r3, [r3, #4]
 80058f8:	60fb      	str	r3, [r7, #12]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
      Init.ClockBypass         = hsd->Init.ClockBypass;
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	689b      	ldr	r3, [r3, #8]
 80058fe:	613b      	str	r3, [r7, #16]
      Init.BusWide             = WideMode;
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	617b      	str	r3, [r7, #20]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	691b      	ldr	r3, [r3, #16]
 8005908:	61bb      	str	r3, [r7, #24]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	695a      	ldr	r2, [r3, #20]
 800590e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005910:	4952      	ldr	r1, [pc, #328]	; (8005a5c <HAL_SD_ConfigWideBusOperation+0x21c>)
 8005912:	fba1 1303 	umull	r1, r3, r1, r3
 8005916:	0e1b      	lsrs	r3, r3, #24
 8005918:	429a      	cmp	r2, r3
 800591a:	d303      	bcc.n	8005924 <HAL_SD_ConfigWideBusOperation+0xe4>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	695b      	ldr	r3, [r3, #20]
 8005920:	61fb      	str	r3, [r7, #28]
 8005922:	e05a      	b.n	80059da <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005928:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800592c:	d103      	bne.n	8005936 <HAL_SD_ConfigWideBusOperation+0xf6>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	695b      	ldr	r3, [r3, #20]
 8005932:	61fb      	str	r3, [r7, #28]
 8005934:	e051      	b.n	80059da <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800593a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800593e:	d126      	bne.n	800598e <HAL_SD_ConfigWideBusOperation+0x14e>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	695b      	ldr	r3, [r3, #20]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d10e      	bne.n	8005966 <HAL_SD_ConfigWideBusOperation+0x126>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 8005948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800594a:	4a45      	ldr	r2, [pc, #276]	; (8005a60 <HAL_SD_ConfigWideBusOperation+0x220>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d906      	bls.n	800595e <HAL_SD_ConfigWideBusOperation+0x11e>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8005950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005952:	4a42      	ldr	r2, [pc, #264]	; (8005a5c <HAL_SD_ConfigWideBusOperation+0x21c>)
 8005954:	fba2 2303 	umull	r2, r3, r2, r3
 8005958:	0e5b      	lsrs	r3, r3, #25
 800595a:	61fb      	str	r3, [r7, #28]
 800595c:	e03d      	b.n	80059da <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	695b      	ldr	r3, [r3, #20]
 8005962:	61fb      	str	r3, [r7, #28]
 8005964:	e039      	b.n	80059da <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	695b      	ldr	r3, [r3, #20]
 800596a:	005b      	lsls	r3, r3, #1
 800596c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800596e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005972:	4a3b      	ldr	r2, [pc, #236]	; (8005a60 <HAL_SD_ConfigWideBusOperation+0x220>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d906      	bls.n	8005986 <HAL_SD_ConfigWideBusOperation+0x146>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8005978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800597a:	4a38      	ldr	r2, [pc, #224]	; (8005a5c <HAL_SD_ConfigWideBusOperation+0x21c>)
 800597c:	fba2 2303 	umull	r2, r3, r2, r3
 8005980:	0e5b      	lsrs	r3, r3, #25
 8005982:	61fb      	str	r3, [r7, #28]
 8005984:	e029      	b.n	80059da <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	695b      	ldr	r3, [r3, #20]
 800598a:	61fb      	str	r3, [r7, #28]
 800598c:	e025      	b.n	80059da <HAL_SD_ConfigWideBusOperation+0x19a>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	695b      	ldr	r3, [r3, #20]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d10e      	bne.n	80059b4 <HAL_SD_ConfigWideBusOperation+0x174>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 8005996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005998:	4a32      	ldr	r2, [pc, #200]	; (8005a64 <HAL_SD_ConfigWideBusOperation+0x224>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d906      	bls.n	80059ac <HAL_SD_ConfigWideBusOperation+0x16c>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800599e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059a0:	4a2e      	ldr	r2, [pc, #184]	; (8005a5c <HAL_SD_ConfigWideBusOperation+0x21c>)
 80059a2:	fba2 2303 	umull	r2, r3, r2, r3
 80059a6:	0e1b      	lsrs	r3, r3, #24
 80059a8:	61fb      	str	r3, [r7, #28]
 80059aa:	e016      	b.n	80059da <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	695b      	ldr	r3, [r3, #20]
 80059b0:	61fb      	str	r3, [r7, #28]
 80059b2:	e012      	b.n	80059da <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	695b      	ldr	r3, [r3, #20]
 80059b8:	005b      	lsls	r3, r3, #1
 80059ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80059c0:	4a28      	ldr	r2, [pc, #160]	; (8005a64 <HAL_SD_ConfigWideBusOperation+0x224>)
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d906      	bls.n	80059d4 <HAL_SD_ConfigWideBusOperation+0x194>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 80059c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059c8:	4a24      	ldr	r2, [pc, #144]	; (8005a5c <HAL_SD_ConfigWideBusOperation+0x21c>)
 80059ca:	fba2 2303 	umull	r2, r3, r2, r3
 80059ce:	0e1b      	lsrs	r3, r3, #24
 80059d0:	61fb      	str	r3, [r7, #28]
 80059d2:	e002      	b.n	80059da <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	695b      	ldr	r3, [r3, #20]
 80059d8:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      Init.Transceiver = hsd->Init.Transceiver;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	699b      	ldr	r3, [r3, #24]
 80059de:	623b      	str	r3, [r7, #32]
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
      }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

      (void)SDMMC_Init(hsd->Instance, Init);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681d      	ldr	r5, [r3, #0]
 80059e4:	466c      	mov	r4, sp
 80059e6:	f107 0318 	add.w	r3, r7, #24
 80059ea:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80059ee:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80059f2:	f107 030c 	add.w	r3, r7, #12
 80059f6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80059f8:	4628      	mov	r0, r5
 80059fa:	f001 fc9f 	bl	800733c <SDMMC_Init>
 80059fe:	e008      	b.n	8005a12 <HAL_SD_ConfigWideBusOperation+0x1d2>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a04:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	639a      	str	r2, [r3, #56]	; 0x38
      status = HAL_ERROR;
 8005a0c:	2301      	movs	r3, #1
 8005a0e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	f001 fd5c 	bl	80074d8 <SDMMC_CmdBlockLength>
 8005a20:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8005a22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d00c      	beq.n	8005a42 <HAL_SD_ConfigWideBusOperation+0x202>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	4a0a      	ldr	r2, [pc, #40]	; (8005a58 <HAL_SD_ConfigWideBusOperation+0x218>)
 8005a2e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a36:	431a      	orrs	r2, r3
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2201      	movs	r2, #1
 8005a46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8005a4a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8005a4e:	4618      	mov	r0, r3
 8005a50:	3730      	adds	r7, #48	; 0x30
 8005a52:	46bd      	mov	sp, r7
 8005a54:	bdb0      	pop	{r4, r5, r7, pc}
 8005a56:	bf00      	nop
 8005a58:	1fe00fff 	.word	0x1fe00fff
 8005a5c:	55e63b89 	.word	0x55e63b89
 8005a60:	02faf080 	.word	0x02faf080
 8005a64:	017d7840 	.word	0x017d7840

08005a68 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b086      	sub	sp, #24
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8005a70:	2300      	movs	r3, #0
 8005a72:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8005a74:	f107 030c 	add.w	r3, r7, #12
 8005a78:	4619      	mov	r1, r3
 8005a7a:	6878      	ldr	r0, [r7, #4]
 8005a7c:	f000 fab0 	bl	8005fe0 <SD_SendStatus>
 8005a80:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005a82:	697b      	ldr	r3, [r7, #20]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d005      	beq.n	8005a94 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a8c:	697b      	ldr	r3, [r7, #20]
 8005a8e:	431a      	orrs	r2, r3
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	0a5b      	lsrs	r3, r3, #9
 8005a98:	f003 030f 	and.w	r3, r3, #15
 8005a9c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8005a9e:	693b      	ldr	r3, [r7, #16]
}
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	3718      	adds	r7, #24
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	bd80      	pop	{r7, pc}

08005aa8 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005aa8:	b5b0      	push	{r4, r5, r7, lr}
 8005aaa:	b090      	sub	sp, #64	; 0x40
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8005ab0:	2301      	movs	r3, #1
 8005ab2:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	4618      	mov	r0, r3
 8005aba:	f001 fc88 	bl	80073ce <SDMMC_GetPowerState>
 8005abe:	4603      	mov	r3, r0
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d102      	bne.n	8005aca <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005ac4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8005ac8:	e0a9      	b.n	8005c1e <SD_InitCard+0x176>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ace:	2b03      	cmp	r3, #3
 8005ad0:	d02e      	beq.n	8005b30 <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	f001 fe0b 	bl	80076f2 <SDMMC_CmdSendCID>
 8005adc:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005ade:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d001      	beq.n	8005ae8 <SD_InitCard+0x40>
    {
      return errorstate;
 8005ae4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ae6:	e09a      	b.n	8005c1e <SD_InitCard+0x176>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	2100      	movs	r1, #0
 8005aee:	4618      	mov	r0, r3
 8005af0:	f001 fcb3 	bl	800745a <SDMMC_GetResponse>
 8005af4:	4602      	mov	r2, r0
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	2104      	movs	r1, #4
 8005b00:	4618      	mov	r0, r3
 8005b02:	f001 fcaa 	bl	800745a <SDMMC_GetResponse>
 8005b06:	4602      	mov	r2, r0
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	2108      	movs	r1, #8
 8005b12:	4618      	mov	r0, r3
 8005b14:	f001 fca1 	bl	800745a <SDMMC_GetResponse>
 8005b18:	4602      	mov	r2, r0
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	210c      	movs	r1, #12
 8005b24:	4618      	mov	r0, r3
 8005b26:	f001 fc98 	bl	800745a <SDMMC_GetResponse>
 8005b2a:	4602      	mov	r2, r0
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	67da      	str	r2, [r3, #124]	; 0x7c
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b34:	2b03      	cmp	r3, #3
 8005b36:	d00d      	beq.n	8005b54 <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f107 020e 	add.w	r2, r7, #14
 8005b40:	4611      	mov	r1, r2
 8005b42:	4618      	mov	r0, r3
 8005b44:	f001 fe14 	bl	8007770 <SDMMC_CmdSetRelAdd>
 8005b48:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005b4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d001      	beq.n	8005b54 <SD_InitCard+0xac>
    {
      return errorstate;
 8005b50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b52:	e064      	b.n	8005c1e <SD_InitCard+0x176>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b58:	2b03      	cmp	r3, #3
 8005b5a:	d036      	beq.n	8005bca <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8005b5c:	89fb      	ldrh	r3, [r7, #14]
 8005b5e:	461a      	mov	r2, r3
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	649a      	str	r2, [r3, #72]	; 0x48

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681a      	ldr	r2, [r3, #0]
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b6c:	041b      	lsls	r3, r3, #16
 8005b6e:	4619      	mov	r1, r3
 8005b70:	4610      	mov	r0, r2
 8005b72:	f001 fddd 	bl	8007730 <SDMMC_CmdSendCSD>
 8005b76:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005b78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d001      	beq.n	8005b82 <SD_InitCard+0xda>
    {
      return errorstate;
 8005b7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b80:	e04d      	b.n	8005c1e <SD_InitCard+0x176>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	2100      	movs	r1, #0
 8005b88:	4618      	mov	r0, r3
 8005b8a:	f001 fc66 	bl	800745a <SDMMC_GetResponse>
 8005b8e:	4602      	mov	r2, r0
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	2104      	movs	r1, #4
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	f001 fc5d 	bl	800745a <SDMMC_GetResponse>
 8005ba0:	4602      	mov	r2, r0
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	2108      	movs	r1, #8
 8005bac:	4618      	mov	r0, r3
 8005bae:	f001 fc54 	bl	800745a <SDMMC_GetResponse>
 8005bb2:	4602      	mov	r2, r0
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	210c      	movs	r1, #12
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	f001 fc4b 	bl	800745a <SDMMC_GetResponse>
 8005bc4:	4602      	mov	r2, r0
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	66da      	str	r2, [r3, #108]	; 0x6c
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	2104      	movs	r1, #4
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	f001 fc42 	bl	800745a <SDMMC_GetResponse>
 8005bd6:	4603      	mov	r3, r0
 8005bd8:	0d1a      	lsrs	r2, r3, #20
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8005bde:	f107 0310 	add.w	r3, r7, #16
 8005be2:	4619      	mov	r1, r3
 8005be4:	6878      	ldr	r0, [r7, #4]
 8005be6:	f7ff fbd1 	bl	800538c <HAL_SD_GetCardCSD>
 8005bea:	4603      	mov	r3, r0
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d002      	beq.n	8005bf6 <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005bf0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005bf4:	e013      	b.n	8005c1e <SD_InitCard+0x176>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6819      	ldr	r1, [r3, #0]
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005bfe:	041b      	lsls	r3, r3, #16
 8005c00:	2200      	movs	r2, #0
 8005c02:	461c      	mov	r4, r3
 8005c04:	4615      	mov	r5, r2
 8005c06:	4622      	mov	r2, r4
 8005c08:	462b      	mov	r3, r5
 8005c0a:	4608      	mov	r0, r1
 8005c0c:	f001 fc87 	bl	800751e <SDMMC_CmdSelDesel>
 8005c10:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8005c12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d001      	beq.n	8005c1c <SD_InitCard+0x174>
  {
    return errorstate;
 8005c18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c1a:	e000      	b.n	8005c1e <SD_InitCard+0x176>
  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8005c1c:	2300      	movs	r3, #0
}
 8005c1e:	4618      	mov	r0, r3
 8005c20:	3740      	adds	r7, #64	; 0x40
 8005c22:	46bd      	mov	sp, r7
 8005c24:	bdb0      	pop	{r4, r5, r7, pc}
	...

08005c28 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b088      	sub	sp, #32
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005c30:	2300      	movs	r3, #0
 8005c32:	60fb      	str	r3, [r7, #12]
  uint32_t response = 0U, validvoltage = 0U;
 8005c34:	2300      	movs	r3, #0
 8005c36:	61fb      	str	r3, [r7, #28]
 8005c38:	2300      	movs	r3, #0
 8005c3a:	61bb      	str	r3, [r7, #24]
  uint32_t errorstate;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t tickstart = HAL_GetTick();
 8005c3c:	f7fb fdd6 	bl	80017ec <HAL_GetTick>
 8005c40:	6178      	str	r0, [r7, #20]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	4618      	mov	r0, r3
 8005c48:	f001 fc8d 	bl	8007566 <SDMMC_CmdGoIdleState>
 8005c4c:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005c4e:	693b      	ldr	r3, [r7, #16]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d001      	beq.n	8005c58 <SD_PowerON+0x30>
  {
    return errorstate;
 8005c54:	693b      	ldr	r3, [r7, #16]
 8005c56:	e0ed      	b.n	8005e34 <SD_PowerON+0x20c>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	f001 fca0 	bl	80075a2 <SDMMC_CmdOperCond>
 8005c62:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005c64:	693b      	ldr	r3, [r7, #16]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d00d      	beq.n	8005c86 <SD_PowerON+0x5e>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	641a      	str	r2, [r3, #64]	; 0x40
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	4618      	mov	r0, r3
 8005c76:	f001 fc76 	bl	8007566 <SDMMC_CmdGoIdleState>
 8005c7a:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005c7c:	693b      	ldr	r3, [r7, #16]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d004      	beq.n	8005c8c <SD_PowerON+0x64>
    {
      return errorstate;
 8005c82:	693b      	ldr	r3, [r7, #16]
 8005c84:	e0d6      	b.n	8005e34 <SD_PowerON+0x20c>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2201      	movs	r2, #1
 8005c8a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c90:	2b01      	cmp	r3, #1
 8005c92:	d137      	bne.n	8005d04 <SD_PowerON+0xdc>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	2100      	movs	r1, #0
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	f001 fca1 	bl	80075e2 <SDMMC_CmdAppCommand>
 8005ca0:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005ca2:	693b      	ldr	r3, [r7, #16]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d02d      	beq.n	8005d04 <SD_PowerON+0xdc>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005ca8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005cac:	e0c2      	b.n	8005e34 <SD_PowerON+0x20c>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	2100      	movs	r1, #0
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	f001 fc94 	bl	80075e2 <SDMMC_CmdAppCommand>
 8005cba:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005cbc:	693b      	ldr	r3, [r7, #16]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d001      	beq.n	8005cc6 <SD_PowerON+0x9e>
    {
      return errorstate;
 8005cc2:	693b      	ldr	r3, [r7, #16]
 8005cc4:	e0b6      	b.n	8005e34 <SD_PowerON+0x20c>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	495c      	ldr	r1, [pc, #368]	; (8005e3c <SD_PowerON+0x214>)
 8005ccc:	4618      	mov	r0, r3
 8005cce:	f001 fcab 	bl	8007628 <SDMMC_CmdAppOperCommand>
 8005cd2:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005cd4:	693b      	ldr	r3, [r7, #16]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d002      	beq.n	8005ce0 <SD_PowerON+0xb8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005cda:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005cde:	e0a9      	b.n	8005e34 <SD_PowerON+0x20c>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	2100      	movs	r1, #0
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	f001 fbb7 	bl	800745a <SDMMC_GetResponse>
 8005cec:	61f8      	str	r0, [r7, #28]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8005cee:	69fb      	ldr	r3, [r7, #28]
 8005cf0:	0fdb      	lsrs	r3, r3, #31
 8005cf2:	2b01      	cmp	r3, #1
 8005cf4:	d101      	bne.n	8005cfa <SD_PowerON+0xd2>
 8005cf6:	2301      	movs	r3, #1
 8005cf8:	e000      	b.n	8005cfc <SD_PowerON+0xd4>
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	61bb      	str	r3, [r7, #24]

    count++;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	3301      	adds	r3, #1
 8005d02:	60fb      	str	r3, [r7, #12]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d802      	bhi.n	8005d14 <SD_PowerON+0xec>
 8005d0e:	69bb      	ldr	r3, [r7, #24]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d0cc      	beq.n	8005cae <SD_PowerON+0x86>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d902      	bls.n	8005d24 <SD_PowerON+0xfc>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8005d1e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005d22:	e087      	b.n	8005e34 <SD_PowerON+0x20c>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8005d24:	69fb      	ldr	r3, [r7, #28]
 8005d26:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d07e      	beq.n	8005e2c <SD_PowerON+0x204>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2201      	movs	r2, #1
 8005d32:	63da      	str	r2, [r3, #60]	; 0x3c
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	699b      	ldr	r3, [r3, #24]
 8005d38:	2b01      	cmp	r3, #1
 8005d3a:	d17a      	bne.n	8005e32 <SD_PowerON+0x20a>
    {
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 8005d3c:	69fb      	ldr	r3, [r7, #28]
 8005d3e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d075      	beq.n	8005e32 <SD_PowerON+0x20a>
      {
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d4c:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Start switching procedue */
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	681a      	ldr	r2, [r3, #0]
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f042 0208 	orr.w	r2, r2, #8
 8005d5c:	601a      	str	r2, [r3, #0]

        /* Send CMD11 to switch 1.8V mode */
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	4618      	mov	r0, r3
 8005d64:	f001 fd6b 	bl	800783e <SDMMC_CmdVoltageSwitch>
 8005d68:	6138      	str	r0, [r7, #16]
        if(errorstate != HAL_SD_ERROR_NONE)
 8005d6a:	693b      	ldr	r3, [r7, #16]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d00c      	beq.n	8005d8a <SD_PowerON+0x162>
        {
          return errorstate;
 8005d70:	693b      	ldr	r3, [r7, #16]
 8005d72:	e05f      	b.n	8005e34 <SD_PowerON+0x20c>
        }

        /* Check to CKSTOP */
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
        {
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8005d74:	f7fb fd3a 	bl	80017ec <HAL_GetTick>
 8005d78:	4602      	mov	r2, r0
 8005d7a:	697b      	ldr	r3, [r7, #20]
 8005d7c:	1ad3      	subs	r3, r2, r3
 8005d7e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005d82:	d102      	bne.n	8005d8a <SD_PowerON+0x162>
          {
            return HAL_SD_ERROR_TIMEOUT;
 8005d84:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005d88:	e054      	b.n	8005e34 <SD_PowerON+0x20c>
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d90:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005d94:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005d98:	d1ec      	bne.n	8005d74 <SD_PowerON+0x14c>
          }
        }

        /* Clear CKSTOP Flag */
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8005da2:	639a      	str	r2, [r3, #56]	; 0x38

        /* Check to BusyD0 */
        if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005daa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005dae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005db2:	d002      	beq.n	8005dba <SD_PowerON+0x192>
        {
          /* Error when activate Voltage Switch in SDMMC Peripheral */
          return SDMMC_ERROR_UNSUPPORTED_FEATURE;
 8005db4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005db8:	e03c      	b.n	8005e34 <SD_PowerON+0x20c>
        {
          /* Enable Transceiver Switch PIN */
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->DriveTransceiver_1_8V_Callback(SET);
#else
          HAL_SDEx_DriveTransceiver_1_8V_Callback(SET);
 8005dba:	2001      	movs	r0, #1
 8005dbc:	f000 fa9e 	bl	80062fc <HAL_SDEx_DriveTransceiver_1_8V_Callback>
#endif

          /* Switch ready */
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	681a      	ldr	r2, [r3, #0]
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f042 0204 	orr.w	r2, r2, #4
 8005dce:	601a      	str	r2, [r3, #0]

          /* Check VSWEND Flag */
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 8005dd0:	e00a      	b.n	8005de8 <SD_PowerON+0x1c0>
          {
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8005dd2:	f7fb fd0b 	bl	80017ec <HAL_GetTick>
 8005dd6:	4602      	mov	r2, r0
 8005dd8:	697b      	ldr	r3, [r7, #20]
 8005dda:	1ad3      	subs	r3, r2, r3
 8005ddc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005de0:	d102      	bne.n	8005de8 <SD_PowerON+0x1c0>
            {
              return HAL_SD_ERROR_TIMEOUT;
 8005de2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005de6:	e025      	b.n	8005e34 <SD_PowerON+0x20c>
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005df2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005df6:	d1ec      	bne.n	8005dd2 <SD_PowerON+0x1aa>
            }
          }

          /* Clear VSWEND Flag */
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005e00:	639a      	str	r2, [r3, #56]	; 0x38

          /* Check BusyD0 status */
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e08:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005e0c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e10:	d102      	bne.n	8005e18 <SD_PowerON+0x1f0>
          {
            /* Error when enabling 1.8V mode */
            return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8005e12:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005e16:	e00d      	b.n	8005e34 <SD_PowerON+0x20c>
          }
          /* Switch to 1.8V OK */

          /* Disable VSWITCH FLAG from SDMMC Peripheral */
          hsd->Instance->POWER = 0x13U;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	2213      	movs	r2, #19
 8005e1e:	601a      	str	r2, [r3, #0]

          /* Clean Status flags */
          hsd->Instance->ICR = 0xFFFFFFFFU;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005e28:	639a      	str	r2, [r3, #56]	; 0x38
 8005e2a:	e002      	b.n	8005e32 <SD_PowerON+0x20a>
    }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2200      	movs	r2, #0
 8005e30:	63da      	str	r2, [r3, #60]	; 0x3c
  }


  return HAL_SD_ERROR_NONE;
 8005e32:	2300      	movs	r3, #0
}
 8005e34:	4618      	mov	r0, r3
 8005e36:	3720      	adds	r7, #32
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	bd80      	pop	{r7, pc}
 8005e3c:	c1100000 	.word	0xc1100000

08005e40 <SD_SendSDStatus>:
  * @param  pSDstatus Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b08c      	sub	sp, #48	; 0x30
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
 8005e48:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8005e4a:	f7fb fccf 	bl	80017ec <HAL_GetTick>
 8005e4e:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	2100      	movs	r1, #0
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	f001 fafd 	bl	800745a <SDMMC_GetResponse>
 8005e60:	4603      	mov	r3, r0
 8005e62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e66:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005e6a:	d102      	bne.n	8005e72 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8005e6c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005e70:	e0b0      	b.n	8005fd4 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	2140      	movs	r1, #64	; 0x40
 8005e78:	4618      	mov	r0, r3
 8005e7a:	f001 fb2d 	bl	80074d8 <SDMMC_CmdBlockLength>
 8005e7e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005e80:	6a3b      	ldr	r3, [r7, #32]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d005      	beq.n	8005e92 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8005e8e:	6a3b      	ldr	r3, [r7, #32]
 8005e90:	e0a0      	b.n	8005fd4 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681a      	ldr	r2, [r3, #0]
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e9a:	041b      	lsls	r3, r3, #16
 8005e9c:	4619      	mov	r1, r3
 8005e9e:	4610      	mov	r0, r2
 8005ea0:	f001 fb9f 	bl	80075e2 <SDMMC_CmdAppCommand>
 8005ea4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005ea6:	6a3b      	ldr	r3, [r7, #32]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d005      	beq.n	8005eb8 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8005eb4:	6a3b      	ldr	r3, [r7, #32]
 8005eb6:	e08d      	b.n	8005fd4 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005eb8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005ebc:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 8005ebe:	2340      	movs	r3, #64	; 0x40
 8005ec0:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8005ec2:	2360      	movs	r3, #96	; 0x60
 8005ec4:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8005ec6:	2302      	movs	r3, #2
 8005ec8:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8005eca:	2300      	movs	r3, #0
 8005ecc:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8005ece:	2301      	movs	r3, #1
 8005ed0:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f107 0208 	add.w	r2, r7, #8
 8005eda:	4611      	mov	r1, r2
 8005edc:	4618      	mov	r0, r3
 8005ede:	f001 facf 	bl	8007480 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	f001 fc87 	bl	80077fa <SDMMC_CmdStatusRegister>
 8005eec:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005eee:	6a3b      	ldr	r3, [r7, #32]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d02b      	beq.n	8005f4c <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8005efc:	6a3b      	ldr	r3, [r7, #32]
 8005efe:	e069      	b.n	8005fd4 <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
#else
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f06:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d013      	beq.n	8005f36 <SD_SendSDStatus+0xf6>
    {
      for(count = 0U; count < 8U; count++)
 8005f0e:	2300      	movs	r3, #0
 8005f10:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005f12:	e00d      	b.n	8005f30 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	4618      	mov	r0, r3
 8005f1a:	f001 fa39 	bl	8007390 <SDMMC_ReadFIFO>
 8005f1e:	4602      	mov	r2, r0
 8005f20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f22:	601a      	str	r2, [r3, #0]
        pData++;
 8005f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f26:	3304      	adds	r3, #4
 8005f28:	62bb      	str	r3, [r7, #40]	; 0x28
      for(count = 0U; count < 8U; count++)
 8005f2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f2c:	3301      	adds	r3, #1
 8005f2e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005f30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f32:	2b07      	cmp	r3, #7
 8005f34:	d9ee      	bls.n	8005f14 <SD_SendSDStatus+0xd4>
      }
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8005f36:	f7fb fc59 	bl	80017ec <HAL_GetTick>
 8005f3a:	4602      	mov	r2, r0
 8005f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f3e:	1ad3      	subs	r3, r2, r3
 8005f40:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005f44:	d102      	bne.n	8005f4c <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8005f46:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005f4a:	e043      	b.n	8005fd4 <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f52:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d0d2      	beq.n	8005f00 <SD_SendSDStatus+0xc0>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f60:	f003 0308 	and.w	r3, r3, #8
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d001      	beq.n	8005f6c <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8005f68:	2308      	movs	r3, #8
 8005f6a:	e033      	b.n	8005fd4 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f72:	f003 0302 	and.w	r3, r3, #2
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d001      	beq.n	8005f7e <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8005f7a:	2302      	movs	r3, #2
 8005f7c:	e02a      	b.n	8005fd4 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f84:	f003 0320 	and.w	r3, r3, #32
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d017      	beq.n	8005fbc <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8005f8c:	2320      	movs	r3, #32
 8005f8e:	e021      	b.n	8005fd4 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
#else
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)))
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	4618      	mov	r0, r3
 8005f96:	f001 f9fb 	bl	8007390 <SDMMC_ReadFIFO>
 8005f9a:	4602      	mov	r2, r0
 8005f9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f9e:	601a      	str	r2, [r3, #0]
    pData++;
 8005fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fa2:	3304      	adds	r3, #4
 8005fa4:	62bb      	str	r3, [r7, #40]	; 0x28

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8005fa6:	f7fb fc21 	bl	80017ec <HAL_GetTick>
 8005faa:	4602      	mov	r2, r0
 8005fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fae:	1ad3      	subs	r3, r2, r3
 8005fb0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005fb4:	d102      	bne.n	8005fbc <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8005fb6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005fba:	e00b      	b.n	8005fd4 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fc2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d1e2      	bne.n	8005f90 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	4a03      	ldr	r2, [pc, #12]	; (8005fdc <SD_SendSDStatus+0x19c>)
 8005fd0:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 8005fd2:	2300      	movs	r3, #0
}
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	3730      	adds	r7, #48	; 0x30
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	bd80      	pop	{r7, pc}
 8005fdc:	18000f3a 	.word	0x18000f3a

08005fe0 <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b084      	sub	sp, #16
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
 8005fe8:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d102      	bne.n	8005ff6 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8005ff0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005ff4:	e018      	b.n	8006028 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681a      	ldr	r2, [r3, #0]
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ffe:	041b      	lsls	r3, r3, #16
 8006000:	4619      	mov	r1, r3
 8006002:	4610      	mov	r0, r2
 8006004:	f001 fbd6 	bl	80077b4 <SDMMC_CmdSendStatus>
 8006008:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d001      	beq.n	8006014 <SD_SendStatus+0x34>
  {
    return errorstate;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	e009      	b.n	8006028 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	2100      	movs	r1, #0
 800601a:	4618      	mov	r0, r3
 800601c:	f001 fa1d 	bl	800745a <SDMMC_GetResponse>
 8006020:	4602      	mov	r2, r0
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8006026:	2300      	movs	r3, #0
}
 8006028:	4618      	mov	r0, r3
 800602a:	3710      	adds	r7, #16
 800602c:	46bd      	mov	sp, r7
 800602e:	bd80      	pop	{r7, pc}

08006030 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8006030:	b580      	push	{r7, lr}
 8006032:	b086      	sub	sp, #24
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8006038:	2300      	movs	r3, #0
 800603a:	60fb      	str	r3, [r7, #12]
 800603c:	2300      	movs	r3, #0
 800603e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	2100      	movs	r1, #0
 8006046:	4618      	mov	r0, r3
 8006048:	f001 fa07 	bl	800745a <SDMMC_GetResponse>
 800604c:	4603      	mov	r3, r0
 800604e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006052:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006056:	d102      	bne.n	800605e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006058:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800605c:	e02f      	b.n	80060be <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800605e:	f107 030c 	add.w	r3, r7, #12
 8006062:	4619      	mov	r1, r3
 8006064:	6878      	ldr	r0, [r7, #4]
 8006066:	f000 f879 	bl	800615c <SD_FindSCR>
 800606a:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800606c:	697b      	ldr	r3, [r7, #20]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d001      	beq.n	8006076 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8006072:	697b      	ldr	r3, [r7, #20]
 8006074:	e023      	b.n	80060be <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8006076:	693b      	ldr	r3, [r7, #16]
 8006078:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800607c:	2b00      	cmp	r3, #0
 800607e:	d01c      	beq.n	80060ba <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681a      	ldr	r2, [r3, #0]
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006088:	041b      	lsls	r3, r3, #16
 800608a:	4619      	mov	r1, r3
 800608c:	4610      	mov	r0, r2
 800608e:	f001 faa8 	bl	80075e2 <SDMMC_CmdAppCommand>
 8006092:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006094:	697b      	ldr	r3, [r7, #20]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d001      	beq.n	800609e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800609a:	697b      	ldr	r3, [r7, #20]
 800609c:	e00f      	b.n	80060be <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	2102      	movs	r1, #2
 80060a4:	4618      	mov	r0, r3
 80060a6:	f001 fadf 	bl	8007668 <SDMMC_CmdBusWidth>
 80060aa:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80060ac:	697b      	ldr	r3, [r7, #20]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d001      	beq.n	80060b6 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 80060b2:	697b      	ldr	r3, [r7, #20]
 80060b4:	e003      	b.n	80060be <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80060b6:	2300      	movs	r3, #0
 80060b8:	e001      	b.n	80060be <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80060ba:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80060be:	4618      	mov	r0, r3
 80060c0:	3718      	adds	r7, #24
 80060c2:	46bd      	mov	sp, r7
 80060c4:	bd80      	pop	{r7, pc}

080060c6 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 80060c6:	b580      	push	{r7, lr}
 80060c8:	b086      	sub	sp, #24
 80060ca:	af00      	add	r7, sp, #0
 80060cc:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 80060ce:	2300      	movs	r3, #0
 80060d0:	60fb      	str	r3, [r7, #12]
 80060d2:	2300      	movs	r3, #0
 80060d4:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	2100      	movs	r1, #0
 80060dc:	4618      	mov	r0, r3
 80060de:	f001 f9bc 	bl	800745a <SDMMC_GetResponse>
 80060e2:	4603      	mov	r3, r0
 80060e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060e8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80060ec:	d102      	bne.n	80060f4 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80060ee:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80060f2:	e02f      	b.n	8006154 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80060f4:	f107 030c 	add.w	r3, r7, #12
 80060f8:	4619      	mov	r1, r3
 80060fa:	6878      	ldr	r0, [r7, #4]
 80060fc:	f000 f82e 	bl	800615c <SD_FindSCR>
 8006100:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006102:	697b      	ldr	r3, [r7, #20]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d001      	beq.n	800610c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8006108:	697b      	ldr	r3, [r7, #20]
 800610a:	e023      	b.n	8006154 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800610c:	693b      	ldr	r3, [r7, #16]
 800610e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006112:	2b00      	cmp	r3, #0
 8006114:	d01c      	beq.n	8006150 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681a      	ldr	r2, [r3, #0]
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800611e:	041b      	lsls	r3, r3, #16
 8006120:	4619      	mov	r1, r3
 8006122:	4610      	mov	r0, r2
 8006124:	f001 fa5d 	bl	80075e2 <SDMMC_CmdAppCommand>
 8006128:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800612a:	697b      	ldr	r3, [r7, #20]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d001      	beq.n	8006134 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8006130:	697b      	ldr	r3, [r7, #20]
 8006132:	e00f      	b.n	8006154 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	2100      	movs	r1, #0
 800613a:	4618      	mov	r0, r3
 800613c:	f001 fa94 	bl	8007668 <SDMMC_CmdBusWidth>
 8006140:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006142:	697b      	ldr	r3, [r7, #20]
 8006144:	2b00      	cmp	r3, #0
 8006146:	d001      	beq.n	800614c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8006148:	697b      	ldr	r3, [r7, #20]
 800614a:	e003      	b.n	8006154 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800614c:	2300      	movs	r3, #0
 800614e:	e001      	b.n	8006154 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006150:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8006154:	4618      	mov	r0, r3
 8006156:	3718      	adds	r7, #24
 8006158:	46bd      	mov	sp, r7
 800615a:	bd80      	pop	{r7, pc}

0800615c <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800615c:	b580      	push	{r7, lr}
 800615e:	b08e      	sub	sp, #56	; 0x38
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
 8006164:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8006166:	f7fb fb41 	bl	80017ec <HAL_GetTick>
 800616a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800616c:	2300      	movs	r3, #0
 800616e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8006170:	2300      	movs	r3, #0
 8006172:	60bb      	str	r3, [r7, #8]
 8006174:	2300      	movs	r3, #0
 8006176:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	2108      	movs	r1, #8
 8006182:	4618      	mov	r0, r3
 8006184:	f001 f9a8 	bl	80074d8 <SDMMC_CmdBlockLength>
 8006188:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800618a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800618c:	2b00      	cmp	r3, #0
 800618e:	d001      	beq.n	8006194 <SD_FindSCR+0x38>
  {
    return errorstate;
 8006190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006192:	e0ad      	b.n	80062f0 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681a      	ldr	r2, [r3, #0]
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800619c:	041b      	lsls	r3, r3, #16
 800619e:	4619      	mov	r1, r3
 80061a0:	4610      	mov	r0, r2
 80061a2:	f001 fa1e 	bl	80075e2 <SDMMC_CmdAppCommand>
 80061a6:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80061a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d001      	beq.n	80061b2 <SD_FindSCR+0x56>
  {
    return errorstate;
 80061ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061b0:	e09e      	b.n	80062f0 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80061b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80061b6:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 80061b8:	2308      	movs	r3, #8
 80061ba:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 80061bc:	2330      	movs	r3, #48	; 0x30
 80061be:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80061c0:	2302      	movs	r3, #2
 80061c2:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80061c4:	2300      	movs	r3, #0
 80061c6:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80061c8:	2301      	movs	r3, #1
 80061ca:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f107 0210 	add.w	r2, r7, #16
 80061d4:	4611      	mov	r1, r2
 80061d6:	4618      	mov	r0, r3
 80061d8:	f001 f952 	bl	8007480 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	4618      	mov	r0, r3
 80061e2:	f001 fa64 	bl	80076ae <SDMMC_CmdSendSCR>
 80061e6:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80061e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d027      	beq.n	800623e <SD_FindSCR+0xe2>
  {
    return errorstate;
 80061ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061f0:	e07e      	b.n	80062f0 <SD_FindSCR+0x194>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
  {
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061f8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d113      	bne.n	8006228 <SD_FindSCR+0xcc>
 8006200:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006202:	2b00      	cmp	r3, #0
 8006204:	d110      	bne.n	8006228 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	4618      	mov	r0, r3
 800620c:	f001 f8c0 	bl	8007390 <SDMMC_ReadFIFO>
 8006210:	4603      	mov	r3, r0
 8006212:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	4618      	mov	r0, r3
 800621a:	f001 f8b9 	bl	8007390 <SDMMC_ReadFIFO>
 800621e:	4603      	mov	r3, r0
 8006220:	60fb      	str	r3, [r7, #12]
      index++;
 8006222:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006224:	3301      	adds	r3, #1
 8006226:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8006228:	f7fb fae0 	bl	80017ec <HAL_GetTick>
 800622c:	4602      	mov	r2, r0
 800622e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006230:	1ad3      	subs	r3, r2, r3
 8006232:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006236:	d102      	bne.n	800623e <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8006238:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800623c:	e058      	b.n	80062f0 <SD_FindSCR+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006244:	f240 532a 	movw	r3, #1322	; 0x52a
 8006248:	4013      	ands	r3, r2
 800624a:	2b00      	cmp	r3, #0
 800624c:	d0d1      	beq.n	80061f2 <SD_FindSCR+0x96>
      return HAL_SD_ERROR_TIMEOUT;
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006254:	f003 0308 	and.w	r3, r3, #8
 8006258:	2b00      	cmp	r3, #0
 800625a:	d005      	beq.n	8006268 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	2208      	movs	r2, #8
 8006262:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8006264:	2308      	movs	r3, #8
 8006266:	e043      	b.n	80062f0 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800626e:	f003 0302 	and.w	r3, r3, #2
 8006272:	2b00      	cmp	r3, #0
 8006274:	d005      	beq.n	8006282 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	2202      	movs	r2, #2
 800627c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800627e:	2302      	movs	r3, #2
 8006280:	e036      	b.n	80062f0 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006288:	f003 0320 	and.w	r3, r3, #32
 800628c:	2b00      	cmp	r3, #0
 800628e:	d005      	beq.n	800629c <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	2220      	movs	r2, #32
 8006296:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8006298:	2320      	movs	r3, #32
 800629a:	e029      	b.n	80062f0 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	4a15      	ldr	r2, [pc, #84]	; (80062f8 <SD_FindSCR+0x19c>)
 80062a2:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	061a      	lsls	r2, r3, #24
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	021b      	lsls	r3, r3, #8
 80062ac:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80062b0:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	0a1b      	lsrs	r3, r3, #8
 80062b6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80062ba:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	0e1b      	lsrs	r3, r3, #24
 80062c0:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80062c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062c4:	601a      	str	r2, [r3, #0]
    scr++;
 80062c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062c8:	3304      	adds	r3, #4
 80062ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80062cc:	68bb      	ldr	r3, [r7, #8]
 80062ce:	061a      	lsls	r2, r3, #24
 80062d0:	68bb      	ldr	r3, [r7, #8]
 80062d2:	021b      	lsls	r3, r3, #8
 80062d4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80062d8:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80062da:	68bb      	ldr	r3, [r7, #8]
 80062dc:	0a1b      	lsrs	r3, r3, #8
 80062de:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80062e2:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80062e4:	68bb      	ldr	r3, [r7, #8]
 80062e6:	0e1b      	lsrs	r3, r3, #24
 80062e8:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80062ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062ec:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80062ee:	2300      	movs	r3, #0
}
 80062f0:	4618      	mov	r0, r3
 80062f2:	3738      	adds	r7, #56	; 0x38
 80062f4:	46bd      	mov	sp, r7
 80062f6:	bd80      	pop	{r7, pc}
 80062f8:	18000f3a 	.word	0x18000f3a

080062fc <HAL_SDEx_DriveTransceiver_1_8V_Callback>:
  * @brief  Enable/Disable the SD Transceiver 1.8V Mode Callback.
  * @param  status Voltage Switch State
  * @retval None
  */
__weak void HAL_SDEx_DriveTransceiver_1_8V_Callback(FlagStatus status)
{
 80062fc:	b480      	push	{r7}
 80062fe:	b083      	sub	sp, #12
 8006300:	af00      	add	r7, sp, #0
 8006302:	4603      	mov	r3, r0
 8006304:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SD_EnableTransciver could be implemented in the user file
   */
}
 8006306:	bf00      	nop
 8006308:	370c      	adds	r7, #12
 800630a:	46bd      	mov	sp, r7
 800630c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006310:	4770      	bx	lr

08006312 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006312:	b580      	push	{r7, lr}
 8006314:	b084      	sub	sp, #16
 8006316:	af00      	add	r7, sp, #0
 8006318:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d101      	bne.n	8006324 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006320:	2301      	movs	r3, #1
 8006322:	e095      	b.n	8006450 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006328:	2b00      	cmp	r3, #0
 800632a:	d108      	bne.n	800633e <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	685b      	ldr	r3, [r3, #4]
 8006330:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006334:	d009      	beq.n	800634a <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	2200      	movs	r2, #0
 800633a:	61da      	str	r2, [r3, #28]
 800633c:	e005      	b.n	800634a <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	2200      	movs	r2, #0
 8006342:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2200      	movs	r2, #0
 8006348:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2200      	movs	r2, #0
 800634e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006356:	b2db      	uxtb	r3, r3
 8006358:	2b00      	cmp	r3, #0
 800635a:	d106      	bne.n	800636a <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2200      	movs	r2, #0
 8006360:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006364:	6878      	ldr	r0, [r7, #4]
 8006366:	f7fa febb 	bl	80010e0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	2202      	movs	r2, #2
 800636e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	681a      	ldr	r2, [r3, #0]
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006380:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	68db      	ldr	r3, [r3, #12]
 8006386:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800638a:	d902      	bls.n	8006392 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800638c:	2300      	movs	r3, #0
 800638e:	60fb      	str	r3, [r7, #12]
 8006390:	e002      	b.n	8006398 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006392:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006396:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	68db      	ldr	r3, [r3, #12]
 800639c:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80063a0:	d007      	beq.n	80063b2 <HAL_SPI_Init+0xa0>
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	68db      	ldr	r3, [r3, #12]
 80063a6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80063aa:	d002      	beq.n	80063b2 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2200      	movs	r2, #0
 80063b0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	685b      	ldr	r3, [r3, #4]
 80063b6:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	689b      	ldr	r3, [r3, #8]
 80063be:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80063c2:	431a      	orrs	r2, r3
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	691b      	ldr	r3, [r3, #16]
 80063c8:	f003 0302 	and.w	r3, r3, #2
 80063cc:	431a      	orrs	r2, r3
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	695b      	ldr	r3, [r3, #20]
 80063d2:	f003 0301 	and.w	r3, r3, #1
 80063d6:	431a      	orrs	r2, r3
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	699b      	ldr	r3, [r3, #24]
 80063dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80063e0:	431a      	orrs	r2, r3
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	69db      	ldr	r3, [r3, #28]
 80063e6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80063ea:	431a      	orrs	r2, r3
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	6a1b      	ldr	r3, [r3, #32]
 80063f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063f4:	ea42 0103 	orr.w	r1, r2, r3
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063fc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	430a      	orrs	r2, r1
 8006406:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	699b      	ldr	r3, [r3, #24]
 800640c:	0c1b      	lsrs	r3, r3, #16
 800640e:	f003 0204 	and.w	r2, r3, #4
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006416:	f003 0310 	and.w	r3, r3, #16
 800641a:	431a      	orrs	r2, r3
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006420:	f003 0308 	and.w	r3, r3, #8
 8006424:	431a      	orrs	r2, r3
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	68db      	ldr	r3, [r3, #12]
 800642a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800642e:	ea42 0103 	orr.w	r1, r2, r3
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	430a      	orrs	r2, r1
 800643e:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2200      	movs	r2, #0
 8006444:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2201      	movs	r2, #1
 800644a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800644e:	2300      	movs	r3, #0
}
 8006450:	4618      	mov	r0, r3
 8006452:	3710      	adds	r7, #16
 8006454:	46bd      	mov	sp, r7
 8006456:	bd80      	pop	{r7, pc}

08006458 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8006458:	b580      	push	{r7, lr}
 800645a:	b084      	sub	sp, #16
 800645c:	af00      	add	r7, sp, #0
 800645e:	60f8      	str	r0, [r7, #12]
 8006460:	60b9      	str	r1, [r7, #8]
 8006462:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d101      	bne.n	800646e <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 800646a:	2301      	movs	r3, #1
 800646c:	e038      	b.n	80064e0 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8006474:	b2db      	uxtb	r3, r3
 8006476:	2b00      	cmp	r3, #0
 8006478:	d106      	bne.n	8006488 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	2200      	movs	r2, #0
 800647e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8006482:	68f8      	ldr	r0, [r7, #12]
 8006484:	f7fb f85e 	bl	8001544 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	681a      	ldr	r2, [r3, #0]
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	3308      	adds	r3, #8
 8006490:	4619      	mov	r1, r3
 8006492:	4610      	mov	r0, r2
 8006494:	f000 fe2c 	bl	80070f0 <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	6818      	ldr	r0, [r3, #0]
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	689b      	ldr	r3, [r3, #8]
 80064a0:	461a      	mov	r2, r3
 80064a2:	68b9      	ldr	r1, [r7, #8]
 80064a4:	f000 febe 	bl	8007224 <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	6858      	ldr	r0, [r3, #4]
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	689a      	ldr	r2, [r3, #8]
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064b4:	6879      	ldr	r1, [r7, #4]
 80064b6:	f000 ff07 	bl	80072c8 <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	68fa      	ldr	r2, [r7, #12]
 80064c0:	6892      	ldr	r2, [r2, #8]
 80064c2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	68fa      	ldr	r2, [r7, #12]
 80064cc:	6892      	ldr	r2, [r2, #8]
 80064ce:	f041 0101 	orr.w	r1, r1, #1
 80064d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	2201      	movs	r2, #1
 80064da:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  return HAL_OK;
 80064de:	2300      	movs	r3, #0
}
 80064e0:	4618      	mov	r0, r3
 80064e2:	3710      	adds	r7, #16
 80064e4:	46bd      	mov	sp, r7
 80064e6:	bd80      	pop	{r7, pc}

080064e8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b082      	sub	sp, #8
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d101      	bne.n	80064fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80064f6:	2301      	movs	r3, #1
 80064f8:	e042      	b.n	8006580 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006500:	2b00      	cmp	r3, #0
 8006502:	d106      	bne.n	8006512 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2200      	movs	r2, #0
 8006508:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800650c:	6878      	ldr	r0, [r7, #4]
 800650e:	f7fa fe49 	bl	80011a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2224      	movs	r2, #36	; 0x24
 8006516:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	681a      	ldr	r2, [r3, #0]
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f022 0201 	bic.w	r2, r2, #1
 8006528:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800652a:	6878      	ldr	r0, [r7, #4]
 800652c:	f000 f82c 	bl	8006588 <UART_SetConfig>
 8006530:	4603      	mov	r3, r0
 8006532:	2b01      	cmp	r3, #1
 8006534:	d101      	bne.n	800653a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006536:	2301      	movs	r3, #1
 8006538:	e022      	b.n	8006580 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800653e:	2b00      	cmp	r3, #0
 8006540:	d002      	beq.n	8006548 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006542:	6878      	ldr	r0, [r7, #4]
 8006544:	f000 fb1c 	bl	8006b80 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	685a      	ldr	r2, [r3, #4]
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006556:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	689a      	ldr	r2, [r3, #8]
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006566:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	681a      	ldr	r2, [r3, #0]
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f042 0201 	orr.w	r2, r2, #1
 8006576:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006578:	6878      	ldr	r0, [r7, #4]
 800657a:	f000 fba3 	bl	8006cc4 <UART_CheckIdleState>
 800657e:	4603      	mov	r3, r0
}
 8006580:	4618      	mov	r0, r3
 8006582:	3708      	adds	r7, #8
 8006584:	46bd      	mov	sp, r7
 8006586:	bd80      	pop	{r7, pc}

08006588 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006588:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800658c:	b08c      	sub	sp, #48	; 0x30
 800658e:	af00      	add	r7, sp, #0
 8006590:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006592:	2300      	movs	r3, #0
 8006594:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006598:	697b      	ldr	r3, [r7, #20]
 800659a:	689a      	ldr	r2, [r3, #8]
 800659c:	697b      	ldr	r3, [r7, #20]
 800659e:	691b      	ldr	r3, [r3, #16]
 80065a0:	431a      	orrs	r2, r3
 80065a2:	697b      	ldr	r3, [r7, #20]
 80065a4:	695b      	ldr	r3, [r3, #20]
 80065a6:	431a      	orrs	r2, r3
 80065a8:	697b      	ldr	r3, [r7, #20]
 80065aa:	69db      	ldr	r3, [r3, #28]
 80065ac:	4313      	orrs	r3, r2
 80065ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80065b0:	697b      	ldr	r3, [r7, #20]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	681a      	ldr	r2, [r3, #0]
 80065b6:	4baa      	ldr	r3, [pc, #680]	; (8006860 <UART_SetConfig+0x2d8>)
 80065b8:	4013      	ands	r3, r2
 80065ba:	697a      	ldr	r2, [r7, #20]
 80065bc:	6812      	ldr	r2, [r2, #0]
 80065be:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80065c0:	430b      	orrs	r3, r1
 80065c2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80065c4:	697b      	ldr	r3, [r7, #20]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	685b      	ldr	r3, [r3, #4]
 80065ca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80065ce:	697b      	ldr	r3, [r7, #20]
 80065d0:	68da      	ldr	r2, [r3, #12]
 80065d2:	697b      	ldr	r3, [r7, #20]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	430a      	orrs	r2, r1
 80065d8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80065da:	697b      	ldr	r3, [r7, #20]
 80065dc:	699b      	ldr	r3, [r3, #24]
 80065de:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80065e0:	697b      	ldr	r3, [r7, #20]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	4a9f      	ldr	r2, [pc, #636]	; (8006864 <UART_SetConfig+0x2dc>)
 80065e6:	4293      	cmp	r3, r2
 80065e8:	d004      	beq.n	80065f4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80065ea:	697b      	ldr	r3, [r7, #20]
 80065ec:	6a1b      	ldr	r3, [r3, #32]
 80065ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80065f0:	4313      	orrs	r3, r2
 80065f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80065f4:	697b      	ldr	r3, [r7, #20]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	689b      	ldr	r3, [r3, #8]
 80065fa:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80065fe:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8006602:	697a      	ldr	r2, [r7, #20]
 8006604:	6812      	ldr	r2, [r2, #0]
 8006606:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006608:	430b      	orrs	r3, r1
 800660a:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800660c:	697b      	ldr	r3, [r7, #20]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006612:	f023 010f 	bic.w	r1, r3, #15
 8006616:	697b      	ldr	r3, [r7, #20]
 8006618:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800661a:	697b      	ldr	r3, [r7, #20]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	430a      	orrs	r2, r1
 8006620:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006622:	697b      	ldr	r3, [r7, #20]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	4a90      	ldr	r2, [pc, #576]	; (8006868 <UART_SetConfig+0x2e0>)
 8006628:	4293      	cmp	r3, r2
 800662a:	d125      	bne.n	8006678 <UART_SetConfig+0xf0>
 800662c:	4b8f      	ldr	r3, [pc, #572]	; (800686c <UART_SetConfig+0x2e4>)
 800662e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006632:	f003 0303 	and.w	r3, r3, #3
 8006636:	2b03      	cmp	r3, #3
 8006638:	d81a      	bhi.n	8006670 <UART_SetConfig+0xe8>
 800663a:	a201      	add	r2, pc, #4	; (adr r2, 8006640 <UART_SetConfig+0xb8>)
 800663c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006640:	08006651 	.word	0x08006651
 8006644:	08006661 	.word	0x08006661
 8006648:	08006659 	.word	0x08006659
 800664c:	08006669 	.word	0x08006669
 8006650:	2301      	movs	r3, #1
 8006652:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006656:	e116      	b.n	8006886 <UART_SetConfig+0x2fe>
 8006658:	2302      	movs	r3, #2
 800665a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800665e:	e112      	b.n	8006886 <UART_SetConfig+0x2fe>
 8006660:	2304      	movs	r3, #4
 8006662:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006666:	e10e      	b.n	8006886 <UART_SetConfig+0x2fe>
 8006668:	2308      	movs	r3, #8
 800666a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800666e:	e10a      	b.n	8006886 <UART_SetConfig+0x2fe>
 8006670:	2310      	movs	r3, #16
 8006672:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006676:	e106      	b.n	8006886 <UART_SetConfig+0x2fe>
 8006678:	697b      	ldr	r3, [r7, #20]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	4a7c      	ldr	r2, [pc, #496]	; (8006870 <UART_SetConfig+0x2e8>)
 800667e:	4293      	cmp	r3, r2
 8006680:	d138      	bne.n	80066f4 <UART_SetConfig+0x16c>
 8006682:	4b7a      	ldr	r3, [pc, #488]	; (800686c <UART_SetConfig+0x2e4>)
 8006684:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006688:	f003 030c 	and.w	r3, r3, #12
 800668c:	2b0c      	cmp	r3, #12
 800668e:	d82d      	bhi.n	80066ec <UART_SetConfig+0x164>
 8006690:	a201      	add	r2, pc, #4	; (adr r2, 8006698 <UART_SetConfig+0x110>)
 8006692:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006696:	bf00      	nop
 8006698:	080066cd 	.word	0x080066cd
 800669c:	080066ed 	.word	0x080066ed
 80066a0:	080066ed 	.word	0x080066ed
 80066a4:	080066ed 	.word	0x080066ed
 80066a8:	080066dd 	.word	0x080066dd
 80066ac:	080066ed 	.word	0x080066ed
 80066b0:	080066ed 	.word	0x080066ed
 80066b4:	080066ed 	.word	0x080066ed
 80066b8:	080066d5 	.word	0x080066d5
 80066bc:	080066ed 	.word	0x080066ed
 80066c0:	080066ed 	.word	0x080066ed
 80066c4:	080066ed 	.word	0x080066ed
 80066c8:	080066e5 	.word	0x080066e5
 80066cc:	2300      	movs	r3, #0
 80066ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80066d2:	e0d8      	b.n	8006886 <UART_SetConfig+0x2fe>
 80066d4:	2302      	movs	r3, #2
 80066d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80066da:	e0d4      	b.n	8006886 <UART_SetConfig+0x2fe>
 80066dc:	2304      	movs	r3, #4
 80066de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80066e2:	e0d0      	b.n	8006886 <UART_SetConfig+0x2fe>
 80066e4:	2308      	movs	r3, #8
 80066e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80066ea:	e0cc      	b.n	8006886 <UART_SetConfig+0x2fe>
 80066ec:	2310      	movs	r3, #16
 80066ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80066f2:	e0c8      	b.n	8006886 <UART_SetConfig+0x2fe>
 80066f4:	697b      	ldr	r3, [r7, #20]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	4a5e      	ldr	r2, [pc, #376]	; (8006874 <UART_SetConfig+0x2ec>)
 80066fa:	4293      	cmp	r3, r2
 80066fc:	d125      	bne.n	800674a <UART_SetConfig+0x1c2>
 80066fe:	4b5b      	ldr	r3, [pc, #364]	; (800686c <UART_SetConfig+0x2e4>)
 8006700:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006704:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006708:	2b30      	cmp	r3, #48	; 0x30
 800670a:	d016      	beq.n	800673a <UART_SetConfig+0x1b2>
 800670c:	2b30      	cmp	r3, #48	; 0x30
 800670e:	d818      	bhi.n	8006742 <UART_SetConfig+0x1ba>
 8006710:	2b20      	cmp	r3, #32
 8006712:	d00a      	beq.n	800672a <UART_SetConfig+0x1a2>
 8006714:	2b20      	cmp	r3, #32
 8006716:	d814      	bhi.n	8006742 <UART_SetConfig+0x1ba>
 8006718:	2b00      	cmp	r3, #0
 800671a:	d002      	beq.n	8006722 <UART_SetConfig+0x19a>
 800671c:	2b10      	cmp	r3, #16
 800671e:	d008      	beq.n	8006732 <UART_SetConfig+0x1aa>
 8006720:	e00f      	b.n	8006742 <UART_SetConfig+0x1ba>
 8006722:	2300      	movs	r3, #0
 8006724:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006728:	e0ad      	b.n	8006886 <UART_SetConfig+0x2fe>
 800672a:	2302      	movs	r3, #2
 800672c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006730:	e0a9      	b.n	8006886 <UART_SetConfig+0x2fe>
 8006732:	2304      	movs	r3, #4
 8006734:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006738:	e0a5      	b.n	8006886 <UART_SetConfig+0x2fe>
 800673a:	2308      	movs	r3, #8
 800673c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006740:	e0a1      	b.n	8006886 <UART_SetConfig+0x2fe>
 8006742:	2310      	movs	r3, #16
 8006744:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006748:	e09d      	b.n	8006886 <UART_SetConfig+0x2fe>
 800674a:	697b      	ldr	r3, [r7, #20]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	4a4a      	ldr	r2, [pc, #296]	; (8006878 <UART_SetConfig+0x2f0>)
 8006750:	4293      	cmp	r3, r2
 8006752:	d125      	bne.n	80067a0 <UART_SetConfig+0x218>
 8006754:	4b45      	ldr	r3, [pc, #276]	; (800686c <UART_SetConfig+0x2e4>)
 8006756:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800675a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800675e:	2bc0      	cmp	r3, #192	; 0xc0
 8006760:	d016      	beq.n	8006790 <UART_SetConfig+0x208>
 8006762:	2bc0      	cmp	r3, #192	; 0xc0
 8006764:	d818      	bhi.n	8006798 <UART_SetConfig+0x210>
 8006766:	2b80      	cmp	r3, #128	; 0x80
 8006768:	d00a      	beq.n	8006780 <UART_SetConfig+0x1f8>
 800676a:	2b80      	cmp	r3, #128	; 0x80
 800676c:	d814      	bhi.n	8006798 <UART_SetConfig+0x210>
 800676e:	2b00      	cmp	r3, #0
 8006770:	d002      	beq.n	8006778 <UART_SetConfig+0x1f0>
 8006772:	2b40      	cmp	r3, #64	; 0x40
 8006774:	d008      	beq.n	8006788 <UART_SetConfig+0x200>
 8006776:	e00f      	b.n	8006798 <UART_SetConfig+0x210>
 8006778:	2300      	movs	r3, #0
 800677a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800677e:	e082      	b.n	8006886 <UART_SetConfig+0x2fe>
 8006780:	2302      	movs	r3, #2
 8006782:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006786:	e07e      	b.n	8006886 <UART_SetConfig+0x2fe>
 8006788:	2304      	movs	r3, #4
 800678a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800678e:	e07a      	b.n	8006886 <UART_SetConfig+0x2fe>
 8006790:	2308      	movs	r3, #8
 8006792:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006796:	e076      	b.n	8006886 <UART_SetConfig+0x2fe>
 8006798:	2310      	movs	r3, #16
 800679a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800679e:	e072      	b.n	8006886 <UART_SetConfig+0x2fe>
 80067a0:	697b      	ldr	r3, [r7, #20]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	4a35      	ldr	r2, [pc, #212]	; (800687c <UART_SetConfig+0x2f4>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d12a      	bne.n	8006800 <UART_SetConfig+0x278>
 80067aa:	4b30      	ldr	r3, [pc, #192]	; (800686c <UART_SetConfig+0x2e4>)
 80067ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80067b4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80067b8:	d01a      	beq.n	80067f0 <UART_SetConfig+0x268>
 80067ba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80067be:	d81b      	bhi.n	80067f8 <UART_SetConfig+0x270>
 80067c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80067c4:	d00c      	beq.n	80067e0 <UART_SetConfig+0x258>
 80067c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80067ca:	d815      	bhi.n	80067f8 <UART_SetConfig+0x270>
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d003      	beq.n	80067d8 <UART_SetConfig+0x250>
 80067d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80067d4:	d008      	beq.n	80067e8 <UART_SetConfig+0x260>
 80067d6:	e00f      	b.n	80067f8 <UART_SetConfig+0x270>
 80067d8:	2300      	movs	r3, #0
 80067da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80067de:	e052      	b.n	8006886 <UART_SetConfig+0x2fe>
 80067e0:	2302      	movs	r3, #2
 80067e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80067e6:	e04e      	b.n	8006886 <UART_SetConfig+0x2fe>
 80067e8:	2304      	movs	r3, #4
 80067ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80067ee:	e04a      	b.n	8006886 <UART_SetConfig+0x2fe>
 80067f0:	2308      	movs	r3, #8
 80067f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80067f6:	e046      	b.n	8006886 <UART_SetConfig+0x2fe>
 80067f8:	2310      	movs	r3, #16
 80067fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80067fe:	e042      	b.n	8006886 <UART_SetConfig+0x2fe>
 8006800:	697b      	ldr	r3, [r7, #20]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	4a17      	ldr	r2, [pc, #92]	; (8006864 <UART_SetConfig+0x2dc>)
 8006806:	4293      	cmp	r3, r2
 8006808:	d13a      	bne.n	8006880 <UART_SetConfig+0x2f8>
 800680a:	4b18      	ldr	r3, [pc, #96]	; (800686c <UART_SetConfig+0x2e4>)
 800680c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006810:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006814:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006818:	d01a      	beq.n	8006850 <UART_SetConfig+0x2c8>
 800681a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800681e:	d81b      	bhi.n	8006858 <UART_SetConfig+0x2d0>
 8006820:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006824:	d00c      	beq.n	8006840 <UART_SetConfig+0x2b8>
 8006826:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800682a:	d815      	bhi.n	8006858 <UART_SetConfig+0x2d0>
 800682c:	2b00      	cmp	r3, #0
 800682e:	d003      	beq.n	8006838 <UART_SetConfig+0x2b0>
 8006830:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006834:	d008      	beq.n	8006848 <UART_SetConfig+0x2c0>
 8006836:	e00f      	b.n	8006858 <UART_SetConfig+0x2d0>
 8006838:	2300      	movs	r3, #0
 800683a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800683e:	e022      	b.n	8006886 <UART_SetConfig+0x2fe>
 8006840:	2302      	movs	r3, #2
 8006842:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006846:	e01e      	b.n	8006886 <UART_SetConfig+0x2fe>
 8006848:	2304      	movs	r3, #4
 800684a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800684e:	e01a      	b.n	8006886 <UART_SetConfig+0x2fe>
 8006850:	2308      	movs	r3, #8
 8006852:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006856:	e016      	b.n	8006886 <UART_SetConfig+0x2fe>
 8006858:	2310      	movs	r3, #16
 800685a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800685e:	e012      	b.n	8006886 <UART_SetConfig+0x2fe>
 8006860:	cfff69f3 	.word	0xcfff69f3
 8006864:	40008000 	.word	0x40008000
 8006868:	40013800 	.word	0x40013800
 800686c:	40021000 	.word	0x40021000
 8006870:	40004400 	.word	0x40004400
 8006874:	40004800 	.word	0x40004800
 8006878:	40004c00 	.word	0x40004c00
 800687c:	40005000 	.word	0x40005000
 8006880:	2310      	movs	r3, #16
 8006882:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006886:	697b      	ldr	r3, [r7, #20]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	4aae      	ldr	r2, [pc, #696]	; (8006b44 <UART_SetConfig+0x5bc>)
 800688c:	4293      	cmp	r3, r2
 800688e:	f040 8097 	bne.w	80069c0 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006892:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006896:	2b08      	cmp	r3, #8
 8006898:	d823      	bhi.n	80068e2 <UART_SetConfig+0x35a>
 800689a:	a201      	add	r2, pc, #4	; (adr r2, 80068a0 <UART_SetConfig+0x318>)
 800689c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068a0:	080068c5 	.word	0x080068c5
 80068a4:	080068e3 	.word	0x080068e3
 80068a8:	080068cd 	.word	0x080068cd
 80068ac:	080068e3 	.word	0x080068e3
 80068b0:	080068d3 	.word	0x080068d3
 80068b4:	080068e3 	.word	0x080068e3
 80068b8:	080068e3 	.word	0x080068e3
 80068bc:	080068e3 	.word	0x080068e3
 80068c0:	080068db 	.word	0x080068db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80068c4:	f7fc fb8e 	bl	8002fe4 <HAL_RCC_GetPCLK1Freq>
 80068c8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80068ca:	e010      	b.n	80068ee <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80068cc:	4b9e      	ldr	r3, [pc, #632]	; (8006b48 <UART_SetConfig+0x5c0>)
 80068ce:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80068d0:	e00d      	b.n	80068ee <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80068d2:	f7fc faf1 	bl	8002eb8 <HAL_RCC_GetSysClockFreq>
 80068d6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80068d8:	e009      	b.n	80068ee <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80068da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80068de:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80068e0:	e005      	b.n	80068ee <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80068e2:	2300      	movs	r3, #0
 80068e4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80068e6:	2301      	movs	r3, #1
 80068e8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80068ec:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80068ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	f000 8130 	beq.w	8006b56 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80068f6:	697b      	ldr	r3, [r7, #20]
 80068f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068fa:	4a94      	ldr	r2, [pc, #592]	; (8006b4c <UART_SetConfig+0x5c4>)
 80068fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006900:	461a      	mov	r2, r3
 8006902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006904:	fbb3 f3f2 	udiv	r3, r3, r2
 8006908:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800690a:	697b      	ldr	r3, [r7, #20]
 800690c:	685a      	ldr	r2, [r3, #4]
 800690e:	4613      	mov	r3, r2
 8006910:	005b      	lsls	r3, r3, #1
 8006912:	4413      	add	r3, r2
 8006914:	69ba      	ldr	r2, [r7, #24]
 8006916:	429a      	cmp	r2, r3
 8006918:	d305      	bcc.n	8006926 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800691a:	697b      	ldr	r3, [r7, #20]
 800691c:	685b      	ldr	r3, [r3, #4]
 800691e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006920:	69ba      	ldr	r2, [r7, #24]
 8006922:	429a      	cmp	r2, r3
 8006924:	d903      	bls.n	800692e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8006926:	2301      	movs	r3, #1
 8006928:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800692c:	e113      	b.n	8006b56 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800692e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006930:	2200      	movs	r2, #0
 8006932:	60bb      	str	r3, [r7, #8]
 8006934:	60fa      	str	r2, [r7, #12]
 8006936:	697b      	ldr	r3, [r7, #20]
 8006938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800693a:	4a84      	ldr	r2, [pc, #528]	; (8006b4c <UART_SetConfig+0x5c4>)
 800693c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006940:	b29b      	uxth	r3, r3
 8006942:	2200      	movs	r2, #0
 8006944:	603b      	str	r3, [r7, #0]
 8006946:	607a      	str	r2, [r7, #4]
 8006948:	e9d7 2300 	ldrd	r2, r3, [r7]
 800694c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006950:	f7f9 fc54 	bl	80001fc <__aeabi_uldivmod>
 8006954:	4602      	mov	r2, r0
 8006956:	460b      	mov	r3, r1
 8006958:	4610      	mov	r0, r2
 800695a:	4619      	mov	r1, r3
 800695c:	f04f 0200 	mov.w	r2, #0
 8006960:	f04f 0300 	mov.w	r3, #0
 8006964:	020b      	lsls	r3, r1, #8
 8006966:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800696a:	0202      	lsls	r2, r0, #8
 800696c:	6979      	ldr	r1, [r7, #20]
 800696e:	6849      	ldr	r1, [r1, #4]
 8006970:	0849      	lsrs	r1, r1, #1
 8006972:	2000      	movs	r0, #0
 8006974:	460c      	mov	r4, r1
 8006976:	4605      	mov	r5, r0
 8006978:	eb12 0804 	adds.w	r8, r2, r4
 800697c:	eb43 0905 	adc.w	r9, r3, r5
 8006980:	697b      	ldr	r3, [r7, #20]
 8006982:	685b      	ldr	r3, [r3, #4]
 8006984:	2200      	movs	r2, #0
 8006986:	469a      	mov	sl, r3
 8006988:	4693      	mov	fp, r2
 800698a:	4652      	mov	r2, sl
 800698c:	465b      	mov	r3, fp
 800698e:	4640      	mov	r0, r8
 8006990:	4649      	mov	r1, r9
 8006992:	f7f9 fc33 	bl	80001fc <__aeabi_uldivmod>
 8006996:	4602      	mov	r2, r0
 8006998:	460b      	mov	r3, r1
 800699a:	4613      	mov	r3, r2
 800699c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800699e:	6a3b      	ldr	r3, [r7, #32]
 80069a0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80069a4:	d308      	bcc.n	80069b8 <UART_SetConfig+0x430>
 80069a6:	6a3b      	ldr	r3, [r7, #32]
 80069a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80069ac:	d204      	bcs.n	80069b8 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80069ae:	697b      	ldr	r3, [r7, #20]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	6a3a      	ldr	r2, [r7, #32]
 80069b4:	60da      	str	r2, [r3, #12]
 80069b6:	e0ce      	b.n	8006b56 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80069b8:	2301      	movs	r3, #1
 80069ba:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80069be:	e0ca      	b.n	8006b56 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80069c0:	697b      	ldr	r3, [r7, #20]
 80069c2:	69db      	ldr	r3, [r3, #28]
 80069c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80069c8:	d166      	bne.n	8006a98 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80069ca:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80069ce:	2b08      	cmp	r3, #8
 80069d0:	d827      	bhi.n	8006a22 <UART_SetConfig+0x49a>
 80069d2:	a201      	add	r2, pc, #4	; (adr r2, 80069d8 <UART_SetConfig+0x450>)
 80069d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069d8:	080069fd 	.word	0x080069fd
 80069dc:	08006a05 	.word	0x08006a05
 80069e0:	08006a0d 	.word	0x08006a0d
 80069e4:	08006a23 	.word	0x08006a23
 80069e8:	08006a13 	.word	0x08006a13
 80069ec:	08006a23 	.word	0x08006a23
 80069f0:	08006a23 	.word	0x08006a23
 80069f4:	08006a23 	.word	0x08006a23
 80069f8:	08006a1b 	.word	0x08006a1b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80069fc:	f7fc faf2 	bl	8002fe4 <HAL_RCC_GetPCLK1Freq>
 8006a00:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006a02:	e014      	b.n	8006a2e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006a04:	f7fc fb04 	bl	8003010 <HAL_RCC_GetPCLK2Freq>
 8006a08:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006a0a:	e010      	b.n	8006a2e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006a0c:	4b4e      	ldr	r3, [pc, #312]	; (8006b48 <UART_SetConfig+0x5c0>)
 8006a0e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006a10:	e00d      	b.n	8006a2e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006a12:	f7fc fa51 	bl	8002eb8 <HAL_RCC_GetSysClockFreq>
 8006a16:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006a18:	e009      	b.n	8006a2e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a1e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006a20:	e005      	b.n	8006a2e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8006a22:	2300      	movs	r3, #0
 8006a24:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006a26:	2301      	movs	r3, #1
 8006a28:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006a2c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	f000 8090 	beq.w	8006b56 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006a36:	697b      	ldr	r3, [r7, #20]
 8006a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a3a:	4a44      	ldr	r2, [pc, #272]	; (8006b4c <UART_SetConfig+0x5c4>)
 8006a3c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006a40:	461a      	mov	r2, r3
 8006a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a44:	fbb3 f3f2 	udiv	r3, r3, r2
 8006a48:	005a      	lsls	r2, r3, #1
 8006a4a:	697b      	ldr	r3, [r7, #20]
 8006a4c:	685b      	ldr	r3, [r3, #4]
 8006a4e:	085b      	lsrs	r3, r3, #1
 8006a50:	441a      	add	r2, r3
 8006a52:	697b      	ldr	r3, [r7, #20]
 8006a54:	685b      	ldr	r3, [r3, #4]
 8006a56:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a5a:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006a5c:	6a3b      	ldr	r3, [r7, #32]
 8006a5e:	2b0f      	cmp	r3, #15
 8006a60:	d916      	bls.n	8006a90 <UART_SetConfig+0x508>
 8006a62:	6a3b      	ldr	r3, [r7, #32]
 8006a64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a68:	d212      	bcs.n	8006a90 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006a6a:	6a3b      	ldr	r3, [r7, #32]
 8006a6c:	b29b      	uxth	r3, r3
 8006a6e:	f023 030f 	bic.w	r3, r3, #15
 8006a72:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006a74:	6a3b      	ldr	r3, [r7, #32]
 8006a76:	085b      	lsrs	r3, r3, #1
 8006a78:	b29b      	uxth	r3, r3
 8006a7a:	f003 0307 	and.w	r3, r3, #7
 8006a7e:	b29a      	uxth	r2, r3
 8006a80:	8bfb      	ldrh	r3, [r7, #30]
 8006a82:	4313      	orrs	r3, r2
 8006a84:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006a86:	697b      	ldr	r3, [r7, #20]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	8bfa      	ldrh	r2, [r7, #30]
 8006a8c:	60da      	str	r2, [r3, #12]
 8006a8e:	e062      	b.n	8006b56 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8006a90:	2301      	movs	r3, #1
 8006a92:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006a96:	e05e      	b.n	8006b56 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006a98:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006a9c:	2b08      	cmp	r3, #8
 8006a9e:	d828      	bhi.n	8006af2 <UART_SetConfig+0x56a>
 8006aa0:	a201      	add	r2, pc, #4	; (adr r2, 8006aa8 <UART_SetConfig+0x520>)
 8006aa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006aa6:	bf00      	nop
 8006aa8:	08006acd 	.word	0x08006acd
 8006aac:	08006ad5 	.word	0x08006ad5
 8006ab0:	08006add 	.word	0x08006add
 8006ab4:	08006af3 	.word	0x08006af3
 8006ab8:	08006ae3 	.word	0x08006ae3
 8006abc:	08006af3 	.word	0x08006af3
 8006ac0:	08006af3 	.word	0x08006af3
 8006ac4:	08006af3 	.word	0x08006af3
 8006ac8:	08006aeb 	.word	0x08006aeb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006acc:	f7fc fa8a 	bl	8002fe4 <HAL_RCC_GetPCLK1Freq>
 8006ad0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006ad2:	e014      	b.n	8006afe <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006ad4:	f7fc fa9c 	bl	8003010 <HAL_RCC_GetPCLK2Freq>
 8006ad8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006ada:	e010      	b.n	8006afe <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006adc:	4b1a      	ldr	r3, [pc, #104]	; (8006b48 <UART_SetConfig+0x5c0>)
 8006ade:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006ae0:	e00d      	b.n	8006afe <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006ae2:	f7fc f9e9 	bl	8002eb8 <HAL_RCC_GetSysClockFreq>
 8006ae6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006ae8:	e009      	b.n	8006afe <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006aea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006aee:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006af0:	e005      	b.n	8006afe <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8006af2:	2300      	movs	r3, #0
 8006af4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006af6:	2301      	movs	r3, #1
 8006af8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006afc:	bf00      	nop
    }

    if (pclk != 0U)
 8006afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d028      	beq.n	8006b56 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006b04:	697b      	ldr	r3, [r7, #20]
 8006b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b08:	4a10      	ldr	r2, [pc, #64]	; (8006b4c <UART_SetConfig+0x5c4>)
 8006b0a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006b0e:	461a      	mov	r2, r3
 8006b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b12:	fbb3 f2f2 	udiv	r2, r3, r2
 8006b16:	697b      	ldr	r3, [r7, #20]
 8006b18:	685b      	ldr	r3, [r3, #4]
 8006b1a:	085b      	lsrs	r3, r3, #1
 8006b1c:	441a      	add	r2, r3
 8006b1e:	697b      	ldr	r3, [r7, #20]
 8006b20:	685b      	ldr	r3, [r3, #4]
 8006b22:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b26:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006b28:	6a3b      	ldr	r3, [r7, #32]
 8006b2a:	2b0f      	cmp	r3, #15
 8006b2c:	d910      	bls.n	8006b50 <UART_SetConfig+0x5c8>
 8006b2e:	6a3b      	ldr	r3, [r7, #32]
 8006b30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b34:	d20c      	bcs.n	8006b50 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006b36:	6a3b      	ldr	r3, [r7, #32]
 8006b38:	b29a      	uxth	r2, r3
 8006b3a:	697b      	ldr	r3, [r7, #20]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	60da      	str	r2, [r3, #12]
 8006b40:	e009      	b.n	8006b56 <UART_SetConfig+0x5ce>
 8006b42:	bf00      	nop
 8006b44:	40008000 	.word	0x40008000
 8006b48:	00f42400 	.word	0x00f42400
 8006b4c:	08008388 	.word	0x08008388
      }
      else
      {
        ret = HAL_ERROR;
 8006b50:	2301      	movs	r3, #1
 8006b52:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006b56:	697b      	ldr	r3, [r7, #20]
 8006b58:	2201      	movs	r2, #1
 8006b5a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006b5e:	697b      	ldr	r3, [r7, #20]
 8006b60:	2201      	movs	r2, #1
 8006b62:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006b66:	697b      	ldr	r3, [r7, #20]
 8006b68:	2200      	movs	r2, #0
 8006b6a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8006b6c:	697b      	ldr	r3, [r7, #20]
 8006b6e:	2200      	movs	r2, #0
 8006b70:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8006b72:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8006b76:	4618      	mov	r0, r3
 8006b78:	3730      	adds	r7, #48	; 0x30
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08006b80 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006b80:	b480      	push	{r7}
 8006b82:	b083      	sub	sp, #12
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b8c:	f003 0301 	and.w	r3, r3, #1
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d00a      	beq.n	8006baa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	685b      	ldr	r3, [r3, #4]
 8006b9a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	430a      	orrs	r2, r1
 8006ba8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bae:	f003 0302 	and.w	r3, r3, #2
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d00a      	beq.n	8006bcc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	685b      	ldr	r3, [r3, #4]
 8006bbc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	430a      	orrs	r2, r1
 8006bca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bd0:	f003 0304 	and.w	r3, r3, #4
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d00a      	beq.n	8006bee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	685b      	ldr	r3, [r3, #4]
 8006bde:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	430a      	orrs	r2, r1
 8006bec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bf2:	f003 0308 	and.w	r3, r3, #8
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d00a      	beq.n	8006c10 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	685b      	ldr	r3, [r3, #4]
 8006c00:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	430a      	orrs	r2, r1
 8006c0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c14:	f003 0310 	and.w	r3, r3, #16
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d00a      	beq.n	8006c32 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	689b      	ldr	r3, [r3, #8]
 8006c22:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	430a      	orrs	r2, r1
 8006c30:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c36:	f003 0320 	and.w	r3, r3, #32
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d00a      	beq.n	8006c54 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	689b      	ldr	r3, [r3, #8]
 8006c44:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	430a      	orrs	r2, r1
 8006c52:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d01a      	beq.n	8006c96 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	685b      	ldr	r3, [r3, #4]
 8006c66:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	430a      	orrs	r2, r1
 8006c74:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c7a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006c7e:	d10a      	bne.n	8006c96 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	685b      	ldr	r3, [r3, #4]
 8006c86:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	430a      	orrs	r2, r1
 8006c94:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d00a      	beq.n	8006cb8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	685b      	ldr	r3, [r3, #4]
 8006ca8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	430a      	orrs	r2, r1
 8006cb6:	605a      	str	r2, [r3, #4]
  }
}
 8006cb8:	bf00      	nop
 8006cba:	370c      	adds	r7, #12
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc2:	4770      	bx	lr

08006cc4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b086      	sub	sp, #24
 8006cc8:	af02      	add	r7, sp, #8
 8006cca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2200      	movs	r2, #0
 8006cd0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006cd4:	f7fa fd8a 	bl	80017ec <HAL_GetTick>
 8006cd8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	f003 0308 	and.w	r3, r3, #8
 8006ce4:	2b08      	cmp	r3, #8
 8006ce6:	d10e      	bne.n	8006d06 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006ce8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006cec:	9300      	str	r3, [sp, #0]
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006cf6:	6878      	ldr	r0, [r7, #4]
 8006cf8:	f000 f82f 	bl	8006d5a <UART_WaitOnFlagUntilTimeout>
 8006cfc:	4603      	mov	r3, r0
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d001      	beq.n	8006d06 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006d02:	2303      	movs	r3, #3
 8006d04:	e025      	b.n	8006d52 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f003 0304 	and.w	r3, r3, #4
 8006d10:	2b04      	cmp	r3, #4
 8006d12:	d10e      	bne.n	8006d32 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006d14:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006d18:	9300      	str	r3, [sp, #0]
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006d22:	6878      	ldr	r0, [r7, #4]
 8006d24:	f000 f819 	bl	8006d5a <UART_WaitOnFlagUntilTimeout>
 8006d28:	4603      	mov	r3, r0
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d001      	beq.n	8006d32 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006d2e:	2303      	movs	r3, #3
 8006d30:	e00f      	b.n	8006d52 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	2220      	movs	r2, #32
 8006d36:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	2220      	movs	r2, #32
 8006d3e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	2200      	movs	r2, #0
 8006d46:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006d50:	2300      	movs	r3, #0
}
 8006d52:	4618      	mov	r0, r3
 8006d54:	3710      	adds	r7, #16
 8006d56:	46bd      	mov	sp, r7
 8006d58:	bd80      	pop	{r7, pc}

08006d5a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006d5a:	b580      	push	{r7, lr}
 8006d5c:	b09c      	sub	sp, #112	; 0x70
 8006d5e:	af00      	add	r7, sp, #0
 8006d60:	60f8      	str	r0, [r7, #12]
 8006d62:	60b9      	str	r1, [r7, #8]
 8006d64:	603b      	str	r3, [r7, #0]
 8006d66:	4613      	mov	r3, r2
 8006d68:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d6a:	e0a9      	b.n	8006ec0 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d6c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006d6e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006d72:	f000 80a5 	beq.w	8006ec0 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d76:	f7fa fd39 	bl	80017ec <HAL_GetTick>
 8006d7a:	4602      	mov	r2, r0
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	1ad3      	subs	r3, r2, r3
 8006d80:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006d82:	429a      	cmp	r2, r3
 8006d84:	d302      	bcc.n	8006d8c <UART_WaitOnFlagUntilTimeout+0x32>
 8006d86:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d140      	bne.n	8006e0e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d94:	e853 3f00 	ldrex	r3, [r3]
 8006d98:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006d9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d9c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006da0:	667b      	str	r3, [r7, #100]	; 0x64
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	461a      	mov	r2, r3
 8006da8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006daa:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006dac:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dae:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006db0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006db2:	e841 2300 	strex	r3, r2, [r1]
 8006db6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006db8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d1e6      	bne.n	8006d8c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	3308      	adds	r3, #8
 8006dc4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006dc8:	e853 3f00 	ldrex	r3, [r3]
 8006dcc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006dce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dd0:	f023 0301 	bic.w	r3, r3, #1
 8006dd4:	663b      	str	r3, [r7, #96]	; 0x60
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	3308      	adds	r3, #8
 8006ddc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006dde:	64ba      	str	r2, [r7, #72]	; 0x48
 8006de0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006de2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006de4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006de6:	e841 2300 	strex	r3, r2, [r1]
 8006dea:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006dec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d1e5      	bne.n	8006dbe <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	2220      	movs	r2, #32
 8006df6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	2220      	movs	r2, #32
 8006dfe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	2200      	movs	r2, #0
 8006e06:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8006e0a:	2303      	movs	r3, #3
 8006e0c:	e069      	b.n	8006ee2 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	f003 0304 	and.w	r3, r3, #4
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d051      	beq.n	8006ec0 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	69db      	ldr	r3, [r3, #28]
 8006e22:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006e26:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e2a:	d149      	bne.n	8006ec0 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006e34:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e3e:	e853 3f00 	ldrex	r3, [r3]
 8006e42:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e46:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006e4a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	461a      	mov	r2, r3
 8006e52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e54:	637b      	str	r3, [r7, #52]	; 0x34
 8006e56:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e58:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006e5a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006e5c:	e841 2300 	strex	r3, r2, [r1]
 8006e60:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006e62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d1e6      	bne.n	8006e36 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	3308      	adds	r3, #8
 8006e6e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e70:	697b      	ldr	r3, [r7, #20]
 8006e72:	e853 3f00 	ldrex	r3, [r3]
 8006e76:	613b      	str	r3, [r7, #16]
   return(result);
 8006e78:	693b      	ldr	r3, [r7, #16]
 8006e7a:	f023 0301 	bic.w	r3, r3, #1
 8006e7e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	3308      	adds	r3, #8
 8006e86:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006e88:	623a      	str	r2, [r7, #32]
 8006e8a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e8c:	69f9      	ldr	r1, [r7, #28]
 8006e8e:	6a3a      	ldr	r2, [r7, #32]
 8006e90:	e841 2300 	strex	r3, r2, [r1]
 8006e94:	61bb      	str	r3, [r7, #24]
   return(result);
 8006e96:	69bb      	ldr	r3, [r7, #24]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d1e5      	bne.n	8006e68 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	2220      	movs	r2, #32
 8006ea0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	2220      	movs	r2, #32
 8006ea8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	2220      	movs	r2, #32
 8006eb0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8006ebc:	2303      	movs	r3, #3
 8006ebe:	e010      	b.n	8006ee2 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	69da      	ldr	r2, [r3, #28]
 8006ec6:	68bb      	ldr	r3, [r7, #8]
 8006ec8:	4013      	ands	r3, r2
 8006eca:	68ba      	ldr	r2, [r7, #8]
 8006ecc:	429a      	cmp	r2, r3
 8006ece:	bf0c      	ite	eq
 8006ed0:	2301      	moveq	r3, #1
 8006ed2:	2300      	movne	r3, #0
 8006ed4:	b2db      	uxtb	r3, r3
 8006ed6:	461a      	mov	r2, r3
 8006ed8:	79fb      	ldrb	r3, [r7, #7]
 8006eda:	429a      	cmp	r2, r3
 8006edc:	f43f af46 	beq.w	8006d6c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006ee0:	2300      	movs	r3, #0
}
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	3770      	adds	r7, #112	; 0x70
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	bd80      	pop	{r7, pc}

08006eea <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006eea:	b480      	push	{r7}
 8006eec:	b085      	sub	sp, #20
 8006eee:	af00      	add	r7, sp, #0
 8006ef0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006ef8:	2b01      	cmp	r3, #1
 8006efa:	d101      	bne.n	8006f00 <HAL_UARTEx_DisableFifoMode+0x16>
 8006efc:	2302      	movs	r3, #2
 8006efe:	e027      	b.n	8006f50 <HAL_UARTEx_DisableFifoMode+0x66>
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2201      	movs	r2, #1
 8006f04:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2224      	movs	r2, #36	; 0x24
 8006f0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	681a      	ldr	r2, [r3, #0]
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	f022 0201 	bic.w	r2, r2, #1
 8006f26:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006f2e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2200      	movs	r2, #0
 8006f34:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	68fa      	ldr	r2, [r7, #12]
 8006f3c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	2220      	movs	r2, #32
 8006f42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	2200      	movs	r2, #0
 8006f4a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006f4e:	2300      	movs	r3, #0
}
 8006f50:	4618      	mov	r0, r3
 8006f52:	3714      	adds	r7, #20
 8006f54:	46bd      	mov	sp, r7
 8006f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5a:	4770      	bx	lr

08006f5c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b084      	sub	sp, #16
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
 8006f64:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006f6c:	2b01      	cmp	r3, #1
 8006f6e:	d101      	bne.n	8006f74 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006f70:	2302      	movs	r3, #2
 8006f72:	e02d      	b.n	8006fd0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2201      	movs	r2, #1
 8006f78:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2224      	movs	r2, #36	; 0x24
 8006f80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	681a      	ldr	r2, [r3, #0]
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	f022 0201 	bic.w	r2, r2, #1
 8006f9a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	689b      	ldr	r3, [r3, #8]
 8006fa2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	683a      	ldr	r2, [r7, #0]
 8006fac:	430a      	orrs	r2, r1
 8006fae:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006fb0:	6878      	ldr	r0, [r7, #4]
 8006fb2:	f000 f84f 	bl	8007054 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	68fa      	ldr	r2, [r7, #12]
 8006fbc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	2220      	movs	r2, #32
 8006fc2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	2200      	movs	r2, #0
 8006fca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006fce:	2300      	movs	r3, #0
}
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	3710      	adds	r7, #16
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	bd80      	pop	{r7, pc}

08006fd8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	b084      	sub	sp, #16
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
 8006fe0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006fe8:	2b01      	cmp	r3, #1
 8006fea:	d101      	bne.n	8006ff0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006fec:	2302      	movs	r3, #2
 8006fee:	e02d      	b.n	800704c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2201      	movs	r2, #1
 8006ff4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2224      	movs	r2, #36	; 0x24
 8006ffc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	681a      	ldr	r2, [r3, #0]
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	f022 0201 	bic.w	r2, r2, #1
 8007016:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	689b      	ldr	r3, [r3, #8]
 800701e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	683a      	ldr	r2, [r7, #0]
 8007028:	430a      	orrs	r2, r1
 800702a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800702c:	6878      	ldr	r0, [r7, #4]
 800702e:	f000 f811 	bl	8007054 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	68fa      	ldr	r2, [r7, #12]
 8007038:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	2220      	movs	r2, #32
 800703e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	2200      	movs	r2, #0
 8007046:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800704a:	2300      	movs	r3, #0
}
 800704c:	4618      	mov	r0, r3
 800704e:	3710      	adds	r7, #16
 8007050:	46bd      	mov	sp, r7
 8007052:	bd80      	pop	{r7, pc}

08007054 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007054:	b480      	push	{r7}
 8007056:	b085      	sub	sp, #20
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007060:	2b00      	cmp	r3, #0
 8007062:	d108      	bne.n	8007076 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2201      	movs	r2, #1
 8007068:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2201      	movs	r2, #1
 8007070:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007074:	e031      	b.n	80070da <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007076:	2308      	movs	r3, #8
 8007078:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800707a:	2308      	movs	r3, #8
 800707c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	689b      	ldr	r3, [r3, #8]
 8007084:	0e5b      	lsrs	r3, r3, #25
 8007086:	b2db      	uxtb	r3, r3
 8007088:	f003 0307 	and.w	r3, r3, #7
 800708c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	689b      	ldr	r3, [r3, #8]
 8007094:	0f5b      	lsrs	r3, r3, #29
 8007096:	b2db      	uxtb	r3, r3
 8007098:	f003 0307 	and.w	r3, r3, #7
 800709c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800709e:	7bbb      	ldrb	r3, [r7, #14]
 80070a0:	7b3a      	ldrb	r2, [r7, #12]
 80070a2:	4911      	ldr	r1, [pc, #68]	; (80070e8 <UARTEx_SetNbDataToProcess+0x94>)
 80070a4:	5c8a      	ldrb	r2, [r1, r2]
 80070a6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80070aa:	7b3a      	ldrb	r2, [r7, #12]
 80070ac:	490f      	ldr	r1, [pc, #60]	; (80070ec <UARTEx_SetNbDataToProcess+0x98>)
 80070ae:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80070b0:	fb93 f3f2 	sdiv	r3, r3, r2
 80070b4:	b29a      	uxth	r2, r3
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80070bc:	7bfb      	ldrb	r3, [r7, #15]
 80070be:	7b7a      	ldrb	r2, [r7, #13]
 80070c0:	4909      	ldr	r1, [pc, #36]	; (80070e8 <UARTEx_SetNbDataToProcess+0x94>)
 80070c2:	5c8a      	ldrb	r2, [r1, r2]
 80070c4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80070c8:	7b7a      	ldrb	r2, [r7, #13]
 80070ca:	4908      	ldr	r1, [pc, #32]	; (80070ec <UARTEx_SetNbDataToProcess+0x98>)
 80070cc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80070ce:	fb93 f3f2 	sdiv	r3, r3, r2
 80070d2:	b29a      	uxth	r2, r3
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80070da:	bf00      	nop
 80070dc:	3714      	adds	r7, #20
 80070de:	46bd      	mov	sp, r7
 80070e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e4:	4770      	bx	lr
 80070e6:	bf00      	nop
 80070e8:	080083a0 	.word	0x080083a0
 80070ec:	080083a8 	.word	0x080083a8

080070f0 <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    FMC_NORSRAM_InitTypeDef *Init)
{
 80070f0:	b480      	push	{r7}
 80070f2:	b087      	sub	sp, #28
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
 80070f8:	6039      	str	r1, [r7, #0]
#if defined(FMC_PCSCNTR_CSCOUNT)
  assert_param(IS_FUNCTIONAL_STATE(Init->MaxChipSelectPulse));
#endif /* FMC_PCSCNTR_CSCOUNT */

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 80070fa:	683b      	ldr	r3, [r7, #0]
 80070fc:	681a      	ldr	r2, [r3, #0]
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007104:	683a      	ldr	r2, [r7, #0]
 8007106:	6812      	ldr	r2, [r2, #0]
 8007108:	f023 0101 	bic.w	r1, r3, #1
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	689b      	ldr	r3, [r3, #8]
 8007116:	2b08      	cmp	r3, #8
 8007118:	d102      	bne.n	8007120 <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800711a:	2340      	movs	r3, #64	; 0x40
 800711c:	617b      	str	r3, [r7, #20]
 800711e:	e001      	b.n	8007124 <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8007120:	2300      	movs	r3, #0
 8007122:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8007124:	683b      	ldr	r3, [r7, #0]
 8007126:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8007128:	697b      	ldr	r3, [r7, #20]
 800712a:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8007130:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 8007132:	683b      	ldr	r3, [r7, #0]
 8007134:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8007136:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8007138:	683b      	ldr	r3, [r7, #0]
 800713a:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 800713c:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 800713e:	683b      	ldr	r3, [r7, #0]
 8007140:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 8007142:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	699b      	ldr	r3, [r3, #24]
              Init->WaitSignalPolarity      | \
 8007148:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 800714a:	683b      	ldr	r3, [r7, #0]
 800714c:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalActive        | \
 800714e:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	6a1b      	ldr	r3, [r3, #32]
              Init->WriteOperation          | \
 8007154:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8007156:	683b      	ldr	r3, [r7, #0]
 8007158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WaitSignal              | \
 800715a:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->ExtendedMode            | \
 8007160:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8007162:	683b      	ldr	r3, [r7, #0]
 8007164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  btcr_reg = (flashaccess                   | \
 8007166:	4313      	orrs	r3, r2
 8007168:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->ContinuousClock;
 800716a:	683b      	ldr	r3, [r7, #0]
 800716c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800716e:	693a      	ldr	r2, [r7, #16]
 8007170:	4313      	orrs	r3, r2
 8007172:	613b      	str	r3, [r7, #16]
#if defined(FMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007178:	693a      	ldr	r2, [r7, #16]
 800717a:	4313      	orrs	r3, r2
 800717c:	613b      	str	r3, [r7, #16]
#endif /* FMC_BCR1_WFDIS */
#if defined(FMC_BCRx_NBLSET)
  btcr_reg |= Init->NBLSetupTime;
 800717e:	683b      	ldr	r3, [r7, #0]
 8007180:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007182:	693a      	ldr	r2, [r7, #16]
 8007184:	4313      	orrs	r3, r2
 8007186:	613b      	str	r3, [r7, #16]
#endif /* FMC_BCRx_NBLSET */
  btcr_reg |= Init->PageSize;
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800718c:	693a      	ldr	r2, [r7, #16]
 800718e:	4313      	orrs	r3, r2
 8007190:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCRx_MBKEN                |
 8007192:	4b23      	ldr	r3, [pc, #140]	; (8007220 <FMC_NORSRAM_Init+0x130>)
 8007194:	60fb      	str	r3, [r7, #12]
          FMC_BCRx_WAITEN               |
          FMC_BCRx_EXTMOD               |
          FMC_BCRx_ASYNCWAIT            |
          FMC_BCRx_CBURSTRW);

  mask |= FMC_BCR1_CCLKEN;
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800719c:	60fb      	str	r3, [r7, #12]
#if defined(FMC_BCR1_WFDIS)
  mask |= FMC_BCR1_WFDIS;
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80071a4:	60fb      	str	r3, [r7, #12]
#endif /* FMC_BCR1_WFDIS */
#if defined(FMC_BCRx_NBLSET)
  mask |= FMC_BCRx_NBLSET;
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	f443 0340 	orr.w	r3, r3, #12582912	; 0xc00000
 80071ac:	60fb      	str	r3, [r7, #12]
#endif /* FMC_BCRx_NBLSET */
  mask |= FMC_BCRx_CPSIZE;
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 80071b4:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	681a      	ldr	r2, [r3, #0]
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	43db      	mvns	r3, r3
 80071c4:	ea02 0103 	and.w	r1, r2, r3
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	681a      	ldr	r2, [r3, #0]
 80071cc:	693b      	ldr	r3, [r7, #16]
 80071ce:	4319      	orrs	r1, r3
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80071de:	d10c      	bne.n	80071fa <FMC_NORSRAM_Init+0x10a>
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d008      	beq.n	80071fa <FMC_NORSRAM_Init+0x10a>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80071f0:	683b      	ldr	r3, [r7, #0]
 80071f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071f4:	431a      	orrs	r2, r3
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	601a      	str	r2, [r3, #0]
  }
#if defined(FMC_BCR1_WFDIS)

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 80071fa:	683b      	ldr	r3, [r7, #0]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d006      	beq.n	8007210 <FMC_NORSRAM_Init+0x120>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681a      	ldr	r2, [r3, #0]
 8007206:	683b      	ldr	r3, [r7, #0]
 8007208:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800720a:	431a      	orrs	r2, r3
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	601a      	str	r2, [r3, #0]
        break;
    }
  }
#endif /* FMC_PCSCNTR_CSCOUNT */

  return HAL_OK;
 8007210:	2300      	movs	r3, #0
}
 8007212:	4618      	mov	r0, r3
 8007214:	371c      	adds	r7, #28
 8007216:	46bd      	mov	sp, r7
 8007218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721c:	4770      	bx	lr
 800721e:	bf00      	nop
 8007220:	0008fb7f 	.word	0x0008fb7f

08007224 <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8007224:	b480      	push	{r7}
 8007226:	b087      	sub	sp, #28
 8007228:	af00      	add	r7, sp, #0
 800722a:	60f8      	str	r0, [r7, #12]
 800722c:	60b9      	str	r1, [r7, #8]
 800722e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Set FMC_NORSRAM device timing parameters */
#if defined(FMC_BTRx_DATAHLD)
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	1c5a      	adds	r2, r3, #1
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800723a:	68bb      	ldr	r3, [r7, #8]
 800723c:	681a      	ldr	r2, [r3, #0]
 800723e:	68bb      	ldr	r3, [r7, #8]
 8007240:	685b      	ldr	r3, [r3, #4]
 8007242:	011b      	lsls	r3, r3, #4
 8007244:	431a      	orrs	r2, r3
 8007246:	68bb      	ldr	r3, [r7, #8]
 8007248:	689b      	ldr	r3, [r3, #8]
 800724a:	021b      	lsls	r3, r3, #8
 800724c:	431a      	orrs	r2, r3
 800724e:	68bb      	ldr	r3, [r7, #8]
 8007250:	68db      	ldr	r3, [r3, #12]
 8007252:	079b      	lsls	r3, r3, #30
 8007254:	431a      	orrs	r2, r3
 8007256:	68bb      	ldr	r3, [r7, #8]
 8007258:	691b      	ldr	r3, [r3, #16]
 800725a:	041b      	lsls	r3, r3, #16
 800725c:	431a      	orrs	r2, r3
 800725e:	68bb      	ldr	r3, [r7, #8]
 8007260:	695b      	ldr	r3, [r3, #20]
 8007262:	3b01      	subs	r3, #1
 8007264:	051b      	lsls	r3, r3, #20
 8007266:	431a      	orrs	r2, r3
 8007268:	68bb      	ldr	r3, [r7, #8]
 800726a:	699b      	ldr	r3, [r3, #24]
 800726c:	3b02      	subs	r3, #2
 800726e:	061b      	lsls	r3, r3, #24
 8007270:	ea42 0103 	orr.w	r1, r2, r3
 8007274:	68bb      	ldr	r3, [r7, #8]
 8007276:	69db      	ldr	r3, [r3, #28]
 8007278:	687a      	ldr	r2, [r7, #4]
 800727a:	3201      	adds	r2, #1
 800727c:	4319      	orrs	r1, r3
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));
#endif /* FMC_BTRx_DATAHLD */

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800728c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007290:	d113      	bne.n	80072ba <FMC_NORSRAM_Timing_Init+0x96>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTRx_CLKDIV_Pos));
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	685b      	ldr	r3, [r3, #4]
 8007296:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800729a:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTRx_CLKDIV_Pos);
 800729c:	68bb      	ldr	r3, [r7, #8]
 800729e:	695b      	ldr	r3, [r3, #20]
 80072a0:	3b01      	subs	r3, #1
 80072a2:	051b      	lsls	r3, r3, #20
 80072a4:	697a      	ldr	r2, [r7, #20]
 80072a6:	4313      	orrs	r3, r2
 80072a8:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTRx_CLKDIV, tmpr);
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	685b      	ldr	r3, [r3, #4]
 80072ae:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80072b2:	697b      	ldr	r3, [r7, #20]
 80072b4:	431a      	orrs	r2, r3
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80072ba:	2300      	movs	r3, #0
}
 80072bc:	4618      	mov	r0, r3
 80072be:	371c      	adds	r7, #28
 80072c0:	46bd      	mov	sp, r7
 80072c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c6:	4770      	bx	lr

080072c8 <FMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 80072c8:	b480      	push	{r7}
 80072ca:	b085      	sub	sp, #20
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	60f8      	str	r0, [r7, #12]
 80072d0:	60b9      	str	r1, [r7, #8]
 80072d2:	607a      	str	r2, [r7, #4]
 80072d4:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 80072d6:	683b      	ldr	r3, [r7, #0]
 80072d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80072dc:	d121      	bne.n	8007322 <FMC_NORSRAM_Extended_Timing_Init+0x5a>
    assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
#if defined(FMC_BTRx_DATAHLD)
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	687a      	ldr	r2, [r7, #4]
 80072e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072e6:	f003 627f 	and.w	r2, r3, #267386880	; 0xff00000
 80072ea:	68bb      	ldr	r3, [r7, #8]
 80072ec:	6819      	ldr	r1, [r3, #0]
 80072ee:	68bb      	ldr	r3, [r7, #8]
 80072f0:	685b      	ldr	r3, [r3, #4]
 80072f2:	011b      	lsls	r3, r3, #4
 80072f4:	4319      	orrs	r1, r3
 80072f6:	68bb      	ldr	r3, [r7, #8]
 80072f8:	689b      	ldr	r3, [r3, #8]
 80072fa:	021b      	lsls	r3, r3, #8
 80072fc:	4319      	orrs	r1, r3
 80072fe:	68bb      	ldr	r3, [r7, #8]
 8007300:	68db      	ldr	r3, [r3, #12]
 8007302:	079b      	lsls	r3, r3, #30
 8007304:	4319      	orrs	r1, r3
 8007306:	68bb      	ldr	r3, [r7, #8]
 8007308:	69db      	ldr	r3, [r3, #28]
 800730a:	4319      	orrs	r1, r3
 800730c:	68bb      	ldr	r3, [r7, #8]
 800730e:	691b      	ldr	r3, [r3, #16]
 8007310:	041b      	lsls	r3, r3, #16
 8007312:	430b      	orrs	r3, r1
 8007314:	ea42 0103 	orr.w	r1, r2, r3
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	687a      	ldr	r2, [r7, #4]
 800731c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8007320:	e005      	b.n	800732e <FMC_NORSRAM_Extended_Timing_Init+0x66>
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTRx_BUSTURN_Pos)));
#endif /* FMC_BTRx_DATAHLD */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	687a      	ldr	r2, [r7, #4]
 8007326:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800732a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 800732e:	2300      	movs	r3, #0
}
 8007330:	4618      	mov	r0, r3
 8007332:	3714      	adds	r7, #20
 8007334:	46bd      	mov	sp, r7
 8007336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733a:	4770      	bx	lr

0800733c <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800733c:	b084      	sub	sp, #16
 800733e:	b480      	push	{r7}
 8007340:	b085      	sub	sp, #20
 8007342:	af00      	add	r7, sp, #0
 8007344:	6078      	str	r0, [r7, #4]
 8007346:	f107 001c 	add.w	r0, r7, #28
 800734a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800734e:	2300      	movs	r3, #0
 8007350:	60fb      	str	r3, [r7, #12]

  /* Set SDMMC configuration parameters */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  tmpreg |= Init.ClockBypass;
#endif
  tmpreg |= (Init.ClockEdge           |\
 8007352:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 8007354:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8007356:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8007358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      |\
 800735a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800735c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             |\
 800735e:	431a      	orrs	r2, r3
             Init.ClockDiv
 8007360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl |\
 8007362:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8007364:	68fa      	ldr	r2, [r7, #12]
 8007366:	4313      	orrs	r3, r2
 8007368:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	685a      	ldr	r2, [r3, #4]
 800736e:	4b07      	ldr	r3, [pc, #28]	; (800738c <SDMMC_Init+0x50>)
 8007370:	4013      	ands	r3, r2
 8007372:	68fa      	ldr	r2, [r7, #12]
 8007374:	431a      	orrs	r2, r3
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800737a:	2300      	movs	r3, #0
}
 800737c:	4618      	mov	r0, r3
 800737e:	3714      	adds	r7, #20
 8007380:	46bd      	mov	sp, r7
 8007382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007386:	b004      	add	sp, #16
 8007388:	4770      	bx	lr
 800738a:	bf00      	nop
 800738c:	ffc02c00 	.word	0xffc02c00

08007390 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8007390:	b480      	push	{r7}
 8007392:	b083      	sub	sp, #12
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800739e:	4618      	mov	r0, r3
 80073a0:	370c      	adds	r7, #12
 80073a2:	46bd      	mov	sp, r7
 80073a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a8:	4770      	bx	lr

080073aa <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 80073aa:	b580      	push	{r7, lr}
 80073ac:	b082      	sub	sp, #8
 80073ae:	af00      	add	r7, sp, #0
 80073b0:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	f043 0203 	orr.w	r2, r3, #3
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	601a      	str	r2, [r3, #0]
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 80073be:	2002      	movs	r0, #2
 80073c0:	f7fa fa20 	bl	8001804 <HAL_Delay>

  return HAL_OK;
 80073c4:	2300      	movs	r3, #0
}
 80073c6:	4618      	mov	r0, r3
 80073c8:	3708      	adds	r7, #8
 80073ca:	46bd      	mov	sp, r7
 80073cc:	bd80      	pop	{r7, pc}

080073ce <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 80073ce:	b480      	push	{r7}
 80073d0:	b083      	sub	sp, #12
 80073d2:	af00      	add	r7, sp, #0
 80073d4:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	f003 0303 	and.w	r3, r3, #3
}
 80073de:	4618      	mov	r0, r3
 80073e0:	370c      	adds	r7, #12
 80073e2:	46bd      	mov	sp, r7
 80073e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e8:	4770      	bx	lr
	...

080073ec <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 80073ec:	b480      	push	{r7}
 80073ee:	b085      	sub	sp, #20
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
 80073f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80073f6:	2300      	movs	r3, #0
 80073f8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 80073fa:	683b      	ldr	r3, [r7, #0]
 80073fc:	681a      	ldr	r2, [r3, #0]
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007402:	683b      	ldr	r3, [r7, #0]
 8007404:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8007406:	683b      	ldr	r3, [r7, #0]
 8007408:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800740a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800740c:	683b      	ldr	r3, [r7, #0]
 800740e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8007410:	431a      	orrs	r2, r3
                       Command->CPSM);
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8007416:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007418:	68fa      	ldr	r2, [r7, #12]
 800741a:	4313      	orrs	r3, r2
 800741c:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	68da      	ldr	r2, [r3, #12]
 8007422:	4b06      	ldr	r3, [pc, #24]	; (800743c <SDMMC_SendCommand+0x50>)
 8007424:	4013      	ands	r3, r2
 8007426:	68fa      	ldr	r2, [r7, #12]
 8007428:	431a      	orrs	r2, r3
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800742e:	2300      	movs	r3, #0
}
 8007430:	4618      	mov	r0, r3
 8007432:	3714      	adds	r7, #20
 8007434:	46bd      	mov	sp, r7
 8007436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743a:	4770      	bx	lr
 800743c:	fffee0c0 	.word	0xfffee0c0

08007440 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8007440:	b480      	push	{r7}
 8007442:	b083      	sub	sp, #12
 8007444:	af00      	add	r7, sp, #0
 8007446:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	691b      	ldr	r3, [r3, #16]
 800744c:	b2db      	uxtb	r3, r3
}
 800744e:	4618      	mov	r0, r3
 8007450:	370c      	adds	r7, #12
 8007452:	46bd      	mov	sp, r7
 8007454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007458:	4770      	bx	lr

0800745a <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800745a:	b480      	push	{r7}
 800745c:	b085      	sub	sp, #20
 800745e:	af00      	add	r7, sp, #0
 8007460:	6078      	str	r0, [r7, #4]
 8007462:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	3314      	adds	r3, #20
 8007468:	461a      	mov	r2, r3
 800746a:	683b      	ldr	r3, [r7, #0]
 800746c:	4413      	add	r3, r2
 800746e:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	681b      	ldr	r3, [r3, #0]
}
 8007474:	4618      	mov	r0, r3
 8007476:	3714      	adds	r7, #20
 8007478:	46bd      	mov	sp, r7
 800747a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747e:	4770      	bx	lr

08007480 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8007480:	b480      	push	{r7}
 8007482:	b085      	sub	sp, #20
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
 8007488:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800748a:	2300      	movs	r3, #0
 800748c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800748e:	683b      	ldr	r3, [r7, #0]
 8007490:	681a      	ldr	r2, [r3, #0]
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8007496:	683b      	ldr	r3, [r7, #0]
 8007498:	685a      	ldr	r2, [r3, #4]
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800749e:	683b      	ldr	r3, [r7, #0]
 80074a0:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80074a2:	683b      	ldr	r3, [r7, #0]
 80074a4:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80074a6:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80074ac:	431a      	orrs	r2, r3
                       Data->DPSM);
 80074ae:	683b      	ldr	r3, [r7, #0]
 80074b0:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80074b2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80074b4:	68fa      	ldr	r2, [r7, #12]
 80074b6:	4313      	orrs	r3, r2
 80074b8:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074be:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	431a      	orrs	r2, r3
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80074ca:	2300      	movs	r3, #0

}
 80074cc:	4618      	mov	r0, r3
 80074ce:	3714      	adds	r7, #20
 80074d0:	46bd      	mov	sp, r7
 80074d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d6:	4770      	bx	lr

080074d8 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 80074d8:	b580      	push	{r7, lr}
 80074da:	b088      	sub	sp, #32
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
 80074e0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80074e2:	683b      	ldr	r3, [r7, #0]
 80074e4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80074e6:	2310      	movs	r3, #16
 80074e8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80074ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 80074ee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80074f0:	2300      	movs	r3, #0
 80074f2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80074f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80074f8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80074fa:	f107 0308 	add.w	r3, r7, #8
 80074fe:	4619      	mov	r1, r3
 8007500:	6878      	ldr	r0, [r7, #4]
 8007502:	f7ff ff73 	bl	80073ec <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8007506:	f241 3288 	movw	r2, #5000	; 0x1388
 800750a:	2110      	movs	r1, #16
 800750c:	6878      	ldr	r0, [r7, #4]
 800750e:	f000 f9b9 	bl	8007884 <SDMMC_GetCmdResp1>
 8007512:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007514:	69fb      	ldr	r3, [r7, #28]
}
 8007516:	4618      	mov	r0, r3
 8007518:	3720      	adds	r7, #32
 800751a:	46bd      	mov	sp, r7
 800751c:	bd80      	pop	{r7, pc}

0800751e <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  addr Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800751e:	b580      	push	{r7, lr}
 8007520:	b08a      	sub	sp, #40	; 0x28
 8007522:	af00      	add	r7, sp, #0
 8007524:	60f8      	str	r0, [r7, #12]
 8007526:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800752a:	683b      	ldr	r3, [r7, #0]
 800752c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800752e:	2307      	movs	r3, #7
 8007530:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007532:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007536:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007538:	2300      	movs	r3, #0
 800753a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800753c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007540:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007542:	f107 0310 	add.w	r3, r7, #16
 8007546:	4619      	mov	r1, r3
 8007548:	68f8      	ldr	r0, [r7, #12]
 800754a:	f7ff ff4f 	bl	80073ec <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800754e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007552:	2107      	movs	r1, #7
 8007554:	68f8      	ldr	r0, [r7, #12]
 8007556:	f000 f995 	bl	8007884 <SDMMC_GetCmdResp1>
 800755a:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800755c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800755e:	4618      	mov	r0, r3
 8007560:	3728      	adds	r7, #40	; 0x28
 8007562:	46bd      	mov	sp, r7
 8007564:	bd80      	pop	{r7, pc}

08007566 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8007566:	b580      	push	{r7, lr}
 8007568:	b088      	sub	sp, #32
 800756a:	af00      	add	r7, sp, #0
 800756c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800756e:	2300      	movs	r3, #0
 8007570:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8007572:	2300      	movs	r3, #0
 8007574:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8007576:	2300      	movs	r3, #0
 8007578:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800757a:	2300      	movs	r3, #0
 800757c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800757e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007582:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007584:	f107 0308 	add.w	r3, r7, #8
 8007588:	4619      	mov	r1, r3
 800758a:	6878      	ldr	r0, [r7, #4]
 800758c:	f7ff ff2e 	bl	80073ec <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8007590:	6878      	ldr	r0, [r7, #4]
 8007592:	f000 fbb9 	bl	8007d08 <SDMMC_GetCmdError>
 8007596:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007598:	69fb      	ldr	r3, [r7, #28]
}
 800759a:	4618      	mov	r0, r3
 800759c:	3720      	adds	r7, #32
 800759e:	46bd      	mov	sp, r7
 80075a0:	bd80      	pop	{r7, pc}

080075a2 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 80075a2:	b580      	push	{r7, lr}
 80075a4:	b088      	sub	sp, #32
 80075a6:	af00      	add	r7, sp, #0
 80075a8:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80075aa:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80075ae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80075b0:	2308      	movs	r3, #8
 80075b2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80075b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80075b8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80075ba:	2300      	movs	r3, #0
 80075bc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80075be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80075c2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80075c4:	f107 0308 	add.w	r3, r7, #8
 80075c8:	4619      	mov	r1, r3
 80075ca:	6878      	ldr	r0, [r7, #4]
 80075cc:	f7ff ff0e 	bl	80073ec <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 80075d0:	6878      	ldr	r0, [r7, #4]
 80075d2:	f000 fb4b 	bl	8007c6c <SDMMC_GetCmdResp7>
 80075d6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80075d8:	69fb      	ldr	r3, [r7, #28]
}
 80075da:	4618      	mov	r0, r3
 80075dc:	3720      	adds	r7, #32
 80075de:	46bd      	mov	sp, r7
 80075e0:	bd80      	pop	{r7, pc}

080075e2 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80075e2:	b580      	push	{r7, lr}
 80075e4:	b088      	sub	sp, #32
 80075e6:	af00      	add	r7, sp, #0
 80075e8:	6078      	str	r0, [r7, #4]
 80075ea:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80075ec:	683b      	ldr	r3, [r7, #0]
 80075ee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80075f0:	2337      	movs	r3, #55	; 0x37
 80075f2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80075f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80075f8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80075fa:	2300      	movs	r3, #0
 80075fc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80075fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007602:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007604:	f107 0308 	add.w	r3, r7, #8
 8007608:	4619      	mov	r1, r3
 800760a:	6878      	ldr	r0, [r7, #4]
 800760c:	f7ff feee 	bl	80073ec <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8007610:	f241 3288 	movw	r2, #5000	; 0x1388
 8007614:	2137      	movs	r1, #55	; 0x37
 8007616:	6878      	ldr	r0, [r7, #4]
 8007618:	f000 f934 	bl	8007884 <SDMMC_GetCmdResp1>
 800761c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800761e:	69fb      	ldr	r3, [r7, #28]
}
 8007620:	4618      	mov	r0, r3
 8007622:	3720      	adds	r7, #32
 8007624:	46bd      	mov	sp, r7
 8007626:	bd80      	pop	{r7, pc}

08007628 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8007628:	b580      	push	{r7, lr}
 800762a:	b088      	sub	sp, #32
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
 8007630:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  sdmmc_cmdinit.Argument         = Argument;
 8007632:	683b      	ldr	r3, [r7, #0]
 8007634:	60bb      	str	r3, [r7, #8]
#else
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8007636:	2329      	movs	r3, #41	; 0x29
 8007638:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800763a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800763e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007640:	2300      	movs	r3, #0
 8007642:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007644:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007648:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800764a:	f107 0308 	add.w	r3, r7, #8
 800764e:	4619      	mov	r1, r3
 8007650:	6878      	ldr	r0, [r7, #4]
 8007652:	f7ff fecb 	bl	80073ec <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8007656:	6878      	ldr	r0, [r7, #4]
 8007658:	f000 fa50 	bl	8007afc <SDMMC_GetCmdResp3>
 800765c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800765e:	69fb      	ldr	r3, [r7, #28]
}
 8007660:	4618      	mov	r0, r3
 8007662:	3720      	adds	r7, #32
 8007664:	46bd      	mov	sp, r7
 8007666:	bd80      	pop	{r7, pc}

08007668 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  BusWidth BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8007668:	b580      	push	{r7, lr}
 800766a:	b088      	sub	sp, #32
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
 8007670:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8007672:	683b      	ldr	r3, [r7, #0]
 8007674:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8007676:	2306      	movs	r3, #6
 8007678:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800767a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800767e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007680:	2300      	movs	r3, #0
 8007682:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007684:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007688:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800768a:	f107 0308 	add.w	r3, r7, #8
 800768e:	4619      	mov	r1, r3
 8007690:	6878      	ldr	r0, [r7, #4]
 8007692:	f7ff feab 	bl	80073ec <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8007696:	f241 3288 	movw	r2, #5000	; 0x1388
 800769a:	2106      	movs	r1, #6
 800769c:	6878      	ldr	r0, [r7, #4]
 800769e:	f000 f8f1 	bl	8007884 <SDMMC_GetCmdResp1>
 80076a2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80076a4:	69fb      	ldr	r3, [r7, #28]
}
 80076a6:	4618      	mov	r0, r3
 80076a8:	3720      	adds	r7, #32
 80076aa:	46bd      	mov	sp, r7
 80076ac:	bd80      	pop	{r7, pc}

080076ae <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 80076ae:	b580      	push	{r7, lr}
 80076b0:	b088      	sub	sp, #32
 80076b2:	af00      	add	r7, sp, #0
 80076b4:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 80076b6:	2300      	movs	r3, #0
 80076b8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80076ba:	2333      	movs	r3, #51	; 0x33
 80076bc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80076be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80076c2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80076c4:	2300      	movs	r3, #0
 80076c6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80076c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80076cc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80076ce:	f107 0308 	add.w	r3, r7, #8
 80076d2:	4619      	mov	r1, r3
 80076d4:	6878      	ldr	r0, [r7, #4]
 80076d6:	f7ff fe89 	bl	80073ec <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 80076da:	f241 3288 	movw	r2, #5000	; 0x1388
 80076de:	2133      	movs	r1, #51	; 0x33
 80076e0:	6878      	ldr	r0, [r7, #4]
 80076e2:	f000 f8cf 	bl	8007884 <SDMMC_GetCmdResp1>
 80076e6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80076e8:	69fb      	ldr	r3, [r7, #28]
}
 80076ea:	4618      	mov	r0, r3
 80076ec:	3720      	adds	r7, #32
 80076ee:	46bd      	mov	sp, r7
 80076f0:	bd80      	pop	{r7, pc}

080076f2 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 80076f2:	b580      	push	{r7, lr}
 80076f4:	b088      	sub	sp, #32
 80076f6:	af00      	add	r7, sp, #0
 80076f8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80076fa:	2300      	movs	r3, #0
 80076fc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80076fe:	2302      	movs	r3, #2
 8007700:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8007702:	f44f 7340 	mov.w	r3, #768	; 0x300
 8007706:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007708:	2300      	movs	r3, #0
 800770a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800770c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007710:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007712:	f107 0308 	add.w	r3, r7, #8
 8007716:	4619      	mov	r1, r3
 8007718:	6878      	ldr	r0, [r7, #4]
 800771a:	f7ff fe67 	bl	80073ec <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800771e:	6878      	ldr	r0, [r7, #4]
 8007720:	f000 f9a2 	bl	8007a68 <SDMMC_GetCmdResp2>
 8007724:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007726:	69fb      	ldr	r3, [r7, #28]
}
 8007728:	4618      	mov	r0, r3
 800772a:	3720      	adds	r7, #32
 800772c:	46bd      	mov	sp, r7
 800772e:	bd80      	pop	{r7, pc}

08007730 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b088      	sub	sp, #32
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
 8007738:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800773a:	683b      	ldr	r3, [r7, #0]
 800773c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800773e:	2309      	movs	r3, #9
 8007740:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8007742:	f44f 7340 	mov.w	r3, #768	; 0x300
 8007746:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007748:	2300      	movs	r3, #0
 800774a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800774c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007750:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007752:	f107 0308 	add.w	r3, r7, #8
 8007756:	4619      	mov	r1, r3
 8007758:	6878      	ldr	r0, [r7, #4]
 800775a:	f7ff fe47 	bl	80073ec <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800775e:	6878      	ldr	r0, [r7, #4]
 8007760:	f000 f982 	bl	8007a68 <SDMMC_GetCmdResp2>
 8007764:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007766:	69fb      	ldr	r3, [r7, #28]
}
 8007768:	4618      	mov	r0, r3
 800776a:	3720      	adds	r7, #32
 800776c:	46bd      	mov	sp, r7
 800776e:	bd80      	pop	{r7, pc}

08007770 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pRCA Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8007770:	b580      	push	{r7, lr}
 8007772:	b088      	sub	sp, #32
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
 8007778:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800777a:	2300      	movs	r3, #0
 800777c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800777e:	2303      	movs	r3, #3
 8007780:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007782:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007786:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007788:	2300      	movs	r3, #0
 800778a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800778c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007790:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007792:	f107 0308 	add.w	r3, r7, #8
 8007796:	4619      	mov	r1, r3
 8007798:	6878      	ldr	r0, [r7, #4]
 800779a:	f7ff fe27 	bl	80073ec <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800779e:	683a      	ldr	r2, [r7, #0]
 80077a0:	2103      	movs	r1, #3
 80077a2:	6878      	ldr	r0, [r7, #4]
 80077a4:	f000 f9ea 	bl	8007b7c <SDMMC_GetCmdResp6>
 80077a8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80077aa:	69fb      	ldr	r3, [r7, #28]
}
 80077ac:	4618      	mov	r0, r3
 80077ae:	3720      	adds	r7, #32
 80077b0:	46bd      	mov	sp, r7
 80077b2:	bd80      	pop	{r7, pc}

080077b4 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b088      	sub	sp, #32
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
 80077bc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 80077be:	683b      	ldr	r3, [r7, #0]
 80077c0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80077c2:	230d      	movs	r3, #13
 80077c4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80077c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80077ca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80077cc:	2300      	movs	r3, #0
 80077ce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80077d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80077d4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80077d6:	f107 0308 	add.w	r3, r7, #8
 80077da:	4619      	mov	r1, r3
 80077dc:	6878      	ldr	r0, [r7, #4]
 80077de:	f7ff fe05 	bl	80073ec <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 80077e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80077e6:	210d      	movs	r1, #13
 80077e8:	6878      	ldr	r0, [r7, #4]
 80077ea:	f000 f84b 	bl	8007884 <SDMMC_GetCmdResp1>
 80077ee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80077f0:	69fb      	ldr	r3, [r7, #28]
}
 80077f2:	4618      	mov	r0, r3
 80077f4:	3720      	adds	r7, #32
 80077f6:	46bd      	mov	sp, r7
 80077f8:	bd80      	pop	{r7, pc}

080077fa <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 80077fa:	b580      	push	{r7, lr}
 80077fc:	b088      	sub	sp, #32
 80077fe:	af00      	add	r7, sp, #0
 8007800:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8007802:	2300      	movs	r3, #0
 8007804:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 8007806:	230d      	movs	r3, #13
 8007808:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800780a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800780e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007810:	2300      	movs	r3, #0
 8007812:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007814:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007818:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800781a:	f107 0308 	add.w	r3, r7, #8
 800781e:	4619      	mov	r1, r3
 8007820:	6878      	ldr	r0, [r7, #4]
 8007822:	f7ff fde3 	bl	80073ec <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 8007826:	f241 3288 	movw	r2, #5000	; 0x1388
 800782a:	210d      	movs	r1, #13
 800782c:	6878      	ldr	r0, [r7, #4]
 800782e:	f000 f829 	bl	8007884 <SDMMC_GetCmdResp1>
 8007832:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007834:	69fb      	ldr	r3, [r7, #28]
}
 8007836:	4618      	mov	r0, r3
 8007838:	3720      	adds	r7, #32
 800783a:	46bd      	mov	sp, r7
 800783c:	bd80      	pop	{r7, pc}

0800783e <SDMMC_CmdVoltageSwitch>:
  *         condition register (OCR)
  * @param  None
  * @retval HAL status
  */
uint32_t SDMMC_CmdVoltageSwitch(SDMMC_TypeDef *SDMMCx)
{
 800783e:	b580      	push	{r7, lr}
 8007840:	b088      	sub	sp, #32
 8007842:	af00      	add	r7, sp, #0
 8007844:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0x00000000;
 8007846:	2300      	movs	r3, #0
 8007848:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 800784a:	230b      	movs	r3, #11
 800784c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800784e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007852:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007854:	2300      	movs	r3, #0
 8007856:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007858:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800785c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800785e:	f107 0308 	add.w	r3, r7, #8
 8007862:	4619      	mov	r1, r3
 8007864:	6878      	ldr	r0, [r7, #4]
 8007866:	f7ff fdc1 	bl	80073ec <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 800786a:	f241 3288 	movw	r2, #5000	; 0x1388
 800786e:	210b      	movs	r1, #11
 8007870:	6878      	ldr	r0, [r7, #4]
 8007872:	f000 f807 	bl	8007884 <SDMMC_GetCmdResp1>
 8007876:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007878:	69fb      	ldr	r3, [r7, #28]
}
 800787a:	4618      	mov	r0, r3
 800787c:	3720      	adds	r7, #32
 800787e:	46bd      	mov	sp, r7
 8007880:	bd80      	pop	{r7, pc}
	...

08007884 <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8007884:	b580      	push	{r7, lr}
 8007886:	b088      	sub	sp, #32
 8007888:	af00      	add	r7, sp, #0
 800788a:	60f8      	str	r0, [r7, #12]
 800788c:	460b      	mov	r3, r1
 800788e:	607a      	str	r2, [r7, #4]
 8007890:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007892:	4b70      	ldr	r3, [pc, #448]	; (8007a54 <SDMMC_GetCmdResp1+0x1d0>)
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	4a70      	ldr	r2, [pc, #448]	; (8007a58 <SDMMC_GetCmdResp1+0x1d4>)
 8007898:	fba2 2303 	umull	r2, r3, r2, r3
 800789c:	0a5a      	lsrs	r2, r3, #9
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	fb02 f303 	mul.w	r3, r2, r3
 80078a4:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 80078a6:	69fb      	ldr	r3, [r7, #28]
 80078a8:	1e5a      	subs	r2, r3, #1
 80078aa:	61fa      	str	r2, [r7, #28]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d102      	bne.n	80078b6 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80078b0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80078b4:	e0c9      	b.n	8007a4a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078ba:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 80078bc:	69ba      	ldr	r2, [r7, #24]
 80078be:	4b67      	ldr	r3, [pc, #412]	; (8007a5c <SDMMC_GetCmdResp1+0x1d8>)
 80078c0:	4013      	ands	r3, r2
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d0ef      	beq.n	80078a6 <SDMMC_GetCmdResp1+0x22>
 80078c6:	69bb      	ldr	r3, [r7, #24]
 80078c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d1ea      	bne.n	80078a6 <SDMMC_GetCmdResp1+0x22>
#else
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078d4:	f003 0304 	and.w	r3, r3, #4
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d004      	beq.n	80078e6 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	2204      	movs	r2, #4
 80078e0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80078e2:	2304      	movs	r3, #4
 80078e4:	e0b1      	b.n	8007a4a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078ea:	f003 0301 	and.w	r3, r3, #1
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d004      	beq.n	80078fc <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	2201      	movs	r2, #1
 80078f6:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80078f8:	2301      	movs	r3, #1
 80078fa:	e0a6      	b.n	8007a4a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	4a58      	ldr	r2, [pc, #352]	; (8007a60 <SDMMC_GetCmdResp1+0x1dc>)
 8007900:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8007902:	68f8      	ldr	r0, [r7, #12]
 8007904:	f7ff fd9c 	bl	8007440 <SDMMC_GetCommandResponse>
 8007908:	4603      	mov	r3, r0
 800790a:	461a      	mov	r2, r3
 800790c:	7afb      	ldrb	r3, [r7, #11]
 800790e:	4293      	cmp	r3, r2
 8007910:	d001      	beq.n	8007916 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007912:	2301      	movs	r3, #1
 8007914:	e099      	b.n	8007a4a <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8007916:	2100      	movs	r1, #0
 8007918:	68f8      	ldr	r0, [r7, #12]
 800791a:	f7ff fd9e 	bl	800745a <SDMMC_GetResponse>
 800791e:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8007920:	697a      	ldr	r2, [r7, #20]
 8007922:	4b50      	ldr	r3, [pc, #320]	; (8007a64 <SDMMC_GetCmdResp1+0x1e0>)
 8007924:	4013      	ands	r3, r2
 8007926:	2b00      	cmp	r3, #0
 8007928:	d101      	bne.n	800792e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800792a:	2300      	movs	r3, #0
 800792c:	e08d      	b.n	8007a4a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800792e:	697b      	ldr	r3, [r7, #20]
 8007930:	2b00      	cmp	r3, #0
 8007932:	da02      	bge.n	800793a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8007934:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007938:	e087      	b.n	8007a4a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800793a:	697b      	ldr	r3, [r7, #20]
 800793c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007940:	2b00      	cmp	r3, #0
 8007942:	d001      	beq.n	8007948 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8007944:	2340      	movs	r3, #64	; 0x40
 8007946:	e080      	b.n	8007a4a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8007948:	697b      	ldr	r3, [r7, #20]
 800794a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800794e:	2b00      	cmp	r3, #0
 8007950:	d001      	beq.n	8007956 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8007952:	2380      	movs	r3, #128	; 0x80
 8007954:	e079      	b.n	8007a4a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8007956:	697b      	ldr	r3, [r7, #20]
 8007958:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800795c:	2b00      	cmp	r3, #0
 800795e:	d002      	beq.n	8007966 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8007960:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007964:	e071      	b.n	8007a4a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8007966:	697b      	ldr	r3, [r7, #20]
 8007968:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800796c:	2b00      	cmp	r3, #0
 800796e:	d002      	beq.n	8007976 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8007970:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007974:	e069      	b.n	8007a4a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8007976:	697b      	ldr	r3, [r7, #20]
 8007978:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800797c:	2b00      	cmp	r3, #0
 800797e:	d002      	beq.n	8007986 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8007980:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007984:	e061      	b.n	8007a4a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8007986:	697b      	ldr	r3, [r7, #20]
 8007988:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800798c:	2b00      	cmp	r3, #0
 800798e:	d002      	beq.n	8007996 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8007990:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007994:	e059      	b.n	8007a4a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8007996:	697b      	ldr	r3, [r7, #20]
 8007998:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800799c:	2b00      	cmp	r3, #0
 800799e:	d002      	beq.n	80079a6 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80079a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80079a4:	e051      	b.n	8007a4a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80079a6:	697b      	ldr	r3, [r7, #20]
 80079a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d002      	beq.n	80079b6 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80079b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80079b4:	e049      	b.n	8007a4a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80079b6:	697b      	ldr	r3, [r7, #20]
 80079b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d002      	beq.n	80079c6 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80079c0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80079c4:	e041      	b.n	8007a4a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80079c6:	697b      	ldr	r3, [r7, #20]
 80079c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d002      	beq.n	80079d6 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 80079d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80079d4:	e039      	b.n	8007a4a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80079d6:	697b      	ldr	r3, [r7, #20]
 80079d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d002      	beq.n	80079e6 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80079e0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80079e4:	e031      	b.n	8007a4a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80079e6:	697b      	ldr	r3, [r7, #20]
 80079e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d002      	beq.n	80079f6 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80079f0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80079f4:	e029      	b.n	8007a4a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80079f6:	697b      	ldr	r3, [r7, #20]
 80079f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d002      	beq.n	8007a06 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8007a00:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007a04:	e021      	b.n	8007a4a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8007a06:	697b      	ldr	r3, [r7, #20]
 8007a08:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d002      	beq.n	8007a16 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8007a10:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8007a14:	e019      	b.n	8007a4a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8007a16:	697b      	ldr	r3, [r7, #20]
 8007a18:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d002      	beq.n	8007a26 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8007a20:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007a24:	e011      	b.n	8007a4a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8007a26:	697b      	ldr	r3, [r7, #20]
 8007a28:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d002      	beq.n	8007a36 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8007a30:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007a34:	e009      	b.n	8007a4a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8007a36:	697b      	ldr	r3, [r7, #20]
 8007a38:	f003 0308 	and.w	r3, r3, #8
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d002      	beq.n	8007a46 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8007a40:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8007a44:	e001      	b.n	8007a4a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8007a46:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	3720      	adds	r7, #32
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	bd80      	pop	{r7, pc}
 8007a52:	bf00      	nop
 8007a54:	20000000 	.word	0x20000000
 8007a58:	10624dd3 	.word	0x10624dd3
 8007a5c:	00200045 	.word	0x00200045
 8007a60:	002000c5 	.word	0x002000c5
 8007a64:	fdffe008 	.word	0xfdffe008

08007a68 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8007a68:	b480      	push	{r7}
 8007a6a:	b085      	sub	sp, #20
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007a70:	4b1f      	ldr	r3, [pc, #124]	; (8007af0 <SDMMC_GetCmdResp2+0x88>)
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	4a1f      	ldr	r2, [pc, #124]	; (8007af4 <SDMMC_GetCmdResp2+0x8c>)
 8007a76:	fba2 2303 	umull	r2, r3, r2, r3
 8007a7a:	0a5b      	lsrs	r3, r3, #9
 8007a7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a80:	fb02 f303 	mul.w	r3, r2, r3
 8007a84:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	1e5a      	subs	r2, r3, #1
 8007a8a:	60fa      	str	r2, [r7, #12]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d102      	bne.n	8007a96 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007a90:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007a94:	e026      	b.n	8007ae4 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a9a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007a9c:	68bb      	ldr	r3, [r7, #8]
 8007a9e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d0ef      	beq.n	8007a86 <SDMMC_GetCmdResp2+0x1e>
 8007aa6:	68bb      	ldr	r3, [r7, #8]
 8007aa8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d1ea      	bne.n	8007a86 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ab4:	f003 0304 	and.w	r3, r3, #4
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d004      	beq.n	8007ac6 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	2204      	movs	r2, #4
 8007ac0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007ac2:	2304      	movs	r3, #4
 8007ac4:	e00e      	b.n	8007ae4 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007aca:	f003 0301 	and.w	r3, r3, #1
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d004      	beq.n	8007adc <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	2201      	movs	r2, #1
 8007ad6:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007ad8:	2301      	movs	r3, #1
 8007ada:	e003      	b.n	8007ae4 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	4a06      	ldr	r2, [pc, #24]	; (8007af8 <SDMMC_GetCmdResp2+0x90>)
 8007ae0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8007ae2:	2300      	movs	r3, #0
}
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	3714      	adds	r7, #20
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aee:	4770      	bx	lr
 8007af0:	20000000 	.word	0x20000000
 8007af4:	10624dd3 	.word	0x10624dd3
 8007af8:	002000c5 	.word	0x002000c5

08007afc <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8007afc:	b480      	push	{r7}
 8007afe:	b085      	sub	sp, #20
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007b04:	4b1a      	ldr	r3, [pc, #104]	; (8007b70 <SDMMC_GetCmdResp3+0x74>)
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	4a1a      	ldr	r2, [pc, #104]	; (8007b74 <SDMMC_GetCmdResp3+0x78>)
 8007b0a:	fba2 2303 	umull	r2, r3, r2, r3
 8007b0e:	0a5b      	lsrs	r3, r3, #9
 8007b10:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b14:	fb02 f303 	mul.w	r3, r2, r3
 8007b18:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	1e5a      	subs	r2, r3, #1
 8007b1e:	60fa      	str	r2, [r7, #12]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d102      	bne.n	8007b2a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007b24:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007b28:	e01b      	b.n	8007b62 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b2e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007b30:	68bb      	ldr	r3, [r7, #8]
 8007b32:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d0ef      	beq.n	8007b1a <SDMMC_GetCmdResp3+0x1e>
 8007b3a:	68bb      	ldr	r3, [r7, #8]
 8007b3c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d1ea      	bne.n	8007b1a <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b48:	f003 0304 	and.w	r3, r3, #4
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d004      	beq.n	8007b5a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2204      	movs	r2, #4
 8007b54:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007b56:	2304      	movs	r3, #4
 8007b58:	e003      	b.n	8007b62 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	4a06      	ldr	r2, [pc, #24]	; (8007b78 <SDMMC_GetCmdResp3+0x7c>)
 8007b5e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8007b60:	2300      	movs	r3, #0
}
 8007b62:	4618      	mov	r0, r3
 8007b64:	3714      	adds	r7, #20
 8007b66:	46bd      	mov	sp, r7
 8007b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6c:	4770      	bx	lr
 8007b6e:	bf00      	nop
 8007b70:	20000000 	.word	0x20000000
 8007b74:	10624dd3 	.word	0x10624dd3
 8007b78:	002000c5 	.word	0x002000c5

08007b7c <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8007b7c:	b580      	push	{r7, lr}
 8007b7e:	b088      	sub	sp, #32
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	60f8      	str	r0, [r7, #12]
 8007b84:	460b      	mov	r3, r1
 8007b86:	607a      	str	r2, [r7, #4]
 8007b88:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007b8a:	4b35      	ldr	r3, [pc, #212]	; (8007c60 <SDMMC_GetCmdResp6+0xe4>)
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	4a35      	ldr	r2, [pc, #212]	; (8007c64 <SDMMC_GetCmdResp6+0xe8>)
 8007b90:	fba2 2303 	umull	r2, r3, r2, r3
 8007b94:	0a5b      	lsrs	r3, r3, #9
 8007b96:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b9a:	fb02 f303 	mul.w	r3, r2, r3
 8007b9e:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8007ba0:	69fb      	ldr	r3, [r7, #28]
 8007ba2:	1e5a      	subs	r2, r3, #1
 8007ba4:	61fa      	str	r2, [r7, #28]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d102      	bne.n	8007bb0 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007baa:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007bae:	e052      	b.n	8007c56 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bb4:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007bb6:	69bb      	ldr	r3, [r7, #24]
 8007bb8:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d0ef      	beq.n	8007ba0 <SDMMC_GetCmdResp6+0x24>
 8007bc0:	69bb      	ldr	r3, [r7, #24]
 8007bc2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d1ea      	bne.n	8007ba0 <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bce:	f003 0304 	and.w	r3, r3, #4
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d004      	beq.n	8007be0 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	2204      	movs	r2, #4
 8007bda:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007bdc:	2304      	movs	r3, #4
 8007bde:	e03a      	b.n	8007c56 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007be4:	f003 0301 	and.w	r3, r3, #1
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d004      	beq.n	8007bf6 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	2201      	movs	r2, #1
 8007bf0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007bf2:	2301      	movs	r3, #1
 8007bf4:	e02f      	b.n	8007c56 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8007bf6:	68f8      	ldr	r0, [r7, #12]
 8007bf8:	f7ff fc22 	bl	8007440 <SDMMC_GetCommandResponse>
 8007bfc:	4603      	mov	r3, r0
 8007bfe:	461a      	mov	r2, r3
 8007c00:	7afb      	ldrb	r3, [r7, #11]
 8007c02:	4293      	cmp	r3, r2
 8007c04:	d001      	beq.n	8007c0a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007c06:	2301      	movs	r3, #1
 8007c08:	e025      	b.n	8007c56 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	4a16      	ldr	r2, [pc, #88]	; (8007c68 <SDMMC_GetCmdResp6+0xec>)
 8007c0e:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8007c10:	2100      	movs	r1, #0
 8007c12:	68f8      	ldr	r0, [r7, #12]
 8007c14:	f7ff fc21 	bl	800745a <SDMMC_GetResponse>
 8007c18:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8007c1a:	697b      	ldr	r3, [r7, #20]
 8007c1c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d106      	bne.n	8007c32 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8007c24:	697b      	ldr	r3, [r7, #20]
 8007c26:	0c1b      	lsrs	r3, r3, #16
 8007c28:	b29a      	uxth	r2, r3
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 8007c2e:	2300      	movs	r3, #0
 8007c30:	e011      	b.n	8007c56 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8007c32:	697b      	ldr	r3, [r7, #20]
 8007c34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d002      	beq.n	8007c42 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007c3c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007c40:	e009      	b.n	8007c56 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8007c42:	697b      	ldr	r3, [r7, #20]
 8007c44:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d002      	beq.n	8007c52 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007c4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007c50:	e001      	b.n	8007c56 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8007c52:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8007c56:	4618      	mov	r0, r3
 8007c58:	3720      	adds	r7, #32
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	bd80      	pop	{r7, pc}
 8007c5e:	bf00      	nop
 8007c60:	20000000 	.word	0x20000000
 8007c64:	10624dd3 	.word	0x10624dd3
 8007c68:	002000c5 	.word	0x002000c5

08007c6c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8007c6c:	b480      	push	{r7}
 8007c6e:	b085      	sub	sp, #20
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007c74:	4b22      	ldr	r3, [pc, #136]	; (8007d00 <SDMMC_GetCmdResp7+0x94>)
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	4a22      	ldr	r2, [pc, #136]	; (8007d04 <SDMMC_GetCmdResp7+0x98>)
 8007c7a:	fba2 2303 	umull	r2, r3, r2, r3
 8007c7e:	0a5b      	lsrs	r3, r3, #9
 8007c80:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c84:	fb02 f303 	mul.w	r3, r2, r3
 8007c88:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	1e5a      	subs	r2, r3, #1
 8007c8e:	60fa      	str	r2, [r7, #12]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d102      	bne.n	8007c9a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007c94:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007c98:	e02c      	b.n	8007cf4 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c9e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007ca0:	68bb      	ldr	r3, [r7, #8]
 8007ca2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d0ef      	beq.n	8007c8a <SDMMC_GetCmdResp7+0x1e>
 8007caa:	68bb      	ldr	r3, [r7, #8]
 8007cac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d1ea      	bne.n	8007c8a <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cb8:	f003 0304 	and.w	r3, r3, #4
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d004      	beq.n	8007cca <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	2204      	movs	r2, #4
 8007cc4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007cc6:	2304      	movs	r3, #4
 8007cc8:	e014      	b.n	8007cf4 <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cce:	f003 0301 	and.w	r3, r3, #1
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d004      	beq.n	8007ce0 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	2201      	movs	r2, #1
 8007cda:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007cdc:	2301      	movs	r3, #1
 8007cde:	e009      	b.n	8007cf4 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ce4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d002      	beq.n	8007cf2 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	2240      	movs	r2, #64	; 0x40
 8007cf0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8007cf2:	2300      	movs	r3, #0

}
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	3714      	adds	r7, #20
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfe:	4770      	bx	lr
 8007d00:	20000000 	.word	0x20000000
 8007d04:	10624dd3 	.word	0x10624dd3

08007d08 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8007d08:	b480      	push	{r7}
 8007d0a:	b085      	sub	sp, #20
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007d10:	4b11      	ldr	r3, [pc, #68]	; (8007d58 <SDMMC_GetCmdError+0x50>)
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	4a11      	ldr	r2, [pc, #68]	; (8007d5c <SDMMC_GetCmdError+0x54>)
 8007d16:	fba2 2303 	umull	r2, r3, r2, r3
 8007d1a:	0a5b      	lsrs	r3, r3, #9
 8007d1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d20:	fb02 f303 	mul.w	r3, r2, r3
 8007d24:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	1e5a      	subs	r2, r3, #1
 8007d2a:	60fa      	str	r2, [r7, #12]
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d102      	bne.n	8007d36 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007d30:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007d34:	e009      	b.n	8007d4a <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d0f1      	beq.n	8007d26 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	4a06      	ldr	r2, [pc, #24]	; (8007d60 <SDMMC_GetCmdError+0x58>)
 8007d46:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 8007d48:	2300      	movs	r3, #0
}
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	3714      	adds	r7, #20
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d54:	4770      	bx	lr
 8007d56:	bf00      	nop
 8007d58:	20000000 	.word	0x20000000
 8007d5c:	10624dd3 	.word	0x10624dd3
 8007d60:	002000c5 	.word	0x002000c5

08007d64 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007d64:	b084      	sub	sp, #16
 8007d66:	b580      	push	{r7, lr}
 8007d68:	b084      	sub	sp, #16
 8007d6a:	af00      	add	r7, sp, #0
 8007d6c:	6078      	str	r0, [r7, #4]
 8007d6e:	f107 001c 	add.w	r0, r7, #28
 8007d72:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	68db      	ldr	r3, [r3, #12]
 8007d7a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8007d82:	6878      	ldr	r0, [r7, #4]
 8007d84:	f000 fa70 	bl	8008268 <USB_CoreReset>
 8007d88:	4603      	mov	r3, r0
 8007d8a:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8007d8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d106      	bne.n	8007da0 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d96:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	639a      	str	r2, [r3, #56]	; 0x38
 8007d9e:	e005      	b.n	8007dac <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007da4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8007dac:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dae:	4618      	mov	r0, r3
 8007db0:	3710      	adds	r7, #16
 8007db2:	46bd      	mov	sp, r7
 8007db4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007db8:	b004      	add	sp, #16
 8007dba:	4770      	bx	lr

08007dbc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007dbc:	b480      	push	{r7}
 8007dbe:	b083      	sub	sp, #12
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	689b      	ldr	r3, [r3, #8]
 8007dc8:	f023 0201 	bic.w	r2, r3, #1
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007dd0:	2300      	movs	r3, #0
}
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	370c      	adds	r7, #12
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ddc:	4770      	bx	lr

08007dde <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8007dde:	b580      	push	{r7, lr}
 8007de0:	b084      	sub	sp, #16
 8007de2:	af00      	add	r7, sp, #0
 8007de4:	6078      	str	r0, [r7, #4]
 8007de6:	460b      	mov	r3, r1
 8007de8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007dea:	2300      	movs	r3, #0
 8007dec:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	68db      	ldr	r3, [r3, #12]
 8007df2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007dfa:	78fb      	ldrb	r3, [r7, #3]
 8007dfc:	2b01      	cmp	r3, #1
 8007dfe:	d115      	bne.n	8007e2c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	68db      	ldr	r3, [r3, #12]
 8007e04:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007e0c:	2001      	movs	r0, #1
 8007e0e:	f7f9 fcf9 	bl	8001804 <HAL_Delay>
      ms++;
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	3301      	adds	r3, #1
 8007e16:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007e18:	6878      	ldr	r0, [r7, #4]
 8007e1a:	f000 fa17 	bl	800824c <USB_GetMode>
 8007e1e:	4603      	mov	r3, r0
 8007e20:	2b01      	cmp	r3, #1
 8007e22:	d01e      	beq.n	8007e62 <USB_SetCurrentMode+0x84>
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	2b31      	cmp	r3, #49	; 0x31
 8007e28:	d9f0      	bls.n	8007e0c <USB_SetCurrentMode+0x2e>
 8007e2a:	e01a      	b.n	8007e62 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007e2c:	78fb      	ldrb	r3, [r7, #3]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d115      	bne.n	8007e5e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	68db      	ldr	r3, [r3, #12]
 8007e36:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007e3e:	2001      	movs	r0, #1
 8007e40:	f7f9 fce0 	bl	8001804 <HAL_Delay>
      ms++;
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	3301      	adds	r3, #1
 8007e48:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007e4a:	6878      	ldr	r0, [r7, #4]
 8007e4c:	f000 f9fe 	bl	800824c <USB_GetMode>
 8007e50:	4603      	mov	r3, r0
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d005      	beq.n	8007e62 <USB_SetCurrentMode+0x84>
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	2b31      	cmp	r3, #49	; 0x31
 8007e5a:	d9f0      	bls.n	8007e3e <USB_SetCurrentMode+0x60>
 8007e5c:	e001      	b.n	8007e62 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007e5e:	2301      	movs	r3, #1
 8007e60:	e005      	b.n	8007e6e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	2b32      	cmp	r3, #50	; 0x32
 8007e66:	d101      	bne.n	8007e6c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007e68:	2301      	movs	r3, #1
 8007e6a:	e000      	b.n	8007e6e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007e6c:	2300      	movs	r3, #0
}
 8007e6e:	4618      	mov	r0, r3
 8007e70:	3710      	adds	r7, #16
 8007e72:	46bd      	mov	sp, r7
 8007e74:	bd80      	pop	{r7, pc}
	...

08007e78 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007e78:	b084      	sub	sp, #16
 8007e7a:	b580      	push	{r7, lr}
 8007e7c:	b086      	sub	sp, #24
 8007e7e:	af00      	add	r7, sp, #0
 8007e80:	6078      	str	r0, [r7, #4]
 8007e82:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007e86:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007e8a:	2300      	movs	r3, #0
 8007e8c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007e92:	2300      	movs	r3, #0
 8007e94:	613b      	str	r3, [r7, #16]
 8007e96:	e009      	b.n	8007eac <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007e98:	687a      	ldr	r2, [r7, #4]
 8007e9a:	693b      	ldr	r3, [r7, #16]
 8007e9c:	3340      	adds	r3, #64	; 0x40
 8007e9e:	009b      	lsls	r3, r3, #2
 8007ea0:	4413      	add	r3, r2
 8007ea2:	2200      	movs	r2, #0
 8007ea4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007ea6:	693b      	ldr	r3, [r7, #16]
 8007ea8:	3301      	adds	r3, #1
 8007eaa:	613b      	str	r3, [r7, #16]
 8007eac:	693b      	ldr	r3, [r7, #16]
 8007eae:	2b0e      	cmp	r3, #14
 8007eb0:	d9f2      	bls.n	8007e98 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007eb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d11c      	bne.n	8007ef2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ebe:	685b      	ldr	r3, [r3, #4]
 8007ec0:	68fa      	ldr	r2, [r7, #12]
 8007ec2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007ec6:	f043 0302 	orr.w	r3, r3, #2
 8007eca:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ed0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	601a      	str	r2, [r3, #0]
 8007ef0:	e005      	b.n	8007efe <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ef6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007f04:	461a      	mov	r2, r3
 8007f06:	2300      	movs	r3, #0
 8007f08:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f10:	4619      	mov	r1, r3
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f18:	461a      	mov	r2, r3
 8007f1a:	680b      	ldr	r3, [r1, #0]
 8007f1c:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007f1e:	2103      	movs	r1, #3
 8007f20:	6878      	ldr	r0, [r7, #4]
 8007f22:	f000 f959 	bl	80081d8 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007f26:	2110      	movs	r1, #16
 8007f28:	6878      	ldr	r0, [r7, #4]
 8007f2a:	f000 f8f1 	bl	8008110 <USB_FlushTxFifo>
 8007f2e:	4603      	mov	r3, r0
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d001      	beq.n	8007f38 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 8007f34:	2301      	movs	r3, #1
 8007f36:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007f38:	6878      	ldr	r0, [r7, #4]
 8007f3a:	f000 f91d 	bl	8008178 <USB_FlushRxFifo>
 8007f3e:	4603      	mov	r3, r0
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d001      	beq.n	8007f48 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 8007f44:	2301      	movs	r3, #1
 8007f46:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f4e:	461a      	mov	r2, r3
 8007f50:	2300      	movs	r3, #0
 8007f52:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f5a:	461a      	mov	r2, r3
 8007f5c:	2300      	movs	r3, #0
 8007f5e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f66:	461a      	mov	r2, r3
 8007f68:	2300      	movs	r3, #0
 8007f6a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007f6c:	2300      	movs	r3, #0
 8007f6e:	613b      	str	r3, [r7, #16]
 8007f70:	e043      	b.n	8007ffa <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007f72:	693b      	ldr	r3, [r7, #16]
 8007f74:	015a      	lsls	r2, r3, #5
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	4413      	add	r3, r2
 8007f7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007f84:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007f88:	d118      	bne.n	8007fbc <USB_DevInit+0x144>
    {
      if (i == 0U)
 8007f8a:	693b      	ldr	r3, [r7, #16]
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d10a      	bne.n	8007fa6 <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007f90:	693b      	ldr	r3, [r7, #16]
 8007f92:	015a      	lsls	r2, r3, #5
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	4413      	add	r3, r2
 8007f98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f9c:	461a      	mov	r2, r3
 8007f9e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007fa2:	6013      	str	r3, [r2, #0]
 8007fa4:	e013      	b.n	8007fce <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007fa6:	693b      	ldr	r3, [r7, #16]
 8007fa8:	015a      	lsls	r2, r3, #5
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	4413      	add	r3, r2
 8007fae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fb2:	461a      	mov	r2, r3
 8007fb4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007fb8:	6013      	str	r3, [r2, #0]
 8007fba:	e008      	b.n	8007fce <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007fbc:	693b      	ldr	r3, [r7, #16]
 8007fbe:	015a      	lsls	r2, r3, #5
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	4413      	add	r3, r2
 8007fc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fc8:	461a      	mov	r2, r3
 8007fca:	2300      	movs	r3, #0
 8007fcc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007fce:	693b      	ldr	r3, [r7, #16]
 8007fd0:	015a      	lsls	r2, r3, #5
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	4413      	add	r3, r2
 8007fd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fda:	461a      	mov	r2, r3
 8007fdc:	2300      	movs	r3, #0
 8007fde:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007fe0:	693b      	ldr	r3, [r7, #16]
 8007fe2:	015a      	lsls	r2, r3, #5
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	4413      	add	r3, r2
 8007fe8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fec:	461a      	mov	r2, r3
 8007fee:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007ff2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007ff4:	693b      	ldr	r3, [r7, #16]
 8007ff6:	3301      	adds	r3, #1
 8007ff8:	613b      	str	r3, [r7, #16]
 8007ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ffc:	693a      	ldr	r2, [r7, #16]
 8007ffe:	429a      	cmp	r2, r3
 8008000:	d3b7      	bcc.n	8007f72 <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008002:	2300      	movs	r3, #0
 8008004:	613b      	str	r3, [r7, #16]
 8008006:	e043      	b.n	8008090 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008008:	693b      	ldr	r3, [r7, #16]
 800800a:	015a      	lsls	r2, r3, #5
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	4413      	add	r3, r2
 8008010:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800801a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800801e:	d118      	bne.n	8008052 <USB_DevInit+0x1da>
    {
      if (i == 0U)
 8008020:	693b      	ldr	r3, [r7, #16]
 8008022:	2b00      	cmp	r3, #0
 8008024:	d10a      	bne.n	800803c <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008026:	693b      	ldr	r3, [r7, #16]
 8008028:	015a      	lsls	r2, r3, #5
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	4413      	add	r3, r2
 800802e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008032:	461a      	mov	r2, r3
 8008034:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008038:	6013      	str	r3, [r2, #0]
 800803a:	e013      	b.n	8008064 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800803c:	693b      	ldr	r3, [r7, #16]
 800803e:	015a      	lsls	r2, r3, #5
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	4413      	add	r3, r2
 8008044:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008048:	461a      	mov	r2, r3
 800804a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800804e:	6013      	str	r3, [r2, #0]
 8008050:	e008      	b.n	8008064 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008052:	693b      	ldr	r3, [r7, #16]
 8008054:	015a      	lsls	r2, r3, #5
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	4413      	add	r3, r2
 800805a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800805e:	461a      	mov	r2, r3
 8008060:	2300      	movs	r3, #0
 8008062:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008064:	693b      	ldr	r3, [r7, #16]
 8008066:	015a      	lsls	r2, r3, #5
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	4413      	add	r3, r2
 800806c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008070:	461a      	mov	r2, r3
 8008072:	2300      	movs	r3, #0
 8008074:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008076:	693b      	ldr	r3, [r7, #16]
 8008078:	015a      	lsls	r2, r3, #5
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	4413      	add	r3, r2
 800807e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008082:	461a      	mov	r2, r3
 8008084:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008088:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800808a:	693b      	ldr	r3, [r7, #16]
 800808c:	3301      	adds	r3, #1
 800808e:	613b      	str	r3, [r7, #16]
 8008090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008092:	693a      	ldr	r2, [r7, #16]
 8008094:	429a      	cmp	r2, r3
 8008096:	d3b7      	bcc.n	8008008 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800809e:	691b      	ldr	r3, [r3, #16]
 80080a0:	68fa      	ldr	r2, [r7, #12]
 80080a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80080a6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80080aa:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	2200      	movs	r2, #0
 80080b0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80080b8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	699b      	ldr	r3, [r3, #24]
 80080be:	f043 0210 	orr.w	r2, r3, #16
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	699a      	ldr	r2, [r3, #24]
 80080ca:	4b10      	ldr	r3, [pc, #64]	; (800810c <USB_DevInit+0x294>)
 80080cc:	4313      	orrs	r3, r2
 80080ce:	687a      	ldr	r2, [r7, #4]
 80080d0:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80080d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d005      	beq.n	80080e4 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	699b      	ldr	r3, [r3, #24]
 80080dc:	f043 0208 	orr.w	r2, r3, #8
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80080e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80080e6:	2b01      	cmp	r3, #1
 80080e8:	d107      	bne.n	80080fa <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	699b      	ldr	r3, [r3, #24]
 80080ee:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80080f2:	f043 0304 	orr.w	r3, r3, #4
 80080f6:	687a      	ldr	r2, [r7, #4]
 80080f8:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80080fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80080fc:	4618      	mov	r0, r3
 80080fe:	3718      	adds	r7, #24
 8008100:	46bd      	mov	sp, r7
 8008102:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008106:	b004      	add	sp, #16
 8008108:	4770      	bx	lr
 800810a:	bf00      	nop
 800810c:	803c3800 	.word	0x803c3800

08008110 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008110:	b480      	push	{r7}
 8008112:	b085      	sub	sp, #20
 8008114:	af00      	add	r7, sp, #0
 8008116:	6078      	str	r0, [r7, #4]
 8008118:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800811a:	2300      	movs	r3, #0
 800811c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	3301      	adds	r3, #1
 8008122:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	4a13      	ldr	r2, [pc, #76]	; (8008174 <USB_FlushTxFifo+0x64>)
 8008128:	4293      	cmp	r3, r2
 800812a:	d901      	bls.n	8008130 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800812c:	2303      	movs	r3, #3
 800812e:	e01b      	b.n	8008168 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	691b      	ldr	r3, [r3, #16]
 8008134:	2b00      	cmp	r3, #0
 8008136:	daf2      	bge.n	800811e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008138:	2300      	movs	r3, #0
 800813a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800813c:	683b      	ldr	r3, [r7, #0]
 800813e:	019b      	lsls	r3, r3, #6
 8008140:	f043 0220 	orr.w	r2, r3, #32
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	3301      	adds	r3, #1
 800814c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	4a08      	ldr	r2, [pc, #32]	; (8008174 <USB_FlushTxFifo+0x64>)
 8008152:	4293      	cmp	r3, r2
 8008154:	d901      	bls.n	800815a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008156:	2303      	movs	r3, #3
 8008158:	e006      	b.n	8008168 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	691b      	ldr	r3, [r3, #16]
 800815e:	f003 0320 	and.w	r3, r3, #32
 8008162:	2b20      	cmp	r3, #32
 8008164:	d0f0      	beq.n	8008148 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008166:	2300      	movs	r3, #0
}
 8008168:	4618      	mov	r0, r3
 800816a:	3714      	adds	r7, #20
 800816c:	46bd      	mov	sp, r7
 800816e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008172:	4770      	bx	lr
 8008174:	00030d40 	.word	0x00030d40

08008178 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008178:	b480      	push	{r7}
 800817a:	b085      	sub	sp, #20
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008180:	2300      	movs	r3, #0
 8008182:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	3301      	adds	r3, #1
 8008188:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	4a11      	ldr	r2, [pc, #68]	; (80081d4 <USB_FlushRxFifo+0x5c>)
 800818e:	4293      	cmp	r3, r2
 8008190:	d901      	bls.n	8008196 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008192:	2303      	movs	r3, #3
 8008194:	e018      	b.n	80081c8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	691b      	ldr	r3, [r3, #16]
 800819a:	2b00      	cmp	r3, #0
 800819c:	daf2      	bge.n	8008184 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800819e:	2300      	movs	r3, #0
 80081a0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	2210      	movs	r2, #16
 80081a6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	3301      	adds	r3, #1
 80081ac:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	4a08      	ldr	r2, [pc, #32]	; (80081d4 <USB_FlushRxFifo+0x5c>)
 80081b2:	4293      	cmp	r3, r2
 80081b4:	d901      	bls.n	80081ba <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80081b6:	2303      	movs	r3, #3
 80081b8:	e006      	b.n	80081c8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	691b      	ldr	r3, [r3, #16]
 80081be:	f003 0310 	and.w	r3, r3, #16
 80081c2:	2b10      	cmp	r3, #16
 80081c4:	d0f0      	beq.n	80081a8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80081c6:	2300      	movs	r3, #0
}
 80081c8:	4618      	mov	r0, r3
 80081ca:	3714      	adds	r7, #20
 80081cc:	46bd      	mov	sp, r7
 80081ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d2:	4770      	bx	lr
 80081d4:	00030d40 	.word	0x00030d40

080081d8 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80081d8:	b480      	push	{r7}
 80081da:	b085      	sub	sp, #20
 80081dc:	af00      	add	r7, sp, #0
 80081de:	6078      	str	r0, [r7, #4]
 80081e0:	460b      	mov	r3, r1
 80081e2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081ee:	681a      	ldr	r2, [r3, #0]
 80081f0:	78fb      	ldrb	r3, [r7, #3]
 80081f2:	68f9      	ldr	r1, [r7, #12]
 80081f4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80081f8:	4313      	orrs	r3, r2
 80081fa:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80081fc:	2300      	movs	r3, #0
}
 80081fe:	4618      	mov	r0, r3
 8008200:	3714      	adds	r7, #20
 8008202:	46bd      	mov	sp, r7
 8008204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008208:	4770      	bx	lr

0800820a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800820a:	b480      	push	{r7}
 800820c:	b085      	sub	sp, #20
 800820e:	af00      	add	r7, sp, #0
 8008210:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	68fa      	ldr	r2, [r7, #12]
 8008220:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008224:	f023 0303 	bic.w	r3, r3, #3
 8008228:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008230:	685b      	ldr	r3, [r3, #4]
 8008232:	68fa      	ldr	r2, [r7, #12]
 8008234:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008238:	f043 0302 	orr.w	r3, r3, #2
 800823c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800823e:	2300      	movs	r3, #0
}
 8008240:	4618      	mov	r0, r3
 8008242:	3714      	adds	r7, #20
 8008244:	46bd      	mov	sp, r7
 8008246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800824a:	4770      	bx	lr

0800824c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800824c:	b480      	push	{r7}
 800824e:	b083      	sub	sp, #12
 8008250:	af00      	add	r7, sp, #0
 8008252:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	695b      	ldr	r3, [r3, #20]
 8008258:	f003 0301 	and.w	r3, r3, #1
}
 800825c:	4618      	mov	r0, r3
 800825e:	370c      	adds	r7, #12
 8008260:	46bd      	mov	sp, r7
 8008262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008266:	4770      	bx	lr

08008268 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008268:	b480      	push	{r7}
 800826a:	b085      	sub	sp, #20
 800826c:	af00      	add	r7, sp, #0
 800826e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008270:	2300      	movs	r3, #0
 8008272:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	3301      	adds	r3, #1
 8008278:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	4a13      	ldr	r2, [pc, #76]	; (80082cc <USB_CoreReset+0x64>)
 800827e:	4293      	cmp	r3, r2
 8008280:	d901      	bls.n	8008286 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008282:	2303      	movs	r3, #3
 8008284:	e01b      	b.n	80082be <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	691b      	ldr	r3, [r3, #16]
 800828a:	2b00      	cmp	r3, #0
 800828c:	daf2      	bge.n	8008274 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800828e:	2300      	movs	r3, #0
 8008290:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	691b      	ldr	r3, [r3, #16]
 8008296:	f043 0201 	orr.w	r2, r3, #1
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	3301      	adds	r3, #1
 80082a2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	4a09      	ldr	r2, [pc, #36]	; (80082cc <USB_CoreReset+0x64>)
 80082a8:	4293      	cmp	r3, r2
 80082aa:	d901      	bls.n	80082b0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80082ac:	2303      	movs	r3, #3
 80082ae:	e006      	b.n	80082be <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	691b      	ldr	r3, [r3, #16]
 80082b4:	f003 0301 	and.w	r3, r3, #1
 80082b8:	2b01      	cmp	r3, #1
 80082ba:	d0f0      	beq.n	800829e <USB_CoreReset+0x36>

  return HAL_OK;
 80082bc:	2300      	movs	r3, #0
}
 80082be:	4618      	mov	r0, r3
 80082c0:	3714      	adds	r7, #20
 80082c2:	46bd      	mov	sp, r7
 80082c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c8:	4770      	bx	lr
 80082ca:	bf00      	nop
 80082cc:	00030d40 	.word	0x00030d40

080082d0 <__libc_init_array>:
 80082d0:	b570      	push	{r4, r5, r6, lr}
 80082d2:	4d0d      	ldr	r5, [pc, #52]	; (8008308 <__libc_init_array+0x38>)
 80082d4:	4c0d      	ldr	r4, [pc, #52]	; (800830c <__libc_init_array+0x3c>)
 80082d6:	1b64      	subs	r4, r4, r5
 80082d8:	10a4      	asrs	r4, r4, #2
 80082da:	2600      	movs	r6, #0
 80082dc:	42a6      	cmp	r6, r4
 80082de:	d109      	bne.n	80082f4 <__libc_init_array+0x24>
 80082e0:	4d0b      	ldr	r5, [pc, #44]	; (8008310 <__libc_init_array+0x40>)
 80082e2:	4c0c      	ldr	r4, [pc, #48]	; (8008314 <__libc_init_array+0x44>)
 80082e4:	f000 f820 	bl	8008328 <_init>
 80082e8:	1b64      	subs	r4, r4, r5
 80082ea:	10a4      	asrs	r4, r4, #2
 80082ec:	2600      	movs	r6, #0
 80082ee:	42a6      	cmp	r6, r4
 80082f0:	d105      	bne.n	80082fe <__libc_init_array+0x2e>
 80082f2:	bd70      	pop	{r4, r5, r6, pc}
 80082f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80082f8:	4798      	blx	r3
 80082fa:	3601      	adds	r6, #1
 80082fc:	e7ee      	b.n	80082dc <__libc_init_array+0xc>
 80082fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8008302:	4798      	blx	r3
 8008304:	3601      	adds	r6, #1
 8008306:	e7f2      	b.n	80082ee <__libc_init_array+0x1e>
 8008308:	080083b8 	.word	0x080083b8
 800830c:	080083b8 	.word	0x080083b8
 8008310:	080083b8 	.word	0x080083b8
 8008314:	080083bc 	.word	0x080083bc

08008318 <memset>:
 8008318:	4402      	add	r2, r0
 800831a:	4603      	mov	r3, r0
 800831c:	4293      	cmp	r3, r2
 800831e:	d100      	bne.n	8008322 <memset+0xa>
 8008320:	4770      	bx	lr
 8008322:	f803 1b01 	strb.w	r1, [r3], #1
 8008326:	e7f9      	b.n	800831c <memset+0x4>

08008328 <_init>:
 8008328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800832a:	bf00      	nop
 800832c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800832e:	bc08      	pop	{r3}
 8008330:	469e      	mov	lr, r3
 8008332:	4770      	bx	lr

08008334 <_fini>:
 8008334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008336:	bf00      	nop
 8008338:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800833a:	bc08      	pop	{r3}
 800833c:	469e      	mov	lr, r3
 800833e:	4770      	bx	lr
